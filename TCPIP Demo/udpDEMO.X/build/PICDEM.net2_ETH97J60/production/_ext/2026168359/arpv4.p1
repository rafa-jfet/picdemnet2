Version 3.2 HI-TECH Software Intermediate Code
"52 ../../TCPIP Library/include\mac_address.h
[s S23 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S23 . byte1 byte2 byte3 byte4 byte5 byte6 ]
"50
[u S22 `uc -> 6 `i `S23 1 ]
[n S22 . mac_array s ]
"72 ../../TCPIP Library/source/arpv4.c
[s S27 `S22 1 `ul 1 `ui 1 `uc 1 ]
[n S27 . macAddress ipAddress protocolType age ]
"98
[c E450 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .. ]
[n E450 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED  ]
"54
[s S26 `ui 1 `ui 1 `uc 1 `uc 1 `ui 1 `S22 1 `ul 1 `S22 1 `ul 1 ]
[n S26 . htype ptype hlen plen oper sha spa tha tpa ]
"99 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"63 ../../TCPIP Library/include\ipv4.h
[v _ipv4Address `ul ~T0 @X0 0 e ]
"106 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_WriteStart `(E450 ~T0 @X0 0 ef2`*CS22`ui ]
"119
[v _ETH_GetMAC `(v ~T0 @X0 0 ef1`*uc ]
"107
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"114
[v _ETH_Send `(E450 ~T0 @X0 0 ef ]
"55 ../../TCPIP Library/include\mac_address.h
[v _broadcastMAC `CS22 ~T0 @X0 0 e ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 25: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 34: extern char * strcat(char *, const char *);
[; ;string.h: 35: extern char * strcpy(char *, const char *);
[; ;string.h: 36: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 37: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 38: extern char * strdup(const char *);
[; ;string.h: 39: extern char * strtok(char *, const char *);
[; ;string.h: 42: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 43: extern int strcmp(const char *, const char *);
[; ;string.h: 44: extern int stricmp(const char *, const char *);
[; ;string.h: 45: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 46: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 47: extern void * memchr(const void *, int, size_t);
[; ;string.h: 48: extern size_t strcspn(const char *, const char *);
[; ;string.h: 49: extern char * strpbrk(const char *, const char *);
[; ;string.h: 50: extern size_t strspn(const char *, const char *);
[; ;string.h: 51: extern char * strstr(const char *, const char *);
[; ;string.h: 52: extern char * stristr(const char *, const char *);
[; ;string.h: 53: extern char * strerror(int);
[; ;string.h: 54: extern size_t strlen(const char *);
[; ;string.h: 55: extern char * strchr(const char *, int);
[; ;string.h: 56: extern char * strichr(const char *, int);
[; ;string.h: 57: extern char * strrchr(const char *, int);
[; ;string.h: 58: extern char * strrichr(const char *, int);
[; ;include\tcpip_types.h: 51: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;include\tcpip_types.h: 53: typedef union
[; ;include\tcpip_types.h: 54: {
[; ;include\tcpip_types.h: 55: uint16_t value;
[; ;include\tcpip_types.h: 56: struct
[; ;include\tcpip_types.h: 57: {
[; ;include\tcpip_types.h: 58: unsigned int priorityCodePoint:3;
[; ;include\tcpip_types.h: 59: unsigned int dropEligible:1;
[; ;include\tcpip_types.h: 60: unsigned int vlanId:12;
[; ;include\tcpip_types.h: 61: };
[; ;include\tcpip_types.h: 62: } tci_t;
[; ;include\tcpip_types.h: 64: typedef struct
[; ;include\tcpip_types.h: 65: {
[; ;include\tcpip_types.h: 66: uint8_t destinationMAC[6];
[; ;include\tcpip_types.h: 67: uint8_t sourceMAC[6];
[; ;include\tcpip_types.h: 68: union
[; ;include\tcpip_types.h: 69: {
[; ;include\tcpip_types.h: 70: uint16_t type;
[; ;include\tcpip_types.h: 71: uint16_t length;
[; ;include\tcpip_types.h: 72: uint16_t tpid;
[; ;include\tcpip_types.h: 73: }id;
[; ;include\tcpip_types.h: 78: } ethernetFrame_t;
"80 ../../TCPIP Library/include\tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;include\tcpip_types.h: 80: uint8_t Control_Byte = 0x00;
[; ;include\tcpip_types.h: 88: typedef struct
[; ;include\tcpip_types.h: 89: {
[; ;include\tcpip_types.h: 90: unsigned ihl:4;
[; ;include\tcpip_types.h: 91: unsigned version:4;
[; ;include\tcpip_types.h: 92: unsigned ecn:2;
[; ;include\tcpip_types.h: 93: unsigned dscp:6;
[; ;include\tcpip_types.h: 94: uint16_t length;
[; ;include\tcpip_types.h: 95: uint16_t identifcation;
[; ;include\tcpip_types.h: 96: unsigned fragmentOffsetHigh:5;
[; ;include\tcpip_types.h: 97: unsigned :1;
[; ;include\tcpip_types.h: 98: unsigned dontFragment:1;
[; ;include\tcpip_types.h: 99: unsigned moreFragments:1;
[; ;include\tcpip_types.h: 100: uint8_t fragmentOffsetLow;
[; ;include\tcpip_types.h: 101: uint8_t timeToLive;
[; ;include\tcpip_types.h: 102: uint8_t protocol;
[; ;include\tcpip_types.h: 103: uint16_t headerCksm;
[; ;include\tcpip_types.h: 104: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 105: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 108: } ipv4Header_t;
[; ;include\tcpip_types.h: 111: typedef struct
[; ;include\tcpip_types.h: 112: {
[; ;include\tcpip_types.h: 113: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 114: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 115: uint8_t protocol;
[; ;include\tcpip_types.h: 116: uint8_t z;
[; ;include\tcpip_types.h: 117: uint16_t length;
[; ;include\tcpip_types.h: 118: } ipv4_pseudo_header_t;
[; ;include\tcpip_types.h: 120: typedef struct
[; ;include\tcpip_types.h: 121: {
[; ;include\tcpip_types.h: 122: union
[; ;include\tcpip_types.h: 123: {
[; ;include\tcpip_types.h: 124: uint16_t typeCode;
[; ;include\tcpip_types.h: 125: struct
[; ;include\tcpip_types.h: 126: {
[; ;include\tcpip_types.h: 127: uint8_t code;
[; ;include\tcpip_types.h: 128: uint8_t type;
[; ;include\tcpip_types.h: 129: };
[; ;include\tcpip_types.h: 130: };
[; ;include\tcpip_types.h: 131: uint16_t checksum;
[; ;include\tcpip_types.h: 132: uint16_t identifier;
[; ;include\tcpip_types.h: 133: uint16_t sequence;
[; ;include\tcpip_types.h: 135: } icmpHeader_t;
[; ;include\tcpip_types.h: 138: typedef enum
[; ;include\tcpip_types.h: 139: {
[; ;include\tcpip_types.h: 140: ECHO_REPLY = 0x0000,
[; ;include\tcpip_types.h: 142: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;include\tcpip_types.h: 143: DEST_HOST_UNREACHABLE = 0x0301,
[; ;include\tcpip_types.h: 144: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;include\tcpip_types.h: 145: DEST_PORT_UNREACHABLE = 0x0303,
[; ;include\tcpip_types.h: 146: FRAGMENTATION_REQUIRED = 0x0304,
[; ;include\tcpip_types.h: 147: SOURCE_ROUTE_FAILED = 0x0305,
[; ;include\tcpip_types.h: 148: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;include\tcpip_types.h: 149: SOURCE_HOST_ISOLATED = 0x0307,
[; ;include\tcpip_types.h: 150: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;include\tcpip_types.h: 151: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;include\tcpip_types.h: 152: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;include\tcpip_types.h: 153: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;include\tcpip_types.h: 154: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;include\tcpip_types.h: 155: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;include\tcpip_types.h: 156: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;include\tcpip_types.h: 158: SOURCE_QUENCH = 0x0400,
[; ;include\tcpip_types.h: 160: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;include\tcpip_types.h: 161: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;include\tcpip_types.h: 162: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;include\tcpip_types.h: 163: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;include\tcpip_types.h: 165: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;include\tcpip_types.h: 167: ECHO_REQUEST = 0x0800,
[; ;include\tcpip_types.h: 169: ROUTER_ADVERTISEMENT = 0x0900,
[; ;include\tcpip_types.h: 170: ROUTER_SOLICITATION = 0x0A00,
[; ;include\tcpip_types.h: 171: TRACEROUTE = 0x3000
[; ;include\tcpip_types.h: 172: } icmpTypeCodes_t;
[; ;include\tcpip_types.h: 174: typedef struct
[; ;include\tcpip_types.h: 175: {
[; ;include\tcpip_types.h: 176: uint16_t srcPort;
[; ;include\tcpip_types.h: 177: uint16_t dstPort;
[; ;include\tcpip_types.h: 178: uint16_t length;
[; ;include\tcpip_types.h: 179: uint16_t checksum;
[; ;include\tcpip_types.h: 180: } udpHeader_t;
[; ;include\tcpip_types.h: 182: typedef struct
[; ;include\tcpip_types.h: 183: {
[; ;include\tcpip_types.h: 184: uint16_t sourcePort;
[; ;include\tcpip_types.h: 185: uint16_t destPort;
[; ;include\tcpip_types.h: 186: uint32_t sequenceNumber;
[; ;include\tcpip_types.h: 187: uint32_t ackNumber;
[; ;include\tcpip_types.h: 188: union{
[; ;include\tcpip_types.h: 189: uint8_t byte13;
[; ;include\tcpip_types.h: 190: struct{
[; ;include\tcpip_types.h: 191: uint8_t ns:1;
[; ;include\tcpip_types.h: 192: uint8_t reserved:3;
[; ;include\tcpip_types.h: 193: uint8_t dataOffset:4;
[; ;include\tcpip_types.h: 194: };
[; ;include\tcpip_types.h: 195: };
[; ;include\tcpip_types.h: 197: union{
[; ;include\tcpip_types.h: 198: uint8_t flags;
[; ;include\tcpip_types.h: 199: struct{
[; ;include\tcpip_types.h: 200: uint8_t fin:1;
[; ;include\tcpip_types.h: 201: uint8_t syn:1;
[; ;include\tcpip_types.h: 202: uint8_t rst:1;
[; ;include\tcpip_types.h: 203: uint8_t psh:1;
[; ;include\tcpip_types.h: 204: uint8_t ack:1;
[; ;include\tcpip_types.h: 205: uint8_t urg:1;
[; ;include\tcpip_types.h: 206: uint8_t ece:1;
[; ;include\tcpip_types.h: 207: uint8_t cwr:1;
[; ;include\tcpip_types.h: 208: };
[; ;include\tcpip_types.h: 209: };
[; ;include\tcpip_types.h: 211: uint16_t windowSize;
[; ;include\tcpip_types.h: 212: uint16_t checksum;
[; ;include\tcpip_types.h: 213: uint16_t urgentPtr;
[; ;include\tcpip_types.h: 217: } tcpHeader_t;
[; ;include\tcpip_types.h: 219: typedef struct
[; ;include\tcpip_types.h: 220: {
[; ;include\tcpip_types.h: 221: unsigned int version:4;
[; ;include\tcpip_types.h: 222: unsigned int trafficClass:8;
[; ;include\tcpip_types.h: 223: unsigned int flowLabel:20;
[; ;include\tcpip_types.h: 224: uint16_t payloadLength;
[; ;include\tcpip_types.h: 225: uint8_t nextHeader;
[; ;include\tcpip_types.h: 226: uint8_t hopLimit;
[; ;include\tcpip_types.h: 227: uint8_t srcAddress[8];
[; ;include\tcpip_types.h: 228: uint8_t dstAddress[8];
[; ;include\tcpip_types.h: 230: } ipv6Header_t;
[; ;include\tcpip_types.h: 233: typedef enum
[; ;include\tcpip_types.h: 234: {
[; ;include\tcpip_types.h: 235: HOPOPT = 0,
[; ;include\tcpip_types.h: 236: ICMP = 1,
[; ;include\tcpip_types.h: 237: IGMP = 2,
[; ;include\tcpip_types.h: 238: GGP = 3,
[; ;include\tcpip_types.h: 239: IPV4 = 4,
[; ;include\tcpip_types.h: 240: ST = 5,
[; ;include\tcpip_types.h: 241: TCP = 6,
[; ;include\tcpip_types.h: 242: CBT = 7,
[; ;include\tcpip_types.h: 243: EGP = 8,
[; ;include\tcpip_types.h: 244: IGP = 9,
[; ;include\tcpip_types.h: 245: BBN_RCC_MON = 10,
[; ;include\tcpip_types.h: 246: NVP_II = 11,
[; ;include\tcpip_types.h: 247: PUP = 12,
[; ;include\tcpip_types.h: 248: ARGUS = 13,
[; ;include\tcpip_types.h: 249: EMCON = 14,
[; ;include\tcpip_types.h: 250: XNET = 15,
[; ;include\tcpip_types.h: 251: CHAOS = 16,
[; ;include\tcpip_types.h: 252: UDP = 17,
[; ;include\tcpip_types.h: 253: MUX = 18,
[; ;include\tcpip_types.h: 254: DCN_MEAS = 19,
[; ;include\tcpip_types.h: 255: HMP = 20,
[; ;include\tcpip_types.h: 256: PRM = 21,
[; ;include\tcpip_types.h: 257: XNS_IDP = 22,
[; ;include\tcpip_types.h: 258: TRUNK_1 = 23,
[; ;include\tcpip_types.h: 259: TRUNK_2 = 24,
[; ;include\tcpip_types.h: 260: LEAF_1 = 25,
[; ;include\tcpip_types.h: 261: LEAF_2 = 26,
[; ;include\tcpip_types.h: 262: RDP = 27,
[; ;include\tcpip_types.h: 263: IRTP = 28,
[; ;include\tcpip_types.h: 264: ISO_TP4 = 29,
[; ;include\tcpip_types.h: 265: NETBLT = 30,
[; ;include\tcpip_types.h: 266: MFE_NSP = 31,
[; ;include\tcpip_types.h: 267: MERIT_INP = 32,
[; ;include\tcpip_types.h: 268: DCCP = 33,
[; ;include\tcpip_types.h: 269: THREEPC = 34,
[; ;include\tcpip_types.h: 270: IDPR = 35,
[; ;include\tcpip_types.h: 271: XTP = 36,
[; ;include\tcpip_types.h: 272: DDP = 37,
[; ;include\tcpip_types.h: 273: IDPR_CMTP = 38,
[; ;include\tcpip_types.h: 274: TPpp = 39,
[; ;include\tcpip_types.h: 275: IL = 40,
[; ;include\tcpip_types.h: 276: IPV6_TUNNEL = 41,
[; ;include\tcpip_types.h: 277: SDRP = 42,
[; ;include\tcpip_types.h: 278: IPV6_Route = 43,
[; ;include\tcpip_types.h: 279: IPV6_Frag = 44,
[; ;include\tcpip_types.h: 280: IDRP = 45,
[; ;include\tcpip_types.h: 281: RSVP = 46,
[; ;include\tcpip_types.h: 282: GRE = 47,
[; ;include\tcpip_types.h: 283: DSR = 48,
[; ;include\tcpip_types.h: 284: BNA = 49,
[; ;include\tcpip_types.h: 285: ESP = 50,
[; ;include\tcpip_types.h: 286: AH = 51,
[; ;include\tcpip_types.h: 287: I_NLSP = 52,
[; ;include\tcpip_types.h: 288: SWIPE = 53,
[; ;include\tcpip_types.h: 289: NARP = 54,
[; ;include\tcpip_types.h: 290: MOBILE = 55,
[; ;include\tcpip_types.h: 291: TLSP = 56,
[; ;include\tcpip_types.h: 292: SKIP = 57,
[; ;include\tcpip_types.h: 293: IPV6_ICMP = 58,
[; ;include\tcpip_types.h: 294: IPV6_NoNxt = 59,
[; ;include\tcpip_types.h: 295: IPV6_Opts = 60,
[; ;include\tcpip_types.h: 296: CFTP = 62,
[; ;include\tcpip_types.h: 297: SAT_EXPAK = 64,
[; ;include\tcpip_types.h: 298: KRYPTOLAN = 65,
[; ;include\tcpip_types.h: 299: RVD = 66,
[; ;include\tcpip_types.h: 300: IPPC = 67,
[; ;include\tcpip_types.h: 301: SAT_MON = 69,
[; ;include\tcpip_types.h: 302: VISA = 70,
[; ;include\tcpip_types.h: 303: IPCV = 71,
[; ;include\tcpip_types.h: 304: CPNX = 72,
[; ;include\tcpip_types.h: 305: CPHB = 73,
[; ;include\tcpip_types.h: 306: WSN = 74,
[; ;include\tcpip_types.h: 307: PVP = 75,
[; ;include\tcpip_types.h: 308: BR_SAT_MON = 76,
[; ;include\tcpip_types.h: 309: SUN_ND = 77,
[; ;include\tcpip_types.h: 310: WB_MON = 78,
[; ;include\tcpip_types.h: 311: WB_EXPAK = 79,
[; ;include\tcpip_types.h: 312: ISO_IP = 80,
[; ;include\tcpip_types.h: 313: VMTP = 81,
[; ;include\tcpip_types.h: 314: SECURE_VMTP = 82,
[; ;include\tcpip_types.h: 315: VINES = 83,
[; ;include\tcpip_types.h: 316: TTP = 84,
[; ;include\tcpip_types.h: 317: IPTM = 84,
[; ;include\tcpip_types.h: 318: NSFNET_IGP = 85,
[; ;include\tcpip_types.h: 319: DGP = 86,
[; ;include\tcpip_types.h: 320: TCF = 87,
[; ;include\tcpip_types.h: 321: EIGRP = 88,
[; ;include\tcpip_types.h: 322: OSPFIGP = 89,
[; ;include\tcpip_types.h: 323: Sprite_RPC = 90,
[; ;include\tcpip_types.h: 324: LARP = 91,
[; ;include\tcpip_types.h: 325: MTP = 92,
[; ;include\tcpip_types.h: 326: AX25 = 93,
[; ;include\tcpip_types.h: 327: IPIP = 94,
[; ;include\tcpip_types.h: 328: MICP = 95,
[; ;include\tcpip_types.h: 329: SCC_SP = 96,
[; ;include\tcpip_types.h: 330: ETHERIP = 97,
[; ;include\tcpip_types.h: 331: ENCAP = 98,
[; ;include\tcpip_types.h: 332: GMTP = 100,
[; ;include\tcpip_types.h: 333: IFMP = 101,
[; ;include\tcpip_types.h: 334: PNNI = 102,
[; ;include\tcpip_types.h: 335: PIM = 103,
[; ;include\tcpip_types.h: 336: ARIS = 104,
[; ;include\tcpip_types.h: 337: SCPS = 105,
[; ;include\tcpip_types.h: 338: QNX = 106,
[; ;include\tcpip_types.h: 339: A_N = 107,
[; ;include\tcpip_types.h: 340: IPComp = 108,
[; ;include\tcpip_types.h: 341: SNP = 109,
[; ;include\tcpip_types.h: 342: Compaq_Peer = 110,
[; ;include\tcpip_types.h: 343: IPX_in_IP = 111,
[; ;include\tcpip_types.h: 344: VRRP = 112,
[; ;include\tcpip_types.h: 345: PGM = 113,
[; ;include\tcpip_types.h: 346: L2TP = 115,
[; ;include\tcpip_types.h: 347: DDX = 116,
[; ;include\tcpip_types.h: 348: IATP = 117,
[; ;include\tcpip_types.h: 349: STP = 118,
[; ;include\tcpip_types.h: 350: SRP = 119,
[; ;include\tcpip_types.h: 351: UTI = 120,
[; ;include\tcpip_types.h: 353: SM = 122,
[; ;include\tcpip_types.h: 354: PTP = 123,
[; ;include\tcpip_types.h: 355: ISIS = 124,
[; ;include\tcpip_types.h: 356: FIRE = 125,
[; ;include\tcpip_types.h: 357: CRTP = 126,
[; ;include\tcpip_types.h: 358: CRUDP = 127,
[; ;include\tcpip_types.h: 359: SSCOPMCE = 128,
[; ;include\tcpip_types.h: 360: IPLT = 129,
[; ;include\tcpip_types.h: 361: SPS = 130,
[; ;include\tcpip_types.h: 362: PIPE = 131,
[; ;include\tcpip_types.h: 363: SCTP = 132,
[; ;include\tcpip_types.h: 364: FC = 133
[; ;include\tcpip_types.h: 365: } ipProtocolNumbers;
[; ;include\tcpip_types.h: 367: typedef struct
[; ;include\tcpip_types.h: 368: {
[; ;include\tcpip_types.h: 369: union{
[; ;include\tcpip_types.h: 370: uint32_t s_addr;
[; ;include\tcpip_types.h: 371: uint8_t s_addr_byte[4];
[; ;include\tcpip_types.h: 372: };
[; ;include\tcpip_types.h: 373: }inAddr_t;
[; ;include\tcpip_types.h: 375: typedef struct
[; ;include\tcpip_types.h: 376: {
[; ;include\tcpip_types.h: 377: uint16_t port;
[; ;include\tcpip_types.h: 378: inAddr_t addr;
[; ;include\tcpip_types.h: 379: }sockaddr_in_t;
[; ;include\tcpip_types.h: 381: typedef enum
[; ;include\tcpip_types.h: 382: {
[; ;include\tcpip_types.h: 383: ERROR =0,
[; ;include\tcpip_types.h: 384: SUCCESS,
[; ;include\tcpip_types.h: 385: LINK_NOT_FOUND,
[; ;include\tcpip_types.h: 386: BUFFER_BUSY,
[; ;include\tcpip_types.h: 387: TX_LOGIC_NOT_IDLE,
[; ;include\tcpip_types.h: 388: MAC_NOT_FOUND,
[; ;include\tcpip_types.h: 389: IP_WRONG_VERSION,
[; ;include\tcpip_types.h: 390: IPV4_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 391: DEST_IP_NOT_MATCHED,
[; ;include\tcpip_types.h: 392: ICMP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 393: UDP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 394: TCP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 395: DMA_TIMEOUT,
[; ;include\tcpip_types.h: 396: PORT_NOT_AVAILABLE,
[; ;include\tcpip_types.h: 397: ARP_IP_NOT_MATCHED
[; ;include\tcpip_types.h: 398: }error_msg;
[; ;include\tcpip_types.h: 400: typedef struct
[; ;include\tcpip_types.h: 401: {
[; ;include\tcpip_types.h: 402: inAddr_t dest_addr;
[; ;include\tcpip_types.h: 403: }destIP_t;
[; ;include\tcpip_types.h: 406: typedef int8_t socklistsize_t;
[; ;include\tcpip_types.h: 408: typedef void (*ip_receive_function_ptr)(int);
[; ;include\network.h: 62: void Network_Init(void);
[; ;include\network.h: 63: void Network_Read(void);
[; ;include\network.h: 64: void Network_Manage(void);
[; ;include\network.h: 65: void Network_WaitForLink(void);
[; ;include\mac_address.h: 49: typedef union
[; ;include\mac_address.h: 50: {
[; ;include\mac_address.h: 51: uint8_t mac_array[6];
[; ;include\mac_address.h: 52: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;include\mac_address.h: 53: } mac48Address_t;
[; ;include\mac_address.h: 55: extern const mac48Address_t broadcastMAC;
[; ;include\mac_address.h: 56: extern const mac48Address_t macAddress;
[; ;include\mac_address.h: 58: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_drivers\ethernet_driver.h: 51: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 52: {
[; ;ethernet_drivers\ethernet_driver.h: 53: uint16_t byteCount;
[; ;ethernet_drivers\ethernet_driver.h: 54: unsigned long_drop_event:1;
[; ;ethernet_drivers\ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 56: unsigned excessCarrierEvent:1;
[; ;ethernet_drivers\ethernet_driver.h: 57: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 58: unsigned crcError:1;
[; ;ethernet_drivers\ethernet_driver.h: 59: unsigned lengthCheckError:1;
[; ;ethernet_drivers\ethernet_driver.h: 60: unsigned lengthLongError:1;
[; ;ethernet_drivers\ethernet_driver.h: 61: unsigned rxOK:1;
[; ;ethernet_drivers\ethernet_driver.h: 62: unsigned rxMulticast:1;
[; ;ethernet_drivers\ethernet_driver.h: 63: unsigned rxBroadcast:1;
[; ;ethernet_drivers\ethernet_driver.h: 64: unsigned dribbleNibble:1;
[; ;ethernet_drivers\ethernet_driver.h: 65: unsigned controlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 66: unsigned pauseControlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 67: unsigned unknownContrlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 68: unsigned vlanTagPresent:1;
[; ;ethernet_drivers\ethernet_driver.h: 69: unsigned zero:1;
[; ;ethernet_drivers\ethernet_driver.h: 70: }receiveStatusVector_t;
[; ;ethernet_drivers\ethernet_driver.h: 72: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 73: {
[; ;ethernet_drivers\ethernet_driver.h: 74: unsigned error:1;
[; ;ethernet_drivers\ethernet_driver.h: 75: unsigned pktReady:1;
[; ;ethernet_drivers\ethernet_driver.h: 76: unsigned up:1;
[; ;ethernet_drivers\ethernet_driver.h: 77: unsigned idle:1;
[; ;ethernet_drivers\ethernet_driver.h: 78: unsigned linkChange:1;
[; ;ethernet_drivers\ethernet_driver.h: 79: unsigned bufferBusy:1;
[; ;ethernet_drivers\ethernet_driver.h: 80: unsigned :2;
[; ;ethernet_drivers\ethernet_driver.h: 81: uint16_t TXPacketSize;
[; ;ethernet_drivers\ethernet_driver.h: 82: uint16_t saveRDPT;
[; ;ethernet_drivers\ethernet_driver.h: 83: uint16_t saveWRPT;
[; ;ethernet_drivers\ethernet_driver.h: 84: } ethernetDriver_t;
[; ;ethernet_drivers\ethernet_driver.h: 86: extern volatile ethernetDriver_t ethData;
[; ;ethernet_drivers\ethernet_driver.h: 92: void ETH_Init(void);
[; ;ethernet_drivers\ethernet_driver.h: 93: void ETH_EventHandler(void);
[; ;ethernet_drivers\ethernet_driver.h: 94: void ETH_NextPacketUpdate();
[; ;ethernet_drivers\ethernet_driver.h: 95: void ETH_ResetReceiver(void);
[; ;ethernet_drivers\ethernet_driver.h: 96: void ETH_SendSystemReset(void);
[; ;ethernet_drivers\ethernet_driver.h: 99: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 100: uint8_t ETH_Read8(void);
[; ;ethernet_drivers\ethernet_driver.h: 101: uint16_t ETH_Read16(void);
[; ;ethernet_drivers\ethernet_driver.h: 102: uint32_t ETH_Read32(void);
[; ;ethernet_drivers\ethernet_driver.h: 103: void ETH_Dump(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 104: void ETH_Flush(void);
[; ;ethernet_drivers\ethernet_driver.h: 106: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_drivers\ethernet_driver.h: 107: uint16_t ETH_WriteBlock(void *, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 108: void ETH_Write8(uint8_t);
[; ;ethernet_drivers\ethernet_driver.h: 109: void ETH_Write16(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 110: void ETH_Write24(uint24_t data);
[; ;ethernet_drivers\ethernet_driver.h: 111: void ETH_Write32(uint32_t);
[; ;ethernet_drivers\ethernet_driver.h: 112: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 113: error_msg ETH_Copy(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 114: error_msg ETH_Send(void);
[; ;ethernet_drivers\ethernet_driver.h: 116: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 117: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 119: void ETH_GetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 120: void ETH_SetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 122: void ETH_SaveRDPT(void);
[; ;ethernet_drivers\ethernet_driver.h: 124: void ETH_ResetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 125: uint16_t ETH_GetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 127: bool ETH_CheckLinkUp();
"67 ../../TCPIP Library/include\tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 56 `c
-> 70 `c
-> 57 `c
-> 55 `c
-> 74 `c
-> 54 `c
-> 48 `c
-> 32 `c
-> 69 `c
-> 84 `c
-> 72 `c
-> 69 `c
-> 82 `c
-> 78 `c
-> 69 `c
-> 84 `c
-> 0 `c
..
]
[; ;include\tcpip_config.h: 67: const char dhcpName[] = "PIC18F97J60 ETHERNET";
[; ;include\arpv4.h: 62: void ARPV4_Init(void);
[; ;include\arpv4.h: 74: error_msg ARPV4_Packet(void);
[; ;include\arpv4.h: 80: void ARPV4_Update(void);
[; ;include\arpv4.h: 91: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;include\arpv4.h: 104: error_msg ARPV4_Request(uint32_t destAddress);
[; ;include\ipv4.h: 63: extern uint32_t ipv4Address;
[; ;include\ipv4.h: 64: extern uint32_t dstIPv4Address;
[; ;include\ipv4.h: 65: extern uint32_t ipv4Gateway;
[; ;include\ipv4.h: 66: extern uint8_t gatewayMAC[6];
[; ;include\ipv4.h: 67: extern uint32_t ipv4DNS[2];
[; ;include\ipv4.h: 68: extern uint32_t ipv4SubnetMask;
[; ;include\ipv4.h: 69: extern uint32_t ipv4Router;
[; ;include\ipv4.h: 70: extern ipv4Header_t ipv4Header;
[; ;include\ipv4.h: 79: void IPV4_Init(void);
[; ;include\ipv4.h: 86: error_msg IPV4_Packet(void);
[; ;include\ipv4.h: 103: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;include\ipv4.h: 111: uint32_t IPV4_GetMyIP(void);
[; ;include\ipv4.h: 122: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;include\ipv4.h: 136: error_msg IPV4_Send(uint16_t payloadLength);
[; ;include\syslog.h: 47: void SYSLOG_Init(void);
[; ;include\syslog.h: 48: void SYSLOG_Write(const char *message);
[; ;arpv4.c: 53: typedef struct
[; ;arpv4.c: 54: {
[; ;arpv4.c: 55: uint16_t htype;
[; ;arpv4.c: 56: uint16_t ptype;
[; ;arpv4.c: 57: uint8_t hlen;
[; ;arpv4.c: 58: uint8_t plen;
[; ;arpv4.c: 59: uint16_t oper;
[; ;arpv4.c: 60: mac48Address_t sha;
[; ;arpv4.c: 61: uint32_t spa;
[; ;arpv4.c: 62: mac48Address_t tha;
[; ;arpv4.c: 63: uint32_t tpa;
[; ;arpv4.c: 64: } arpHeader_t;
[; ;arpv4.c: 71: typedef struct
[; ;arpv4.c: 72: {
[; ;arpv4.c: 73: mac48Address_t macAddress;
[; ;arpv4.c: 74: uint32_t ipAddress;
[; ;arpv4.c: 75: uint16_t protocolType;
[; ;arpv4.c: 76: uint8_t age;
[; ;arpv4.c: 77: } arpMap_t;
"80 ../../TCPIP Library/source/arpv4.c
[v _arpMap `S27 ~T0 @X0 -> 8 `i e ]
[; ;arpv4.c: 80: arpMap_t arpMap[8];
"86
[v _ARPV4_Init `(v ~T0 @X0 1 ef ]
"87
{
[; ;arpv4.c: 86: void ARPV4_Init(void)
[; ;arpv4.c: 87: {
[e :U _ARPV4_Init ]
[f ]
[; ;arpv4.c: 88: for(uint8_t x= 0 ; x < sizeof(arpMap); x++)
"88
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `ui -> # _arpMap `ui 29  ]
[e $U 30  ]
"89
[e :U 29 ]
[; ;arpv4.c: 89: ((char *)arpMap)[x] = 0;
[e = *U + -> &U _arpMap `*uc * -> _x `ux -> -> # *U -> &U _arpMap `*uc `ui `ux -> -> 0 `i `uc ]
"88
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `ui -> # _arpMap `ui 29  ]
[e :U 30 ]
"89
}
[; ;arpv4.c: 90: }
"90
[e :UE 28 ]
}
"97
[v _ARPV4_Packet `(E450 ~T0 @X0 1 ef ]
"98
{
[; ;arpv4.c: 97: error_msg ARPV4_Packet(void)
[; ;arpv4.c: 98: {
[e :U _ARPV4_Packet ]
[f ]
"99
[v _header `S26 ~T0 @X0 1 a ]
"100
[v _entryPointer `*S27 ~T0 @X0 1 a ]
"101
[v _mergeFlag `uc ~T0 @X0 1 a ]
"102
[v _length `ui ~T0 @X0 1 a ]
"103
[v _ret `E450 ~T0 @X0 1 a ]
[; ;arpv4.c: 99: arpHeader_t header;
[; ;arpv4.c: 100: arpMap_t *entryPointer;
[; ;arpv4.c: 101: bool mergeFlag;
[; ;arpv4.c: 102: uint16_t length;
[; ;arpv4.c: 103: error_msg ret;
[; ;arpv4.c: 105: ret = ERROR;
"105
[e = _ret . `E450 0 ]
[; ;arpv4.c: 107: length = ETH_ReadBlock((char*)&header,sizeof(arpHeader_t));
"107
[e = _length ( _ETH_ReadBlock (2 , -> -> &U _header `*uc `*v -> # `S26 `ui ]
[; ;arpv4.c: 108: if(length == sizeof(arpHeader_t))
"108
[e $ ! == _length -> # `S26 `ui 33  ]
[; ;arpv4.c: 109: {
"109
{
[; ;arpv4.c: 111: mergeFlag = 0;
"111
[e = _mergeFlag -> -> 0 `i `uc ]
[; ;arpv4.c: 112: entryPointer = arpMap;
"112
[e = _entryPointer &U _arpMap ]
[; ;arpv4.c: 114: for(uint8_t x=8; x > 0; x--)
"114
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 8 `i `uc ]
[e $ > -> _x `i -> 0 `i 34  ]
[e $U 35  ]
"115
[e :U 34 ]
[; ;arpv4.c: 115: {
{
[; ;arpv4.c: 116: if( (header.spa == entryPointer->ipAddress) && (header.ptype == entryPointer->protocolType) )
"116
[e $ ! && == . _header 6 . *U _entryPointer 1 == . _header 1 . *U _entryPointer 2 37  ]
[; ;arpv4.c: 117: {
"117
{
[; ;arpv4.c: 118: entryPointer->age = 0;
"118
[e = . *U _entryPointer 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 119: entryPointer->macAddress.s = header.sha.s;
"119
[e = . . *U _entryPointer 0 1 . . _header 5 1 ]
[; ;arpv4.c: 120: mergeFlag = 1;
"120
[e = _mergeFlag -> -> 1 `i `uc ]
[; ;arpv4.c: 121: break;
"121
[e $U 35  ]
"122
}
[e :U 37 ]
[; ;arpv4.c: 122: }
[; ;arpv4.c: 123: entryPointer++;
"123
[e ++ _entryPointer * -> -> 1 `i `x -> -> # *U _entryPointer `i `x ]
"124
}
"114
[e -- _x -> -> 1 `i `uc ]
[e $ > -> _x `i -> 0 `i 34  ]
[e :U 35 ]
"124
}
[; ;arpv4.c: 124: }
[; ;arpv4.c: 126: if(ipv4Address && (ipv4Address == ((((uint32_t)header.tpa&(uint32_t)0xff000000) >> 24) | (((uint32_t)header.tpa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.tpa&(uint32_t)0x0000ff00) << 8) | (((uint32_t)header.tpa&(uint32_t)0x000000ff) << 24) )))
"126
[e $ ! && != _ipv4Address -> -> 0 `i `ul == _ipv4Address | | | >> & . _header 8 -> -16777216 `ul -> 24 `i >> & . _header 8 -> -> 16711680 `l `ul -> 8 `i << & . _header 8 -> -> 65280 `ui `ul -> 8 `i << & . _header 8 -> -> 255 `i `ul -> 24 `i 38  ]
[; ;arpv4.c: 127: {
"127
{
[; ;arpv4.c: 128: if(!mergeFlag)
"128
[e $ ! ! != -> _mergeFlag `i -> -> -> 0 `i `uc `i 39  ]
[; ;arpv4.c: 129: {
"129
{
[; ;arpv4.c: 131: entryPointer = arpMap;
"131
[e = _entryPointer &U _arpMap ]
"132
[v _arpPtr `*S27 ~T0 @X0 1 a ]
[; ;arpv4.c: 132: arpMap_t *arpPtr = arpMap;
[e = _arpPtr &U _arpMap ]
[; ;arpv4.c: 133: for(uint8_t x=8; x !=0; x--)
"133
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 8 `i `uc ]
[e $ != -> _x `i -> 0 `i 40  ]
[e $U 41  ]
"134
[e :U 40 ]
[; ;arpv4.c: 134: {
{
[; ;arpv4.c: 135: if(entryPointer->age < arpPtr->age)
"135
[e $ ! < -> . *U _entryPointer 3 `i -> . *U _arpPtr 3 `i 43  ]
[; ;arpv4.c: 136: {
"136
{
[; ;arpv4.c: 137: entryPointer = arpPtr;
"137
[e = _entryPointer _arpPtr ]
"138
}
[e :U 43 ]
[; ;arpv4.c: 138: }
[; ;arpv4.c: 140: arpPtr++;
"140
[e ++ _arpPtr * -> -> 1 `i `x -> -> # *U _arpPtr `i `x ]
"141
}
"133
[e -- _x -> -> 1 `i `uc ]
[e $ != -> _x `i -> 0 `i 40  ]
[e :U 41 ]
"141
}
[; ;arpv4.c: 141: }
[; ;arpv4.c: 144: entryPointer->age = 0;
"144
[e = . *U _entryPointer 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 145: entryPointer->macAddress.s = header.sha.s;
"145
[e = . . *U _entryPointer 0 1 . . _header 5 1 ]
[; ;arpv4.c: 146: entryPointer->ipAddress = ((((uint32_t)header.spa&(uint32_t)0xff000000) >> 24) | (((uint32_t)header.spa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.spa&(uint32_t)0x0000ff00) << 8) | (((uint32_t)header.spa&(uint32_t)0x000000ff) << 24) );
"146
[e = . *U _entryPointer 1 | | | >> & . _header 6 -> -16777216 `ul -> 24 `i >> & . _header 6 -> -> 16711680 `l `ul -> 8 `i << & . _header 6 -> -> 65280 `ui `ul -> 8 `i << & . _header 6 -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 147: entryPointer->protocolType = header.ptype;
"147
[e = . *U _entryPointer 2 . _header 1 ]
"148
}
[e :U 39 ]
[; ;arpv4.c: 148: }
[; ;arpv4.c: 149: if(header.oper == ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8)))
"149
[e $ ! == . _header 4 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i 44  ]
[; ;arpv4.c: 150: {
"150
{
[; ;arpv4.c: 151: ret = ETH_WriteStart(&header.sha ,0x0806);
"151
[e = _ret ( _ETH_WriteStart (2 , -> &U . _header 5 `*CS22 -> -> 2054 `i `ui ]
[; ;arpv4.c: 152: if(ret == SUCCESS)
"152
[e $ ! == -> _ret `i -> . `E450 1 `i 45  ]
[; ;arpv4.c: 153: {
"153
{
[; ;arpv4.c: 155: header.tha.s = header.sha.s;
"155
[e = . . _header 7 1 . . _header 5 1 ]
[; ;arpv4.c: 156: ETH_GetMAC((char*)&header.sha.s);
"156
[e ( _ETH_GetMAC (1 -> &U . . _header 5 1 `*uc ]
[; ;arpv4.c: 157: header.tpa = header.spa;
"157
[e = . _header 8 . _header 6 ]
[; ;arpv4.c: 158: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((uint32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
"158
[e = . _header 6 | | | >> & _ipv4Address -> -16777216 `ul -> 24 `i >> & _ipv4Address -> -> 16711680 `l `ul -> 8 `i << & _ipv4Address -> -> 65280 `ui `ul -> 8 `i << & _ipv4Address -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 159: header.oper = ((((uint16_t)2 & (uint16_t)0xFF00) >> 8) | (((uint16_t)2 & (uint16_t)0x00FF) << 8));
"159
[e = . _header 4 | >> & -> -> 2 `i `ui -> 65280 `ui -> 8 `i << & -> -> 2 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 160: ETH_WriteBlock((char*)&header,sizeof(header));
"160
[e ( _ETH_WriteBlock (2 , -> -> &U _header `*uc `*v -> # _header `ui ]
[; ;arpv4.c: 163: ret = ETH_Send();
"163
[e = _ret ( _ETH_Send ..  ]
"164
}
[e :U 45 ]
"165
}
[e :U 44 ]
"166
}
[; ;arpv4.c: 164: }
[; ;arpv4.c: 165: }
[; ;arpv4.c: 166: }
[e $U 46  ]
"167
[e :U 38 ]
[; ;arpv4.c: 167: else
[; ;arpv4.c: 168: {
"168
{
[; ;arpv4.c: 169: ret = ARP_IP_NOT_MATCHED;
"169
[e = _ret . `E450 14 ]
"170
}
[e :U 46 ]
"171
}
[e :U 33 ]
[; ;arpv4.c: 170: }
[; ;arpv4.c: 171: }
[; ;arpv4.c: 172: return ret;
"172
[e ) _ret ]
[e $UE 32  ]
[; ;arpv4.c: 173: }
"173
[e :UE 32 ]
}
"179
[v _ARPV4_Update `(v ~T0 @X0 1 ef ]
"180
{
[; ;arpv4.c: 179: void ARPV4_Update(void)
[; ;arpv4.c: 180: {
[e :U _ARPV4_Update ]
[f ]
"181
[v _entryPointer `*S27 ~T0 @X0 1 a ]
[; ;arpv4.c: 181: arpMap_t *entryPointer = arpMap;
[e = _entryPointer &U _arpMap ]
[; ;arpv4.c: 182: for(uint8_t x=0; x < 8; x++)
"182
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 48  ]
[e $U 49  ]
"183
[e :U 48 ]
[; ;arpv4.c: 183: {
{
[; ;arpv4.c: 184: entryPointer->age ++;
"184
[e ++ . *U _entryPointer 3 -> -> 1 `i `uc ]
[; ;arpv4.c: 185: entryPointer ++;
"185
[e ++ _entryPointer * -> -> 1 `i `x -> -> # *U _entryPointer `i `x ]
"186
}
"182
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 48  ]
[e :U 49 ]
"186
}
[; ;arpv4.c: 186: }
[; ;arpv4.c: 187: }
"187
[e :UE 47 ]
}
"194
[v _ARPV4_Request `(E450 ~T0 @X0 1 ef1`ul ]
"195
{
[; ;arpv4.c: 194: error_msg ARPV4_Request(uint32_t destAddress)
[; ;arpv4.c: 195: {
[e :U _ARPV4_Request ]
"194
[v _destAddress `ul ~T0 @X0 1 r1 ]
"195
[f ]
"196
[v _ret `E450 ~T0 @X0 1 a ]
[; ;arpv4.c: 196: error_msg ret;
[; ;arpv4.c: 198: ret = ERROR;
"198
[e = _ret . `E450 0 ]
"200
[v _header `S26 ~T0 @X0 1 a ]
[; ;arpv4.c: 200: arpHeader_t header;
[; ;arpv4.c: 201: header.htype = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8));
"201
[e = . _header 0 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 202: header.ptype = ((((uint16_t)0x0800 & (uint16_t)0xFF00) >> 8) | (((uint16_t)0x0800 & (uint16_t)0x00FF) << 8));
"202
[e = . _header 1 | >> & -> -> 2048 `i `ui -> 65280 `ui -> 8 `i << & -> -> 2048 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 203: header.hlen = 6;
"203
[e = . _header 2 -> -> 6 `i `uc ]
[; ;arpv4.c: 204: header.plen = 4;
"204
[e = . _header 3 -> -> 4 `i `uc ]
[; ;arpv4.c: 205: header.oper = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8));
"205
[e = . _header 4 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 206: ETH_GetMAC((char*)&header.sha);
"206
[e ( _ETH_GetMAC (1 -> &U . _header 5 `*uc ]
[; ;arpv4.c: 207: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((uint32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
"207
[e = . _header 6 | | | >> & _ipv4Address -> -16777216 `ul -> 24 `i >> & _ipv4Address -> -> 16711680 `l `ul -> 8 `i << & _ipv4Address -> -> 65280 `ui `ul -> 8 `i << & _ipv4Address -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 208: header.tpa= ((((uint32_t)destAddress&(uint32_t)0xff000000) >> 24) | (((uint32_t)destAddress&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)destAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)destAddress&(uint32_t)0x000000ff) << 24) );
"208
[e = . _header 8 | | | >> & _destAddress -> -16777216 `ul -> 24 `i >> & _destAddress -> -> 16711680 `l `ul -> 8 `i << & _destAddress -> -> 65280 `ui `ul -> 8 `i << & _destAddress -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 209: header.tha.s.byte1 = 0;
"209
[e = . . . _header 7 1 0 -> -> 0 `i `uc ]
[; ;arpv4.c: 210: header.tha.s.byte2 = 0;
"210
[e = . . . _header 7 1 1 -> -> 0 `i `uc ]
[; ;arpv4.c: 211: header.tha.s.byte3 = 0;
"211
[e = . . . _header 7 1 2 -> -> 0 `i `uc ]
[; ;arpv4.c: 212: header.tha.s.byte4 = 0;
"212
[e = . . . _header 7 1 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 213: header.tha.s.byte5 = 0;
"213
[e = . . . _header 7 1 4 -> -> 0 `i `uc ]
[; ;arpv4.c: 214: header.tha.s.byte6 = 0;
"214
[e = . . . _header 7 1 5 -> -> 0 `i `uc ]
[; ;arpv4.c: 216: ret = ETH_WriteStart(&broadcastMAC,0x0806);
"216
[e = _ret ( _ETH_WriteStart (2 , &U _broadcastMAC -> -> 2054 `i `ui ]
[; ;arpv4.c: 217: if(ret == SUCCESS)
"217
[e $ ! == -> _ret `i -> . `E450 1 `i 52  ]
[; ;arpv4.c: 218: {
"218
{
[; ;arpv4.c: 219: ETH_WriteBlock((char*)&header,sizeof(arpHeader_t));
"219
[e ( _ETH_WriteBlock (2 , -> -> &U _header `*uc `*v -> # `S26 `ui ]
[; ;arpv4.c: 220: ret = ETH_Send();
"220
[e = _ret ( _ETH_Send ..  ]
[; ;arpv4.c: 221: if(ret == SUCCESS)
"221
[e $ ! == -> _ret `i -> . `E450 1 `i 53  ]
[; ;arpv4.c: 222: {
"222
{
[; ;arpv4.c: 223: return MAC_NOT_FOUND;
"223
[e ) . `E450 5 ]
[e $UE 51  ]
"224
}
[e :U 53 ]
"225
}
[e :U 52 ]
[; ;arpv4.c: 224: }
[; ;arpv4.c: 225: }
[; ;arpv4.c: 226: return ret;
"226
[e ) _ret ]
[e $UE 51  ]
[; ;arpv4.c: 227: }
"227
[e :UE 51 ]
}
"234
[v _ARPV4_Lookup `(*S22 ~T0 @X0 1 ef1`ul ]
"235
{
[; ;arpv4.c: 234: mac48Address_t* ARPV4_Lookup(uint32_t ip_address)
[; ;arpv4.c: 235: {
[e :U _ARPV4_Lookup ]
"234
[v _ip_address `ul ~T0 @X0 1 r1 ]
"235
[f ]
"236
[v _entry_pointer `*S27 ~T0 @X0 1 a ]
[; ;arpv4.c: 236: arpMap_t *entry_pointer = arpMap;
[e = _entry_pointer &U _arpMap ]
"237
[v _x `uc ~T0 @X0 1 a ]
[; ;arpv4.c: 237: uint8_t x;
[; ;arpv4.c: 239: for(x = 0; x < 8; x++)
"239
{
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 55  ]
[e $U 56  ]
"240
[e :U 55 ]
[; ;arpv4.c: 240: {
{
[; ;arpv4.c: 241: if(entry_pointer->ipAddress == ip_address)
"241
[e $ ! == . *U _entry_pointer 1 _ip_address 58  ]
[; ;arpv4.c: 242: return &entry_pointer->macAddress;
"242
[e ) &U . *U _entry_pointer 0 ]
[e $UE 54  ]
[e :U 58 ]
[; ;arpv4.c: 243: entry_pointer ++;
"243
[e ++ _entry_pointer * -> -> 1 `i `x -> -> # *U _entry_pointer `i `x ]
"244
}
"239
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 55  ]
[e :U 56 ]
"244
}
[; ;arpv4.c: 244: }
[; ;arpv4.c: 245: return 0;
"245
[e ) -> -> 0 `i `*S22 ]
[e $UE 54  ]
[; ;arpv4.c: 246: }
"246
[e :UE 54 ]
}
