

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Wed Sep 09 15:13:56 2015

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1
   119                           	psect	text102,global,reloc=2,class=CODE,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	text104,global,reloc=2,class=CODE,delta=1
   122                           	psect	text105,global,reloc=2,class=CODE,delta=1
   123                           	psect	text106,global,reloc=2,class=CODE,delta=1
   124                           	psect	text107,global,reloc=2,class=CODE,delta=1
   125                           	psect	text108,global,reloc=2,class=CODE,delta=1
   126                           	psect	text109,global,reloc=2,class=CODE,delta=1
   127                           	psect	text110,global,reloc=2,class=CODE,delta=1
   128                           	psect	text111,global,reloc=2,class=CODE,delta=1
   129                           	psect	text112,global,reloc=2,class=CODE,delta=1
   130                           	psect	text113,global,reloc=2,class=CODE,delta=1
   131                           	psect	text114,global,reloc=2,class=CODE,delta=1
   132                           	psect	text115,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   134                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   136                           	psect	text118,global,reloc=2,class=CODE,delta=1
   137                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   140                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   141                           	psect	pa_nodes,global,class=CODE,delta=1
   142  0000                     tosu	equ	0xFFF
   143                           tosh	equ	0xFFE
   144                           tosl	equ	0xFFD
   145                           pclath	equ	0xFFA
   146                           tblptru	equ	0xFF8
   147                           tblptrh	equ	0xFF7
   148                           tblptrl	equ	0xFF6
   149                           tablat	equ	0xFF5
   150                           prodh	equ	0xFF4
   151                           prodl	equ	0xFF3
   152                           intcon	equ	0xFF2
   153                           intcon2	equ	0xFF1
   154                           indf0	equ	0xFEF
   155                           postinc0	equ	0xFEE
   156                           fsr0h	equ	0xFEA
   157                           fsr0l	equ	0xFE9
   158                           wreg	equ	0xFE8
   159                           postinc1	equ	0xFE6
   160                           plusw1	equ	0xFE3
   161                           fsr1h	equ	0xFE2
   162                           fsr1l	equ	0xFE1
   163                           bsr	equ	0xFE0
   164                           indf2	equ	0xFDF
   165                           postinc2	equ	0xFDE
   166                           postdec2	equ	0xFDD
   167                           plusw2	equ	0xFDB
   168                           fsr2h	equ	0xFDA
   169                           fsr2l	equ	0xFD9
   170                           status	equ	0xFD8
   171                           
   172                           	psect	idataBANK0
   173  006652                     __pidataBANK0:
   174                           	opt stack 0
   175                           
   176                           ;initializer for _clientState
   177  006652  01                 	db	1
   178                           tosu	equ	0xFFF
   179                           tosh	equ	0xFFE
   180                           tosl	equ	0xFFD
   181                           pclath	equ	0xFFA
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           prodh	equ	0xFF4
   187                           prodl	equ	0xFF3
   188                           intcon	equ	0xFF2
   189                           intcon2	equ	0xFF1
   190                           indf0	equ	0xFEF
   191                           postinc0	equ	0xFEE
   192                           fsr0h	equ	0xFEA
   193                           fsr0l	equ	0xFE9
   194                           wreg	equ	0xFE8
   195                           postinc1	equ	0xFE6
   196                           plusw1	equ	0xFE3
   197                           fsr1h	equ	0xFE2
   198                           fsr1l	equ	0xFE1
   199                           bsr	equ	0xFE0
   200                           indf2	equ	0xFDF
   201                           postinc2	equ	0xFDE
   202                           postdec2	equ	0xFDD
   203                           plusw2	equ	0xFDB
   204                           fsr2h	equ	0xFDA
   205                           fsr2l	equ	0xFD9
   206                           status	equ	0xFD8
   207                           
   208                           	psect	smallconst
   209  001000                     __psmallconst:
   210                           	opt stack 0
   211  001000  00                 	db	0
   212  001001                     _dpowers:
   213                           	opt stack 0
   214  001001  0001               	dw	1
   215  001003  000A               	dw	10
   216  001005  0064               	dw	100
   217  001007  03E8               	dw	1000
   218  001009  2710               	dw	10000
   219  00100B                     __end_of_dpowers:
   220                           	opt stack 0
   221  00100B                     _hexpowers:
   222                           	opt stack 0
   223  00100B  0001               	dw	1
   224  00100D  0010               	dw	16
   225  00100F  0100               	dw	256
   226  001011  1000               	dw	4096
   227  001013                     __end_of_hexpowers:
   228                           	opt stack 0
   229  001013                     _dhcpName:
   230                           	opt stack 0
   231  001013  50                 	db	80
   232  001014  49                 	db	73
   233  001015  43                 	db	67
   234  001016  31                 	db	49
   235  001017  38                 	db	56
   236  001018  46                 	db	70
   237  001019  39                 	db	57
   238  00101A  37                 	db	55
   239  00101B  4A                 	db	74
   240  00101C  36                 	db	54
   241  00101D  30                 	db	48
   242  00101E  20                 	db	32
   243  00101F  45                 	db	69
   244  001020  54                 	db	84
   245  001021  48                 	db	72
   246  001022  45                 	db	69
   247  001023  52                 	db	82
   248  001024  4E                 	db	78
   249  001025  45                 	db	69
   250  001026  54                 	db	84
   251  001027  00                 	db	0
   252  001028                     __end_of_dhcpName:
   253                           	opt stack 0
   254  001028                     _UDP_CallBackTable:
   255                           	opt stack 0
   256  001028  FFFC               	dw	65532
   257  00102A  08                 	db	low _DEMO_UDP_IdlePkt
   258  00102B  62                 	db	high _DEMO_UDP_IdlePkt
   259  00102C  00                 	db	low (_DEMO_UDP_IdlePkt shr (0+16))
   260  00102D  FFFB               	dw	65531
   261  00102F  B8                 	db	low _DEMO_UDP_Recv
   262  001030  30                 	db	high _DEMO_UDP_Recv
   263  001031  00                 	db	low (_DEMO_UDP_Recv shr (0+16))
   264  001032  0044               	dw	68
   265  001034  E2                 	db	low _DHCP_Handler
   266  001035  3D                 	db	high _DHCP_Handler
   267  001036  00                 	db	low (_DHCP_Handler shr (0+16))
   268  001037                     __end_of_UDP_CallBackTable:
   269                           	opt stack 0
   270  001037                     _broadcastMAC:
   271                           	opt stack 0
   272  001037  FF                 	db	255
   273  001038  FF                 	db	255
   274  001039  FF                 	db	255
   275  00103A  FF                 	db	255
   276  00103B  FF                 	db	255
   277  00103C  FF                 	db	255
   278  00103D                     __end_of_broadcastMAC:
   279                           	opt stack 0
   280  00103D  00                 	db	0
   281  00103E  DE                 	db	222
   282  00103F  AD                 	db	173
   283  001040  00                 	db	0
   284  001041  BE                 	db	190
   285  001042  EF                 	db	239
   286  001043                     __end_of_macAddress:
   287                           	opt stack 0
   288  001043                     STR_2:
   289  001043  0D                 	db	13
   290  001044  0A                 	db	10
   291  001045  0D                 	db	13
   292  001046  0A                 	db	10
   293  001047  53                 	db	83	;'S'
   294  001048  74                 	db	116	;'t'
   295  001049  61                 	db	97	;'a'
   296  00104A  72                 	db	114	;'r'
   297  00104B  74                 	db	116	;'t'
   298  00104C  69                 	db	105	;'i'
   299  00104D  6E                 	db	110	;'n'
   300  00104E  67                 	db	103	;'g'
   301  00104F  20                 	db	32
   302  001050  53                 	db	83	;'S'
   303  001051  79                 	db	121	;'y'
   304  001052  73                 	db	115	;'s'
   305  001053  6C                 	db	108	;'l'
   306  001054  6F                 	db	111	;'o'
   307  001055  67                 	db	103	;'g'
   308  001056  20                 	db	32
   309  001057  61                 	db	97	;'a'
   310  001058  74                 	db	116	;'t'
   311  001059  20                 	db	32
   312  00105A  25                 	db	37
   313  00105B  75                 	db	117	;'u'
   314  00105C  0D                 	db	13
   315  00105D  0A                 	db	10
   316  00105E  00                 	db	0
   317  00105F                     STR_8:
   318  00105F  30                 	db	48	;'0'
   319  001060  31                 	db	49	;'1'
   320  001061  32                 	db	50	;'2'
   321  001062  33                 	db	51	;'3'
   322  001063  34                 	db	52	;'4'
   323  001064  35                 	db	53	;'5'
   324  001065  36                 	db	54	;'6'
   325  001066  37                 	db	55	;'7'
   326  001067  38                 	db	56	;'8'
   327  001068  39                 	db	57	;'9'
   328  001069  61                 	db	97	;'a'
   329  00106A  62                 	db	98	;'b'
   330  00106B  63                 	db	99	;'c'
   331  00106C  64                 	db	100	;'d'
   332  00106D  65                 	db	101	;'e'
   333  00106E  66                 	db	102	;'f'
   334  00106F  00                 	db	0
   335  001070                     STR_4:
   336  001070  57                 	db	87	;'W'
   337  001071  61                 	db	97	;'a'
   338  001072  69                 	db	105	;'i'
   339  001073  74                 	db	116	;'t'
   340  001074  69                 	db	105	;'i'
   341  001075  6E                 	db	110	;'n'
   342  001076  67                 	db	103	;'g'
   343  001077  20                 	db	32
   344  001078  66                 	db	102	;'f'
   345  001079  6F                 	db	111	;'o'
   346  00107A  72                 	db	114	;'r'
   347  00107B  20                 	db	32
   348  00107C  4C                 	db	76	;'L'
   349  00107D  69                 	db	105	;'i'
   350  00107E  6E                 	db	110	;'n'
   351  00107F  6B                 	db	107	;'k'
   352  001080  00                 	db	0
   353  001081                     STR_5:
   354  001081  4C                 	db	76	;'L'
   355  001082  69                 	db	105	;'i'
   356  001083  6E                 	db	110	;'n'
   357  001084  6B                 	db	107	;'k'
   358  001085  20                 	db	32
   359  001086  73                 	db	115	;'s'
   360  001087  74                 	db	116	;'t'
   361  001088  61                 	db	97	;'a'
   362  001089  72                 	db	114	;'r'
   363  00108A  74                 	db	116	;'t'
   364  00108B  65                 	db	101	;'e'
   365  00108C  64                 	db	100	;'d'
   366  00108D  00                 	db	0
   367  00108E                     STR_6:
   368  00108E  25                 	db	37
   369  00108F  64                 	db	100	;'d'
   370  001090  2E                 	db	46
   371  001091  25                 	db	37
   372  001092  64                 	db	100	;'d'
   373  001093  2E                 	db	46
   374  001094  25                 	db	37
   375  001095  64                 	db	100	;'d'
   376  001096  2E                 	db	46
   377  001097  25                 	db	37
   378  001098  64                 	db	100	;'d'
   379  001099  00                 	db	0
   380  00109A                     STR_3:
   381  00109A  25                 	db	37
   382  00109B  75                 	db	117	;'u'
   383  00109C  20                 	db	32
   384  00109D  3A                 	db	58	;':'
   385  00109E  20                 	db	32
   386  00109F  25                 	db	37
   387  0010A0  73                 	db	115	;'s'
   388  0010A1  0D                 	db	13
   389  0010A2  0A                 	db	10
   390  0010A3  00                 	db	0
   391  0010A4                     STR_1:
   392  0010A4  25                 	db	37
   393  0010A5  78                 	db	120	;'x'
   394  0010A6  20                 	db	32
   395  0010A7  3A                 	db	58	;':'
   396  0010A8  20                 	db	32
   397  0010A9  25                 	db	37
   398  0010AA  64                 	db	100	;'d'
   399  0010AB  00                 	db	0
   400  0010AC                     STR_7:
   401  0010AC  28                 	db	40
   402  0010AD  6E                 	db	110	;'n'
   403  0010AE  75                 	db	117	;'u'
   404  0010AF  6C                 	db	108	;'l'
   405  0010B0  6C                 	db	108	;'l'
   406  0010B1  29                 	db	41
   407  0010B2  00                 	db	0
   408                           
   409                           ; #config settings
   410  0010B3  00                 	db	0	; dummy byte at the end
   411  0000                     tosu	equ	0xFFF
   412                           tosh	equ	0xFFE
   413                           tosl	equ	0xFFD
   414                           pclath	equ	0xFFA
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           prodh	equ	0xFF4
   420                           prodl	equ	0xFF3
   421                           intcon	equ	0xFF2
   422                           intcon2	equ	0xFF1
   423                           indf0	equ	0xFEF
   424                           postinc0	equ	0xFEE
   425                           fsr0h	equ	0xFEA
   426                           fsr0l	equ	0xFE9
   427                           wreg	equ	0xFE8
   428                           postinc1	equ	0xFE6
   429                           plusw1	equ	0xFE3
   430                           fsr1h	equ	0xFE2
   431                           fsr1l	equ	0xFE1
   432                           bsr	equ	0xFE0
   433                           indf2	equ	0xFDF
   434                           postinc2	equ	0xFDE
   435                           postdec2	equ	0xFDD
   436                           plusw2	equ	0xFDB
   437                           fsr2h	equ	0xFDA
   438                           fsr2l	equ	0xFD9
   439                           status	equ	0xFD8
   440                           
   441                           	psect	nvBANK2
   442  0002F1                     __pnvBANK2:
   443                           	opt stack 0
   444  0002F1                     _deviceTime:
   445                           	opt stack 0
   446  0002F1                     	ds	4
   447  0002F5                     _localTime:
   448                           	opt stack 0
   449  0002F5                     	ds	4
   450  0000                     _ADRES	set	4035
   451  0000                     _TMR1	set	4046
   452  0000                     _ADCON0	set	4034
   453  0000                     _ADCON0bits	set	4034
   454  0000                     _ADCON1	set	4033
   455  0000                     _ADCON2	set	4032
   456  0000                     _ADRESH	set	4036
   457  0000                     _ADRESL	set	4035
   458  0000                     _BAUDCON1	set	3966
   459  0000                     _BAUDCON1bits	set	3966
   460  0000                     _LATBbits	set	3978
   461  0000                     _LATDbits	set	3980
   462  0000                     _LATE	set	3981
   463  0000                     _LATH	set	3984
   464  0000                     _LATJ	set	3985
   465  0000                     _OSCCON	set	4051
   466  0000                     _OSCTUNE	set	3995
   467  0000                     _PORTBbits	set	3969
   468  0000                     _PORTJ	set	3976
   469  0000                     _PORTJbits	set	3976
   470  0000                     _SPBRG1	set	4015
   471  0000                     _SSP1BUF	set	4041
   472  0000                     _SSP1CON1	set	4038
   473  0000                     _SSP1CON1bits	set	4038
   474  0000                     _SSP1STATbits	set	4039
   475  0000                     _SSPBUF	set	4041
   476  0000                     _TRISA	set	3986
   477  0000                     _TRISAbits	set	3986
   478  0000                     _TRISBbits	set	3987
   479  0000                     _TRISCbits	set	3988
   480  0000                     _TRISDbits	set	3989
   481  0000                     _TRISE	set	3990
   482  0000                     _TRISH	set	3993
   483  0000                     _TRISJ	set	3994
   484  0000                     _TXREG1	set	4013
   485  0000                     _TXSTA1	set	4012
   486  0000                     _CREN1	set	32092
   487  0000                     _GIE	set	32663
   488  0000                     _GIEH	set	32663
   489  0000                     _GIEL	set	32662
   490  0000                     _IPEN	set	32391
   491  0000                     _LATB3	set	31827
   492  0000                     _LATH0	set	31872
   493  0000                     _LATH1	set	31873
   494  0000                     _LATH2	set	31874
   495  0000                     _RBPU	set	32655
   496  0000                     _SPEN1	set	32095
   497  0000                     _T1CKPS0	set	32364
   498  0000                     _T1CKPS1	set	32365
   499  0000                     _T1OSCEN	set	32363
   500  0000                     _T1SYNC	set	32362
   501  0000                     _TMR1CS	set	32361
   502  0000                     _TMR1IE	set	31976
   503  0000                     _TMR1IF	set	31984
   504  0000                     _TMR1IP	set	31992
   505  0000                     _TMR1ON	set	32360
   506  0000                     _TX1IF	set	31988
   507                           tosu	equ	0xFFF
   508                           tosh	equ	0xFFE
   509                           tosl	equ	0xFFD
   510                           pclath	equ	0xFFA
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           prodh	equ	0xFF4
   516                           prodl	equ	0xFF3
   517                           intcon	equ	0xFF2
   518                           intcon2	equ	0xFF1
   519                           indf0	equ	0xFEF
   520                           postinc0	equ	0xFEE
   521                           fsr0h	equ	0xFEA
   522                           fsr0l	equ	0xFE9
   523                           wreg	equ	0xFE8
   524                           postinc1	equ	0xFE6
   525                           plusw1	equ	0xFE3
   526                           fsr1h	equ	0xFE2
   527                           fsr1l	equ	0xFE1
   528                           bsr	equ	0xFE0
   529                           indf2	equ	0xFDF
   530                           postinc2	equ	0xFDE
   531                           postdec2	equ	0xFDD
   532                           plusw2	equ	0xFDB
   533                           fsr2h	equ	0xFDA
   534                           fsr2l	equ	0xFD9
   535                           status	equ	0xFD8
   536                           
   537                           	psect	cinit
   538  006084                     __pcinit:
   539                           	opt stack 0
   540  006084                     start_initialization:
   541                           	opt stack 0
   542  006084                     __initialization:
   543                           	opt stack 0
   544                           
   545                           ; Clear objects allocated to BANK2 (188 bytes)
   546  006084  EE02  F000         	lfsr	0,__pbssBANK2
   547  006088  0EBC               	movlw	188
   548  00608A                     clear_0:
   549  00608A  6AEE               	clrf	postinc0,c
   550  00608C  06E8               	decf	wreg,f,c
   551  00608E  E1FD               	bnz	clear_0
   552                           
   553                           ; Clear objects allocated to BANK1 (73 bytes)
   554  006090  EE01  F083         	lfsr	0,__pbssBANK1
   555  006094  0E49               	movlw	73
   556  006096                     clear_1:
   557  006096  6AEE               	clrf	postinc0,c
   558  006098  06E8               	decf	wreg,f,c
   559  00609A  E1FD               	bnz	clear_1
   560                           
   561                           ; Clear objects allocated to COMRAM (1 bytes)
   562  00609C  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   563                           
   564                           ; Initialize objects allocated to BANK0 (1 bytes)
   565                           ; load TBLPTR registers with __pidataBANK0
   566  00609E  0E52               	movlw	low __pidataBANK0
   567  0060A0  6EF6               	movwf	tblptrl,c
   568  0060A2  0E66               	movlw	high __pidataBANK0
   569  0060A4  6EF7               	movwf	tblptrh,c
   570  0060A6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   571  0060A8  6EF8               	movwf	tblptru,c
   572  0060AA  0009               	tblrd		*+	;fetch initializer
   573  0060AC  CFF5 F0FF          	movff	tablat,__pdataBANK0
   574  0060B0                     end_of_initialization:
   575                           	opt stack 0
   576  0060B0                     __end_of__initialization:
   577                           	opt stack 0
   578  0060B0  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   579  0060B2  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   580  0060B4  0100               	movlb	0
   581  0060B6  EF0B  F026         	goto	_main	;jump to C main() function
   582                           tosu	equ	0xFFF
   583                           tosh	equ	0xFFE
   584                           tosl	equ	0xFFD
   585                           pclath	equ	0xFFA
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           prodh	equ	0xFF4
   591                           prodl	equ	0xFF3
   592                           intcon	equ	0xFF2
   593                           intcon2	equ	0xFF1
   594                           indf0	equ	0xFEF
   595                           postinc0	equ	0xFEE
   596                           fsr0h	equ	0xFEA
   597                           fsr0l	equ	0xFE9
   598                           wreg	equ	0xFE8
   599                           postinc1	equ	0xFE6
   600                           plusw1	equ	0xFE3
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           bsr	equ	0xFE0
   604                           indf2	equ	0xFDF
   605                           postinc2	equ	0xFDE
   606                           postdec2	equ	0xFDD
   607                           plusw2	equ	0xFDB
   608                           fsr2h	equ	0xFDA
   609                           fsr2l	equ	0xFD9
   610                           status	equ	0xFD8
   611                           
   612                           	psect	bssCOMRAM
   613  00005D                     __pbssCOMRAM:
   614                           	opt stack 0
   615  00005D                     _tcbListSize:
   616                           	opt stack 0
   617  00005D                     	ds	1
   618                           tosu	equ	0xFFF
   619                           tosh	equ	0xFFE
   620                           tosl	equ	0xFFD
   621                           pclath	equ	0xFFA
   622                           tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           prodh	equ	0xFF4
   627                           prodl	equ	0xFF3
   628                           intcon	equ	0xFF2
   629                           intcon2	equ	0xFF1
   630                           indf0	equ	0xFEF
   631                           postinc0	equ	0xFEE
   632                           fsr0h	equ	0xFEA
   633                           fsr0l	equ	0xFE9
   634                           wreg	equ	0xFE8
   635                           postinc1	equ	0xFE6
   636                           plusw1	equ	0xFE3
   637                           fsr1h	equ	0xFE2
   638                           fsr1l	equ	0xFE1
   639                           bsr	equ	0xFE0
   640                           indf2	equ	0xFDF
   641                           postinc2	equ	0xFDE
   642                           postdec2	equ	0xFDD
   643                           plusw2	equ	0xFDB
   644                           fsr2h	equ	0xFDA
   645                           fsr2l	equ	0xFD9
   646                           status	equ	0xFD8
   647                           
   648                           	psect	dataBANK0
   649  0000FF                     __pdataBANK0:
   650                           	opt stack 0
   651  0000FF                     _clientState:
   652                           	opt stack 0
   653  0000FF                     	ds	1
   654                           tosu	equ	0xFFF
   655                           tosh	equ	0xFFE
   656                           tosl	equ	0xFFD
   657                           pclath	equ	0xFFA
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           prodh	equ	0xFF4
   663                           prodl	equ	0xFF3
   664                           intcon	equ	0xFF2
   665                           intcon2	equ	0xFF1
   666                           indf0	equ	0xFEF
   667                           postinc0	equ	0xFEE
   668                           fsr0h	equ	0xFEA
   669                           fsr0l	equ	0xFE9
   670                           wreg	equ	0xFE8
   671                           postinc1	equ	0xFE6
   672                           plusw1	equ	0xFE3
   673                           fsr1h	equ	0xFE2
   674                           fsr1l	equ	0xFE1
   675                           bsr	equ	0xFE0
   676                           indf2	equ	0xFDF
   677                           postinc2	equ	0xFDE
   678                           postdec2	equ	0xFDD
   679                           plusw2	equ	0xFDB
   680                           fsr2h	equ	0xFDA
   681                           fsr2l	equ	0xFD9
   682                           status	equ	0xFD8
   683                           
   684                           	psect	bssBANK1
   685  000183                     __pbssBANK1:
   686                           	opt stack 0
   687  000183                     _ethData:
   688                           	opt stack 0
   689  000183                     	ds	7
   690  00018A                     _claim_dest_ip:
   691                           	opt stack 0
   692  00018A                     	ds	4
   693  00018E                     _dhcpLeaseTime:
   694                           	opt stack 0
   695  00018E                     	ds	4
   696  000192                     _ipv4Address:
   697                           	opt stack 0
   698  000192                     	ds	4
   699  000196                     _ipv4SubnetMask:
   700                           	opt stack 0
   701  000196                     	ds	4
   702  00019A                     _receivedRemoteAddress:
   703                           	opt stack 0
   704  00019A                     	ds	4
   705  00019E                     _TXPacketSize:
   706                           	opt stack 0
   707  00019E                     	ds	2
   708  0001A0                     _currentTCB:
   709                           	opt stack 0
   710  0001A0                     	ds	2
   711  0001A2                     _destPort:
   712                           	opt stack 0
   713  0001A2                     	ds	2
   714  0001A4                     _nextAvailablePort:
   715                           	opt stack 0
   716  0001A4                     	ds	2
   717  0001A6                     _nextPacketPointer:
   718                           	opt stack 0
   719  0001A6                     	ds	2
   720  0001A8                     _pot_initial_adcResult:
   721                           	opt stack 0
   722  0001A8                     	ds	2
   723  0001AA                     _rcvPayloadLen:
   724                           	opt stack 0
   725  0001AA                     	ds	2
   726  0001AC                     _tcbList:
   727                           	opt stack 0
   728  0001AC                     	ds	2
   729  0001AE                     _tcpMss:
   730                           	opt stack 0
   731  0001AE                     	ds	2
   732  0001B0                     _claim:
   733                           	opt stack 0
   734  0001B0                     	ds	1
   735  0001B1                     _idle_pkt_received:
   736                           	opt stack 0
   737  0001B1                     	ds	1
   738  0001B2                     _last_bank:
   739                           	opt stack 0
   740  0001B2                     	ds	1
   741  0001B3                     _pot_init:
   742                           	opt stack 0
   743  0001B3                     	ds	1
   744  0001B4                     _tcpHeader:
   745                           	opt stack 0
   746  0001B4                     	ds	20
   747  0001C8                     _data:
   748                           	opt stack 0
   749  0001C8                     	ds	2
   750  0001CA                     _idle_packet:
   751                           	opt stack 0
   752  0001CA                     	ds	2
   753                           tosu	equ	0xFFF
   754                           tosh	equ	0xFFE
   755                           tosl	equ	0xFFD
   756                           pclath	equ	0xFFA
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           prodh	equ	0xFF4
   762                           prodl	equ	0xFF3
   763                           intcon	equ	0xFF2
   764                           intcon2	equ	0xFF1
   765                           indf0	equ	0xFEF
   766                           postinc0	equ	0xFEE
   767                           fsr0h	equ	0xFEA
   768                           fsr0l	equ	0xFE9
   769                           wreg	equ	0xFE8
   770                           postinc1	equ	0xFE6
   771                           plusw1	equ	0xFE3
   772                           fsr1h	equ	0xFE2
   773                           fsr1l	equ	0xFE1
   774                           bsr	equ	0xFE0
   775                           indf2	equ	0xFDF
   776                           postinc2	equ	0xFDE
   777                           postdec2	equ	0xFDD
   778                           plusw2	equ	0xFDB
   779                           fsr2h	equ	0xFDA
   780                           fsr2l	equ	0xFD9
   781                           status	equ	0xFD8
   782                           
   783                           	psect	bssBANK2
   784  000200                     __pbssBANK2:
   785                           	opt stack 0
   786  000200                     _led_values:
   787                           	opt stack 0
   788  000200                     	ds	16
   789  000210                     _ipv4DNS:
   790                           	opt stack 0
   791  000210                     	ds	8
   792  000218                     _rxPacketStatusVector:
   793                           	opt stack 0
   794  000218                     	ds	6
   795  00021E                     Network_Manage@nowPv:
   796                           	opt stack 0
   797  00021E                     	ds	4
   798  000222                     _dhcpServerId:
   799                           	opt stack 0
   800  000222                     	ds	4
   801  000226                     _ipv4Router:
   802                           	opt stack 0
   803  000226                     	ds	4
   804  00022A                     _remoteIpv4Address:
   805                           	opt stack 0
   806  00022A                     	ds	4
   807  00022E                     _arpMap:
   808                           	opt stack 0
   809  00022E                     	ds	104
   810  000296                     _ipv4Header:
   811                           	opt stack 0
   812  000296                     	ds	20
   813  0002AA                     _udpHeader:
   814                           	opt stack 0
   815  0002AA                     	ds	8
   816  0002B2                     _ethMAC:
   817                           	opt stack 0
   818  0002B2                     	ds	6
   819  0002B8                     _arpTimer:
   820                           	opt stack 0
   821  0002B8                     	ds	4
   822                           tosu	equ	0xFFF
   823                           tosh	equ	0xFFE
   824                           tosl	equ	0xFFD
   825                           pclath	equ	0xFFA
   826                           tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           prodh	equ	0xFF4
   831                           prodl	equ	0xFF3
   832                           intcon	equ	0xFF2
   833                           intcon2	equ	0xFF1
   834                           indf0	equ	0xFEF
   835                           postinc0	equ	0xFEE
   836                           fsr0h	equ	0xFEA
   837                           fsr0l	equ	0xFE9
   838                           wreg	equ	0xFE8
   839                           postinc1	equ	0xFE6
   840                           plusw1	equ	0xFE3
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           bsr	equ	0xFE0
   844                           indf2	equ	0xFDF
   845                           postinc2	equ	0xFDE
   846                           postdec2	equ	0xFDD
   847                           plusw2	equ	0xFDB
   848                           fsr2h	equ	0xFDA
   849                           fsr2l	equ	0xFD9
   850                           status	equ	0xFD8
   851                           
   852                           	psect	cstackBANK2
   853  0002BC                     __pcstackBANK2:
   854                           	opt stack 0
   855  0002BC                     main@old_ip:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x0
   859  0002BC                     	ds	4
   860  0002C0                     main@t:
   861                           	opt stack 0
   862                           
   863                           ; 4 bytes @ 0x4
   864  0002C0                     	ds	4
   865  0002C4                     main@no_ip_display:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x8
   869  0002C4                     	ds	1
   870  0002C5                     main@now_p:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x9
   874  0002C5                     	ds	4
   875  0002C9                     main@ip_timer:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0xD
   879  0002C9                     	ds	4
   880  0002CD                     main@str:
   881                           	opt stack 0
   882                           
   883                           ; 32 bytes @ 0x11
   884  0002CD                     	ds	32
   885  0002ED                     main@ip:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x31
   889  0002ED                     	ds	4
   890                           tosu	equ	0xFFF
   891                           tosh	equ	0xFFE
   892                           tosl	equ	0xFFD
   893                           pclath	equ	0xFFA
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           prodh	equ	0xFF4
   899                           prodl	equ	0xFF3
   900                           intcon	equ	0xFF2
   901                           intcon2	equ	0xFF1
   902                           indf0	equ	0xFEF
   903                           postinc0	equ	0xFEE
   904                           fsr0h	equ	0xFEA
   905                           fsr0l	equ	0xFE9
   906                           wreg	equ	0xFE8
   907                           postinc1	equ	0xFE6
   908                           plusw1	equ	0xFE3
   909                           fsr1h	equ	0xFE2
   910                           fsr1l	equ	0xFE1
   911                           bsr	equ	0xFE0
   912                           indf2	equ	0xFDF
   913                           postinc2	equ	0xFDE
   914                           postdec2	equ	0xFDD
   915                           plusw2	equ	0xFDB
   916                           fsr2h	equ	0xFDA
   917                           fsr2l	equ	0xFD9
   918                           status	equ	0xFD8
   919                           
   920                           	psect	cstackBANK1
   921  000100                     __pcstackBANK1:
   922                           	opt stack 0
   923  000100                     ??_IPV4_Packet:
   924                           
   925                           ; 0 bytes @ 0x0
   926  000100                     	ds	28
   927  00011C                     ??_Network_Read:
   928                           
   929                           ; 0 bytes @ 0x1C
   930  00011C                     	ds	4
   931  000120                     Network_Read@debug_str:
   932                           	opt stack 0
   933                           
   934                           ; 80 bytes @ 0x20
   935  000120                     	ds	80
   936  000170                     Network_Read@header:
   937                           	opt stack 0
   938                           
   939                           ; 14 bytes @ 0x70
   940  000170                     	ds	14
   941  00017E                     Network_Manage@now:
   942                           	opt stack 0
   943                           
   944                           ; 4 bytes @ 0x7E
   945  00017E                     	ds	4
   946  000182                     ??_main:
   947                           
   948                           ; 0 bytes @ 0x82
   949  000182                     	ds	1
   950                           tosu	equ	0xFFF
   951                           tosh	equ	0xFFE
   952                           tosl	equ	0xFFD
   953                           pclath	equ	0xFFA
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           prodh	equ	0xFF4
   959                           prodl	equ	0xFF3
   960                           intcon	equ	0xFF2
   961                           intcon2	equ	0xFF1
   962                           indf0	equ	0xFEF
   963                           postinc0	equ	0xFEE
   964                           fsr0h	equ	0xFEA
   965                           fsr0l	equ	0xFE9
   966                           wreg	equ	0xFE8
   967                           postinc1	equ	0xFE6
   968                           plusw1	equ	0xFE3
   969                           fsr1h	equ	0xFE2
   970                           fsr1l	equ	0xFE1
   971                           bsr	equ	0xFE0
   972                           indf2	equ	0xFDF
   973                           postinc2	equ	0xFDE
   974                           postdec2	equ	0xFDD
   975                           plusw2	equ	0xFDB
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980                           	psect	cstackBANK0
   981  000060                     __pcstackBANK0:
   982                           	opt stack 0
   983  000060                     IPv4_Start@targetAddress:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x0
   987  000060                     	ds	4
   988  000064                     IPv4_Start@macAddress:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x4
   992  000064                     	ds	2
   993  000066                     IPv4_Start@ret:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x6
   997  000066                     	ds	1
   998  000067                     ??_ICMP_EchoReply:
   999  000067                     ??_TCP_Snd:
  1000  000067                     UDP_Start@destIP:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x7
  1004  000067                     	ds	4
  1005  00006B                     UDP_Start@srcPort:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xB
  1009  00006B                     	ds	2
  1010  00006D                     UDP_Start@dstPort:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0xD
  1014  00006D                     	ds	2
  1015  00006F                     DHCP_Request@started:
  1016                           	opt stack 0
  1017  00006F                     DEMO_UDP_Send@started:
  1018                           	opt stack 0
  1019  00006F                     ICMP_EchoReply@cksm:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0xF
  1023  00006F                     	ds	1
  1024  000070                     DHCP_Request@type:
  1025                           	opt stack 0
  1026  000070                     DEMO_UDP_Send@pot_adcResult:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x10
  1030  000070                     	ds	1
  1031  000071                     ICMP_EchoReply@ipv4PayloadLength:
  1032                           	opt stack 0
  1033  000071                     DHCP_Request@ethMAC:
  1034                           	opt stack 0
  1035                           
  1036                           ; 6 bytes @ 0x11
  1037  000071                     	ds	2
  1038  000073                     ICMP_EchoReply@ret:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x13
  1042  000073                     	ds	1
  1043  000074                     ICMP_EchoReply@icmpHdr:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x14
  1047  000074                     	ds	1
  1048  000075                     ??_ICMP_Receive:
  1049                           
  1050                           ; 0 bytes @ 0x15
  1051  000075                     	ds	2
  1052  000077                     DHCP_Handler@ip:
  1053                           	opt stack 0
  1054  000077                     DEMO_UDP_Recv@str:
  1055                           	opt stack 0
  1056                           
  1057                           ; 32 bytes @ 0x17
  1058  000077                     	ds	3
  1059  00007A                     ICMP_Receive@icmpHdr:
  1060                           	opt stack 0
  1061                           
  1062                           ; 8 bytes @ 0x1A
  1063  00007A                     	ds	5
  1064  00007F                     DHCP_Handler@v:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x1F
  1068  00007F                     	ds	4
  1069  000083                     DHCP_Handler@v16:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x23
  1073  000083                     	ds	2
  1074  000085                     DHCP_Handler@option:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x25
  1078  000085                     	ds	1
  1079  000086                     DHCP_Handler@ethPktMAC:
  1080                           	opt stack 0
  1081                           
  1082                           ; 6 bytes @ 0x26
  1083  000086                     	ds	6
  1084  00008C                     DHCP_Handler@ethMAC:
  1085                           	opt stack 0
  1086                           
  1087                           ; 6 bytes @ 0x2C
  1088  00008C                     	ds	6
  1089  000092                     DHCP_Handler@optionLength:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x32
  1093  000092                     	ds	1
  1094  000093                     DHCP_Handler@myip:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x33
  1098  000093                     	ds	4
  1099  000097                     TCP_Snd@data:
  1100                           	opt stack 0
  1101  000097                     DEMO_UDP_Recv@str1:
  1102                           	opt stack 0
  1103                           
  1104                           ; 16 bytes @ 0x37
  1105  000097                     	ds	2
  1106  000099                     TCP_Snd@cksm:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x39
  1110  000099                     	ds	2
  1111  00009B                     TCP_Snd@payloadLength:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x3B
  1115  00009B                     	ds	2
  1116  00009D                     TCP_Snd@ret:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x3D
  1120  00009D                     	ds	1
  1121  00009E                     TCP_Snd@tcpDataLength:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x3E
  1125  00009E                     	ds	2
  1126  0000A0                     TCP_Snd@txHeader:
  1127                           	opt stack 0
  1128                           
  1129                           ; 20 bytes @ 0x40
  1130  0000A0                     	ds	7
  1131  0000A7                     DEMO_UDP_Recv@str2:
  1132                           	opt stack 0
  1133                           
  1134                           ; 16 bytes @ 0x47
  1135  0000A7                     	ds	13
  1136  0000B4                     ??_TCP_PayloadSave:
  1137                           
  1138                           ; 0 bytes @ 0x54
  1139  0000B4                     	ds	3
  1140  0000B7                     DEMO_UDP_Recv@temperature:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x57
  1144  0000B7                     	ds	2
  1145  0000B9                     DEMO_UDP_Recv@local_ip:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0x59
  1149  0000B9                     	ds	5
  1150  0000BE                     DEMO_UDP_Recv@str_len:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x5E
  1154  0000BE                     	ds	1
  1155  0000BF                     DEMO_UDP_Recv@destPort:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x5F
  1159  0000BF                     	ds	2
  1160  0000C1                     DEMO_UDP_Recv@started:
  1161                           	opt stack 0
  1162  0000C1                     TCP_PayloadSave@buffer_size:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x61
  1166  0000C1                     	ds	1
  1167  0000C2                     DEMO_UDP_Recv@dest_ip:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x62
  1171  0000C2                     	ds	1
  1172  0000C3                     ??_TCP_FiniteStateMachine:
  1173                           
  1174                           ; 0 bytes @ 0x63
  1175  0000C3                     	ds	3
  1176  0000C6                     UDP_Receive@udpcksm:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x66
  1180  0000C6                     	ds	2
  1181  0000C8                     ??_UDP_Receive:
  1182                           
  1183                           ; 0 bytes @ 0x68
  1184  0000C8                     	ds	6
  1185  0000CE                     UDP_Receive@x:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x6E
  1189  0000CE                     	ds	1
  1190  0000CF                     TCP_FiniteStateMachine@ret:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x6F
  1194  0000CF                     	ds	1
  1195  0000D0                     UDP_Receive@hptr:
  1196                           	opt stack 0
  1197  0000D0                     TCP_FiniteStateMachine@notAckBytes:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x70
  1201  0000D0                     	ds	2
  1202  0000D2                     TCP_FiniteStateMachine@event:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x72
  1206  0000D2                     	ds	1
  1207  0000D3                     TCP_FiniteStateMachine@nextState:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x73
  1211  0000D3                     	ds	1
  1212  0000D4                     ??_TCP_Update:
  1213  0000D4                     TCP_Recv@remoteAddress:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x74
  1217  0000D4                     	ds	4
  1218  0000D8                     TCP_Recv@length:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x78
  1222  0000D8                     	ds	2
  1223  0000DA                     ??_TCP_Recv:
  1224                           
  1225                           ; 0 bytes @ 0x7A
  1226  0000DA                     	ds	2
  1227  0000DC                     TCP_Update@count:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x7C
  1231  0000DC                     	ds	2
  1232  0000DE                     TCP_Update@tcbPtr:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x7E
  1236  0000DE                     	ds	24
  1237  0000F6                     TCP_Recv@count:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x96
  1241  0000F6                     	ds	1
  1242  0000F7                     TCP_Recv@tcbPtr:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x97
  1246  0000F7                     	ds	2
  1247  0000F9                     IPV4_Packet@hdrLen:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x99
  1251  0000F9                     	ds	1
  1252  0000FA                     IPV4_Packet@length:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x9A
  1256  0000FA                     	ds	2
  1257  0000FC                     IPV4_Packet@cksm:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x9C
  1261  0000FC                     	ds	2
  1262  0000FE                     ??_Network_Manage:
  1263                           
  1264                           ; 0 bytes @ 0x9E
  1265  0000FE                     	ds	1
  1266                           tosu	equ	0xFFF
  1267                           tosh	equ	0xFFE
  1268                           tosl	equ	0xFFD
  1269                           pclath	equ	0xFFA
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           intcon	equ	0xFF2
  1277                           intcon2	equ	0xFF1
  1278                           indf0	equ	0xFEF
  1279                           postinc0	equ	0xFEE
  1280                           fsr0h	equ	0xFEA
  1281                           fsr0l	equ	0xFE9
  1282                           wreg	equ	0xFE8
  1283                           postinc1	equ	0xFE6
  1284                           plusw1	equ	0xFE3
  1285                           fsr1h	equ	0xFE2
  1286                           fsr1l	equ	0xFE1
  1287                           bsr	equ	0xFE0
  1288                           indf2	equ	0xFDF
  1289                           postinc2	equ	0xFDE
  1290                           postdec2	equ	0xFDD
  1291                           plusw2	equ	0xFDB
  1292                           fsr2h	equ	0xFDA
  1293                           fsr2l	equ	0xFD9
  1294                           status	equ	0xFD8
  1295                           
  1296                           	psect	cstackCOMRAM
  1297  000001                     __pcstackCOMRAM:
  1298                           	opt stack 0
  1299  000001                     ??_low_isr:
  1300  000001                     
  1301                           ; 1 bytes @ 0x0
  1302  000001                     	ds	1
  1303  000002                     ??_DEMO_UDP_ClaimIPCheck:
  1304  000002                     ?_memcmp:
  1305                           	opt stack 0
  1306  000002                     ?_ADC_GetConversion:
  1307                           	opt stack 0
  1308  000002                     ?_ARPV4_Lookup:
  1309                           	opt stack 0
  1310  000002                     ?_IPV4_PseudoHeaderChecksum:
  1311                           	opt stack 0
  1312  000002                     ?_UDP_GetDestPort:
  1313                           	opt stack 0
  1314  000002                     ?___lwdiv:
  1315                           	opt stack 0
  1316  000002                     ?_time:
  1317                           	opt stack 0
  1318  000002                     ?_IPV4_GetMyIP:
  1319                           	opt stack 0
  1320  000002                     ?_UDP_GetDestIP:
  1321                           	opt stack 0
  1322  000002                     lcd_write_ctrl@c:
  1323                           	opt stack 0
  1324  000002                     lcd_write_data@d:
  1325                           	opt stack 0
  1326  000002                     LED_Init@x:
  1327                           	opt stack 0
  1328  000002                     SPI_ExchangeByte@v:
  1329                           	opt stack 0
  1330  000002                     putch@data:
  1331                           	opt stack 0
  1332  000002                     ARPV4_Init@x:
  1333                           	opt stack 0
  1334  000002                     DEMO_UDP_SetClaimIP@claim_ip:
  1335                           	opt stack 0
  1336  000002                     memcmp@s2:
  1337                           	opt stack 0
  1338  000002                     time@t:
  1339                           	opt stack 0
  1340  000002                     ARPV4_Update@entryPointer:
  1341                           	opt stack 0
  1342  000002                     IPV4_PseudoHeaderChecksum@payloadLen:
  1343                           	opt stack 0
  1344  000002                     TCB_Reset@tcbPtr:
  1345                           	opt stack 0
  1346  000002                     ___lwdiv@dividend:
  1347                           	opt stack 0
  1348  000002                     memset@p1:
  1349                           	opt stack 0
  1350  000002                     ARPV4_Lookup@ip_address:
  1351                           	opt stack 0
  1352                           
  1353                           ; 4 bytes @ 0x1
  1354  000002                     	ds	1
  1355  000003                     ??_lcd_init:
  1356  000003                     ??_lcd_clear:
  1357  000003                     ?_ETH_Read16:
  1358                           	opt stack 0
  1359  000003                     ?_ETH_ReadBlock:
  1360                           	opt stack 0
  1361  000003                     ?_ETH_Read32:
  1362                           	opt stack 0
  1363  000003                     lcd_putch@c:
  1364                           	opt stack 0
  1365  000003                     lcd_goto1@pos:
  1366                           	opt stack 0
  1367  000003                     lcd_goto2@pos:
  1368                           	opt stack 0
  1369  000003                     ENCx24_BankselSPI@a:
  1370                           	opt stack 0
  1371  000003                     ETH_Read8@ret:
  1372                           	opt stack 0
  1373  000003                     ETH_Write8@data:
  1374                           	opt stack 0
  1375  000003                     DEMO_UDP_ClaimIPCheck@ret:
  1376                           	opt stack 0
  1377  000003                     ETH_ReadBlock@data:
  1378                           	opt stack 0
  1379  000003                     ETH_Write16@data:
  1380                           	opt stack 0
  1381  000003                     ETH_WriteBlock@data:
  1382                           	opt stack 0
  1383  000003                     ETH_SetRXptr@address:
  1384                           	opt stack 0
  1385  000003                     memcmp@n:
  1386                           	opt stack 0
  1387  000003                     ETH_Write32@data:
  1388                           	opt stack 0
  1389                           
  1390                           ; 4 bytes @ 0x2
  1391  000003                     	ds	1
  1392  000004                     ??_ADC_GetConversion:
  1393  000004                     ??_IPV4_PseudoHeaderChecksum:
  1394  000004                     ??_TCB_Reset:
  1395  000004                     ENCx24_BankselSPI@bank:
  1396                           	opt stack 0
  1397  000004                     ARPV4_Update@x:
  1398                           	opt stack 0
  1399  000004                     UDP_Write8@data:
  1400                           	opt stack 0
  1401  000004                     lcd_puts@s:
  1402                           	opt stack 0
  1403  000004                     DHCP_WriteZeros@length:
  1404                           	opt stack 0
  1405  000004                     ___lwdiv@divisor:
  1406                           	opt stack 0
  1407  000004                     memset@c:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x3
  1411  000004                     	ds	1
  1412  000005                     ??_memcmp:
  1413  000005                     ?_ENCx24_Read:
  1414                           	opt stack 0
  1415  000005                     ADC_GetConversion@channel:
  1416                           	opt stack 0
  1417  000005                     ETH_MACRead8@v:
  1418                           	opt stack 0
  1419  000005                     ENCx24_Write@data:
  1420                           	opt stack 0
  1421  000005                     ENCx24_BFS@bitMask:
  1422                           	opt stack 0
  1423  000005                     ENCx24_BFC@bitMask:
  1424                           	opt stack 0
  1425  000005                     ETH_Read16@ret:
  1426                           	opt stack 0
  1427  000005                     ETH_ReadBlock@length:
  1428                           	opt stack 0
  1429  000005                     ETH_WriteBlock@len:
  1430                           	opt stack 0
  1431  000005                     UDP_Write16@data:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x4
  1435  000005                     	ds	1
  1436  000006                     ?_DEMO_UDP_MeasureTemp:
  1437                           	opt stack 0
  1438  000006                     time@gie_val:
  1439                           	opt stack 0
  1440  000006                     ETH_MACRead8@bank:
  1441                           	opt stack 0
  1442  000006                     ___lwdiv@counter:
  1443                           	opt stack 0
  1444  000006                     memset@n:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x5
  1448  000006                     	ds	1
  1449  000007                     ??_ETH_ReadBlock:
  1450  000007                     ENCx24_Read@bank:
  1451                           	opt stack 0
  1452  000007                     ENCx24_Write@bank:
  1453                           	opt stack 0
  1454  000007                     ENCx24_BFS@bank:
  1455                           	opt stack 0
  1456  000007                     ENCx24_BFC@bank:
  1457                           	opt stack 0
  1458  000007                     ETH_MACRead8@a:
  1459                           	opt stack 0
  1460  000007                     memcmp@s1:
  1461                           	opt stack 0
  1462  000007                     ETH_WriteBlock@p:
  1463                           	opt stack 0
  1464  000007                     ___lwdiv@quotient:
  1465                           	opt stack 0
  1466  000007                     time@the_time:
  1467                           	opt stack 0
  1468  000007                     ETH_Read32@ret:
  1469                           	opt stack 0
  1470  000007                     UDP_Write32@data:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x6
  1474  000007                     	ds	1
  1475  000008                     ENCx24_Write@a:
  1476                           	opt stack 0
  1477  000008                     ENCx24_BFS@a:
  1478                           	opt stack 0
  1479  000008                     ENCx24_BFC@a:
  1480                           	opt stack 0
  1481  000008                     IPV4_PseudoHeaderChecksum@v:
  1482                           	opt stack 0
  1483  000008                     ETH_GetMAC@macAddr:
  1484                           	opt stack 0
  1485  000008                     ENCx24_Read@v:
  1486                           	opt stack 0
  1487  000008                     ETH_ReadBlock@p:
  1488                           	opt stack 0
  1489  000008                     DEMO_UDP_MeasureTemp@adcResult:
  1490                           	opt stack 0
  1491  000008                     memset@p:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x7
  1495  000008                     	ds	1
  1496  000009                     ?___lwmod:
  1497                           	opt stack 0
  1498  000009                     IPV4_PseudoHeaderChecksum@len:
  1499                           	opt stack 0
  1500  000009                     ETH_Flush@newRXTail:
  1501                           	opt stack 0
  1502  000009                     UDP_WriteBlock@length:
  1503                           	opt stack 0
  1504  000009                     ___lwmod@dividend:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x8
  1508  000009                     	ds	1
  1509  00000A                     ENCx24_Read@a:
  1510                           	opt stack 0
  1511  00000A                     ETH_ReadBlock@len:
  1512                           	opt stack 0
  1513  00000A                     ARPV4_Lookup@entry_pointer:
  1514                           	opt stack 0
  1515  00000A                     IPV4_PseudoHeaderChecksum@cksm:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x9
  1519  00000A                     	ds	1
  1520  00000B                     ??_ETH_SendSystemReset:
  1521  00000B                     ?_ENCx24_PhyRead:
  1522                           	opt stack 0
  1523  00000B                     ?_ETH_GetByteCount:
  1524                           	opt stack 0
  1525  00000B                     ?_ETH_readLinkStatus:
  1526                           	opt stack 0
  1527  00000B                     UDP_WriteBlock@data:
  1528                           	opt stack 0
  1529  00000B                     ETH_EventHandler@mabbipgVal:
  1530                           	opt stack 0
  1531  00000B                     ETH_Dump@length:
  1532                           	opt stack 0
  1533  00000B                     ETH_WriteStart@destMAC:
  1534                           	opt stack 0
  1535  00000B                     waitForDMA@econ1_val:
  1536                           	opt stack 0
  1537  00000B                     ENCx24_PHYWrite@data:
  1538                           	opt stack 0
  1539  00000B                     ETH_Insert@len:
  1540                           	opt stack 0
  1541  00000B                     ___lwmod@divisor:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0xA
  1545  00000B                     	ds	1
  1546  00000C                     ARPV4_Lookup@x:
  1547                           	opt stack 0
  1548  00000C                     UDP_ReadBlock@data:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0xB
  1552  00000C                     	ds	1
  1553  00000D                     ?_ETH_TxComputeChecksum:
  1554                           	opt stack 0
  1555  00000D                     ?_ETH_RxComputeChecksum:
  1556                           	opt stack 0
  1557  00000D                     ENCx24_PhyRead@a:
  1558                           	opt stack 0
  1559  00000D                     ENCx24_PHYWrite@a:
  1560                           	opt stack 0
  1561  00000D                     ___lwmod@counter:
  1562                           	opt stack 0
  1563  00000D                     ETH_EventHandler@macon2Val:
  1564                           	opt stack 0
  1565  00000D                     ETH_Dump@newRXTail:
  1566                           	opt stack 0
  1567  00000D                     ETH_WriteStart@type:
  1568                           	opt stack 0
  1569  00000D                     ETH_Copy@len:
  1570                           	opt stack 0
  1571  00000D                     ETH_TxComputeChecksum@position:
  1572                           	opt stack 0
  1573  00000D                     ETH_RxComputeChecksum@len:
  1574                           	opt stack 0
  1575  00000D                     ETH_GetByteCount@wPtr:
  1576                           	opt stack 0
  1577  00000D                     ETH_Insert@offset:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0xC
  1581  00000D                     	ds	1
  1582  00000E                     ?__doprnt:
  1583                           	opt stack 0
  1584  00000E                     __doprnt@f:
  1585                           	opt stack 0
  1586  00000E                     UDP_ReadBlock@length:
  1587                           	opt stack 0
  1588  00000E                     IPV4_PseudoHeaderChecksum@tmp:
  1589                           	opt stack 0
  1590                           
  1591                           ; 12 bytes @ 0xD
  1592  00000E                     	ds	1
  1593  00000F                     ??_ARPV4_Packet:
  1594  00000F                     ??_TCP_ParseTCPOptions:
  1595  00000F                     __doprnt@ap:
  1596                           	opt stack 0
  1597  00000F                     ETH_EventHandler@estatVal:
  1598                           	opt stack 0
  1599  00000F                     ETH_Copy@txBufferAddress:
  1600                           	opt stack 0
  1601  00000F                     ETH_TxComputeChecksum@length:
  1602                           	opt stack 0
  1603  00000F                     ETH_RxComputeChecksum@seed:
  1604                           	opt stack 0
  1605  00000F                     ETH_Insert@current_tx_pointer:
  1606                           	opt stack 0
  1607  00000F                     ETH_CheckLinkUp@value:
  1608                           	opt stack 0
  1609  00000F                     ARPV4_Request@destAddress:
  1610                           	opt stack 0
  1611                           
  1612                           ; 4 bytes @ 0xE
  1613  00000F                     	ds	1
  1614  000010                     ??__doprnt:
  1615                           
  1616                           ; 0 bytes @ 0xF
  1617  000010                     	ds	1
  1618  000011                     ??_ETH_RxComputeChecksum:
  1619  000011                     ETH_Insert@data:
  1620                           	opt stack 0
  1621  000011                     TCP_ParseTCPOptions@ret:
  1622                           	opt stack 0
  1623  000011                     ETH_EventHandler@eirVal:
  1624                           	opt stack 0
  1625  000011                     ETH_TxComputeChecksum@seed:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x10
  1629  000011                     	ds	1
  1630  000012                     TCP_ParseTCPOptions@opt:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x11
  1634  000012                     	ds	1
  1635  000013                     ??_ETH_TxComputeChecksum:
  1636  000013                     ??_ARPV4_Request:
  1637  000013                     ETH_CheckLinkUp@ret:
  1638                           	opt stack 0
  1639  000013                     __doprnt@idx:
  1640                           	opt stack 0
  1641  000013                     TCP_ParseTCPOptions@tcpOptionsSize:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x12
  1645  000013                     	ds	1
  1646  000014                     ??_ETH_Init:
  1647  000014                     __doprnt@prec:
  1648                           	opt stack 0
  1649                           
  1650                           ; 1 bytes @ 0x13
  1651  000014                     	ds	1
  1652  000015                     ETH_RxComputeChecksum@cksm:
  1653                           	opt stack 0
  1654  000015                     __doprnt@cp:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x14
  1658  000015                     	ds	1
  1659  000016                     ETH_Init@phcon1_val:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x15
  1663  000016                     	ds	1
  1664  000017                     __doprnt@flag:
  1665                           	opt stack 0
  1666  000017                     ETH_RxComputeChecksum@rxPtr:
  1667                           	opt stack 0
  1668  000017                     ETH_TxComputeChecksum@cksm:
  1669                           	opt stack 0
  1670                           
  1671                           ; 4 bytes @ 0x16
  1672  000017                     	ds	1
  1673  000018                     __doprnt@val:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x17
  1677  000018                     	ds	1
  1678  000019                     ETH_RxComputeChecksum@econ1Val:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x18
  1682  000019                     	ds	1
  1683  00001A                     __doprnt@c:
  1684                           	opt stack 0
  1685                           
  1686                           ; 1 bytes @ 0x19
  1687  00001A                     	ds	1
  1688  00001B                     __doprnt@pb:
  1689                           	opt stack 0
  1690  00001B                     ETH_TxComputeChecksum@econ1Val:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x1A
  1694  00001B                     	ds	1
  1695  00001C                     ?_sprintf:
  1696                           	opt stack 0
  1697  00001C                     ?_printf:
  1698                           	opt stack 0
  1699  00001C                     sprintf@wh:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x1B
  1703  00001C                     	ds	1
  1704  00001D                     IPV4_Send@payloadLength:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x1C
  1708  00001D                     	ds	1
  1709  00001E                     sprintf@f:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x1D
  1713  00001E                     	ds	1
  1714  00001F                     ??_IPV4_Send:
  1715                           
  1716                           ; 0 bytes @ 0x1E
  1717  00001F                     	ds	1
  1718  000020                     printf@f:
  1719                           	opt stack 0
  1720                           
  1721                           ; 1 bytes @ 0x1F
  1722  000020                     	ds	1
  1723  000021                     printf@ap:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x20
  1727  000021                     	ds	1
  1728  000022                     printf@pb:
  1729                           	opt stack 0
  1730                           
  1731                           ; 5 bytes @ 0x21
  1732  000022                     	ds	1
  1733  000023                     IPV4_Send@ret:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0x22
  1737  000023                     	ds	1
  1738  000024                     IPV4_Send@cksm:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x23
  1742  000024                     	ds	2
  1743  000026                     IPV4_Send@totalLength:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x25
  1747  000026                     	ds	1
  1748  000027                     sprintf@ap:
  1749                           	opt stack 0
  1750  000027                     SYSLOG_Write@message:
  1751                           	opt stack 0
  1752  000027                     SYSLOG_Init@t:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x26
  1756  000027                     	ds	1
  1757  000028                     ??_UDP_Send:
  1758  000028                     sprintf@pb:
  1759                           	opt stack 0
  1760                           
  1761                           ; 5 bytes @ 0x27
  1762  000028                     	ds	1
  1763  000029                     SYSLOG_Write@t:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x28
  1767  000029                     	ds	4
  1768  00002D                     UDP_Send@cksm:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x2C
  1772  00002D                     	ds	1
  1773  00002E                     ARPV4_Request@ret:
  1774                           	opt stack 0
  1775                           
  1776                           ; 1 bytes @ 0x2D
  1777  00002E                     	ds	1
  1778  00002F                     ARPV4_Packet@length:
  1779                           	opt stack 0
  1780  00002F                     UDP_Send@udpLength:
  1781                           	opt stack 0
  1782  00002F                     ARPV4_Request@header:
  1783                           	opt stack 0
  1784                           
  1785                           ; 28 bytes @ 0x2E
  1786  00002F                     	ds	2
  1787  000031                     ARPV4_Packet@mergeFlag:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x30
  1791  000031                     	ds	1
  1792  000032                     ARPV4_Packet@ret:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0x31
  1796  000032                     	ds	1
  1797  000033                     ARPV4_Packet@arpPtr:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x32
  1801  000033                     	ds	2
  1802  000035                     ARPV4_Packet@x:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x34
  1806  000035                     	ds	1
  1807  000036                     ARPV4_Packet@x_2060:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0x35
  1811  000036                     	ds	1
  1812  000037                     ARPV4_Packet@entryPointer:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x36
  1816  000037                     	ds	2
  1817  000039                     ARPV4_Packet@header:
  1818                           	opt stack 0
  1819                           
  1820                           ; 28 bytes @ 0x38
  1821  000039                     	ds	18
  1822  00004B                     IPv4_Start@destAddress:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0x4A
  1826  00004B                     	ds	4
  1827  00004F                     IPv4_Start@protocol:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x4E
  1831  00004F                     	ds	1
  1832  000050                     ??_IPv4_Start:
  1833                           
  1834                           ; 0 bytes @ 0x4F
  1835  000050                     	ds	8
  1836  000058                     UDP_Start@ret:
  1837                           	opt stack 0
  1838  000058                     ICMP_EchoReply@ipv4Hdr:
  1839                           	opt stack 0
  1840  000058                     TCP_Snd@tcbPtr:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x57
  1844  000058                     	ds	1
  1845  000059                     ??_DEMO_UDP_Send:
  1846  000059                     DHCP_Handler@length:
  1847                           	opt stack 0
  1848  000059                     
  1849                           ; 2 bytes @ 0x58
  1850  000059                     	ds	1
  1851  00005A                     ICMP_Receive@ipv4Hdr:
  1852                           	opt stack 0
  1853  00005A                     TCP_PayloadSave@len:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x59
  1857  00005A                     	ds	1
  1858  00005B                     ??_DHCP_Handler:
  1859                           
  1860                           ; 0 bytes @ 0x5A
  1861  00005B                     	ds	2
  1862                           tosu	equ	0xFFF
  1863                           tosh	equ	0xFFE
  1864                           tosl	equ	0xFFD
  1865                           pclath	equ	0xFFA
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           indf0	equ	0xFEF
  1875                           postinc0	equ	0xFEE
  1876                           fsr0h	equ	0xFEA
  1877                           fsr0l	equ	0xFE9
  1878                           wreg	equ	0xFE8
  1879                           postinc1	equ	0xFE6
  1880                           plusw1	equ	0xFE3
  1881                           fsr1h	equ	0xFE2
  1882                           fsr1l	equ	0xFE1
  1883                           bsr	equ	0xFE0
  1884                           indf2	equ	0xFDF
  1885                           postinc2	equ	0xFDE
  1886                           postdec2	equ	0xFDD
  1887                           plusw2	equ	0xFDB
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;;
  1893 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1894 ;;
  1895 ;; *************** function _main *****************
  1896 ;; Defined at:
  1897 ;;		line 70 in file "main.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  now_p           4    9[BANK2 ] long 
  1902 ;;  str            32   17[BANK2 ] unsigned char [32]
  1903 ;;  ip              4   49[BANK2 ] unsigned long 
  1904 ;;  ip_timer        4   13[BANK2 ] long 
  1905 ;;  t               4    4[BANK2 ] long 
  1906 ;;  old_ip          4    0[BANK2 ] unsigned long 
  1907 ;;  no_ip_displa    1    8[BANK2 ] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;		None               void
  1910 ;; Registers used:
  1911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : E/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Locals:         0       0       0      53       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Totals:         0       0       1      53       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;Total ram usage:       54 bytes
  1922 ;; Hardware stack levels required when called:   16
  1923 ;; This function calls:
  1924 ;;		_DEMO_UDP_IPLockTimer
  1925 ;;		_DEMO_UDP_Send
  1926 ;;		_IPV4_GetMyIP
  1927 ;;		_Network_Init
  1928 ;;		_Network_Manage
  1929 ;;		_Network_WaitForLink
  1930 ;;		_SYSLOG_Init
  1931 ;;		_SYSLOG_Write
  1932 ;;		_initHW
  1933 ;;		_lcd_goto1
  1934 ;;		_lcd_puts
  1935 ;;		_memset
  1936 ;;		_sprintf
  1937 ;;		_time
  1938 ;; This function is called by:
  1939 ;;		Startup code after reset
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text0
  1944  004C16                     __ptext0:
  1945                           	opt stack 0
  1946  004C16                     _main:
  1947                           	opt stack 15
  1948                           
  1949                           ;main.c: 72: time_t t;
  1950                           ;main.c: 73: unsigned long ip, old_ip;
  1951                           ;main.c: 74: char str[32];
  1952                           ;main.c: 75: bool no_ip_display = 1;
  1953                           
  1954                           ;incstack = 0
  1955  004C16  0E01               	movlw	1
  1956  004C18  0102               	movlb	2	; () banked
  1957  004C1A  6FC4               	movwf	main@no_ip_display& (0+255),b
  1958                           
  1959                           ; BSR set to: 2
  1960                           ;main.c: 76: time_t ip_timer;
  1961                           ;main.c: 78: initHW();
  1962  004C1C  ECCA  F02F         	call	_initHW	;wreg free
  1963                           
  1964                           ;main.c: 79: Network_Init();
  1965  004C20  ECB4  F031         	call	_Network_Init	;wreg free
  1966                           
  1967                           ; BSR set to: 2
  1968                           ;main.c: 80: SYSLOG_Init();
  1969  004C24  ECA9  F030         	call	_SYSLOG_Init	;wreg free
  1970                           
  1971                           ;main.c: 83: IPEN = 1;
  1972  004C28  8ED0               	bsf	4048,7,c	;volatile
  1973                           
  1974                           ;main.c: 84: GIEH = 1;
  1975  004C2A  8EF2               	bsf	intcon,7,c	;volatile
  1976                           
  1977                           ;main.c: 85: GIEL = 1;
  1978  004C2C  8CF2               	bsf	intcon,6,c	;volatile
  1979                           
  1980                           ;main.c: 88: SYSLOG_Write("Waiting for Link");
  1981  004C2E  0E70               	movlw	low STR_4
  1982  004C30  D888               	call	PL412	;call to abstracted procedure
  1983  004C32  EC6C  F031         	call	_SYSLOG_Write	;wreg free
  1984                           
  1985                           ;main.c: 89: Network_WaitForLink();
  1986  004C36  ECD7  F032         	call	_Network_WaitForLink	;wreg free
  1987                           
  1988                           ;main.c: 90: SYSLOG_Write("Link started");
  1989  004C3A  0E81               	movlw	low STR_5
  1990  004C3C  D882               	call	PL412	;call to abstracted procedure
  1991  004C3E  EC6C  F031         	call	_SYSLOG_Write	;wreg free
  1992                           
  1993                           ;main.c: 92: time(&ip_timer);
  1994  004C42  0EC9               	movlw	low main@ip_timer
  1995  004C44  6E02               	movwf	time@t,c
  1996  004C46  0E02               	movlw	high main@ip_timer
  1997  004C48  6E03               	movwf	time@t+1,c
  1998  004C4A  EC52  F02D         	call	_time	;wreg free
  1999  004C4E                     l10548:
  2000                           
  2001                           ;main.c: 93: ip_timer += 1;
  2002  004C4E  0102               	movlb	2	; () banked
  2003  004C50  2BC9               	incf	main@ip_timer& (0+255),f,b
  2004  004C52  0E00               	movlw	0
  2005  004C54  23CA               	addwfc	(main@ip_timer+1)& (0+255),f,b
  2006  004C56  23CB               	addwfc	(main@ip_timer+2)& (0+255),f,b
  2007  004C58  23CC               	addwfc	(main@ip_timer+3)& (0+255),f,b
  2008  004C5A                     l10550:
  2009                           
  2010                           ;main.c: 96: {
  2011                           ;main.c: 97: time_t now_p;
  2012                           ;main.c: 98: time(&now_p);
  2013  004C5A  0EC5               	movlw	low main@now_p
  2014  004C5C  6E02               	movwf	time@t,c
  2015  004C5E  0E02               	movlw	high main@now_p
  2016  004C60  6E03               	movwf	time@t+1,c
  2017  004C62  EC52  F02D         	call	_time	;wreg free
  2018                           
  2019                           ;main.c: 99: Network_Manage();
  2020  004C66  EC67  F02A         	call	_Network_Manage	;wreg free
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;main.c: 100: time(&t);
  2024  004C6A  0EC0               	movlw	low main@t
  2025  004C6C  6E02               	movwf	time@t,c
  2026  004C6E  0E02               	movlw	high main@t
  2027  004C70  6E03               	movwf	time@t+1,c
  2028  004C72  EC52  F02D         	call	_time	;wreg free
  2029                           
  2030                           ;main.c: 102: ip = IPV4_GetMyIP();
  2031  004C76  ECBE  F032         	call	_IPV4_GetMyIP	;wreg free
  2032  004C7A  C002  F2ED         	movff	?_IPV4_GetMyIP,main@ip
  2033  004C7E  C003  F2EE         	movff	?_IPV4_GetMyIP+1,main@ip+1
  2034  004C82  C004  F2EF         	movff	?_IPV4_GetMyIP+2,main@ip+2
  2035  004C86  C005  F2F0         	movff	?_IPV4_GetMyIP+3,main@ip+3
  2036                           
  2037                           ;main.c: 104: if((no_ip_display) || (old_ip != ip))
  2038  004C8A  0102               	movlb	2	; () banked
  2039  004C8C  51C4               	movf	main@no_ip_display& (0+255),w,b
  2040  004C8E  E10C               	bnz	l1651
  2041                           
  2042                           ; BSR set to: 2
  2043  004C90  51ED               	movf	main@ip& (0+255),w,b
  2044  004C92  19BC               	xorwf	main@old_ip& (0+255),w,b
  2045  004C94  E109               	bnz	u15870
  2046  004C96  51EE               	movf	(main@ip+1)& (0+255),w,b
  2047  004C98  19BD               	xorwf	(main@old_ip+1)& (0+255),w,b
  2048  004C9A  E106               	bnz	u15870
  2049  004C9C  51EF               	movf	(main@ip+2)& (0+255),w,b
  2050  004C9E  19BE               	xorwf	(main@old_ip+2)& (0+255),w,b
  2051  004CA0  E103               	bnz	u15870
  2052  004CA2  51F0               	movf	(main@ip+3)& (0+255),w,b
  2053  004CA4  19BF               	xorwf	(main@old_ip+3)& (0+255),w,b
  2054  004CA6  E038               	bz	l10574
  2055  004CA8                     u15870:
  2056  004CA8                     l1651:
  2057                           
  2058                           ; BSR set to: 2
  2059                           ;main.c: 105: {
  2060                           ;main.c: 106: old_ip = ip;
  2061  004CA8  C2ED  F2BC         	movff	main@ip,main@old_ip
  2062  004CAC  C2EE  F2BD         	movff	main@ip+1,main@old_ip+1
  2063  004CB0  C2EF  F2BE         	movff	main@ip+2,main@old_ip+2
  2064  004CB4  C2F0  F2BF         	movff	main@ip+3,main@old_ip+3
  2065                           
  2066                           ; BSR set to: 2
  2067                           ;main.c: 107: memset(str,0,sizeof(str));
  2068  004CB8  0ECD               	movlw	low main@str
  2069  004CBA  6E02               	movwf	memset@p1,c
  2070  004CBC  0E02               	movlw	high main@str
  2071  004CBE  6E03               	movwf	memset@p1+1,c
  2072  004CC0  6A05               	clrf	memset@c+1,c
  2073  004CC2  6A04               	clrf	memset@c,c
  2074  004CC4  6A07               	clrf	memset@n+1,c
  2075  004CC6  0E20               	movlw	32
  2076  004CC8  6E06               	movwf	memset@n,c
  2077  004CCA  EC1A  F031         	call	_memset	;wreg free
  2078                           
  2079                           ;main.c: 108: sprintf(str,"%d.%d.%d.%d",((char*)&ip)[3],((char*)&ip)[2],((char*)&ip)[1],
      +                          ((char*)&ip)[0]);
  2080  004CCE  0ECD               	movlw	low main@str
  2081  004CD0  6E1C               	movwf	sprintf@wh,c
  2082  004CD2  0E02               	movlw	high main@str
  2083  004CD4  6E1D               	movwf	sprintf@wh+1,c
  2084  004CD6  0E8E               	movlw	low STR_6
  2085  004CD8  6E1E               	movwf	sprintf@f,c
  2086  004CDA  C2F0  F01F         	movff	main@ip+3,?_sprintf+3
  2087  004CDE  6A20               	clrf	?_sprintf+4,c
  2088  004CE0  C2EF  F021         	movff	main@ip+2,?_sprintf+5
  2089  004CE4  6A22               	clrf	?_sprintf+6,c
  2090  004CE6  C2EE  F023         	movff	main@ip+1,?_sprintf+7
  2091  004CEA  6A24               	clrf	?_sprintf+8,c
  2092  004CEC  C2ED  F025         	movff	main@ip,?_sprintf+9
  2093  004CF0  6A26               	clrf	?_sprintf+10,c
  2094  004CF2  ECEE  F030         	call	_sprintf	;wreg free
  2095                           
  2096                           ;main.c: 109: lcd_goto1(0);
  2097  004CF6  0E00               	movlw	0
  2098  004CF8  ECE5  F032         	call	_lcd_goto1
  2099                           
  2100                           ;main.c: 110: lcd_puts(str);
  2101  004CFC  0ECD               	movlw	low main@str
  2102  004CFE  6E04               	movwf	lcd_puts@s,c
  2103  004D00  0E02               	movlw	high main@str
  2104  004D02  6E05               	movwf	lcd_puts@s+1,c
  2105  004D04  EC06  F032         	call	_lcd_puts	;wreg free
  2106                           
  2107                           ;main.c: 111: SYSLOG_Write(str);
  2108  004D08  0ECD               	movlw	low main@str
  2109  004D0A  6E27               	movwf	SYSLOG_Write@message,c
  2110  004D0C  0E02               	movlw	high main@str
  2111  004D0E  6E28               	movwf	SYSLOG_Write@message+1,c
  2112  004D10  EC6C  F031         	call	_SYSLOG_Write	;wreg free
  2113                           
  2114                           ;main.c: 112: no_ip_display = 0;
  2115  004D14  0102               	movlb	2	; () banked
  2116  004D16  6BC4               	clrf	main@no_ip_display& (0+255),b
  2117  004D18                     l10574:
  2118                           
  2119                           ; BSR set to: 2
  2120                           ;main.c: 113: }
  2121                           ;main.c: 114: if(now_p >= ip_timer)
  2122  004D18  51C9               	movf	main@ip_timer& (0+255),w,b
  2123  004D1A  5DC5               	subwf	main@now_p& (0+255),w,b
  2124  004D1C  51CA               	movf	(main@ip_timer+1)& (0+255),w,b
  2125  004D1E  59C6               	subwfb	(main@now_p+1)& (0+255),w,b
  2126  004D20  51CB               	movf	(main@ip_timer+2)& (0+255),w,b
  2127  004D22  59C7               	subwfb	(main@now_p+2)& (0+255),w,b
  2128  004D24  51C8               	movf	(main@now_p+3)& (0+255),w,b
  2129  004D26  0A80               	xorlw	128
  2130  004D28  0101               	movlb	1	; () banked
  2131  004D2A  6F82               	movwf	??_main& (0+255),b
  2132  004D2C  0102               	movlb	2	; () banked
  2133  004D2E  51CC               	movf	(main@ip_timer+3)& (0+255),w,b
  2134  004D30  0A80               	xorlw	128
  2135  004D32  0101               	movlb	1	; () banked
  2136  004D34  5982               	subwfb	??_main& (0+255),w,b
  2137  004D36  E391               	bnc	l10550
  2138                           
  2139                           ; BSR set to: 1
  2140                           ;main.c: 115: {
  2141                           ;main.c: 116: DEMO_UDP_IPLockTimer();
  2142  004D38  ECA0  F032         	call	_DEMO_UDP_IPLockTimer	;wreg free
  2143                           
  2144                           ;main.c: 117: DEMO_UDP_Send();
  2145  004D3C  EC43  F028         	call	_DEMO_UDP_Send	;wreg free
  2146  004D40  D786               	goto	l10548
  2147  004D42                     __end_of_main:
  2148                           	opt stack 0
  2149  004D42                     PL412:
  2150                           	opt stack 15
  2151  004D42  6E27               	movwf	SYSLOG_Write@message,c
  2152  004D44  5027               	movf	SYSLOG_Write@message,w,c
  2153  004D46  A4D8               	btfss	status,2,c
  2154  004D48  0E10               	movlw	high __smallconst
  2155  004D4A  6E28               	movwf	SYSLOG_Write@message+1,c
  2156  004D4C  0012               	return	
  2157  004D4E                     __end_ofPL412:
  2158                           	opt stack 0
  2159                           tosu	equ	0xFFF
  2160                           tosh	equ	0xFFE
  2161                           tosl	equ	0xFFD
  2162                           pclath	equ	0xFFA
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           intcon	equ	0xFF2
  2170                           intcon2	equ	0xFF1
  2171                           indf0	equ	0xFEF
  2172                           postinc0	equ	0xFEE
  2173                           fsr0h	equ	0xFEA
  2174                           fsr0l	equ	0xFE9
  2175                           wreg	equ	0xFE8
  2176                           postinc1	equ	0xFE6
  2177                           plusw1	equ	0xFE3
  2178                           fsr1h	equ	0xFE2
  2179                           fsr1l	equ	0xFE1
  2180                           bsr	equ	0xFE0
  2181                           indf2	equ	0xFDF
  2182                           postinc2	equ	0xFDE
  2183                           postdec2	equ	0xFDD
  2184                           plusw2	equ	0xFDB
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _initHW *****************
  2190 ;; Defined at:
  2191 ;;		line 50 in file "../board_support_package/picdem2_net/hardware.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;		None               void
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : F/2
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    5
  2212 ;; This function calls:
  2213 ;;		_ADC_Initialize
  2214 ;;		_LED_Init
  2215 ;;		_lcd_init
  2216 ;;		_rtcc_init
  2217 ;;		_spi_init
  2218 ;;		_uart_init
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text1
  2225  005F94                     __ptext1:
  2226                           	opt stack 0
  2227  005F94                     _initHW:
  2228                           	opt stack 25
  2229                           
  2230                           ; BSR set to: 2
  2231                           ;hardware.c: 53: OSCCON = 0x02;
  2232                           
  2233                           ;incstack = 0
  2234  005F94  0E02               	movlw	2
  2235  005F96  6ED3               	movwf	4051,c	;volatile
  2236                           
  2237                           ;hardware.c: 56: OSCTUNE = 0x40;
  2238  005F98  0E40               	movlw	64
  2239  005F9A  6E9B               	movwf	3995,c	;volatile
  2240                           
  2241                           ; BSR set to: 2
  2242                           ;hardware.c: 59: TRISJ = 0;
  2243  005F9C  6A9A               	clrf	3994,c	;volatile
  2244                           
  2245                           ; BSR set to: 2
  2246                           ;hardware.c: 60: LATJ = 0;
  2247  005F9E  6A91               	clrf	3985,c	;volatile
  2248                           
  2249                           ; BSR set to: 2
  2250                           ;hardware.c: 62: TRISDbits.TRISD3 = 0;
  2251  005FA0  9695               	bcf	3989,3,c	;volatile
  2252                           
  2253                           ; BSR set to: 2
  2254                           ;hardware.c: 63: LATDbits.LATD3 = 1;
  2255  005FA2  868C               	bsf	3980,3,c	;volatile
  2256                           
  2257                           ; BSR set to: 2
  2258                           ;hardware.c: 65: TRISCbits.TRISC3 = 0;
  2259  005FA4  9694               	bcf	3988,3,c	;volatile
  2260                           
  2261                           ; BSR set to: 2
  2262                           ;hardware.c: 66: TRISCbits.TRISC4 = 1;
  2263  005FA6  8894               	bsf	3988,4,c	;volatile
  2264                           
  2265                           ; BSR set to: 2
  2266                           ;hardware.c: 67: TRISCbits.TRISC5 = 0;
  2267  005FA8  9A94               	bcf	3988,5,c	;volatile
  2268                           
  2269                           ;hardware.c: 69: TRISA = 0b11111100;
  2270  005FAA  0EFC               	movlw	252
  2271  005FAC  6E92               	movwf	3986,c	;volatile
  2272                           
  2273                           ; BSR set to: 2
  2274                           ;hardware.c: 76: RBPU = 0;
  2275  005FAE  9EF1               	bcf	intcon2,7,c	;volatile
  2276                           
  2277                           ; BSR set to: 2
  2278                           ;hardware.c: 78: TRISBbits.TRISB2 = 1;
  2279  005FB0  8493               	bsf	3987,2,c	;volatile
  2280                           
  2281                           ; BSR set to: 2
  2282                           ;hardware.c: 81: TRISBbits.TRISB4 = 0;
  2283  005FB2  9893               	bcf	3987,4,c	;volatile
  2284                           
  2285                           ; BSR set to: 2
  2286                           ;hardware.c: 82: LATBbits.LATB4 = 0;
  2287  005FB4  988A               	bcf	3978,4,c	;volatile
  2288                           
  2289                           ; BSR set to: 2
  2290                           ;hardware.c: 85: TRISBbits.TRISB3 = 0;
  2291  005FB6  9693               	bcf	3987,3,c	;volatile
  2292                           
  2293                           ; BSR set to: 2
  2294                           ;hardware.c: 86: LATBbits.LATB3 = 0;
  2295  005FB8  968A               	bcf	3978,3,c	;volatile
  2296                           
  2297                           ; BSR set to: 2
  2298                           ;hardware.c: 104: rtcc_init();
  2299  005FBA  EC26  F030         	call	_rtcc_init	;wreg free
  2300                           
  2301                           ; BSR set to: 2
  2302                           ;hardware.c: 107: spi_init();
  2303  005FBE  ECFA  F032         	call	_spi_init	;wreg free
  2304                           
  2305                           ; BSR set to: 2
  2306                           ;hardware.c: 110: uart_init();
  2307  005FC2  EC8A  F032         	call	_uart_init	;wreg free
  2308                           
  2309                           ; BSR set to: 2
  2310                           ;hardware.c: 113: lcd_init();
  2311  005FC6  EC18  F02A         	call	_lcd_init	;wreg free
  2312                           
  2313                           ;hardware.c: 119: ADC_Initialize();
  2314  005FCA  EC95  F032         	call	_ADC_Initialize	;wreg free
  2315                           
  2316                           ;hardware.c: 121: LED_Init();
  2317  005FCE  EFD6  F031         	goto	_LED_Init	;wreg free
  2318  005FD2                     __end_of_initHW:
  2319                           	opt stack 0
  2320                           tosu	equ	0xFFF
  2321                           tosh	equ	0xFFE
  2322                           tosl	equ	0xFFD
  2323                           pclath	equ	0xFFA
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           intcon2	equ	0xFF1
  2332                           indf0	equ	0xFEF
  2333                           postinc0	equ	0xFEE
  2334                           fsr0h	equ	0xFEA
  2335                           fsr0l	equ	0xFE9
  2336                           wreg	equ	0xFE8
  2337                           postinc1	equ	0xFE6
  2338                           plusw1	equ	0xFE3
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           bsr	equ	0xFE0
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           plusw2	equ	0xFDB
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _uart_init *****************
  2351 ;; Defined at:
  2352 ;;		line 55 in file "../board_support_package/picdem2_net/uart.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;		None               void
  2359 ;; Registers used:
  2360 ;;		wreg, status,2
  2361 ;; Tracked objects:
  2362 ;;		On entry : F/2
  2363 ;;		On exit  : F/2
  2364 ;;		Unchanged: F/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;Total ram usage:        0 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    3
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_initHW
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text2
  2381  006514                     __ptext2:
  2382                           	opt stack 0
  2383  006514                     _uart_init:
  2384                           	opt stack 26
  2385                           
  2386                           ; BSR set to: 2
  2387                           ;uart.c: 58: TRISCbits.TRISC7 = 1;
  2388                           
  2389                           ;incstack = 0
  2390  006514  8E94               	bsf	3988,7,c	;volatile
  2391                           
  2392                           ;uart.c: 59: TRISCbits.TRISC6 = 0;
  2393  006516  9C94               	bcf	3988,6,c	;volatile
  2394                           
  2395                           ;uart.c: 62: BAUDCON1 = 0x00;
  2396  006518  6A7E               	clrf	3966,c	;volatile
  2397                           
  2398                           ; BSR set to: 2
  2399                           ;uart.c: 69: SPBRG1 = 89;
  2400  00651A  0E59               	movlw	89
  2401  00651C  6EAF               	movwf	4015,c	;volatile
  2402                           
  2403                           ; BSR set to: 2
  2404                           ;uart.c: 70: BAUDCON1bits.BRG16 = 1;
  2405  00651E  867E               	bsf	3966,3,c	;volatile
  2406                           
  2407                           ;uart.c: 71: TXSTA1 = 0x26;
  2408  006520  0E26               	movlw	38
  2409  006522  6EAC               	movwf	4012,c	;volatile
  2410                           
  2411                           ; BSR set to: 2
  2412                           ;uart.c: 73: CREN1 = 1;
  2413  006524  88AB               	bsf	4011,4,c	;volatile
  2414                           
  2415                           ; BSR set to: 2
  2416                           ;uart.c: 74: SPEN1 = 1;
  2417  006526  8EAB               	bsf	4011,7,c	;volatile
  2418                           
  2419                           ; BSR set to: 2
  2420  006528  0C26               	retlw	38	;funcret
  2421  00652A                     __end_of_uart_init:
  2422                           	opt stack 0
  2423                           tosu	equ	0xFFF
  2424                           tosh	equ	0xFFE
  2425                           tosl	equ	0xFFD
  2426                           pclath	equ	0xFFA
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           intcon2	equ	0xFF1
  2435                           indf0	equ	0xFEF
  2436                           postinc0	equ	0xFEE
  2437                           fsr0h	equ	0xFEA
  2438                           fsr0l	equ	0xFE9
  2439                           wreg	equ	0xFE8
  2440                           postinc1	equ	0xFE6
  2441                           plusw1	equ	0xFE3
  2442                           fsr1h	equ	0xFE2
  2443                           fsr1l	equ	0xFE1
  2444                           bsr	equ	0xFE0
  2445                           indf2	equ	0xFDF
  2446                           postinc2	equ	0xFDE
  2447                           postdec2	equ	0xFDD
  2448                           plusw2	equ	0xFDB
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _spi_init *****************
  2454 ;; Defined at:
  2455 ;;		line 46 in file "../board_support_package/picdem2_net/mssp_spi_master.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;		None               void
  2462 ;; Registers used:
  2463 ;;		wreg, status,2
  2464 ;; Tracked objects:
  2465 ;;		On entry : F/2
  2466 ;;		On exit  : F/2
  2467 ;;		Unchanged: F/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    3
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_initHW
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text3
  2484  0065F4                     __ptext3:
  2485                           	opt stack 0
  2486  0065F4                     _spi_init:
  2487                           	opt stack 26
  2488                           
  2489                           ; BSR set to: 2
  2490                           ;mssp_spi_master.c: 48: SSP1STATbits.CKE = 1;
  2491                           
  2492                           ; BSR set to: 2
  2493                           ;incstack = 0
  2494  0065F4  8CC7               	bsf	4039,6,c	;volatile
  2495                           
  2496                           ;mssp_spi_master.c: 49: SSP1STATbits.SMP = 0;
  2497  0065F6  9EC7               	bcf	4039,7,c	;volatile
  2498                           
  2499                           ; BSR set to: 2
  2500                           ;mssp_spi_master.c: 51: SSP1CON1 = 0x01;
  2501  0065F8  0E01               	movlw	1
  2502  0065FA  6EC6               	movwf	4038,c	;volatile
  2503                           
  2504                           ; BSR set to: 2
  2505                           ;mssp_spi_master.c: 52: SSP1CON1bits.SSPEN = 1;
  2506  0065FC  8AC6               	bsf	4038,5,c	;volatile
  2507                           
  2508                           ; BSR set to: 2
  2509  0065FE  0C01               	retlw	1	;funcret
  2510  006600                     __end_of_spi_init:
  2511                           	opt stack 0
  2512                           tosu	equ	0xFFF
  2513                           tosh	equ	0xFFE
  2514                           tosl	equ	0xFFD
  2515                           pclath	equ	0xFFA
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           intcon2	equ	0xFF1
  2524                           indf0	equ	0xFEF
  2525                           postinc0	equ	0xFEE
  2526                           fsr0h	equ	0xFEA
  2527                           fsr0l	equ	0xFE9
  2528                           wreg	equ	0xFE8
  2529                           postinc1	equ	0xFE6
  2530                           plusw1	equ	0xFE3
  2531                           fsr1h	equ	0xFE2
  2532                           fsr1l	equ	0xFE1
  2533                           bsr	equ	0xFE0
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           plusw2	equ	0xFDB
  2538                           fsr2h	equ	0xFDA
  2539                           fsr2l	equ	0xFD9
  2540                           status	equ	0xFD8
  2541                           
  2542 ;; *************** function _rtcc_init *****************
  2543 ;; Defined at:
  2544 ;;		line 77 in file "../board_support_package/picdem2_net/rtcc.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;		None               void
  2551 ;; Registers used:
  2552 ;;		wreg, status,2
  2553 ;; Tracked objects:
  2554 ;;		On entry : F/2
  2555 ;;		On exit  : F/2
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    3
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_initHW
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text4
  2573  00604C                     __ptext4:
  2574                           	opt stack 0
  2575  00604C                     _rtcc_init:
  2576                           	opt stack 26
  2577                           
  2578                           ; BSR set to: 2
  2579                           ;rtcc.c: 79: TMR1CS = 1;
  2580                           
  2581                           ; BSR set to: 2
  2582                           ;incstack = 0
  2583  00604C  82CD               	bsf	4045,1,c	;volatile
  2584                           
  2585                           ;rtcc.c: 80: T1OSCEN = 1;
  2586  00604E  86CD               	bsf	4045,3,c	;volatile
  2587                           
  2588                           ;rtcc.c: 81: T1CKPS0 = 0;
  2589  006050  98CD               	bcf	4045,4,c	;volatile
  2590                           
  2591                           ;rtcc.c: 82: T1CKPS1 = 0;
  2592  006052  9ACD               	bcf	4045,5,c	;volatile
  2593                           
  2594                           ;rtcc.c: 83: T1SYNC = 1;
  2595  006054  84CD               	bsf	4045,2,c	;volatile
  2596                           
  2597                           ;rtcc.c: 84: TMR1ON = 1;
  2598  006056  80CD               	bsf	4045,0,c	;volatile
  2599                           
  2600                           ; BSR set to: 2
  2601                           ;rtcc.c: 86: TMR1 = 32768UL;
  2602  006058  0E80               	movlw	128
  2603  00605A  6ECF               	movwf	4047,c	;volatile
  2604  00605C  6ACE               	clrf	4046,c	;volatile
  2605                           
  2606                           ;rtcc.c: 87: deviceTime = 1293861600;
  2607  00605E  0EE0               	movlw	224
  2608  006060  6FF1               	movwf	_deviceTime& (0+255),b	;volatile
  2609  006062  0EC2               	movlw	194
  2610  006064  6FF2               	movwf	(_deviceTime+1)& (0+255),b	;volatile
  2611  006066  0E1E               	movlw	30
  2612  006068  6FF3               	movwf	(_deviceTime+2)& (0+255),b	;volatile
  2613  00606A  0E4D               	movlw	77
  2614  00606C  6FF4               	movwf	(_deviceTime+3)& (0+255),b	;volatile
  2615                           
  2616                           ;rtcc.c: 88: localTime = 1293861600 + 2208988800;
  2617  00606E  0E60               	movlw	96
  2618  006070  6FF5               	movwf	_localTime& (0+255),b	;volatile
  2619  006072  0E41               	movlw	65
  2620  006074  6FF6               	movwf	(_localTime+1)& (0+255),b	;volatile
  2621  006076  0EC9               	movlw	201
  2622  006078  6FF7               	movwf	(_localTime+2)& (0+255),b	;volatile
  2623  00607A  0ED0               	movlw	208
  2624  00607C  6FF8               	movwf	(_localTime+3)& (0+255),b	;volatile
  2625                           
  2626                           ; BSR set to: 2
  2627                           ;rtcc.c: 90: TMR1IP = 1;
  2628  00607E  809F               	bsf	3999,0,c	;volatile
  2629                           
  2630                           ; BSR set to: 2
  2631                           ;rtcc.c: 91: TMR1IE = 1;
  2632  006080  809D               	bsf	3997,0,c	;volatile
  2633                           
  2634                           ; BSR set to: 2
  2635  006082  0CD0               	retlw	208	;funcret
  2636  006084                     __end_of_rtcc_init:
  2637                           	opt stack 0
  2638                           tosu	equ	0xFFF
  2639                           tosh	equ	0xFFE
  2640                           tosl	equ	0xFFD
  2641                           pclath	equ	0xFFA
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           intcon2	equ	0xFF1
  2650                           indf0	equ	0xFEF
  2651                           postinc0	equ	0xFEE
  2652                           fsr0h	equ	0xFEA
  2653                           fsr0l	equ	0xFE9
  2654                           wreg	equ	0xFE8
  2655                           postinc1	equ	0xFE6
  2656                           plusw1	equ	0xFE3
  2657                           fsr1h	equ	0xFE2
  2658                           fsr1l	equ	0xFE1
  2659                           bsr	equ	0xFE0
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           plusw2	equ	0xFDB
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _lcd_init *****************
  2669 ;; Defined at:
  2670 ;;		line 110 in file "../board_support_package/picdem2_net/lcd.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  y               2    0        volatile int 
  2675 ;;  x               2    0        volatile int 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : F/2
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        1 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    4
  2692 ;; This function calls:
  2693 ;;		_lcd_busy
  2694 ;;		_lcd_init_pins
  2695 ;;		_lcd_write_ctrl
  2696 ;; This function is called by:
  2697 ;;		_initHW
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text5
  2702  005430                     __ptext5:
  2703                           	opt stack 0
  2704  005430                     _lcd_init:
  2705                           	opt stack 25
  2706                           
  2707                           ; BSR set to: 2
  2708                           ;lcd.c: 112: volatile int x,y;
  2709                           ;lcd.c: 114: lcd_init_pins();
  2710                           
  2711                           ; BSR set to: 2
  2712                           ;incstack = 0
  2713  005430  EC12  F033         	call	_lcd_init_pins	;wreg free
  2714                           
  2715                           ; BSR set to: 2
  2716                           ;lcd.c: 116: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2717  005434  D846               	call	PL456	;call to abstracted procedure
  2718  005436                     u15897:
  2719  005436  2EE8               	decfsz	wreg,f,c
  2720  005438  D7FE               	goto	u15897
  2721  00543A  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2722  00543C  D7FC               	goto	u15897
  2723  00543E  D000               	nop2	
  2724                           
  2725                           ;lcd.c: 117: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2726  005440  D840               	call	PL456	;call to abstracted procedure
  2727  005442                     u15907:
  2728  005442  2EE8               	decfsz	wreg,f,c
  2729  005444  D7FE               	goto	u15907
  2730  005446  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2731  005448  D7FC               	goto	u15907
  2732  00544A  D000               	nop2	
  2733                           
  2734                           ;lcd.c: 118: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2735  00544C  D83A               	call	PL456	;call to abstracted procedure
  2736  00544E                     u15917:
  2737  00544E  2EE8               	decfsz	wreg,f,c
  2738  005450  D7FE               	goto	u15917
  2739  005452  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2740  005454  D7FC               	goto	u15917
  2741  005456  D000               	nop2	
  2742                           
  2743                           ;lcd.c: 119: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2744  005458  D834               	call	PL456	;call to abstracted procedure
  2745  00545A                     u15927:
  2746  00545A  2EE8               	decfsz	wreg,f,c
  2747  00545C  D7FE               	goto	u15927
  2748  00545E  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2749  005460  D7FC               	goto	u15927
  2750  005462  D000               	nop2	
  2751                           
  2752                           ;lcd.c: 122: lcd_write_ctrl(0x03);
  2753  005464  0E03               	movlw	3
  2754  005466  ECF6  F031         	call	_lcd_write_ctrl
  2755                           
  2756                           ;lcd.c: 123: _delay((unsigned long)((4)*(41666667UL/4000.0)));
  2757  00546A  D82E               	call	PL498	;call to abstracted procedure
  2758  00546C                     u15937:
  2759  00546C  2EE8               	decfsz	wreg,f,c
  2760  00546E  D7FE               	goto	u15937
  2761  005470  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2762  005472  D7FC               	goto	u15937
  2763  005474  F000               	nop	
  2764                           
  2765                           ;lcd.c: 124: lcd_write_ctrl(0x03);
  2766  005476  0E03               	movlw	3
  2767  005478  ECF6  F031         	call	_lcd_write_ctrl
  2768                           
  2769                           ;lcd.c: 125: _delay((unsigned long)((4)*(41666667UL/4000.0)));
  2770  00547C  D825               	call	PL498	;call to abstracted procedure
  2771  00547E                     u15947:
  2772  00547E  2EE8               	decfsz	wreg,f,c
  2773  005480  D7FE               	goto	u15947
  2774  005482  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2775  005484  D7FC               	goto	u15947
  2776  005486  F000               	nop	
  2777                           
  2778                           ;lcd.c: 126: lcd_write_ctrl(0x03);
  2779  005488  0E03               	movlw	3
  2780  00548A  ECF6  F031         	call	_lcd_write_ctrl
  2781                           
  2782                           ;lcd.c: 129: lcd_write_ctrl(0x38);
  2783  00548E  0E38               	movlw	56
  2784  005490  ECF6  F031         	call	_lcd_write_ctrl
  2785                           
  2786                           ;lcd.c: 131: lcd_busy();
  2787  005494  EC17  F033         	call	_lcd_busy	;wreg free
  2788                           
  2789                           ;lcd.c: 132: lcd_write_ctrl(0x0C);
  2790  005498  0E0C               	movlw	12
  2791  00549A  ECF6  F031         	call	_lcd_write_ctrl
  2792                           
  2793                           ;lcd.c: 133: lcd_busy();
  2794  00549E  EC17  F033         	call	_lcd_busy	;wreg free
  2795                           
  2796                           ;lcd.c: 134: lcd_write_ctrl(0x01);
  2797  0054A2  0E01               	movlw	1
  2798  0054A4  ECF6  F031         	call	_lcd_write_ctrl
  2799                           
  2800                           ;lcd.c: 135: lcd_busy();
  2801  0054A8  EC17  F033         	call	_lcd_busy	;wreg free
  2802                           
  2803                           ;lcd.c: 138: lcd_write_ctrl(0x01);
  2804  0054AC  0E01               	movlw	1
  2805  0054AE  ECF6  F031         	call	_lcd_write_ctrl
  2806                           
  2807                           ;lcd.c: 139: _delay((unsigned long)((2)*(41666667UL/4000.0)));
  2808  0054B2  0E1C               	movlw	28
  2809  0054B4  6E03               	movwf	??_lcd_init& (0+255),c
  2810  0054B6  0E0D               	movlw	13
  2811  0054B8                     u15957:
  2812  0054B8  2EE8               	decfsz	wreg,f,c
  2813  0054BA  D7FE               	goto	u15957
  2814  0054BC  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2815  0054BE  D7FC               	goto	u15957
  2816  0054C0  0012               	return		;funcret
  2817  0054C2                     __end_of_lcd_init:
  2818                           	opt stack 0
  2819  0054C2                     PL456:
  2820                           	opt stack 25
  2821  0054C2  0E88               	movlw	136
  2822  0054C4  6E03               	movwf	??_lcd_init& (0+255),c
  2823  0054C6  0C46               	retlw	70
  2824  0054C8                     __end_ofPL456:
  2825                           	opt stack 0
  2826  0054C8                     PL498:
  2827                           	opt stack 25
  2828  0054C8  0E37               	movlw	55
  2829  0054CA  6E03               	movwf	??_lcd_init& (0+255),c
  2830  0054CC  0C1B               	retlw	27
  2831  0054CE                     __end_ofPL498:
  2832                           	opt stack 0
  2833                           tosu	equ	0xFFF
  2834                           tosh	equ	0xFFE
  2835                           tosl	equ	0xFFD
  2836                           pclath	equ	0xFFA
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           intcon2	equ	0xFF1
  2845                           indf0	equ	0xFEF
  2846                           postinc0	equ	0xFEE
  2847                           fsr0h	equ	0xFEA
  2848                           fsr0l	equ	0xFE9
  2849                           wreg	equ	0xFE8
  2850                           postinc1	equ	0xFE6
  2851                           plusw1	equ	0xFE3
  2852                           fsr1h	equ	0xFE2
  2853                           fsr1l	equ	0xFE1
  2854                           bsr	equ	0xFE0
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           postdec2	equ	0xFDD
  2858                           plusw2	equ	0xFDB
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _lcd_init_pins *****************
  2864 ;; Defined at:
  2865 ;;		line 50 in file "../board_support_package/picdem2_net/lcd_hw.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;		None               void
  2872 ;; Registers used:
  2873 ;;		None
  2874 ;; Tracked objects:
  2875 ;;		On entry : F/2
  2876 ;;		On exit  : F/2
  2877 ;;		Unchanged: F/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    3
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_lcd_init
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text6
  2894  006624                     __ptext6:
  2895                           	opt stack 0
  2896  006624                     _lcd_init_pins:
  2897                           	opt stack 25
  2898                           
  2899                           ; BSR set to: 2
  2900                           ;lcd_hw.c: 52: TRISE = 0;
  2901                           
  2902                           ;incstack = 0
  2903  006624  6A96               	clrf	3990,c	;volatile
  2904                           
  2905                           ;lcd_hw.c: 53: TRISH = 0x00;
  2906  006626  6A99               	clrf	3993,c	;volatile
  2907                           
  2908                           ;lcd_hw.c: 54: LATE = 0;
  2909  006628  6A8D               	clrf	3981,c	;volatile
  2910                           
  2911                           ;lcd_hw.c: 55: LATH = 0;
  2912  00662A  6A90               	clrf	3984,c	;volatile
  2913                           
  2914                           ; BSR set to: 2
  2915  00662C  0012               	return		;funcret
  2916  00662E                     __end_of_lcd_init_pins:
  2917                           	opt stack 0
  2918                           tosu	equ	0xFFF
  2919                           tosh	equ	0xFFE
  2920                           tosl	equ	0xFFD
  2921                           pclath	equ	0xFFA
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           intcon	equ	0xFF2
  2929                           intcon2	equ	0xFF1
  2930                           indf0	equ	0xFEF
  2931                           postinc0	equ	0xFEE
  2932                           fsr0h	equ	0xFEA
  2933                           fsr0l	equ	0xFE9
  2934                           wreg	equ	0xFE8
  2935                           postinc1	equ	0xFE6
  2936                           plusw1	equ	0xFE3
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           bsr	equ	0xFE0
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           plusw2	equ	0xFDB
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function _LED_Init *****************
  2949 ;; Defined at:
  2950 ;;		line 55 in file "../board_support_package/picdem2_net/led_driver.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  x               1    1[COMRAM] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;		None               void
  2957 ;; Registers used:
  2958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/2
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;Total ram usage:        1 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    3
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_initHW
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text7
  2979  0063AC                     __ptext7:
  2980                           	opt stack 0
  2981  0063AC                     _LED_Init:
  2982                           	opt stack 26
  2983                           
  2984                           ;led_driver.c: 57: uint8_t x = 0;
  2985                           
  2986                           ; BSR set to: 2
  2987                           ;incstack = 0
  2988  0063AC  6A02               	clrf	LED_Init@x,c
  2989                           
  2990                           ;led_driver.c: 58: for(x = 0; x < 8; x++)
  2991  0063AE  6A02               	clrf	LED_Init@x,c
  2992  0063B0                     l10134:
  2993                           
  2994                           ;led_driver.c: 59: {
  2995                           ;led_driver.c: 60: led_values[x].value = 0;
  2996  0063B0  5002               	movf	LED_Init@x,w,c
  2997  0063B2  0D02               	mullw	2
  2998  0063B4  0E00               	movlw	low _led_values
  2999  0063B6  24F3               	addwf	prodl,w,c
  3000  0063B8  6ED9               	movwf	fsr2l,c
  3001  0063BA  0E02               	movlw	high _led_values
  3002  0063BC  20F4               	addwfc	prodh,w,c
  3003  0063BE  6EDA               	movwf	fsr2h,c
  3004  0063C0  6ADF               	clrf	indf2,c
  3005  0063C2  2A02               	incf	LED_Init@x,f,c
  3006  0063C4  0E07               	movlw	7
  3007  0063C6  6402               	cpfsgt	LED_Init@x,c
  3008  0063C8  D7F3               	goto	l10134
  3009  0063CA  0C07               	retlw	7
  3010  0063CC                     __end_of_LED_Init:
  3011                           	opt stack 0
  3012                           tosu	equ	0xFFF
  3013                           tosh	equ	0xFFE
  3014                           tosl	equ	0xFFD
  3015                           pclath	equ	0xFFA
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           indf0	equ	0xFEF
  3025                           postinc0	equ	0xFEE
  3026                           fsr0h	equ	0xFEA
  3027                           fsr0l	equ	0xFE9
  3028                           wreg	equ	0xFE8
  3029                           postinc1	equ	0xFE6
  3030                           plusw1	equ	0xFE3
  3031                           fsr1h	equ	0xFE2
  3032                           fsr1l	equ	0xFE1
  3033                           bsr	equ	0xFE0
  3034                           indf2	equ	0xFDF
  3035                           postinc2	equ	0xFDE
  3036                           postdec2	equ	0xFDD
  3037                           plusw2	equ	0xFDB
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _ADC_Initialize *****************
  3043 ;; Defined at:
  3044 ;;		line 55 in file "../board_support_package/picdem2_net/adc.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;		None
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, status,2
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/2
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        0 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    3
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_initHW
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text8
  3073  00652A                     __ptext8:
  3074                           	opt stack 0
  3075  00652A                     _ADC_Initialize:
  3076                           	opt stack 26
  3077                           
  3078                           ;adc.c: 59: TRISAbits.RA2 = 1;
  3079                           
  3080                           ;incstack = 0
  3081  00652A  8492               	bsf	3986,2,c	;volatile
  3082                           
  3083                           ;adc.c: 60: TRISAbits.RA3 = 1;
  3084  00652C  8692               	bsf	3986,3,c	;volatile
  3085                           
  3086                           ;adc.c: 63: ADCON0 = 0x0D;
  3087  00652E  0E0D               	movlw	13
  3088  006530  6EC2               	movwf	4034,c	;volatile
  3089                           
  3090                           ;adc.c: 66: ADCON1 = 0x06;
  3091  006532  0E06               	movlw	6
  3092  006534  6EC1               	movwf	4033,c	;volatile
  3093                           
  3094                           ;adc.c: 69: ADCON2 = 0xBE;
  3095  006536  0EBE               	movlw	190
  3096  006538  6EC0               	movwf	4032,c	;volatile
  3097                           
  3098                           ;adc.c: 72: ADRESL = 0x00;
  3099  00653A  6AC3               	clrf	4035,c	;volatile
  3100                           
  3101                           ;adc.c: 75: ADRESH = 0x00;
  3102  00653C  6AC4               	clrf	4036,c	;volatile
  3103  00653E  0012               	return		;funcret
  3104  006540                     __end_of_ADC_Initialize:
  3105                           	opt stack 0
  3106                           tosu	equ	0xFFF
  3107                           tosh	equ	0xFFE
  3108                           tosl	equ	0xFFD
  3109                           pclath	equ	0xFFA
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           intcon	equ	0xFF2
  3117                           intcon2	equ	0xFF1
  3118                           indf0	equ	0xFEF
  3119                           postinc0	equ	0xFEE
  3120                           fsr0h	equ	0xFEA
  3121                           fsr0l	equ	0xFE9
  3122                           wreg	equ	0xFE8
  3123                           postinc1	equ	0xFE6
  3124                           plusw1	equ	0xFE3
  3125                           fsr1h	equ	0xFE2
  3126                           fsr1l	equ	0xFE1
  3127                           bsr	equ	0xFE0
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           plusw2	equ	0xFDB
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _SYSLOG_Write *****************
  3137 ;; Defined at:
  3138 ;;		line 50 in file "../../TCPIP Library/source/syslog.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  message         2   38[COMRAM] PTR const unsigned char 
  3141 ;;		 -> main@str(32), STR_5(13), STR_4(17), 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  t               2   40[COMRAM] unsigned int 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/2
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3153 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;Total ram usage:        4 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    6
  3160 ;; This function calls:
  3161 ;;		_printf
  3162 ;;		_time
  3163 ;; This function is called by:
  3164 ;;		_main
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text9
  3169  0062D8                     __ptext9:
  3170                           	opt stack 0
  3171  0062D8                     _SYSLOG_Write:
  3172                           	opt stack 24
  3173                           
  3174                           ;syslog.c: 52: unsigned int t = (unsigned int) time(0);
  3175                           
  3176                           ;incstack = 0
  3177  0062D8  6A02               	clrf	time@t,c
  3178  0062DA  6A03               	clrf	time@t+1,c
  3179  0062DC  EC52  F02D         	call	_time	;wreg free
  3180  0062E0  C002  F029         	movff	?_time,SYSLOG_Write@t
  3181  0062E4  C003  F02A         	movff	?_time+1,SYSLOG_Write@t+1
  3182                           
  3183                           ;syslog.c: 53: printf("%u : %s\r\n",t,message);
  3184  0062E8  C029  F01C         	movff	SYSLOG_Write@t,?_printf
  3185  0062EC  C02A  F01D         	movff	SYSLOG_Write@t+1,?_printf+1
  3186  0062F0  C027  F01E         	movff	SYSLOG_Write@message,?_printf+2
  3187  0062F4  C028  F01F         	movff	SYSLOG_Write@message+1,?_printf+3
  3188  0062F8  0E9A               	movlw	STR_3& (0+255)
  3189  0062FA  EF7F  F031         	goto	_printf
  3190  0062FE                     __end_of_SYSLOG_Write:
  3191                           	opt stack 0
  3192                           tosu	equ	0xFFF
  3193                           tosh	equ	0xFFE
  3194                           tosl	equ	0xFFD
  3195                           pclath	equ	0xFFA
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           intcon2	equ	0xFF1
  3204                           indf0	equ	0xFEF
  3205                           postinc0	equ	0xFEE
  3206                           fsr0h	equ	0xFEA
  3207                           fsr0l	equ	0xFE9
  3208                           wreg	equ	0xFE8
  3209                           postinc1	equ	0xFE6
  3210                           plusw1	equ	0xFE3
  3211                           fsr1h	equ	0xFE2
  3212                           fsr1l	equ	0xFE1
  3213                           bsr	equ	0xFE0
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           plusw2	equ	0xFDB
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _SYSLOG_Init *****************
  3223 ;; Defined at:
  3224 ;;		line 43 in file "../../TCPIP Library/source/syslog.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  t               4   38[COMRAM] unsigned long 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;		None               void
  3231 ;; Registers used:
  3232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : F/2
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;Total ram usage:        4 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    6
  3245 ;; This function calls:
  3246 ;;		_printf
  3247 ;;		_time
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text10
  3254  006152                     __ptext10:
  3255                           	opt stack 0
  3256  006152                     _SYSLOG_Init:
  3257                           	opt stack 24
  3258                           
  3259                           ; BSR set to: 2
  3260                           ;syslog.c: 45: unsigned long t = time(0);
  3261                           
  3262                           ;incstack = 0
  3263  006152  6A02               	clrf	time@t,c
  3264  006154  6A03               	clrf	time@t+1,c
  3265  006156  EC52  F02D         	call	_time	;wreg free
  3266  00615A  C002  F027         	movff	?_time,SYSLOG_Init@t
  3267  00615E  C003  F028         	movff	?_time+1,SYSLOG_Init@t+1
  3268  006162  C004  F029         	movff	?_time+2,SYSLOG_Init@t+2
  3269  006166  C005  F02A         	movff	?_time+3,SYSLOG_Init@t+3
  3270                           
  3271                           ;syslog.c: 47: printf("\r\n\r\nStarting Syslog at %u\r\n",t);
  3272  00616A  C027  F01C         	movff	SYSLOG_Init@t,?_printf
  3273  00616E  C028  F01D         	movff	SYSLOG_Init@t+1,?_printf+1
  3274  006172  C029  F01E         	movff	SYSLOG_Init@t+2,?_printf+2
  3275  006176  C02A  F01F         	movff	SYSLOG_Init@t+3,?_printf+3
  3276  00617A  0E43               	movlw	STR_2& (0+255)
  3277  00617C  EF7F  F031         	goto	_printf
  3278  006180                     __end_of_SYSLOG_Init:
  3279                           	opt stack 0
  3280                           tosu	equ	0xFFF
  3281                           tosh	equ	0xFFE
  3282                           tosl	equ	0xFFD
  3283                           pclath	equ	0xFFA
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           intcon	equ	0xFF2
  3291                           intcon2	equ	0xFF1
  3292                           indf0	equ	0xFEF
  3293                           postinc0	equ	0xFEE
  3294                           fsr0h	equ	0xFEA
  3295                           fsr0l	equ	0xFE9
  3296                           wreg	equ	0xFE8
  3297                           postinc1	equ	0xFE6
  3298                           plusw1	equ	0xFE3
  3299                           fsr1h	equ	0xFE2
  3300                           fsr1l	equ	0xFE1
  3301                           bsr	equ	0xFE0
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           plusw2	equ	0xFDB
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _printf *****************
  3311 ;; Defined at:
  3312 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\printf.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  f               1    wreg     PTR const unsigned char 
  3315 ;;		 -> STR_3(10), STR_2(28), 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  f               1   31[COMRAM] PTR const unsigned char 
  3318 ;;		 -> STR_3(10), STR_2(28), 
  3319 ;;  pb              5   33[COMRAM] struct __prbuf
  3320 ;;  ap              1   32[COMRAM] PTR void [1]
  3321 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  2   27[COMRAM] int 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/2
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:       11 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    5
  3338 ;; This function calls:
  3339 ;;		__doprnt
  3340 ;; This function is called by:
  3341 ;;		_SYSLOG_Init
  3342 ;;		_SYSLOG_Write
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text11
  3347  0062FE                     __ptext11:
  3348                           	opt stack 0
  3349  0062FE                     _printf:
  3350                           	opt stack 24
  3351                           
  3352                           ;incstack = 0
  3353                           ;printf@f stored from wreg
  3354  0062FE  6E20               	movwf	printf@f,c
  3355  006300  6A22               	clrf	printf@pb,c
  3356  006302  6A23               	clrf	printf@pb+1,c
  3357  006304  0E64               	movlw	low _putch
  3358  006306  6E24               	movwf	printf@pb+2,c
  3359  006308  0E64               	movlw	high _putch
  3360  00630A  6E25               	movwf	printf@pb+3,c
  3361  00630C  0E00               	movlw	low (_putch shr (0+16))
  3362  00630E  6E26               	movwf	printf@pb+4,c
  3363  006310  0E1C               	movlw	low ?_printf
  3364  006312  6E21               	movwf	printf@ap,c
  3365                           
  3366                           ;	Return value of _printf is never used
  3367  006314  C020  F00E         	movff	printf@f,__doprnt@f
  3368  006318  0E21               	movlw	low printf@ap
  3369  00631A  6E0F               	movwf	__doprnt@ap,c
  3370  00631C  0E22               	movlw	printf@pb& (0+255)
  3371  00631E  EF79  F01D         	goto	__doprnt
  3372  006322                     __end_of_printf:
  3373                           	opt stack 0
  3374                           tosu	equ	0xFFF
  3375                           tosh	equ	0xFFE
  3376                           tosl	equ	0xFFD
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           intcon2	equ	0xFF1
  3386                           indf0	equ	0xFEF
  3387                           postinc0	equ	0xFEE
  3388                           fsr0h	equ	0xFEA
  3389                           fsr0l	equ	0xFE9
  3390                           wreg	equ	0xFE8
  3391                           postinc1	equ	0xFE6
  3392                           plusw1	equ	0xFE3
  3393                           fsr1h	equ	0xFE2
  3394                           fsr1l	equ	0xFE1
  3395                           bsr	equ	0xFE0
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           plusw2	equ	0xFDB
  3400                           fsr2h	equ	0xFDA
  3401                           fsr2l	equ	0xFD9
  3402                           status	equ	0xFD8
  3403                           
  3404 ;; *************** function _Network_WaitForLink *****************
  3405 ;; Defined at:
  3406 ;;		line 76 in file "../../TCPIP Library/source/network.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/2
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;Total ram usage:        0 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    8
  3427 ;; This function calls:
  3428 ;;		_ETH_CheckLinkUp
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text12
  3435  0065AE                     __ptext12:
  3436                           	opt stack 0
  3437  0065AE                     _Network_WaitForLink:
  3438                           	opt stack 22
  3439                           
  3440                           ;network.c: 78: while(!ETH_CheckLinkUp()) __nop();
  3441                           
  3442                           ;incstack = 0
  3443  0065AE  D001               	goto	l10458
  3444  0065B0                     l1116:
  3445  0065B0  F000               	nop	
  3446  0065B2                     l10458:
  3447  0065B2  EC77  F030         	call	_ETH_CheckLinkUp	;wreg free
  3448  0065B6  0900               	iorlw	0
  3449  0065B8  E0FB               	bz	l1116
  3450  0065BA  0012               	return		;funcret
  3451  0065BC                     __end_of_Network_WaitForLink:
  3452                           	opt stack 0
  3453                           tosu	equ	0xFFF
  3454                           tosh	equ	0xFFE
  3455                           tosl	equ	0xFFD
  3456                           pclath	equ	0xFFA
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           intcon	equ	0xFF2
  3464                           intcon2	equ	0xFF1
  3465                           indf0	equ	0xFEF
  3466                           postinc0	equ	0xFEE
  3467                           fsr0h	equ	0xFEA
  3468                           fsr0l	equ	0xFE9
  3469                           wreg	equ	0xFE8
  3470                           postinc1	equ	0xFE6
  3471                           plusw1	equ	0xFE3
  3472                           fsr1h	equ	0xFE2
  3473                           fsr1l	equ	0xFE1
  3474                           bsr	equ	0xFE0
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           plusw2	equ	0xFDB
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _Network_Manage *****************
  3484 ;; Defined at:
  3485 ;;		line 81 in file "../../TCPIP Library/source/network.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  now             4  126[BANK1 ] long 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/2
  3496 ;;		On exit  : F/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;Total ram usage:        5 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:   15
  3506 ;; This function calls:
  3507 ;;		_ARPV4_Update
  3508 ;;		_DHCP_Manage
  3509 ;;		_ETH_EventHandler
  3510 ;;		_Network_Read
  3511 ;;		_TCP_Update
  3512 ;;		_time
  3513 ;; This function is called by:
  3514 ;;		_main
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text13
  3519  0054CE                     __ptext13:
  3520                           	opt stack 0
  3521  0054CE                     _Network_Manage:
  3522                           	opt stack 15
  3523                           
  3524                           ;network.c: 83: time_t now;
  3525                           ;network.c: 84: static time_t nowPv = 0;
  3526                           ;network.c: 86: ETH_EventHandler();
  3527                           
  3528                           ;incstack = 0
  3529  0054CE  ECC5  F029         	call	_ETH_EventHandler	;wreg free
  3530                           
  3531                           ;network.c: 87: Network_Read();
  3532  0054D2  EC1B  F029         	call	_Network_Read	;wreg free
  3533                           
  3534                           ;network.c: 90: time(&now);
  3535  0054D6  0E7E               	movlw	low Network_Manage@now
  3536  0054D8  6E02               	movwf	time@t,c
  3537  0054DA  0E01               	movlw	high Network_Manage@now
  3538  0054DC  6E03               	movwf	time@t+1,c
  3539  0054DE  EC52  F02D         	call	_time	;wreg free
  3540                           
  3541                           ;network.c: 91: if(now >= arpTimer)
  3542  0054E2  0102               	movlb	2	; () banked
  3543  0054E4  51B8               	movf	_arpTimer& (0+255),w,b
  3544  0054E6  0101               	movlb	1	; () banked
  3545  0054E8  5D7E               	subwf	Network_Manage@now& (0+255),w,b
  3546  0054EA  0102               	movlb	2	; () banked
  3547  0054EC  51B9               	movf	(_arpTimer+1)& (0+255),w,b
  3548  0054EE  0101               	movlb	1	; () banked
  3549  0054F0  597F               	subwfb	(Network_Manage@now+1)& (0+255),w,b
  3550  0054F2  0102               	movlb	2	; () banked
  3551  0054F4  51BA               	movf	(_arpTimer+2)& (0+255),w,b
  3552  0054F6  0101               	movlb	1	; () banked
  3553  0054F8  5980               	subwfb	(Network_Manage@now+2)& (0+255),w,b
  3554  0054FA  5181               	movf	(Network_Manage@now+3)& (0+255),w,b
  3555  0054FC  0A80               	xorlw	128
  3556  0054FE  0100               	movlb	0	; () banked
  3557  005500  6FFE               	movwf	??_Network_Manage& (0+255),b
  3558  005502  0102               	movlb	2	; () banked
  3559  005504  51BB               	movf	(_arpTimer+3)& (0+255),w,b
  3560  005506  0A80               	xorlw	128
  3561  005508  0100               	movlb	0	; () banked
  3562  00550A  59FE               	subwfb	??_Network_Manage& (0+255),w,b
  3563  00550C  E303               	bnc	l10472
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;network.c: 92: {
  3567                           ;network.c: 93: ARPV4_Update();
  3568  00550E  EC2F  F031         	call	_ARPV4_Update	;wreg free
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;network.c: 94: arpTimer += 10;
  3572  005512  D823               	call	PL328	;call to abstracted procedure
  3573  005514                     l10472:
  3574                           
  3575                           ;network.c: 95: }
  3576                           ;network.c: 96: if(now > nowPv)
  3577  005514  0101               	movlb	1	; () banked
  3578  005516  517E               	movf	Network_Manage@now& (0+255),w,b
  3579  005518  0102               	movlb	2	; () banked
  3580  00551A  5D1E               	subwf	Network_Manage@nowPv& (0+255),w,b
  3581  00551C  0101               	movlb	1	; () banked
  3582  00551E  517F               	movf	(Network_Manage@now+1)& (0+255),w,b
  3583  005520  0102               	movlb	2	; () banked
  3584  005522  591F               	subwfb	(Network_Manage@nowPv+1)& (0+255),w,b
  3585  005524  0101               	movlb	1	; () banked
  3586  005526  5180               	movf	(Network_Manage@now+2)& (0+255),w,b
  3587  005528  0102               	movlb	2	; () banked
  3588  00552A  5920               	subwfb	(Network_Manage@nowPv+2)& (0+255),w,b
  3589  00552C  5121               	movf	(Network_Manage@nowPv+3)& (0+255),w,b
  3590  00552E  0A80               	xorlw	128
  3591  005530  0100               	movlb	0	; () banked
  3592  005532  6FFE               	movwf	??_Network_Manage& (0+255),b
  3593  005534  0101               	movlb	1	; () banked
  3594  005536  5181               	movf	(Network_Manage@now+3)& (0+255),w,b
  3595  005538  0A80               	xorlw	128
  3596  00553A  0100               	movlb	0	; () banked
  3597  00553C  59FE               	subwfb	??_Network_Manage& (0+255),w,b
  3598  00553E  E204               	bc	l10476
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;network.c: 97: {
  3602                           ;network.c: 98: DHCP_Manage();
  3603  005540  EC4E  F02B         	call	_DHCP_Manage	;wreg free
  3604                           
  3605                           ;network.c: 100: TCP_Update();
  3606  005544  EC23  F020         	call	_TCP_Update	;wreg free
  3607  005548                     l10476:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;network.c: 101: }
  3611                           ;network.c: 102: nowPv = now;
  3612  005548  C17E  F21E         	movff	Network_Manage@now,Network_Manage@nowPv
  3613  00554C  C17F  F21F         	movff	Network_Manage@now+1,Network_Manage@nowPv+1
  3614  005550  C180  F220         	movff	Network_Manage@now+2,Network_Manage@nowPv+2
  3615  005554  C181  F221         	movff	Network_Manage@now+3,Network_Manage@nowPv+3
  3616                           
  3617                           ; BSR set to: 0
  3618  005558  0012               	return		;funcret
  3619  00555A                     __end_of_Network_Manage:
  3620                           	opt stack 0
  3621  00555A                     PL328:
  3622                           	opt stack 21
  3623  00555A  0E0A               	movlw	10
  3624  00555C  0102               	movlb	2	; () banked
  3625  00555E  27B8               	addwf	_arpTimer& (0+255),f,b
  3626  005560  0E00               	movlw	0
  3627  005562  23B9               	addwfc	(_arpTimer+1)& (0+255),f,b
  3628  005564  23BA               	addwfc	(_arpTimer+2)& (0+255),f,b
  3629  005566  23BB               	addwfc	(_arpTimer+3)& (0+255),f,b
  3630  005568  0C00               	retlw	0
  3631  00556A                     __end_ofPL328:
  3632                           	opt stack 0
  3633                           tosu	equ	0xFFF
  3634                           tosh	equ	0xFFE
  3635                           tosl	equ	0xFFD
  3636                           pclath	equ	0xFFA
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           intcon2	equ	0xFF1
  3645                           indf0	equ	0xFEF
  3646                           postinc0	equ	0xFEE
  3647                           fsr0h	equ	0xFEA
  3648                           fsr0l	equ	0xFE9
  3649                           wreg	equ	0xFE8
  3650                           postinc1	equ	0xFE6
  3651                           plusw1	equ	0xFE3
  3652                           fsr1h	equ	0xFE2
  3653                           fsr1l	equ	0xFE1
  3654                           bsr	equ	0xFE0
  3655                           indf2	equ	0xFDF
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           plusw2	equ	0xFDB
  3659                           fsr2h	equ	0xFDA
  3660                           fsr2l	equ	0xFD9
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function _TCP_Update *****************
  3664 ;; Defined at:
  3665 ;;		line 1417 in file "../../TCPIP Library/source/tcpv4.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  tcbPtr          2  126[BANK0 ] PTR struct .
  3670 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
  3671 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
  3672 ;;  count           2  124[BANK0 ] int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;		None               void
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : E/0
  3679 ;;		On exit  : F/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;Total ram usage:       12 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:   12
  3689 ;; This function calls:
  3690 ;;		_TCP_FiniteStateMachine
  3691 ;; This function is called by:
  3692 ;;		_Network_Manage
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text14
  3697  004046                     __ptext14:
  3698                           	opt stack 0
  3699  004046                     _TCP_Update:
  3700                           	opt stack 17
  3701                           
  3702                           ;tcpv4.c: 1425: nextSequenceNumber++;
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;incstack = 0
  3706  004046  0100               	movlb	0	; () banked
  3707  004048  6BDC               	clrf	TCP_Update@count& (0+255),b
  3708  00404A  6BDD               	clrf	(TCP_Update@count+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;tcpv4.c: 1428: nextAvailablePort = nextAvailablePort + 1;
  3712  00404C  0101               	movlb	1	; () banked
  3713  00404E  4BA4               	infsnz	_nextAvailablePort& (0+255),f,b
  3714  004050  2BA5               	incf	(_nextAvailablePort+1)& (0+255),f,b
  3715                           
  3716                           ; BSR set to: 1
  3717                           ;tcpv4.c: 1429: if (nextAvailablePort < (1024u))
  3718  004052  0E04               	movlw	4
  3719  004054  5DA5               	subwf	(_nextAvailablePort+1)& (0+255),w,b
  3720  004056  E203               	bc	l10370
  3721                           
  3722                           ; BSR set to: 1
  3723                           ;tcpv4.c: 1430: {
  3724                           ;tcpv4.c: 1431: nextAvailablePort = (1024u);
  3725  004058  0E04               	movlw	4
  3726  00405A  6FA5               	movwf	(_nextAvailablePort+1)& (0+255),b
  3727  00405C  6BA4               	clrf	_nextAvailablePort& (0+255),b
  3728  00405E                     l10370:
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;tcpv4.c: 1432: }
  3732                           ;tcpv4.c: 1435: tcbPtr = tcbList;
  3733  00405E  C1AC  F0DE         	movff	_tcbList,TCP_Update@tcbPtr
  3734  004062  C1AD  F0DF         	movff	_tcbList+1,TCP_Update@tcbPtr+1
  3735                           
  3736                           ;tcpv4.c: 1436: while((tcbPtr != (0)) && (count < tcbListSize))
  3737  004066  D0E8               	goto	l10390
  3738  004068                     l10372:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;tcpv4.c: 1437: {
  3742                           ;tcpv4.c: 1438: if (tcbPtr->timeout > 0)
  3743  004068  0E30               	movlw	48
  3744  00406A  D8FB               	call	PL144	;call to abstracted procedure
  3745  00406C  64F7               	cpfsgt	tblptrh,c
  3746  00406E  D002               	bra	u15577
  3747  004070  D905               	call	PL304	;call to abstracted procedure
  3748  004072  D003               	bra	u15570
  3749  004074                     u15577:
  3750  004074  EC3C  F011         	call	PL114	;call to abstracted procedure
  3751  004078  D908               	call	PL394	;call to abstracted procedure
  3752  00407A                     u15570:
  3753  00407A  0100               	movlb	0	; () banked
  3754  00407C  51D6               	movf	(??_TCP_Update+2)& (0+255),w,b
  3755  00407E  11D7               	iorwf	(??_TCP_Update+3)& (0+255),w,b
  3756  004080  E101 D0C5          	bz	l10386
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;tcpv4.c: 1439: {
  3760                           ;tcpv4.c: 1440: ;
  3761                           ;tcpv4.c: 1441: tcbPtr->timeout = tcbPtr->timeout - 1;
  3762  004084  69D4               	setf	??_TCP_Update& (0+255),b
  3763  004086  69D5               	setf	(??_TCP_Update+1)& (0+255),b
  3764  004088  0E30               	movlw	48
  3765  00408A  25DE               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  3766  00408C  6FD6               	movwf	(??_TCP_Update+2)& (0+255),b
  3767  00408E  0E00               	movlw	0
  3768  004090  21DF               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  3769  004092  6FD7               	movwf	(??_TCP_Update+3)& (0+255),b
  3770  004094  C0D6  FFF6         	movff	??_TCP_Update+2,tblptrl
  3771  004098  C0D7  FFF7         	movff	??_TCP_Update+3,tblptrh
  3772  00409C  0E00               	movlw	low (__smallconst shr (0+16))
  3773  00409E  6EF8               	movwf	tblptru,c
  3774  0040A0  0E0F               	movlw	(high __ramtop+-1)
  3775  0040A2  64F7               	cpfsgt	tblptrh,c
  3776  0040A4  D007               	bra	u15597
  3777  0040A6  0009               	tblrd		*+
  3778  0040A8  CFF5 F0D8          	movff	tablat,??_TCP_Update+4
  3779  0040AC  0009               	tblrd		*+
  3780  0040AE  CFF5 F0D9          	movff	tablat,??_TCP_Update+5
  3781  0040B2  D006               	bra	u15590
  3782  0040B4                     u15597:
  3783  0040B4  EC3C  F011         	call	PL114	;call to abstracted procedure
  3784  0040B8  CFEE F0D8          	movff	postinc0,??_TCP_Update+4
  3785  0040BC  CFEE F0D9          	movff	postinc0,??_TCP_Update+5
  3786  0040C0                     u15590:
  3787  0040C0  0100               	movlb	0	; () banked
  3788  0040C2  51D4               	movf	??_TCP_Update& (0+255),w,b
  3789  0040C4  27D8               	addwf	(??_TCP_Update+4)& (0+255),f,b
  3790  0040C6  51D5               	movf	(??_TCP_Update+1)& (0+255),w,b
  3791  0040C8  23D9               	addwfc	(??_TCP_Update+5)& (0+255),f,b
  3792  0040CA  0E30               	movlw	48
  3793  0040CC  25DE               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  3794  0040CE  6FDA               	movwf	(??_TCP_Update+6)& (0+255),b
  3795  0040D0  0E00               	movlw	0
  3796  0040D2  21DF               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  3797  0040D4  6FDB               	movwf	(??_TCP_Update+7)& (0+255),b
  3798  0040D6  C0DA  FFF6         	movff	??_TCP_Update+6,tblptrl
  3799  0040DA  C0DB  FFF7         	movff	??_TCP_Update+7,tblptrh
  3800  0040DE  0E00               	movlw	low (__smallconst shr (0+16))
  3801  0040E0  6EF8               	movwf	tblptru,c
  3802  0040E2  0E0F               	movlw	(high __ramtop+-1)
  3803  0040E4  64F7               	cpfsgt	tblptrh,c
  3804  0040E6  D007               	bra	u15607
  3805  0040E8  C0D8  FFF5         	movff	??_TCP_Update+4,tablat
  3806  0040EC  000D               	tblwt		*+
  3807  0040EE  C0D9  FFF5         	movff	??_TCP_Update+5,tablat
  3808  0040F2  000C               	tblwt		*
  3809  0040F4  D006               	bra	u15600
  3810  0040F6                     u15607:
  3811  0040F6  EC3C  F011         	call	PL114	;call to abstracted procedure
  3812  0040FA  C0D8  FFEE         	movff	??_TCP_Update+4,postinc0
  3813  0040FE  C0D9  FFEF         	movff	??_TCP_Update+5,indf0
  3814  004102                     u15600:
  3815                           
  3816                           ;tcpv4.c: 1443: if (tcbPtr->timeout == 0)
  3817  004102  0E30               	movlw	48
  3818  004104  0100               	movlb	0	; () banked
  3819  004106  D8AD               	call	PL144	;call to abstracted procedure
  3820  004108  64F7               	cpfsgt	tblptrh,c
  3821  00410A  D002               	bra	u15617
  3822  00410C  D8B7               	call	PL304	;call to abstracted procedure
  3823  00410E  D003               	bra	u15610
  3824  004110                     u15617:
  3825  004110  EC3C  F011         	call	PL114	;call to abstracted procedure
  3826  004114  D8BA               	call	PL394	;call to abstracted procedure
  3827  004116                     u15610:
  3828  004116  0100               	movlb	0	; () banked
  3829  004118  51D6               	movf	(??_TCP_Update+2)& (0+255),w,b
  3830  00411A  11D7               	iorwf	(??_TCP_Update+3)& (0+255),w,b
  3831  00411C  E178               	bnz	l10386
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;tcpv4.c: 1444: {
  3835                           ;tcpv4.c: 1445: if (tcbPtr->timeoutsCount > 0)
  3836  00411E  0E34               	movlw	52
  3837  004120  D8A0               	call	PL144	;call to abstracted procedure
  3838  004122  64F7               	cpfsgt	tblptrh,c
  3839  004124  D003               	bra	u15637
  3840  004126  0008               	tblrd		*
  3841  004128  50F5               	movf	tablat,w,c
  3842  00412A  D003               	bra	u15630
  3843  00412C                     u15637:
  3844  00412C  EC3C  F011         	call	PL114	;call to abstracted procedure
  3845  004130  50EF               	movf	indf0,w,c
  3846  004132                     u15630:
  3847  004132  0900               	iorlw	0
  3848  004134  E06C               	bz	l10386
  3849                           
  3850                           ;tcpv4.c: 1446: {
  3851                           ;tcpv4.c: 1448: if (tcbPtr->connectionEvent == NOP)
  3852  004136  0E2B               	movlw	43
  3853  004138  0100               	movlb	0	; () banked
  3854  00413A  D893               	call	PL144	;call to abstracted procedure
  3855  00413C  64F7               	cpfsgt	tblptrh,c
  3856  00413E  D003               	bra	u15657
  3857  004140  0008               	tblrd		*
  3858  004142  50F5               	movf	tablat,w,c
  3859  004144  D003               	bra	u15650
  3860  004146                     u15657:
  3861  004146  EC3C  F011         	call	PL114	;call to abstracted procedure
  3862  00414A  50EF               	movf	indf0,w,c
  3863  00414C                     u15650:
  3864  00414C  0A0D               	xorlw	13
  3865  00414E  E15F               	bnz	l10386
  3866                           
  3867                           ;tcpv4.c: 1449: {
  3868                           ;tcpv4.c: 1450: tcbPtr->timeout = tcbPtr->timeoutReloadValue;
  3869  004150  0E32               	movlw	50
  3870  004152  0100               	movlb	0	; () banked
  3871  004154  D886               	call	PL144	;call to abstracted procedure
  3872  004156  64F7               	cpfsgt	tblptrh,c
  3873  004158  D002               	bra	u15677
  3874  00415A  D890               	call	PL304	;call to abstracted procedure
  3875  00415C  D003               	bra	u15670
  3876  00415E                     u15677:
  3877  00415E  EC3C  F011         	call	PL114	;call to abstracted procedure
  3878  004162  D893               	call	PL394	;call to abstracted procedure
  3879  004164                     u15670:
  3880  004164  0E30               	movlw	48
  3881  004166  0100               	movlb	0	; () banked
  3882  004168  25DE               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  3883  00416A  6FD8               	movwf	(??_TCP_Update+4)& (0+255),b
  3884  00416C  0E00               	movlw	0
  3885  00416E  21DF               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  3886  004170  6FD9               	movwf	(??_TCP_Update+5)& (0+255),b
  3887  004172  C0D8  FFF6         	movff	??_TCP_Update+4,tblptrl
  3888  004176  C0D9  FFF7         	movff	??_TCP_Update+5,tblptrh
  3889  00417A  0E00               	movlw	low (__smallconst shr (0+16))
  3890  00417C  6EF8               	movwf	tblptru,c
  3891  00417E  0E0F               	movlw	(high __ramtop+-1)
  3892  004180  64F7               	cpfsgt	tblptrh,c
  3893  004182  D007               	bra	u15687
  3894  004184  C0D6  FFF5         	movff	??_TCP_Update+2,tablat
  3895  004188  000D               	tblwt		*+
  3896  00418A  C0D7  FFF5         	movff	??_TCP_Update+3,tablat
  3897  00418E  000C               	tblwt		*
  3898  004190  D006               	bra	u15680
  3899  004192                     u15687:
  3900  004192  EC3C  F011         	call	PL114	;call to abstracted procedure
  3901  004196  C0D6  FFEE         	movff	??_TCP_Update+2,postinc0
  3902  00419A  C0D7  FFEF         	movff	??_TCP_Update+3,indf0
  3903  00419E                     u15680:
  3904                           
  3905                           ;tcpv4.c: 1451: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount - 1;
  3906  00419E  0E34               	movlw	52
  3907  0041A0  0100               	movlb	0	; () banked
  3908  0041A2  D85F               	call	PL144	;call to abstracted procedure
  3909  0041A4  64F7               	cpfsgt	tblptrh,c
  3910  0041A6  D003               	bra	u15697
  3911  0041A8  0008               	tblrd		*
  3912  0041AA  50F5               	movf	tablat,w,c
  3913  0041AC  D003               	bra	u15690
  3914  0041AE                     u15697:
  3915  0041AE  EC3C  F011         	call	PL114	;call to abstracted procedure
  3916  0041B2  50EF               	movf	indf0,w,c
  3917  0041B4                     u15690:
  3918  0041B4  0100               	movlb	0	; () banked
  3919  0041B6  6FD6               	movwf	(??_TCP_Update+2)& (0+255),b
  3920  0041B8  07D6               	decf	(??_TCP_Update+2)& (0+255),f,b
  3921  0041BA  0E34               	movlw	52
  3922  0041BC  25DE               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  3923  0041BE  6FD7               	movwf	(??_TCP_Update+3)& (0+255),b
  3924  0041C0  0E00               	movlw	0
  3925  0041C2  21DF               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  3926  0041C4  6FD8               	movwf	(??_TCP_Update+4)& (0+255),b
  3927  0041C6  C0D7  FFF6         	movff	??_TCP_Update+3,tblptrl
  3928  0041CA  C0D8  FFF7         	movff	??_TCP_Update+4,tblptrh
  3929  0041CE  0E00               	movlw	low (__smallconst shr (0+16))
  3930  0041D0  6EF8               	movwf	tblptru,c
  3931  0041D2  0E0F               	movlw	(high __ramtop+-1)
  3932  0041D4  64F7               	cpfsgt	tblptrh,c
  3933  0041D6  D004               	bra	u15707
  3934  0041D8  C0D6  FFF5         	movff	??_TCP_Update+2,tablat
  3935  0041DC  000C               	tblwt		*
  3936  0041DE  D004               	bra	u15700
  3937  0041E0                     u15707:
  3938  0041E0  EC3C  F011         	call	PL114	;call to abstracted procedure
  3939  0041E4  C0D6  FFEF         	movff	??_TCP_Update+2,indf0
  3940  0041E8                     u15700:
  3941                           
  3942                           ;tcpv4.c: 1452: tcbPtr->connectionEvent = TIMEOUT;
  3943  0041E8  0E2B               	movlw	43
  3944  0041EA  0100               	movlb	0	; () banked
  3945  0041EC  D83A               	call	PL144	;call to abstracted procedure
  3946  0041EE  64F7               	cpfsgt	tblptrh,c
  3947  0041F0  D004               	bra	u15717
  3948  0041F2  0E0C               	movlw	12
  3949  0041F4  6EF5               	movwf	tablat,c
  3950  0041F6  000C               	tblwt		*
  3951  0041F8  D004               	bra	u15710
  3952  0041FA                     u15717:
  3953  0041FA  EC3C  F011         	call	PL114	;call to abstracted procedure
  3954  0041FE  0E0C               	movlw	12
  3955  004200  6EEF               	movwf	indf0,c
  3956  004202                     u15710:
  3957                           
  3958                           ;tcpv4.c: 1453: currentTCB = tcbPtr;
  3959  004202  C0DE  F1A0         	movff	TCP_Update@tcbPtr,_currentTCB
  3960  004206  C0DF  F1A1         	movff	TCP_Update@tcbPtr+1,_currentTCB+1
  3961                           
  3962                           ;tcpv4.c: 1454: TCP_FiniteStateMachine();
  3963  00420A  EC5A  F008         	call	_TCP_FiniteStateMachine	;wreg free
  3964  00420E                     l10386:
  3965                           
  3966                           ;tcpv4.c: 1455: }
  3967                           ;tcpv4.c: 1456: }
  3968                           ;tcpv4.c: 1457: }
  3969                           ;tcpv4.c: 1458: }
  3970                           ;tcpv4.c: 1459: tcbPtr = tcbPtr->nextTCB;
  3971  00420E  0E2C               	movlw	44
  3972  004210  0100               	movlb	0	; () banked
  3973  004212  D827               	call	PL144	;call to abstracted procedure
  3974  004214  64F7               	cpfsgt	tblptrh,c
  3975  004216  D007               	bra	u15727
  3976  004218  0009               	tblrd		*+
  3977  00421A  CFF5 F0DE          	movff	tablat,TCP_Update@tcbPtr
  3978  00421E  0009               	tblrd		*+
  3979  004220  CFF5 F0DF          	movff	tablat,TCP_Update@tcbPtr+1
  3980  004224  D006               	bra	u15720
  3981  004226                     u15727:
  3982  004226  EC3C  F011         	call	PL114	;call to abstracted procedure
  3983  00422A  CFEE F0DE          	movff	postinc0,TCP_Update@tcbPtr
  3984  00422E  CFEE F0DF          	movff	postinc0,TCP_Update@tcbPtr+1
  3985  004232                     u15720:
  3986                           
  3987                           ;tcpv4.c: 1460: count ++;
  3988  004232  0100               	movlb	0	; () banked
  3989  004234  4BDC               	infsnz	TCP_Update@count& (0+255),f,b
  3990  004236  2BDD               	incf	(TCP_Update@count+1)& (0+255),f,b
  3991  004238                     l10390:
  3992  004238  0100               	movlb	0	; () banked
  3993  00423A  51DE               	movf	TCP_Update@tcbPtr& (0+255),w,b
  3994  00423C  11DF               	iorwf	(TCP_Update@tcbPtr+1)& (0+255),w,b
  3995  00423E  B4D8               	btfsc	status,2,c
  3996  004240  0012               	return	
  3997                           
  3998                           ; BSR set to: 0
  3999  004242  C05D  F0D4         	movff	_tcbListSize,??_TCP_Update
  4000  004246  6BD5               	clrf	(??_TCP_Update+1)& (0+255),b
  4001  004248  BFD4               	btfsc	??_TCP_Update& (0+255),7,b
  4002  00424A  07D5               	decf	(??_TCP_Update+1)& (0+255),f,b
  4003  00424C  51D4               	movf	??_TCP_Update& (0+255),w,b
  4004  00424E  5DDC               	subwf	TCP_Update@count& (0+255),w,b
  4005  004250  51DD               	movf	(TCP_Update@count+1)& (0+255),w,b
  4006  004252  0A80               	xorlw	128
  4007  004254  6FD6               	movwf	(??_TCP_Update+2)& (0+255),b
  4008  004256  51D5               	movf	(??_TCP_Update+1)& (0+255),w,b
  4009  004258  0A80               	xorlw	128
  4010  00425A  59D6               	subwfb	(??_TCP_Update+2)& (0+255),w,b
  4011  00425C  E201 D704          	bnc	l10372
  4012                           
  4013                           ; BSR set to: 0
  4014  004260  0012               	return		;funcret
  4015  004262                     __end_of_TCP_Update:
  4016                           	opt stack 0
  4017  004262                     PL144:
  4018                           	opt stack 17
  4019  004262  25DE               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4020  004264  6FD4               	movwf	??_TCP_Update& (0+255),b
  4021  004266  0E00               	movlw	0
  4022  004268  21DF               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4023  00426A  6FD5               	movwf	(??_TCP_Update+1)& (0+255),b
  4024  00426C  C0D4  FFF6         	movff	??_TCP_Update,tblptrl
  4025  004270  C0D5  FFF7         	movff	??_TCP_Update+1,tblptrh
  4026  004274  0E00               	movlw	low (__smallconst shr (0+16))
  4027  004276  6EF8               	movwf	tblptru,c
  4028  004278  0E0F               	movlw	(high __ramtop+-1)
  4029  00427A  0012               	return	
  4030  00427C                     __end_ofPL144:
  4031                           	opt stack 0
  4032  00427C                     PL304:
  4033                           	opt stack 17
  4034  00427C  0009               	tblrd		*+
  4035  00427E  CFF5 F0D6          	movff	tablat,??_TCP_Update+2
  4036  004282  0009               	tblrd		*+
  4037  004284  CFF5 F0D7          	movff	tablat,??_TCP_Update+3
  4038  004288  0012               	return	
  4039  00428A                     __end_ofPL304:
  4040                           	opt stack 0
  4041  00428A                     PL394:
  4042                           	opt stack 17
  4043  00428A  CFEE F0D6          	movff	postinc0,??_TCP_Update+2
  4044  00428E  CFEE F0D7          	movff	postinc0,??_TCP_Update+3
  4045  004292  0012               	return	
  4046  004294                     __end_ofPL394:
  4047                           	opt stack 0
  4048                           tosu	equ	0xFFF
  4049                           tosh	equ	0xFFE
  4050                           tosl	equ	0xFFD
  4051                           pclath	equ	0xFFA
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon2	equ	0xFF1
  4060                           indf0	equ	0xFEF
  4061                           postinc0	equ	0xFEE
  4062                           fsr0h	equ	0xFEA
  4063                           fsr0l	equ	0xFE9
  4064                           wreg	equ	0xFE8
  4065                           postinc1	equ	0xFE6
  4066                           plusw1	equ	0xFE3
  4067                           fsr1h	equ	0xFE2
  4068                           fsr1l	equ	0xFE1
  4069                           bsr	equ	0xFE0
  4070                           indf2	equ	0xFDF
  4071                           postinc2	equ	0xFDE
  4072                           postdec2	equ	0xFDD
  4073                           plusw2	equ	0xFDB
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function _Network_Read *****************
  4079 ;; Defined at:
  4080 ;;		line 105 in file "../../TCPIP Library/source/network.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  debug_str      80   32[BANK1 ] unsigned char [80]
  4085 ;;  header         14  112[BANK1 ] struct .
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/2
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Locals:         0       0      94       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Totals:         0       0      98       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;Total ram usage:       98 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:   14
  4102 ;; This function calls:
  4103 ;;		_ARPV4_Packet
  4104 ;;		_ETH_Flush
  4105 ;;		_ETH_NextPacketUpdate
  4106 ;;		_ETH_ReadBlock
  4107 ;;		_IPV4_Packet
  4108 ;;		_sprintf
  4109 ;; This function is called by:
  4110 ;;		_Network_Manage
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text15
  4115  005236                     __ptext15:
  4116                           	opt stack 0
  4117  005236                     _Network_Read:
  4118                           	opt stack 15
  4119                           
  4120                           ;network.c: 107: ethernetFrame_t header;
  4121                           ;network.c: 108: char debug_str[80];
  4122                           ;network.c: 110: if(ethData.pktReady)
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;incstack = 0
  4126  005236  0101               	movlb	1	; () banked
  4127  005238  A383               	btfss	_ethData& (0+255),1,b	;volatile
  4128  00523A  0012               	return	
  4129                           
  4130                           ; BSR set to: 1
  4131                           ;network.c: 111: {
  4132                           ;network.c: 112: ETH_NextPacketUpdate();
  4133  00523C  EC28  F02C         	call	_ETH_NextPacketUpdate	;wreg free
  4134                           
  4135                           ; BSR set to: 2
  4136                           ;network.c: 113: ETH_ReadBlock((char *)&header, sizeof(header));
  4137  005240  0E70               	movlw	low Network_Read@header
  4138  005242  6E03               	movwf	ETH_ReadBlock@data,c
  4139  005244  0E01               	movlw	high Network_Read@header
  4140  005246  6E04               	movwf	ETH_ReadBlock@data+1,c
  4141  005248  6A06               	clrf	ETH_ReadBlock@length+1,c
  4142  00524A  0E0E               	movlw	14
  4143  00524C  6E05               	movwf	ETH_ReadBlock@length,c
  4144  00524E  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
  4145                           
  4146                           ; BSR set to: 1
  4147                           ;network.c: 114: header.id.type = ((((uint16_t)header.id.type & (uint16_t)0xFF00) >> 8) 
      +                          | (((uint16_t)header.id.type & (uint16_t)0x00FF) << 8));
  4148  005252  517C               	movf	(Network_Read@header+12)& (0+255),w,b
  4149  005254  6F1D               	movwf	(??_Network_Read+1)& (0+255),b
  4150  005256  6B1C               	clrf	??_Network_Read& (0+255),b
  4151  005258  EE21  F07C         	lfsr	2,Network_Read@header+12
  4152  00525C  CFDE F11E          	movff	postinc2,??_Network_Read+2
  4153  005260  CFDD F11F          	movff	postdec2,??_Network_Read+3
  4154  005264  C11F  F11E         	movff	??_Network_Read+3,??_Network_Read+2
  4155  005268  6B1F               	clrf	(??_Network_Read+3)& (0+255),b
  4156  00526A  6B1F               	clrf	(??_Network_Read+3)& (0+255),b
  4157  00526C  511C               	movf	??_Network_Read& (0+255),w,b
  4158  00526E  111E               	iorwf	(??_Network_Read+2)& (0+255),w,b
  4159  005270  6F7C               	movwf	(Network_Read@header+12)& (0+255),b
  4160  005272  511D               	movf	(??_Network_Read+1)& (0+255),w,b
  4161  005274  111F               	iorwf	(??_Network_Read+3)& (0+255),w,b
  4162  005276  6F7D               	movwf	(Network_Read@header+13)& (0+255),b
  4163                           
  4164                           ;network.c: 115: switch (header.id.type)
  4165  005278  D01A               	goto	l10346
  4166  00527A                     l10338:
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;network.c: 121: ;
  4170                           ;network.c: 122: ARPV4_Packet();
  4171  00527A  EC54  F01A         	call	_ARPV4_Packet	;wreg free
  4172                           
  4173                           ;network.c: 123: break;
  4174  00527E  EF5D  F030         	goto	_ETH_Flush
  4175  005282                     l10340:
  4176                           
  4177                           ; BSR set to: 1
  4178                           ;network.c: 125: ;
  4179                           ;network.c: 126: IPV4_Packet();
  4180  005282  ECF4  F01B         	call	_IPV4_Packet	;wreg free
  4181                           
  4182                           ;network.c: 127: break;
  4183  005286  EF5D  F030         	goto	_ETH_Flush
  4184  00528A                     l10342:
  4185                           
  4186                           ; BSR set to: 1
  4187                           ;network.c: 132: sprintf(debug_str,"%x : %d",header.id.type,header.id.length);
  4188  00528A  0E20               	movlw	low Network_Read@debug_str
  4189  00528C  6E1C               	movwf	sprintf@wh,c
  4190  00528E  0E01               	movlw	high Network_Read@debug_str
  4191  005290  6E1D               	movwf	sprintf@wh+1,c
  4192  005292  0EA4               	movlw	low STR_1
  4193  005294  6E1E               	movwf	sprintf@f,c
  4194  005296  C17C  F01F         	movff	Network_Read@header+12,?_sprintf+3
  4195  00529A  C17D  F020         	movff	Network_Read@header+13,?_sprintf+4
  4196  00529E  C17C  F021         	movff	Network_Read@header+12,?_sprintf+5
  4197  0052A2  C17D  F022         	movff	Network_Read@header+13,?_sprintf+6
  4198  0052A6  ECEE  F030         	call	_sprintf	;wreg free
  4199                           
  4200                           ;network.c: 133: ;
  4201                           ;network.c: 134: break;
  4202  0052AA  EF5D  F030         	goto	_ETH_Flush
  4203  0052AE                     l10346:
  4204                           
  4205                           ; BSR set to: 1
  4206  0052AE  EE21  F07C         	lfsr	2,Network_Read@header+12
  4207  0052B2  CFDE F11C          	movff	postinc2,??_Network_Read
  4208  0052B6  CFDD F11D          	movff	postdec2,??_Network_Read+1
  4209                           
  4210                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4211                           ; Switch size 1, requested type "space"
  4212                           ; Number of cases is 3, Range of values is 8 to 134
  4213                           ; switch strategies available:
  4214                           ; Name         Instructions Cycles
  4215                           ; simple_byte           10     6 (average)
  4216                           ;	Chosen strategy is simple_byte
  4217  0052BA  511D               	movf	(??_Network_Read+1)& (0+255),w,b
  4218  0052BC  0A08               	xorlw	8	; case 8
  4219  0052BE  E005               	bz	l10686
  4220  0052C0  0A89               	xorlw	137	; case 129
  4221  0052C2  E008               	bz	l10688
  4222  0052C4  0A07               	xorlw	7	; case 134
  4223  0052C6  E008               	bz	l10690
  4224  0052C8  D7E0               	goto	l10342
  4225  0052CA                     l10686:
  4226                           
  4227                           ; BSR set to: 1
  4228                           ; Switch size 1, requested type "space"
  4229                           ; Number of cases is 2, Range of values is 0 to 6
  4230                           ; switch strategies available:
  4231                           ; Name         Instructions Cycles
  4232                           ; simple_byte            7     4 (average)
  4233                           ;	Chosen strategy is simple_byte
  4234  0052CA  511C               	movf	??_Network_Read& (0+255),w,b
  4235  0052CC  E0DA               	bz	l10340
  4236  0052CE  0A06               	xorlw	6	; case 6
  4237  0052D0  E0D4               	bz	l10338
  4238  0052D2  D7DB               	goto	l10342
  4239  0052D4                     l10688:
  4240                           
  4241                           ; BSR set to: 1
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 1, Range of values is 0 to 0
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte            4     3 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  0052D4  511C               	movf	??_Network_Read& (0+255),w,b
  4249  0052D6  D002               	goto	L1
  4250  0052D8                     l10690:
  4251                           
  4252                           ; BSR set to: 1
  4253                           ; Switch size 1, requested type "space"
  4254                           ; Number of cases is 1, Range of values is 221 to 221
  4255                           ; switch strategies available:
  4256                           ; Name         Instructions Cycles
  4257                           ; simple_byte            4     3 (average)
  4258                           ;	Chosen strategy is simple_byte
  4259  0052D8  511C               	movf	??_Network_Read& (0+255),w,b
  4260  0052DA  0ADD               	xorlw	221	; case 221
  4261  0052DC                     L1:
  4262  0052DC  E1D6               	bnz	l10342
  4263                           
  4264                           ;network.c: 136: ETH_Flush();
  4265  0052DE  EF5D  F030         	goto	_ETH_Flush	;wreg free
  4266  0052E2                     __end_of_Network_Read:
  4267                           	opt stack 0
  4268                           tosu	equ	0xFFF
  4269                           tosh	equ	0xFFE
  4270                           tosl	equ	0xFFD
  4271                           pclath	equ	0xFFA
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           intcon	equ	0xFF2
  4279                           intcon2	equ	0xFF1
  4280                           indf0	equ	0xFEF
  4281                           postinc0	equ	0xFEE
  4282                           fsr0h	equ	0xFEA
  4283                           fsr0l	equ	0xFE9
  4284                           wreg	equ	0xFE8
  4285                           postinc1	equ	0xFE6
  4286                           plusw1	equ	0xFE3
  4287                           fsr1h	equ	0xFE2
  4288                           fsr1l	equ	0xFE1
  4289                           bsr	equ	0xFE0
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           plusw2	equ	0xFDB
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _sprintf *****************
  4299 ;; Defined at:
  4300 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\sprintf.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  wh              2   27[COMRAM] PTR unsigned char 
  4303 ;;		 -> main@str(32), Network_Read@debug_str(80), 
  4304 ;;  f               1   29[COMRAM] PTR const unsigned char 
  4305 ;;		 -> STR_6(12), STR_1(8), 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  pb              5   39[COMRAM] struct __prbuf
  4308 ;;  ap              1   38[COMRAM] PTR void [1]
  4309 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  2   27[COMRAM] int 
  4312 ;; Registers used:
  4313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/2
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4319 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;Total ram usage:       17 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    5
  4326 ;; This function calls:
  4327 ;;		__doprnt
  4328 ;; This function is called by:
  4329 ;;		_Network_Read
  4330 ;;		_main
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text16
  4335  0061DC                     __ptext16:
  4336                           	opt stack 0
  4337  0061DC                     _sprintf:
  4338                           	opt stack 25
  4339                           
  4340                           ;incstack = 0
  4341  0061DC  C01C  F028         	movff	sprintf@wh,sprintf@pb
  4342  0061E0  C01D  F029         	movff	sprintf@wh+1,sprintf@pb+1
  4343  0061E4  6A2A               	clrf	sprintf@pb+2,c
  4344  0061E6  6A2B               	clrf	sprintf@pb+3,c
  4345  0061E8  6A2C               	clrf	sprintf@pb+4,c
  4346  0061EA  0E1F               	movlw	low (?_sprintf+3)
  4347  0061EC  6E27               	movwf	sprintf@ap,c
  4348  0061EE  C01E  F00E         	movff	sprintf@f,__doprnt@f
  4349  0061F2  0E27               	movlw	low sprintf@ap
  4350  0061F4  6E0F               	movwf	__doprnt@ap,c
  4351  0061F6  0E28               	movlw	sprintf@pb& (0+255)
  4352  0061F8  EC79  F01D         	call	__doprnt
  4353  0061FC  C028  FFD9         	movff	sprintf@pb,fsr2l
  4354  006200  C029  FFDA         	movff	sprintf@pb+1,fsr2h
  4355  006204  6ADF               	clrf	indf2,c
  4356  006206  0C00               	retlw	0	;funcret
  4357  006208                     __end_of_sprintf:
  4358                           	opt stack 0
  4359                           tosu	equ	0xFFF
  4360                           tosh	equ	0xFFE
  4361                           tosl	equ	0xFFD
  4362                           pclath	equ	0xFFA
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           intcon	equ	0xFF2
  4370                           intcon2	equ	0xFF1
  4371                           indf0	equ	0xFEF
  4372                           postinc0	equ	0xFEE
  4373                           fsr0h	equ	0xFEA
  4374                           fsr0l	equ	0xFE9
  4375                           wreg	equ	0xFE8
  4376                           postinc1	equ	0xFE6
  4377                           plusw1	equ	0xFE3
  4378                           fsr1h	equ	0xFE2
  4379                           fsr1l	equ	0xFE1
  4380                           bsr	equ	0xFE0
  4381                           indf2	equ	0xFDF
  4382                           postinc2	equ	0xFDE
  4383                           postdec2	equ	0xFDD
  4384                           plusw2	equ	0xFDB
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function __doprnt *****************
  4390 ;; Defined at:
  4391 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  pb              1    wreg     PTR struct __prbuf
  4394 ;;		 -> sprintf@pb(5), printf@pb(5), 
  4395 ;;  f               1   13[COMRAM] PTR const unsigned char 
  4396 ;;		 -> STR_6(12), STR_3(10), STR_2(28), STR_1(8), 
  4397 ;;  ap              1   14[COMRAM] PTR PTR void 
  4398 ;;		 -> sprintf@ap(1), printf@ap(1), 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  pb              1   26[COMRAM] PTR struct __prbuf
  4401 ;;		 -> sprintf@pb(5), printf@pb(5), 
  4402 ;;  idx             1   18[COMRAM] unsigned char 
  4403 ;;  tmpval          4    0        struct .
  4404 ;;  val             2   23[COMRAM] unsigned int 
  4405 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4406 ;;		 -> ?_sprintf(2), ?_printf(2), STR_7(7), main@str(32), 
  4407 ;;		 -> STR_5(13), STR_4(17), Network_Read@debug_str(80), NULL(0), 
  4408 ;;  len             2    0        unsigned int 
  4409 ;;  c               1   25[COMRAM] char 
  4410 ;;  flag            1   22[COMRAM] unsigned char 
  4411 ;;  prec            1   19[COMRAM] char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  2   13[COMRAM] int 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/2
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:       14 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    4
  4428 ;; This function calls:
  4429 ;;		Absolute function
  4430 ;;		___lwdiv
  4431 ;;		___lwmod
  4432 ;;		_putch
  4433 ;; This function is called by:
  4434 ;;		_printf
  4435 ;;		_sprintf
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text17
  4440  003AF2                     __ptext17:
  4441                           	opt stack 0
  4442  003AF2                     __doprnt:
  4443                           	opt stack 25
  4444                           
  4445                           ;incstack = 0
  4446                           ;__doprnt@pb stored from wreg
  4447  003AF2  6E1B               	movwf	__doprnt@pb,c
  4448                           
  4449                           ;doprnt.c: 499: signed char c;
  4450                           ;doprnt.c: 506: signed char prec;
  4451                           ;doprnt.c: 508: unsigned char flag;
  4452                           ;doprnt.c: 523: union {
  4453                           ;doprnt.c: 524: unsigned long vd;
  4454                           ;doprnt.c: 525: double integ;
  4455                           ;doprnt.c: 526: } tmpval;
  4456                           ;doprnt.c: 528: unsigned int val;
  4457                           ;doprnt.c: 529: unsigned len;
  4458                           ;doprnt.c: 530: const char * cp;
  4459                           ;doprnt.c: 536: while(c = *f++) {
  4460  003AF4  D11E               	goto	l9850
  4461  003AF6                     l9736:
  4462                           
  4463                           ;doprnt.c: 538: if(c != '%')
  4464  003AF6  0E25               	movlw	37
  4465  003AF8  181A               	xorwf	__doprnt@c,w,c
  4466  003AFA  E018               	bz	l1826
  4467                           
  4468                           ;doprnt.c: 540: {
  4469                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4470  003AFC  D937               	call	PL192	;call to abstracted procedure
  4471  003AFE  50DE               	movf	postinc2,w,c
  4472  003B00  10DE               	iorwf	postinc2,w,c
  4473  003B02  10DE               	iorwf	postinc2,w,c
  4474  003B04  E00E               	bz	l9742
  4475  003B06  D932               	call	PL192	;call to abstracted procedure
  4476  003B08  D801               	call	u14748
  4477  003B0A  D113               	goto	l9850
  4478  003B0C                     u14748:
  4479  003B0C  0005               	push	
  4480  003B0E  6EFA               	movwf	pclath,c
  4481  003B10  50DE               	movf	postinc2,w,c
  4482  003B12  6EFD               	movwf	tosl,c
  4483  003B14  50DE               	movf	postinc2,w,c
  4484  003B16  6EFE               	movwf	tosh,c
  4485  003B18  50DE               	movf	postinc2,w,c
  4486  003B1A  6EFF               	movwf	tosu,c
  4487  003B1C  50FA               	movf	pclath,w,c
  4488  003B1E  501A               	movf	__doprnt@c,w,c
  4489  003B20  0012               	return		;indir
  4490  003B22                     l9742:
  4491  003B22  D918               	call	PL176	;call to abstracted procedure
  4492  003B24  C01A  FFDF         	movff	__doprnt@c,indf2
  4493  003B28  D930               	call	PL246	;call to abstracted procedure
  4494  003B2A  D103               	goto	l9850
  4495  003B2C                     l1826:
  4496                           
  4497                           ;doprnt.c: 543: }
  4498                           ;doprnt.c: 548: flag = 0;
  4499  003B2C  6A17               	clrf	__doprnt@flag,c
  4500                           
  4501                           ;doprnt.c: 635: switch(c = *f++) {
  4502  003B2E  D050               	goto	l9772
  4503  003B30                     l9746:
  4504                           
  4505                           ;doprnt.c: 721: flag |= 0x80;
  4506  003B30  8E17               	bsf	__doprnt@flag,7,c
  4507                           
  4508                           ;doprnt.c: 723: break;
  4509  003B32  D05F               	goto	l9774
  4510  003B34                     l9748:
  4511                           
  4512                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4513  003B34  D921               	call	PL234	;call to abstracted procedure
  4514  003B36  CFDE F015          	movff	postinc2,__doprnt@cp
  4515  003B3A  CFDE F016          	movff	postinc2,__doprnt@cp+1
  4516                           
  4517                           ;doprnt.c: 740: if(!cp)
  4518  003B3E  5015               	movf	__doprnt@cp,w,c
  4519  003B40  1016               	iorwf	__doprnt@cp+1,w,c
  4520  003B42  E135               	bnz	l9766
  4521                           
  4522                           ;doprnt.c: 741: cp = "(null)";
  4523  003B44  0EAC               	movlw	low STR_7
  4524  003B46  6E15               	movwf	__doprnt@cp,c
  4525  003B48  5015               	movf	__doprnt@cp,w,c
  4526  003B4A  A4D8               	btfss	status,2,c
  4527  003B4C  0E10               	movlw	high __smallconst
  4528  003B4E  6E16               	movwf	__doprnt@cp+1,c
  4529  003B50  D02E               	goto	l9766
  4530  003B52                     l9754:
  4531                           
  4532                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4533  003B52  D90C               	call	PL192	;call to abstracted procedure
  4534  003B54  50DE               	movf	postinc2,w,c
  4535  003B56  10DE               	iorwf	postinc2,w,c
  4536  003B58  10DE               	iorwf	postinc2,w,c
  4537  003B5A  E01A               	bz	l9760
  4538  003B5C  D907               	call	PL192	;call to abstracted procedure
  4539  003B5E  D801               	call	u14778
  4540  003B60  D014               	goto	l9758
  4541  003B62                     u14778:
  4542  003B62  0005               	push	
  4543  003B64  6EFA               	movwf	pclath,c
  4544  003B66  50DE               	movf	postinc2,w,c
  4545  003B68  6EFD               	movwf	tosl,c
  4546  003B6A  50DE               	movf	postinc2,w,c
  4547  003B6C  6EFE               	movwf	tosh,c
  4548  003B6E  50DE               	movf	postinc2,w,c
  4549  003B70  6EFF               	movwf	tosu,c
  4550  003B72  50FA               	movf	pclath,w,c
  4551  003B74  D919               	call	PL302	;call to abstracted procedure
  4552  003B76  0E0F               	movlw	(high __ramtop+-1)
  4553  003B78  64F7               	cpfsgt	tblptrh,c
  4554  003B7A  D003               	bra	u14787
  4555  003B7C  0008               	tblrd		*
  4556  003B7E  50F5               	movf	tablat,w,c
  4557  003B80  D003               	bra	u14780
  4558  003B82                     u14787:
  4559  003B82  EC3C  F011         	call	PL114	;call to abstracted procedure
  4560  003B86  50EF               	movf	indf0,w,c
  4561  003B88                     u14780:
  4562  003B88  0012               	return		;indir
  4563  003B8A                     l9758:
  4564  003B8A  4A15               	infsnz	__doprnt@cp,f,c
  4565  003B8C  2A16               	incf	__doprnt@cp+1,f,c
  4566  003B8E  D00F               	goto	l9766
  4567  003B90                     l9760:
  4568  003B90  D90B               	call	PL302	;call to abstracted procedure
  4569  003B92  D8E0               	call	PL176	;call to abstracted procedure
  4570  003B94  0E0F               	movlw	(high __ramtop+-1)
  4571  003B96  64F7               	cpfsgt	tblptrh,c
  4572  003B98  D003               	bra	u14797
  4573  003B9A  0008               	tblrd		*
  4574  003B9C  50F5               	movf	tablat,w,c
  4575  003B9E  D003               	bra	u14790
  4576  003BA0                     u14797:
  4577  003BA0  EC3C  F011         	call	PL114	;call to abstracted procedure
  4578  003BA4  50EF               	movf	indf0,w,c
  4579  003BA6                     u14790:
  4580  003BA6  6EDF               	movwf	indf2,c
  4581  003BA8  4A15               	infsnz	__doprnt@cp,f,c
  4582  003BAA  2A16               	incf	__doprnt@cp+1,f,c
  4583  003BAC  D8EE               	call	PL246	;call to abstracted procedure
  4584  003BAE                     l9766:
  4585  003BAE  D8FC               	call	PL302	;call to abstracted procedure
  4586  003BB0  0E0F               	movlw	(high __ramtop+-1)
  4587  003BB2  64F7               	cpfsgt	tblptrh,c
  4588  003BB4  D003               	bra	u14807
  4589  003BB6  0008               	tblrd		*
  4590  003BB8  50F5               	movf	tablat,w,c
  4591  003BBA  D003               	bra	u14800
  4592  003BBC                     u14807:
  4593  003BBC  EC3C  F011         	call	PL114	;call to abstracted procedure
  4594  003BC0  50EF               	movf	indf0,w,c
  4595  003BC2                     u14800:
  4596  003BC2  0900               	iorlw	0
  4597  003BC4  E101 D0B5          	bz	l9850
  4598  003BC8  D7C4               	goto	l9754
  4599  003BCA                     l9768:
  4600                           
  4601                           ;doprnt.c: 818: flag |= 0xC0;
  4602  003BCA  0EC0               	movlw	192
  4603  003BCC  1217               	iorwf	__doprnt@flag,f,c
  4604                           
  4605                           ;doprnt.c: 819: break;
  4606  003BCE  D011               	goto	l9774
  4607  003BD0                     l9772:
  4608  003BD0  2A0E               	incf	__doprnt@f,f,c
  4609  003BD2  040E               	decf	__doprnt@f,w,c
  4610  003BD4  D8B7               	call	PL174	;call to abstracted procedure
  4611  003BD6  D8F6               	call	PL436	;call to abstracted procedure
  4612                           
  4613                           ; Switch size 1, requested type "space"
  4614                           ; Number of cases is 6, Range of values is 0 to 120
  4615                           ; switch strategies available:
  4616                           ; Name         Instructions Cycles
  4617                           ; simple_byte           19    10 (average)
  4618                           ;	Chosen strategy is simple_byte
  4619  003BD8  E101 D0B1          	bz	l1831
  4620  003BDC  0A64               	xorlw	100	; case 100
  4621  003BDE  E009               	bz	l9774
  4622  003BE0  0A0D               	xorlw	13	; case 105
  4623  003BE2  E007               	bz	l9774
  4624  003BE4  0A1A               	xorlw	26	; case 115
  4625  003BE6  E0A6               	bz	l9748
  4626  003BE8  0A06               	xorlw	6	; case 117
  4627  003BEA  E0EF               	bz	l9768
  4628  003BEC  0A0D               	xorlw	13	; case 120
  4629  003BEE  E0A0               	bz	l9746
  4630  003BF0  D0A0               	goto	l9850
  4631  003BF2                     l9774:
  4632                           
  4633                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4634  003BF2  C017  F010         	movff	__doprnt@flag,??__doprnt
  4635  003BF6  0EC0               	movlw	192
  4636  003BF8  1610               	andwf	??__doprnt,f,c
  4637  003BFA  E10B               	bnz	l9784
  4638                           
  4639                           ;doprnt.c: 1253: {
  4640                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4641  003BFC  D8BD               	call	PL234	;call to abstracted procedure
  4642  003BFE  D8EC               	call	PL468	;call to abstracted procedure
  4643                           
  4644                           ;doprnt.c: 1261: if((int)val < 0) {
  4645  003C00  AE19               	btfss	__doprnt@val+1,7,c
  4646  003C02  D02C               	goto	l9816
  4647                           
  4648                           ;doprnt.c: 1262: flag |= 0x03;
  4649  003C04  0E03               	movlw	3
  4650  003C06  1217               	iorwf	__doprnt@flag,f,c
  4651                           
  4652                           ;doprnt.c: 1263: val = -val;
  4653  003C08  6C18               	negf	__doprnt@val,c
  4654  003C0A  1E19               	comf	__doprnt@val+1,f,c
  4655  003C0C  B0D8               	btfsc	status,0,c
  4656  003C0E  2A19               	incf	__doprnt@val+1,f,c
  4657  003C10  D025               	goto	l9816
  4658  003C12                     l9784:
  4659                           
  4660                           ;doprnt.c: 1268: else
  4661                           ;doprnt.c: 1273: {
  4662                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4663  003C12  D8B2               	call	PL234	;call to abstracted procedure
  4664  003C14  D8E1               	call	PL468	;call to abstracted procedure
  4665  003C16  D022               	goto	l9816
  4666  003C18                     l9786:
  4667                           
  4668                           ;doprnt.c: 1302: case 0xC0:
  4669                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4670  003C18  0E01               	movlw	1
  4671  003C1A  6E1A               	movwf	__doprnt@c,c
  4672  003C1C                     l9792:
  4673                           
  4674                           ;doprnt.c: 1306: if(val < dpowers[c])
  4675  003C1C  501A               	movf	__doprnt@c,w,c
  4676  003C1E  D8C0               	call	PL284	;call to abstracted procedure
  4677  003C20  D891               	call	PL174	;call to abstracted procedure
  4678  003C22  0009               	tblrd		*+
  4679  003C24  50F5               	movf	tablat,w,c
  4680  003C26  5C18               	subwf	__doprnt@val,w,c
  4681  003C28  0009               	tblrd		*+
  4682  003C2A  50F5               	movf	tablat,w,c
  4683  003C2C  5819               	subwfb	__doprnt@val+1,w,c
  4684  003C2E  E31D               	bnc	l9818
  4685  003C30  2A1A               	incf	__doprnt@c,f,c
  4686  003C32  0E05               	movlw	5
  4687  003C34  181A               	xorwf	__doprnt@c,w,c
  4688  003C36  E019               	bz	l9818
  4689  003C38  D7F1               	goto	l9792
  4690  003C3A                     l9800:
  4691                           
  4692                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4693  003C3A  0E01               	movlw	1
  4694  003C3C  6E1A               	movwf	__doprnt@c,c
  4695  003C3E                     l9806:
  4696                           
  4697                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4698  003C3E  501A               	movf	__doprnt@c,w,c
  4699  003C40  D8AB               	call	PL282	;call to abstracted procedure
  4700  003C42  D880               	call	PL174	;call to abstracted procedure
  4701  003C44  0009               	tblrd		*+
  4702  003C46  50F5               	movf	tablat,w,c
  4703  003C48  5C18               	subwf	__doprnt@val,w,c
  4704  003C4A  0009               	tblrd		*+
  4705  003C4C  50F5               	movf	tablat,w,c
  4706  003C4E  5819               	subwfb	__doprnt@val+1,w,c
  4707  003C50  E30C               	bnc	l9818
  4708  003C52  2A1A               	incf	__doprnt@c,f,c
  4709  003C54  0E04               	movlw	4
  4710  003C56  181A               	xorwf	__doprnt@c,w,c
  4711  003C58  E008               	bz	l9818
  4712  003C5A  D7F1               	goto	l9806
  4713  003C5C                     l9816:
  4714  003C5C  5017               	movf	__doprnt@flag,w,c
  4715  003C5E  0BC0               	andlw	192
  4716                           
  4717                           ; Switch size 1, requested type "space"
  4718                           ; Number of cases is 3, Range of values is 0 to 192
  4719                           ; switch strategies available:
  4720                           ; Name         Instructions Cycles
  4721                           ; simple_byte           10     6 (average)
  4722                           ;	Chosen strategy is simple_byte
  4723  003C60  E0DB               	bz	l9786
  4724  003C62  0A80               	xorlw	128	; case 128
  4725  003C64  E0EA               	bz	l9800
  4726  003C66  0A40               	xorlw	64	; case 192
  4727  003C68  E0D7               	bz	l9786
  4728  003C6A                     l9818:
  4729                           
  4730                           ;doprnt.c: 1422: {
  4731                           ;doprnt.c: 1438: if(flag & 0x03)
  4732  003C6A  C017  F010         	movff	__doprnt@flag,??__doprnt
  4733  003C6E  0E03               	movlw	3
  4734  003C70  1610               	andwf	??__doprnt,f,c
  4735  003C72  E016               	bz	l9828
  4736                           
  4737                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4738  003C74  D87B               	call	PL192	;call to abstracted procedure
  4739  003C76  50DE               	movf	postinc2,w,c
  4740  003C78  10DE               	iorwf	postinc2,w,c
  4741  003C7A  10DE               	iorwf	postinc2,w,c
  4742  003C7C  E00D               	bz	l9824
  4743  003C7E  D876               	call	PL192	;call to abstracted procedure
  4744  003C80  D801               	call	u14908
  4745  003C82  D00E               	goto	l9828
  4746  003C84                     u14908:
  4747  003C84  0005               	push	
  4748  003C86  6EFA               	movwf	pclath,c
  4749  003C88  50DE               	movf	postinc2,w,c
  4750  003C8A  6EFD               	movwf	tosl,c
  4751  003C8C  50DE               	movf	postinc2,w,c
  4752  003C8E  6EFE               	movwf	tosh,c
  4753  003C90  50DE               	movf	postinc2,w,c
  4754  003C92  6EFF               	movwf	tosu,c
  4755  003C94  50FA               	movf	pclath,w,c
  4756  003C96  0C2D               	retlw	45	;indir
  4757  003C98                     l9824:
  4758  003C98  D85D               	call	PL176	;call to abstracted procedure
  4759  003C9A  0E2D               	movlw	45
  4760  003C9C  6EDF               	movwf	indf2,c
  4761  003C9E  D875               	call	PL246	;call to abstracted procedure
  4762  003CA0                     l9828:
  4763                           
  4764                           ;doprnt.c: 1469: }
  4765                           ;doprnt.c: 1472: prec = c;
  4766  003CA0  C01A  F014         	movff	__doprnt@c,__doprnt@prec
  4767                           
  4768                           ;doprnt.c: 1474: while(prec--) {
  4769  003CA4  D043               	goto	l9848
  4770  003CA6                     l9830:
  4771                           
  4772                           ;doprnt.c: 1486: case 0xC0:
  4773                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4774  003CA6  5014               	movf	__doprnt@prec,w,c
  4775  003CA8  D87B               	call	PL284	;call to abstracted procedure
  4776  003CAA  D84C               	call	PL174	;call to abstracted procedure
  4777  003CAC  D884               	call	PL372	;call to abstracted procedure
  4778  003CAE  D88F               	call	PL466	;call to abstracted procedure
  4779  003CB0  ECBA  F02E         	call	___lwdiv
  4780  003CB4  C002  F009         	movff	?___lwdiv,___lwmod@dividend
  4781  003CB8  C003  F00A         	movff	?___lwdiv+1,___lwmod@dividend+1
  4782  003CBC  6A0C               	clrf	___lwmod@divisor+1,c
  4783  003CBE  0E0A               	movlw	10
  4784  003CC0  6E0B               	movwf	___lwmod@divisor,c
  4785  003CC2  ECE9  F02F         	call	___lwmod	;wreg free
  4786  003CC6  5009               	movf	?___lwmod,w,c
  4787  003CC8  0F30               	addlw	48
  4788  003CCA  6E1A               	movwf	__doprnt@c,c
  4789                           
  4790                           ;doprnt.c: 1491: break;
  4791  003CCC  D018               	goto	l9840
  4792  003CCE                     l9832:
  4793                           
  4794                           ;doprnt.c: 1499: {
  4795                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4796  003CCE  D87F               	call	PL466	;call to abstracted procedure
  4797  003CD0  5014               	movf	__doprnt@prec,w,c
  4798  003CD2  D862               	call	PL282	;call to abstracted procedure
  4799  003CD4  D837               	call	PL174	;call to abstracted procedure
  4800  003CD6  D86F               	call	PL372	;call to abstracted procedure
  4801  003CD8  ECBA  F02E         	call	___lwdiv	;wreg free
  4802  003CDC  5002               	movf	?___lwdiv,w,c
  4803  003CDE  0B0F               	andlw	15
  4804  003CE0  6E13               	movwf	__doprnt@idx,c
  4805                           
  4806                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4807  003CE2  5013               	movf	__doprnt@idx,w,c
  4808  003CE4  0F5F               	addlw	low STR_8
  4809  003CE6  D82E               	call	PL174	;call to abstracted procedure
  4810  003CE8  0008               	tblrd		*
  4811  003CEA  CFF5 F01A          	movff	tablat,__doprnt@c
  4812                           
  4813                           ;doprnt.c: 1508: }
  4814                           ;doprnt.c: 1510: break;
  4815  003CEE  D007               	goto	l9840
  4816  003CF0                     l9838:
  4817  003CF0  5017               	movf	__doprnt@flag,w,c
  4818  003CF2  0BC0               	andlw	192
  4819                           
  4820                           ; Switch size 1, requested type "space"
  4821                           ; Number of cases is 3, Range of values is 0 to 192
  4822                           ; switch strategies available:
  4823                           ; Name         Instructions Cycles
  4824                           ; simple_byte           10     6 (average)
  4825                           ;	Chosen strategy is simple_byte
  4826  003CF4  E0D8               	bz	l9830
  4827  003CF6  0A80               	xorlw	128	; case 128
  4828  003CF8  E0EA               	bz	l9832
  4829  003CFA  0A40               	xorlw	64	; case 192
  4830  003CFC  E0D4               	bz	l9830
  4831  003CFE                     l9840:
  4832                           
  4833                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4834  003CFE  D836               	call	PL192	;call to abstracted procedure
  4835  003D00  50DE               	movf	postinc2,w,c
  4836  003D02  10DE               	iorwf	postinc2,w,c
  4837  003D04  10DE               	iorwf	postinc2,w,c
  4838  003D06  E00E               	bz	l9844
  4839  003D08  D831               	call	PL192	;call to abstracted procedure
  4840  003D0A  D801               	call	u14928
  4841  003D0C  D00F               	goto	l9848
  4842  003D0E                     u14928:
  4843  003D0E  0005               	push	
  4844  003D10  6EFA               	movwf	pclath,c
  4845  003D12  50DE               	movf	postinc2,w,c
  4846  003D14  6EFD               	movwf	tosl,c
  4847  003D16  50DE               	movf	postinc2,w,c
  4848  003D18  6EFE               	movwf	tosh,c
  4849  003D1A  50DE               	movf	postinc2,w,c
  4850  003D1C  6EFF               	movwf	tosu,c
  4851  003D1E  50FA               	movf	pclath,w,c
  4852  003D20  501A               	movf	__doprnt@c,w,c
  4853  003D22  0012               	return		;indir
  4854  003D24                     l9844:
  4855  003D24  D817               	call	PL176	;call to abstracted procedure
  4856  003D26  C01A  FFDF         	movff	__doprnt@c,indf2
  4857  003D2A  D82F               	call	PL246	;call to abstracted procedure
  4858  003D2C                     l9848:
  4859  003D2C  0614               	decf	__doprnt@prec,f,c
  4860  003D2E  2814               	incf	__doprnt@prec,w,c
  4861  003D30  E1DF               	bnz	l9838
  4862  003D32                     l9850:
  4863  003D32  2A0E               	incf	__doprnt@f,f,c
  4864  003D34  040E               	decf	__doprnt@f,w,c
  4865  003D36  D806               	call	PL174	;call to abstracted procedure
  4866  003D38  D845               	call	PL436	;call to abstracted procedure
  4867  003D3A  E001 D6DC          	bnz	l9736
  4868  003D3E                     l1831:
  4869                           
  4870                           ;doprnt.c: 1540: return 0;
  4871  003D3E  6A0E               	clrf	?__doprnt,c
  4872  003D40  6A0F               	clrf	?__doprnt+1,c
  4873  003D42  0012               	return		;funcret
  4874  003D44                     __end_of__doprnt:
  4875                           	opt stack 0
  4876  003D44                     PL174:
  4877                           	opt stack 25
  4878  003D44  6E10               	movwf	??__doprnt& (0+255),c
  4879  003D46  C010  FFF6         	movff	??__doprnt,tblptrl
  4880  003D4A                     	if	1	;There is more than 1 active tblptr byte
  4881  003D4A  0E10               	movlw	high __smallconst
  4882  003D4C  6EF7               	movwf	tblptrh,c
  4883  003D4E                     	endif
  4884  003D4E                     	if	0	;tblptru may be non-zero
  4885  003D4E                     	endif
  4886  003D4E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4887  003D4E  0E00               	movlw	low (__smallconst shr (0+16))
  4888  003D50  6EF8               	movwf	tblptru,c
  4889  003D52                     	endif
  4890  003D52  0012               	return	
  4891  003D54                     __end_ofPL174:
  4892                           	opt stack 0
  4893  003D54                     PL176:
  4894                           	opt stack 25
  4895  003D54  501B               	movf	__doprnt@pb,w,c
  4896  003D56  6ED9               	movwf	fsr2l,c
  4897  003D58  6ADA               	clrf	fsr2h,c
  4898  003D5A  CFDE F010          	movff	postinc2,??__doprnt
  4899  003D5E  CFDD F011          	movff	postdec2,??__doprnt+1
  4900  003D62  C010  FFD9         	movff	??__doprnt,fsr2l
  4901  003D66  C011  FFDA         	movff	??__doprnt+1,fsr2h
  4902  003D6A  0012               	return	
  4903  003D6C                     __end_ofPL176:
  4904                           	opt stack 0
  4905  003D6C                     PL192:
  4906                           	opt stack 25
  4907  003D6C  501B               	movf	__doprnt@pb,w,c
  4908  003D6E  6ED9               	movwf	fsr2l,c
  4909  003D70  6ADA               	clrf	fsr2h,c
  4910  003D72  0E02               	movlw	2
  4911  003D74  26D9               	addwf	fsr2l,f,c
  4912  003D76  0C02               	retlw	2
  4913  003D78                     __end_ofPL192:
  4914                           	opt stack 0
  4915  003D78                     PL234:
  4916                           	opt stack 25
  4917  003D78  500F               	movf	__doprnt@ap,w,c
  4918  003D7A  6ED9               	movwf	fsr2l,c
  4919  003D7C  6ADA               	clrf	fsr2h,c
  4920  003D7E  0E02               	movlw	2
  4921  003D80  26DF               	addwf	indf2,f,c
  4922  003D82  5CDF               	subwf	indf2,w,c
  4923  003D84  6ED9               	movwf	fsr2l,c
  4924  003D86  6ADA               	clrf	fsr2h,c
  4925  003D88  0012               	return	
  4926  003D8A                     __end_ofPL234:
  4927                           	opt stack 0
  4928  003D8A                     PL246:
  4929                           	opt stack 25
  4930  003D8A  501B               	movf	__doprnt@pb,w,c
  4931  003D8C  6ED9               	movwf	fsr2l,c
  4932  003D8E  6ADA               	clrf	fsr2h,c
  4933  003D90  2ADE               	incf	postinc2,f,c
  4934  003D92  0E00               	movlw	0
  4935  003D94  22DD               	addwfc	postdec2,f,c
  4936  003D96  0C00               	retlw	0
  4937  003D98                     __end_ofPL246:
  4938                           	opt stack 0
  4939  003D98                     PL282:
  4940                           	opt stack 25
  4941  003D98  0D02               	mullw	2
  4942  003D9A  50F3               	movf	prodl,w,c
  4943  003D9C  0F0B               	addlw	low _hexpowers
  4944  003D9E  0012               	return	
  4945  003DA0                     __end_ofPL282:
  4946                           	opt stack 0
  4947  003DA0                     PL284:
  4948                           	opt stack 25
  4949  003DA0  0D02               	mullw	2
  4950  003DA2  50F3               	movf	prodl,w,c
  4951  003DA4  0F01               	addlw	low _dpowers
  4952  003DA6  0012               	return	
  4953  003DA8                     __end_ofPL284:
  4954                           	opt stack 0
  4955  003DA8                     PL302:
  4956                           	opt stack 25
  4957  003DA8  C015  FFF6         	movff	__doprnt@cp,tblptrl
  4958  003DAC  C016  FFF7         	movff	__doprnt@cp+1,tblptrh
  4959  003DB0  0E00               	movlw	low (__smallconst shr (0+16))
  4960  003DB2  6EF8               	movwf	tblptru,c
  4961  003DB4  0012               	return	
  4962  003DB6                     __end_ofPL302:
  4963                           	opt stack 0
  4964  003DB6                     PL372:
  4965                           	opt stack 25
  4966  003DB6  0009               	tblrd		*+
  4967  003DB8  CFF5 F004          	movff	tablat,___lwdiv@divisor
  4968  003DBC  000A               	tblrd		*-
  4969  003DBE  CFF5 F005          	movff	tablat,___lwdiv@divisor+1
  4970  003DC2  0012               	return	
  4971  003DC4                     __end_ofPL372:
  4972                           	opt stack 0
  4973  003DC4                     PL436:
  4974                           	opt stack 25
  4975  003DC4  0008               	tblrd		*
  4976  003DC6  CFF5 F01A          	movff	tablat,__doprnt@c
  4977  003DCA  501A               	movf	__doprnt@c,w,c
  4978  003DCC  0012               	return	
  4979  003DCE                     __end_ofPL436:
  4980                           	opt stack 0
  4981  003DCE                     PL466:
  4982                           	opt stack 25
  4983  003DCE  C018  F002         	movff	__doprnt@val,___lwdiv@dividend
  4984  003DD2  C019  F003         	movff	__doprnt@val+1,___lwdiv@dividend+1
  4985  003DD6  0012               	return	
  4986  003DD8                     __end_ofPL466:
  4987                           	opt stack 0
  4988  003DD8                     PL468:
  4989                           	opt stack 25
  4990  003DD8  CFDE F018          	movff	postinc2,__doprnt@val
  4991  003DDC  CFDE F019          	movff	postinc2,__doprnt@val+1
  4992  003DE0  0012               	return	
  4993  003DE2                     __end_ofPL468:
  4994                           	opt stack 0
  4995                           tosu	equ	0xFFF
  4996                           tosh	equ	0xFFE
  4997                           tosl	equ	0xFFD
  4998                           pclath	equ	0xFFA
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           intcon2	equ	0xFF1
  5007                           indf0	equ	0xFEF
  5008                           postinc0	equ	0xFEE
  5009                           fsr0h	equ	0xFEA
  5010                           fsr0l	equ	0xFE9
  5011                           wreg	equ	0xFE8
  5012                           postinc1	equ	0xFE6
  5013                           plusw1	equ	0xFE3
  5014                           fsr1h	equ	0xFE2
  5015                           fsr1l	equ	0xFE1
  5016                           bsr	equ	0xFE0
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           plusw2	equ	0xFDB
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _putch *****************
  5026 ;; Defined at:
  5027 ;;		line 77 in file "../board_support_package/picdem2_net/uart.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  data            1    wreg     unsigned char 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  data            1    1[COMRAM] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;		None               void
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/2
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    3
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_printf
  5052 ;;		__doprnt
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text18
  5057  006464                     __ptext18:
  5058                           	opt stack 0
  5059  006464                     _putch:
  5060                           	opt stack 25
  5061                           
  5062                           ;incstack = 0
  5063                           ;putch@data stored from wreg
  5064  006464  6E02               	movwf	putch@data,c
  5065                           
  5066                           ;uart.c: 79: if(data == '\n')
  5067  006466  0E0A               	movlw	10
  5068  006468  1802               	xorwf	putch@data,w,c
  5069  00646A  E104               	bnz	l354
  5070  00646C                     l351:
  5071  00646C  A89E               	btfss	3998,4,c	;volatile
  5072  00646E  D7FE               	goto	l351
  5073                           
  5074                           ;uart.c: 83: TXREG1 = '\r';
  5075  006470  0E0D               	movlw	13
  5076  006472  6EAD               	movwf	4013,c	;volatile
  5077  006474                     l354:
  5078  006474  A89E               	btfss	3998,4,c	;volatile
  5079  006476  D7FE               	goto	l354
  5080                           
  5081                           ;uart.c: 87: TXREG1 = data;
  5082  006478  C002  FFAD         	movff	putch@data,4013	;volatile
  5083  00647C  0012               	return		;funcret
  5084  00647E                     __end_of_putch:
  5085                           	opt stack 0
  5086                           tosu	equ	0xFFF
  5087                           tosh	equ	0xFFE
  5088                           tosl	equ	0xFFD
  5089                           pclath	equ	0xFFA
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           intcon	equ	0xFF2
  5097                           intcon2	equ	0xFF1
  5098                           indf0	equ	0xFEF
  5099                           postinc0	equ	0xFEE
  5100                           fsr0h	equ	0xFEA
  5101                           fsr0l	equ	0xFE9
  5102                           wreg	equ	0xFE8
  5103                           postinc1	equ	0xFE6
  5104                           plusw1	equ	0xFE3
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           bsr	equ	0xFE0
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           plusw2	equ	0xFDB
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function ___lwmod *****************
  5117 ;; Defined at:
  5118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  dividend        2    8[COMRAM] unsigned int 
  5121 ;;  divisor         2   10[COMRAM] unsigned int 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  counter         1   12[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  2    8[COMRAM] unsigned int 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/2
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5133 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;Total ram usage:        5 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    3
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		__doprnt
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text19
  5148  005FD2                     __ptext19:
  5149                           	opt stack 0
  5150  005FD2                     ___lwmod:
  5151                           	opt stack 25
  5152                           
  5153                           ;incstack = 0
  5154  005FD2  500B               	movf	___lwmod@divisor,w,c
  5155  005FD4  100C               	iorwf	___lwmod@divisor+1,w,c
  5156  005FD6  E017               	bz	l2286
  5157  005FD8  0E01               	movlw	1
  5158  005FDA  6E0D               	movwf	___lwmod@counter,c
  5159  005FDC  D004               	goto	l9532
  5160  005FDE                     l9530:
  5161  005FDE  90D8               	bcf	status,0,c
  5162  005FE0  360B               	rlcf	___lwmod@divisor,f,c
  5163  005FE2  360C               	rlcf	___lwmod@divisor+1,f,c
  5164  005FE4  2A0D               	incf	___lwmod@counter,f,c
  5165  005FE6                     l9532:
  5166  005FE6  AE0C               	btfss	___lwmod@divisor+1,7,c
  5167  005FE8  D7FA               	goto	l9530
  5168  005FEA                     l9534:
  5169  005FEA  500B               	movf	___lwmod@divisor,w,c
  5170  005FEC  5C09               	subwf	___lwmod@dividend,w,c
  5171  005FEE  500C               	movf	___lwmod@divisor+1,w,c
  5172  005FF0  580A               	subwfb	___lwmod@dividend+1,w,c
  5173  005FF2  E304               	bnc	l9538
  5174  005FF4  500B               	movf	___lwmod@divisor,w,c
  5175  005FF6  5E09               	subwf	___lwmod@dividend,f,c
  5176  005FF8  500C               	movf	___lwmod@divisor+1,w,c
  5177  005FFA  5A0A               	subwfb	___lwmod@dividend+1,f,c
  5178  005FFC                     l9538:
  5179  005FFC  90D8               	bcf	status,0,c
  5180  005FFE  320C               	rrcf	___lwmod@divisor+1,f,c
  5181  006000  320B               	rrcf	___lwmod@divisor,f,c
  5182  006002  2E0D               	decfsz	___lwmod@counter,f,c
  5183  006004  D7F2               	goto	l9534
  5184  006006                     l2286:
  5185  006006  C009  F009         	movff	___lwmod@dividend,?___lwmod
  5186  00600A  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  5187  00600E  0012               	return		;funcret
  5188  006010                     __end_of___lwmod:
  5189                           	opt stack 0
  5190                           tosu	equ	0xFFF
  5191                           tosh	equ	0xFFE
  5192                           tosl	equ	0xFFD
  5193                           pclath	equ	0xFFA
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodh	equ	0xFF4
  5199                           prodl	equ	0xFF3
  5200                           intcon	equ	0xFF2
  5201                           intcon2	equ	0xFF1
  5202                           indf0	equ	0xFEF
  5203                           postinc0	equ	0xFEE
  5204                           fsr0h	equ	0xFEA
  5205                           fsr0l	equ	0xFE9
  5206                           wreg	equ	0xFE8
  5207                           postinc1	equ	0xFE6
  5208                           plusw1	equ	0xFE3
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           bsr	equ	0xFE0
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function ___lwdiv *****************
  5221 ;; Defined at:
  5222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  dividend        2    1[COMRAM] unsigned int 
  5225 ;;  divisor         2    3[COMRAM] unsigned int 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  quotient        2    6[COMRAM] unsigned int 
  5228 ;;  counter         1    5[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    1[COMRAM] unsigned int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/2
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;Total ram usage:        7 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    3
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		__doprnt
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text20
  5253  005D74                     __ptext20:
  5254                           	opt stack 0
  5255  005D74                     ___lwdiv:
  5256                           	opt stack 25
  5257                           
  5258                           ;incstack = 0
  5259  005D74  6A07               	clrf	___lwdiv@quotient,c
  5260  005D76  6A08               	clrf	___lwdiv@quotient+1,c
  5261  005D78  5004               	movf	___lwdiv@divisor,w,c
  5262  005D7A  1005               	iorwf	___lwdiv@divisor+1,w,c
  5263  005D7C  E01B               	bz	l2276
  5264  005D7E  0E01               	movlw	1
  5265  005D80  6E06               	movwf	___lwdiv@counter,c
  5266  005D82  D004               	goto	l9512
  5267  005D84                     l9510:
  5268  005D84  90D8               	bcf	status,0,c
  5269  005D86  3604               	rlcf	___lwdiv@divisor,f,c
  5270  005D88  3605               	rlcf	___lwdiv@divisor+1,f,c
  5271  005D8A  2A06               	incf	___lwdiv@counter,f,c
  5272  005D8C                     l9512:
  5273  005D8C  AE05               	btfss	___lwdiv@divisor+1,7,c
  5274  005D8E  D7FA               	goto	l9510
  5275  005D90                     l9514:
  5276  005D90  90D8               	bcf	status,0,c
  5277  005D92  3607               	rlcf	___lwdiv@quotient,f,c
  5278  005D94  3608               	rlcf	___lwdiv@quotient+1,f,c
  5279  005D96  5004               	movf	___lwdiv@divisor,w,c
  5280  005D98  5C02               	subwf	___lwdiv@dividend,w,c
  5281  005D9A  5005               	movf	___lwdiv@divisor+1,w,c
  5282  005D9C  5803               	subwfb	___lwdiv@dividend+1,w,c
  5283  005D9E  E305               	bnc	l9522
  5284  005DA0  5004               	movf	___lwdiv@divisor,w,c
  5285  005DA2  5E02               	subwf	___lwdiv@dividend,f,c
  5286  005DA4  5005               	movf	___lwdiv@divisor+1,w,c
  5287  005DA6  5A03               	subwfb	___lwdiv@dividend+1,f,c
  5288  005DA8  8007               	bsf	___lwdiv@quotient,0,c
  5289  005DAA                     l9522:
  5290  005DAA  90D8               	bcf	status,0,c
  5291  005DAC  3205               	rrcf	___lwdiv@divisor+1,f,c
  5292  005DAE  3204               	rrcf	___lwdiv@divisor,f,c
  5293  005DB0  2E06               	decfsz	___lwdiv@counter,f,c
  5294  005DB2  D7EE               	goto	l9514
  5295  005DB4                     l2276:
  5296  005DB4  C007  F002         	movff	___lwdiv@quotient,?___lwdiv
  5297  005DB8  C008  F003         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5298  005DBC  0012               	return		;funcret
  5299  005DBE                     __end_of___lwdiv:
  5300                           	opt stack 0
  5301                           tosu	equ	0xFFF
  5302                           tosh	equ	0xFFE
  5303                           tosl	equ	0xFFD
  5304                           pclath	equ	0xFFA
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           prodh	equ	0xFF4
  5310                           prodl	equ	0xFF3
  5311                           intcon	equ	0xFF2
  5312                           intcon2	equ	0xFF1
  5313                           indf0	equ	0xFEF
  5314                           postinc0	equ	0xFEE
  5315                           fsr0h	equ	0xFEA
  5316                           fsr0l	equ	0xFE9
  5317                           wreg	equ	0xFE8
  5318                           postinc1	equ	0xFE6
  5319                           plusw1	equ	0xFE3
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           bsr	equ	0xFE0
  5323                           indf2	equ	0xFDF
  5324                           postinc2	equ	0xFDE
  5325                           postdec2	equ	0xFDD
  5326                           plusw2	equ	0xFDB
  5327                           fsr2h	equ	0xFDA
  5328                           fsr2l	equ	0xFD9
  5329                           status	equ	0xFD8
  5330                           
  5331 ;; *************** function _IPV4_Packet *****************
  5332 ;; Defined at:
  5333 ;;		line 115 in file "../../TCPIP Library/source/ipv4.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  msg            40    0        unsigned char [40]
  5338 ;;  cksm            2  156[BANK0 ] unsigned int 
  5339 ;;  length          2  154[BANK0 ] unsigned int 
  5340 ;;  hdrLen          1  153[BANK0 ] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      enum E6944
  5343 ;; Registers used:
  5344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/1
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Temps:          0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Totals:         0       5      28       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;Total ram usage:       33 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:   13
  5357 ;; This function calls:
  5358 ;;		_ETH_Dump
  5359 ;;		_ETH_ReadBlock
  5360 ;;		_ETH_RxComputeChecksum
  5361 ;;		_ICMP_Receive
  5362 ;;		_IPV4_PseudoHeaderChecksum
  5363 ;;		_TCP_Recv
  5364 ;;		_UDP_Receive
  5365 ;; This function is called by:
  5366 ;;		_Network_Read
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text21
  5371  0037E8                     __ptext21:
  5372                           	opt stack 0
  5373  0037E8                     _IPV4_Packet:
  5374                           	opt stack 15
  5375                           
  5376                           ;ipv4.c: 118: uint16_t length = 0;
  5377                           
  5378                           ;incstack = 0
  5379  0037E8  0100               	movlb	0	; () banked
  5380  0037EA  6BFA               	clrf	IPV4_Packet@length& (0+255),b
  5381  0037EC  6BFB               	clrf	(IPV4_Packet@length+1)& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;ipv4.c: 119: char msg[40];
  5385                           ;ipv4.c: 120: uint8_t hdrLen;
  5386                           ;ipv4.c: 123: cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
  5387  0037EE  6A0E               	clrf	ETH_RxComputeChecksum@len+1,c
  5388  0037F0  0E14               	movlw	20
  5389  0037F2  6E0D               	movwf	ETH_RxComputeChecksum@len,c
  5390  0037F4  6A10               	clrf	ETH_RxComputeChecksum@seed+1,c
  5391  0037F6  6A0F               	clrf	ETH_RxComputeChecksum@seed,c
  5392  0037F8  ECBC  F028         	call	_ETH_RxComputeChecksum
  5393                           
  5394                           ;ipv4.c: 124: if (cksm != 0)
  5395  0037FC  D94E               	call	PL278	;call to abstracted procedure
  5396  0037FE  E001               	bz	l10012
  5397  003800  0012               	return	
  5398  003802                     l10012:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;ipv4.c: 128: }
  5402                           ;ipv4.c: 130: ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
  5403  003802  0E96               	movlw	low _ipv4Header
  5404  003804  6E03               	movwf	ETH_ReadBlock@data,c
  5405  003806  0E02               	movlw	high _ipv4Header
  5406  003808  EC4D  F018         	call	PL444	;call to abstracted procedure
  5407  00380C  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
  5408                           
  5409                           ; BSR set to: 1
  5410                           ;ipv4.c: 131: if(ipv4Header.version != 4)
  5411  003810  0102               	movlb	2	; () banked
  5412  003812  3996               	swapf	_ipv4Header& (0+255),w,b
  5413  003814  0B0F               	andlw	15
  5414  003816  0A04               	xorlw	4
  5415  003818  E001               	bz	l10018
  5416  00381A  0012               	return	
  5417  00381C                     l10018:
  5418                           
  5419                           ; BSR set to: 2
  5420                           ;ipv4.c: 134: }
  5421                           ;ipv4.c: 136: ipv4Header.dstIpAddress = ((((uint32_t)ipv4Header.dstIpAddress&(uint32_t)0
      +                          xff000000) >> 24) | (((uint32_t)ipv4Header.dstIpAddress&(uint32_t)0x00ff0000) >> 8) | ((
      +                          (uint32_t)ipv4Header.dstIpAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Header.d
  5422  00381C  51A6               	movf	(_ipv4Header+16)& (0+255),w,b
  5423  00381E  D945               	call	PL294	;call to abstracted procedure
  5424  003820  EE22  F0A6         	lfsr	2,_ipv4Header+16
  5425  003824  D903               	call	PL206	;call to abstracted procedure
  5426  003826  C2A6  F108         	movff	_ipv4Header+16,??_IPV4_Packet+8
  5427  00382A  C2A7  F109         	movff	_ipv4Header+17,??_IPV4_Packet+9
  5428  00382E  C2A8  F10A         	movff	_ipv4Header+18,??_IPV4_Packet+10
  5429  003832  C2A9  F10B         	movff	_ipv4Header+19,??_IPV4_Packet+11
  5430  003836  D917               	call	PL244	;call to abstracted procedure
  5431  003838  EE22  F0A6         	lfsr	2,_ipv4Header+16
  5432  00383C  D8C7               	call	PL152	;call to abstracted procedure
  5433  00383E  6FA6               	movwf	(_ipv4Header+16)& (0+255),b
  5434  003840  D94E               	call	PL472	;call to abstracted procedure
  5435  003842  6FA7               	movwf	(_ipv4Header+17)& (0+255),b
  5436  003844  D93D               	call	PL416	;call to abstracted procedure
  5437  003846  6FA8               	movwf	(_ipv4Header+18)& (0+255),b
  5438  003848  D945               	call	PL470	;call to abstracted procedure
  5439  00384A  6FA9               	movwf	(_ipv4Header+19)& (0+255),b
  5440                           
  5441                           ;ipv4.c: 137: ipv4Header.srcIpAddress = ((((uint32_t)ipv4Header.srcIpAddress&(uint32_t)0
      +                          xff000000) >> 24) | (((uint32_t)ipv4Header.srcIpAddress&(uint32_t)0x00ff0000) >> 8) | ((
      +                          (uint32_t)ipv4Header.srcIpAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Header.s
  5442  00384C  51A2               	movf	(_ipv4Header+12)& (0+255),w,b
  5443  00384E  D92D               	call	PL294	;call to abstracted procedure
  5444  003850  EE22  F0A2         	lfsr	2,_ipv4Header+12
  5445  003854  D8EB               	call	PL206	;call to abstracted procedure
  5446  003856  C2A2  F108         	movff	_ipv4Header+12,??_IPV4_Packet+8
  5447  00385A  C2A3  F109         	movff	_ipv4Header+13,??_IPV4_Packet+9
  5448  00385E  C2A4  F10A         	movff	_ipv4Header+14,??_IPV4_Packet+10
  5449  003862  C2A5  F10B         	movff	_ipv4Header+15,??_IPV4_Packet+11
  5450  003866  D8FF               	call	PL244	;call to abstracted procedure
  5451  003868  EE22  F0A2         	lfsr	2,_ipv4Header+12
  5452  00386C  D8AF               	call	PL152	;call to abstracted procedure
  5453  00386E  6FA2               	movwf	(_ipv4Header+12)& (0+255),b
  5454  003870  D936               	call	PL472	;call to abstracted procedure
  5455  003872  6FA3               	movwf	(_ipv4Header+13)& (0+255),b
  5456  003874  D925               	call	PL416	;call to abstracted procedure
  5457  003876  6FA4               	movwf	(_ipv4Header+14)& (0+255),b
  5458  003878  D92D               	call	PL470	;call to abstracted procedure
  5459  00387A  6FA5               	movwf	(_ipv4Header+15)& (0+255),b
  5460                           
  5461                           ; BSR set to: 2
  5462                           ;ipv4.c: 139: if((ipv4Header.dstIpAddress == ipv4Address) ||( ipv4Header.dstIpAddress ==
      +                           0xFFFFFFFF))
  5463  00387C  0101               	movlb	1	; () banked
  5464  00387E  5192               	movf	_ipv4Address& (0+255),w,b
  5465  003880  0102               	movlb	2	; () banked
  5466  003882  19A6               	xorwf	(_ipv4Header+16)& (0+255),w,b
  5467  003884  E10F               	bnz	u15230
  5468  003886  0101               	movlb	1	; () banked
  5469  003888  5193               	movf	(_ipv4Address+1)& (0+255),w,b
  5470  00388A  0102               	movlb	2	; () banked
  5471  00388C  19A7               	xorwf	(_ipv4Header+17)& (0+255),w,b
  5472  00388E  E10A               	bnz	u15230
  5473  003890  0101               	movlb	1	; () banked
  5474  003892  5194               	movf	(_ipv4Address+2)& (0+255),w,b
  5475  003894  0102               	movlb	2	; () banked
  5476  003896  19A8               	xorwf	(_ipv4Header+18)& (0+255),w,b
  5477  003898  E105               	bnz	u15230
  5478  00389A  0101               	movlb	1	; () banked
  5479  00389C  5195               	movf	(_ipv4Address+3)& (0+255),w,b
  5480  00389E  0102               	movlb	2	; () banked
  5481  0038A0  19A9               	xorwf	(_ipv4Header+19)& (0+255),w,b
  5482  0038A2  E009               	bz	l10024
  5483  0038A4                     u15230:
  5484                           
  5485                           ; BSR set to: 2
  5486  0038A4  29A6               	incf	(_ipv4Header+16)& (0+255),w,b
  5487  0038A6  E106               	bnz	u15241
  5488  0038A8  29A7               	incf	(_ipv4Header+17)& (0+255),w,b
  5489  0038AA  E104               	bnz	u15241
  5490  0038AC  29A8               	incf	(_ipv4Header+18)& (0+255),w,b
  5491  0038AE  E102               	bnz	u15241
  5492  0038B0  29A9               	incf	(_ipv4Header+19)& (0+255),w,b
  5493  0038B2  A4D8               	btfss	status,2,c
  5494  0038B4                     u15241:
  5495  0038B4  0012               	return	
  5496  0038B6                     l10024:
  5497                           
  5498                           ; BSR set to: 2
  5499                           ;ipv4.c: 140: {
  5500                           ;ipv4.c: 141: ipv4Header.length = ((((uint16_t)ipv4Header.length & (uint16_t)0xFF00) >> 
      +                          8) | (((uint16_t)ipv4Header.length & (uint16_t)0x00FF) << 8));
  5501  0038B6  5198               	movf	(_ipv4Header+2)& (0+255),w,b
  5502  0038B8  0101               	movlb	1	; () banked
  5503  0038BA  6F01               	movwf	(??_IPV4_Packet+1)& (0+255),b
  5504  0038BC  6B00               	clrf	??_IPV4_Packet& (0+255),b
  5505  0038BE  EE22  F098         	lfsr	2,_ipv4Header+2
  5506  0038C2  CFDE F102          	movff	postinc2,??_IPV4_Packet+2
  5507  0038C6  CFDD F103          	movff	postdec2,??_IPV4_Packet+3
  5508  0038CA  C103  F102         	movff	??_IPV4_Packet+3,??_IPV4_Packet+2
  5509  0038CE  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  5510  0038D0  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  5511  0038D2  5100               	movf	??_IPV4_Packet& (0+255),w,b
  5512  0038D4  1102               	iorwf	(??_IPV4_Packet+2)& (0+255),w,b
  5513  0038D6  0102               	movlb	2	; () banked
  5514  0038D8  6F98               	movwf	(_ipv4Header+2)& (0+255),b
  5515  0038DA  0101               	movlb	1	; () banked
  5516  0038DC  5101               	movf	(??_IPV4_Packet+1)& (0+255),w,b
  5517  0038DE  1103               	iorwf	(??_IPV4_Packet+3)& (0+255),w,b
  5518  0038E0  0102               	movlb	2	; () banked
  5519  0038E2  6F99               	movwf	(_ipv4Header+3)& (0+255),b
  5520                           
  5521                           ; BSR set to: 2
  5522                           ;ipv4.c: 143: hdrLen = (uint8_t)(ipv4Header.ihl << 2);
  5523  0038E4  D8F2               	call	PL424	;call to abstracted procedure
  5524  0038E6  90D8               	bcf	status,0,c
  5525  0038E8  3700               	rlcf	??_IPV4_Packet& (0+255),f,b
  5526  0038EA  90D8               	bcf	status,0,c
  5527  0038EC  3500               	rlcf	??_IPV4_Packet& (0+255),w,b
  5528  0038EE  0100               	movlb	0	; () banked
  5529  0038F0  6FF9               	movwf	IPV4_Packet@hdrLen& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;ipv4.c: 145: if (ipv4Header.ihl > 5)
  5533  0038F2  0102               	movlb	2	; () banked
  5534  0038F4  D8EA               	call	PL424	;call to abstracted procedure
  5535  0038F6  0E05               	movlw	5
  5536  0038F8  6500               	cpfsgt	??_IPV4_Packet& (0+255),b
  5537  0038FA  D05F               	goto	l10064
  5538                           
  5539                           ; BSR set to: 1
  5540                           ;ipv4.c: 146: {
  5541                           ;ipv4.c: 148: ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
  5542  0038FC  0EEC               	movlw	236
  5543  0038FE  0100               	movlb	0	; () banked
  5544  003900  25F9               	addwf	IPV4_Packet@hdrLen& (0+255),w,b
  5545  003902  6E0B               	movwf	ETH_Dump@length,c
  5546  003904  6A0C               	clrf	ETH_Dump@length+1,c
  5547  003906  0EFF               	movlw	255
  5548  003908  220C               	addwfc	ETH_Dump@length+1,f,c
  5549  00390A  ECDF  F02E         	call	_ETH_Dump	;wreg free
  5550  00390E  D055               	goto	l10064
  5551  003910                     l10032:
  5552                           
  5553                           ; BSR set to: 2
  5554                           ;ipv4.c: 154: {
  5555                           ;ipv4.c: 156: ;
  5556                           ;ipv4.c: 157: length = ipv4Header.length - hdrLen;
  5557  003910  0100               	movlb	0	; () banked
  5558  003912  51F9               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5559  003914  0102               	movlb	2	; () banked
  5560  003916  5D98               	subwf	(_ipv4Header+2)& (0+255),w,b
  5561  003918  D89D               	call	PL238	;call to abstracted procedure
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;ipv4.c: 158: cksm = ETH_RxComputeChecksum(length, 0);
  5565  00391A  C0FA  F00D         	movff	IPV4_Packet@length,ETH_RxComputeChecksum@len
  5566  00391E  C0FB  F00E         	movff	IPV4_Packet@length+1,ETH_RxComputeChecksum@len+1
  5567  003922  6A10               	clrf	ETH_RxComputeChecksum@seed+1,c
  5568  003924  6A0F               	clrf	ETH_RxComputeChecksum@seed,c
  5569  003926  ECBC  F028         	call	_ETH_RxComputeChecksum	;wreg free
  5570                           
  5571                           ;ipv4.c: 160: if (cksm == 0)
  5572  00392A  D8B7               	call	PL278	;call to abstracted procedure
  5573  00392C  A4D8               	btfss	status,2,c
  5574  00392E  0012               	return	
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;ipv4.c: 161: {
  5578                           ;ipv4.c: 162: ICMP_Receive(&ipv4Header);
  5579  003930  0E96               	movlw	low _ipv4Header
  5580  003932  6E5A               	movwf	ICMP_Receive@ipv4Hdr,c
  5581  003934  0E02               	movlw	high _ipv4Header
  5582  003936  6E5B               	movwf	ICMP_Receive@ipv4Hdr+1,c
  5583  003938  EF94  F02E         	goto	_ICMP_Receive	;wreg free
  5584  00393C                     l10040:
  5585                           
  5586                           ; BSR set to: 2
  5587                           ;ipv4.c: 174: ;
  5588                           ;ipv4.c: 175: length = ipv4Header.length - hdrLen;
  5589  00393C  0100               	movlb	0	; () banked
  5590  00393E  51F9               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5591  003940  0102               	movlb	2	; () banked
  5592  003942  5D98               	subwf	(_ipv4Header+2)& (0+255),w,b
  5593  003944  D887               	call	PL238	;call to abstracted procedure
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;ipv4.c: 176: cksm = IPV4_PseudoHeaderChecksum(length);
  5597  003946  D8D0               	call	PL474	;call to abstracted procedure
  5598  003948  EC02  F02B         	call	_IPV4_PseudoHeaderChecksum	;wreg free
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;ipv4.c: 177: cksm = ETH_RxComputeChecksum(length, cksm);
  5602  00394C  D899               	call	PL272	;call to abstracted procedure
  5603  00394E  ECBC  F028         	call	_ETH_RxComputeChecksum	;wreg free
  5604  003952  C00D  F0FC         	movff	?_ETH_RxComputeChecksum,IPV4_Packet@cksm
  5605  003956  C00E  F0FD         	movff	?_ETH_RxComputeChecksum+1,IPV4_Packet@cksm+1
  5606                           
  5607                           ;ipv4.c: 178: UDP_Receive(cksm);
  5608  00395A  C0FC  F0C6         	movff	IPV4_Packet@cksm,UDP_Receive@udpcksm
  5609  00395E  C0FD  F0C7         	movff	IPV4_Packet@cksm+1,UDP_Receive@udpcksm+1
  5610  003962  EFBF  F027         	goto	_UDP_Receive	;wreg free
  5611  003966                     l10048:
  5612                           
  5613                           ; BSR set to: 2
  5614                           ;ipv4.c: 183: ;
  5615                           ;ipv4.c: 184: length = ipv4Header.length - hdrLen;
  5616  003966  0100               	movlb	0	; () banked
  5617  003968  51F9               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5618  00396A  0102               	movlb	2	; () banked
  5619  00396C  5D98               	subwf	(_ipv4Header+2)& (0+255),w,b
  5620  00396E  D872               	call	PL238	;call to abstracted procedure
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;ipv4.c: 185: cksm = IPV4_PseudoHeaderChecksum(length);
  5624  003970  D8BB               	call	PL474	;call to abstracted procedure
  5625  003972  EC02  F02B         	call	_IPV4_PseudoHeaderChecksum	;wreg free
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;ipv4.c: 186: cksm = ETH_RxComputeChecksum(length, cksm);
  5629  003976  D884               	call	PL272	;call to abstracted procedure
  5630  003978  ECBC  F028         	call	_ETH_RxComputeChecksum	;wreg free
  5631                           
  5632                           ;ipv4.c: 189: if (cksm == 0)
  5633  00397C  D88E               	call	PL278	;call to abstracted procedure
  5634  00397E  A4D8               	btfss	status,2,c
  5635  003980  0012               	return	
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;ipv4.c: 190: {
  5639                           ;ipv4.c: 191: remoteIpv4Address = ipv4Header.srcIpAddress;
  5640  003982  C2A2  F22A         	movff	_ipv4Header+12,_remoteIpv4Address
  5641  003986  C2A3  F22B         	movff	_ipv4Header+13,_remoteIpv4Address+1
  5642  00398A  C2A4  F22C         	movff	_ipv4Header+14,_remoteIpv4Address+2
  5643  00398E  C2A5  F22D         	movff	_ipv4Header+15,_remoteIpv4Address+3
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;ipv4.c: 192: TCP_Recv(remoteIpv4Address, length);
  5647  003992  C22A  F0D4         	movff	_remoteIpv4Address,TCP_Recv@remoteAddress
  5648  003996  C22B  F0D5         	movff	_remoteIpv4Address+1,TCP_Recv@remoteAddress+1
  5649  00399A  C22C  F0D6         	movff	_remoteIpv4Address+2,TCP_Recv@remoteAddress+2
  5650  00399E  C22D  F0D7         	movff	_remoteIpv4Address+3,TCP_Recv@remoteAddress+3
  5651  0039A2  C0FA  F0D8         	movff	IPV4_Packet@length,TCP_Recv@length
  5652  0039A6  C0FB  F0D9         	movff	IPV4_Packet@length+1,TCP_Recv@length+1
  5653  0039AA  EF4C  F016         	goto	_TCP_Recv	;wreg free
  5654  0039AE                     l10060:
  5655                           
  5656                           ; BSR set to: 2
  5657                           ;ipv4.c: 199: ETH_Dump(ipv4Header.length);
  5658  0039AE  C298  F00B         	movff	_ipv4Header+2,ETH_Dump@length
  5659  0039B2  C299  F00C         	movff	_ipv4Header+3,ETH_Dump@length+1
  5660  0039B6  EFDF  F02E         	goto	_ETH_Dump	;wreg free
  5661  0039BA                     l10064:
  5662  0039BA  0102               	movlb	2	; () banked
  5663  0039BC  519F               	movf	(_ipv4Header+9)& (0+255),w,b
  5664                           
  5665                           ; Switch size 1, requested type "space"
  5666                           ; Number of cases is 3, Range of values is 1 to 17
  5667                           ; switch strategies available:
  5668                           ; Name         Instructions Cycles
  5669                           ; simple_byte           10     6 (average)
  5670                           ;	Chosen strategy is simple_byte
  5671  0039BE  0A01               	xorlw	1	; case 1
  5672  0039C0  E0A7               	bz	l10032
  5673  0039C2  0A07               	xorlw	7	; case 6
  5674  0039C4  E0D0               	bz	l10048
  5675  0039C6  0A17               	xorlw	23	; case 17
  5676  0039C8  E0B9               	bz	l10040
  5677  0039CA  D7F1               	goto	l10060
  5678  0039CC                     __end_of_IPV4_Packet:
  5679                           	opt stack 0
  5680  0039CC                     PL152:
  5681                           	opt stack 15
  5682  0039CC  14DE               	andwf	postinc2,w,c
  5683  0039CE  6F10               	movwf	(??_IPV4_Packet+16)& (0+255),b
  5684  0039D0  0E00               	movlw	0
  5685  0039D2  14DE               	andwf	postinc2,w,c
  5686  0039D4  6F11               	movwf	(??_IPV4_Packet+17)& (0+255),b
  5687  0039D6  0E00               	movlw	0
  5688  0039D8  14DE               	andwf	postinc2,w,c
  5689  0039DA  6F12               	movwf	(??_IPV4_Packet+18)& (0+255),b
  5690  0039DC  0EFF               	movlw	255
  5691  0039DE  14DE               	andwf	postinc2,w,c
  5692  0039E0  6F13               	movwf	(??_IPV4_Packet+19)& (0+255),b
  5693  0039E2  0E19               	movlw	25
  5694  0039E4  D005               	goto	u15210
  5695  0039E6                     u15215:
  5696  0039E6  90D8               	bcf	status,0,c
  5697  0039E8  3313               	rrcf	(??_IPV4_Packet+19)& (0+255),f,b
  5698  0039EA  3312               	rrcf	(??_IPV4_Packet+18)& (0+255),f,b
  5699  0039EC  3311               	rrcf	(??_IPV4_Packet+17)& (0+255),f,b
  5700  0039EE  3310               	rrcf	(??_IPV4_Packet+16)& (0+255),f,b
  5701  0039F0                     u15210:
  5702  0039F0  2EE8               	decfsz	wreg,f,c
  5703  0039F2  D7F9               	goto	u15215
  5704  0039F4  510C               	movf	(??_IPV4_Packet+12)& (0+255),w,b
  5705  0039F6  1110               	iorwf	(??_IPV4_Packet+16)& (0+255),w,b
  5706  0039F8  6F14               	movwf	(??_IPV4_Packet+20)& (0+255),b
  5707  0039FA  510D               	movf	(??_IPV4_Packet+13)& (0+255),w,b
  5708  0039FC  1111               	iorwf	(??_IPV4_Packet+17)& (0+255),w,b
  5709  0039FE  6F15               	movwf	(??_IPV4_Packet+21)& (0+255),b
  5710  003A00  510E               	movf	(??_IPV4_Packet+14)& (0+255),w,b
  5711  003A02  1112               	iorwf	(??_IPV4_Packet+18)& (0+255),w,b
  5712  003A04  6F16               	movwf	(??_IPV4_Packet+22)& (0+255),b
  5713  003A06  510F               	movf	(??_IPV4_Packet+15)& (0+255),w,b
  5714  003A08  1113               	iorwf	(??_IPV4_Packet+19)& (0+255),w,b
  5715  003A0A  6F17               	movwf	(??_IPV4_Packet+23)& (0+255),b
  5716  003A0C  5104               	movf	(??_IPV4_Packet+4)& (0+255),w,b
  5717  003A0E  1114               	iorwf	(??_IPV4_Packet+20)& (0+255),w,b
  5718  003A10  6F18               	movwf	(??_IPV4_Packet+24)& (0+255),b
  5719  003A12  5105               	movf	(??_IPV4_Packet+5)& (0+255),w,b
  5720  003A14  1115               	iorwf	(??_IPV4_Packet+21)& (0+255),w,b
  5721  003A16  6F19               	movwf	(??_IPV4_Packet+25)& (0+255),b
  5722  003A18  5106               	movf	(??_IPV4_Packet+6)& (0+255),w,b
  5723  003A1A  1116               	iorwf	(??_IPV4_Packet+22)& (0+255),w,b
  5724  003A1C  6F1A               	movwf	(??_IPV4_Packet+26)& (0+255),b
  5725  003A1E  5107               	movf	(??_IPV4_Packet+7)& (0+255),w,b
  5726  003A20  1117               	iorwf	(??_IPV4_Packet+23)& (0+255),w,b
  5727  003A22  6F1B               	movwf	(??_IPV4_Packet+27)& (0+255),b
  5728  003A24  5100               	movf	??_IPV4_Packet& (0+255),w,b
  5729  003A26  1118               	iorwf	(??_IPV4_Packet+24)& (0+255),w,b
  5730  003A28  0102               	movlb	2	; () banked
  5731  003A2A  0012               	return	
  5732  003A2C                     __end_ofPL152:
  5733                           	opt stack 0
  5734  003A2C                     PL206:
  5735                           	opt stack 15
  5736  003A2C  0E00               	movlw	0
  5737  003A2E  14DE               	andwf	postinc2,w,c
  5738  003A30  6F04               	movwf	(??_IPV4_Packet+4)& (0+255),b
  5739  003A32  0EFF               	movlw	255
  5740  003A34  14DE               	andwf	postinc2,w,c
  5741  003A36  6F05               	movwf	(??_IPV4_Packet+5)& (0+255),b
  5742  003A38  0E00               	movlw	0
  5743  003A3A  14DE               	andwf	postinc2,w,c
  5744  003A3C  6F06               	movwf	(??_IPV4_Packet+6)& (0+255),b
  5745  003A3E  0E00               	movlw	0
  5746  003A40  14DE               	andwf	postinc2,w,c
  5747  003A42  6F07               	movwf	(??_IPV4_Packet+7)& (0+255),b
  5748  003A44  C106  F107         	movff	??_IPV4_Packet+6,??_IPV4_Packet+7
  5749  003A48  C105  F106         	movff	??_IPV4_Packet+5,??_IPV4_Packet+6
  5750  003A4C  C104  F105         	movff	??_IPV4_Packet+4,??_IPV4_Packet+5
  5751  003A50  6B04               	clrf	(??_IPV4_Packet+4)& (0+255),b
  5752  003A52  0012               	return	
  5753  003A54                     __end_ofPL206:
  5754                           	opt stack 0
  5755  003A54                     PL238:
  5756                           	opt stack 15
  5757  003A54  0100               	movlb	0	; () banked
  5758  003A56  6FFA               	movwf	IPV4_Packet@length& (0+255),b
  5759  003A58  0102               	movlb	2	; () banked
  5760  003A5A  5199               	movf	(_ipv4Header+3)& (0+255),w,b
  5761  003A5C  A0D8               	btfss	status,0,c
  5762  003A5E  0599               	decf	(_ipv4Header+3)& (0+255),w,b
  5763  003A60  0100               	movlb	0	; () banked
  5764  003A62  6FFB               	movwf	(IPV4_Packet@length+1)& (0+255),b
  5765  003A64  0012               	return	
  5766  003A66                     __end_ofPL238:
  5767                           	opt stack 0
  5768  003A66                     PL244:
  5769                           	opt stack 15
  5770  003A66  C109  F108         	movff	??_IPV4_Packet+9,??_IPV4_Packet+8
  5771  003A6A  C10A  F109         	movff	??_IPV4_Packet+10,??_IPV4_Packet+9
  5772  003A6E  C10B  F10A         	movff	??_IPV4_Packet+11,??_IPV4_Packet+10
  5773  003A72  6B0B               	clrf	(??_IPV4_Packet+11)& (0+255),b
  5774  003A74  6B0C               	clrf	(??_IPV4_Packet+12)& (0+255),b
  5775  003A76  5109               	movf	(??_IPV4_Packet+9)& (0+255),w,b
  5776  003A78  6F0D               	movwf	(??_IPV4_Packet+13)& (0+255),b
  5777  003A7A  6B0E               	clrf	(??_IPV4_Packet+14)& (0+255),b
  5778  003A7C  6B0F               	clrf	(??_IPV4_Packet+15)& (0+255),b
  5779  003A7E  0C00               	retlw	0
  5780  003A80                     __end_ofPL244:
  5781                           	opt stack 0
  5782  003A80                     PL272:
  5783                           	opt stack 15
  5784  003A80  C002  F0FC         	movff	?_IPV4_PseudoHeaderChecksum,IPV4_Packet@cksm
  5785  003A84  C003  F0FD         	movff	?_IPV4_PseudoHeaderChecksum+1,IPV4_Packet@cksm+1
  5786  003A88  C0FA  F00D         	movff	IPV4_Packet@length,ETH_RxComputeChecksum@len
  5787  003A8C  C0FB  F00E         	movff	IPV4_Packet@length+1,ETH_RxComputeChecksum@len+1
  5788  003A90  C0FC  F00F         	movff	IPV4_Packet@cksm,ETH_RxComputeChecksum@seed
  5789  003A94  C0FD  F010         	movff	IPV4_Packet@cksm+1,ETH_RxComputeChecksum@seed+1
  5790  003A98  0012               	return	
  5791  003A9A                     __end_ofPL272:
  5792                           	opt stack 0
  5793  003A9A                     PL278:
  5794                           	opt stack 15
  5795  003A9A  C00D  F0FC         	movff	?_ETH_RxComputeChecksum,IPV4_Packet@cksm
  5796  003A9E  C00E  F0FD         	movff	?_ETH_RxComputeChecksum+1,IPV4_Packet@cksm+1
  5797  003AA2  0100               	movlb	0	; () banked
  5798  003AA4  51FC               	movf	IPV4_Packet@cksm& (0+255),w,b
  5799  003AA6  11FD               	iorwf	(IPV4_Packet@cksm+1)& (0+255),w,b
  5800  003AA8  0012               	return	
  5801  003AAA                     __end_ofPL278:
  5802                           	opt stack 0
  5803  003AAA                     PL294:
  5804                           	opt stack 15
  5805  003AAA  0101               	movlb	1	; () banked
  5806  003AAC  6F00               	movwf	??_IPV4_Packet& (0+255),b
  5807  003AAE  6B01               	clrf	(??_IPV4_Packet+1)& (0+255),b
  5808  003AB0  6B02               	clrf	(??_IPV4_Packet+2)& (0+255),b
  5809  003AB2  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  5810  003AB4  C100  F103         	movff	??_IPV4_Packet,??_IPV4_Packet+3
  5811  003AB8  6B02               	clrf	(??_IPV4_Packet+2)& (0+255),b
  5812  003ABA  6B01               	clrf	(??_IPV4_Packet+1)& (0+255),b
  5813  003ABC  6B00               	clrf	??_IPV4_Packet& (0+255),b
  5814  003ABE  0012               	return	
  5815  003AC0                     __end_ofPL294:
  5816                           	opt stack 0
  5817  003AC0                     PL416:
  5818                           	opt stack 15
  5819  003AC0  0101               	movlb	1	; () banked
  5820  003AC2  5102               	movf	(??_IPV4_Packet+2)& (0+255),w,b
  5821  003AC4  111A               	iorwf	(??_IPV4_Packet+26)& (0+255),w,b
  5822  003AC6  0102               	movlb	2	; () banked
  5823  003AC8  0012               	return	
  5824  003ACA                     __end_ofPL416:
  5825                           	opt stack 0
  5826  003ACA                     PL424:
  5827                           	opt stack 15
  5828  003ACA  5196               	movf	_ipv4Header& (0+255),w,b
  5829  003ACC  0B0F               	andlw	15
  5830  003ACE  0101               	movlb	1	; () banked
  5831  003AD0  6F00               	movwf	??_IPV4_Packet& (0+255),b
  5832  003AD2  0012               	return	
  5833  003AD4                     __end_ofPL424:
  5834                           	opt stack 0
  5835  003AD4                     PL470:
  5836                           	opt stack 15
  5837  003AD4  0101               	movlb	1	; () banked
  5838  003AD6  5103               	movf	(??_IPV4_Packet+3)& (0+255),w,b
  5839  003AD8  111B               	iorwf	(??_IPV4_Packet+27)& (0+255),w,b
  5840  003ADA  0102               	movlb	2	; () banked
  5841  003ADC  0012               	return	
  5842  003ADE                     __end_ofPL470:
  5843                           	opt stack 0
  5844  003ADE                     PL472:
  5845                           	opt stack 15
  5846  003ADE  0101               	movlb	1	; () banked
  5847  003AE0  5101               	movf	(??_IPV4_Packet+1)& (0+255),w,b
  5848  003AE2  1119               	iorwf	(??_IPV4_Packet+25)& (0+255),w,b
  5849  003AE4  0102               	movlb	2	; () banked
  5850  003AE6  0012               	return	
  5851  003AE8                     __end_ofPL472:
  5852                           	opt stack 0
  5853  003AE8                     PL474:
  5854                           	opt stack 15
  5855  003AE8  C0FA  F002         	movff	IPV4_Packet@length,IPV4_PseudoHeaderChecksum@payloadLen
  5856  003AEC  C0FB  F003         	movff	IPV4_Packet@length+1,IPV4_PseudoHeaderChecksum@payloadLen+1
  5857  003AF0  0012               	return	
  5858  003AF2                     __end_ofPL474:
  5859                           	opt stack 0
  5860                           tosu	equ	0xFFF
  5861                           tosh	equ	0xFFE
  5862                           tosl	equ	0xFFD
  5863                           pclath	equ	0xFFA
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon2	equ	0xFF1
  5872                           indf0	equ	0xFEF
  5873                           postinc0	equ	0xFEE
  5874                           fsr0h	equ	0xFEA
  5875                           fsr0l	equ	0xFE9
  5876                           wreg	equ	0xFE8
  5877                           postinc1	equ	0xFE6
  5878                           plusw1	equ	0xFE3
  5879                           fsr1h	equ	0xFE2
  5880                           fsr1l	equ	0xFE1
  5881                           bsr	equ	0xFE0
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           plusw2	equ	0xFDB
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _UDP_Receive *****************
  5891 ;; Defined at:
  5892 ;;		line 126 in file "../../TCPIP Library/source/udpv4.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  udpcksm         2  102[BANK0 ] unsigned int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  x               2  110[BANK0 ] unsigned int 
  5897 ;;  hptr            1  112[BANK0 ] PTR const struct .
  5898 ;;		 -> UDP_CallBackTable(15), 
  5899 ;;  ret             1    0        enum E367
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      enum E6944
  5902 ;; Registers used:
  5903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:       11 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:   12
  5916 ;; This function calls:
  5917 ;;		_DEMO_UDP_IdlePkt
  5918 ;;		_DEMO_UDP_Recv
  5919 ;;		_DHCP_Handler
  5920 ;;		_ETH_ReadBlock
  5921 ;; This function is called by:
  5922 ;;		_IPV4_Packet
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text22
  5927  004F7E                     __ptext22:
  5928                           	opt stack 0
  5929  004F7E                     _UDP_Receive:
  5930                           	opt stack 15
  5931                           
  5932                           ;udpv4.c: 129: const udp_handler_t *hptr;
  5933                           ;udpv4.c: 130: uint16_t x;
  5934                           ;udpv4.c: 132: hptr = UDP_CallBackTable;
  5935                           
  5936                           ;incstack = 0
  5937  004F7E  0E28               	movlw	low _UDP_CallBackTable
  5938  004F80  0100               	movlb	0	; () banked
  5939  004F82  6FD0               	movwf	UDP_Receive@hptr& (0+255),b
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;udpv4.c: 133: ETH_ReadBlock((char *)&udpHeader,sizeof(udpHeader));
  5943  004F84  0EAA               	movlw	low _udpHeader
  5944  004F86  6E03               	movwf	ETH_ReadBlock@data,c
  5945  004F88  0E02               	movlw	high _udpHeader
  5946  004F8A  6E04               	movwf	ETH_ReadBlock@data+1,c
  5947  004F8C  ECB6  F02E         	call	PL490	;call to abstracted procedure
  5948  004F90  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
  5949                           
  5950                           ; BSR set to: 1
  5951                           ;udpv4.c: 135: if((udpHeader.checksum == 0) || (udpcksm == 0))
  5952  004F94  0102               	movlb	2	; () banked
  5953  004F96  51B0               	movf	(_udpHeader+6)& (0+255),w,b
  5954  004F98  11B1               	iorwf	(_udpHeader+7)& (0+255),w,b
  5955  004F9A  E005               	bz	l9640
  5956                           
  5957                           ; BSR set to: 2
  5958  004F9C  0100               	movlb	0	; () banked
  5959  004F9E  51C6               	movf	UDP_Receive@udpcksm& (0+255),w,b
  5960  004FA0  11C7               	iorwf	(UDP_Receive@udpcksm+1)& (0+255),w,b
  5961  004FA2  A4D8               	btfss	status,2,c
  5962  004FA4  0012               	return	
  5963  004FA6                     l9640:
  5964                           
  5965                           ;udpv4.c: 136: {
  5966                           ;udpv4.c: 137: udpHeader.dstPort = ((((uint16_t)udpHeader.dstPort & (uint16_t)0xFF00) >>
      +                           8) | (((uint16_t)udpHeader.dstPort & (uint16_t)0x00FF) << 8));
  5967  004FA6  0102               	movlb	2	; () banked
  5968  004FA8  51AC               	movf	(_udpHeader+2)& (0+255),w,b
  5969  004FAA  0100               	movlb	0	; () banked
  5970  004FAC  6FC9               	movwf	(??_UDP_Receive+1)& (0+255),b
  5971  004FAE  6BC8               	clrf	??_UDP_Receive& (0+255),b
  5972  004FB0  EE22  F0AC         	lfsr	2,_udpHeader+2
  5973  004FB4  D85E               	call	PL308	;call to abstracted procedure
  5974  004FB6  11CA               	iorwf	(??_UDP_Receive+2)& (0+255),w,b
  5975  004FB8  0102               	movlb	2	; () banked
  5976  004FBA  6FAC               	movwf	(_udpHeader+2)& (0+255),b
  5977  004FBC  0100               	movlb	0	; () banked
  5978  004FBE  51C9               	movf	(??_UDP_Receive+1)& (0+255),w,b
  5979  004FC0  11CB               	iorwf	(??_UDP_Receive+3)& (0+255),w,b
  5980  004FC2  0102               	movlb	2	; () banked
  5981  004FC4  6FAD               	movwf	(_udpHeader+3)& (0+255),b
  5982                           
  5983                           ; BSR set to: 2
  5984                           ;udpv4.c: 138: destPort = ((((uint16_t)udpHeader.srcPort & (uint16_t)0xFF00) >> 8) | (((
      +                          uint16_t)udpHeader.srcPort & (uint16_t)0x00FF) << 8));
  5985  004FC6  51AA               	movf	_udpHeader& (0+255),w,b
  5986  004FC8  0100               	movlb	0	; () banked
  5987  004FCA  6FC9               	movwf	(??_UDP_Receive+1)& (0+255),b
  5988  004FCC  6BC8               	clrf	??_UDP_Receive& (0+255),b
  5989  004FCE  0102               	movlb	2	; () banked
  5990  004FD0  51AB               	movf	(_udpHeader+1)& (0+255),w,b
  5991  004FD2  0100               	movlb	0	; () banked
  5992  004FD4  6FCA               	movwf	(??_UDP_Receive+2)& (0+255),b
  5993  004FD6  6BCB               	clrf	(??_UDP_Receive+3)& (0+255),b
  5994  004FD8  51C8               	movf	??_UDP_Receive& (0+255),w,b
  5995  004FDA  11CA               	iorwf	(??_UDP_Receive+2)& (0+255),w,b
  5996  004FDC  0101               	movlb	1	; () banked
  5997  004FDE  6FA2               	movwf	_destPort& (0+255),b
  5998  004FE0  0100               	movlb	0	; () banked
  5999  004FE2  51C9               	movf	(??_UDP_Receive+1)& (0+255),w,b
  6000  004FE4  11CB               	iorwf	(??_UDP_Receive+3)& (0+255),w,b
  6001  004FE6  0101               	movlb	1	; () banked
  6002  004FE8  6FA3               	movwf	(_destPort+1)& (0+255),b
  6003                           
  6004                           ; BSR set to: 1
  6005                           ;udpv4.c: 142: for(x = 0; x < (sizeof(UDP_CallBackTable) / sizeof(*(UDP_CallBackTable)))
      +                          ;x++)
  6006                           
  6007                           ; BSR set to: 1
  6008  004FEA  0100               	movlb	0	; () banked
  6009  004FEC  6BCE               	clrf	UDP_Receive@x& (0+255),b
  6010  004FEE  6BCF               	clrf	(UDP_Receive@x+1)& (0+255),b
  6011  004FF0                     l9652:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;udpv4.c: 143: {
  6015                           ;udpv4.c: 144: if(hptr->portNumber == udpHeader.dstPort)
  6016  004FF0  C0D0  FFF6         	movff	UDP_Receive@hptr,tblptrl
  6017  004FF4                     	if	1	;There is more than 1 active tblptr byte
  6018  004FF4  D839               	call	PL226	;call to abstracted procedure
  6019  004FF6  0102               	movlb	2	; () banked
  6020  004FF8  51AC               	movf	(_udpHeader+2)& (0+255),w,b
  6021  004FFA  0009               	tblrd		*+
  6022  004FFC  18F5               	xorwf	tablat,w,c
  6023  004FFE  E128               	bnz	l9658
  6024  005000  51AD               	movf	(_udpHeader+3)& (0+255),w,b
  6025  005002  0009               	tblrd		*+
  6026  005004  18F5               	xorwf	tablat,w,c
  6027  005006  E124               	bnz	l9658
  6028                           
  6029                           ; BSR set to: 2
  6030                           ;udpv4.c: 145: {
  6031                           ;udpv4.c: 146: hptr->callBack(((((uint16_t)udpHeader.length & (uint16_t)0xFF00) >> 8) | 
      +                          (((uint16_t)udpHeader.length & (uint16_t)0x00FF) << 8)) - sizeof(udpHeader));
  6032  005008  51AE               	movf	(_udpHeader+4)& (0+255),w,b
  6033  00500A  0100               	movlb	0	; () banked
  6034  00500C  6FC9               	movwf	(??_UDP_Receive+1)& (0+255),b
  6035  00500E  6BC8               	clrf	??_UDP_Receive& (0+255),b
  6036  005010  EE22  F0AE         	lfsr	2,_udpHeader+4
  6037  005014  D82E               	call	PL308	;call to abstracted procedure
  6038  005016  13CA               	iorwf	(??_UDP_Receive+2)& (0+255),f,b
  6039  005018  51C9               	movf	(??_UDP_Receive+1)& (0+255),w,b
  6040  00501A  13CB               	iorwf	(??_UDP_Receive+3)& (0+255),f,b
  6041  00501C  0EF8               	movlw	248
  6042  00501E  25CA               	addwf	(??_UDP_Receive+2)& (0+255),w,b
  6043  005020  6E59               	movwf	DHCP_Handler@length,c
  6044  005022  0EFF               	movlw	255
  6045  005024  21CB               	addwfc	(??_UDP_Receive+3)& (0+255),w,b
  6046  005026  6E5A               	movwf	DHCP_Handler@length+1,c
  6047  005028  C0D0  F0CC         	movff	UDP_Receive@hptr,??_UDP_Receive+4
  6048  00502C  0E02               	movlw	2
  6049  00502E  27CC               	addwf	(??_UDP_Receive+4)& (0+255),f,b
  6050  005030  C0CC  FFF6         	movff	??_UDP_Receive+4,tblptrl
  6051  005034                     	if	1	;There is more than 1 active tblptr byte
  6052  005034  D819               	call	PL226	;call to abstracted procedure
  6053  005036  0005               	push	
  6054  005038  6EFA               	movwf	pclath,c
  6055  00503A  0009               	tblrd		*+
  6056  00503C  50F5               	movf	tablat,w,c
  6057  00503E  6EFD               	movwf	tosl,c
  6058  005040  0009               	tblrd		*+
  6059  005042  50F5               	movf	tablat,w,c
  6060  005044  6EFE               	movwf	tosh,c
  6061  005046  0009               	tblrd		*+
  6062  005048  50F5               	movf	tablat,w,c
  6063  00504A  6EFF               	movwf	tosu,c
  6064  00504C  50FA               	movf	pclath,w,c
  6065  00504E  0012               	return		;indir
  6066  005050                     l9658:
  6067                           
  6068                           ; BSR set to: 2
  6069                           ;udpv4.c: 149: }
  6070                           ;udpv4.c: 150: hptr ++;
  6071  005050  0E05               	movlw	5
  6072  005052  0100               	movlb	0	; () banked
  6073  005054  27D0               	addwf	UDP_Receive@hptr& (0+255),f,b
  6074                           
  6075                           ; BSR set to: 0
  6076  005056  4BCE               	infsnz	UDP_Receive@x& (0+255),f,b
  6077  005058  2BCF               	incf	(UDP_Receive@x+1)& (0+255),f,b
  6078                           
  6079                           ; BSR set to: 0
  6080  00505A  51CF               	movf	(UDP_Receive@x+1)& (0+255),w,b
  6081  00505C  E104               	bnz	l1561
  6082  00505E  0E03               	movlw	3
  6083  005060  5DCE               	subwf	UDP_Receive@x& (0+255),w,b
  6084  005062  E3C6               	bnc	l9652
  6085  005064  0012               	return	
  6086  005066                     l1561:
  6087  005066  0012               	return		;funcret
  6088  005068                     __end_of_UDP_Receive:
  6089                           	opt stack 0
  6090  005068                     PL226:
  6091                           	opt stack 15
  6092  005068  0E10               	movlw	high __smallconst
  6093  00506A  6EF7               	movwf	tblptrh,c
  6094  00506C                     	endif
  6095  00506C                     	if	0	;tblptru may be non-zero
  6096  00506C                     	endif
  6097  00506C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6098  00506C  0E00               	movlw	low (__smallconst shr (0+16))
  6099  00506E  6EF8               	movwf	tblptru,c
  6100  005070                     	endif
  6101  005070  0012               	return	
  6102  005072                     __end_ofPL226:
  6103                           	opt stack 0
  6104  005072                     PL308:
  6105                           	opt stack 15
  6106  005072  CFDE F0CA          	movff	postinc2,??_UDP_Receive+2
  6107  005076  CFDD F0CB          	movff	postdec2,??_UDP_Receive+3
  6108  00507A  C0CB  F0CA         	movff	??_UDP_Receive+3,??_UDP_Receive+2
  6109  00507E  6BCB               	clrf	(??_UDP_Receive+3)& (0+255),b
  6110  005080  6BCB               	clrf	(??_UDP_Receive+3)& (0+255),b
  6111  005082  51C8               	movf	??_UDP_Receive& (0+255),w,b
  6112  005084  0012               	return	
  6113  005086                     __end_ofPL308:
  6114                           	opt stack 0
  6115                           tosu	equ	0xFFF
  6116                           tosh	equ	0xFFE
  6117                           tosl	equ	0xFFD
  6118                           pclath	equ	0xFFA
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           intcon	equ	0xFF2
  6126                           intcon2	equ	0xFF1
  6127                           indf0	equ	0xFEF
  6128                           postinc0	equ	0xFEE
  6129                           fsr0h	equ	0xFEA
  6130                           fsr0l	equ	0xFE9
  6131                           wreg	equ	0xFE8
  6132                           postinc1	equ	0xFE6
  6133                           plusw1	equ	0xFE3
  6134                           fsr1h	equ	0xFE2
  6135                           fsr1l	equ	0xFE1
  6136                           bsr	equ	0xFE0
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           plusw2	equ	0xFDB
  6141                           fsr2h	equ	0xFDA
  6142                           fsr2l	equ	0xFD9
  6143                           status	equ	0xFD8
  6144                           
  6145 ;; *************** function _DEMO_UDP_Recv *****************
  6146 ;; Defined at:
  6147 ;;		line 110 in file "udp_demo.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  length          2   88[COMRAM] int 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  str            32   23[BANK0 ] unsigned char [32]
  6152 ;;  str2           16   71[BANK0 ] unsigned char [16]
  6153 ;;  str1           16   55[BANK0 ] unsigned char [16]
  6154 ;;  dest_ip         4   98[BANK0 ] unsigned long 
  6155 ;;  local_ip        4   89[BANK0 ] unsigned long 
  6156 ;;  destPort        2   95[BANK0 ] unsigned int 
  6157 ;;  temperature     2   87[BANK0 ] unsigned int 
  6158 ;;  started         1   97[BANK0 ] unsigned char 
  6159 ;;  str_len         1   94[BANK0 ] unsigned char 
  6160 ;;  message         1    0        unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;		None               void
  6163 ;; Registers used:
  6164 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : F/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         0      79       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         2      79       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:       81 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:   10
  6177 ;; This function calls:
  6178 ;;		_DEMO_UDP_ClaimIPCheck
  6179 ;;		_DEMO_UDP_MeasureTemp
  6180 ;;		_DEMO_UDP_SetClaimIP
  6181 ;;		_UDP_GetDestIP
  6182 ;;		_UDP_GetDestPort
  6183 ;;		_UDP_Read8
  6184 ;;		_UDP_ReadBlock
  6185 ;;		_UDP_Send
  6186 ;;		_UDP_Start
  6187 ;;		_UDP_Write16
  6188 ;;		_UDP_Write8
  6189 ;;		_UDP_WriteBlock
  6190 ;;		_lcd_clear
  6191 ;;		_lcd_goto1
  6192 ;;		_lcd_goto2
  6193 ;;		_lcd_puts
  6194 ;;		_memset
  6195 ;; This function is called by:
  6196 ;;		_UDP_Receive
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text23
  6201  0030B8                     __ptext23:
  6202                           	opt stack 0
  6203  0030B8                     _DEMO_UDP_Recv:
  6204                           	opt stack 16
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;udp_demo.c: 121: UDP_ReadBlock(&data,sizeof(data));
  6208                           
  6209                           ; BSR set to: 0
  6210                           
  6211                           ;incstack = 0
  6212  0030B8  0EC8               	movlw	low _data
  6213  0030BA  6E0C               	movwf	UDP_ReadBlock@data,c
  6214  0030BC  0E01               	movlw	high _data
  6215  0030BE  EC15  F031         	call	PL462	;call to abstracted procedure
  6216  0030C2  ECAB  F032         	call	_UDP_ReadBlock	;wreg free
  6217                           
  6218                           ; BSR set to: 1
  6219                           ;udp_demo.c: 122: if(data.command== 'C')
  6220  0030C6  0E43               	movlw	67
  6221  0030C8  19C8               	xorwf	_data& (0+255),w,b
  6222  0030CA  E101 D188          	bz	l9502
  6223  0030CE  0012               	return	
  6224  0030D0                     l9318:
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;udp_demo.c: 127: if(!DEMO_UDP_ClaimIPCheck())
  6228  0030D0  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6229  0030D4  B0D8               	btfsc	status,0,c
  6230  0030D6  0012               	return	
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;udp_demo.c: 128: {
  6234                           ;udp_demo.c: 129: DEMO_UDP_SetClaimIP(1);
  6235  0030D8  0E01               	movlw	1
  6236  0030DA  EC21  F033         	call	_DEMO_UDP_SetClaimIP
  6237                           
  6238                           ;udp_demo.c: 130: destPort = UDP_GetDestPort();
  6239  0030DE  EC1C  F033         	call	_UDP_GetDestPort	;wreg free
  6240  0030E2  D9D7               	call	PL386	;call to abstracted procedure
  6241                           
  6242                           ;udp_demo.c: 131: dest_ip = UDP_GetDestIP();
  6243  0030E4  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6244  0030E8  C002  F0C2         	movff	?_UDP_GetDestIP,DEMO_UDP_Recv@dest_ip
  6245  0030EC  C003  F0C3         	movff	?_UDP_GetDestIP+1,DEMO_UDP_Recv@dest_ip+1
  6246  0030F0  C004  F0C4         	movff	?_UDP_GetDestIP+2,DEMO_UDP_Recv@dest_ip+2
  6247  0030F4  C005  F0C5         	movff	?_UDP_GetDestIP+3,DEMO_UDP_Recv@dest_ip+3
  6248                           
  6249                           ;udp_demo.c: 132: claim_dest_ip = dest_ip;
  6250  0030F8  C0C2  F18A         	movff	DEMO_UDP_Recv@dest_ip,_claim_dest_ip
  6251  0030FC  C0C3  F18B         	movff	DEMO_UDP_Recv@dest_ip+1,_claim_dest_ip+1
  6252  003100  C0C4  F18C         	movff	DEMO_UDP_Recv@dest_ip+2,_claim_dest_ip+2
  6253  003104  C0C5  F18D         	movff	DEMO_UDP_Recv@dest_ip+3,_claim_dest_ip+3
  6254                           
  6255                           ;udp_demo.c: 134: started = UDP_Start(claim_dest_ip,65533,destPort);
  6256  003108  D99E               	call	PL172	;call to abstracted procedure
  6257  00310A  ECFA  F02D         	call	_UDP_Start	;wreg free
  6258  00310E  0100               	movlb	0	; () banked
  6259  003110  6FC1               	movwf	DEMO_UDP_Recv@started& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;udp_demo.c: 135: if(started==SUCCESS)
  6263  003112  05C1               	decf	DEMO_UDP_Recv@started& (0+255),w,b
  6264  003114  E108               	bnz	l9338
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;udp_demo.c: 136: {
  6268                           ;udp_demo.c: 137: UDP_Write8(message);
  6269  003116  0E01               	movlw	1
  6270  003118                     i1L__ptext84:
  6271                           	opt stack 0
  6272  003118                     i1L_UDP_Write8:
  6273                           	opt stack 20
  6274                           
  6275                           ;incstack = 0
  6276                           ;UDP_Write8@data stored from wreg
  6277  003118  6E04               	movwf	UDP_Write8@data,c
  6278  00311A                     i1Ll8720:
  6279                           	opt stack 20
  6280                           
  6281                           ;udpv4.c: 184: ETH_Write8(data);
  6282  00311A  5004               	movf	UDP_Write8@data,w,c
  6283  00311C  EC4C  F032         	call	_ETH_Write8
  6284  003120                     i1Ll1576:
  6285                           	opt stack 16
  6286                           
  6287                           ;udp_demo.c: 138: UDP_Send();
  6288  003120  ECE3  F02B         	call	_UDP_Send	;wreg free
  6289                           
  6290                           ;udp_demo.c: 139: }
  6291  003124  D003               	goto	l9340
  6292  003126                     l9338:
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;udp_demo.c: 140: else
  6296                           ;udp_demo.c: 141: {
  6297                           ;udp_demo.c: 142: DEMO_UDP_SetClaimIP(0);
  6298  003126  0E00               	movlw	0
  6299  003128  EC21  F033         	call	_DEMO_UDP_SetClaimIP
  6300  00312C                     l9340:
  6301                           
  6302                           ;udp_demo.c: 143: }
  6303                           ;udp_demo.c: 144: pot_init = 1;
  6304  00312C  0E01               	movlw	1
  6305  00312E  0101               	movlb	1	; () banked
  6306  003130  6FB3               	movwf	_pot_init& (0+255),b
  6307  003132  0C01               	retlw	1
  6308  003134                     l9342:
  6309                           
  6310                           ; BSR set to: 1
  6311                           ;udp_demo.c: 149: destPort=UDP_GetDestPort();
  6312  003134  EC1C  F033         	call	_UDP_GetDestPort	;wreg free
  6313  003138  D9AC               	call	PL386	;call to abstracted procedure
  6314  00313A  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6315                           
  6316                           ;udp_demo.c: 151: local_ip = ipv4Address;
  6317  00313E  C192  F0B9         	movff	_ipv4Address,DEMO_UDP_Recv@local_ip
  6318  003142  C193  F0BA         	movff	_ipv4Address+1,DEMO_UDP_Recv@local_ip+1
  6319  003146  C194  F0BB         	movff	_ipv4Address+2,DEMO_UDP_Recv@local_ip+2
  6320  00314A  C195  F0BC         	movff	_ipv4Address+3,DEMO_UDP_Recv@local_ip+3
  6321                           
  6322                           ;udp_demo.c: 152: if(DEMO_UDP_ClaimIPCheck())
  6323  00314E  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6324  003152  E303               	bnc	l9350
  6325                           
  6326                           ; BSR set to: 1
  6327                           ;udp_demo.c: 153: {
  6328                           ;udp_demo.c: 154: DEMO_UDP_SetClaimIP(0);
  6329  003154  0E00               	movlw	0
  6330  003156  EC21  F033         	call	_DEMO_UDP_SetClaimIP
  6331  00315A                     l9350:
  6332                           
  6333                           ;udp_demo.c: 155: }
  6334                           ;udp_demo.c: 157: started = UDP_Start(claim_dest_ip,65533,destPort);
  6335  00315A  D975               	call	PL172	;call to abstracted procedure
  6336  00315C  ECFA  F02D         	call	_UDP_Start	;wreg free
  6337  003160  0100               	movlb	0	; () banked
  6338  003162  6FC1               	movwf	DEMO_UDP_Recv@started& (0+255),b
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;udp_demo.c: 158: if(started==SUCCESS)
  6342  003164  05C1               	decf	DEMO_UDP_Recv@started& (0+255),w,b
  6343  003166  E110               	bnz	l9358
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;udp_demo.c: 159: {
  6347                           ;udp_demo.c: 160: UDP_WriteBlock(&local_ip, sizeof(local_ip));
  6348  003168  6A0A               	clrf	UDP_WriteBlock@length+1,c
  6349  00316A  0E04               	movlw	4
  6350  00316C  6E09               	movwf	UDP_WriteBlock@length,c
  6351  00316E  0EB9               	movlw	DEMO_UDP_Recv@local_ip& (0+255)
  6352  003170                     i2L__ptext37:
  6353                           	opt stack 0
  6354  003170                     i2L_UDP_WriteBlock:
  6355                           	opt stack 20
  6356                           
  6357                           ;incstack = 0
  6358                           ;UDP_WriteBlock@data stored from wreg
  6359  003170  6E0B               	movwf	UDP_WriteBlock@data,c
  6360  003172                     i2Ll8724:
  6361                           	opt stack 20
  6362                           
  6363                           ;udpv4.c: 200: ETH_WriteBlock(data,length);
  6364  003172  C00B  F003         	movff	UDP_WriteBlock@data,ETH_WriteBlock@data
  6365  003176  6A04               	clrf	ETH_WriteBlock@data+1,c
  6366  003178  C009  F005         	movff	UDP_WriteBlock@length,ETH_WriteBlock@len
  6367  00317C  C00A  F006         	movff	UDP_WriteBlock@length+1,ETH_WriteBlock@len+1
  6368  003180  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
  6369  003184                     i2Ll1585:
  6370                           	opt stack 16
  6371                           
  6372                           ;udp_demo.c: 161: UDP_Send();
  6373  003184  ECE3  F02B         	call	_UDP_Send	;wreg free
  6374  003188                     l9358:
  6375                           
  6376                           ;udp_demo.c: 162: }
  6377                           ;udp_demo.c: 163: PORTJ = 0;
  6378  003188  6A88               	clrf	3976,c	;volatile
  6379                           
  6380                           ;udp_demo.c: 164: pot_init = 0;
  6381  00318A  0101               	movlb	1	; () banked
  6382  00318C  6BB3               	clrf	_pot_init& (0+255),b
  6383                           
  6384                           ; BSR set to: 1
  6385                           ;udp_demo.c: 165: lcd_clear();
  6386  00318E  EFA3  F031         	goto	_lcd_clear	;wreg free
  6387  003192                     l9364:
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;udp_demo.c: 169: if(DEMO_UDP_ClaimIPCheck())
  6391  003192  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6392  003196  A0D8               	btfss	status,0,c
  6393  003198  0012               	return	
  6394                           
  6395                           ; BSR set to: 1
  6396                           ;udp_demo.c: 170: {
  6397                           ;udp_demo.c: 171: dest_ip = UDP_GetDestIP();
  6398  00319A  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6399                           
  6400                           ;udp_demo.c: 172: if(claim_dest_ip == dest_ip)
  6401  00319E  D946               	call	PL138	;call to abstracted procedure
  6402  0031A0  E106               	bnz	u14011
  6403  0031A2  D967               	call	PL216	;call to abstracted procedure
  6404  0031A4  E104               	bnz	u14011
  6405  0031A6  D96A               	call	PL218	;call to abstracted procedure
  6406  0031A8  E102               	bnz	u14011
  6407  0031AA  D95E               	call	PL214	;call to abstracted procedure
  6408  0031AC  A4D8               	btfss	status,2,c
  6409  0031AE                     u14011:
  6410  0031AE  0012               	return	
  6411                           
  6412                           ; BSR set to: 1
  6413                           ;udp_demo.c: 173: {
  6414                           ;udp_demo.c: 174: if(PORTJbits.RJ0 == 0)
  6415  0031B0  B088               	btfsc	3976,0,c	;volatile
  6416  0031B2  D002               	goto	l1759
  6417                           
  6418                           ; BSR set to: 1
  6419                           ;udp_demo.c: 175: {
  6420                           ;udp_demo.c: 176: PORTJbits.RJ0=1;
  6421  0031B4  8088               	bsf	3976,0,c	;volatile
  6422                           
  6423                           ;udp_demo.c: 177: }
  6424  0031B6  0012               	return	
  6425  0031B8                     l1759:
  6426                           
  6427                           ; BSR set to: 1
  6428                           ;udp_demo.c: 178: else
  6429                           ;udp_demo.c: 179: {
  6430                           ;udp_demo.c: 180: PORTJbits.RJ0=0;
  6431  0031B8  9088               	bcf	3976,0,c	;volatile
  6432  0031BA  0012               	return	
  6433  0031BC                     l9374:
  6434                           
  6435                           ; BSR set to: 1
  6436                           ;udp_demo.c: 189: if(DEMO_UDP_ClaimIPCheck())
  6437  0031BC  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6438  0031C0  A0D8               	btfss	status,0,c
  6439  0031C2  0012               	return	
  6440                           
  6441                           ; BSR set to: 1
  6442                           ;udp_demo.c: 190: {
  6443                           ;udp_demo.c: 191: dest_ip = UDP_GetDestIP();
  6444  0031C4  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6445                           
  6446                           ;udp_demo.c: 192: if(claim_dest_ip == dest_ip)
  6447  0031C8  D931               	call	PL138	;call to abstracted procedure
  6448  0031CA  E106               	bnz	u14041
  6449  0031CC  D952               	call	PL216	;call to abstracted procedure
  6450  0031CE  E104               	bnz	u14041
  6451  0031D0  D955               	call	PL218	;call to abstracted procedure
  6452  0031D2  E102               	bnz	u14041
  6453  0031D4  D949               	call	PL214	;call to abstracted procedure
  6454  0031D6  A4D8               	btfss	status,2,c
  6455  0031D8                     u14041:
  6456  0031D8  0012               	return	
  6457                           
  6458                           ; BSR set to: 1
  6459                           ;udp_demo.c: 193: {
  6460                           ;udp_demo.c: 194: if(PORTJbits.RJ1 == 0)
  6461  0031DA  B288               	btfsc	3976,1,c	;volatile
  6462  0031DC  D002               	goto	l1764
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;udp_demo.c: 195: {
  6466                           ;udp_demo.c: 196: PORTJbits.RJ1=1;
  6467  0031DE  8288               	bsf	3976,1,c	;volatile
  6468                           
  6469                           ;udp_demo.c: 197: }
  6470  0031E0  0012               	return	
  6471  0031E2                     l1764:
  6472                           
  6473                           ; BSR set to: 1
  6474                           ;udp_demo.c: 198: else
  6475                           ;udp_demo.c: 199: {
  6476                           ;udp_demo.c: 200: PORTJbits.RJ1=0;
  6477  0031E2  9288               	bcf	3976,1,c	;volatile
  6478  0031E4  0012               	return	
  6479  0031E6                     l9384:
  6480                           
  6481                           ; BSR set to: 1
  6482                           ;udp_demo.c: 209: if(DEMO_UDP_ClaimIPCheck())
  6483  0031E6  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6484  0031EA  A0D8               	btfss	status,0,c
  6485  0031EC  0012               	return	
  6486                           
  6487                           ; BSR set to: 1
  6488                           ;udp_demo.c: 210: {
  6489                           ;udp_demo.c: 211: dest_ip = UDP_GetDestIP();
  6490  0031EE  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6491                           
  6492                           ;udp_demo.c: 212: if(claim_dest_ip == dest_ip)
  6493  0031F2  D91C               	call	PL138	;call to abstracted procedure
  6494  0031F4  E106               	bnz	u14071
  6495  0031F6  D93D               	call	PL216	;call to abstracted procedure
  6496  0031F8  E104               	bnz	u14071
  6497  0031FA  D940               	call	PL218	;call to abstracted procedure
  6498  0031FC  E102               	bnz	u14071
  6499  0031FE  D934               	call	PL214	;call to abstracted procedure
  6500  003200  A4D8               	btfss	status,2,c
  6501  003202                     u14071:
  6502  003202  0012               	return	
  6503                           
  6504                           ; BSR set to: 1
  6505                           ;udp_demo.c: 213: {
  6506                           ;udp_demo.c: 214: if(PORTJbits.RJ2 == 0)
  6507  003204  B488               	btfsc	3976,2,c	;volatile
  6508  003206  D002               	goto	l1769
  6509                           
  6510                           ; BSR set to: 1
  6511                           ;udp_demo.c: 215: {
  6512                           ;udp_demo.c: 216: PORTJbits.RJ2=1;
  6513  003208  8488               	bsf	3976,2,c	;volatile
  6514                           
  6515                           ;udp_demo.c: 217: }
  6516  00320A  0012               	return	
  6517  00320C                     l1769:
  6518                           
  6519                           ; BSR set to: 1
  6520                           ;udp_demo.c: 218: else
  6521                           ;udp_demo.c: 219: {
  6522                           ;udp_demo.c: 220: PORTJbits.RJ2=0;
  6523  00320C  9488               	bcf	3976,2,c	;volatile
  6524  00320E  0012               	return	
  6525  003210                     l9394:
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;udp_demo.c: 229: if(DEMO_UDP_ClaimIPCheck())
  6529  003210  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6530  003214  A0D8               	btfss	status,0,c
  6531  003216  0012               	return	
  6532                           
  6533                           ; BSR set to: 1
  6534                           ;udp_demo.c: 230: {
  6535                           ;udp_demo.c: 231: dest_ip = UDP_GetDestIP();
  6536  003218  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6537                           
  6538                           ;udp_demo.c: 232: if(claim_dest_ip == dest_ip)
  6539  00321C  D907               	call	PL138	;call to abstracted procedure
  6540  00321E  E106               	bnz	u14101
  6541  003220  D928               	call	PL216	;call to abstracted procedure
  6542  003222  E104               	bnz	u14101
  6543  003224  D92B               	call	PL218	;call to abstracted procedure
  6544  003226  E102               	bnz	u14101
  6545  003228  D91F               	call	PL214	;call to abstracted procedure
  6546  00322A  A4D8               	btfss	status,2,c
  6547  00322C                     u14101:
  6548  00322C  0012               	return	
  6549                           
  6550                           ; BSR set to: 1
  6551                           ;udp_demo.c: 233: {
  6552                           ;udp_demo.c: 234: if(PORTJbits.RJ3 == 0)
  6553  00322E  B688               	btfsc	3976,3,c	;volatile
  6554  003230  D002               	goto	l1774
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;udp_demo.c: 235: {
  6558                           ;udp_demo.c: 236: PORTJbits.RJ3=1;
  6559  003232  8688               	bsf	3976,3,c	;volatile
  6560                           
  6561                           ;udp_demo.c: 237: }
  6562  003234  0012               	return	
  6563  003236                     l1774:
  6564                           
  6565                           ; BSR set to: 1
  6566                           ;udp_demo.c: 238: else
  6567                           ;udp_demo.c: 239: {
  6568                           ;udp_demo.c: 240: PORTJbits.RJ3=0;
  6569  003236  9688               	bcf	3976,3,c	;volatile
  6570  003238  0012               	return	
  6571  00323A                     l9404:
  6572                           
  6573                           ; BSR set to: 1
  6574                           ;udp_demo.c: 249: if(DEMO_UDP_ClaimIPCheck())
  6575  00323A  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6576  00323E  A0D8               	btfss	status,0,c
  6577  003240  0012               	return	
  6578                           
  6579                           ; BSR set to: 1
  6580                           ;udp_demo.c: 250: {
  6581                           ;udp_demo.c: 251: dest_ip = UDP_GetDestIP();
  6582  003242  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6583                           
  6584                           ;udp_demo.c: 252: if(claim_dest_ip == dest_ip)
  6585  003246  D8F2               	call	PL138	;call to abstracted procedure
  6586  003248  E106               	bnz	u14131
  6587  00324A  D913               	call	PL216	;call to abstracted procedure
  6588  00324C  E104               	bnz	u14131
  6589  00324E  D916               	call	PL218	;call to abstracted procedure
  6590  003250  E102               	bnz	u14131
  6591  003252  D90A               	call	PL214	;call to abstracted procedure
  6592  003254  A4D8               	btfss	status,2,c
  6593  003256                     u14131:
  6594  003256  0012               	return	
  6595                           
  6596                           ; BSR set to: 1
  6597                           ;udp_demo.c: 253: {
  6598                           ;udp_demo.c: 254: if(PORTJbits.RJ4 == 0)
  6599  003258  B888               	btfsc	3976,4,c	;volatile
  6600  00325A  D002               	goto	l1779
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;udp_demo.c: 255: {
  6604                           ;udp_demo.c: 256: PORTJbits.RJ4=1;
  6605  00325C  8888               	bsf	3976,4,c	;volatile
  6606                           
  6607                           ;udp_demo.c: 257: }
  6608  00325E  0012               	return	
  6609  003260                     l1779:
  6610                           
  6611                           ; BSR set to: 1
  6612                           ;udp_demo.c: 258: else
  6613                           ;udp_demo.c: 259: {
  6614                           ;udp_demo.c: 260: PORTJbits.RJ4=0;
  6615  003260  9888               	bcf	3976,4,c	;volatile
  6616  003262  0012               	return	
  6617  003264                     l9414:
  6618                           
  6619                           ; BSR set to: 1
  6620                           ;udp_demo.c: 269: if(DEMO_UDP_ClaimIPCheck())
  6621  003264  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6622  003268  A0D8               	btfss	status,0,c
  6623  00326A  0012               	return	
  6624                           
  6625                           ; BSR set to: 1
  6626                           ;udp_demo.c: 270: {
  6627                           ;udp_demo.c: 271: dest_ip = UDP_GetDestIP();
  6628  00326C  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6629                           
  6630                           ;udp_demo.c: 272: if(claim_dest_ip == dest_ip)
  6631  003270  D8DD               	call	PL138	;call to abstracted procedure
  6632  003272  E106               	bnz	u14161
  6633  003274  D8FE               	call	PL216	;call to abstracted procedure
  6634  003276  E104               	bnz	u14161
  6635  003278  D901               	call	PL218	;call to abstracted procedure
  6636  00327A  E102               	bnz	u14161
  6637  00327C  D8F5               	call	PL214	;call to abstracted procedure
  6638  00327E  A4D8               	btfss	status,2,c
  6639  003280                     u14161:
  6640  003280  0012               	return	
  6641                           
  6642                           ; BSR set to: 1
  6643                           ;udp_demo.c: 273: {
  6644                           ;udp_demo.c: 274: if(PORTJbits.RJ5 == 0)
  6645  003282  BA88               	btfsc	3976,5,c	;volatile
  6646  003284  D002               	goto	l1784
  6647                           
  6648                           ; BSR set to: 1
  6649                           ;udp_demo.c: 275: {
  6650                           ;udp_demo.c: 276: PORTJbits.RJ5=1;
  6651  003286  8A88               	bsf	3976,5,c	;volatile
  6652                           
  6653                           ;udp_demo.c: 277: }
  6654  003288  0012               	return	
  6655  00328A                     l1784:
  6656                           
  6657                           ; BSR set to: 1
  6658                           ;udp_demo.c: 278: else
  6659                           ;udp_demo.c: 279: {
  6660                           ;udp_demo.c: 280: PORTJbits.RJ5=0;
  6661  00328A  9A88               	bcf	3976,5,c	;volatile
  6662  00328C  0012               	return	
  6663  00328E                     l9424:
  6664                           
  6665                           ; BSR set to: 1
  6666                           ;udp_demo.c: 289: if(DEMO_UDP_ClaimIPCheck())
  6667  00328E  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6668  003292  A0D8               	btfss	status,0,c
  6669  003294  0012               	return	
  6670                           
  6671                           ; BSR set to: 1
  6672                           ;udp_demo.c: 290: {
  6673                           ;udp_demo.c: 291: dest_ip = UDP_GetDestIP();
  6674  003296  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6675                           
  6676                           ;udp_demo.c: 292: if(claim_dest_ip == dest_ip)
  6677  00329A  D8C8               	call	PL138	;call to abstracted procedure
  6678  00329C  E106               	bnz	u14191
  6679  00329E  D8E9               	call	PL216	;call to abstracted procedure
  6680  0032A0  E104               	bnz	u14191
  6681  0032A2  D8EC               	call	PL218	;call to abstracted procedure
  6682  0032A4  E102               	bnz	u14191
  6683  0032A6  D8E0               	call	PL214	;call to abstracted procedure
  6684  0032A8  A4D8               	btfss	status,2,c
  6685  0032AA                     u14191:
  6686  0032AA  0012               	return	
  6687                           
  6688                           ; BSR set to: 1
  6689                           ;udp_demo.c: 293: {
  6690                           ;udp_demo.c: 294: if(PORTJbits.RJ6 == 0)
  6691  0032AC  BC88               	btfsc	3976,6,c	;volatile
  6692  0032AE  D002               	goto	l1789
  6693                           
  6694                           ; BSR set to: 1
  6695                           ;udp_demo.c: 295: {
  6696                           ;udp_demo.c: 296: PORTJbits.RJ6=1;
  6697  0032B0  8C88               	bsf	3976,6,c	;volatile
  6698                           
  6699                           ;udp_demo.c: 297: }
  6700  0032B2  0012               	return	
  6701  0032B4                     l1789:
  6702                           
  6703                           ; BSR set to: 1
  6704                           ;udp_demo.c: 298: else
  6705                           ;udp_demo.c: 299: {
  6706                           ;udp_demo.c: 300: PORTJbits.RJ6=0;
  6707  0032B4  9C88               	bcf	3976,6,c	;volatile
  6708  0032B6  0012               	return	
  6709  0032B8                     l9434:
  6710                           
  6711                           ; BSR set to: 1
  6712                           ;udp_demo.c: 309: if(DEMO_UDP_ClaimIPCheck())
  6713  0032B8  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6714  0032BC  A0D8               	btfss	status,0,c
  6715  0032BE  0012               	return	
  6716                           
  6717                           ; BSR set to: 1
  6718                           ;udp_demo.c: 310: {
  6719                           ;udp_demo.c: 311: dest_ip = UDP_GetDestIP();
  6720  0032C0  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6721                           
  6722                           ;udp_demo.c: 312: if(claim_dest_ip == dest_ip)
  6723  0032C4  D8B3               	call	PL138	;call to abstracted procedure
  6724  0032C6  E106               	bnz	u14221
  6725  0032C8  D8D4               	call	PL216	;call to abstracted procedure
  6726  0032CA  E104               	bnz	u14221
  6727  0032CC  D8D7               	call	PL218	;call to abstracted procedure
  6728  0032CE  E102               	bnz	u14221
  6729  0032D0  D8CB               	call	PL214	;call to abstracted procedure
  6730  0032D2  A4D8               	btfss	status,2,c
  6731  0032D4                     u14221:
  6732  0032D4  0012               	return	
  6733                           
  6734                           ; BSR set to: 1
  6735                           ;udp_demo.c: 313: {
  6736                           ;udp_demo.c: 314: if(PORTJbits.RJ7 == 0)
  6737  0032D6  BE88               	btfsc	3976,7,c	;volatile
  6738  0032D8  D002               	goto	l1794
  6739                           
  6740                           ; BSR set to: 1
  6741                           ;udp_demo.c: 315: {
  6742                           ;udp_demo.c: 316: PORTJbits.RJ7=1;
  6743  0032DA  8E88               	bsf	3976,7,c	;volatile
  6744                           
  6745                           ;udp_demo.c: 317: }
  6746  0032DC  0012               	return	
  6747  0032DE                     l1794:
  6748                           
  6749                           ; BSR set to: 1
  6750                           ;udp_demo.c: 318: else
  6751                           ;udp_demo.c: 319: {
  6752                           ;udp_demo.c: 320: PORTJbits.RJ7=0;
  6753  0032DE  9E88               	bcf	3976,7,c	;volatile
  6754  0032E0  0012               	return	
  6755  0032E2                     l9444:
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;udp_demo.c: 327: if(DEMO_UDP_ClaimIPCheck())
  6759  0032E2  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6760  0032E6  A0D8               	btfss	status,0,c
  6761  0032E8  0012               	return	
  6762                           
  6763                           ; BSR set to: 1
  6764                           ;udp_demo.c: 328: {
  6765                           ;udp_demo.c: 329: lcd_clear();
  6766  0032EA  ECA3  F031         	call	_lcd_clear	;wreg free
  6767                           
  6768                           ;udp_demo.c: 330: memset(str,0,sizeof(str));
  6769  0032EE  0E77               	movlw	low DEMO_UDP_Recv@str
  6770  0032F0  D8CA               	call	PL324	;call to abstracted procedure
  6771  0032F2  0E20               	movlw	32
  6772  0032F4  6E06               	movwf	memset@n,c
  6773  0032F6  EC1A  F031         	call	_memset	;wreg free
  6774                           
  6775                           ;udp_demo.c: 331: memset(str1,0,sizeof(str1));
  6776  0032FA  0E97               	movlw	low DEMO_UDP_Recv@str1
  6777  0032FC  D8C4               	call	PL324	;call to abstracted procedure
  6778  0032FE  0E10               	movlw	16
  6779  003300  6E06               	movwf	memset@n,c
  6780  003302  EC1A  F031         	call	_memset	;wreg free
  6781                           
  6782                           ;udp_demo.c: 332: memset(str2,0,sizeof(str2));
  6783  003306  0EA7               	movlw	low DEMO_UDP_Recv@str2
  6784  003308  D8BE               	call	PL324	;call to abstracted procedure
  6785  00330A  0E10               	movlw	16
  6786  00330C  6E06               	movwf	memset@n,c
  6787  00330E  EC1A  F031         	call	_memset	;wreg free
  6788                           
  6789                           ;udp_demo.c: 333: dest_ip = UDP_GetDestIP();
  6790  003312  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6791                           
  6792                           ;udp_demo.c: 334: if(claim_dest_ip == dest_ip)
  6793  003316  D88A               	call	PL138	;call to abstracted procedure
  6794  003318  E106               	bnz	u14251
  6795  00331A  D8AB               	call	PL216	;call to abstracted procedure
  6796  00331C  E104               	bnz	u14251
  6797  00331E  D8AE               	call	PL218	;call to abstracted procedure
  6798  003320  E102               	bnz	u14251
  6799  003322  D8A2               	call	PL214	;call to abstracted procedure
  6800  003324  A4D8               	btfss	status,2,c
  6801  003326                     u14251:
  6802  003326  0012               	return	
  6803  003328                     i3L__ptext39:
  6804                           	opt stack 0
  6805  003328                     i3L_UDP_Read8:
  6806                           	opt stack 0
  6807  003328                     i3Ll8716:
  6808                           	opt stack 20
  6809                           
  6810                           ; BSR set to: 1
  6811                           ;udpv4.c: 168: return (ETH_Read8());
  6812  003328  EC91  F030         	call	_ETH_Read8	;wreg free
  6813  00332C                     i3Ll1567:
  6814                           	opt stack 16
  6815  00332C  0100               	movlb	0	; () banked
  6816  00332E  6FBE               	movwf	DEMO_UDP_Recv@str_len& (0+255),b
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;udp_demo.c: 337: if(str_len > 16)
  6820  003330  0E10               	movlw	16
  6821  003332  65BE               	cpfsgt	DEMO_UDP_Recv@str_len& (0+255),b
  6822  003334  D01C               	goto	l9476
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;udp_demo.c: 338: {
  6826                           ;udp_demo.c: 339: UDP_ReadBlock(&str1,16);
  6827  003336  0E97               	movlw	low DEMO_UDP_Recv@str1
  6828  003338  6E0C               	movwf	UDP_ReadBlock@data,c
  6829  00333A  6A0D               	clrf	UDP_ReadBlock@data+1,c
  6830  00333C  6A0F               	clrf	UDP_ReadBlock@length+1,c
  6831  00333E  0E10               	movlw	16
  6832  003340  6E0E               	movwf	UDP_ReadBlock@length,c
  6833  003342  ECAB  F032         	call	_UDP_ReadBlock	;wreg free
  6834                           
  6835                           ; BSR set to: 1
  6836                           ;udp_demo.c: 340: lcd_goto1(0);
  6837  003346  0E00               	movlw	0
  6838  003348  ECE5  F032         	call	_lcd_goto1
  6839                           
  6840                           ;udp_demo.c: 341: lcd_puts(str1);
  6841  00334C  0E97               	movlw	low DEMO_UDP_Recv@str1
  6842  00334E  6E04               	movwf	lcd_puts@s,c
  6843  003350  6A05               	clrf	lcd_puts@s+1,c
  6844  003352  EC06  F032         	call	_lcd_puts	;wreg free
  6845                           
  6846                           ;udp_demo.c: 342: str_len-= 16;
  6847  003356  0E10               	movlw	16
  6848  003358  0100               	movlb	0	; () banked
  6849  00335A  5FBE               	subwf	DEMO_UDP_Recv@str_len& (0+255),f,b
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;udp_demo.c: 343: UDP_ReadBlock(&str2,str_len);
  6853  00335C  0EA7               	movlw	low DEMO_UDP_Recv@str2
  6854  00335E  D89E               	call	PL410	;call to abstracted procedure
  6855  003360  ECAB  F032         	call	_UDP_ReadBlock	;wreg free
  6856                           
  6857                           ; BSR set to: 1
  6858                           ;udp_demo.c: 344: lcd_goto2(0);
  6859  003364  0E00               	movlw	0
  6860  003366  ECDE  F032         	call	_lcd_goto2
  6861                           
  6862                           ;udp_demo.c: 345: lcd_puts(str2);
  6863  00336A  0EA7               	movlw	low DEMO_UDP_Recv@str2
  6864  00336C  D008               	goto	L2
  6865  00336E                     l9476:
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;udp_demo.c: 347: else
  6869                           ;udp_demo.c: 348: {
  6870                           ;udp_demo.c: 349: UDP_ReadBlock(&str,str_len);
  6871  00336E  0E77               	movlw	low DEMO_UDP_Recv@str
  6872  003370  D895               	call	PL410	;call to abstracted procedure
  6873  003372  ECAB  F032         	call	_UDP_ReadBlock	;wreg free
  6874                           
  6875                           ; BSR set to: 1
  6876                           ;udp_demo.c: 350: lcd_goto1(0);
  6877  003376  0E00               	movlw	0
  6878  003378  ECE5  F032         	call	_lcd_goto1
  6879                           
  6880                           ;udp_demo.c: 351: lcd_puts(str);
  6881  00337C  0E77               	movlw	low DEMO_UDP_Recv@str
  6882  00337E                     L2:
  6883  00337E  6E04               	movwf	lcd_puts@s,c
  6884  003380  6A05               	clrf	lcd_puts@s+1,c
  6885  003382  EF0C  F032         	goto	l8544	;wreg free
  6886  003386                     l9482:
  6887                           
  6888                           ; BSR set to: 1
  6889                           ;udp_demo.c: 357: if(DEMO_UDP_ClaimIPCheck())
  6890  003386  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
  6891  00338A  A0D8               	btfss	status,0,c
  6892  00338C  0012               	return	
  6893                           
  6894                           ; BSR set to: 1
  6895                           ;udp_demo.c: 358: {
  6896                           ;udp_demo.c: 359: dest_ip = UDP_GetDestIP();
  6897  00338E  ECB5  F032         	call	_UDP_GetDestIP	;wreg free
  6898                           
  6899                           ;udp_demo.c: 360: if(claim_dest_ip == dest_ip)
  6900  003392  D84C               	call	PL138	;call to abstracted procedure
  6901  003394  E14A               	bnz	l1805
  6902  003396  D86D               	call	PL216	;call to abstracted procedure
  6903  003398  E148               	bnz	l1805
  6904  00339A  D870               	call	PL218	;call to abstracted procedure
  6905  00339C  E146               	bnz	l1805
  6906  00339E  D864               	call	PL214	;call to abstracted procedure
  6907  0033A0  A4D8               	btfss	status,2,c
  6908  0033A2  0012               	return	
  6909                           
  6910                           ; BSR set to: 1
  6911                           ;udp_demo.c: 361: {
  6912                           ;udp_demo.c: 362: destPort=UDP_GetDestPort();
  6913  0033A4  EC1C  F033         	call	_UDP_GetDestPort	;wreg free
  6914  0033A8  D874               	call	PL386	;call to abstracted procedure
  6915                           
  6916                           ;udp_demo.c: 363: temperature = DEMO_UDP_MeasureTemp();
  6917  0033AA  EC66  F032         	call	_DEMO_UDP_MeasureTemp	;wreg free
  6918  0033AE  C006  F0B7         	movff	?_DEMO_UDP_MeasureTemp,DEMO_UDP_Recv@temperature
  6919  0033B2  C007  F0B8         	movff	?_DEMO_UDP_MeasureTemp+1,DEMO_UDP_Recv@temperature+1
  6920                           
  6921                           ;udp_demo.c: 364: started = UDP_Start(claim_dest_ip,65533,destPort);
  6922  0033B6  D847               	call	PL172	;call to abstracted procedure
  6923  0033B8  ECFA  F02D         	call	_UDP_Start	;wreg free
  6924  0033BC  0100               	movlb	0	; () banked
  6925  0033BE  6FC1               	movwf	DEMO_UDP_Recv@started& (0+255),b
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;udp_demo.c: 365: if(started==SUCCESS)
  6929  0033C0  05C1               	decf	DEMO_UDP_Recv@started& (0+255),w,b
  6930  0033C2  A4D8               	btfss	status,2,c
  6931  0033C4  0012               	return	
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;udp_demo.c: 366: {
  6935                           ;udp_demo.c: 367: UDP_Write16(temperature);
  6936  0033C6  C0B7  F005         	movff	DEMO_UDP_Recv@temperature,UDP_Write16@data
  6937  0033CA  C0B8  F006         	movff	DEMO_UDP_Recv@temperature+1,UDP_Write16@data+1
  6938  0033CE                     i4L__ptext38:
  6939                           	opt stack 0
  6940  0033CE                     i4L_UDP_Write16:
  6941                           	opt stack 0
  6942  0033CE                     i4Ll8722:
  6943                           	opt stack 20
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;udpv4.c: 189: ETH_Write16(data);
  6947  0033CE  C005  F003         	movff	UDP_Write16@data,ETH_Write16@data
  6948  0033D2  C006  F004         	movff	UDP_Write16@data+1,ETH_Write16@data+1
  6949  0033D6  EC91  F031         	call	_ETH_Write16	;wreg free
  6950  0033DA                     i4Ll1579:
  6951                           	opt stack 0
  6952  0033DA  EFE3  F02B         	goto	_UDP_Send
  6953  0033DE                     l9502:
  6954                           
  6955                           ; BSR set to: 1
  6956  0033DE  51C9               	movf	(_data+1)& (0+255),w,b
  6957                           
  6958                           ; Switch size 1, requested type "space"
  6959                           ; Number of cases is 12, Range of values is 49 to 84
  6960                           ; switch strategies available:
  6961                           ; Name         Instructions Cycles
  6962                           ; simple_byte           37    19 (average)
  6963                           ;	Chosen strategy is simple_byte
  6964  0033E0  0A31               	xorlw	49	; case 49
  6965  0033E2  E101 D6D6          	bz	l9364
  6966  0033E6  0A03               	xorlw	3	; case 50
  6967  0033E8  E101 D6E8          	bz	l9374
  6968  0033EC  0A01               	xorlw	1	; case 51
  6969  0033EE  E101 D6FA          	bz	l9384
  6970  0033F2  0A07               	xorlw	7	; case 52
  6971  0033F4  E101 D70C          	bz	l9394
  6972  0033F8  0A01               	xorlw	1	; case 53
  6973  0033FA  E101 D71E          	bz	l9404
  6974  0033FE  0A03               	xorlw	3	; case 54
  6975  003400  E101 D730          	bz	l9414
  6976  003404  0A01               	xorlw	1	; case 55
  6977  003406  E101 D742          	bz	l9424
  6978  00340A  0A0F               	xorlw	15	; case 56
  6979  00340C  E101 D754          	bz	l9434
  6980  003410  0A7B               	xorlw	123	; case 67
  6981  003412  E101 D65D          	bz	l9318
  6982  003416  0A07               	xorlw	7	; case 68
  6983  003418  E101 D763          	bz	l9444
  6984  00341C  0A16               	xorlw	22	; case 82
  6985  00341E  E101 D689          	bz	l9342
  6986  003422  0A06               	xorlw	6	; case 84
  6987  003424  A4D8               	btfss	status,2,c
  6988  003426  0012               	return	
  6989  003428  D7AE               	goto	l9482
  6990  00342A                     l1805:
  6991  00342A  0012               	return		;funcret
  6992  00342C                     __end_of_DEMO_UDP_Recv:
  6993                           	opt stack 0
  6994  00342C                     PL138:
  6995                           	opt stack 16
  6996  00342C  C002  F0C2         	movff	?_UDP_GetDestIP,DEMO_UDP_Recv@dest_ip
  6997  003430  C003  F0C3         	movff	?_UDP_GetDestIP+1,DEMO_UDP_Recv@dest_ip+1
  6998  003434  C004  F0C4         	movff	?_UDP_GetDestIP+2,DEMO_UDP_Recv@dest_ip+2
  6999  003438  C005  F0C5         	movff	?_UDP_GetDestIP+3,DEMO_UDP_Recv@dest_ip+3
  7000  00343C  0100               	movlb	0	; () banked
  7001  00343E  51C2               	movf	DEMO_UDP_Recv@dest_ip& (0+255),w,b
  7002  003440  0101               	movlb	1	; () banked
  7003  003442  198A               	xorwf	_claim_dest_ip& (0+255),w,b
  7004  003444  0012               	return	
  7005  003446                     __end_ofPL138:
  7006                           	opt stack 0
  7007  003446                     PL172:
  7008                           	opt stack 16
  7009  003446  C18A  F067         	movff	_claim_dest_ip,UDP_Start@destIP
  7010  00344A  C18B  F068         	movff	_claim_dest_ip+1,UDP_Start@destIP+1
  7011  00344E  C18C  F069         	movff	_claim_dest_ip+2,UDP_Start@destIP+2
  7012  003452  C18D  F06A         	movff	_claim_dest_ip+3,UDP_Start@destIP+3
  7013  003456  0100               	movlb	0	; () banked
  7014  003458  696C               	setf	(UDP_Start@srcPort+1)& (0+255),b
  7015  00345A  0EFD               	movlw	253
  7016  00345C  6F6B               	movwf	UDP_Start@srcPort& (0+255),b
  7017  00345E  C0BF  F06D         	movff	DEMO_UDP_Recv@destPort,UDP_Start@dstPort
  7018  003462  C0C0  F06E         	movff	DEMO_UDP_Recv@destPort+1,UDP_Start@dstPort+1
  7019  003466  0CFD               	retlw	253
  7020  003468                     __end_ofPL172:
  7021                           	opt stack 0
  7022  003468                     PL214:
  7023                           	opt stack 16
  7024  003468  0100               	movlb	0	; () banked
  7025  00346A  51C5               	movf	(DEMO_UDP_Recv@dest_ip+3)& (0+255),w,b
  7026  00346C  0101               	movlb	1	; () banked
  7027  00346E  198D               	xorwf	(_claim_dest_ip+3)& (0+255),w,b
  7028  003470  0012               	return	
  7029  003472                     __end_ofPL214:
  7030                           	opt stack 0
  7031  003472                     PL216:
  7032                           	opt stack 16
  7033  003472  0100               	movlb	0	; () banked
  7034  003474  51C3               	movf	(DEMO_UDP_Recv@dest_ip+1)& (0+255),w,b
  7035  003476  0101               	movlb	1	; () banked
  7036  003478  198B               	xorwf	(_claim_dest_ip+1)& (0+255),w,b
  7037  00347A  0012               	return	
  7038  00347C                     __end_ofPL216:
  7039                           	opt stack 0
  7040  00347C                     PL218:
  7041                           	opt stack 16
  7042  00347C  0100               	movlb	0	; () banked
  7043  00347E  51C4               	movf	(DEMO_UDP_Recv@dest_ip+2)& (0+255),w,b
  7044  003480  0101               	movlb	1	; () banked
  7045  003482  198C               	xorwf	(_claim_dest_ip+2)& (0+255),w,b
  7046  003484  0012               	return	
  7047  003486                     __end_ofPL218:
  7048                           	opt stack 0
  7049  003486                     PL324:
  7050                           	opt stack 16
  7051  003486  6E02               	movwf	memset@p1,c
  7052  003488  6A03               	clrf	memset@p1+1,c
  7053  00348A  6A05               	clrf	memset@c+1,c
  7054  00348C  6A04               	clrf	memset@c,c
  7055  00348E  6A07               	clrf	memset@n+1,c
  7056  003490  0012               	return	
  7057  003492                     __end_ofPL324:
  7058                           	opt stack 0
  7059  003492                     PL386:
  7060                           	opt stack 16
  7061  003492  C002  F0BF         	movff	?_UDP_GetDestPort,DEMO_UDP_Recv@destPort
  7062  003496  C003  F0C0         	movff	?_UDP_GetDestPort+1,DEMO_UDP_Recv@destPort+1
  7063  00349A  0012               	return	
  7064  00349C                     __end_ofPL386:
  7065                           	opt stack 0
  7066  00349C                     PL410:
  7067                           	opt stack 16
  7068  00349C  6E0C               	movwf	UDP_ReadBlock@data,c
  7069  00349E  6A0D               	clrf	UDP_ReadBlock@data+1,c
  7070  0034A0  C0BE  F00E         	movff	DEMO_UDP_Recv@str_len,UDP_ReadBlock@length
  7071  0034A4  6A0F               	clrf	UDP_ReadBlock@length+1,c
  7072  0034A6  0012               	return	
  7073  0034A8                     __end_ofPL410:
  7074                           	opt stack 0
  7075                           tosu	equ	0xFFF
  7076                           tosh	equ	0xFFE
  7077                           tosl	equ	0xFFD
  7078                           pclath	equ	0xFFA
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           intcon2	equ	0xFF1
  7087                           indf0	equ	0xFEF
  7088                           postinc0	equ	0xFEE
  7089                           fsr0h	equ	0xFEA
  7090                           fsr0l	equ	0xFE9
  7091                           wreg	equ	0xFE8
  7092                           postinc1	equ	0xFE6
  7093                           plusw1	equ	0xFE3
  7094                           fsr1h	equ	0xFE2
  7095                           fsr1l	equ	0xFE1
  7096                           bsr	equ	0xFE0
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           plusw2	equ	0xFDB
  7101                           fsr2h	equ	0xFDA
  7102                           fsr2l	equ	0xFD9
  7103                           status	equ	0xFD8
  7104                           
  7105 ;; *************** function _DEMO_UDP_IdlePkt *****************
  7106 ;; Defined at:
  7107 ;;		line 94 in file "udp_demo.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;  length          2   88[COMRAM] int 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;		None               void
  7114 ;; Registers used:
  7115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : F/0
  7118 ;;		On exit  : F/1
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;Total ram usage:        2 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    6
  7128 ;; This function calls:
  7129 ;;		_UDP_ReadBlock
  7130 ;; This function is called by:
  7131 ;;		_UDP_Receive
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text24
  7136  006208                     __ptext24:
  7137                           	opt stack 0
  7138  006208                     _DEMO_UDP_IdlePkt:
  7139                           	opt stack 20
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;udp_demo.c: 98: UDP_ReadBlock(&idle_packet,sizeof(idle_packet));
  7143                           
  7144                           ;incstack = 0
  7145  006208  0ECA               	movlw	low _idle_packet
  7146  00620A  6E0C               	movwf	UDP_ReadBlock@data,c
  7147  00620C  0E01               	movlw	high _idle_packet
  7148  00620E  D80D               	call	PL462	;call to abstracted procedure
  7149  006210  ECAB  F032         	call	_UDP_ReadBlock	;wreg free
  7150                           
  7151                           ; BSR set to: 1
  7152                           ;udp_demo.c: 99: if(idle_packet.command== 'C')
  7153  006214  0E43               	movlw	67
  7154  006216  19CA               	xorwf	_idle_packet& (0+255),w,b
  7155  006218  E004               	bz	l9308
  7156  00621A  0012               	return	
  7157  00621C                     l9304:
  7158                           
  7159                           ; BSR set to: 1
  7160                           ;udp_demo.c: 103: idle_pkt_received =1;
  7161  00621C  0E01               	movlw	1
  7162  00621E  6FB1               	movwf	_idle_pkt_received& (0+255),b
  7163                           
  7164                           ;udp_demo.c: 104: break;
  7165  006220  0C01               	retlw	1
  7166  006222                     l9308:
  7167                           
  7168                           ; BSR set to: 1
  7169  006222  51CB               	movf	(_idle_packet+1)& (0+255),w,b
  7170                           
  7171                           ; Switch size 1, requested type "space"
  7172                           ; Number of cases is 1, Range of values is 73 to 73
  7173                           ; switch strategies available:
  7174                           ; Name         Instructions Cycles
  7175                           ; simple_byte            4     3 (average)
  7176                           ;	Chosen strategy is simple_byte
  7177  006224  0A49               	xorlw	73	; case 73
  7178  006226  E0FA               	bz	l9304
  7179                           
  7180                           ; BSR set to: 1
  7181  006228  0012               	return		;funcret
  7182  00622A                     __end_of_DEMO_UDP_IdlePkt:
  7183                           	opt stack 0
  7184  00622A                     PL462:
  7185                           	opt stack 16
  7186  00622A  6E0D               	movwf	UDP_ReadBlock@data+1,c
  7187  00622C  6A0F               	clrf	UDP_ReadBlock@length+1,c
  7188  00622E  0E02               	movlw	2
  7189  006230  6E0E               	movwf	UDP_ReadBlock@length,c
  7190  006232  0C02               	retlw	2
  7191  006234                     __end_ofPL462:
  7192                           	opt stack 0
  7193                           tosu	equ	0xFFF
  7194                           tosh	equ	0xFFE
  7195                           tosl	equ	0xFFD
  7196                           pclath	equ	0xFFA
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           prodh	equ	0xFF4
  7202                           prodl	equ	0xFF3
  7203                           intcon	equ	0xFF2
  7204                           intcon2	equ	0xFF1
  7205                           indf0	equ	0xFEF
  7206                           postinc0	equ	0xFEE
  7207                           fsr0h	equ	0xFEA
  7208                           fsr0l	equ	0xFE9
  7209                           wreg	equ	0xFE8
  7210                           postinc1	equ	0xFE6
  7211                           plusw1	equ	0xFE3
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           bsr	equ	0xFE0
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           plusw2	equ	0xFDB
  7219                           fsr2h	equ	0xFDA
  7220                           fsr2l	equ	0xFD9
  7221                           status	equ	0xFD8
  7222                           
  7223 ;; *************** function _DHCP_Handler *****************
  7224 ;; Defined at:
  7225 ;;		line 162 in file "../../TCPIP Library/source/dhcp_client.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;  length          2   88[COMRAM] int 
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  optionLength    1   50[BANK0 ] unsigned char 
  7230 ;;  option          1   37[BANK0 ] unsigned char 
  7231 ;;  ip              8   23[BANK0 ] unsigned int [4]
  7232 ;;  ethMAC          6   44[BANK0 ] struct .
  7233 ;;  ethPktMAC       6   38[BANK0 ] struct .
  7234 ;;  myip            4   51[BANK0 ] unsigned long 
  7235 ;;  v               4   31[BANK0 ] unsigned long 
  7236 ;;  v16             2   35[BANK0 ] unsigned int 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;		None               void
  7239 ;; Registers used:
  7240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : F/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Totals:         4      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;Total ram usage:       36 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:   11
  7253 ;; This function calls:
  7254 ;;		_DHCP_Request
  7255 ;;		_ETH_Dump
  7256 ;;		_ETH_GetMAC
  7257 ;;		_ETH_Read16
  7258 ;;		_ETH_Read32
  7259 ;;		_ETH_Read8
  7260 ;;		_ETH_ReadBlock
  7261 ;;		_memcmp
  7262 ;; This function is called by:
  7263 ;;		_UDP_Receive
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text25
  7268  003DE2                     __ptext25:
  7269                           	opt stack 0
  7270  003DE2                     _DHCP_Handler:
  7271                           	opt stack 15
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;dhcp_client.c: 165: uint32_t myip,v;
  7275                           ;dhcp_client.c: 166: uint16_t v16;
  7276                           ;dhcp_client.c: 167: uint16_t ip[4];
  7277                           ;dhcp_client.c: 169: mac48Address_t ethPktMAC;
  7278                           ;dhcp_client.c: 170: mac48Address_t ethMAC;
  7279                           ;dhcp_client.c: 172: ETH_GetMAC((char*)&ethMAC);
  7280                           
  7281                           ; BSR set to: 1
  7282                           ;incstack = 0
  7283  003DE2  0E8C               	movlw	low DHCP_Handler@ethMAC
  7284  003DE4  6E08               	movwf	ETH_GetMAC@macAddr,c
  7285  003DE6  6A09               	clrf	ETH_GetMAC@macAddr+1,c
  7286  003DE8  ECFC  F02C         	call	_ETH_GetMAC	;wreg free
  7287                           
  7288                           ;dhcp_client.c: 178: if(length > 240)
  7289  003DEC  BE5A               	btfsc	DHCP_Handler@length+1,7,c
  7290  003DEE  0012               	return	
  7291  003DF0  505A               	movf	DHCP_Handler@length+1,w,c
  7292  003DF2  E104               	bnz	u11920
  7293  003DF4  0EF1               	movlw	241
  7294  003DF6  5C59               	subwf	DHCP_Handler@length,w,c
  7295  003DF8  A0D8               	btfss	status,0,c
  7296  003DFA  0012               	return	
  7297  003DFC                     u11920:
  7298                           
  7299                           ;dhcp_client.c: 179: {
  7300                           ;dhcp_client.c: 180: v16 = ETH_Read16();
  7301  003DFC  EC6E  F02E         	call	_ETH_Read16	;wreg free
  7302  003E00  C003  F083         	movff	?_ETH_Read16,DHCP_Handler@v16
  7303  003E04  C004  F084         	movff	?_ETH_Read16+1,DHCP_Handler@v16+1
  7304                           
  7305                           ; BSR set to: 1
  7306                           ;dhcp_client.c: 181: if(v16 == 0x0201)
  7307  003E08  0100               	movlb	0	; () banked
  7308  003E0A  0583               	decf	DHCP_Handler@v16& (0+255),w,b
  7309  003E0C  E103               	bnz	u11931
  7310  003E0E  0E02               	movlw	2
  7311  003E10  1984               	xorwf	(DHCP_Handler@v16+1)& (0+255),w,b
  7312  003E12  A4D8               	btfss	status,2,c
  7313  003E14                     u11931:
  7314  003E14  0012               	return	
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;dhcp_client.c: 182: {
  7318                           ;dhcp_client.c: 183: ETH_Dump(2);
  7319  003E16  6A0C               	clrf	ETH_Dump@length+1,c
  7320  003E18  0E02               	movlw	2
  7321  003E1A  6E0B               	movwf	ETH_Dump@length,c
  7322  003E1C  ECDF  F02E         	call	_ETH_Dump	;wreg free
  7323                           
  7324                           ;dhcp_client.c: 184: v = ETH_Read32();
  7325  003E20  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7326  003E24  C003  F07F         	movff	?_ETH_Read32,DHCP_Handler@v
  7327  003E28  C004  F080         	movff	?_ETH_Read32+1,DHCP_Handler@v+1
  7328  003E2C  C005  F081         	movff	?_ETH_Read32+2,DHCP_Handler@v+2
  7329  003E30  C006  F082         	movff	?_ETH_Read32+3,DHCP_Handler@v+3
  7330                           
  7331                           ; BSR set to: 1
  7332                           ;dhcp_client.c: 185: if(v == xidValue)
  7333  003E34  0E50               	movlw	80
  7334  003E36  0100               	movlb	0	; () banked
  7335  003E38  197F               	xorwf	DHCP_Handler@v& (0+255),w,b
  7336  003E3A  E109               	bnz	u11941
  7337  003E3C  0E48               	movlw	72
  7338  003E3E  1980               	xorwf	(DHCP_Handler@v+1)& (0+255),w,b
  7339  003E40  E106               	bnz	u11941
  7340  003E42  0E43               	movlw	67
  7341  003E44  1981               	xorwf	(DHCP_Handler@v+2)& (0+255),w,b
  7342  003E46  E103               	bnz	u11941
  7343  003E48  0E4D               	movlw	77
  7344  003E4A  1982               	xorwf	(DHCP_Handler@v+3)& (0+255),w,b
  7345  003E4C  A4D8               	btfss	status,2,c
  7346  003E4E                     u11941:
  7347  003E4E  0012               	return	
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;dhcp_client.c: 186: {
  7351                           ;dhcp_client.c: 187: ETH_Dump(8);
  7352  003E50  D8F6               	call	PL494	;call to abstracted procedure
  7353  003E52  ECDF  F02E         	call	_ETH_Dump	;wreg free
  7354                           
  7355                           ;dhcp_client.c: 188: myip = ETH_Read32();
  7356  003E56  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7357  003E5A  C003  F093         	movff	?_ETH_Read32,DHCP_Handler@myip
  7358  003E5E  C004  F094         	movff	?_ETH_Read32+1,DHCP_Handler@myip+1
  7359  003E62  C005  F095         	movff	?_ETH_Read32+2,DHCP_Handler@myip+2
  7360  003E66  C006  F096         	movff	?_ETH_Read32+3,DHCP_Handler@myip+3
  7361                           
  7362                           ; BSR set to: 1
  7363                           ;dhcp_client.c: 189: ip[0] = myip & 0x00FF;
  7364  003E6A  0100               	movlb	0	; () banked
  7365  003E6C  5193               	movf	DHCP_Handler@myip& (0+255),w,b
  7366  003E6E  6F77               	movwf	DHCP_Handler@ip& (0+255),b
  7367  003E70  6B78               	clrf	(DHCP_Handler@ip+1)& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;dhcp_client.c: 190: ip[1] = (myip >> 8) & 0x00FF;
  7371  003E72  5194               	movf	(DHCP_Handler@myip+1)& (0+255),w,b
  7372  003E74  6F79               	movwf	(DHCP_Handler@ip+2)& (0+255),b
  7373  003E76  6B7A               	clrf	(DHCP_Handler@ip+3)& (0+255),b
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;dhcp_client.c: 191: ip[2] = (myip >> 16) & 0x00FF;
  7377  003E78  5195               	movf	(DHCP_Handler@myip+2)& (0+255),w,b
  7378  003E7A  6F7B               	movwf	(DHCP_Handler@ip+4)& (0+255),b
  7379  003E7C  6B7C               	clrf	(DHCP_Handler@ip+5)& (0+255),b
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;dhcp_client.c: 192: ip[3] = (myip >> 24) & 0x00FF;
  7383  003E7E  C096  F07D         	movff	DHCP_Handler@myip+3,DHCP_Handler@ip+6
  7384  003E82  6B7E               	clrf	(DHCP_Handler@ip+7)& (0+255),b
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;dhcp_client.c: 193: ETH_Dump(8);
  7388  003E84  D8DC               	call	PL494	;call to abstracted procedure
  7389  003E86  ECDF  F02E         	call	_ETH_Dump	;wreg free
  7390                           
  7391                           ; BSR set to: 2
  7392                           ;dhcp_client.c: 194: ETH_ReadBlock((char *)&ethPktMAC, sizeof(ethPktMAC.s));
  7393  003E8A  0E86               	movlw	low DHCP_Handler@ethPktMAC
  7394  003E8C  6E03               	movwf	ETH_ReadBlock@data,c
  7395  003E8E  6A04               	clrf	ETH_ReadBlock@data+1,c
  7396  003E90  6A06               	clrf	ETH_ReadBlock@length+1,c
  7397  003E92  0E06               	movlw	6
  7398  003E94  6E05               	movwf	ETH_ReadBlock@length,c
  7399  003E96  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
  7400                           
  7401                           ; BSR set to: 1
  7402                           ;dhcp_client.c: 196: if(memcmp(&ethPktMAC.s, &ethMAC.s, 6)== 0)
  7403  003E9A  0E8C               	movlw	low DHCP_Handler@ethMAC
  7404  003E9C  6E02               	movwf	memcmp@s2,c
  7405  003E9E  6A04               	clrf	memcmp@n+1,c
  7406  003EA0  0E06               	movlw	6
  7407  003EA2  6E03               	movwf	memcmp@n,c
  7408  003EA4  0E86               	movlw	DHCP_Handler@ethPktMAC& (0+255)
  7409  003EA6  EC48  F02E         	call	_memcmp
  7410  003EAA  5002               	movf	?_memcmp,w,c
  7411  003EAC  1003               	iorwf	?_memcmp+1,w,c
  7412  003EAE  E001 D0B5          	bnz	l8850
  7413                           
  7414                           ;dhcp_client.c: 197: {
  7415                           ;dhcp_client.c: 198: ETH_Dump(202);
  7416  003EB2  6A0C               	clrf	ETH_Dump@length+1,c
  7417  003EB4  0ECA               	movlw	202
  7418  003EB6  6E0B               	movwf	ETH_Dump@length,c
  7419  003EB8  ECDF  F02E         	call	_ETH_Dump	;wreg free
  7420                           
  7421                           ;dhcp_client.c: 199: if(ETH_Read32() == 0x63825363)
  7422  003EBC  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7423  003EC0  0E63               	movlw	99
  7424  003EC2  1803               	xorwf	?_ETH_Read32,w,c
  7425  003EC4  E109               	bnz	u11961
  7426  003EC6  0E53               	movlw	83
  7427  003EC8  1804               	xorwf	?_ETH_Read32+1,w,c
  7428  003ECA  E106               	bnz	u11961
  7429  003ECC  0E82               	movlw	130
  7430  003ECE  1805               	xorwf	?_ETH_Read32+2,w,c
  7431  003ED0  E103               	bnz	u11961
  7432  003ED2  0E63               	movlw	99
  7433  003ED4  1806               	xorwf	?_ETH_Read32+3,w,c
  7434  003ED6  A4D8               	btfss	status,2,c
  7435  003ED8                     u11961:
  7436  003ED8  0012               	return	
  7437                           
  7438                           ; BSR set to: 1
  7439                           ;dhcp_client.c: 200: {
  7440                           ;dhcp_client.c: 201: length -= 240;
  7441  003EDA  0E10               	movlw	16
  7442  003EDC  2659               	addwf	DHCP_Handler@length,f,c
  7443  003EDE  0EFF               	movlw	255
  7444  003EE0  225A               	addwfc	DHCP_Handler@length+1,f,c
  7445                           
  7446                           ;dhcp_client.c: 202: while(length>0)
  7447  003EE2  D08D               	goto	l8844
  7448  003EE4                     l8796:
  7449                           
  7450                           ;dhcp_client.c: 203: {
  7451                           ;dhcp_client.c: 205: uint8_t option, optionLength;
  7452                           ;dhcp_client.c: 206: option = ETH_Read8();
  7453  003EE4  EC91  F030         	call	_ETH_Read8	;wreg free
  7454  003EE8  0100               	movlb	0	; () banked
  7455  003EEA  6F85               	movwf	DHCP_Handler@option& (0+255),b
  7456                           
  7457                           ;dhcp_client.c: 207: optionLength = ETH_Read8();
  7458  003EEC  EC91  F030         	call	_ETH_Read8	;wreg free
  7459  003EF0  0100               	movlb	0	; () banked
  7460  003EF2  6F92               	movwf	DHCP_Handler@optionLength& (0+255),b
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;dhcp_client.c: 208: length -= 2 + optionLength;
  7464  003EF4  5192               	movf	DHCP_Handler@optionLength& (0+255),w,b
  7465  003EF6  6E5B               	movwf	??_DHCP_Handler& (0+255),c
  7466  003EF8  6A5C               	clrf	(??_DHCP_Handler+1)& (0+255),c
  7467  003EFA  0E02               	movlw	2
  7468  003EFC  265B               	addwf	??_DHCP_Handler,f,c
  7469  003EFE  0E00               	movlw	0
  7470  003F00  225C               	addwfc	??_DHCP_Handler+1,f,c
  7471  003F02  505B               	movf	??_DHCP_Handler,w,c
  7472  003F04  5E59               	subwf	DHCP_Handler@length,f,c
  7473  003F06  505C               	movf	??_DHCP_Handler+1,w,c
  7474  003F08  5A5A               	subwfb	DHCP_Handler@length+1,f,c
  7475                           
  7476                           ;dhcp_client.c: 209: switch(option)
  7477  003F0A  D06B               	goto	l8842
  7478  003F0C                     l8800:
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;dhcp_client.c: 212: ipv4SubnetMask = ETH_Read32();
  7482  003F0C  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7483  003F10  C003  F196         	movff	?_ETH_Read32,_ipv4SubnetMask
  7484  003F14  C004  F197         	movff	?_ETH_Read32+1,_ipv4SubnetMask+1
  7485  003F18  C005  F198         	movff	?_ETH_Read32+2,_ipv4SubnetMask+2
  7486  003F1C  C006  F199         	movff	?_ETH_Read32+3,_ipv4SubnetMask+3
  7487                           
  7488                           ;dhcp_client.c: 213: break;
  7489  003F20  D06E               	goto	l8844
  7490  003F22                     l8802:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;dhcp_client.c: 215: ipv4Router = ETH_Read32();
  7494  003F22  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7495  003F26  C003  F226         	movff	?_ETH_Read32,_ipv4Router
  7496  003F2A  C004  F227         	movff	?_ETH_Read32+1,_ipv4Router+1
  7497  003F2E  C005  F228         	movff	?_ETH_Read32+2,_ipv4Router+2
  7498  003F32  C006  F229         	movff	?_ETH_Read32+3,_ipv4Router+3
  7499                           
  7500                           ;dhcp_client.c: 216: break;
  7501  003F36  D063               	goto	l8844
  7502  003F38                     l8804:
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;dhcp_client.c: 219: if(optionLength >= 4)
  7506  003F38  0E03               	movlw	3
  7507  003F3A  6592               	cpfsgt	DHCP_Handler@optionLength& (0+255),b
  7508  003F3C  D060               	goto	l8844
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;dhcp_client.c: 220: {
  7512                           ;dhcp_client.c: 221: ipv4DNS[0] = ETH_Read32();
  7513  003F3E  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7514  003F42  C003  F210         	movff	?_ETH_Read32,_ipv4DNS
  7515  003F46  C004  F211         	movff	?_ETH_Read32+1,_ipv4DNS+1
  7516  003F4A  C005  F212         	movff	?_ETH_Read32+2,_ipv4DNS+2
  7517  003F4E  C006  F213         	movff	?_ETH_Read32+3,_ipv4DNS+3
  7518                           
  7519                           ; BSR set to: 1
  7520                           ;dhcp_client.c: 222: optionLength -= 4;
  7521  003F52  0E04               	movlw	4
  7522  003F54  0100               	movlb	0	; () banked
  7523  003F56  5F92               	subwf	DHCP_Handler@optionLength& (0+255),f,b
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;dhcp_client.c: 223: if(optionLength >= 4)
  7527  003F58  0E03               	movlw	3
  7528  003F5A  6592               	cpfsgt	DHCP_Handler@optionLength& (0+255),b
  7529  003F5C  D050               	goto	l8844
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;dhcp_client.c: 224: {
  7533                           ;dhcp_client.c: 225: ipv4DNS[1] = ETH_Read32();
  7534  003F5E  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7535  003F62  C003  F214         	movff	?_ETH_Read32,_ipv4DNS+4
  7536  003F66  C004  F215         	movff	?_ETH_Read32+1,_ipv4DNS+5
  7537  003F6A  C005  F216         	movff	?_ETH_Read32+2,_ipv4DNS+6
  7538  003F6E  C006  F217         	movff	?_ETH_Read32+3,_ipv4DNS+7
  7539  003F72                     l8814:
  7540                           
  7541                           ; BSR set to: 1
  7542                           ;dhcp_client.c: 226: optionLength -= 4;
  7543  003F72  0E04               	movlw	4
  7544  003F74  0100               	movlb	0	; () banked
  7545  003F76  5F92               	subwf	DHCP_Handler@optionLength& (0+255),f,b
  7546  003F78  D042               	goto	l8844
  7547  003F7A                     l8816:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;dhcp_client.c: 231: if(optionLength >= 4)
  7551  003F7A  0E03               	movlw	3
  7552  003F7C  6592               	cpfsgt	DHCP_Handler@optionLength& (0+255),b
  7553  003F7E  D03F               	goto	l8844
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;dhcp_client.c: 232: {
  7557                           ;dhcp_client.c: 233: dhcpLeaseTime = ETH_Read32();
  7558  003F80  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7559  003F84  C003  F18E         	movff	?_ETH_Read32,_dhcpLeaseTime
  7560  003F88  C004  F18F         	movff	?_ETH_Read32+1,_dhcpLeaseTime+1
  7561  003F8C  C005  F190         	movff	?_ETH_Read32+2,_dhcpLeaseTime+2
  7562  003F90  C006  F191         	movff	?_ETH_Read32+3,_dhcpLeaseTime+3
  7563  003F94  D7EE               	goto	l8814
  7564  003F96                     l8822:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;dhcp_client.c: 238: dhcpServerId = ETH_Read32();
  7568  003F96  ECCE  F02C         	call	_ETH_Read32	;wreg free
  7569  003F9A  C003  F222         	movff	?_ETH_Read32,_dhcpServerId
  7570  003F9E  C004  F223         	movff	?_ETH_Read32+1,_dhcpServerId+1
  7571  003FA2  C005  F224         	movff	?_ETH_Read32+2,_dhcpServerId+2
  7572  003FA6  C006  F225         	movff	?_ETH_Read32+3,_dhcpServerId+3
  7573  003FAA  D7E3               	goto	l8814
  7574  003FAC                     l904:
  7575                           
  7576                           ; BSR set to: 1
  7577                           ;dhcp_client.c: 245: ipv4Address = myip;
  7578  003FAC  D83F               	call	PL320	;call to abstracted procedure
  7579                           
  7580                           ; BSR set to: 1
  7581                           ;dhcp_client.c: 246: clientState = REQUESTING;
  7582  003FAE  0E04               	movlw	4
  7583  003FB0  D004               	goto	L4
  7584  003FB2                     l906:
  7585                           
  7586                           ; BSR set to: 1
  7587                           ;dhcp_client.c: 249: ipv4Address = myip;
  7588  003FB2  D83C               	call	PL320	;call to abstracted procedure
  7589                           
  7590                           ; BSR set to: 1
  7591                           ;dhcp_client.c: 250: clientState = BOUND;
  7592  003FB4  0E05               	movlw	5
  7593  003FB6  D001               	goto	L4
  7594  003FB8                     l8830:
  7595                           
  7596                           ; BSR set to: 1
  7597                           ;dhcp_client.c: 254: clientState = INIT;
  7598  003FB8  0E01               	movlw	1
  7599  003FBA                     L4:
  7600  003FBA  0100               	movlb	0	; () banked
  7601  003FBC  6FFF               	movwf	_clientState& (0+255),b
  7602                           
  7603                           ;dhcp_client.c: 255: break;
  7604  003FBE  D008               	goto	l8836
  7605  003FC0                     l8834:
  7606                           
  7607                           ; BSR set to: 0
  7608  003FC0  EC91  F030         	call	_ETH_Read8	;wreg free
  7609                           
  7610                           ; Switch size 1, requested type "space"
  7611                           ; Number of cases is 3, Range of values is 2 to 6
  7612                           ; switch strategies available:
  7613                           ; Name         Instructions Cycles
  7614                           ; simple_byte           10     6 (average)
  7615                           ;	Chosen strategy is simple_byte
  7616  003FC4  0A02               	xorlw	2	; case 2
  7617  003FC6  E0F2               	bz	l904
  7618  003FC8  0A07               	xorlw	7	; case 5
  7619  003FCA  E0F3               	bz	l906
  7620  003FCC  0A03               	xorlw	3	; case 6
  7621  003FCE  E0F4               	bz	l8830
  7622  003FD0                     l8836:
  7623                           
  7624                           ;dhcp_client.c: 259: optionLength -=1;
  7625  003FD0  0100               	movlb	0	; () banked
  7626  003FD2  0792               	decf	DHCP_Handler@optionLength& (0+255),f,b
  7627                           
  7628                           ;dhcp_client.c: 260: break;
  7629  003FD4  D014               	goto	l8844
  7630  003FD6                     l8838:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;dhcp_client.c: 262: ETH_Dump(optionLength);
  7634  003FD6  C092  F00B         	movff	DHCP_Handler@optionLength,ETH_Dump@length
  7635  003FDA  6A0C               	clrf	ETH_Dump@length+1,c
  7636  003FDC  ECDF  F02E         	call	_ETH_Dump	;wreg free
  7637                           
  7638                           ;dhcp_client.c: 263: break;
  7639  003FE0  D00E               	goto	l8844
  7640  003FE2                     l8842:
  7641                           
  7642                           ; BSR set to: 0
  7643  003FE2  5185               	movf	DHCP_Handler@option& (0+255),w,b
  7644                           
  7645                           ; Switch size 1, requested type "space"
  7646                           ; Number of cases is 6, Range of values is 1 to 54
  7647                           ; switch strategies available:
  7648                           ; Name         Instructions Cycles
  7649                           ; simple_byte           19    10 (average)
  7650                           ;	Chosen strategy is simple_byte
  7651  003FE4  0A01               	xorlw	1	; case 1
  7652  003FE6  E092               	bz	l8800
  7653  003FE8  0A02               	xorlw	2	; case 3
  7654  003FEA  E09B               	bz	l8802
  7655  003FEC  0A05               	xorlw	5	; case 6
  7656  003FEE  E0A4               	bz	l8804
  7657  003FF0  0A35               	xorlw	53	; case 51
  7658  003FF2  E0C3               	bz	l8816
  7659  003FF4  0A06               	xorlw	6	; case 53
  7660  003FF6  E0E4               	bz	l8834
  7661  003FF8  0A03               	xorlw	3	; case 54
  7662  003FFA  E0CD               	bz	l8822
  7663  003FFC  D7EC               	goto	l8838
  7664  003FFE                     l8844:
  7665  003FFE  BE5A               	btfsc	DHCP_Handler@length+1,7,c
  7666  004000  D005               	goto	l8846
  7667  004002  505A               	movf	DHCP_Handler@length+1,w,c
  7668  004004  E102               	bnz	u12001
  7669  004006  0459               	decf	DHCP_Handler@length,w,c
  7670  004008  B0D8               	btfsc	status,0,c
  7671  00400A                     u12001:
  7672  00400A  D76C               	goto	l8796
  7673  00400C                     l8846:
  7674                           
  7675                           ;dhcp_client.c: 265: }
  7676                           ;dhcp_client.c: 266: if (clientState == REQUESTING)
  7677  00400C  0E04               	movlw	4
  7678  00400E  0100               	movlb	0	; () banked
  7679  004010  19FF               	xorwf	_clientState& (0+255),w,b
  7680  004012  A4D8               	btfss	status,2,c
  7681  004014  0012               	return	
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;dhcp_client.c: 267: DHCP_Request( DHCP_REQUEST );
  7685  004016  0E03               	movlw	3
  7686  004018  EF5E  F022         	goto	_DHCP_Request
  7687  00401C                     l8850:
  7688                           
  7689                           ;dhcp_client.c: 270: else
  7690                           ;dhcp_client.c: 271: ETH_Dump(length - 34);
  7691  00401C  0EDE               	movlw	222
  7692  00401E  2459               	addwf	DHCP_Handler@length,w,c
  7693  004020  6E0B               	movwf	ETH_Dump@length,c
  7694  004022  0EFF               	movlw	255
  7695  004024  205A               	addwfc	DHCP_Handler@length+1,w,c
  7696  004026  6E0C               	movwf	ETH_Dump@length+1,c
  7697  004028  EFDF  F02E         	goto	_ETH_Dump	;wreg free
  7698  00402C                     __end_of_DHCP_Handler:
  7699                           	opt stack 0
  7700  00402C                     PL320:
  7701                           	opt stack 15
  7702  00402C  C093  F192         	movff	DHCP_Handler@myip,_ipv4Address
  7703  004030  C094  F193         	movff	DHCP_Handler@myip+1,_ipv4Address+1
  7704  004034  C095  F194         	movff	DHCP_Handler@myip+2,_ipv4Address+2
  7705  004038  C096  F195         	movff	DHCP_Handler@myip+3,_ipv4Address+3
  7706  00403C  0012               	return	
  7707  00403E                     __end_ofPL320:
  7708                           	opt stack 0
  7709  00403E                     PL494:
  7710                           	opt stack 15
  7711  00403E  6A0C               	clrf	ETH_Dump@length+1,c
  7712  004040  0E08               	movlw	8
  7713  004042  6E0B               	movwf	ETH_Dump@length,c
  7714  004044  0C08               	retlw	8
  7715  004046                     __end_ofPL494:
  7716                           	opt stack 0
  7717                           tosu	equ	0xFFF
  7718                           tosh	equ	0xFFE
  7719                           tosl	equ	0xFFD
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon2	equ	0xFF1
  7729                           indf0	equ	0xFEF
  7730                           postinc0	equ	0xFEE
  7731                           fsr0h	equ	0xFEA
  7732                           fsr0l	equ	0xFE9
  7733                           wreg	equ	0xFE8
  7734                           postinc1	equ	0xFE6
  7735                           plusw1	equ	0xFE3
  7736                           fsr1h	equ	0xFE2
  7737                           fsr1l	equ	0xFE1
  7738                           bsr	equ	0xFE0
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           plusw2	equ	0xFDB
  7743                           fsr2h	equ	0xFDA
  7744                           fsr2l	equ	0xFD9
  7745                           status	equ	0xFD8
  7746                           
  7747 ;; *************** function _memcmp *****************
  7748 ;; Defined at:
  7749 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memcmp.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  s1              1    wreg     PTR const void 
  7752 ;;		 -> DHCP_Handler@ethPktMAC(6), 
  7753 ;;  s2              1    1[COMRAM] PTR const void 
  7754 ;;		 -> DHCP_Handler@ethMAC(6), 
  7755 ;;  n               2    2[COMRAM] unsigned int 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  s1              1    6[COMRAM] PTR const void 
  7758 ;;		 -> DHCP_Handler@ethPktMAC(6), 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  2    1[COMRAM] int 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7763 ;; Tracked objects:
  7764 ;;		On entry : F/1
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;Total ram usage:        6 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    3
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_DHCP_Handler
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text26
  7783  005C90                     __ptext26:
  7784                           	opt stack 0
  7785  005C90                     _memcmp:
  7786                           	opt stack 22
  7787                           
  7788                           ;incstack = 0
  7789                           ;memcmp@s1 stored from wreg
  7790  005C90  6E07               	movwf	memcmp@s1,c
  7791  005C92  D01A               	goto	l8678
  7792  005C94                     l8670:
  7793  005C94  5002               	movf	memcmp@s2,w,c
  7794  005C96  6ED9               	movwf	fsr2l,c
  7795  005C98  6ADA               	clrf	fsr2h,c
  7796  005C9A  5007               	movf	memcmp@s1,w,c
  7797  005C9C  6EE1               	movwf	fsr1l,c
  7798  005C9E  6AE2               	clrf	fsr1h,c
  7799  005CA0  50DE               	movf	postinc2,w,c
  7800  005CA2  18E6               	xorwf	postinc1,w,c
  7801  005CA4  E00F               	bz	l8676
  7802  005CA6  5007               	movf	memcmp@s1,w,c
  7803  005CA8  6ED9               	movwf	fsr2l,c
  7804  005CAA  6ADA               	clrf	fsr2h,c
  7805  005CAC  50DF               	movf	indf2,w,c
  7806  005CAE  6E05               	movwf	??_memcmp& (0+255),c
  7807  005CB0  5002               	movf	memcmp@s2,w,c
  7808  005CB2  6ED9               	movwf	fsr2l,c
  7809  005CB4  6ADA               	clrf	fsr2h,c
  7810  005CB6  50DF               	movf	indf2,w,c
  7811  005CB8  5C05               	subwf	??_memcmp,w,c
  7812  005CBA  6E02               	movwf	?_memcmp,c
  7813  005CBC  6A03               	clrf	?_memcmp+1,c
  7814  005CBE  A0D8               	btfss	status,0,c
  7815  005CC0  0603               	decf	?_memcmp+1,f,c
  7816  005CC2  0012               	return	
  7817  005CC4                     l8676:
  7818  005CC4  2A07               	incf	memcmp@s1,f,c
  7819  005CC6  2A02               	incf	memcmp@s2,f,c
  7820  005CC8                     l8678:
  7821  005CC8  0603               	decf	memcmp@n,f,c
  7822  005CCA  A0D8               	btfss	status,0,c
  7823  005CCC  0604               	decf	memcmp@n+1,f,c
  7824  005CCE  2803               	incf	memcmp@n,w,c
  7825  005CD0  E1E1               	bnz	l8670
  7826  005CD2  2804               	incf	memcmp@n+1,w,c
  7827  005CD4  E1DF               	bnz	l8670
  7828  005CD6  6A02               	clrf	?_memcmp,c
  7829  005CD8  6A03               	clrf	?_memcmp+1,c
  7830  005CDA  0012               	return		;funcret
  7831  005CDC                     __end_of_memcmp:
  7832                           	opt stack 0
  7833                           tosu	equ	0xFFF
  7834                           tosh	equ	0xFFE
  7835                           tosl	equ	0xFFD
  7836                           pclath	equ	0xFFA
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           intcon2	equ	0xFF1
  7845                           indf0	equ	0xFEF
  7846                           postinc0	equ	0xFEE
  7847                           fsr0h	equ	0xFEA
  7848                           fsr0l	equ	0xFE9
  7849                           wreg	equ	0xFE8
  7850                           postinc1	equ	0xFE6
  7851                           plusw1	equ	0xFE3
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           bsr	equ	0xFE0
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           postdec2	equ	0xFDD
  7858                           plusw2	equ	0xFDB
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function _ETH_Read32 *****************
  7864 ;; Defined at:
  7865 ;;		line 277 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;		None
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  ret             4    6[COMRAM] unsigned long 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  4    2[COMRAM] unsigned long 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0, cstack
  7874 ;; Tracked objects:
  7875 ;;		On entry : D/2
  7876 ;;		On exit  : F/1
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;Total ram usage:        8 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    4
  7886 ;; This function calls:
  7887 ;;		_SPI_ExchangeByte
  7888 ;; This function is called by:
  7889 ;;		_DHCP_Handler
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text27
  7894  00599C                     __ptext27:
  7895                           	opt stack 0
  7896  00599C                     _ETH_Read32:
  7897                           	opt stack 21
  7898                           
  7899                           ;encX24j600_spi.c: 279: uint32_t ret;
  7900                           ;encX24j600_spi.c: 280: if(rxPacketStatusVector.ByteCount >= sizeof(ret))
  7901                           
  7902                           ;incstack = 0
  7903  00599C  0102               	movlb	2	; () banked
  7904  00599E  5119               	movf	(_rxPacketStatusVector+1)& (0+255),w,b
  7905  0059A0  E103               	bnz	u11530
  7906  0059A2  0E04               	movlw	4
  7907  0059A4  5D18               	subwf	_rxPacketStatusVector& (0+255),w,b
  7908  0059A6  E321               	bnc	l626
  7909  0059A8                     u11530:
  7910                           
  7911                           ; BSR set to: 2
  7912                           
  7913                           ;encX24j600_spi.c: 281: {
  7914                           ;encX24j600_spi.c: 282: do{LATB3 = 0;} while(0);
  7915  0059A8  968A               	bcf	3978,3,c	;volatile
  7916                           
  7917                           ; BSR set to: 2
  7918                           ;encX24j600_spi.c: 283: SPI_ExchangeByte(rrxdata_inst);
  7919  0059AA  0E2C               	movlw	44
  7920  0059AC  ECF3  F032         	call	_SPI_ExchangeByte
  7921                           
  7922                           ;encX24j600_spi.c: 284: ((uint8_t *)&ret)[3] = SPI_ExchangeByte(0);
  7923  0059B0  0E00               	movlw	0
  7924  0059B2  ECF3  F032         	call	_SPI_ExchangeByte
  7925  0059B6  6E0A               	movwf	ETH_Read32@ret+3,c
  7926                           
  7927                           ;encX24j600_spi.c: 285: ((uint8_t *)&ret)[2] = SPI_ExchangeByte(0);
  7928  0059B8  0E00               	movlw	0
  7929  0059BA  ECF3  F032         	call	_SPI_ExchangeByte
  7930  0059BE  6E09               	movwf	ETH_Read32@ret+2,c
  7931                           
  7932                           ;encX24j600_spi.c: 286: ((uint8_t *)&ret)[1] = SPI_ExchangeByte(0);
  7933  0059C0  0E00               	movlw	0
  7934  0059C2  ECF3  F032         	call	_SPI_ExchangeByte
  7935  0059C6  6E08               	movwf	ETH_Read32@ret+1,c
  7936                           
  7937                           ;encX24j600_spi.c: 287: ((uint8_t *)&ret)[0] = SPI_ExchangeByte(0);
  7938  0059C8  0E00               	movlw	0
  7939  0059CA  ECF3  F032         	call	_SPI_ExchangeByte
  7940  0059CE  6E07               	movwf	ETH_Read32@ret,c
  7941  0059D0  868A               	bsf	3978,3,c	;volatile
  7942                           
  7943                           ;encX24j600_spi.c: 289: rxPacketStatusVector.ByteCount -= sizeof(ret);
  7944  0059D2  0E04               	movlw	4
  7945                           
  7946                           ; BSR set to: 2
  7947                           ;encX24j600_spi.c: 290: ethData.error = 0;
  7948  0059D4  EC8D  F02E         	call	PL370	;call to abstracted procedure
  7949                           
  7950                           ; BSR set to: 1
  7951                           ;encX24j600_spi.c: 291: return ret;
  7952  0059D8  C007  F003         	movff	ETH_Read32@ret,?_ETH_Read32
  7953  0059DC  C008  F004         	movff	ETH_Read32@ret+1,?_ETH_Read32+1
  7954  0059E0  C009  F005         	movff	ETH_Read32@ret+2,?_ETH_Read32+2
  7955  0059E4  C00A  F006         	movff	ETH_Read32@ret+3,?_ETH_Read32+3
  7956  0059E8  0C00               	retlw	0
  7957  0059EA                     l626:
  7958                           
  7959                           ; BSR set to: 2
  7960                           ;encX24j600_spi.c: 293: else
  7961                           ;encX24j600_spi.c: 294: {
  7962                           ;encX24j600_spi.c: 295: ethData.error = 1;
  7963  0059EA  0101               	movlb	1	; () banked
  7964  0059EC  8183               	bsf	_ethData& (0+255),0,b	;volatile
  7965                           
  7966                           ;encX24j600_spi.c: 296: return 0;
  7967  0059EE  6A03               	clrf	?_ETH_Read32,c
  7968  0059F0  6A04               	clrf	?_ETH_Read32+1,c
  7969  0059F2  6A05               	clrf	?_ETH_Read32+2,c
  7970  0059F4  6A06               	clrf	?_ETH_Read32+3,c
  7971                           
  7972                           ; BSR set to: 1
  7973  0059F6  0012               	return		;funcret
  7974  0059F8                     __end_of_ETH_Read32:
  7975                           	opt stack 0
  7976                           tosu	equ	0xFFF
  7977                           tosh	equ	0xFFE
  7978                           tosl	equ	0xFFD
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           intcon	equ	0xFF2
  7987                           intcon2	equ	0xFF1
  7988                           indf0	equ	0xFEF
  7989                           postinc0	equ	0xFEE
  7990                           fsr0h	equ	0xFEA
  7991                           fsr0l	equ	0xFE9
  7992                           wreg	equ	0xFE8
  7993                           postinc1	equ	0xFE6
  7994                           plusw1	equ	0xFE3
  7995                           fsr1h	equ	0xFE2
  7996                           fsr1l	equ	0xFE1
  7997                           bsr	equ	0xFE0
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           postdec2	equ	0xFDD
  8001                           plusw2	equ	0xFDB
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _memset *****************
  8007 ;; Defined at:
  8008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  p1              2    1[COMRAM] PTR void 
  8011 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  8012 ;;  c               2    3[COMRAM] int 
  8013 ;;  n               2    5[COMRAM] unsigned int 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  p               2    7[COMRAM] PTR unsigned char 
  8016 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  2    1[COMRAM] PTR void 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/2
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8026 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;Total ram usage:        8 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    3
  8033 ;; This function calls:
  8034 ;;		Nothing
  8035 ;; This function is called by:
  8036 ;;		_main
  8037 ;;		_DEMO_UDP_Recv
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text28
  8042  006234                     __ptext28:
  8043                           	opt stack 0
  8044  006234                     _memset:
  8045                           	opt stack 27
  8046                           
  8047                           ; BSR set to: 1
  8048                           ;incstack = 0
  8049  006234  C002  F008         	movff	memset@p1,memset@p
  8050  006238  C003  F009         	movff	memset@p1+1,memset@p+1
  8051  00623C  D008               	goto	l8736
  8052  00623E                     l8732:
  8053  00623E  C008  FFD9         	movff	memset@p,fsr2l
  8054  006242  C009  FFDA         	movff	memset@p+1,fsr2h
  8055  006246  C004  FFDF         	movff	memset@c,indf2
  8056  00624A  4A08               	infsnz	memset@p,f,c
  8057  00624C  2A09               	incf	memset@p+1,f,c
  8058  00624E                     l8736:
  8059  00624E  0606               	decf	memset@n,f,c
  8060  006250  A0D8               	btfss	status,0,c
  8061  006252  0607               	decf	memset@n+1,f,c
  8062  006254  2806               	incf	memset@n,w,c
  8063  006256  E1F3               	bnz	l8732
  8064  006258  2807               	incf	memset@n+1,w,c
  8065  00625A  E1F1               	bnz	l8732
  8066  00625C  0012               	return		;funcret
  8067  00625E                     __end_of_memset:
  8068                           	opt stack 0
  8069                           tosu	equ	0xFFF
  8070                           tosh	equ	0xFFE
  8071                           tosl	equ	0xFFD
  8072                           pclath	equ	0xFFA
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           intcon	equ	0xFF2
  8080                           intcon2	equ	0xFF1
  8081                           indf0	equ	0xFEF
  8082                           postinc0	equ	0xFEE
  8083                           fsr0h	equ	0xFEA
  8084                           fsr0l	equ	0xFE9
  8085                           wreg	equ	0xFE8
  8086                           postinc1	equ	0xFE6
  8087                           plusw1	equ	0xFE3
  8088                           fsr1h	equ	0xFE2
  8089                           fsr1l	equ	0xFE1
  8090                           bsr	equ	0xFE0
  8091                           indf2	equ	0xFDF
  8092                           postinc2	equ	0xFDE
  8093                           postdec2	equ	0xFDD
  8094                           plusw2	equ	0xFDB
  8095                           fsr2h	equ	0xFDA
  8096                           fsr2l	equ	0xFD9
  8097                           status	equ	0xFD8
  8098                           
  8099 ;; *************** function _lcd_puts *****************
  8100 ;; Defined at:
  8101 ;;		line 86 in file "../board_support_package/picdem2_net/lcd.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  s               2    3[COMRAM] PTR const unsigned char 
  8104 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;		None               void
  8109 ;; Registers used:
  8110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/2
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;Total ram usage:        2 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    5
  8123 ;; This function calls:
  8124 ;;		_lcd_putch
  8125 ;; This function is called by:
  8126 ;;		_main
  8127 ;;		_DEMO_UDP_Recv
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text29
  8132  00640C                     __ptext29:
  8133                           	opt stack 0
  8134  00640C                     _lcd_puts:
  8135                           	opt stack 25
  8136                           
  8137                           ;lcd.c: 88: while(*s)
  8138                           
  8139                           ;incstack = 0
  8140  00640C  D005               	goto	l8544
  8141  00640E                     l8540:
  8142                           
  8143                           ;lcd.c: 89: lcd_putch(*s++);
  8144  00640E  D807               	call	PL400	;call to abstracted procedure
  8145  006410  EC24  F032         	call	_lcd_putch
  8146  006414  4A04               	infsnz	lcd_puts@s,f,c
  8147  006416  2A05               	incf	lcd_puts@s+1,f,c
  8148  006418                     l8544:
  8149  006418  D802               	call	PL400	;call to abstracted procedure
  8150  00641A  E1F9               	bnz	l8540
  8151  00641C  0012               	return		;funcret
  8152  00641E                     __end_of_lcd_puts:
  8153                           	opt stack 0
  8154  00641E                     PL400:
  8155                           	opt stack 25
  8156  00641E  C004  FFD9         	movff	lcd_puts@s,fsr2l
  8157  006422  C005  FFDA         	movff	lcd_puts@s+1,fsr2h
  8158  006426  50DF               	movf	indf2,w,c
  8159  006428  0012               	return	
  8160  00642A                     __end_ofPL400:
  8161                           	opt stack 0
  8162                           tosu	equ	0xFFF
  8163                           tosh	equ	0xFFE
  8164                           tosl	equ	0xFFD
  8165                           pclath	equ	0xFFA
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           intcon2	equ	0xFF1
  8174                           indf0	equ	0xFEF
  8175                           postinc0	equ	0xFEE
  8176                           fsr0h	equ	0xFEA
  8177                           fsr0l	equ	0xFE9
  8178                           wreg	equ	0xFE8
  8179                           postinc1	equ	0xFE6
  8180                           plusw1	equ	0xFE3
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           bsr	equ	0xFE0
  8184                           indf2	equ	0xFDF
  8185                           postinc2	equ	0xFDE
  8186                           postdec2	equ	0xFDD
  8187                           plusw2	equ	0xFDB
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function _lcd_putch *****************
  8193 ;; Defined at:
  8194 ;;		line 76 in file "../board_support_package/picdem2_net/lcd.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  c               1    wreg     unsigned char 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  c               1    2[COMRAM] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;		None               void
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/2
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;Total ram usage:        1 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    4
  8215 ;; This function calls:
  8216 ;;		_lcd_busy
  8217 ;;		_lcd_write_data
  8218 ;; This function is called by:
  8219 ;;		_lcd_puts
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text30
  8224  006448                     __ptext30:
  8225                           	opt stack 0
  8226  006448                     _lcd_putch:
  8227                           	opt stack 25
  8228                           
  8229                           ;incstack = 0
  8230                           ;lcd_putch@c stored from wreg
  8231  006448  6E03               	movwf	lcd_putch@c,c
  8232                           
  8233                           ;lcd.c: 78: if(c >= ' ' && c < 127)
  8234  00644A  0E1F               	movlw	31
  8235  00644C  6403               	cpfsgt	lcd_putch@c,c
  8236  00644E  EF17  F033         	goto	_lcd_busy
  8237  006452  0E7F               	movlw	127
  8238  006454  6003               	cpfslt	lcd_putch@c,c
  8239  006456  EF17  F033         	goto	_lcd_busy
  8240                           
  8241                           ;lcd.c: 79: {
  8242                           ;lcd.c: 80: lcd_write_data(c);
  8243  00645A  5003               	movf	lcd_putch@c,w,c
  8244  00645C  ECE6  F031         	call	_lcd_write_data
  8245                           
  8246                           ;lcd.c: 81: }
  8247                           ;lcd.c: 82: lcd_busy();
  8248  006460  EF17  F033         	goto	_lcd_busy	;wreg free
  8249  006464                     __end_of_lcd_putch:
  8250                           	opt stack 0
  8251                           tosu	equ	0xFFF
  8252                           tosh	equ	0xFFE
  8253                           tosl	equ	0xFFD
  8254                           pclath	equ	0xFFA
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           intcon2	equ	0xFF1
  8263                           indf0	equ	0xFEF
  8264                           postinc0	equ	0xFEE
  8265                           fsr0h	equ	0xFEA
  8266                           fsr0l	equ	0xFE9
  8267                           wreg	equ	0xFE8
  8268                           postinc1	equ	0xFE6
  8269                           plusw1	equ	0xFE3
  8270                           fsr1h	equ	0xFE2
  8271                           fsr1l	equ	0xFE1
  8272                           bsr	equ	0xFE0
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           plusw2	equ	0xFDB
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _lcd_write_data *****************
  8282 ;; Defined at:
  8283 ;;		line 71 in file "../board_support_package/picdem2_net/lcd_hw.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  d               1    wreg     unsigned char 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  d               1    1[COMRAM] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/2
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;Total ram usage:        1 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    3
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_lcd_putch
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text31
  8312  0063CC                     __ptext31:
  8313                           	opt stack 0
  8314  0063CC                     _lcd_write_data:
  8315                           	opt stack 25
  8316                           
  8317                           ;incstack = 0
  8318                           ;lcd_write_data@d stored from wreg
  8319  0063CC  6E02               	movwf	lcd_write_data@d,c
  8320                           
  8321                           ;lcd_hw.c: 73: LATH1 = 0;
  8322  0063CE  9290               	bcf	3984,1,c	;volatile
  8323                           
  8324                           ;lcd_hw.c: 74: LATH2 = 1;
  8325  0063D0  8490               	bsf	3984,2,c	;volatile
  8326                           
  8327                           ;lcd_hw.c: 75: LATE = d;
  8328  0063D2  C002  FF8D         	movff	lcd_write_data@d,3981	;volatile
  8329                           
  8330                           ;lcd_hw.c: 76: _delay((unsigned long)((1)*(41666667UL/4000000.0)));
  8331  0063D6  0E03               	movlw	3
  8332  0063D8                     u15967:
  8333  0063D8  2EE8               	decfsz	wreg,f,c
  8334  0063DA  D7FE               	goto	u15967
  8335  0063DC  F000               	nop	
  8336                           
  8337                           ;lcd_hw.c: 77: LATH0 = 1;
  8338  0063DE  8090               	bsf	3984,0,c	;volatile
  8339                           
  8340                           ;lcd_hw.c: 78: _delay((unsigned long)((1)*(41666667UL/4000000.0)));
  8341  0063E0  0E03               	movlw	3
  8342  0063E2                     u15977:
  8343  0063E2  2EE8               	decfsz	wreg,f,c
  8344  0063E4  D7FE               	goto	u15977
  8345  0063E6  F000               	nop	
  8346                           
  8347                           ;lcd_hw.c: 79: LATH0 = 0;
  8348  0063E8  9090               	bcf	3984,0,c	;volatile
  8349  0063EA  0012               	return		;funcret
  8350  0063EC                     __end_of_lcd_write_data:
  8351                           	opt stack 0
  8352                           tosu	equ	0xFFF
  8353                           tosh	equ	0xFFE
  8354                           tosl	equ	0xFFD
  8355                           pclath	equ	0xFFA
  8356                           tblptru	equ	0xFF8
  8357                           tblptrh	equ	0xFF7
  8358                           tblptrl	equ	0xFF6
  8359                           tablat	equ	0xFF5
  8360                           prodh	equ	0xFF4
  8361                           prodl	equ	0xFF3
  8362                           intcon	equ	0xFF2
  8363                           intcon2	equ	0xFF1
  8364                           indf0	equ	0xFEF
  8365                           postinc0	equ	0xFEE
  8366                           fsr0h	equ	0xFEA
  8367                           fsr0l	equ	0xFE9
  8368                           wreg	equ	0xFE8
  8369                           postinc1	equ	0xFE6
  8370                           plusw1	equ	0xFE3
  8371                           fsr1h	equ	0xFE2
  8372                           fsr1l	equ	0xFE1
  8373                           bsr	equ	0xFE0
  8374                           indf2	equ	0xFDF
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           plusw2	equ	0xFDB
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function _lcd_goto2 *****************
  8383 ;; Defined at:
  8384 ;;		line 102 in file "../board_support_package/picdem2_net/lcd.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;  pos             1    wreg     unsigned char 
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  pos             1    2[COMRAM] unsigned char 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;		None               void
  8391 ;; Registers used:
  8392 ;;		wreg, status,2, status,0, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : F/1
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8402 ;;Total ram usage:        1 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    4
  8405 ;; This function calls:
  8406 ;;		_lcd_busy
  8407 ;;		_lcd_write_ctrl
  8408 ;; This function is called by:
  8409 ;;		_DEMO_UDP_Recv
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text32
  8414  0065BC                     __ptext32:
  8415                           	opt stack 0
  8416  0065BC                     _lcd_goto2:
  8417                           	opt stack 21
  8418                           
  8419                           ;incstack = 0
  8420                           ;lcd_goto2@pos stored from wreg
  8421  0065BC  6E03               	movwf	lcd_goto2@pos,c
  8422                           
  8423                           ;lcd.c: 104: lcd_write_ctrl(0xC0+pos);
  8424  0065BE  5003               	movf	lcd_goto2@pos,w,c
  8425  0065C0  0FC0               	addlw	192
  8426  0065C2  ECF6  F031         	call	_lcd_write_ctrl
  8427                           
  8428                           ;lcd.c: 105: lcd_busy();
  8429  0065C6  EF17  F033         	goto	_lcd_busy	;wreg free
  8430  0065CA                     __end_of_lcd_goto2:
  8431                           	opt stack 0
  8432                           tosu	equ	0xFFF
  8433                           tosh	equ	0xFFE
  8434                           tosl	equ	0xFFD
  8435                           pclath	equ	0xFFA
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon2	equ	0xFF1
  8444                           indf0	equ	0xFEF
  8445                           postinc0	equ	0xFEE
  8446                           fsr0h	equ	0xFEA
  8447                           fsr0l	equ	0xFE9
  8448                           wreg	equ	0xFE8
  8449                           postinc1	equ	0xFE6
  8450                           plusw1	equ	0xFE3
  8451                           fsr1h	equ	0xFE2
  8452                           fsr1l	equ	0xFE1
  8453                           bsr	equ	0xFE0
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           plusw2	equ	0xFDB
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function _lcd_goto1 *****************
  8463 ;; Defined at:
  8464 ;;		line 96 in file "../board_support_package/picdem2_net/lcd.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  pos             1    wreg     unsigned char 
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  pos             1    2[COMRAM] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;		None               void
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/2
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;Total ram usage:        1 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    4
  8485 ;; This function calls:
  8486 ;;		_lcd_busy
  8487 ;;		_lcd_write_ctrl
  8488 ;; This function is called by:
  8489 ;;		_main
  8490 ;;		_DEMO_UDP_Recv
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           	psect	text33
  8495  0065CA                     __ptext33:
  8496                           	opt stack 0
  8497  0065CA                     _lcd_goto1:
  8498                           	opt stack 26
  8499                           
  8500                           ;incstack = 0
  8501                           ;lcd_goto1@pos stored from wreg
  8502  0065CA  6E03               	movwf	lcd_goto1@pos,c
  8503                           
  8504                           ;lcd.c: 98: lcd_write_ctrl(0x80+pos);
  8505  0065CC  5003               	movf	lcd_goto1@pos,w,c
  8506  0065CE  0F80               	addlw	128
  8507  0065D0  ECF6  F031         	call	_lcd_write_ctrl
  8508                           
  8509                           ;lcd.c: 99: lcd_busy();
  8510  0065D4  EF17  F033         	goto	_lcd_busy	;wreg free
  8511  0065D8                     __end_of_lcd_goto1:
  8512                           	opt stack 0
  8513                           tosu	equ	0xFFF
  8514                           tosh	equ	0xFFE
  8515                           tosl	equ	0xFFD
  8516                           pclath	equ	0xFFA
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           intcon2	equ	0xFF1
  8525                           indf0	equ	0xFEF
  8526                           postinc0	equ	0xFEE
  8527                           fsr0h	equ	0xFEA
  8528                           fsr0l	equ	0xFE9
  8529                           wreg	equ	0xFE8
  8530                           postinc1	equ	0xFE6
  8531                           plusw1	equ	0xFE3
  8532                           fsr1h	equ	0xFE2
  8533                           fsr1l	equ	0xFE1
  8534                           bsr	equ	0xFE0
  8535                           indf2	equ	0xFDF
  8536                           postinc2	equ	0xFDE
  8537                           postdec2	equ	0xFDD
  8538                           plusw2	equ	0xFDB
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function _lcd_busy *****************
  8544 ;; Defined at:
  8545 ;;		line 82 in file "../board_support_package/picdem2_net/lcd_hw.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;		None
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;		None
  8550 ;; Return value:  Size  Location     Type
  8551 ;;		None               void
  8552 ;; Registers used:
  8553 ;;		wreg
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/2
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;Total ram usage:        0 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    3
  8566 ;; This function calls:
  8567 ;;		Nothing
  8568 ;; This function is called by:
  8569 ;;		_lcd_putch
  8570 ;;		_lcd_goto1
  8571 ;;		_lcd_goto2
  8572 ;;		_lcd_init
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text34
  8577  00662E                     __ptext34:
  8578                           	opt stack 0
  8579  00662E                     _lcd_busy:
  8580                           	opt stack 25
  8581                           
  8582                           ;lcd_hw.c: 84: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  8583                           
  8584                           ;incstack = 0
  8585  00662E  0EAD               	movlw	173
  8586  006630                     u15987:
  8587  006630  2EE8               	decfsz	wreg,f,c
  8588  006632  D7FE               	goto	u15987
  8589  006634  F000               	nop	
  8590  006636  0012               	return		;funcret
  8591  006638                     __end_of_lcd_busy:
  8592                           	opt stack 0
  8593                           tosu	equ	0xFFF
  8594                           tosh	equ	0xFFE
  8595                           tosl	equ	0xFFD
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           indf0	equ	0xFEF
  8606                           postinc0	equ	0xFEE
  8607                           fsr0h	equ	0xFEA
  8608                           fsr0l	equ	0xFE9
  8609                           wreg	equ	0xFE8
  8610                           postinc1	equ	0xFE6
  8611                           plusw1	equ	0xFE3
  8612                           fsr1h	equ	0xFE2
  8613                           fsr1l	equ	0xFE1
  8614                           bsr	equ	0xFE0
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           plusw2	equ	0xFDB
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _lcd_clear *****************
  8624 ;; Defined at:
  8625 ;;		line 67 in file "../board_support_package/picdem2_net/lcd.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;		None
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;		None
  8630 ;; Return value:  Size  Location     Type
  8631 ;;		None               void
  8632 ;; Registers used:
  8633 ;;		wreg, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : F/1
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;Total ram usage:        1 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    4
  8646 ;; This function calls:
  8647 ;;		_lcd_write_ctrl
  8648 ;; This function is called by:
  8649 ;;		_DEMO_UDP_Recv
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text35
  8654  006346                     __ptext35:
  8655                           	opt stack 0
  8656  006346                     _lcd_clear:
  8657                           	opt stack 21
  8658                           
  8659                           ; BSR set to: 1
  8660                           ;lcd.c: 69: lcd_write_ctrl(0x1);
  8661                           
  8662                           ;incstack = 0
  8663  006346  0E01               	movlw	1
  8664  006348  ECF6  F031         	call	_lcd_write_ctrl
  8665                           
  8666                           ;lcd.c: 70: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  8667  00634C  0E88               	movlw	136
  8668  00634E  6E03               	movwf	??_lcd_clear& (0+255),c
  8669  006350  0E46               	movlw	70
  8670  006352                     u15997:
  8671  006352  2EE8               	decfsz	wreg,f,c
  8672  006354  D7FE               	goto	u15997
  8673  006356  2E03               	decfsz	??_lcd_clear& (0+255),f,c
  8674  006358  D7FC               	goto	u15997
  8675  00635A  D000               	nop2	
  8676                           
  8677                           ;lcd.c: 71: lcd_write_ctrl(0x06);
  8678  00635C  0E06               	movlw	6
  8679  00635E  ECF6  F031         	call	_lcd_write_ctrl
  8680                           
  8681                           ;lcd.c: 72: lcd_write_ctrl(0x0F);
  8682  006362  0E0F               	movlw	15
  8683  006364  EFF6  F031         	goto	_lcd_write_ctrl
  8684  006368                     __end_of_lcd_clear:
  8685                           	opt stack 0
  8686                           tosu	equ	0xFFF
  8687                           tosh	equ	0xFFE
  8688                           tosl	equ	0xFFD
  8689                           pclath	equ	0xFFA
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           intcon2	equ	0xFF1
  8698                           indf0	equ	0xFEF
  8699                           postinc0	equ	0xFEE
  8700                           fsr0h	equ	0xFEA
  8701                           fsr0l	equ	0xFE9
  8702                           wreg	equ	0xFE8
  8703                           postinc1	equ	0xFE6
  8704                           plusw1	equ	0xFE3
  8705                           fsr1h	equ	0xFE2
  8706                           fsr1l	equ	0xFE1
  8707                           bsr	equ	0xFE0
  8708                           indf2	equ	0xFDF
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           plusw2	equ	0xFDB
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function _lcd_write_ctrl *****************
  8717 ;; Defined at:
  8718 ;;		line 59 in file "../board_support_package/picdem2_net/lcd_hw.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  c               1    wreg     unsigned char 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  c               1    1[COMRAM] unsigned char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;		None               void
  8725 ;; Registers used:
  8726 ;;		wreg
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/2
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;Total ram usage:        1 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    3
  8739 ;; This function calls:
  8740 ;;		Nothing
  8741 ;; This function is called by:
  8742 ;;		_lcd_clear
  8743 ;;		_lcd_goto1
  8744 ;;		_lcd_goto2
  8745 ;;		_lcd_init
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text36
  8750  0063EC                     __ptext36:
  8751                           	opt stack 0
  8752  0063EC                     _lcd_write_ctrl:
  8753                           	opt stack 26
  8754                           
  8755                           ;incstack = 0
  8756                           ;lcd_write_ctrl@c stored from wreg
  8757  0063EC  6E02               	movwf	lcd_write_ctrl@c,c
  8758                           
  8759                           ;lcd_hw.c: 61: LATH1 = 0;
  8760  0063EE  9290               	bcf	3984,1,c	;volatile
  8761                           
  8762                           ;lcd_hw.c: 62: LATH2 = 0;
  8763  0063F0  9490               	bcf	3984,2,c	;volatile
  8764                           
  8765                           ;lcd_hw.c: 64: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  8766  0063F2  0EAD               	movlw	173
  8767  0063F4                     u16007:
  8768  0063F4  2EE8               	decfsz	wreg,f,c
  8769  0063F6  D7FE               	goto	u16007
  8770  0063F8  F000               	nop	
  8771                           
  8772                           ;lcd_hw.c: 65: LATE = c;
  8773  0063FA  C002  FF8D         	movff	lcd_write_ctrl@c,3981	;volatile
  8774                           
  8775                           ;lcd_hw.c: 66: LATH0 = 1;
  8776  0063FE  8090               	bsf	3984,0,c	;volatile
  8777                           
  8778                           ;lcd_hw.c: 67: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  8779  006400  0EAD               	movlw	173
  8780  006402                     u16017:
  8781  006402  2EE8               	decfsz	wreg,f,c
  8782  006404  D7FE               	goto	u16017
  8783  006406  F000               	nop	
  8784                           
  8785                           ;lcd_hw.c: 68: LATH0 = 0;
  8786  006408  9090               	bcf	3984,0,c	;volatile
  8787  00640A  0012               	return		;funcret
  8788  00640C                     __end_of_lcd_write_ctrl:
  8789                           	opt stack 0
  8790                           tosu	equ	0xFFF
  8791                           tosh	equ	0xFFE
  8792                           tosl	equ	0xFFD
  8793                           pclath	equ	0xFFA
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           intcon2	equ	0xFF1
  8802                           indf0	equ	0xFEF
  8803                           postinc0	equ	0xFEE
  8804                           fsr0h	equ	0xFEA
  8805                           fsr0l	equ	0xFE9
  8806                           wreg	equ	0xFE8
  8807                           postinc1	equ	0xFE6
  8808                           plusw1	equ	0xFE3
  8809                           fsr1h	equ	0xFE2
  8810                           fsr1l	equ	0xFE1
  8811                           bsr	equ	0xFE0
  8812                           indf2	equ	0xFDF
  8813                           postinc2	equ	0xFDE
  8814                           postdec2	equ	0xFDD
  8815                           plusw2	equ	0xFDB
  8816                           fsr2h	equ	0xFDA
  8817                           fsr2l	equ	0xFD9
  8818                           status	equ	0xFD8
  8819                           
  8820 ;; *************** function _UDP_WriteBlock *****************
  8821 ;; Defined at:
  8822 ;;		line 198 in file "../../TCPIP Library/source/udpv4.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  data            1    wreg     PTR void 
  8825 ;;		 -> DEMO_UDP_Recv@local_ip(4), 
  8826 ;;  length          2    8[COMRAM] unsigned int 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;  data            1   10[COMRAM] PTR void 
  8829 ;;		 -> DEMO_UDP_Recv@local_ip(4), 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;		None               void
  8832 ;; Registers used:
  8833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : F/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:        3 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    5
  8846 ;; This function calls:
  8847 ;;		_ETH_WriteBlock
  8848 ;; This function is called by:
  8849 ;;		_DEMO_UDP_Recv
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text37
  8854  000000                     __ptext37:
  8855                           	opt stack 0
  8856  000000                     _UDP_WriteBlock:
  8857                           	opt stack 0
  8858  000000                     __end_of_UDP_WriteBlock:
  8859                           	opt stack 0
  8860                           tosu	equ	0xFFF
  8861                           tosh	equ	0xFFE
  8862                           tosl	equ	0xFFD
  8863                           pclath	equ	0xFFA
  8864                           tblptru	equ	0xFF8
  8865                           tblptrh	equ	0xFF7
  8866                           tblptrl	equ	0xFF6
  8867                           tablat	equ	0xFF5
  8868                           prodh	equ	0xFF4
  8869                           prodl	equ	0xFF3
  8870                           intcon	equ	0xFF2
  8871                           intcon2	equ	0xFF1
  8872                           indf0	equ	0xFEF
  8873                           postinc0	equ	0xFEE
  8874                           fsr0h	equ	0xFEA
  8875                           fsr0l	equ	0xFE9
  8876                           wreg	equ	0xFE8
  8877                           postinc1	equ	0xFE6
  8878                           plusw1	equ	0xFE3
  8879                           fsr1h	equ	0xFE2
  8880                           fsr1l	equ	0xFE1
  8881                           bsr	equ	0xFE0
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           plusw2	equ	0xFDB
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function _UDP_Write16 *****************
  8891 ;; Defined at:
  8892 ;;		line 187 in file "../../TCPIP Library/source/udpv4.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  data            2    4[COMRAM] unsigned int 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;		None               void
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : F/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8906 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;Total ram usage:        2 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    5
  8913 ;; This function calls:
  8914 ;;		_ETH_Write16
  8915 ;; This function is called by:
  8916 ;;		_DEMO_UDP_Recv
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           	psect	text38
  8921  000000                     __ptext38:
  8922                           	opt stack 0
  8923  000000                     _UDP_Write16:
  8924                           	opt stack 0
  8925  000000                     __end_of_UDP_Write16:
  8926                           	opt stack 0
  8927                           tosu	equ	0xFFF
  8928                           tosh	equ	0xFFE
  8929                           tosl	equ	0xFFD
  8930                           pclath	equ	0xFFA
  8931                           tblptru	equ	0xFF8
  8932                           tblptrh	equ	0xFF7
  8933                           tblptrl	equ	0xFF6
  8934                           tablat	equ	0xFF5
  8935                           prodh	equ	0xFF4
  8936                           prodl	equ	0xFF3
  8937                           intcon	equ	0xFF2
  8938                           intcon2	equ	0xFF1
  8939                           indf0	equ	0xFEF
  8940                           postinc0	equ	0xFEE
  8941                           fsr0h	equ	0xFEA
  8942                           fsr0l	equ	0xFE9
  8943                           wreg	equ	0xFE8
  8944                           postinc1	equ	0xFE6
  8945                           plusw1	equ	0xFE3
  8946                           fsr1h	equ	0xFE2
  8947                           fsr1l	equ	0xFE1
  8948                           bsr	equ	0xFE0
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _UDP_Read8 *****************
  8958 ;; Defined at:
  8959 ;;		line 166 in file "../../TCPIP Library/source/udpv4.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      unsigned char 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : F/1
  8970 ;;		On exit  : F/1
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    5
  8980 ;; This function calls:
  8981 ;;		_ETH_Read8
  8982 ;; This function is called by:
  8983 ;;		_DEMO_UDP_Recv
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text39
  8988  000000                     __ptext39:
  8989                           	opt stack 0
  8990  000000                     _UDP_Read8:
  8991                           	opt stack 0
  8992  000000                     __end_of_UDP_Read8:
  8993                           	opt stack 0
  8994                           tosu	equ	0xFFF
  8995                           tosh	equ	0xFFE
  8996                           tosl	equ	0xFFD
  8997                           pclath	equ	0xFFA
  8998                           tblptru	equ	0xFF8
  8999                           tblptrh	equ	0xFF7
  9000                           tblptrl	equ	0xFF6
  9001                           tablat	equ	0xFF5
  9002                           prodh	equ	0xFF4
  9003                           prodl	equ	0xFF3
  9004                           intcon	equ	0xFF2
  9005                           intcon2	equ	0xFF1
  9006                           indf0	equ	0xFEF
  9007                           postinc0	equ	0xFEE
  9008                           fsr0h	equ	0xFEA
  9009                           fsr0l	equ	0xFE9
  9010                           wreg	equ	0xFE8
  9011                           postinc1	equ	0xFE6
  9012                           plusw1	equ	0xFE3
  9013                           fsr1h	equ	0xFE2
  9014                           fsr1l	equ	0xFE1
  9015                           bsr	equ	0xFE0
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           plusw2	equ	0xFDB
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function _UDP_GetDestPort *****************
  9025 ;; Defined at:
  9026 ;;		line 209 in file "../../TCPIP Library/source/udpv4.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;		None
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  2    1[COMRAM] unsigned int 
  9033 ;; Registers used:
  9034 ;;		None
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/1
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;Total ram usage:        2 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    3
  9047 ;; This function calls:
  9048 ;;		Nothing
  9049 ;; This function is called by:
  9050 ;;		_DEMO_UDP_Recv
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text40
  9055  006638                     __ptext40:
  9056                           	opt stack 0
  9057  006638                     _UDP_GetDestPort:
  9058                           	opt stack 22
  9059                           
  9060                           ;udpv4.c: 211: return(destPort);
  9061                           
  9062                           ; BSR set to: 1
  9063                           ;incstack = 0
  9064  006638  C1A2  F002         	movff	_destPort,?_UDP_GetDestPort
  9065  00663C  C1A3  F003         	movff	_destPort+1,?_UDP_GetDestPort+1
  9066  006640  0012               	return		;funcret
  9067  006642                     __end_of_UDP_GetDestPort:
  9068                           	opt stack 0
  9069                           tosu	equ	0xFFF
  9070                           tosh	equ	0xFFE
  9071                           tosl	equ	0xFFD
  9072                           pclath	equ	0xFFA
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           indf0	equ	0xFEF
  9082                           postinc0	equ	0xFEE
  9083                           fsr0h	equ	0xFEA
  9084                           fsr0l	equ	0xFE9
  9085                           wreg	equ	0xFE8
  9086                           postinc1	equ	0xFE6
  9087                           plusw1	equ	0xFE3
  9088                           fsr1h	equ	0xFE2
  9089                           fsr1l	equ	0xFE1
  9090                           bsr	equ	0xFE0
  9091                           indf2	equ	0xFDF
  9092                           postinc2	equ	0xFDE
  9093                           postdec2	equ	0xFDD
  9094                           plusw2	equ	0xFDB
  9095                           fsr2h	equ	0xFDA
  9096                           fsr2l	equ	0xFD9
  9097                           status	equ	0xFD8
  9098                           
  9099 ;; *************** function _UDP_GetDestIP *****************
  9100 ;; Defined at:
  9101 ;;		line 214 in file "../../TCPIP Library/source/udpv4.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;		None
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;		None
  9106 ;; Return value:  Size  Location     Type
  9107 ;;                  4    1[COMRAM] unsigned long 
  9108 ;; Registers used:
  9109 ;;		None
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/1
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;Total ram usage:        4 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    3
  9122 ;; This function calls:
  9123 ;;		Nothing
  9124 ;; This function is called by:
  9125 ;;		_DEMO_UDP_Recv
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text41
  9130  00656A                     __ptext41:
  9131                           	opt stack 0
  9132  00656A                     _UDP_GetDestIP:
  9133                           	opt stack 22
  9134                           
  9135                           ;udpv4.c: 216: return (ipv4Header.srcIpAddress);
  9136                           
  9137                           ;incstack = 0
  9138  00656A  C2A2  F002         	movff	_ipv4Header+12,?_UDP_GetDestIP
  9139  00656E  C2A3  F003         	movff	_ipv4Header+13,?_UDP_GetDestIP+1
  9140  006572  C2A4  F004         	movff	_ipv4Header+14,?_UDP_GetDestIP+2
  9141  006576  C2A5  F005         	movff	_ipv4Header+15,?_UDP_GetDestIP+3
  9142  00657A  0012               	return		;funcret
  9143  00657C                     __end_of_UDP_GetDestIP:
  9144                           	opt stack 0
  9145                           tosu	equ	0xFFF
  9146                           tosh	equ	0xFFE
  9147                           tosl	equ	0xFFD
  9148                           pclath	equ	0xFFA
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           intcon2	equ	0xFF1
  9157                           indf0	equ	0xFEF
  9158                           postinc0	equ	0xFEE
  9159                           fsr0h	equ	0xFEA
  9160                           fsr0l	equ	0xFE9
  9161                           wreg	equ	0xFE8
  9162                           postinc1	equ	0xFE6
  9163                           plusw1	equ	0xFE3
  9164                           fsr1h	equ	0xFE2
  9165                           fsr1l	equ	0xFE1
  9166                           bsr	equ	0xFE0
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           plusw2	equ	0xFDB
  9171                           fsr2h	equ	0xFDA
  9172                           fsr2l	equ	0xFD9
  9173                           status	equ	0xFD8
  9174                           
  9175 ;; *************** function _DEMO_UDP_MeasureTemp *****************
  9176 ;; Defined at:
  9177 ;;		line 85 in file "udp_demo.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  adcResult       2    7[COMRAM] unsigned int 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;                  2    5[COMRAM] unsigned int 
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0, cstack
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/1
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;Total ram usage:        4 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    4
  9198 ;; This function calls:
  9199 ;;		_ADC_GetConversion
  9200 ;; This function is called by:
  9201 ;;		_DEMO_UDP_Recv
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text42
  9206  0064CC                     __ptext42:
  9207                           	opt stack 0
  9208  0064CC                     _DEMO_UDP_MeasureTemp:
  9209                           	opt stack 21
  9210                           
  9211                           ;udp_demo.c: 87: adc_result_t adcResult;
  9212                           ;udp_demo.c: 88: adcResult = ADC_GetConversion(channel_AN3);
  9213                           
  9214                           ;incstack = 0
  9215  0064CC  0E03               	movlw	3
  9216  0064CE  ECD7  F030         	call	_ADC_GetConversion
  9217  0064D2  C002  F008         	movff	?_ADC_GetConversion,DEMO_UDP_MeasureTemp@adcResult
  9218  0064D6  C003  F009         	movff	?_ADC_GetConversion+1,DEMO_UDP_MeasureTemp@adcResult+1
  9219                           
  9220                           ;udp_demo.c: 90: return adcResult;
  9221  0064DA  C008  F006         	movff	DEMO_UDP_MeasureTemp@adcResult,?_DEMO_UDP_MeasureTemp
  9222  0064DE  C009  F007         	movff	DEMO_UDP_MeasureTemp@adcResult+1,?_DEMO_UDP_MeasureTemp+1
  9223  0064E2  0012               	return		;funcret
  9224  0064E4                     __end_of_DEMO_UDP_MeasureTemp:
  9225                           	opt stack 0
  9226                           tosu	equ	0xFFF
  9227                           tosh	equ	0xFFE
  9228                           tosl	equ	0xFFD
  9229                           pclath	equ	0xFFA
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon2	equ	0xFF1
  9238                           indf0	equ	0xFEF
  9239                           postinc0	equ	0xFEE
  9240                           fsr0h	equ	0xFEA
  9241                           fsr0l	equ	0xFE9
  9242                           wreg	equ	0xFE8
  9243                           postinc1	equ	0xFE6
  9244                           plusw1	equ	0xFE3
  9245                           fsr1h	equ	0xFE2
  9246                           fsr1l	equ	0xFE1
  9247                           bsr	equ	0xFE0
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           plusw2	equ	0xFDB
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function _UDP_ReadBlock *****************
  9257 ;; Defined at:
  9258 ;;		line 161 in file "../../TCPIP Library/source/udpv4.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  data            2   11[COMRAM] PTR void 
  9261 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), data(2), 
  9262 ;;		 -> idle_packet(2), 
  9263 ;;  length          2   13[COMRAM] unsigned int 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  2   11[COMRAM] unsigned int 
  9268 ;; Registers used:
  9269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : F/0
  9272 ;;		On exit  : F/1
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;Total ram usage:        4 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    5
  9282 ;; This function calls:
  9283 ;;		_ETH_ReadBlock
  9284 ;; This function is called by:
  9285 ;;		_DEMO_UDP_IdlePkt
  9286 ;;		_DEMO_UDP_Recv
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text43
  9291  006556                     __ptext43:
  9292                           	opt stack 0
  9293  006556                     _UDP_ReadBlock:
  9294                           	opt stack 20
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;udpv4.c: 163: return (ETH_ReadBlock(data,length));
  9298                           ;	Return value of _UDP_ReadBlock is never used
  9299                           
  9300                           ;incstack = 0
  9301  006556  C00C  F003         	movff	UDP_ReadBlock@data,ETH_ReadBlock@data
  9302  00655A  C00D  F004         	movff	UDP_ReadBlock@data+1,ETH_ReadBlock@data+1
  9303  00655E  C00E  F005         	movff	UDP_ReadBlock@length,ETH_ReadBlock@length
  9304  006562  C00F  F006         	movff	UDP_ReadBlock@length+1,ETH_ReadBlock@length+1
  9305  006566  EF9A  F02B         	goto	_ETH_ReadBlock	;wreg free
  9306  00656A                     __end_of_UDP_ReadBlock:
  9307                           	opt stack 0
  9308                           tosu	equ	0xFFF
  9309                           tosh	equ	0xFFE
  9310                           tosl	equ	0xFFD
  9311                           pclath	equ	0xFFA
  9312                           tblptru	equ	0xFF8
  9313                           tblptrh	equ	0xFF7
  9314                           tblptrl	equ	0xFF6
  9315                           tablat	equ	0xFF5
  9316                           prodh	equ	0xFF4
  9317                           prodl	equ	0xFF3
  9318                           intcon	equ	0xFF2
  9319                           intcon2	equ	0xFF1
  9320                           indf0	equ	0xFEF
  9321                           postinc0	equ	0xFEE
  9322                           fsr0h	equ	0xFEA
  9323                           fsr0l	equ	0xFE9
  9324                           wreg	equ	0xFE8
  9325                           postinc1	equ	0xFE6
  9326                           plusw1	equ	0xFE3
  9327                           fsr1h	equ	0xFE2
  9328                           fsr1l	equ	0xFE1
  9329                           bsr	equ	0xFE0
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           plusw2	equ	0xFDB
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _TCP_Recv *****************
  9339 ;; Defined at:
  9340 ;;		line 483 in file "../../TCPIP Library/source/tcpv4.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  remoteAddres    4  116[BANK0 ] unsigned long 
  9343 ;;  length          2  120[BANK0 ] unsigned int 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  tcbPtr          2  151[BANK0 ] PTR struct .
  9346 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
  9347 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
  9348 ;;  count           1  150[BANK0 ] char 
  9349 ;; Return value:  Size  Location     Type
  9350 ;;		None               void
  9351 ;; Registers used:
  9352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9353 ;; Tracked objects:
  9354 ;;		On entry : F/0
  9355 ;;		On exit  : C/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9358 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9359 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Temps:          0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;Total ram usage:       37 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:   12
  9365 ;; This function calls:
  9366 ;;		_ETH_ReadBlock
  9367 ;;		_TCP_FiniteStateMachine
  9368 ;;		_TCP_ParseTCPOptions
  9369 ;; This function is called by:
  9370 ;;		_IPV4_Packet
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           	psect	text44
  9375  002C98                     __ptext44:
  9376                           	opt stack 0
  9377  002C98                     _TCP_Recv:
  9378                           	opt stack 15
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;tcpv4.c: 485: tcpTCB_t *tcbPtr;
  9382                           ;tcpv4.c: 486: socklistsize_t count = 0;
  9383                           
  9384                           ; BSR set to: 1
  9385                           ;incstack = 0
  9386  002C98  6BF6               	clrf	TCP_Recv@count& (0+255),b
  9387                           
  9388                           ;tcpv4.c: 490: receivedRemoteAddress = 0;
  9389  002C9A  0101               	movlb	1	; () banked
  9390  002C9C  6B9A               	clrf	_receivedRemoteAddress& (0+255),b
  9391  002C9E  6B9B               	clrf	(_receivedRemoteAddress+1)& (0+255),b
  9392  002CA0  6B9C               	clrf	(_receivedRemoteAddress+2)& (0+255),b
  9393  002CA2  6B9D               	clrf	(_receivedRemoteAddress+3)& (0+255),b
  9394                           
  9395                           ;tcpv4.c: 491: rcvPayloadLen = 0;
  9396  002CA4  6BAA               	clrf	_rcvPayloadLen& (0+255),b
  9397  002CA6  6BAB               	clrf	(_rcvPayloadLen+1)& (0+255),b
  9398                           
  9399                           ; BSR set to: 1
  9400                           ;tcpv4.c: 493: ETH_ReadBlock((char *)&tcpHeader,sizeof(tcpHeader_t));
  9401  002CA8  0EB4               	movlw	low _tcpHeader
  9402  002CAA  6E03               	movwf	ETH_ReadBlock@data,c
  9403  002CAC  0E01               	movlw	high _tcpHeader
  9404  002CAE  D9F5               	call	PL444	;call to abstracted procedure
  9405  002CB0  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
  9406                           
  9407                           ; BSR set to: 1
  9408                           ;tcpv4.c: 495: currentTCB = (0);
  9409  002CB4  6BA0               	clrf	_currentTCB& (0+255),b
  9410  002CB6  6BA1               	clrf	(_currentTCB+1)& (0+255),b
  9411                           
  9412                           ; BSR set to: 1
  9413                           ;tcpv4.c: 498: if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0))
  9414  002CB8  51B6               	movf	(_tcpHeader+2)& (0+255),w,b
  9415  002CBA  11B7               	iorwf	(_tcpHeader+3)& (0+255),w,b
  9416  002CBC  B4D8               	btfsc	status,2,c
  9417  002CBE  0012               	return	
  9418                           
  9419                           ; BSR set to: 1
  9420  002CC0  51B4               	movf	_tcpHeader& (0+255),w,b
  9421  002CC2  11B5               	iorwf	(_tcpHeader+1)& (0+255),w,b
  9422  002CC4  B4D8               	btfsc	status,2,c
  9423  002CC6  0012               	return	
  9424                           
  9425                           ; BSR set to: 1
  9426                           ;tcpv4.c: 499: {
  9427                           ;tcpv4.c: 500: tcpHeader.sourcePort = ((((uint16_t)tcpHeader.sourcePort & (uint16_t)0xFF
      +                          00) >> 8) | (((uint16_t)tcpHeader.sourcePort & (uint16_t)0x00FF) << 8));
  9428  002CC8  51B4               	movf	_tcpHeader& (0+255),w,b
  9429  002CCA  0100               	movlb	0	; () banked
  9430  002CCC  6FDB               	movwf	(??_TCP_Recv+1)& (0+255),b
  9431  002CCE  6BDA               	clrf	??_TCP_Recv& (0+255),b
  9432  002CD0  0101               	movlb	1	; () banked
  9433  002CD2  51B5               	movf	(_tcpHeader+1)& (0+255),w,b
  9434  002CD4  0100               	movlb	0	; () banked
  9435  002CD6  6FDC               	movwf	(??_TCP_Recv+2)& (0+255),b
  9436  002CD8  D9E5               	call	PL448	;call to abstracted procedure
  9437  002CDA  6FB4               	movwf	_tcpHeader& (0+255),b
  9438  002CDC  D9E8               	call	PL482	;call to abstracted procedure
  9439  002CDE  6FB5               	movwf	(_tcpHeader+1)& (0+255),b
  9440                           
  9441                           ; BSR set to: 1
  9442                           ;tcpv4.c: 501: tcpHeader.destPort = ((((uint16_t)tcpHeader.destPort & (uint16_t)0xFF00) 
      +                          >> 8) | (((uint16_t)tcpHeader.destPort & (uint16_t)0x00FF) << 8));
  9443  002CE0  51B6               	movf	(_tcpHeader+2)& (0+255),w,b
  9444  002CE2  0100               	movlb	0	; () banked
  9445  002CE4  6FDB               	movwf	(??_TCP_Recv+1)& (0+255),b
  9446  002CE6  6BDA               	clrf	??_TCP_Recv& (0+255),b
  9447  002CE8  EE21  F0B6         	lfsr	2,_tcpHeader+2
  9448  002CEC  CFDE F0DC          	movff	postinc2,??_TCP_Recv+2
  9449  002CF0  CFDD F0DD          	movff	postdec2,??_TCP_Recv+3
  9450  002CF4  C0DD  F0DC         	movff	??_TCP_Recv+3,??_TCP_Recv+2
  9451  002CF8  6BDD               	clrf	(??_TCP_Recv+3)& (0+255),b
  9452  002CFA  D9D4               	call	PL448	;call to abstracted procedure
  9453  002CFC  6FB6               	movwf	(_tcpHeader+2)& (0+255),b
  9454  002CFE  D9D7               	call	PL482	;call to abstracted procedure
  9455  002D00  6FB7               	movwf	(_tcpHeader+3)& (0+255),b
  9456                           
  9457                           ; BSR set to: 1
  9458                           ;tcpv4.c: 504: tcbPtr = tcbList;
  9459  002D02  C1AC  F0F7         	movff	_tcbList,TCP_Recv@tcbPtr
  9460  002D06  C1AD  F0F8         	movff	_tcbList+1,TCP_Recv@tcbPtr+1
  9461                           
  9462                           ;tcpv4.c: 505: while((tcbPtr != (0)) && (count < tcbListSize))
  9463  002D0A  D044               	goto	l9694
  9464  002D0C                     l9684:
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;tcpv4.c: 506: {
  9468                           ;tcpv4.c: 507: if (tcpHeader.destPort == tcbPtr->localPort)
  9469  002D0C  C0F7  FFF6         	movff	TCP_Recv@tcbPtr,tblptrl
  9470  002D10  C0F8  FFF7         	movff	TCP_Recv@tcbPtr+1,tblptrh
  9471  002D14  0E00               	movlw	low (__smallconst shr (0+16))
  9472  002D16  6EF8               	movwf	tblptru,c
  9473  002D18  0E0F               	movlw	(high __ramtop+-1)
  9474  002D1A  64F7               	cpfsgt	tblptrh,c
  9475  002D1C  D007               	bra	u14457
  9476  002D1E  0009               	tblrd		*+
  9477  002D20  CFF5 F0DA          	movff	tablat,??_TCP_Recv
  9478  002D24  0009               	tblrd		*+
  9479  002D26  CFF5 F0DB          	movff	tablat,??_TCP_Recv+1
  9480  002D2A  D006               	bra	u14450
  9481  002D2C                     u14457:
  9482  002D2C  EC3C  F011         	call	PL114	;call to abstracted procedure
  9483  002D30  CFEE F0DA          	movff	postinc0,??_TCP_Recv
  9484  002D34  CFEE F0DB          	movff	postinc0,??_TCP_Recv+1
  9485  002D38                     u14450:
  9486  002D38  0100               	movlb	0	; () banked
  9487  002D3A  51DA               	movf	??_TCP_Recv& (0+255),w,b
  9488  002D3C  0101               	movlb	1	; () banked
  9489  002D3E  19B6               	xorwf	(_tcpHeader+2)& (0+255),w,b
  9490  002D40  E10A               	bnz	l9690
  9491  002D42  0100               	movlb	0	; () banked
  9492  002D44  51DB               	movf	(??_TCP_Recv+1)& (0+255),w,b
  9493  002D46  0101               	movlb	1	; () banked
  9494  002D48  19B7               	xorwf	(_tcpHeader+3)& (0+255),w,b
  9495  002D4A  E105               	bnz	l9690
  9496                           
  9497                           ; BSR set to: 1
  9498                           ;tcpv4.c: 508: {
  9499                           ;tcpv4.c: 509: currentTCB = tcbPtr;
  9500  002D4C  C0F7  F1A0         	movff	TCP_Recv@tcbPtr,_currentTCB
  9501  002D50  C0F8  F1A1         	movff	TCP_Recv@tcbPtr+1,_currentTCB+1
  9502                           
  9503                           ;tcpv4.c: 510: break;
  9504  002D54  D02A               	goto	l9698
  9505  002D56                     l9690:
  9506                           
  9507                           ; BSR set to: 1
  9508                           ;tcpv4.c: 512: else
  9509                           ;tcpv4.c: 513: {
  9510                           ;tcpv4.c: 514: tcbPtr = tcbPtr->nextTCB;
  9511  002D56  0E2C               	movlw	44
  9512  002D58  0100               	movlb	0	; () banked
  9513  002D5A  25F7               	addwf	TCP_Recv@tcbPtr& (0+255),w,b
  9514  002D5C  6FDA               	movwf	??_TCP_Recv& (0+255),b
  9515  002D5E  0E00               	movlw	0
  9516  002D60  21F8               	addwfc	(TCP_Recv@tcbPtr+1)& (0+255),w,b
  9517  002D62  6FDB               	movwf	(??_TCP_Recv+1)& (0+255),b
  9518  002D64  C0DA  FFF6         	movff	??_TCP_Recv,tblptrl
  9519  002D68  C0DB  FFF7         	movff	??_TCP_Recv+1,tblptrh
  9520  002D6C  0E00               	movlw	low (__smallconst shr (0+16))
  9521  002D6E  6EF8               	movwf	tblptru,c
  9522  002D70  0E0F               	movlw	(high __ramtop+-1)
  9523  002D72  64F7               	cpfsgt	tblptrh,c
  9524  002D74  D007               	bra	u14477
  9525  002D76  0009               	tblrd		*+
  9526  002D78  CFF5 F0F7          	movff	tablat,TCP_Recv@tcbPtr
  9527  002D7C  0009               	tblrd		*+
  9528  002D7E  CFF5 F0F8          	movff	tablat,TCP_Recv@tcbPtr+1
  9529  002D82  D006               	bra	u14470
  9530  002D84                     u14477:
  9531  002D84  EC3C  F011         	call	PL114	;call to abstracted procedure
  9532  002D88  CFEE F0F7          	movff	postinc0,TCP_Recv@tcbPtr
  9533  002D8C  CFEE F0F8          	movff	postinc0,TCP_Recv@tcbPtr+1
  9534  002D90                     u14470:
  9535                           
  9536                           ;tcpv4.c: 515: count ++;
  9537  002D90  0100               	movlb	0	; () banked
  9538  002D92  2BF6               	incf	TCP_Recv@count& (0+255),f,b
  9539  002D94                     l9694:
  9540  002D94  0100               	movlb	0	; () banked
  9541  002D96  51F7               	movf	TCP_Recv@tcbPtr& (0+255),w,b
  9542  002D98  11F8               	iorwf	(TCP_Recv@tcbPtr+1)& (0+255),w,b
  9543  002D9A  E007               	bz	l9698
  9544                           
  9545                           ; BSR set to: 0
  9546  002D9C  51F6               	movf	TCP_Recv@count& (0+255),w,b
  9547  002D9E  0A80               	xorlw	128
  9548  002DA0  6FDA               	movwf	??_TCP_Recv& (0+255),b
  9549  002DA2  505D               	movf	_tcbListSize,w,c
  9550  002DA4  0A80               	xorlw	128
  9551  002DA6  5DDA               	subwf	??_TCP_Recv& (0+255),w,b
  9552  002DA8  E3B1               	bnc	l9684
  9553  002DAA                     l9698:
  9554                           
  9555                           ;tcpv4.c: 516: }
  9556                           ;tcpv4.c: 517: }
  9557                           ;tcpv4.c: 519: if (currentTCB != (0))
  9558  002DAA  0101               	movlb	1	; () banked
  9559  002DAC  51A0               	movf	_currentTCB& (0+255),w,b
  9560  002DAE  11A1               	iorwf	(_currentTCB+1)& (0+255),w,b
  9561  002DB0  B4D8               	btfsc	status,2,c
  9562  002DB2  0012               	return	
  9563                           
  9564                           ; BSR set to: 1
  9565                           ;tcpv4.c: 520: {
  9566                           ;tcpv4.c: 521: if((tcpHeader.sourcePort == currentTCB->destPort) ||
  9567                           ;tcpv4.c: 522: (currentTCB->destIP == 0))
  9568  002DB4  0E06               	movlw	6
  9569  002DB6  D8EA               	call	PL130	;call to abstracted procedure
  9570  002DB8  64F7               	cpfsgt	tblptrh,c
  9571  002DBA  D002               	bra	u14517
  9572  002DBC  D953               	call	PL368	;call to abstracted procedure
  9573  002DBE  D003               	bra	u14510
  9574  002DC0                     u14517:
  9575  002DC0  EC3C  F011         	call	PL114	;call to abstracted procedure
  9576  002DC4  D956               	call	PL420	;call to abstracted procedure
  9577  002DC6                     u14510:
  9578  002DC6  0101               	movlb	1	; () banked
  9579  002DC8  51B4               	movf	_tcpHeader& (0+255),w,b
  9580  002DCA  0100               	movlb	0	; () banked
  9581  002DCC  19DC               	xorwf	(??_TCP_Recv+2)& (0+255),w,b
  9582  002DCE  E105               	bnz	u14520
  9583  002DD0  0101               	movlb	1	; () banked
  9584  002DD2  51B5               	movf	(_tcpHeader+1)& (0+255),w,b
  9585  002DD4  0100               	movlb	0	; () banked
  9586  002DD6  19DD               	xorwf	(??_TCP_Recv+3)& (0+255),w,b
  9587  002DD8  E01B               	bz	l1276
  9588  002DDA                     u14520:
  9589                           
  9590                           ; BSR set to: 0
  9591  002DDA  0E02               	movlw	2
  9592  002DDC  0101               	movlb	1	; () banked
  9593  002DDE  D8D6               	call	PL130	;call to abstracted procedure
  9594  002DE0  64F7               	cpfsgt	tblptrh,c
  9595  002DE2  D008               	bra	u14537
  9596  002DE4  D93F               	call	PL368	;call to abstracted procedure
  9597  002DE6  0009               	tblrd		*+
  9598  002DE8  CFF5 F0DE          	movff	tablat,??_TCP_Recv+4
  9599  002DEC  0009               	tblrd		*+
  9600  002DEE  CFF5 F0DF          	movff	tablat,??_TCP_Recv+5
  9601  002DF2  D007               	bra	u14530
  9602  002DF4                     u14537:
  9603  002DF4  EC3C  F011         	call	PL114	;call to abstracted procedure
  9604  002DF8  D93C               	call	PL420	;call to abstracted procedure
  9605  002DFA  CFEE F0DE          	movff	postinc0,??_TCP_Recv+4
  9606  002DFE  CFEE F0DF          	movff	postinc0,??_TCP_Recv+5
  9607  002E02                     u14530:
  9608  002E02  0100               	movlb	0	; () banked
  9609  002E04  51DC               	movf	(??_TCP_Recv+2)& (0+255),w,b
  9610  002E06  11DD               	iorwf	(??_TCP_Recv+3)& (0+255),w,b
  9611  002E08  11DE               	iorwf	(??_TCP_Recv+4)& (0+255),w,b
  9612  002E0A  11DF               	iorwf	(??_TCP_Recv+5)& (0+255),w,b
  9613  002E0C  A4D8               	btfss	status,2,c
  9614  002E0E  0012               	return	
  9615  002E10                     l1276:
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;tcpv4.c: 523: {
  9619                           ;tcpv4.c: 526: receivedRemoteAddress = remoteAddress;
  9620  002E10  C0D4  F19A         	movff	TCP_Recv@remoteAddress,_receivedRemoteAddress
  9621  002E14  C0D5  F19B         	movff	TCP_Recv@remoteAddress+1,_receivedRemoteAddress+1
  9622  002E18  C0D6  F19C         	movff	TCP_Recv@remoteAddress+2,_receivedRemoteAddress+2
  9623  002E1C  C0D7  F19D         	movff	TCP_Recv@remoteAddress+3,_receivedRemoteAddress+3
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;tcpv4.c: 527: rcvPayloadLen = length - (uint16_t)(tcpHeader.dataOffset << 2);
  9627  002E20  0101               	movlb	1	; () banked
  9628  002E22  39C0               	swapf	(_tcpHeader+12)& (0+255),w,b
  9629  002E24  0B0F               	andlw	15
  9630  002E26  0100               	movlb	0	; () banked
  9631  002E28  6FDA               	movwf	??_TCP_Recv& (0+255),b
  9632  002E2A  6BDB               	clrf	(??_TCP_Recv+1)& (0+255),b
  9633  002E2C  90D8               	bcf	status,0,c
  9634  002E2E  37DA               	rlcf	??_TCP_Recv& (0+255),f,b
  9635  002E30  37DB               	rlcf	(??_TCP_Recv+1)& (0+255),f,b
  9636  002E32  90D8               	bcf	status,0,c
  9637  002E34  37DA               	rlcf	??_TCP_Recv& (0+255),f,b
  9638  002E36  37DB               	rlcf	(??_TCP_Recv+1)& (0+255),f,b
  9639  002E38  51DA               	movf	??_TCP_Recv& (0+255),w,b
  9640  002E3A  5DD8               	subwf	TCP_Recv@length& (0+255),w,b
  9641  002E3C  0101               	movlb	1	; () banked
  9642  002E3E  6FAA               	movwf	_rcvPayloadLen& (0+255),b
  9643  002E40  0100               	movlb	0	; () banked
  9644  002E42  51DB               	movf	(??_TCP_Recv+1)& (0+255),w,b
  9645  002E44  59D9               	subwfb	(TCP_Recv@length+1)& (0+255),w,b
  9646  002E46  0101               	movlb	1	; () banked
  9647  002E48  6FAB               	movwf	(_rcvPayloadLen+1)& (0+255),b
  9648                           
  9649                           ; BSR set to: 1
  9650                           ;tcpv4.c: 530: if (TCP_ParseTCPOptions() == 1)
  9651  002E4A  EC38  F027         	call	_TCP_ParseTCPOptions	;wreg free
  9652  002E4E  06E8               	decf	wreg,f,c
  9653  002E50  A4D8               	btfss	status,2,c
  9654  002E52  0012               	return	
  9655                           
  9656                           ;tcpv4.c: 531: {
  9657                           ;tcpv4.c: 534: if(tcpHeader.syn)
  9658  002E54  0101               	movlb	1	; () banked
  9659  002E56  A3C1               	btfss	(_tcpHeader+13)& (0+255),1,b
  9660  002E58  D01C               	goto	l1278
  9661                           
  9662                           ; BSR set to: 1
  9663                           ;tcpv4.c: 535: {
  9664                           ;tcpv4.c: 536: if(tcpHeader.ack)
  9665  002E5A  A9C1               	btfss	(_tcpHeader+13)& (0+255),4,b
  9666  002E5C  D00D               	goto	l9714
  9667                           
  9668                           ; BSR set to: 1
  9669                           ;tcpv4.c: 537: {
  9670                           ;tcpv4.c: 538: ;
  9671                           ;tcpv4.c: 539: currentTCB->connectionEvent = RCV_SYNACK;
  9672  002E5E  0E2B               	movlw	43
  9673  002E60  D895               	call	PL130	;call to abstracted procedure
  9674  002E62  64F7               	cpfsgt	tblptrh,c
  9675  002E64  D004               	bra	u14587
  9676  002E66  0E05               	movlw	5
  9677  002E68  6EF5               	movwf	tablat,c
  9678  002E6A  000C               	tblwt		*
  9679  002E6C  D004               	bra	u14580
  9680  002E6E                     u14587:
  9681  002E6E  EC3C  F011         	call	PL114	;call to abstracted procedure
  9682  002E72  0E05               	movlw	5
  9683  002E74  D048               	goto	L9
  9684  002E76                     u14580:
  9685                           
  9686                           ;tcpv4.c: 540: } else
  9687  002E76  D057               	goto	l9730
  9688  002E78                     l9714:
  9689                           
  9690                           ; BSR set to: 1
  9691                           ;tcpv4.c: 541: {
  9692                           ;tcpv4.c: 542: ;
  9693                           ;tcpv4.c: 543: currentTCB->connectionEvent = RCV_SYN;
  9694  002E78  0E2B               	movlw	43
  9695  002E7A  D888               	call	PL130	;call to abstracted procedure
  9696  002E7C  64F7               	cpfsgt	tblptrh,c
  9697  002E7E  D004               	bra	u14597
  9698  002E80  0E03               	movlw	3
  9699  002E82  6EF5               	movwf	tablat,c
  9700  002E84  000C               	tblwt		*
  9701  002E86  D004               	bra	u14590
  9702  002E88                     u14597:
  9703  002E88  EC3C  F011         	call	PL114	;call to abstracted procedure
  9704  002E8C  0E03               	movlw	3
  9705  002E8E  D03B               	goto	L9
  9706  002E90                     u14590:
  9707  002E90  D04A               	goto	l9730
  9708  002E92                     l1278:
  9709                           
  9710                           ; BSR set to: 1
  9711  002E92  A1C1               	btfss	(_tcpHeader+13)& (0+255),0,b
  9712  002E94  D01C               	goto	l1282
  9713                           
  9714                           ; BSR set to: 1
  9715                           ;tcpv4.c: 546: {
  9716                           ;tcpv4.c: 547: if(tcpHeader.ack)
  9717  002E96  A9C1               	btfss	(_tcpHeader+13)& (0+255),4,b
  9718  002E98  D00D               	goto	l9720
  9719                           
  9720                           ; BSR set to: 1
  9721                           ;tcpv4.c: 548: {
  9722                           ;tcpv4.c: 549: ;
  9723                           ;tcpv4.c: 550: currentTCB->connectionEvent = RCV_FINACK;
  9724  002E9A  0E2B               	movlw	43
  9725  002E9C  D877               	call	PL130	;call to abstracted procedure
  9726  002E9E  64F7               	cpfsgt	tblptrh,c
  9727  002EA0  D004               	bra	u14627
  9728  002EA2  0E07               	movlw	7
  9729  002EA4  6EF5               	movwf	tablat,c
  9730  002EA6  000C               	tblwt		*
  9731  002EA8  D004               	bra	u14620
  9732  002EAA                     u14627:
  9733  002EAA  EC3C  F011         	call	PL114	;call to abstracted procedure
  9734  002EAE  0E07               	movlw	7
  9735  002EB0  D02A               	goto	L9
  9736  002EB2                     u14620:
  9737                           
  9738                           ;tcpv4.c: 551: } else
  9739  002EB2  D039               	goto	l9730
  9740  002EB4                     l9720:
  9741                           
  9742                           ; BSR set to: 1
  9743                           ;tcpv4.c: 552: {
  9744                           ;tcpv4.c: 553: ;
  9745                           ;tcpv4.c: 554: currentTCB->connectionEvent = RCV_FIN;
  9746  002EB4  0E2B               	movlw	43
  9747  002EB6  D86A               	call	PL130	;call to abstracted procedure
  9748  002EB8  64F7               	cpfsgt	tblptrh,c
  9749  002EBA  D004               	bra	u14637
  9750  002EBC  0E06               	movlw	6
  9751  002EBE  6EF5               	movwf	tablat,c
  9752  002EC0  000C               	tblwt		*
  9753  002EC2  D004               	bra	u14630
  9754  002EC4                     u14637:
  9755  002EC4  EC3C  F011         	call	PL114	;call to abstracted procedure
  9756  002EC8  0E06               	movlw	6
  9757  002ECA  D01D               	goto	L9
  9758  002ECC                     u14630:
  9759  002ECC  D02C               	goto	l9730
  9760  002ECE                     l1282:
  9761                           
  9762                           ; BSR set to: 1
  9763  002ECE  A5C1               	btfss	(_tcpHeader+13)& (0+255),2,b
  9764  002ED0  D01C               	goto	l1286
  9765                           
  9766                           ; BSR set to: 1
  9767                           ;tcpv4.c: 557: {
  9768                           ;tcpv4.c: 558: if(tcpHeader.ack)
  9769  002ED2  A9C1               	btfss	(_tcpHeader+13)& (0+255),4,b
  9770  002ED4  D00D               	goto	l9726
  9771                           
  9772                           ; BSR set to: 1
  9773                           ;tcpv4.c: 559: {
  9774                           ;tcpv4.c: 560: ;
  9775                           ;tcpv4.c: 561: currentTCB->connectionEvent = RCV_RSTACK;
  9776  002ED6  0E2B               	movlw	43
  9777  002ED8  D859               	call	PL130	;call to abstracted procedure
  9778  002EDA  64F7               	cpfsgt	tblptrh,c
  9779  002EDC  D004               	bra	u14667
  9780  002EDE  0E0A               	movlw	10
  9781  002EE0  6EF5               	movwf	tablat,c
  9782  002EE2  000C               	tblwt		*
  9783  002EE4  D004               	bra	u14660
  9784  002EE6                     u14667:
  9785  002EE6  EC3C  F011         	call	PL114	;call to abstracted procedure
  9786  002EEA  0E0A               	movlw	10
  9787  002EEC  D00C               	goto	L9
  9788  002EEE                     u14660:
  9789                           
  9790                           ;tcpv4.c: 562: } else
  9791  002EEE  D01B               	goto	l9730
  9792  002EF0                     l9726:
  9793                           
  9794                           ; BSR set to: 1
  9795                           ;tcpv4.c: 563: {
  9796                           ;tcpv4.c: 564: ;
  9797                           ;tcpv4.c: 565: currentTCB->connectionEvent = RCV_RST;
  9798  002EF0  0E2B               	movlw	43
  9799  002EF2  D84C               	call	PL130	;call to abstracted procedure
  9800  002EF4  64F7               	cpfsgt	tblptrh,c
  9801  002EF6  D004               	bra	u14677
  9802  002EF8  0E09               	movlw	9
  9803  002EFA  6EF5               	movwf	tablat,c
  9804  002EFC  000C               	tblwt		*
  9805  002EFE  D004               	bra	u14670
  9806  002F00                     u14677:
  9807  002F00  EC3C  F011         	call	PL114	;call to abstracted procedure
  9808  002F04  0E09               	movlw	9
  9809  002F06                     L9:
  9810  002F06  6EEF               	movwf	indf0,c
  9811  002F08                     u14670:
  9812  002F08  D00E               	goto	l9730
  9813  002F0A                     l1286:
  9814                           
  9815                           ; BSR set to: 1
  9816  002F0A  A9C1               	btfss	(_tcpHeader+13)& (0+255),4,b
  9817  002F0C  D00C               	goto	l9730
  9818                           
  9819                           ; BSR set to: 1
  9820                           ;tcpv4.c: 568: {
  9821                           ;tcpv4.c: 569: ;
  9822                           ;tcpv4.c: 570: currentTCB->connectionEvent = RCV_ACK;
  9823  002F0E  0E2B               	movlw	43
  9824  002F10  D83D               	call	PL130	;call to abstracted procedure
  9825  002F12  64F7               	cpfsgt	tblptrh,c
  9826  002F14  D004               	bra	u14697
  9827  002F16  0E04               	movlw	4
  9828  002F18  6EF5               	movwf	tablat,c
  9829  002F1A  000C               	tblwt		*
  9830  002F1C  D004               	bra	u14690
  9831  002F1E                     u14697:
  9832  002F1E  EC3C  F011         	call	PL114	;call to abstracted procedure
  9833  002F22  0E04               	movlw	4
  9834  002F24  6EEF               	movwf	indf0,c
  9835  002F26                     u14690:
  9836  002F26                     l9730:
  9837                           
  9838                           ;tcpv4.c: 575: }
  9839                           ;tcpv4.c: 577: tcpHeader.ackNumber = ((((uint32_t)tcpHeader.ackNumber&(uint32_t)0xff0000
      +                          00) >> 24) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)t
      +                          cpHeader.ackNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeader.ackNumber&(uint32
      +                          _
  9840  002F26  0101               	movlb	1	; () banked
  9841  002F28  51BC               	movf	(_tcpHeader+8)& (0+255),w,b
  9842  002F2A  D891               	call	PL296	;call to abstracted procedure
  9843  002F2C  EE21  F0BC         	lfsr	2,_tcpHeader+8
  9844  002F30  D86D               	call	PL198	;call to abstracted procedure
  9845  002F32  C1BC  F0E2         	movff	_tcpHeader+8,??_TCP_Recv+8
  9846  002F36  C1BD  F0E3         	movff	_tcpHeader+9,??_TCP_Recv+9
  9847  002F3A  C1BE  F0E4         	movff	_tcpHeader+10,??_TCP_Recv+10
  9848  002F3E  C1BF  F0E5         	movff	_tcpHeader+11,??_TCP_Recv+11
  9849  002F42  D878               	call	PL240	;call to abstracted procedure
  9850  002F44  EE21  F0BC         	lfsr	2,_tcpHeader+8
  9851  002F48  D831               	call	PL154	;call to abstracted procedure
  9852  002F4A  6FBC               	movwf	(_tcpHeader+8)& (0+255),b
  9853  002F4C  D89C               	call	PL432	;call to abstracted procedure
  9854  002F4E  6FBD               	movwf	(_tcpHeader+9)& (0+255),b
  9855  002F50  D89F               	call	PL434	;call to abstracted procedure
  9856  002F52  6FBE               	movwf	(_tcpHeader+10)& (0+255),b
  9857  002F54  D893               	call	PL430	;call to abstracted procedure
  9858  002F56  6FBF               	movwf	(_tcpHeader+11)& (0+255),b
  9859                           
  9860                           ;tcpv4.c: 578: tcpHeader.sequenceNumber = ((((uint32_t)tcpHeader.sequenceNumber&(uint32_
      +                          t)0xff000000) >> 24) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x00ff0000) >> 8) 
      +                          | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHead
      +                          e
  9861  002F58  51B8               	movf	(_tcpHeader+4)& (0+255),w,b
  9862  002F5A  D879               	call	PL296	;call to abstracted procedure
  9863  002F5C  EE21  F0B8         	lfsr	2,_tcpHeader+4
  9864  002F60  D855               	call	PL198	;call to abstracted procedure
  9865  002F62  C1B8  F0E2         	movff	_tcpHeader+4,??_TCP_Recv+8
  9866  002F66  C1B9  F0E3         	movff	_tcpHeader+5,??_TCP_Recv+9
  9867  002F6A  C1BA  F0E4         	movff	_tcpHeader+6,??_TCP_Recv+10
  9868  002F6E  C1BB  F0E5         	movff	_tcpHeader+7,??_TCP_Recv+11
  9869  002F72  D860               	call	PL240	;call to abstracted procedure
  9870  002F74  EE21  F0B8         	lfsr	2,_tcpHeader+4
  9871  002F78  D819               	call	PL154	;call to abstracted procedure
  9872  002F7A  6FB8               	movwf	(_tcpHeader+4)& (0+255),b
  9873  002F7C  D884               	call	PL432	;call to abstracted procedure
  9874  002F7E  6FB9               	movwf	(_tcpHeader+5)& (0+255),b
  9875  002F80  D887               	call	PL434	;call to abstracted procedure
  9876  002F82  6FBA               	movwf	(_tcpHeader+6)& (0+255),b
  9877  002F84  D87B               	call	PL430	;call to abstracted procedure
  9878  002F86  6FBB               	movwf	(_tcpHeader+7)& (0+255),b
  9879                           
  9880                           ; BSR set to: 1
  9881                           ;tcpv4.c: 580: TCP_FiniteStateMachine();
  9882  002F88  EF5A  F008         	goto	_TCP_FiniteStateMachine	;wreg free
  9883  002F8C                     __end_of_TCP_Recv:
  9884                           	opt stack 0
  9885  002F8C                     PL130:
  9886                           	opt stack 15
  9887  002F8C  25A0               	addwf	_currentTCB& (0+255),w,b
  9888  002F8E  0100               	movlb	0	; () banked
  9889  002F90  6FDA               	movwf	??_TCP_Recv& (0+255),b
  9890  002F92  0E00               	movlw	0
  9891  002F94  0101               	movlb	1	; () banked
  9892  002F96  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
  9893  002F98  0100               	movlb	0	; () banked
  9894  002F9A  6FDB               	movwf	(??_TCP_Recv+1)& (0+255),b
  9895  002F9C  C0DA  FFF6         	movff	??_TCP_Recv,tblptrl
  9896  002FA0  C0DB  FFF7         	movff	??_TCP_Recv+1,tblptrh
  9897  002FA4  0E00               	movlw	low (__smallconst shr (0+16))
  9898  002FA6  6EF8               	movwf	tblptru,c
  9899  002FA8  0E0F               	movlw	(high __ramtop+-1)
  9900  002FAA  0012               	return	
  9901  002FAC                     __end_ofPL130:
  9902                           	opt stack 0
  9903  002FAC                     PL154:
  9904                           	opt stack 15
  9905  002FAC  14DE               	andwf	postinc2,w,c
  9906  002FAE  6FEA               	movwf	(??_TCP_Recv+16)& (0+255),b
  9907  002FB0  0E00               	movlw	0
  9908  002FB2  14DE               	andwf	postinc2,w,c
  9909  002FB4  6FEB               	movwf	(??_TCP_Recv+17)& (0+255),b
  9910  002FB6  0E00               	movlw	0
  9911  002FB8  14DE               	andwf	postinc2,w,c
  9912  002FBA  6FEC               	movwf	(??_TCP_Recv+18)& (0+255),b
  9913  002FBC  0EFF               	movlw	255
  9914  002FBE  14DE               	andwf	postinc2,w,c
  9915  002FC0  6FED               	movwf	(??_TCP_Recv+19)& (0+255),b
  9916  002FC2  0E19               	movlw	25
  9917  002FC4  D005               	goto	u14700
  9918  002FC6                     u14705:
  9919  002FC6  90D8               	bcf	status,0,c
  9920  002FC8  33ED               	rrcf	(??_TCP_Recv+19)& (0+255),f,b
  9921  002FCA  33EC               	rrcf	(??_TCP_Recv+18)& (0+255),f,b
  9922  002FCC  33EB               	rrcf	(??_TCP_Recv+17)& (0+255),f,b
  9923  002FCE  33EA               	rrcf	(??_TCP_Recv+16)& (0+255),f,b
  9924  002FD0                     u14700:
  9925  002FD0  2EE8               	decfsz	wreg,f,c
  9926  002FD2  D7F9               	goto	u14705
  9927  002FD4  51E6               	movf	(??_TCP_Recv+12)& (0+255),w,b
  9928  002FD6  11EA               	iorwf	(??_TCP_Recv+16)& (0+255),w,b
  9929  002FD8  6FEE               	movwf	(??_TCP_Recv+20)& (0+255),b
  9930  002FDA  51E7               	movf	(??_TCP_Recv+13)& (0+255),w,b
  9931  002FDC  11EB               	iorwf	(??_TCP_Recv+17)& (0+255),w,b
  9932  002FDE  6FEF               	movwf	(??_TCP_Recv+21)& (0+255),b
  9933  002FE0  51E8               	movf	(??_TCP_Recv+14)& (0+255),w,b
  9934  002FE2  11EC               	iorwf	(??_TCP_Recv+18)& (0+255),w,b
  9935  002FE4  6FF0               	movwf	(??_TCP_Recv+22)& (0+255),b
  9936  002FE6  51E9               	movf	(??_TCP_Recv+15)& (0+255),w,b
  9937  002FE8  11ED               	iorwf	(??_TCP_Recv+19)& (0+255),w,b
  9938  002FEA  6FF1               	movwf	(??_TCP_Recv+23)& (0+255),b
  9939  002FEC  51DE               	movf	(??_TCP_Recv+4)& (0+255),w,b
  9940  002FEE  11EE               	iorwf	(??_TCP_Recv+20)& (0+255),w,b
  9941  002FF0  6FF2               	movwf	(??_TCP_Recv+24)& (0+255),b
  9942  002FF2  51DF               	movf	(??_TCP_Recv+5)& (0+255),w,b
  9943  002FF4  11EF               	iorwf	(??_TCP_Recv+21)& (0+255),w,b
  9944  002FF6  6FF3               	movwf	(??_TCP_Recv+25)& (0+255),b
  9945  002FF8  51E0               	movf	(??_TCP_Recv+6)& (0+255),w,b
  9946  002FFA  11F0               	iorwf	(??_TCP_Recv+22)& (0+255),w,b
  9947  002FFC  6FF4               	movwf	(??_TCP_Recv+26)& (0+255),b
  9948  002FFE  51E1               	movf	(??_TCP_Recv+7)& (0+255),w,b
  9949  003000  11F1               	iorwf	(??_TCP_Recv+23)& (0+255),w,b
  9950  003002  6FF5               	movwf	(??_TCP_Recv+27)& (0+255),b
  9951  003004  51DA               	movf	??_TCP_Recv& (0+255),w,b
  9952  003006  11F2               	iorwf	(??_TCP_Recv+24)& (0+255),w,b
  9953  003008  0101               	movlb	1	; () banked
  9954  00300A  0012               	return	
  9955  00300C                     __end_ofPL154:
  9956                           	opt stack 0
  9957  00300C                     PL198:
  9958                           	opt stack 15
  9959  00300C  0E00               	movlw	0
  9960  00300E  14DE               	andwf	postinc2,w,c
  9961  003010  6FDE               	movwf	(??_TCP_Recv+4)& (0+255),b
  9962  003012  0EFF               	movlw	255
  9963  003014  14DE               	andwf	postinc2,w,c
  9964  003016  6FDF               	movwf	(??_TCP_Recv+5)& (0+255),b
  9965  003018  0E00               	movlw	0
  9966  00301A  14DE               	andwf	postinc2,w,c
  9967  00301C  6FE0               	movwf	(??_TCP_Recv+6)& (0+255),b
  9968  00301E  0E00               	movlw	0
  9969  003020  14DE               	andwf	postinc2,w,c
  9970  003022  6FE1               	movwf	(??_TCP_Recv+7)& (0+255),b
  9971  003024  C0E0  F0E1         	movff	??_TCP_Recv+6,??_TCP_Recv+7
  9972  003028  C0DF  F0E0         	movff	??_TCP_Recv+5,??_TCP_Recv+6
  9973  00302C  C0DE  F0DF         	movff	??_TCP_Recv+4,??_TCP_Recv+5
  9974  003030  6BDE               	clrf	(??_TCP_Recv+4)& (0+255),b
  9975  003032  0012               	return	
  9976  003034                     __end_ofPL198:
  9977                           	opt stack 0
  9978  003034                     PL240:
  9979                           	opt stack 15
  9980  003034  C0E3  F0E2         	movff	??_TCP_Recv+9,??_TCP_Recv+8
  9981  003038  C0E4  F0E3         	movff	??_TCP_Recv+10,??_TCP_Recv+9
  9982  00303C  C0E5  F0E4         	movff	??_TCP_Recv+11,??_TCP_Recv+10
  9983  003040  6BE5               	clrf	(??_TCP_Recv+11)& (0+255),b
  9984  003042  6BE6               	clrf	(??_TCP_Recv+12)& (0+255),b
  9985  003044  51E3               	movf	(??_TCP_Recv+9)& (0+255),w,b
  9986  003046  6FE7               	movwf	(??_TCP_Recv+13)& (0+255),b
  9987  003048  6BE8               	clrf	(??_TCP_Recv+14)& (0+255),b
  9988  00304A  6BE9               	clrf	(??_TCP_Recv+15)& (0+255),b
  9989  00304C  0C00               	retlw	0
  9990  00304E                     __end_ofPL240:
  9991                           	opt stack 0
  9992  00304E                     PL296:
  9993                           	opt stack 15
  9994  00304E  0100               	movlb	0	; () banked
  9995  003050  6FDA               	movwf	??_TCP_Recv& (0+255),b
  9996  003052  6BDB               	clrf	(??_TCP_Recv+1)& (0+255),b
  9997  003054  6BDC               	clrf	(??_TCP_Recv+2)& (0+255),b
  9998  003056  6BDD               	clrf	(??_TCP_Recv+3)& (0+255),b
  9999  003058  C0DA  F0DD         	movff	??_TCP_Recv,??_TCP_Recv+3
 10000  00305C  6BDC               	clrf	(??_TCP_Recv+2)& (0+255),b
 10001  00305E  6BDB               	clrf	(??_TCP_Recv+1)& (0+255),b
 10002  003060  6BDA               	clrf	??_TCP_Recv& (0+255),b
 10003  003062  0012               	return	
 10004  003064                     __end_ofPL296:
 10005                           	opt stack 0
 10006  003064                     PL368:
 10007                           	opt stack 15
 10008  003064  0009               	tblrd		*+
 10009  003066  CFF5 F0DC          	movff	tablat,??_TCP_Recv+2
 10010  00306A  0009               	tblrd		*+
 10011  00306C  CFF5 F0DD          	movff	tablat,??_TCP_Recv+3
 10012  003070  0012               	return	
 10013  003072                     __end_ofPL368:
 10014                           	opt stack 0
 10015  003072                     PL420:
 10016                           	opt stack 15
 10017  003072  CFEE F0DC          	movff	postinc0,??_TCP_Recv+2
 10018  003076  CFEE F0DD          	movff	postinc0,??_TCP_Recv+3
 10019  00307A  0012               	return	
 10020  00307C                     __end_ofPL420:
 10021                           	opt stack 0
 10022  00307C                     PL430:
 10023                           	opt stack 15
 10024  00307C  0100               	movlb	0	; () banked
 10025  00307E  51DD               	movf	(??_TCP_Recv+3)& (0+255),w,b
 10026  003080  11F5               	iorwf	(??_TCP_Recv+27)& (0+255),w,b
 10027  003082  0101               	movlb	1	; () banked
 10028  003084  0012               	return	
 10029  003086                     __end_ofPL430:
 10030                           	opt stack 0
 10031  003086                     PL432:
 10032                           	opt stack 15
 10033  003086  0100               	movlb	0	; () banked
 10034  003088  51DB               	movf	(??_TCP_Recv+1)& (0+255),w,b
 10035  00308A  11F3               	iorwf	(??_TCP_Recv+25)& (0+255),w,b
 10036  00308C  0101               	movlb	1	; () banked
 10037  00308E  0012               	return	
 10038  003090                     __end_ofPL432:
 10039                           	opt stack 0
 10040  003090                     PL434:
 10041                           	opt stack 15
 10042  003090  0100               	movlb	0	; () banked
 10043  003092  51DC               	movf	(??_TCP_Recv+2)& (0+255),w,b
 10044  003094  11F4               	iorwf	(??_TCP_Recv+26)& (0+255),w,b
 10045  003096  0101               	movlb	1	; () banked
 10046  003098  0012               	return	
 10047  00309A                     __end_ofPL434:
 10048                           	opt stack 0
 10049  00309A                     PL444:
 10050                           	opt stack 15
 10051  00309A  6E04               	movwf	ETH_ReadBlock@data+1,c
 10052  00309C  6A06               	clrf	ETH_ReadBlock@length+1,c
 10053  00309E  0E14               	movlw	20
 10054  0030A0  6E05               	movwf	ETH_ReadBlock@length,c
 10055  0030A2  0C14               	retlw	20
 10056  0030A4                     __end_ofPL444:
 10057                           	opt stack 0
 10058  0030A4                     PL448:
 10059                           	opt stack 15
 10060  0030A4  6BDD               	clrf	(??_TCP_Recv+3)& (0+255),b
 10061  0030A6  51DA               	movf	??_TCP_Recv& (0+255),w,b
 10062  0030A8  11DC               	iorwf	(??_TCP_Recv+2)& (0+255),w,b
 10063  0030AA  0101               	movlb	1	; () banked
 10064  0030AC  0012               	return	
 10065  0030AE                     __end_ofPL448:
 10066                           	opt stack 0
 10067  0030AE                     PL482:
 10068                           	opt stack 15
 10069  0030AE  0100               	movlb	0	; () banked
 10070  0030B0  51DB               	movf	(??_TCP_Recv+1)& (0+255),w,b
 10071  0030B2  11DD               	iorwf	(??_TCP_Recv+3)& (0+255),w,b
 10072  0030B4  0101               	movlb	1	; () banked
 10073  0030B6  0012               	return	
 10074  0030B8                     __end_ofPL482:
 10075                           	opt stack 0
 10076                           tosu	equ	0xFFF
 10077                           tosh	equ	0xFFE
 10078                           tosl	equ	0xFFD
 10079                           pclath	equ	0xFFA
 10080                           tblptru	equ	0xFF8
 10081                           tblptrh	equ	0xFF7
 10082                           tblptrl	equ	0xFF6
 10083                           tablat	equ	0xFF5
 10084                           prodh	equ	0xFF4
 10085                           prodl	equ	0xFF3
 10086                           intcon	equ	0xFF2
 10087                           intcon2	equ	0xFF1
 10088                           indf0	equ	0xFEF
 10089                           postinc0	equ	0xFEE
 10090                           fsr0h	equ	0xFEA
 10091                           fsr0l	equ	0xFE9
 10092                           wreg	equ	0xFE8
 10093                           postinc1	equ	0xFE6
 10094                           plusw1	equ	0xFE3
 10095                           fsr1h	equ	0xFE2
 10096                           fsr1l	equ	0xFE1
 10097                           bsr	equ	0xFE0
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           plusw2	equ	0xFDB
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _TCP_ParseTCPOptions *****************
 10107 ;; Defined at:
 10108 ;;		line 356 in file "../../TCPIP Library/source/tcpv4.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;		None
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  tcpOptionsSi    2   18[COMRAM] unsigned int 
 10113 ;;  opt             1   17[COMRAM] unsigned char 
 10114 ;;  ret             1   16[COMRAM] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      unsigned char 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : F/1
 10121 ;;		On exit  : C/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;Total ram usage:        6 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    7
 10131 ;; This function calls:
 10132 ;;		_ETH_Dump
 10133 ;;		_ETH_Read16
 10134 ;;		_ETH_Read8
 10135 ;; This function is called by:
 10136 ;;		_TCP_Recv
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           	psect	text45
 10141  004E70                     __ptext45:
 10142                           	opt stack 0
 10143  004E70                     _TCP_ParseTCPOptions:
 10144                           	opt stack 19
 10145                           
 10146                           ; BSR set to: 1
 10147                           ;tcpv4.c: 358: uint8_t opt;
 10148                           ;tcpv4.c: 359: uint16_t tcpOptionsSize;
 10149                           ;tcpv4.c: 360: bool ret;
 10150                           ;tcpv4.c: 362: ret = 0;
 10151                           
 10152                           ;incstack = 0
 10153  004E70  6A11               	clrf	TCP_ParseTCPOptions@ret,c
 10154                           
 10155                           ; BSR set to: 1
 10156                           ;tcpv4.c: 364: tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeade
      +                          r_t));
 10157  004E72  39C0               	swapf	(_tcpHeader+12)& (0+255),w,b
 10158  004E74  0B0F               	andlw	15
 10159  004E76  6E0F               	movwf	??_TCP_ParseTCPOptions& (0+255),c
 10160  004E78  6A10               	clrf	(??_TCP_ParseTCPOptions+1)& (0+255),c
 10161  004E7A  90D8               	bcf	status,0,c
 10162  004E7C  360F               	rlcf	??_TCP_ParseTCPOptions,f,c
 10163  004E7E  3610               	rlcf	??_TCP_ParseTCPOptions+1,f,c
 10164  004E80  90D8               	bcf	status,0,c
 10165  004E82  360F               	rlcf	??_TCP_ParseTCPOptions,f,c
 10166  004E84  3610               	rlcf	??_TCP_ParseTCPOptions+1,f,c
 10167  004E86  0EEC               	movlw	236
 10168  004E88  240F               	addwf	??_TCP_ParseTCPOptions,w,c
 10169  004E8A  6E13               	movwf	TCP_ParseTCPOptions@tcpOptionsSize,c
 10170  004E8C  0EFF               	movlw	255
 10171  004E8E  2010               	addwfc	??_TCP_ParseTCPOptions+1,w,c
 10172  004E90  6E14               	movwf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
 10173                           
 10174                           ;tcpv4.c: 366: if (tcpOptionsSize > 0)
 10175  004E92  1013               	iorwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
 10176  004E94  E06B               	bz	l8942
 10177                           
 10178                           ; BSR set to: 1
 10179                           ;tcpv4.c: 367: {
 10180                           ;tcpv4.c: 370: tcpMss = 536;
 10181  004E96  0E02               	movlw	2
 10182  004E98  6FAF               	movwf	(_tcpMss+1)& (0+255),b
 10183  004E9A  0E18               	movlw	24
 10184  004E9C  6FAE               	movwf	_tcpMss& (0+255),b
 10185                           
 10186                           ; BSR set to: 1
 10187                           ;tcpv4.c: 372: if(tcpHeader.syn)
 10188  004E9E  A3C1               	btfss	(_tcpHeader+13)& (0+255),1,b
 10189  004EA0  D062               	goto	l8940
 10190  004EA2  D059               	goto	l8938
 10191  004EA4                     l8896:
 10192                           
 10193                           ;tcpv4.c: 376: {
 10194                           ;tcpv4.c: 377: opt = ETH_Read8();
 10195  004EA4  EC91  F030         	call	_ETH_Read8	;wreg free
 10196  004EA8  6E12               	movwf	TCP_ParseTCPOptions@opt,c
 10197                           
 10198                           ;tcpv4.c: 378: switch (opt)
 10199  004EAA  D04E               	goto	l8936
 10200  004EAC                     l8898:
 10201                           
 10202                           ; BSR set to: 1
 10203                           ;tcpv4.c: 382: if (tcpOptionsSize)
 10204  004EAC  5013               	movf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
 10205  004EAE  1014               	iorwf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
 10206  004EB0  E005               	bz	l8904
 10207                           
 10208                           ; BSR set to: 1
 10209                           ;tcpv4.c: 383: {
 10210                           ;tcpv4.c: 385: ETH_Dump(tcpOptionsSize);
 10211  004EB2  D860               	call	PL414	;call to abstracted procedure
 10212  004EB4  ECDF  F02E         	call	_ETH_Dump	;wreg free
 10213                           
 10214                           ; BSR set to: 2
 10215                           ;tcpv4.c: 386: tcpOptionsSize = 0;
 10216  004EB8  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
 10217  004EBA  6A14               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
 10218  004EBC                     l8904:
 10219                           
 10220                           ;tcpv4.c: 387: }
 10221                           ;tcpv4.c: 388: ret = 1;
 10222  004EBC  0E01               	movlw	1
 10223  004EBE  6E11               	movwf	TCP_ParseTCPOptions@ret,c
 10224                           
 10225                           ;tcpv4.c: 389: break;
 10226  004EC0  D04A               	goto	l8938
 10227  004EC2                     l8906:
 10228                           
 10229                           ; BSR set to: 1
 10230                           ;tcpv4.c: 394: if (tcpOptionsSize >= 3)
 10231  004EC2  5014               	movf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
 10232  004EC4  E103               	bnz	u12070
 10233  004EC6  0E03               	movlw	3
 10234  004EC8  5C13               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
 10235  004ECA  E31D               	bnc	l1249
 10236  004ECC                     u12070:
 10237                           
 10238                           ; BSR set to: 1
 10239                           ;tcpv4.c: 395: {
 10240                           ;tcpv4.c: 396: opt = ETH_Read8();
 10241  004ECC  EC91  F030         	call	_ETH_Read8	;wreg free
 10242  004ED0  6E12               	movwf	TCP_ParseTCPOptions@opt,c
 10243                           
 10244                           ; BSR set to: 1
 10245                           ;tcpv4.c: 397: if (opt == 0x04)
 10246  004ED2  0E04               	movlw	4
 10247  004ED4  1812               	xorwf	TCP_ParseTCPOptions@opt,w,c
 10248  004ED6  E114               	bnz	l1250
 10249                           
 10250                           ; BSR set to: 1
 10251                           ;tcpv4.c: 398: {
 10252                           ;tcpv4.c: 400: tcpMss = ETH_Read16();
 10253  004ED8  EC6E  F02E         	call	_ETH_Read16	;wreg free
 10254  004EDC  C003  F1AE         	movff	?_ETH_Read16,_tcpMss
 10255  004EE0  C004  F1AF         	movff	?_ETH_Read16+1,_tcpMss+1
 10256                           
 10257                           ; BSR set to: 1
 10258                           ;tcpv4.c: 402: tcpOptionsSize = tcpOptionsSize - 3;
 10259  004EE4  0EFD               	movlw	253
 10260  004EE6  2613               	addwf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
 10261  004EE8  0EFF               	movlw	255
 10262  004EEA  2214               	addwfc	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
 10263                           
 10264                           ; BSR set to: 1
 10265                           ;tcpv4.c: 405: if (tcpMss > 1460u)
 10266  004EEC  0EB5               	movlw	181
 10267  004EEE  5DAE               	subwf	_tcpMss& (0+255),w,b
 10268  004EF0  0E05               	movlw	5
 10269  004EF2  59AF               	subwfb	(_tcpMss+1)& (0+255),w,b
 10270  004EF4  E3E3               	bnc	l8904
 10271                           
 10272                           ; BSR set to: 1
 10273                           ;tcpv4.c: 406: {
 10274                           ;tcpv4.c: 407: tcpMss = 1460u;
 10275  004EF6  0E05               	movlw	5
 10276  004EF8  6FAF               	movwf	(_tcpMss+1)& (0+255),b
 10277  004EFA  0EB4               	movlw	180
 10278  004EFC  6FAE               	movwf	_tcpMss& (0+255),b
 10279  004EFE  D7DE               	goto	l8904
 10280  004F00                     l1250:
 10281                           
 10282                           ; BSR set to: 1
 10283                           ;tcpv4.c: 412: {
 10284                           ;tcpv4.c: 414: ;
 10285                           ;tcpv4.c: 416: tcpOptionsSize = 0;
 10286  004F00  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
 10287  004F02  6A14               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
 10288  004F04  D028               	goto	l8938
 10289  004F06                     l1249:
 10290                           
 10291                           ; BSR set to: 1
 10292                           ;tcpv4.c: 419: {
 10293                           ;tcpv4.c: 421: tcpOptionsSize = 0;
 10294  004F06  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
 10295  004F08  6A14               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
 10296                           
 10297                           ;tcpv4.c: 422: ret = 0;
 10298  004F0A  6A11               	clrf	TCP_ParseTCPOptions@ret,c
 10299  004F0C  D024               	goto	l8938
 10300  004F0E                     l8920:
 10301                           
 10302                           ; BSR set to: 1
 10303                           ;tcpv4.c: 426: ;
 10304                           ;tcpv4.c: 427: opt = ETH_Read8();
 10305  004F0E  EC91  F030         	call	_ETH_Read8	;wreg free
 10306  004F12  6E12               	movwf	TCP_ParseTCPOptions@opt,c
 10307                           
 10308                           ; BSR set to: 1
 10309                           ;tcpv4.c: 428: tcpOptionsSize--;
 10310  004F14  0613               	decf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
 10311  004F16  A0D8               	btfss	status,0,c
 10312  004F18  0614               	decf	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
 10313                           
 10314                           ; BSR set to: 1
 10315                           ;tcpv4.c: 430: if (opt > 1)
 10316  004F1A  0E01               	movlw	1
 10317  004F1C  6412               	cpfsgt	TCP_ParseTCPOptions@opt,c
 10318  004F1E  D7F3               	goto	l1249
 10319                           
 10320                           ; BSR set to: 1
 10321                           ;tcpv4.c: 431: {
 10322                           ;tcpv4.c: 433: opt = opt - 2;
 10323  004F20  0EFE               	movlw	254
 10324  004F22  2612               	addwf	TCP_ParseTCPOptions@opt,f,c
 10325                           
 10326                           ;tcpv4.c: 434: if (opt <= tcpOptionsSize)
 10327  004F24  5012               	movf	TCP_ParseTCPOptions@opt,w,c
 10328  004F26  6E0F               	movwf	??_TCP_ParseTCPOptions& (0+255),c
 10329  004F28  6A10               	clrf	(??_TCP_ParseTCPOptions+1)& (0+255),c
 10330  004F2A  500F               	movf	??_TCP_ParseTCPOptions,w,c
 10331  004F2C  5C13               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
 10332  004F2E  5010               	movf	??_TCP_ParseTCPOptions+1,w,c
 10333  004F30  5814               	subwfb	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
 10334  004F32  E3E9               	bnc	l1249
 10335                           
 10336                           ; BSR set to: 1
 10337                           ;tcpv4.c: 435: {
 10338                           ;tcpv4.c: 437: ETH_Dump(opt);
 10339  004F34  C012  F00B         	movff	TCP_ParseTCPOptions@opt,ETH_Dump@length
 10340  004F38  6A0C               	clrf	ETH_Dump@length+1,c
 10341  004F3A  ECDF  F02E         	call	_ETH_Dump	;wreg free
 10342                           
 10343                           ; BSR set to: 2
 10344                           ;tcpv4.c: 438: tcpOptionsSize = tcpOptionsSize - opt;
 10345  004F3E  5012               	movf	TCP_ParseTCPOptions@opt,w,c
 10346  004F40  5E13               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
 10347  004F42  0E00               	movlw	0
 10348  004F44  5A14               	subwfb	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
 10349  004F46  D7BA               	goto	l8904
 10350  004F48                     l8936:
 10351                           
 10352                           ; BSR set to: 1
 10353  004F48  5012               	movf	TCP_ParseTCPOptions@opt,w,c
 10354                           
 10355                           ; Switch size 1, requested type "space"
 10356                           ; Number of cases is 3, Range of values is 0 to 2
 10357                           ; switch strategies available:
 10358                           ; Name         Instructions Cycles
 10359                           ; simple_byte           10     6 (average)
 10360                           ;	Chosen strategy is simple_byte
 10361  004F4A  E0B0               	bz	l8898
 10362  004F4C  0A01               	xorlw	1	; case 1
 10363  004F4E  E003               	bz	l8938
 10364  004F50  0A03               	xorlw	3	; case 2
 10365  004F52  E0B7               	bz	l8906
 10366  004F54  D7DC               	goto	l8920
 10367  004F56                     l8938:
 10368  004F56  0613               	decf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
 10369  004F58  A0D8               	btfss	status,0,c
 10370  004F5A  0614               	decf	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
 10371  004F5C  2813               	incf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
 10372  004F5E  E1A2               	bnz	l8896
 10373  004F60  2814               	incf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
 10374  004F62  E006               	bz	l1261
 10375  004F64  D79F               	goto	l8896
 10376  004F66                     l8940:
 10377                           
 10378                           ; BSR set to: 1
 10379                           ;tcpv4.c: 459: {
 10380                           ;tcpv4.c: 460: ETH_Dump(tcpOptionsSize);
 10381  004F66  D806               	call	PL414	;call to abstracted procedure
 10382  004F68  ECDF  F02E         	call	_ETH_Dump	;wreg free
 10383  004F6C                     l8942:
 10384                           
 10385                           ;tcpv4.c: 461: ret = 1;
 10386  004F6C  0E01               	movlw	1
 10387  004F6E  6E11               	movwf	TCP_ParseTCPOptions@ret,c
 10388  004F70                     l1261:
 10389                           
 10390                           ;tcpv4.c: 466: }
 10391                           ;tcpv4.c: 468: return ret;
 10392  004F70  5011               	movf	TCP_ParseTCPOptions@ret,w,c
 10393  004F72  0012               	return		;funcret
 10394  004F74                     __end_of_TCP_ParseTCPOptions:
 10395                           	opt stack 0
 10396  004F74                     PL414:
 10397                           	opt stack 19
 10398  004F74  C013  F00B         	movff	TCP_ParseTCPOptions@tcpOptionsSize,ETH_Dump@length
 10399  004F78  C014  F00C         	movff	TCP_ParseTCPOptions@tcpOptionsSize+1,ETH_Dump@length+1
 10400  004F7C  0012               	return	
 10401  004F7E                     __end_ofPL414:
 10402                           	opt stack 0
 10403                           tosu	equ	0xFFF
 10404                           tosh	equ	0xFFE
 10405                           tosl	equ	0xFFD
 10406                           pclath	equ	0xFFA
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           intcon2	equ	0xFF1
 10415                           indf0	equ	0xFEF
 10416                           postinc0	equ	0xFEE
 10417                           fsr0h	equ	0xFEA
 10418                           fsr0l	equ	0xFE9
 10419                           wreg	equ	0xFE8
 10420                           postinc1	equ	0xFE6
 10421                           plusw1	equ	0xFE3
 10422                           fsr1h	equ	0xFE2
 10423                           fsr1l	equ	0xFE1
 10424                           bsr	equ	0xFE0
 10425                           indf2	equ	0xFDF
 10426                           postinc2	equ	0xFDE
 10427                           postdec2	equ	0xFDD
 10428                           plusw2	equ	0xFDB
 10429                           fsr2h	equ	0xFDA
 10430                           fsr2l	equ	0xFD9
 10431                           status	equ	0xFD8
 10432                           
 10433 ;; *************** function _ETH_Read8 *****************
 10434 ;; Defined at:
 10435 ;;		line 228 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;		None
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;  ret             1    2[COMRAM] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      unsigned char 
 10442 ;; Registers used:
 10443 ;;		wreg, status,2, status,0, cstack
 10444 ;; Tracked objects:
 10445 ;;		On entry : C/1
 10446 ;;		On exit  : F/1
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;Total ram usage:        1 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    4
 10456 ;; This function calls:
 10457 ;;		_SPI_ExchangeByte
 10458 ;; This function is called by:
 10459 ;;		_DHCP_Handler
 10460 ;;		_TCP_ParseTCPOptions
 10461 ;;		_UDP_Read8
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           	psect	text46
 10466  006122                     __ptext46:
 10467                           	opt stack 0
 10468  006122                     _ETH_Read8:
 10469                           	opt stack 21
 10470                           
 10471                           ;encX24j600_spi.c: 230: uint8_t ret;
 10472                           ;encX24j600_spi.c: 231: if(rxPacketStatusVector.ByteCount >= sizeof(ret))
 10473                           
 10474                           ;incstack = 0
 10475  006122  0102               	movlb	2	; () banked
 10476  006124  5118               	movf	_rxPacketStatusVector& (0+255),w,b
 10477  006126  1119               	iorwf	(_rxPacketStatusVector+1)& (0+255),w,b
 10478  006128  E011               	bz	l608
 10479                           
 10480                           ; BSR set to: 2
 10481                           
 10482                           ;encX24j600_spi.c: 232: {
 10483                           ;encX24j600_spi.c: 233: do{LATB3 = 0;} while(0);
 10484  00612A  968A               	bcf	3978,3,c	;volatile
 10485                           
 10486                           ; BSR set to: 2
 10487                           ;encX24j600_spi.c: 234: SPI_ExchangeByte(rrxdata_inst);
 10488  00612C  0E2C               	movlw	44
 10489  00612E  ECF3  F032         	call	_SPI_ExchangeByte
 10490                           
 10491                           ;encX24j600_spi.c: 235: ret = SPI_ExchangeByte(0);
 10492  006132  0E00               	movlw	0
 10493  006134  ECF3  F032         	call	_SPI_ExchangeByte
 10494  006138  6E03               	movwf	ETH_Read8@ret,c
 10495  00613A  868A               	bsf	3978,3,c	;volatile
 10496                           
 10497                           ;encX24j600_spi.c: 237: rxPacketStatusVector.ByteCount -= sizeof(ret);
 10498  00613C  0102               	movlb	2	; () banked
 10499  00613E  0718               	decf	_rxPacketStatusVector& (0+255),f,b
 10500  006140  A0D8               	btfss	status,0,c
 10501  006142  0719               	decf	(_rxPacketStatusVector+1)& (0+255),f,b
 10502                           
 10503                           ; BSR set to: 2
 10504                           ;encX24j600_spi.c: 238: ethData.error = 0;
 10505  006144  0101               	movlb	1	; () banked
 10506  006146  9183               	bcf	_ethData& (0+255),0,b	;volatile
 10507                           
 10508                           ; BSR set to: 1
 10509                           ;encX24j600_spi.c: 239: return ret;
 10510  006148  5003               	movf	ETH_Read8@ret,w,c
 10511  00614A  0012               	return	
 10512  00614C                     l608:
 10513                           
 10514                           ; BSR set to: 2
 10515                           ;encX24j600_spi.c: 241: else
 10516                           ;encX24j600_spi.c: 242: {
 10517                           ;encX24j600_spi.c: 243: ethData.error = 1;
 10518  00614C  0101               	movlb	1	; () banked
 10519  00614E  8183               	bsf	_ethData& (0+255),0,b	;volatile
 10520                           
 10521                           ; BSR set to: 1
 10522                           
 10523                           ; BSR set to: 1
 10524                           ;encX24j600_spi.c: 244: return 0;
 10525  006150  0C00               	retlw	0	;funcret
 10526  006152                     __end_of_ETH_Read8:
 10527                           	opt stack 0
 10528                           tosu	equ	0xFFF
 10529                           tosh	equ	0xFFE
 10530                           tosl	equ	0xFFD
 10531                           pclath	equ	0xFFA
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           intcon2	equ	0xFF1
 10540                           indf0	equ	0xFEF
 10541                           postinc0	equ	0xFEE
 10542                           fsr0h	equ	0xFEA
 10543                           fsr0l	equ	0xFE9
 10544                           wreg	equ	0xFE8
 10545                           postinc1	equ	0xFE6
 10546                           plusw1	equ	0xFE3
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           bsr	equ	0xFE0
 10550                           indf2	equ	0xFDF
 10551                           postinc2	equ	0xFDE
 10552                           postdec2	equ	0xFDD
 10553                           plusw2	equ	0xFDB
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _ETH_Read16 *****************
 10559 ;; Defined at:
 10560 ;;		line 252 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;  ret             2    4[COMRAM] unsigned int 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  2    2[COMRAM] unsigned int 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2, status,0, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : F/1
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:        4 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    4
 10581 ;; This function calls:
 10582 ;;		_SPI_ExchangeByte
 10583 ;; This function is called by:
 10584 ;;		_DHCP_Handler
 10585 ;;		_TCP_ParseTCPOptions
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text47
 10590  005CDC                     __ptext47:
 10591                           	opt stack 0
 10592  005CDC                     _ETH_Read16:
 10593                           	opt stack 21
 10594                           
 10595                           ;encX24j600_spi.c: 254: uint16_t ret;
 10596                           ;encX24j600_spi.c: 255: if(rxPacketStatusVector.ByteCount >= sizeof(ret))
 10597                           
 10598                           ; BSR set to: 1
 10599                           ;incstack = 0
 10600  005CDC  0102               	movlb	2	; () banked
 10601  005CDE  5119               	movf	(_rxPacketStatusVector+1)& (0+255),w,b
 10602  005CE0  E103               	bnz	u11520
 10603  005CE2  0E02               	movlw	2
 10604  005CE4  5D18               	subwf	_rxPacketStatusVector& (0+255),w,b
 10605  005CE6  E314               	bnc	l617
 10606  005CE8                     u11520:
 10607                           
 10608                           ; BSR set to: 2
 10609                           
 10610                           ;encX24j600_spi.c: 256: {
 10611                           ;encX24j600_spi.c: 257: do{LATB3 = 0;} while(0);
 10612  005CE8  968A               	bcf	3978,3,c	;volatile
 10613                           
 10614                           ; BSR set to: 2
 10615                           ;encX24j600_spi.c: 258: SPI_ExchangeByte(rrxdata_inst);
 10616  005CEA  0E2C               	movlw	44
 10617  005CEC  ECF3  F032         	call	_SPI_ExchangeByte
 10618                           
 10619                           ;encX24j600_spi.c: 259: ((uint8_t *)&ret)[1] = SPI_ExchangeByte(0);
 10620  005CF0  0E00               	movlw	0
 10621  005CF2  ECF3  F032         	call	_SPI_ExchangeByte
 10622  005CF6  6E06               	movwf	ETH_Read16@ret+1,c
 10623                           
 10624                           ;encX24j600_spi.c: 260: ((uint8_t *)&ret)[0] = SPI_ExchangeByte(0);
 10625  005CF8  0E00               	movlw	0
 10626  005CFA  ECF3  F032         	call	_SPI_ExchangeByte
 10627  005CFE  6E05               	movwf	ETH_Read16@ret,c
 10628  005D00  868A               	bsf	3978,3,c	;volatile
 10629                           
 10630                           ;encX24j600_spi.c: 262: rxPacketStatusVector.ByteCount -= sizeof(ret);
 10631  005D02  0E02               	movlw	2
 10632                           
 10633                           ; BSR set to: 2
 10634                           ;encX24j600_spi.c: 263: ethData.error = 0;
 10635  005D04  D80A               	call	PL370	;call to abstracted procedure
 10636                           
 10637                           ; BSR set to: 1
 10638                           ;encX24j600_spi.c: 264: return ret;
 10639  005D06  C005  F003         	movff	ETH_Read16@ret,?_ETH_Read16
 10640  005D0A  C006  F004         	movff	ETH_Read16@ret+1,?_ETH_Read16+1
 10641  005D0E  0C00               	retlw	0
 10642  005D10                     l617:
 10643                           
 10644                           ; BSR set to: 2
 10645                           ;encX24j600_spi.c: 266: else
 10646                           ;encX24j600_spi.c: 267: {
 10647                           ;encX24j600_spi.c: 268: ethData.error = 1;
 10648  005D10  0101               	movlb	1	; () banked
 10649  005D12  8183               	bsf	_ethData& (0+255),0,b	;volatile
 10650                           
 10651                           ;encX24j600_spi.c: 269: return 0;
 10652  005D14  6A03               	clrf	?_ETH_Read16,c
 10653  005D16  6A04               	clrf	?_ETH_Read16+1,c
 10654                           
 10655                           ; BSR set to: 1
 10656  005D18  0012               	return		;funcret
 10657  005D1A                     __end_of_ETH_Read16:
 10658                           	opt stack 0
 10659  005D1A                     PL370:
 10660                           	opt stack 21
 10661  005D1A  0102               	movlb	2	; () banked
 10662  005D1C  5F18               	subwf	_rxPacketStatusVector& (0+255),f,b
 10663  005D1E  0E00               	movlw	0
 10664  005D20  5B19               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
 10665  005D22  0101               	movlb	1	; () banked
 10666  005D24  9183               	bcf	_ethData& (0+255),0,b	;volatile
 10667  005D26  0C00               	retlw	0
 10668  005D28                     __end_ofPL370:
 10669                           	opt stack 0
 10670                           tosu	equ	0xFFF
 10671                           tosh	equ	0xFFE
 10672                           tosl	equ	0xFFD
 10673                           pclath	equ	0xFFA
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           intcon	equ	0xFF2
 10681                           intcon2	equ	0xFF1
 10682                           indf0	equ	0xFEF
 10683                           postinc0	equ	0xFEE
 10684                           fsr0h	equ	0xFEA
 10685                           fsr0l	equ	0xFE9
 10686                           wreg	equ	0xFE8
 10687                           postinc1	equ	0xFE6
 10688                           plusw1	equ	0xFE3
 10689                           fsr1h	equ	0xFE2
 10690                           fsr1l	equ	0xFE1
 10691                           bsr	equ	0xFE0
 10692                           indf2	equ	0xFDF
 10693                           postinc2	equ	0xFDE
 10694                           postdec2	equ	0xFDD
 10695                           plusw2	equ	0xFDB
 10696                           fsr2h	equ	0xFDA
 10697                           fsr2l	equ	0xFD9
 10698                           status	equ	0xFD8
 10699                           
 10700 ;; *************** function _ETH_Dump *****************
 10701 ;; Defined at:
 10702 ;;		line 324 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;  length          2   10[COMRAM] unsigned int 
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;  newRXTail       2   12[COMRAM] unsigned int 
 10707 ;; Return value:  Size  Location     Type
 10708 ;;		None               void
 10709 ;; Registers used:
 10710 ;;		wreg, status,2, status,0, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : F/2
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10716 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;Total ram usage:        4 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:    6
 10723 ;; This function calls:
 10724 ;;		_ENCx24_Read
 10725 ;;		_ENCx24_Write
 10726 ;; This function is called by:
 10727 ;;		_DHCP_Handler
 10728 ;;		_IPV4_Packet
 10729 ;;		_TCP_ParseTCPOptions
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           	psect	text48
 10734  005DBE                     __ptext48:
 10735                           	opt stack 0
 10736  005DBE                     _ETH_Dump:
 10737                           	opt stack 19
 10738                           
 10739                           ;encX24J600_driver.c: 326: uint16_t newRXTail;
 10740                           ;encX24J600_driver.c: 327: length = (rxPacketStatusVector.ByteCount <= length) ? rxPacke
      +                          tStatusVector.ByteCount : length;
 10741                           
 10742                           ; BSR set to: 1
 10743                           ;incstack = 0
 10744  005DBE  0102               	movlb	2	; () banked
 10745  005DC0  5118               	movf	_rxPacketStatusVector& (0+255),w,b
 10746  005DC2  5C0B               	subwf	ETH_Dump@length,w,c
 10747  005DC4  5119               	movf	(_rxPacketStatusVector+1)& (0+255),w,b
 10748  005DC6  580C               	subwfb	ETH_Dump@length+1,w,c
 10749  005DC8  E304               	bnc	l8558
 10750                           
 10751                           ; BSR set to: 2
 10752  005DCA  C218  F00B         	movff	_rxPacketStatusVector,ETH_Dump@length
 10753  005DCE  C219  F00C         	movff	_rxPacketStatusVector+1,ETH_Dump@length+1
 10754  005DD2                     l8558:
 10755                           
 10756                           ; BSR set to: 2
 10757                           ;encX24J600_driver.c: 328: if(length)
 10758  005DD2  500B               	movf	ETH_Dump@length,w,c
 10759  005DD4  100C               	iorwf	ETH_Dump@length+1,w,c
 10760  005DD6  E012               	bz	l473
 10761                           
 10762                           ; BSR set to: 2
 10763                           ;encX24J600_driver.c: 329: {
 10764                           ;encX24J600_driver.c: 330: newRXTail = ENCx24_Read(XJ600_ERXRDPTL);
 10765  005DD8  0E8A               	movlw	138
 10766  005DDA  EC04  F02F         	call	_ENCx24_Read
 10767  005DDE  C005  F00D         	movff	?_ENCx24_Read,ETH_Dump@newRXTail
 10768  005DE2  C006  F00E         	movff	?_ENCx24_Read+1,ETH_Dump@newRXTail+1
 10769                           
 10770                           ;encX24J600_driver.c: 331: newRXTail += length;
 10771  005DE6  500B               	movf	ETH_Dump@length,w,c
 10772  005DE8  260D               	addwf	ETH_Dump@newRXTail,f,c
 10773  005DEA  500C               	movf	ETH_Dump@length+1,w,c
 10774  005DEC  220E               	addwfc	ETH_Dump@newRXTail+1,f,c
 10775                           
 10776                           ;encX24J600_driver.c: 333: ENCx24_Write(XJ600_ERXRDPTL, newRXTail);
 10777  005DEE  C00D  F005         	movff	ETH_Dump@newRXTail,ENCx24_Write@data
 10778  005DF2  C00E  F006         	movff	ETH_Dump@newRXTail+1,ENCx24_Write@data+1
 10779  005DF6  0E8A               	movlw	138
 10780  005DF8  EC29  F02F         	call	_ENCx24_Write
 10781  005DFC                     l473:
 10782                           
 10783                           ;encX24J600_driver.c: 334: }
 10784                           ;encX24J600_driver.c: 335: rxPacketStatusVector.ByteCount -= length;
 10785  005DFC  500B               	movf	ETH_Dump@length,w,c
 10786  005DFE  0102               	movlb	2	; () banked
 10787  005E00  5F18               	subwf	_rxPacketStatusVector& (0+255),f,b
 10788  005E02  500C               	movf	ETH_Dump@length+1,w,c
 10789  005E04  5B19               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
 10790                           
 10791                           ; BSR set to: 2
 10792  005E06  0012               	return		;funcret
 10793  005E08                     __end_of_ETH_Dump:
 10794                           	opt stack 0
 10795                           tosu	equ	0xFFF
 10796                           tosh	equ	0xFFE
 10797                           tosl	equ	0xFFD
 10798                           pclath	equ	0xFFA
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           intcon2	equ	0xFF1
 10807                           indf0	equ	0xFEF
 10808                           postinc0	equ	0xFEE
 10809                           fsr0h	equ	0xFEA
 10810                           fsr0l	equ	0xFE9
 10811                           wreg	equ	0xFE8
 10812                           postinc1	equ	0xFE6
 10813                           plusw1	equ	0xFE3
 10814                           fsr1h	equ	0xFE2
 10815                           fsr1l	equ	0xFE1
 10816                           bsr	equ	0xFE0
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           plusw2	equ	0xFDB
 10821                           fsr2h	equ	0xFDA
 10822                           fsr2l	equ	0xFD9
 10823                           status	equ	0xFD8
 10824                           
 10825 ;; *************** function _TCP_FiniteStateMachine *****************
 10826 ;; Defined at:
 10827 ;;		line 602 in file "../../TCPIP Library/source/tcpv4.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;		None
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  notAckBytes     2  112[BANK0 ] unsigned int 
 10832 ;;  nextState       1  115[BANK0 ] enum E638
 10833 ;;  event           1  114[BANK0 ] enum E651
 10834 ;;  ret             1  111[BANK0 ] unsigned char 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      unsigned char 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : F/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10845 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10846 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;Total ram usage:       17 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:   11
 10851 ;; This function calls:
 10852 ;;		_TCB_Reset
 10853 ;;		_TCP_PayloadSave
 10854 ;;		_TCP_Snd
 10855 ;; This function is called by:
 10856 ;;		_TCP_Recv
 10857 ;;		_TCP_Update
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text49
 10862  0010B4                     __ptext49:
 10863                           	opt stack 0
 10864  0010B4                     _TCP_FiniteStateMachine:
 10865                           	opt stack 17
 10866                           
 10867                           ;tcpv4.c: 604: uint16_t notAckBytes;
 10868                           ;tcpv4.c: 605: bool ret = 0;
 10869                           
 10870                           ; BSR set to: 2
 10871                           ;incstack = 0
 10872  0010B4  0100               	movlb	0	; () banked
 10873  0010B6  6BCF               	clrf	TCP_FiniteStateMachine@ret& (0+255),b
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;tcpv4.c: 607: tcp_fsm_states_t nextState = currentTCB->fsmState;
 10877  0010B8  0E2A               	movlw	42
 10878  0010BA  EC08  F011         	call	PL110	;call to abstracted procedure
 10879  0010BE  64F7               	cpfsgt	tblptrh,c
 10880  0010C0  D003               	bra	u12137
 10881  0010C2  0008               	tblrd		*
 10882  0010C4  50F5               	movf	tablat,w,c
 10883  0010C6  D003               	bra	u12130
 10884  0010C8                     u12137:
 10885  0010C8  EC3C  F011         	call	PL114	;call to abstracted procedure
 10886  0010CC  50EF               	movf	indf0,w,c
 10887  0010CE                     u12130:
 10888  0010CE  0100               	movlb	0	; () banked
 10889  0010D0  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 10890                           
 10891                           ;tcpv4.c: 608: tcpEvent_t event = currentTCB->connectionEvent;
 10892  0010D2  0E2B               	movlw	43
 10893  0010D4  EC08  F011         	call	PL110	;call to abstracted procedure
 10894  0010D8  64F7               	cpfsgt	tblptrh,c
 10895  0010DA  D003               	bra	u12147
 10896  0010DC  0008               	tblrd		*
 10897  0010DE  50F5               	movf	tablat,w,c
 10898  0010E0  D003               	bra	u12140
 10899  0010E2                     u12147:
 10900  0010E2  EC3C  F011         	call	PL114	;call to abstracted procedure
 10901  0010E6  50EF               	movf	indf0,w,c
 10902  0010E8                     u12140:
 10903  0010E8  0100               	movlb	0	; () banked
 10904  0010EA  6FD2               	movwf	TCP_FiniteStateMachine@event& (0+255),b
 10905                           
 10906                           ;tcpv4.c: 610: switch (currentTCB->fsmState)
 10907  0010EC  EFC5  F010         	goto	l9290
 10908  0010F0                     l8952:
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;tcpv4.c: 616: ;
 10912                           ;tcpv4.c: 619: currentTCB->destIP = receivedRemoteAddress;
 10913  0010F0  0E02               	movlw	2
 10914  0010F2  EC08  F011         	call	PL110	;call to abstracted procedure
 10915  0010F6  64F7               	cpfsgt	tblptrh,c
 10916  0010F8  D00D               	bra	u12157
 10917  0010FA  C19A  FFF5         	movff	_receivedRemoteAddress,tablat
 10918  0010FE  000D               	tblwt		*+
 10919  001100  C19B  FFF5         	movff	_receivedRemoteAddress+1,tablat
 10920  001104  000D               	tblwt		*+
 10921  001106  C19C  FFF5         	movff	_receivedRemoteAddress+2,tablat
 10922  00110A  000D               	tblwt		*+
 10923  00110C  C19D  FFF5         	movff	_receivedRemoteAddress+3,tablat
 10924  001110  000C               	tblwt		*
 10925  001112  D00A               	bra	u12150
 10926  001114                     u12157:
 10927  001114  EC3C  F011         	call	PL114	;call to abstracted procedure
 10928  001118  C19A  FFEE         	movff	_receivedRemoteAddress,postinc0
 10929  00111C  C19B  FFEE         	movff	_receivedRemoteAddress+1,postinc0
 10930  001120  C19C  FFEE         	movff	_receivedRemoteAddress+2,postinc0
 10931  001124  C19D  FFEF         	movff	_receivedRemoteAddress+3,indf0
 10932  001128                     u12150:
 10933                           
 10934                           ;tcpv4.c: 620: currentTCB->destPort = tcpHeader.sourcePort;
 10935  001128  0E06               	movlw	6
 10936  00112A  EC08  F011         	call	PL110	;call to abstracted procedure
 10937  00112E  64F7               	cpfsgt	tblptrh,c
 10938  001130  D007               	bra	u12167
 10939  001132  C1B4  FFF5         	movff	_tcpHeader,tablat
 10940  001136  000D               	tblwt		*+
 10941  001138  C1B5  FFF5         	movff	_tcpHeader+1,tablat
 10942  00113C  000C               	tblwt		*
 10943  00113E  D006               	bra	u12160
 10944  001140                     u12167:
 10945  001140  EC3C  F011         	call	PL114	;call to abstracted procedure
 10946  001144  C1B4  FFEE         	movff	_tcpHeader,postinc0
 10947  001148  C1B5  FFEF         	movff	_tcpHeader+1,indf0
 10948  00114C                     u12160:
 10949                           
 10950                           ;tcpv4.c: 623: currentTCB->localLastAck = 0;
 10951  00114C  0E14               	movlw	20
 10952  00114E  EC08  F011         	call	PL110	;call to abstracted procedure
 10953  001152  64F7               	cpfsgt	tblptrh,c
 10954  001154  D007               	bra	u12177
 10955  001156  6AF5               	clrf	tablat,c
 10956  001158  000D               	tblwt		*+
 10957  00115A  6AF5               	clrf	tablat,c
 10958  00115C  000D               	tblwt		*+
 10959  00115E  ECAB  F011         	call	PL150	;call to abstracted procedure
 10960  001162  D004               	bra	u12170
 10961  001164                     u12177:
 10962  001164  EC3C  F011         	call	PL114	;call to abstracted procedure
 10963  001168  ECF0  F011         	call	PL180	;call to abstracted procedure
 10964  00116C                     u12170:
 10965                           
 10966                           ;tcpv4.c: 625: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
 10967  00116C  0E08               	movlw	8
 10968  00116E  EC08  F011         	call	PL110	;call to abstracted procedure
 10969  001172  64F7               	cpfsgt	tblptrh,c
 10970  001174  D003               	bra	u12187
 10971  001176  ECB0  F011         	call	PL158	;call to abstracted procedure
 10972  00117A  D004               	bra	u12180
 10973  00117C                     u12187:
 10974  00117C  EC3C  F011         	call	PL114	;call to abstracted procedure
 10975  001180  ECFE  F011         	call	PL186	;call to abstracted procedure
 10976  001184                     u12180:
 10977                           
 10978                           ;tcpv4.c: 626: currentTCB->remoteAck = currentTCB->remoteSeqno + 1;
 10979  001184  0E08               	movlw	8
 10980  001186  EC08  F011         	call	PL110	;call to abstracted procedure
 10981  00118A  64F7               	cpfsgt	tblptrh,c
 10982  00118C  D003               	bra	u12197
 10983  00118E  EC53  F011         	call	PL120	;call to abstracted procedure
 10984  001192  D004               	bra	u12190
 10985  001194                     u12197:
 10986  001194  EC3C  F011         	call	PL114	;call to abstracted procedure
 10987  001198  EC99  F011         	call	PL134	;call to abstracted procedure
 10988  00119C                     u12190:
 10989  00119C  EC8B  F011         	call	PL132	;call to abstracted procedure
 10990  0011A0  0E0C               	movlw	12
 10991  0011A2  ECA6  F011         	call	PL146	;call to abstracted procedure
 10992  0011A6  EC33  F022         	call	PL140	;call to abstracted procedure
 10993  0011AA  EC07  F012         	call	PL188	;call to abstracted procedure
 10994  0011AE  64F7               	cpfsgt	tblptrh,c
 10995  0011B0  D003               	bra	u12207
 10996  0011B2  ECBD  F011         	call	PL160	;call to abstracted procedure
 10997  0011B6  D004               	bra	u12200
 10998  0011B8                     u12207:
 10999  0011B8  EC3C  F011         	call	PL114	;call to abstracted procedure
 11000  0011BC  ECF5  F011         	call	PL184	;call to abstracted procedure
 11001  0011C0                     u12200:
 11002                           
 11003                           ;tcpv4.c: 629: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
 11004  0011C0  EC77  F011         	call	PL128	;call to abstracted procedure
 11005  0011C4  EC66  F011         	call	PL124	;call to abstracted procedure
 11006  0011C8  64F7               	cpfsgt	tblptrh,c
 11007  0011CA  D003               	bra	u12217
 11008  0011CC  ECCA  F011         	call	PL164	;call to abstracted procedure
 11009  0011D0  D004               	bra	u12210
 11010  0011D2                     u12217:
 11011  0011D2  EC3C  F011         	call	PL114	;call to abstracted procedure
 11012  0011D6  EC29  F012         	call	PL210	;call to abstracted procedure
 11013  0011DA                     u12210:
 11014                           
 11015                           ;tcpv4.c: 630: currentTCB->mss = tcpMss;
 11016  0011DA  0E1C               	movlw	28
 11017  0011DC  EC08  F011         	call	PL110	;call to abstracted procedure
 11018  0011E0  64F7               	cpfsgt	tblptrh,c
 11019  0011E2  D003               	bra	u12227
 11020  0011E4  EC2E  F012         	call	PL250	;call to abstracted procedure
 11021  0011E8  D004               	bra	u12220
 11022  0011EA                     u12227:
 11023  0011EA  EC3C  F011         	call	PL114	;call to abstracted procedure
 11024  0011EE  EC52  F012         	call	PL348	;call to abstracted procedure
 11025  0011F2                     u12220:
 11026                           
 11027                           ;tcpv4.c: 633: currentTCB->flags = 0x02U | 0x10U;
 11028  0011F2  0E35               	movlw	53
 11029  0011F4  EC08  F011         	call	PL110	;call to abstracted procedure
 11030  0011F8  64F7               	cpfsgt	tblptrh,c
 11031  0011FA  D004               	bra	u12237
 11032  0011FC  0E12               	movlw	18
 11033  0011FE  6EF5               	movwf	tablat,c
 11034  001200  000C               	tblwt		*
 11035  001202  D004               	bra	u12230
 11036  001204                     u12237:
 11037  001204  EC3C  F011         	call	PL114	;call to abstracted procedure
 11038  001208  0E12               	movlw	18
 11039  00120A  6EEF               	movwf	indf0,c
 11040  00120C                     u12230:
 11041                           
 11042                           ;tcpv4.c: 634: currentTCB->timeout = ((unsigned long)1*2);
 11043  00120C  0E30               	movlw	48
 11044  00120E  EC08  F011         	call	PL110	;call to abstracted procedure
 11045  001212  64F7               	cpfsgt	tblptrh,c
 11046  001214  D003               	bra	u12247
 11047  001216  ECE5  F011         	call	PL170	;call to abstracted procedure
 11048  00121A  D004               	bra	u12240
 11049  00121C                     u12247:
 11050  00121C  EC3C  F011         	call	PL114	;call to abstracted procedure
 11051  001220  EC35  F012         	call	PL318	;call to abstracted procedure
 11052  001224                     u12240:
 11053                           
 11054                           ;tcpv4.c: 635: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 11055  001224  0E32               	movlw	50
 11056  001226  EC08  F011         	call	PL110	;call to abstracted procedure
 11057  00122A  64F7               	cpfsgt	tblptrh,c
 11058  00122C  D003               	bra	u12257
 11059  00122E  ECE5  F011         	call	PL170	;call to abstracted procedure
 11060  001232  D004               	bra	u12250
 11061  001234                     u12257:
 11062  001234  EC3C  F011         	call	PL114	;call to abstracted procedure
 11063  001238  EC35  F012         	call	PL318	;call to abstracted procedure
 11064  00123C                     u12250:
 11065                           
 11066                           ;tcpv4.c: 636: currentTCB->timeoutsCount = (3u);
 11067  00123C  0E34               	movlw	52
 11068  00123E  EC08  F011         	call	PL110	;call to abstracted procedure
 11069  001242  64F7               	cpfsgt	tblptrh,c
 11070  001244  D004               	bra	u12267
 11071  001246  0E03               	movlw	3
 11072  001248  6EF5               	movwf	tablat,c
 11073  00124A  000C               	tblwt		*
 11074  00124C  D004               	bra	u12260
 11075  00124E                     u12267:
 11076  00124E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11077  001252  0E03               	movlw	3
 11078  001254  6EEF               	movwf	indf0,c
 11079  001256                     u12260:
 11080  001256                     l8966:
 11081                           
 11082                           ;tcpv4.c: 638: TCP_Snd(currentTCB);
 11083  001256  ECEB  F011         	call	PL178	;call to abstracted procedure
 11084  00125A  ECA2  F012         	call	_TCP_Snd	;wreg free
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;tcpv4.c: 639: nextState = SYN_RECEIVED;
 11088  00125E  0E03               	movlw	3
 11089  001260  EFDC  F00F         	goto	L15
 11090  001264                     l1301:
 11091                           
 11092                           ;tcpv4.c: 642: ;
 11093                           ;tcpv4.c: 643: nextState = CLOSE;
 11094  001264  0100               	movlb	0	; () banked
 11095  001266  6BD3               	clrf	TCP_FiniteStateMachine@nextState& (0+255),b
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;tcpv4.c: 644: TCB_Reset(currentTCB);
 11099  001268  C1A0  F002         	movff	_currentTCB,TCB_Reset@tcbPtr
 11100  00126C  C1A1  F003         	movff	_currentTCB+1,TCB_Reset@tcbPtr+1
 11101  001270  ECFA  F023         	call	_TCB_Reset	;wreg free
 11102                           
 11103                           ;tcpv4.c: 645: break;
 11104  001274  EFEF  F010         	goto	l9292
 11105  001278                     l8974:
 11106  001278  0100               	movlb	0	; () banked
 11107  00127A  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 11108                           
 11109                           ; Switch size 1, requested type "space"
 11110                           ; Number of cases is 2, Range of values is 0 to 3
 11111                           ; switch strategies available:
 11112                           ; Name         Instructions Cycles
 11113                           ; simple_byte            7     4 (average)
 11114                           ;	Chosen strategy is simple_byte
 11115  00127C  E0F3               	bz	l1301
 11116  00127E  0A03               	xorlw	3	; case 3
 11117  001280  E101 D736          	bz	l8952
 11118                           
 11119                           ;tcpv4.c: 650: break;
 11120  001284  EFEF  F010         	goto	l9292
 11121  001288                     l8976:
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;tcpv4.c: 655: ;
 11125                           ;tcpv4.c: 657: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
 11126  001288  0E08               	movlw	8
 11127  00128A  EC08  F011         	call	PL110	;call to abstracted procedure
 11128  00128E  64F7               	cpfsgt	tblptrh,c
 11129  001290  D003               	bra	u12277
 11130  001292  ECB0  F011         	call	PL158	;call to abstracted procedure
 11131  001296  D004               	bra	u12270
 11132  001298                     u12277:
 11133  001298  EC3C  F011         	call	PL114	;call to abstracted procedure
 11134  00129C  ECFE  F011         	call	PL186	;call to abstracted procedure
 11135  0012A0                     u12270:
 11136                           
 11137                           ;tcpv4.c: 658: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
 11138  0012A0  ECA2  F011         	call	PL142	;call to abstracted procedure
 11139  0012A4  EC19  F011         	call	PL112	;call to abstracted procedure
 11140  0012A8  64F7               	cpfsgt	tblptrh,c
 11141  0012AA  D005               	bra	u12287
 11142  0012AC  ECD1  F011         	call	PL166	;call to abstracted procedure
 11143  0012B0  ECCA  F011         	call	PL164	;call to abstracted procedure
 11144  0012B4  D004               	bra	u12280
 11145  0012B6                     u12287:
 11146  0012B6  EC3C  F011         	call	PL114	;call to abstracted procedure
 11147  0012BA  EC14  F012         	call	PL196	;call to abstracted procedure
 11148  0012BE                     u12280:
 11149                           
 11150                           ;tcpv4.c: 661: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
 11151  0012BE  EC77  F011         	call	PL128	;call to abstracted procedure
 11152  0012C2  EC66  F011         	call	PL124	;call to abstracted procedure
 11153  0012C6  64F7               	cpfsgt	tblptrh,c
 11154  0012C8  D003               	bra	u12297
 11155  0012CA  ECCA  F011         	call	PL164	;call to abstracted procedure
 11156  0012CE  D004               	bra	u12290
 11157  0012D0                     u12297:
 11158  0012D0  EC3C  F011         	call	PL114	;call to abstracted procedure
 11159  0012D4  EC29  F012         	call	PL210	;call to abstracted procedure
 11160  0012D8                     u12290:
 11161                           
 11162                           ;tcpv4.c: 662: currentTCB->mss = tcpMss;
 11163  0012D8  0E1C               	movlw	28
 11164  0012DA  EC08  F011         	call	PL110	;call to abstracted procedure
 11165  0012DE  64F7               	cpfsgt	tblptrh,c
 11166  0012E0  D003               	bra	u12307
 11167  0012E2  EC2E  F012         	call	PL250	;call to abstracted procedure
 11168  0012E6  D004               	bra	u12300
 11169  0012E8                     u12307:
 11170  0012E8  EC3C  F011         	call	PL114	;call to abstracted procedure
 11171  0012EC  EC52  F012         	call	PL348	;call to abstracted procedure
 11172  0012F0                     u12300:
 11173                           
 11174                           ;tcpv4.c: 665: currentTCB->timeout = ((unsigned long)1*2);
 11175  0012F0  0E30               	movlw	48
 11176  0012F2  EC08  F011         	call	PL110	;call to abstracted procedure
 11177  0012F6  64F7               	cpfsgt	tblptrh,c
 11178  0012F8  D003               	bra	u12317
 11179  0012FA  ECE5  F011         	call	PL170	;call to abstracted procedure
 11180  0012FE  D004               	bra	u12310
 11181  001300                     u12317:
 11182  001300  EC3C  F011         	call	PL114	;call to abstracted procedure
 11183  001304  EC35  F012         	call	PL318	;call to abstracted procedure
 11184  001308                     u12310:
 11185                           
 11186                           ;tcpv4.c: 666: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 11187  001308  0E32               	movlw	50
 11188  00130A  EC08  F011         	call	PL110	;call to abstracted procedure
 11189  00130E  64F7               	cpfsgt	tblptrh,c
 11190  001310  D003               	bra	u12327
 11191  001312  ECE5  F011         	call	PL170	;call to abstracted procedure
 11192  001316  D004               	bra	u12320
 11193  001318                     u12327:
 11194  001318  EC3C  F011         	call	PL114	;call to abstracted procedure
 11195  00131C  EC35  F012         	call	PL318	;call to abstracted procedure
 11196  001320                     u12320:
 11197                           
 11198                           ;tcpv4.c: 667: currentTCB->timeoutsCount = (3u);
 11199  001320  0E34               	movlw	52
 11200  001322  EC08  F011         	call	PL110	;call to abstracted procedure
 11201  001326  64F7               	cpfsgt	tblptrh,c
 11202  001328  D004               	bra	u12337
 11203  00132A  0E03               	movlw	3
 11204  00132C  6EF5               	movwf	tablat,c
 11205  00132E  000C               	tblwt		*
 11206  001330  D004               	bra	u12330
 11207  001332                     u12337:
 11208  001332  EC3C  F011         	call	PL114	;call to abstracted procedure
 11209  001336  0E03               	movlw	3
 11210  001338  6EEF               	movwf	indf0,c
 11211  00133A                     u12330:
 11212                           
 11213                           ;tcpv4.c: 668: currentTCB->flags = 0x02U | 0x10U;
 11214  00133A  0E35               	movlw	53
 11215  00133C  EC08  F011         	call	PL110	;call to abstracted procedure
 11216  001340  64F7               	cpfsgt	tblptrh,c
 11217  001342  D004               	bra	u12347
 11218  001344  0E12               	movlw	18
 11219  001346  6EF5               	movwf	tablat,c
 11220  001348  000C               	tblwt		*
 11221  00134A  D004               	bra	u12340
 11222  00134C                     u12347:
 11223  00134C  EC3C  F011         	call	PL114	;call to abstracted procedure
 11224  001350  0E12               	movlw	18
 11225  001352  6EEF               	movwf	indf0,c
 11226  001354                     u12340:
 11227  001354  D780               	goto	l8966
 11228  001356                     l8994:
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;tcpv4.c: 676: ;
 11232                           ;tcpv4.c: 678: currentTCB->timeout = 0;
 11233  001356  0E30               	movlw	48
 11234  001358  EC08  F011         	call	PL110	;call to abstracted procedure
 11235  00135C  64F7               	cpfsgt	tblptrh,c
 11236  00135E  D003               	bra	u12357
 11237  001360  ECAB  F011         	call	PL150	;call to abstracted procedure
 11238  001364  D004               	bra	u12350
 11239  001366                     u12357:
 11240  001366  EC3C  F011         	call	PL114	;call to abstracted procedure
 11241  00136A  6AEE               	clrf	postinc0,c
 11242  00136C  6AEF               	clrf	indf0,c
 11243  00136E                     u12350:
 11244                           
 11245                           ;tcpv4.c: 680: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
 11246  00136E  0E10               	movlw	16
 11247  001370  EC08  F011         	call	PL110	;call to abstracted procedure
 11248  001374  64F7               	cpfsgt	tblptrh,c
 11249  001376  D003               	bra	u12367
 11250  001378  EC53  F011         	call	PL120	;call to abstracted procedure
 11251  00137C  D004               	bra	u12360
 11252  00137E                     u12367:
 11253  00137E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11254  001382  EC99  F011         	call	PL134	;call to abstracted procedure
 11255  001386                     u12360:
 11256  001386  EC8B  F011         	call	PL132	;call to abstracted procedure
 11257  00138A  EC43  F012         	call	PL338	;call to abstracted procedure
 11258  00138E  E179               	bnz	l9008
 11259  001390  EC57  F012         	call	PL350	;call to abstracted procedure
 11260  001394  E176               	bnz	l9008
 11261  001396  EC5C  F012         	call	PL352	;call to abstracted procedure
 11262  00139A  E173               	bnz	l9008
 11263  00139C  EC69  F012         	call	PL356	;call to abstracted procedure
 11264  0013A0  A4D8               	btfss	status,2,c
 11265  0013A2                     u12371:
 11266  0013A2  D06F               	goto	l9008
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;tcpv4.c: 681: {
 11270                           ;tcpv4.c: 683: currentTCB->localSeqno = currentTCB->localSeqno + 1;
 11271  0013A4  0E10               	movlw	16
 11272  0013A6  EC08  F011         	call	PL110	;call to abstracted procedure
 11273  0013AA  64F7               	cpfsgt	tblptrh,c
 11274  0013AC  D003               	bra	u12387
 11275  0013AE  EC53  F011         	call	PL120	;call to abstracted procedure
 11276  0013B2  D004               	bra	u12380
 11277  0013B4                     u12387:
 11278  0013B4  EC3C  F011         	call	PL114	;call to abstracted procedure
 11279  0013B8  EC99  F011         	call	PL134	;call to abstracted procedure
 11280  0013BC                     u12380:
 11281  0013BC  EC8B  F011         	call	PL132	;call to abstracted procedure
 11282  0013C0  EC41  F011         	call	PL116	;call to abstracted procedure
 11283  0013C4  64F7               	cpfsgt	tblptrh,c
 11284  0013C6  D003               	bra	u12397
 11285  0013C8  ECBD  F011         	call	PL160	;call to abstracted procedure
 11286  0013CC  D004               	bra	u12390
 11287  0013CE                     u12397:
 11288  0013CE  EC3C  F011         	call	PL114	;call to abstracted procedure
 11289  0013D2  ECF5  F011         	call	PL184	;call to abstracted procedure
 11290  0013D6                     u12390:
 11291                           
 11292                           ;tcpv4.c: 684: currentTCB->flags = 0x10U;
 11293  0013D6  0E35               	movlw	53
 11294  0013D8  EC08  F011         	call	PL110	;call to abstracted procedure
 11295  0013DC  64F7               	cpfsgt	tblptrh,c
 11296  0013DE  D004               	bra	u12407
 11297  0013E0  0E10               	movlw	16
 11298  0013E2  6EF5               	movwf	tablat,c
 11299  0013E4  000C               	tblwt		*
 11300  0013E6  D004               	bra	u12400
 11301  0013E8                     u12407:
 11302  0013E8  EC3C  F011         	call	PL114	;call to abstracted procedure
 11303  0013EC  0E10               	movlw	16
 11304  0013EE  6EEF               	movwf	indf0,c
 11305  0013F0                     u12400:
 11306                           
 11307                           ;tcpv4.c: 687: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
 11308  0013F0  0E08               	movlw	8
 11309  0013F2  EC08  F011         	call	PL110	;call to abstracted procedure
 11310  0013F6  64F7               	cpfsgt	tblptrh,c
 11311  0013F8  D003               	bra	u12417
 11312  0013FA  ECB0  F011         	call	PL158	;call to abstracted procedure
 11313  0013FE  D004               	bra	u12410
 11314  001400                     u12417:
 11315  001400  EC3C  F011         	call	PL114	;call to abstracted procedure
 11316  001404  ECFE  F011         	call	PL186	;call to abstracted procedure
 11317  001408                     u12410:
 11318                           
 11319                           ;tcpv4.c: 689: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
 11320  001408  ECA2  F011         	call	PL142	;call to abstracted procedure
 11321  00140C  EC19  F011         	call	PL112	;call to abstracted procedure
 11322  001410  64F7               	cpfsgt	tblptrh,c
 11323  001412  D005               	bra	u12427
 11324  001414  ECD1  F011         	call	PL166	;call to abstracted procedure
 11325  001418  ECCA  F011         	call	PL164	;call to abstracted procedure
 11326  00141C  D004               	bra	u12420
 11327  00141E                     u12427:
 11328  00141E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11329  001422  EC14  F012         	call	PL196	;call to abstracted procedure
 11330  001426                     u12420:
 11331                           
 11332                           ;tcpv4.c: 691: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
 11333  001426  EC77  F011         	call	PL128	;call to abstracted procedure
 11334  00142A  EC66  F011         	call	PL124	;call to abstracted procedure
 11335  00142E  64F7               	cpfsgt	tblptrh,c
 11336  001430  D003               	bra	u12437
 11337  001432  ECCA  F011         	call	PL164	;call to abstracted procedure
 11338  001436  D004               	bra	u12430
 11339  001438                     u12437:
 11340  001438  EC3C  F011         	call	PL114	;call to abstracted procedure
 11341  00143C  EC29  F012         	call	PL210	;call to abstracted procedure
 11342  001440                     u12430:
 11343                           
 11344                           ;tcpv4.c: 692: currentTCB->mss = tcpMss;
 11345  001440  0E1C               	movlw	28
 11346  001442  EC08  F011         	call	PL110	;call to abstracted procedure
 11347  001446  64F7               	cpfsgt	tblptrh,c
 11348  001448  D003               	bra	u12447
 11349  00144A  EC2E  F012         	call	PL250	;call to abstracted procedure
 11350  00144E  D004               	bra	u12440
 11351  001450                     u12447:
 11352  001450  EC3C  F011         	call	PL114	;call to abstracted procedure
 11353  001454  EC52  F012         	call	PL348	;call to abstracted procedure
 11354  001458                     u12440:
 11355                           
 11356                           ;tcpv4.c: 694: if(TCP_Snd(currentTCB))
 11357  001458  ECEB  F011         	call	PL178	;call to abstracted procedure
 11358  00145C  ECA2  F012         	call	_TCP_Snd	;wreg free
 11359  001460  0900               	iorlw	0
 11360  001462  E102 EFEF  F010    	bz	l9292
 11361                           
 11362                           ; BSR set to: 0
 11363                           ;tcpv4.c: 695: {
 11364                           ;tcpv4.c: 696: nextState = ESTABLISHED;
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;tcpv4.c: 697: currentTCB->socketState = SOCKET_CONNECTED;
 11368  001468  EC1D  F012         	call	PL202	;call to abstracted procedure
 11369  00146C  EC08  F011         	call	PL110	;call to abstracted procedure
 11370  001470  64F7               	cpfsgt	tblptrh,c
 11371  001472  D004               	bra	u12467
 11372  001474  0E03               	movlw	3
 11373  001476  6EF5               	movwf	tablat,c
 11374  001478  000C               	tblwt		*
 11375  00147A  D001               	bra	u12460
 11376  00147C                     u12467:
 11377  00147C  D245               	goto	u12957
 11378  00147E                     u12460:
 11379  00147E  EFEF  F010         	goto	l9292
 11380  001482                     l9008:
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;tcpv4.c: 700: else
 11384                           ;tcpv4.c: 701: {
 11385                           ;tcpv4.c: 703: currentTCB->localSeqno = tcpHeader.ackNumber;
 11386  001482  0E10               	movlw	16
 11387  001484  EC08  F011         	call	PL110	;call to abstracted procedure
 11388  001488  64F7               	cpfsgt	tblptrh,c
 11389  00148A  D003               	bra	u12477
 11390  00148C  ECD8  F011         	call	PL168	;call to abstracted procedure
 11391  001490  D004               	bra	u12470
 11392  001492                     u12477:
 11393  001492  EC3C  F011         	call	PL114	;call to abstracted procedure
 11394  001496  EC20  F012         	call	PL204	;call to abstracted procedure
 11395  00149A                     u12470:
 11396                           
 11397                           ;tcpv4.c: 704: currentTCB->flags = 0x04U | 0x10U;
 11398  00149A  0E35               	movlw	53
 11399  00149C  EC08  F011         	call	PL110	;call to abstracted procedure
 11400  0014A0  64F7               	cpfsgt	tblptrh,c
 11401  0014A2  D004               	bra	u12487
 11402  0014A4  0E14               	movlw	20
 11403  0014A6  6EF5               	movwf	tablat,c
 11404  0014A8  000C               	tblwt		*
 11405  0014AA  D004               	bra	u12480
 11406  0014AC                     u12487:
 11407  0014AC  EC3C  F011         	call	PL114	;call to abstracted procedure
 11408  0014B0  0E14               	movlw	20
 11409  0014B2  6EEF               	movwf	indf0,c
 11410  0014B4                     u12480:
 11411                           
 11412                           ;tcpv4.c: 705: if(TCP_Snd(currentTCB))
 11413  0014B4  ECEB  F011         	call	PL178	;call to abstracted procedure
 11414  0014B8  ECA2  F012         	call	_TCP_Snd	;wreg free
 11415  0014BC                     L11:
 11416  0014BC  0900               	iorlw	0
 11417  0014BE  E001 D6D1          	bnz	l1301
 11418  0014C2  EFEF  F010         	goto	l9292
 11419  0014C6                     l9016:
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;tcpv4.c: 713: ;
 11423                           ;tcpv4.c: 715: currentTCB->timeout = 0;
 11424  0014C6  0E30               	movlw	48
 11425  0014C8  EC08  F011         	call	PL110	;call to abstracted procedure
 11426  0014CC  64F7               	cpfsgt	tblptrh,c
 11427  0014CE  D003               	bra	u12507
 11428  0014D0  ECAB  F011         	call	PL150	;call to abstracted procedure
 11429  0014D4  D004               	bra	u12500
 11430  0014D6                     u12507:
 11431  0014D6  EC3C  F011         	call	PL114	;call to abstracted procedure
 11432  0014DA  6AEE               	clrf	postinc0,c
 11433  0014DC  6AEF               	clrf	indf0,c
 11434  0014DE                     u12500:
 11435                           
 11436                           ;tcpv4.c: 717: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
 11437  0014DE  0E10               	movlw	16
 11438  0014E0  EC08  F011         	call	PL110	;call to abstracted procedure
 11439  0014E4  64F7               	cpfsgt	tblptrh,c
 11440  0014E6  D003               	bra	u12517
 11441  0014E8  EC53  F011         	call	PL120	;call to abstracted procedure
 11442  0014EC  D004               	bra	u12510
 11443  0014EE                     u12517:
 11444  0014EE  EC3C  F011         	call	PL114	;call to abstracted procedure
 11445  0014F2  EC99  F011         	call	PL134	;call to abstracted procedure
 11446  0014F6                     u12510:
 11447  0014F6  EC8B  F011         	call	PL132	;call to abstracted procedure
 11448  0014FA  EC43  F012         	call	PL338	;call to abstracted procedure
 11449  0014FE  E171               	bnz	l9028
 11450  001500  EC57  F012         	call	PL350	;call to abstracted procedure
 11451  001504  E16E               	bnz	l9028
 11452  001506  EC5C  F012         	call	PL352	;call to abstracted procedure
 11453  00150A  E16B               	bnz	l9028
 11454  00150C  EC69  F012         	call	PL356	;call to abstracted procedure
 11455  001510  A4D8               	btfss	status,2,c
 11456  001512                     u12521:
 11457  001512  D067               	goto	l9028
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;tcpv4.c: 718: {
 11461                           ;tcpv4.c: 720: currentTCB->localSeqno = currentTCB->localSeqno + 1;
 11462  001514  0E10               	movlw	16
 11463  001516  EC08  F011         	call	PL110	;call to abstracted procedure
 11464  00151A  64F7               	cpfsgt	tblptrh,c
 11465  00151C  D003               	bra	u12537
 11466  00151E  EC53  F011         	call	PL120	;call to abstracted procedure
 11467  001522  D004               	bra	u12530
 11468  001524                     u12537:
 11469  001524  EC3C  F011         	call	PL114	;call to abstracted procedure
 11470  001528  EC99  F011         	call	PL134	;call to abstracted procedure
 11471  00152C                     u12530:
 11472  00152C  EC8B  F011         	call	PL132	;call to abstracted procedure
 11473  001530  EC41  F011         	call	PL116	;call to abstracted procedure
 11474  001534  64F7               	cpfsgt	tblptrh,c
 11475  001536  D003               	bra	u12547
 11476  001538  ECBD  F011         	call	PL160	;call to abstracted procedure
 11477  00153C  D004               	bra	u12540
 11478  00153E                     u12547:
 11479  00153E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11480  001542  ECF5  F011         	call	PL184	;call to abstracted procedure
 11481  001546                     u12540:
 11482                           
 11483                           ;tcpv4.c: 721: currentTCB->flags = 0x10U;
 11484  001546  0E35               	movlw	53
 11485  001548  EC08  F011         	call	PL110	;call to abstracted procedure
 11486  00154C  64F7               	cpfsgt	tblptrh,c
 11487  00154E  D004               	bra	u12557
 11488  001550  0E10               	movlw	16
 11489  001552  6EF5               	movwf	tablat,c
 11490  001554  000C               	tblwt		*
 11491  001556  D004               	bra	u12550
 11492  001558                     u12557:
 11493  001558  EC3C  F011         	call	PL114	;call to abstracted procedure
 11494  00155C  0E10               	movlw	16
 11495  00155E  6EEF               	movwf	indf0,c
 11496  001560                     u12550:
 11497                           
 11498                           ;tcpv4.c: 724: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
 11499  001560  0E08               	movlw	8
 11500  001562  EC08  F011         	call	PL110	;call to abstracted procedure
 11501  001566  64F7               	cpfsgt	tblptrh,c
 11502  001568  D003               	bra	u12567
 11503  00156A  ECB0  F011         	call	PL158	;call to abstracted procedure
 11504  00156E  D004               	bra	u12560
 11505  001570                     u12567:
 11506  001570  EC3C  F011         	call	PL114	;call to abstracted procedure
 11507  001574  ECFE  F011         	call	PL186	;call to abstracted procedure
 11508  001578                     u12560:
 11509                           
 11510                           ;tcpv4.c: 725: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
 11511  001578  ECA2  F011         	call	PL142	;call to abstracted procedure
 11512  00157C  EC19  F011         	call	PL112	;call to abstracted procedure
 11513  001580  64F7               	cpfsgt	tblptrh,c
 11514  001582  D005               	bra	u12577
 11515  001584  ECD1  F011         	call	PL166	;call to abstracted procedure
 11516  001588  ECCA  F011         	call	PL164	;call to abstracted procedure
 11517  00158C  D004               	bra	u12570
 11518  00158E                     u12577:
 11519  00158E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11520  001592  EC14  F012         	call	PL196	;call to abstracted procedure
 11521  001596                     u12570:
 11522                           
 11523                           ;tcpv4.c: 727: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
 11524  001596  EC77  F011         	call	PL128	;call to abstracted procedure
 11525  00159A  EC66  F011         	call	PL124	;call to abstracted procedure
 11526  00159E  64F7               	cpfsgt	tblptrh,c
 11527  0015A0  D003               	bra	u12587
 11528  0015A2  ECCA  F011         	call	PL164	;call to abstracted procedure
 11529  0015A6  D004               	bra	u12580
 11530  0015A8                     u12587:
 11531  0015A8  EC3C  F011         	call	PL114	;call to abstracted procedure
 11532  0015AC  EC29  F012         	call	PL210	;call to abstracted procedure
 11533  0015B0                     u12580:
 11534                           
 11535                           ;tcpv4.c: 728: currentTCB->mss = tcpMss;
 11536  0015B0  0E1C               	movlw	28
 11537  0015B2  EC08  F011         	call	PL110	;call to abstracted procedure
 11538  0015B6  64F7               	cpfsgt	tblptrh,c
 11539  0015B8  D003               	bra	u12597
 11540  0015BA  EC2E  F012         	call	PL250	;call to abstracted procedure
 11541  0015BE  D004               	bra	u12590
 11542  0015C0                     u12597:
 11543  0015C0  EC3C  F011         	call	PL114	;call to abstracted procedure
 11544  0015C4  EC52  F012         	call	PL348	;call to abstracted procedure
 11545  0015C8                     u12590:
 11546                           
 11547                           ;tcpv4.c: 730: nextState = ESTABLISHED;
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;tcpv4.c: 731: currentTCB->socketState = SOCKET_CONNECTED;
 11551  0015C8  EC10  F012         	call	PL194	;call to abstracted procedure
 11552  0015CC  EC08  F011         	call	PL110	;call to abstracted procedure
 11553  0015D0  64F7               	cpfsgt	tblptrh,c
 11554  0015D2  D004               	bra	u12607
 11555  0015D4  0E03               	movlw	3
 11556  0015D6  6EF5               	movwf	tablat,c
 11557  0015D8  000C               	tblwt		*
 11558  0015DA  D001               	bra	u12600
 11559  0015DC                     u12607:
 11560  0015DC  D195               	goto	u12957
 11561  0015DE                     u12600:
 11562                           
 11563                           ;tcpv4.c: 732: }
 11564  0015DE  EFEF  F010         	goto	l9292
 11565  0015E2                     l9028:
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;tcpv4.c: 733: else
 11569                           ;tcpv4.c: 734: {
 11570                           ;tcpv4.c: 736: currentTCB->localSeqno = tcpHeader.ackNumber;
 11571  0015E2  0E10               	movlw	16
 11572  0015E4  EC08  F011         	call	PL110	;call to abstracted procedure
 11573  0015E8  64F7               	cpfsgt	tblptrh,c
 11574  0015EA  D003               	bra	u12617
 11575  0015EC  ECD8  F011         	call	PL168	;call to abstracted procedure
 11576  0015F0  D004               	bra	u12610
 11577  0015F2                     u12617:
 11578  0015F2  EC3C  F011         	call	PL114	;call to abstracted procedure
 11579  0015F6  EC20  F012         	call	PL204	;call to abstracted procedure
 11580  0015FA                     u12610:
 11581                           
 11582                           ;tcpv4.c: 737: currentTCB->flags = 0x04U;
 11583  0015FA  0E35               	movlw	53
 11584  0015FC  EC08  F011         	call	PL110	;call to abstracted procedure
 11585  001600  64F7               	cpfsgt	tblptrh,c
 11586  001602  D004               	bra	u12627
 11587  001604  0E04               	movlw	4
 11588  001606  6EF5               	movwf	tablat,c
 11589  001608  000C               	tblwt		*
 11590  00160A  D004               	bra	u12620
 11591  00160C                     u12627:
 11592  00160C  EC3C  F011         	call	PL114	;call to abstracted procedure
 11593  001610  0E04               	movlw	4
 11594  001612  6EEF               	movwf	indf0,c
 11595  001614                     u12620:
 11596                           
 11597                           ;tcpv4.c: 738: if(TCP_Snd(currentTCB))
 11598  001614  ECEB  F011         	call	PL178	;call to abstracted procedure
 11599  001618  ECA2  F012         	call	_TCP_Snd	;wreg free
 11600  00161C  D74F               	goto	L11
 11601  00161E                     l9038:
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;tcpv4.c: 752: ;
 11605                           ;tcpv4.c: 755: if (currentTCB->timeoutsCount)
 11606  00161E  0E34               	movlw	52
 11607  001620  EC08  F011         	call	PL110	;call to abstracted procedure
 11608  001624  64F7               	cpfsgt	tblptrh,c
 11609  001626  D003               	bra	u12647
 11610  001628  0008               	tblrd		*
 11611  00162A  50F5               	movf	tablat,w,c
 11612  00162C  D003               	bra	u12640
 11613  00162E                     u12647:
 11614  00162E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11615  001632  50EF               	movf	indf0,w,c
 11616  001634                     u12640:
 11617  001634  0900               	iorlw	0
 11618  001636  E034               	bz	l9054
 11619                           
 11620                           ;tcpv4.c: 756: {
 11621                           ;tcpv4.c: 757: if(TCP_Snd(currentTCB))
 11622  001638  ECEB  F011         	call	PL178	;call to abstracted procedure
 11623  00163C  ECA2  F012         	call	_TCP_Snd	;wreg free
 11624  001640  0900               	iorlw	0
 11625  001642  E102 EFEF  F010    	bz	l9292
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;tcpv4.c: 758: {
 11629                           ;tcpv4.c: 759: if (currentTCB->flags & 0x04U)
 11630  001648  0E35               	movlw	53
 11631  00164A  EC08  F011         	call	PL110	;call to abstracted procedure
 11632  00164E  64F7               	cpfsgt	tblptrh,c
 11633  001650  D003               	bra	u12677
 11634  001652  0008               	tblrd		*
 11635  001654  50F5               	movf	tablat,w,c
 11636  001656  D003               	bra	u12670
 11637  001658                     u12677:
 11638  001658  EC3C  F011         	call	PL114	;call to abstracted procedure
 11639  00165C  50EF               	movf	indf0,w,c
 11640  00165E                     u12670:
 11641  00165E  0100               	movlb	0	; () banked
 11642  001660  6FC5               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
 11643  001662  B5C5               	btfsc	(??_TCP_FiniteStateMachine+2)& (0+255),2,b
 11644  001664  D5FF               	goto	l1301
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;tcpv4.c: 764: if(currentTCB->flags & 0x10U)
 11648  001666  0E35               	movlw	53
 11649  001668  EC08  F011         	call	PL110	;call to abstracted procedure
 11650  00166C  64F7               	cpfsgt	tblptrh,c
 11651  00166E  D003               	bra	u12697
 11652  001670  0008               	tblrd		*
 11653  001672  50F5               	movf	tablat,w,c
 11654  001674  D003               	bra	u12690
 11655  001676                     u12697:
 11656  001676  EC3C  F011         	call	PL114	;call to abstracted procedure
 11657  00167A  50EF               	movf	indf0,w,c
 11658  00167C                     u12690:
 11659  00167C  0100               	movlb	0	; () banked
 11660  00167E  6FC5               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
 11661  001680  A9C5               	btfss	(??_TCP_FiniteStateMachine+2)& (0+255),4,b
 11662  001682  EFEF  F010         	goto	l9292
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;tcpv4.c: 765: {
 11666                           ;tcpv4.c: 766: nextState = ESTABLISHED;
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;tcpv4.c: 767: currentTCB->socketState = SOCKET_CONNECTED;
 11670  001686  EC1D  F012         	call	PL202	;call to abstracted procedure
 11671  00168A  EC08  F011         	call	PL110	;call to abstracted procedure
 11672  00168E  64F7               	cpfsgt	tblptrh,c
 11673  001690  D004               	bra	u12717
 11674  001692  0E03               	movlw	3
 11675  001694  6EF5               	movwf	tablat,c
 11676  001696  000C               	tblwt		*
 11677  001698  D001               	bra	u12710
 11678  00169A                     u12717:
 11679  00169A  D136               	goto	u12957
 11680  00169C                     u12710:
 11681  00169C  EFEF  F010         	goto	l9292
 11682  0016A0                     l9054:
 11683                           
 11684                           ;tcpv4.c: 771: {
 11685                           ;tcpv4.c: 773: currentTCB->flags = 0x04U;
 11686  0016A0  0E35               	movlw	53
 11687  0016A2  EC08  F011         	call	PL110	;call to abstracted procedure
 11688  0016A6  64F7               	cpfsgt	tblptrh,c
 11689  0016A8  D004               	bra	u12727
 11690  0016AA  0E04               	movlw	4
 11691  0016AC  6EF5               	movwf	tablat,c
 11692  0016AE  000C               	tblwt		*
 11693  0016B0  D004               	bra	u12720
 11694  0016B2                     u12727:
 11695  0016B2  EC3C  F011         	call	PL114	;call to abstracted procedure
 11696  0016B6  0E04               	movlw	4
 11697  0016B8  6EEF               	movwf	indf0,c
 11698  0016BA                     u12720:
 11699                           
 11700                           ;tcpv4.c: 774: if(TCP_Snd(currentTCB))
 11701  0016BA  ECEB  F011         	call	PL178	;call to abstracted procedure
 11702  0016BE  ECA2  F012         	call	_TCP_Snd	;wreg free
 11703  0016C2  D6FC               	goto	L11
 11704  0016C4                     l9066:
 11705  0016C4  0100               	movlb	0	; () banked
 11706  0016C6  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 11707                           
 11708                           ; Switch size 1, requested type "space"
 11709                           ; Number of cases is 7, Range of values is 0 to 12
 11710                           ; switch strategies available:
 11711                           ; Name         Instructions Cycles
 11712                           ; simple_byte           22    12 (average)
 11713                           ;	Chosen strategy is simple_byte
 11714  0016C8  E101 D5CC          	bz	l1301
 11715  0016CC  0A03               	xorlw	3	; case 3
 11716  0016CE  E101 D5DB          	bz	l8976
 11717  0016D2  0A07               	xorlw	7	; case 4
 11718  0016D4  E101 D6F7          	bz	l9016
 11719  0016D8  0A01               	xorlw	1	; case 5
 11720  0016DA  E101 D63C          	bz	l8994
 11721  0016DE  0A0C               	xorlw	12	; case 9
 11722  0016E0  E101 D5C0          	bz	l1301
 11723  0016E4  0A03               	xorlw	3	; case 10
 11724  0016E6  E101 D5BD          	bz	l1301
 11725  0016EA  0A06               	xorlw	6	; case 12
 11726  0016EC  E098               	bz	l9038
 11727  0016EE  EFEF  F010         	goto	l9292
 11728  0016F2                     l9068:
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;tcpv4.c: 796: ;
 11732                           ;tcpv4.c: 797: if (currentTCB->localPort == tcpHeader.destPort)
 11733  0016F2  EC61  F012         	call	PL354	;call to abstracted procedure
 11734  0016F6  64F7               	cpfsgt	tblptrh,c
 11735  0016F8  D003               	bra	u12747
 11736  0016FA  EC6E  F012         	call	PL376	;call to abstracted procedure
 11737  0016FE  D004               	bra	u12740
 11738  001700                     u12747:
 11739  001700  EC3C  F011         	call	PL114	;call to abstracted procedure
 11740  001704  EC9D  F012         	call	PL484	;call to abstracted procedure
 11741  001708                     u12740:
 11742  001708  EC98  F012         	call	PL442	;call to abstracted procedure
 11743  00170C  E103               	bnz	u12751
 11744  00170E  EC93  F012         	call	PL426	;call to abstracted procedure
 11745  001712  A4D8               	btfss	status,2,c
 11746  001714                     u12751:
 11747  001714  EFEF  F010         	goto	l9292
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;tcpv4.c: 798: {
 11751                           ;tcpv4.c: 800: currentTCB->timeout = 0;
 11752  001718  0E30               	movlw	48
 11753  00171A  EC08  F011         	call	PL110	;call to abstracted procedure
 11754  00171E  64F7               	cpfsgt	tblptrh,c
 11755  001720  D003               	bra	u12767
 11756  001722  ECAB  F011         	call	PL150	;call to abstracted procedure
 11757  001726  D004               	bra	u12760
 11758  001728                     u12767:
 11759  001728  EC3C  F011         	call	PL114	;call to abstracted procedure
 11760  00172C  6AEE               	clrf	postinc0,c
 11761  00172E  6AEF               	clrf	indf0,c
 11762  001730                     u12760:
 11763                           
 11764                           ;tcpv4.c: 804: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPor
      +                          t == tcpHeader.sourcePort))
 11765  001730  0E02               	movlw	2
 11766  001732  EC08  F011         	call	PL110	;call to abstracted procedure
 11767  001736  64F7               	cpfsgt	tblptrh,c
 11768  001738  D003               	bra	u12777
 11769  00173A  EC53  F011         	call	PL120	;call to abstracted procedure
 11770  00173E  D004               	bra	u12770
 11771  001740                     u12777:
 11772  001740  EC3C  F011         	call	PL114	;call to abstracted procedure
 11773  001744  EC99  F011         	call	PL134	;call to abstracted procedure
 11774  001748                     u12770:
 11775  001748  EC39  F012         	call	PL326	;call to abstracted procedure
 11776  00174C  E13B               	bnz	l9078
 11777  00174E  EC3E  F012         	call	PL330	;call to abstracted procedure
 11778  001752  E138               	bnz	l9078
 11779  001754  EC48  F012         	call	PL340	;call to abstracted procedure
 11780  001758  E135               	bnz	l9078
 11781  00175A  EC4D  F012         	call	PL344	;call to abstracted procedure
 11782  00175E  A4D8               	btfss	status,2,c
 11783  001760                     u12781:
 11784  001760  D031               	goto	l9078
 11785                           
 11786                           ; BSR set to: 0
 11787  001762  0E06               	movlw	6
 11788  001764  EC08  F011         	call	PL110	;call to abstracted procedure
 11789  001768  64F7               	cpfsgt	tblptrh,c
 11790  00176A  D004               	bra	u12797
 11791  00176C  0009               	tblrd		*+
 11792  00176E  EC60  F011         	call	PL122	;call to abstracted procedure
 11793  001772  D006               	bra	u12790
 11794  001774                     u12797:
 11795  001774  EC3C  F011         	call	PL114	;call to abstracted procedure
 11796  001778  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 11797  00177C  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 11798  001780                     u12790:
 11799  001780  EC84  F012         	call	PL384	;call to abstracted procedure
 11800  001784  E11F               	bnz	l9078
 11801  001786  EC7A  F012         	call	PL380	;call to abstracted procedure
 11802  00178A  E11C               	bnz	l9078
 11803                           
 11804                           ; BSR set to: 0
 11805                           ;tcpv4.c: 805: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
 11806  00178C  0E10               	movlw	16
 11807  00178E  EC08  F011         	call	PL110	;call to abstracted procedure
 11808  001792  64F7               	cpfsgt	tblptrh,c
 11809  001794  D003               	bra	u12817
 11810  001796  EC53  F011         	call	PL120	;call to abstracted procedure
 11811  00179A  D004               	bra	u12810
 11812  00179C                     u12817:
 11813  00179C  EC3C  F011         	call	PL114	;call to abstracted procedure
 11814  0017A0  EC99  F011         	call	PL134	;call to abstracted procedure
 11815  0017A4                     u12810:
 11816  0017A4  EC8B  F011         	call	PL132	;call to abstracted procedure
 11817  0017A8  EC43  F012         	call	PL338	;call to abstracted procedure
 11818  0017AC  E10B               	bnz	l9078
 11819  0017AE  EC57  F012         	call	PL350	;call to abstracted procedure
 11820  0017B2  E108               	bnz	l9078
 11821  0017B4  EC5C  F012         	call	PL352	;call to abstracted procedure
 11822  0017B8  E105               	bnz	l9078
 11823  0017BA  EC69  F012         	call	PL356	;call to abstracted procedure
 11824  0017BE  E102               	bnz	l9078
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;tcpv4.c: 807: nextState = ESTABLISHED;
 11828  0017C0  0E04               	movlw	4
 11829  0017C2  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 11830  0017C4                     l9078:
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;tcpv4.c: 808: currentTCB->socketState = SOCKET_CONNECTED;
 11834  0017C4  0E36               	movlw	54
 11835  0017C6  EC08  F011         	call	PL110	;call to abstracted procedure
 11836  0017CA  64F7               	cpfsgt	tblptrh,c
 11837  0017CC  D004               	bra	u12837
 11838  0017CE  0E03               	movlw	3
 11839  0017D0  6EF5               	movwf	tablat,c
 11840  0017D2  000C               	tblwt		*
 11841  0017D4  D001               	bra	u12830
 11842  0017D6                     u12837:
 11843  0017D6  D098               	goto	u12957
 11844  0017D8                     u12830:
 11845  0017D8  EFEF  F010         	goto	l9292
 11846  0017DC                     l9080:
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;tcpv4.c: 812: ;
 11850                           ;tcpv4.c: 816: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPor
      +                          t == tcpHeader.sourcePort))
 11851  0017DC  0E02               	movlw	2
 11852  0017DE  EC08  F011         	call	PL110	;call to abstracted procedure
 11853  0017E2  64F7               	cpfsgt	tblptrh,c
 11854  0017E4  D003               	bra	u12847
 11855  0017E6  EC53  F011         	call	PL120	;call to abstracted procedure
 11856  0017EA  D004               	bra	u12840
 11857  0017EC                     u12847:
 11858  0017EC  EC3C  F011         	call	PL114	;call to abstracted procedure
 11859  0017F0  EC99  F011         	call	PL134	;call to abstracted procedure
 11860  0017F4                     u12840:
 11861  0017F4  EC39  F012         	call	PL326	;call to abstracted procedure
 11862  0017F8  E109               	bnz	u12851
 11863  0017FA  EC3E  F012         	call	PL330	;call to abstracted procedure
 11864  0017FE  E106               	bnz	u12851
 11865  001800  EC48  F012         	call	PL340	;call to abstracted procedure
 11866  001804  E103               	bnz	u12851
 11867  001806  EC4D  F012         	call	PL344	;call to abstracted procedure
 11868  00180A  A4D8               	btfss	status,2,c
 11869  00180C                     u12851:
 11870  00180C  EFEF  F010         	goto	l9292
 11871                           
 11872                           ; BSR set to: 0
 11873  001810  0E06               	movlw	6
 11874  001812  EC08  F011         	call	PL110	;call to abstracted procedure
 11875  001816  64F7               	cpfsgt	tblptrh,c
 11876  001818  D004               	bra	u12867
 11877  00181A  0009               	tblrd		*+
 11878  00181C  EC60  F011         	call	PL122	;call to abstracted procedure
 11879  001820  D006               	bra	u12860
 11880  001822                     u12867:
 11881  001822  EC3C  F011         	call	PL114	;call to abstracted procedure
 11882  001826  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 11883  00182A  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 11884  00182E                     u12860:
 11885  00182E  EC84  F012         	call	PL384	;call to abstracted procedure
 11886  001832  E103               	bnz	u12871
 11887  001834  EC7A  F012         	call	PL380	;call to abstracted procedure
 11888  001838  A4D8               	btfss	status,2,c
 11889  00183A                     u12871:
 11890  00183A  EFEF  F010         	goto	l9292
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;tcpv4.c: 817: {
 11894                           ;tcpv4.c: 820: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
 11895  00183E  0E0C               	movlw	12
 11896  001840  EC08  F011         	call	PL110	;call to abstracted procedure
 11897  001844  64F7               	cpfsgt	tblptrh,c
 11898  001846  D003               	bra	u12887
 11899  001848  EC53  F011         	call	PL120	;call to abstracted procedure
 11900  00184C  D004               	bra	u12880
 11901  00184E                     u12887:
 11902  00184E  EC3C  F011         	call	PL114	;call to abstracted procedure
 11903  001852  EC99  F011         	call	PL134	;call to abstracted procedure
 11904  001856                     u12880:
 11905  001856  EC89  F012         	call	PL388	;call to abstracted procedure
 11906  00185A  E109               	bnz	u12891
 11907  00185C  EC8E  F012         	call	PL392	;call to abstracted procedure
 11908  001860  E106               	bnz	u12891
 11909  001862  EC75  F012         	call	PL378	;call to abstracted procedure
 11910  001866  E103               	bnz	u12891
 11911  001868  EC7F  F012         	call	PL382	;call to abstracted procedure
 11912  00186C  A4D8               	btfss	status,2,c
 11913  00186E                     u12891:
 11914  00186E  EFEF  F010         	goto	l9292
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;tcpv4.c: 821: {
 11918                           ;tcpv4.c: 823: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
 11919  001872  0E10               	movlw	16
 11920  001874  EC08  F011         	call	PL110	;call to abstracted procedure
 11921  001878  64F7               	cpfsgt	tblptrh,c
 11922  00187A  D003               	bra	u12907
 11923  00187C  EC53  F011         	call	PL120	;call to abstracted procedure
 11924  001880  D004               	bra	u12900
 11925  001882                     u12907:
 11926  001882  EC3C  F011         	call	PL114	;call to abstracted procedure
 11927  001886  EC99  F011         	call	PL134	;call to abstracted procedure
 11928  00188A                     u12900:
 11929  00188A  EC8B  F011         	call	PL132	;call to abstracted procedure
 11930  00188E  EC43  F012         	call	PL338	;call to abstracted procedure
 11931  001892  E109               	bnz	u12911
 11932  001894  EC57  F012         	call	PL350	;call to abstracted procedure
 11933  001898  E106               	bnz	u12911
 11934  00189A  EC5C  F012         	call	PL352	;call to abstracted procedure
 11935  00189E  E103               	bnz	u12911
 11936  0018A0  EC69  F012         	call	PL356	;call to abstracted procedure
 11937  0018A4  A4D8               	btfss	status,2,c
 11938  0018A6                     u12911:
 11939  0018A6  EFEF  F010         	goto	l9292
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;tcpv4.c: 824: {
 11943                           ;tcpv4.c: 825: currentTCB->localSeqno = currentTCB->localSeqno + 1;
 11944  0018AA  0E10               	movlw	16
 11945  0018AC  EC08  F011         	call	PL110	;call to abstracted procedure
 11946  0018B0  64F7               	cpfsgt	tblptrh,c
 11947  0018B2  D003               	bra	u12927
 11948  0018B4  EC53  F011         	call	PL120	;call to abstracted procedure
 11949  0018B8  D004               	bra	u12920
 11950  0018BA                     u12927:
 11951  0018BA  EC3C  F011         	call	PL114	;call to abstracted procedure
 11952  0018BE  EC99  F011         	call	PL134	;call to abstracted procedure
 11953  0018C2                     u12920:
 11954  0018C2  EC8B  F011         	call	PL132	;call to abstracted procedure
 11955  0018C6  EC41  F011         	call	PL116	;call to abstracted procedure
 11956  0018CA  64F7               	cpfsgt	tblptrh,c
 11957  0018CC  D003               	bra	u12937
 11958  0018CE  ECBD  F011         	call	PL160	;call to abstracted procedure
 11959  0018D2  D004               	bra	u12930
 11960  0018D4                     u12937:
 11961  0018D4  EC3C  F011         	call	PL114	;call to abstracted procedure
 11962  0018D8  ECF5  F011         	call	PL184	;call to abstracted procedure
 11963  0018DC                     u12930:
 11964                           
 11965                           ;tcpv4.c: 827: currentTCB->timeout = 0;
 11966  0018DC  0E30               	movlw	48
 11967  0018DE  EC08  F011         	call	PL110	;call to abstracted procedure
 11968  0018E2  64F7               	cpfsgt	tblptrh,c
 11969  0018E4  D003               	bra	u12947
 11970  0018E6  ECAB  F011         	call	PL150	;call to abstracted procedure
 11971  0018EA  D004               	bra	u12940
 11972  0018EC                     u12947:
 11973  0018EC  EC3C  F011         	call	PL114	;call to abstracted procedure
 11974  0018F0  6AEE               	clrf	postinc0,c
 11975  0018F2  6AEF               	clrf	indf0,c
 11976  0018F4                     u12940:
 11977                           
 11978                           ;tcpv4.c: 829: nextState = ESTABLISHED;
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;tcpv4.c: 830: currentTCB->socketState = SOCKET_CONNECTED;
 11982  0018F4  EC10  F012         	call	PL194	;call to abstracted procedure
 11983  0018F8  EC08  F011         	call	PL110	;call to abstracted procedure
 11984  0018FC  64F7               	cpfsgt	tblptrh,c
 11985  0018FE  D004               	bra	u12957
 11986  001900  0E03               	movlw	3
 11987  001902  6EF5               	movwf	tablat,c
 11988  001904  000C               	tblwt		*
 11989  001906  D004               	bra	u12950
 11990  001908                     u12957:
 11991  001908  EC3C  F011         	call	PL114	;call to abstracted procedure
 11992  00190C  0E03               	movlw	3
 11993  00190E  6EEF               	movwf	indf0,c
 11994  001910                     u12950:
 11995  001910  EFEF  F010         	goto	l9292
 11996  001914                     l9094:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;tcpv4.c: 836: ;
 12000                           ;tcpv4.c: 838: currentTCB->timeout = 0;
 12001  001914  0E30               	movlw	48
 12002  001916  EC08  F011         	call	PL110	;call to abstracted procedure
 12003  00191A  64F7               	cpfsgt	tblptrh,c
 12004  00191C  D003               	bra	u12967
 12005  00191E  ECAB  F011         	call	PL150	;call to abstracted procedure
 12006  001922  D004               	bra	u12960
 12007  001924                     u12967:
 12008  001924  EC3C  F011         	call	PL114	;call to abstracted procedure
 12009  001928  6AEE               	clrf	postinc0,c
 12010  00192A  6AEF               	clrf	indf0,c
 12011  00192C                     u12960:
 12012                           
 12013                           ;tcpv4.c: 840: currentTCB->flags = 0x01U;
 12014  00192C  0E35               	movlw	53
 12015  00192E  EC08  F011         	call	PL110	;call to abstracted procedure
 12016  001932  64F7               	cpfsgt	tblptrh,c
 12017  001934  D004               	bra	u12977
 12018  001936  0E01               	movlw	1
 12019  001938  6EF5               	movwf	tablat,c
 12020  00193A  000C               	tblwt		*
 12021  00193C  D004               	bra	u12970
 12022  00193E                     u12977:
 12023  00193E  EC3C  F011         	call	PL114	;call to abstracted procedure
 12024  001942  0E01               	movlw	1
 12025  001944  6EEF               	movwf	indf0,c
 12026  001946                     u12970:
 12027                           
 12028                           ;tcpv4.c: 841: currentTCB->timeout = ((unsigned long)1*2);
 12029  001946  0E30               	movlw	48
 12030  001948  EC08  F011         	call	PL110	;call to abstracted procedure
 12031  00194C  64F7               	cpfsgt	tblptrh,c
 12032  00194E  D003               	bra	u12987
 12033  001950  ECE5  F011         	call	PL170	;call to abstracted procedure
 12034  001954  D004               	bra	u12980
 12035  001956                     u12987:
 12036  001956  EC3C  F011         	call	PL114	;call to abstracted procedure
 12037  00195A  EC35  F012         	call	PL318	;call to abstracted procedure
 12038  00195E                     u12980:
 12039                           
 12040                           ;tcpv4.c: 842: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 12041  00195E  0E32               	movlw	50
 12042  001960  EC08  F011         	call	PL110	;call to abstracted procedure
 12043  001964  64F7               	cpfsgt	tblptrh,c
 12044  001966  D003               	bra	u12997
 12045  001968  ECE5  F011         	call	PL170	;call to abstracted procedure
 12046  00196C  D004               	bra	u12990
 12047  00196E                     u12997:
 12048  00196E  EC3C  F011         	call	PL114	;call to abstracted procedure
 12049  001972  EC35  F012         	call	PL318	;call to abstracted procedure
 12050  001976                     u12990:
 12051                           
 12052                           ;tcpv4.c: 843: currentTCB->timeoutsCount = (5u);
 12053  001976  0E34               	movlw	52
 12054  001978  EC08  F011         	call	PL110	;call to abstracted procedure
 12055  00197C  64F7               	cpfsgt	tblptrh,c
 12056  00197E  D004               	bra	u13007
 12057  001980  0E05               	movlw	5
 12058  001982  6EF5               	movwf	tablat,c
 12059  001984  000C               	tblwt		*
 12060  001986  D004               	bra	u13000
 12061  001988                     u13007:
 12062  001988  EC3C  F011         	call	PL114	;call to abstracted procedure
 12063  00198C  0E05               	movlw	5
 12064  00198E  6EEF               	movwf	indf0,c
 12065  001990                     u13000:
 12066  001990                     l9096:
 12067                           
 12068                           ;tcpv4.c: 845: nextState = FIN_WAIT_1;
 12069  001990  0E05               	movlw	5
 12070  001992  0100               	movlb	0	; () banked
 12071  001994  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 12072  001996                     l9098:
 12073                           
 12074                           ;tcpv4.c: 846: TCP_Snd(currentTCB);
 12075  001996  ECEB  F011         	call	PL178	;call to abstracted procedure
 12076  00199A  ECA2  F012         	call	_TCP_Snd	;wreg free
 12077                           
 12078                           ;tcpv4.c: 847: break;
 12079  00199E  EFEF  F010         	goto	l9292
 12080  0019A2                     l9100:
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;tcpv4.c: 849: case RCV_RST:
 12084                           ;tcpv4.c: 851: ;
 12085                           ;tcpv4.c: 853: if (currentTCB->localPort == tcpHeader.destPort)
 12086  0019A2  EC61  F012         	call	PL354	;call to abstracted procedure
 12087  0019A6  64F7               	cpfsgt	tblptrh,c
 12088  0019A8  D003               	bra	u13017
 12089  0019AA  EC6E  F012         	call	PL376	;call to abstracted procedure
 12090  0019AE  D004               	bra	u13010
 12091  0019B0                     u13017:
 12092  0019B0  EC3C  F011         	call	PL114	;call to abstracted procedure
 12093  0019B4  EC9D  F012         	call	PL484	;call to abstracted procedure
 12094  0019B8                     u13010:
 12095  0019B8  EC98  F012         	call	PL442	;call to abstracted procedure
 12096  0019BC  E103               	bnz	u13021
 12097  0019BE  EC93  F012         	call	PL426	;call to abstracted procedure
 12098  0019C2  A4D8               	btfss	status,2,c
 12099  0019C4                     u13021:
 12100  0019C4  EFEF  F010         	goto	l9292
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;tcpv4.c: 854: {
 12104                           ;tcpv4.c: 855: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
 12105  0019C8  0E0C               	movlw	12
 12106  0019CA  EC08  F011         	call	PL110	;call to abstracted procedure
 12107  0019CE  64F7               	cpfsgt	tblptrh,c
 12108  0019D0  D003               	bra	u13037
 12109  0019D2  EC53  F011         	call	PL120	;call to abstracted procedure
 12110  0019D6  D004               	bra	u13030
 12111  0019D8                     u13037:
 12112  0019D8  EC3C  F011         	call	PL114	;call to abstracted procedure
 12113  0019DC  EC99  F011         	call	PL134	;call to abstracted procedure
 12114  0019E0                     u13030:
 12115  0019E0  EC89  F012         	call	PL388	;call to abstracted procedure
 12116  0019E4  E109               	bnz	u13041
 12117  0019E6  EC8E  F012         	call	PL392	;call to abstracted procedure
 12118  0019EA  E106               	bnz	u13041
 12119  0019EC  EC75  F012         	call	PL378	;call to abstracted procedure
 12120  0019F0  E103               	bnz	u13041
 12121  0019F2  EC7F  F012         	call	PL382	;call to abstracted procedure
 12122  0019F6  A4D8               	btfss	status,2,c
 12123  0019F8                     u13041:
 12124  0019F8  D3F2               	goto	l9292
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;tcpv4.c: 856: {
 12128                           ;tcpv4.c: 857: ;
 12129                           ;tcpv4.c: 858: currentTCB->destIP = 0;
 12130  0019FA  0E02               	movlw	2
 12131  0019FC  EC08  F011         	call	PL110	;call to abstracted procedure
 12132  001A00  64F7               	cpfsgt	tblptrh,c
 12133  001A02  D007               	bra	u13057
 12134  001A04  6AF5               	clrf	tablat,c
 12135  001A06  000D               	tblwt		*+
 12136  001A08  6AF5               	clrf	tablat,c
 12137  001A0A  000D               	tblwt		*+
 12138  001A0C  ECAB  F011         	call	PL150	;call to abstracted procedure
 12139  001A10  D004               	bra	u13050
 12140  001A12                     u13057:
 12141  001A12  EC3C  F011         	call	PL114	;call to abstracted procedure
 12142  001A16  ECF0  F011         	call	PL180	;call to abstracted procedure
 12143  001A1A                     u13050:
 12144                           
 12145                           ;tcpv4.c: 859: currentTCB->destPort = 0;
 12146  001A1A  0E06               	movlw	6
 12147  001A1C  DBF9               	call	PL110	;call to abstracted procedure
 12148  001A1E  64F7               	cpfsgt	tblptrh,c
 12149  001A20  D003               	bra	u13067
 12150  001A22  ECAB  F011         	call	PL150	;call to abstracted procedure
 12151  001A26  D004               	bra	u13060
 12152  001A28                     u13067:
 12153  001A28  EC3C  F011         	call	PL114	;call to abstracted procedure
 12154  001A2C  6AEE               	clrf	postinc0,c
 12155  001A2E  6AEF               	clrf	indf0,c
 12156  001A30                     u13060:
 12157                           
 12158                           ;tcpv4.c: 860: currentTCB->localSeqno = 0;
 12159  001A30  0E10               	movlw	16
 12160  001A32  DBEE               	call	PL110	;call to abstracted procedure
 12161  001A34  64F7               	cpfsgt	tblptrh,c
 12162  001A36  D007               	bra	u13077
 12163  001A38  6AF5               	clrf	tablat,c
 12164  001A3A  000D               	tblwt		*+
 12165  001A3C  6AF5               	clrf	tablat,c
 12166  001A3E  000D               	tblwt		*+
 12167  001A40  ECAB  F011         	call	PL150	;call to abstracted procedure
 12168  001A44  D004               	bra	u13070
 12169  001A46                     u13077:
 12170  001A46  EC3C  F011         	call	PL114	;call to abstracted procedure
 12171  001A4A  ECF0  F011         	call	PL180	;call to abstracted procedure
 12172  001A4E                     u13070:
 12173                           
 12174                           ;tcpv4.c: 861: currentTCB->localLastAck = 0;
 12175  001A4E  0E14               	movlw	20
 12176  001A50  DBDF               	call	PL110	;call to abstracted procedure
 12177  001A52  64F7               	cpfsgt	tblptrh,c
 12178  001A54  D007               	bra	u13087
 12179  001A56  6AF5               	clrf	tablat,c
 12180  001A58  000D               	tblwt		*+
 12181  001A5A  6AF5               	clrf	tablat,c
 12182  001A5C  000D               	tblwt		*+
 12183  001A5E  ECAB  F011         	call	PL150	;call to abstracted procedure
 12184  001A62  D004               	bra	u13080
 12185  001A64                     u13087:
 12186  001A64  EC3C  F011         	call	PL114	;call to abstracted procedure
 12187  001A68  ECF0  F011         	call	PL180	;call to abstracted procedure
 12188  001A6C                     u13080:
 12189                           
 12190                           ;tcpv4.c: 862: currentTCB->remoteSeqno = 0;
 12191  001A6C  0E08               	movlw	8
 12192  001A6E  DBD0               	call	PL110	;call to abstracted procedure
 12193  001A70  64F7               	cpfsgt	tblptrh,c
 12194  001A72  D007               	bra	u13097
 12195  001A74  6AF5               	clrf	tablat,c
 12196  001A76  000D               	tblwt		*+
 12197  001A78  6AF5               	clrf	tablat,c
 12198  001A7A  000D               	tblwt		*+
 12199  001A7C  ECAB  F011         	call	PL150	;call to abstracted procedure
 12200  001A80  D003               	bra	u13090
 12201  001A82                     u13097:
 12202  001A82  DBFA               	call	PL114	;call to abstracted procedure
 12203  001A84  ECF0  F011         	call	PL180	;call to abstracted procedure
 12204  001A88                     u13090:
 12205                           
 12206                           ;tcpv4.c: 863: currentTCB->remoteAck = 0;
 12207  001A88  0E0C               	movlw	12
 12208  001A8A  DBC2               	call	PL110	;call to abstracted procedure
 12209  001A8C  64F7               	cpfsgt	tblptrh,c
 12210  001A8E  D007               	bra	u13107
 12211  001A90  6AF5               	clrf	tablat,c
 12212  001A92  000D               	tblwt		*+
 12213  001A94  6AF5               	clrf	tablat,c
 12214  001A96  000D               	tblwt		*+
 12215  001A98  ECAB  F011         	call	PL150	;call to abstracted procedure
 12216  001A9C  D003               	bra	u13100
 12217  001A9E                     u13107:
 12218  001A9E  DBEC               	call	PL114	;call to abstracted procedure
 12219  001AA0  ECF0  F011         	call	PL180	;call to abstracted procedure
 12220  001AA4                     u13100:
 12221                           
 12222                           ;tcpv4.c: 864: currentTCB->remoteWnd = 0;
 12223  001AA4  0E18               	movlw	24
 12224  001AA6  DBB4               	call	PL110	;call to abstracted procedure
 12225  001AA8  64F7               	cpfsgt	tblptrh,c
 12226  001AAA  D003               	bra	u13117
 12227  001AAC  ECAB  F011         	call	PL150	;call to abstracted procedure
 12228  001AB0  D003               	bra	u13110
 12229  001AB2                     u13117:
 12230  001AB2  DBE2               	call	PL114	;call to abstracted procedure
 12231  001AB4  6AEE               	clrf	postinc0,c
 12232  001AB6  6AEF               	clrf	indf0,c
 12233  001AB8                     u13110:
 12234                           
 12235                           ;tcpv4.c: 865: currentTCB->mss = 0;
 12236  001AB8  0E1C               	movlw	28
 12237  001ABA  DBAA               	call	PL110	;call to abstracted procedure
 12238  001ABC  64F7               	cpfsgt	tblptrh,c
 12239  001ABE  D003               	bra	u13127
 12240  001AC0  ECAB  F011         	call	PL150	;call to abstracted procedure
 12241  001AC4  D003               	bra	u13120
 12242  001AC6                     u13127:
 12243  001AC6  DBD8               	call	PL114	;call to abstracted procedure
 12244  001AC8  6AEE               	clrf	postinc0,c
 12245  001ACA  6AEF               	clrf	indf0,c
 12246  001ACC                     u13120:
 12247  001ACC                     l9106:
 12248                           
 12249                           ;tcpv4.c: 867: nextState = LISTEN;
 12250  001ACC  0E01               	movlw	1
 12251  001ACE  0100               	movlb	0	; () banked
 12252  001AD0  D273               	goto	L15
 12253  001AD2                     l9108:
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;tcpv4.c: 872: ;
 12257                           ;tcpv4.c: 873: if (currentTCB->timeoutsCount)
 12258  001AD2  0E34               	movlw	52
 12259  001AD4  DB9D               	call	PL110	;call to abstracted procedure
 12260  001AD6  64F7               	cpfsgt	tblptrh,c
 12261  001AD8  D003               	bra	u13137
 12262  001ADA  0008               	tblrd		*
 12263  001ADC  50F5               	movf	tablat,w,c
 12264  001ADE  D002               	bra	u13130
 12265  001AE0                     u13137:
 12266  001AE0  DBCB               	call	PL114	;call to abstracted procedure
 12267  001AE2  50EF               	movf	indf0,w,c
 12268  001AE4                     u13130:
 12269  001AE4  0900               	iorlw	0
 12270  001AE6  E001 D756          	bnz	l9098
 12271                           
 12272                           ;tcpv4.c: 877: else
 12273                           ;tcpv4.c: 878: {
 12274                           ;tcpv4.c: 880: currentTCB->flags = 0x04U;
 12275  001AEA  0E35               	movlw	53
 12276  001AEC  DB91               	call	PL110	;call to abstracted procedure
 12277  001AEE  64F7               	cpfsgt	tblptrh,c
 12278  001AF0  D004               	bra	u13157
 12279  001AF2  0E04               	movlw	4
 12280  001AF4  6EF5               	movwf	tablat,c
 12281  001AF6  000C               	tblwt		*
 12282  001AF8  D003               	bra	u13150
 12283  001AFA                     u13157:
 12284  001AFA  DBBE               	call	PL114	;call to abstracted procedure
 12285  001AFC  0E04               	movlw	4
 12286  001AFE  6EEF               	movwf	indf0,c
 12287  001B00                     u13150:
 12288                           
 12289                           ;tcpv4.c: 881: if(TCP_Snd(currentTCB))
 12290  001B00  ECEB  F011         	call	PL178	;call to abstracted procedure
 12291  001B04  ECA2  F012         	call	_TCP_Snd	;wreg free
 12292  001B08  0900               	iorlw	0
 12293  001B0A  E101 D368          	bz	l9292
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;tcpv4.c: 882: {
 12297                           ;tcpv4.c: 883: currentTCB->destIP = 0;
 12298  001B0E  0E02               	movlw	2
 12299  001B10  DB7F               	call	PL110	;call to abstracted procedure
 12300  001B12  64F7               	cpfsgt	tblptrh,c
 12301  001B14  D007               	bra	u13177
 12302  001B16  6AF5               	clrf	tablat,c
 12303  001B18  000D               	tblwt		*+
 12304  001B1A  6AF5               	clrf	tablat,c
 12305  001B1C  000D               	tblwt		*+
 12306  001B1E  ECAB  F011         	call	PL150	;call to abstracted procedure
 12307  001B22  D003               	bra	u13170
 12308  001B24                     u13177:
 12309  001B24  DBA9               	call	PL114	;call to abstracted procedure
 12310  001B26  ECF0  F011         	call	PL180	;call to abstracted procedure
 12311  001B2A                     u13170:
 12312                           
 12313                           ;tcpv4.c: 884: currentTCB->destPort = 0;
 12314  001B2A  0E06               	movlw	6
 12315  001B2C  DB71               	call	PL110	;call to abstracted procedure
 12316  001B2E  64F7               	cpfsgt	tblptrh,c
 12317  001B30  D003               	bra	u13187
 12318  001B32  ECAB  F011         	call	PL150	;call to abstracted procedure
 12319  001B36  D003               	bra	u13180
 12320  001B38                     u13187:
 12321  001B38  DB9F               	call	PL114	;call to abstracted procedure
 12322  001B3A  6AEE               	clrf	postinc0,c
 12323  001B3C  6AEF               	clrf	indf0,c
 12324  001B3E                     u13180:
 12325                           
 12326                           ;tcpv4.c: 885: currentTCB->localSeqno = 0;
 12327  001B3E  0E10               	movlw	16
 12328  001B40  DB67               	call	PL110	;call to abstracted procedure
 12329  001B42  64F7               	cpfsgt	tblptrh,c
 12330  001B44  D007               	bra	u13197
 12331  001B46  6AF5               	clrf	tablat,c
 12332  001B48  000D               	tblwt		*+
 12333  001B4A  6AF5               	clrf	tablat,c
 12334  001B4C  000D               	tblwt		*+
 12335  001B4E  ECAB  F011         	call	PL150	;call to abstracted procedure
 12336  001B52  D003               	bra	u13190
 12337  001B54                     u13197:
 12338  001B54  DB91               	call	PL114	;call to abstracted procedure
 12339  001B56  ECF0  F011         	call	PL180	;call to abstracted procedure
 12340  001B5A                     u13190:
 12341                           
 12342                           ;tcpv4.c: 886: currentTCB->localLastAck = 0;
 12343  001B5A  0E14               	movlw	20
 12344  001B5C  DB59               	call	PL110	;call to abstracted procedure
 12345  001B5E  64F7               	cpfsgt	tblptrh,c
 12346  001B60  D006               	bra	u13207
 12347  001B62  6AF5               	clrf	tablat,c
 12348  001B64  000D               	tblwt		*+
 12349  001B66  6AF5               	clrf	tablat,c
 12350  001B68  000D               	tblwt		*+
 12351  001B6A  DBF5               	call	PL150	;call to abstracted procedure
 12352  001B6C  D003               	bra	u13200
 12353  001B6E                     u13207:
 12354  001B6E  DB84               	call	PL114	;call to abstracted procedure
 12355  001B70  ECF0  F011         	call	PL180	;call to abstracted procedure
 12356  001B74                     u13200:
 12357                           
 12358                           ;tcpv4.c: 887: currentTCB->remoteSeqno = 0;
 12359  001B74  0E08               	movlw	8
 12360  001B76  DB4C               	call	PL110	;call to abstracted procedure
 12361  001B78  64F7               	cpfsgt	tblptrh,c
 12362  001B7A  D006               	bra	u13217
 12363  001B7C  6AF5               	clrf	tablat,c
 12364  001B7E  000D               	tblwt		*+
 12365  001B80  6AF5               	clrf	tablat,c
 12366  001B82  000D               	tblwt		*+
 12367  001B84  DBE8               	call	PL150	;call to abstracted procedure
 12368  001B86  D003               	bra	u13210
 12369  001B88                     u13217:
 12370  001B88  DB77               	call	PL114	;call to abstracted procedure
 12371  001B8A  ECF0  F011         	call	PL180	;call to abstracted procedure
 12372  001B8E                     u13210:
 12373                           
 12374                           ;tcpv4.c: 888: currentTCB->remoteAck = 0;
 12375  001B8E  0E0C               	movlw	12
 12376  001B90  DB3F               	call	PL110	;call to abstracted procedure
 12377  001B92  64F7               	cpfsgt	tblptrh,c
 12378  001B94  D006               	bra	u13227
 12379  001B96  6AF5               	clrf	tablat,c
 12380  001B98  000D               	tblwt		*+
 12381  001B9A  6AF5               	clrf	tablat,c
 12382  001B9C  000D               	tblwt		*+
 12383  001B9E  DBDB               	call	PL150	;call to abstracted procedure
 12384  001BA0  D003               	bra	u13220
 12385  001BA2                     u13227:
 12386  001BA2  DB6A               	call	PL114	;call to abstracted procedure
 12387  001BA4  ECF0  F011         	call	PL180	;call to abstracted procedure
 12388  001BA8                     u13220:
 12389                           
 12390                           ;tcpv4.c: 889: currentTCB->remoteWnd = 0;
 12391  001BA8  0E18               	movlw	24
 12392  001BAA  DB32               	call	PL110	;call to abstracted procedure
 12393  001BAC  64F7               	cpfsgt	tblptrh,c
 12394  001BAE  D002               	bra	u13237
 12395  001BB0  DBD2               	call	PL150	;call to abstracted procedure
 12396  001BB2  D003               	bra	u13230
 12397  001BB4                     u13237:
 12398  001BB4  DB61               	call	PL114	;call to abstracted procedure
 12399  001BB6  6AEE               	clrf	postinc0,c
 12400  001BB8  6AEF               	clrf	indf0,c
 12401  001BBA                     u13230:
 12402                           
 12403                           ;tcpv4.c: 890: currentTCB->mss = 0;
 12404  001BBA  0E1C               	movlw	28
 12405  001BBC  DB29               	call	PL110	;call to abstracted procedure
 12406  001BBE  64F7               	cpfsgt	tblptrh,c
 12407  001BC0  D002               	bra	u13247
 12408  001BC2  DBC9               	call	PL150	;call to abstracted procedure
 12409  001BC4  D003               	bra	u13240
 12410  001BC6                     u13247:
 12411  001BC6  DB58               	call	PL114	;call to abstracted procedure
 12412  001BC8  6AEE               	clrf	postinc0,c
 12413  001BCA  6AEF               	clrf	indf0,c
 12414  001BCC                     u13240:
 12415  001BCC  D77F               	goto	l9106
 12416  001BCE                     l9122:
 12417  001BCE  0100               	movlb	0	; () banked
 12418  001BD0  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 12419                           
 12420                           ; Switch size 1, requested type "space"
 12421                           ; Number of cases is 6, Range of values is 0 to 12
 12422                           ; switch strategies available:
 12423                           ; Name         Instructions Cycles
 12424                           ; simple_byte           19    10 (average)
 12425                           ;	Chosen strategy is simple_byte
 12426  001BD2  E101 D69F          	bz	l9094
 12427  001BD6  0A04               	xorlw	4	; case 4
 12428  001BD8  E101 D600          	bz	l9080
 12429  001BDC  0A01               	xorlw	1	; case 5
 12430  001BDE  E101 D588          	bz	l9068
 12431  001BE2  0A0C               	xorlw	12	; case 9
 12432  001BE4  E101 D6DD          	bz	l9100
 12433  001BE8  0A03               	xorlw	3	; case 10
 12434  001BEA  E101 D6DA          	bz	l9100
 12435  001BEE  0A06               	xorlw	6	; case 12
 12436  001BF0  E101 D76F          	bz	l9108
 12437  001BF4  D2F4               	goto	l9292
 12438  001BF6                     l9124:
 12439                           
 12440                           ; BSR set to: 0
 12441                           ;tcpv4.c: 904: ;
 12442                           ;tcpv4.c: 905: if (currentTCB->destIP == receivedRemoteAddress)
 12443  001BF6  0E02               	movlw	2
 12444  001BF8  DB0B               	call	PL110	;call to abstracted procedure
 12445  001BFA  64F7               	cpfsgt	tblptrh,c
 12446  001BFC  D002               	bra	u13257
 12447  001BFE  DB53               	call	PL120	;call to abstracted procedure
 12448  001C00  D002               	bra	u13250
 12449  001C02                     u13257:
 12450  001C02  DB3A               	call	PL114	;call to abstracted procedure
 12451  001C04  DB96               	call	PL134	;call to abstracted procedure
 12452  001C06                     u13250:
 12453  001C06  EC39  F012         	call	PL326	;call to abstracted procedure
 12454  001C0A  E109               	bnz	u13261
 12455  001C0C  EC3E  F012         	call	PL330	;call to abstracted procedure
 12456  001C10  E106               	bnz	u13261
 12457  001C12  EC48  F012         	call	PL340	;call to abstracted procedure
 12458  001C16  E103               	bnz	u13261
 12459  001C18  EC4D  F012         	call	PL344	;call to abstracted procedure
 12460  001C1C  A4D8               	btfss	status,2,c
 12461  001C1E                     u13261:
 12462  001C1E  D2DF               	goto	l9292
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;tcpv4.c: 906: {
 12466                           ;tcpv4.c: 910: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
 12467  001C20  0E0C               	movlw	12
 12468  001C22  DAF6               	call	PL110	;call to abstracted procedure
 12469  001C24  64F7               	cpfsgt	tblptrh,c
 12470  001C26  D002               	bra	u13277
 12471  001C28  DB3E               	call	PL120	;call to abstracted procedure
 12472  001C2A  D002               	bra	u13270
 12473  001C2C                     u13277:
 12474  001C2C  DB25               	call	PL114	;call to abstracted procedure
 12475  001C2E  DB81               	call	PL134	;call to abstracted procedure
 12476  001C30                     u13270:
 12477  001C30  EC89  F012         	call	PL388	;call to abstracted procedure
 12478  001C34  E109               	bnz	u13281
 12479  001C36  EC8E  F012         	call	PL392	;call to abstracted procedure
 12480  001C3A  E106               	bnz	u13281
 12481  001C3C  EC75  F012         	call	PL378	;call to abstracted procedure
 12482  001C40  E103               	bnz	u13281
 12483  001C42  EC7F  F012         	call	PL382	;call to abstracted procedure
 12484  001C46  A4D8               	btfss	status,2,c
 12485  001C48                     u13281:
 12486  001C48  D2CA               	goto	l9292
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;tcpv4.c: 911: {
 12490                           ;tcpv4.c: 915: if (currentTCB->localLastAck < tcpHeader.ackNumber)
 12491  001C4A  0E14               	movlw	20
 12492  001C4C  DAE1               	call	PL110	;call to abstracted procedure
 12493  001C4E  64F7               	cpfsgt	tblptrh,c
 12494  001C50  D002               	bra	u13297
 12495  001C52  DB29               	call	PL120	;call to abstracted procedure
 12496  001C54  D002               	bra	u13290
 12497  001C56                     u13297:
 12498  001C56  DB10               	call	PL114	;call to abstracted procedure
 12499  001C58  DB6C               	call	PL134	;call to abstracted procedure
 12500  001C5A                     u13290:
 12501  001C5A  0101               	movlb	1	; () banked
 12502  001C5C  51BC               	movf	(_tcpHeader+8)& (0+255),w,b
 12503  001C5E  0100               	movlb	0	; () banked
 12504  001C60  5DC5               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 12505  001C62  0101               	movlb	1	; () banked
 12506  001C64  51BD               	movf	(_tcpHeader+9)& (0+255),w,b
 12507  001C66  0100               	movlb	0	; () banked
 12508  001C68  59C6               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 12509  001C6A  0101               	movlb	1	; () banked
 12510  001C6C  51BE               	movf	(_tcpHeader+10)& (0+255),w,b
 12511  001C6E  0100               	movlb	0	; () banked
 12512  001C70  59C7               	subwfb	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 12513  001C72  0101               	movlb	1	; () banked
 12514  001C74  51BF               	movf	(_tcpHeader+11)& (0+255),w,b
 12515  001C76  0100               	movlb	0	; () banked
 12516  001C78  59C8               	subwfb	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 12517  001C7A  E301 D2B0          	bc	l9292
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;tcpv4.c: 916: {
 12521                           ;tcpv4.c: 918: if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber)
 12522  001C7E  0E10               	movlw	16
 12523  001C80  DAC7               	call	PL110	;call to abstracted procedure
 12524  001C82  64F7               	cpfsgt	tblptrh,c
 12525  001C84  D002               	bra	u13317
 12526  001C86  DB0F               	call	PL120	;call to abstracted procedure
 12527  001C88  D002               	bra	u13310
 12528  001C8A                     u13317:
 12529  001C8A  DAF6               	call	PL114	;call to abstracted procedure
 12530  001C8C  DB52               	call	PL134	;call to abstracted procedure
 12531  001C8E                     u13310:
 12532  001C8E  DB43               	call	PL132	;call to abstracted procedure
 12533  001C90  0101               	movlb	1	; () banked
 12534  001C92  51BC               	movf	(_tcpHeader+8)& (0+255),w,b
 12535  001C94  0100               	movlb	0	; () banked
 12536  001C96  5DC9               	subwf	(??_TCP_FiniteStateMachine+6)& (0+255),w,b
 12537  001C98  0101               	movlb	1	; () banked
 12538  001C9A  51BD               	movf	(_tcpHeader+9)& (0+255),w,b
 12539  001C9C  0100               	movlb	0	; () banked
 12540  001C9E  59CA               	subwfb	(??_TCP_FiniteStateMachine+7)& (0+255),w,b
 12541  001CA0  0101               	movlb	1	; () banked
 12542  001CA2  51BE               	movf	(_tcpHeader+10)& (0+255),w,b
 12543  001CA4  0100               	movlb	0	; () banked
 12544  001CA6  59CB               	subwfb	(??_TCP_FiniteStateMachine+8)& (0+255),w,b
 12545  001CA8  0101               	movlb	1	; () banked
 12546  001CAA  51BF               	movf	(_tcpHeader+11)& (0+255),w,b
 12547  001CAC  0100               	movlb	0	; () banked
 12548  001CAE  59CC               	subwfb	(??_TCP_FiniteStateMachine+9)& (0+255),w,b
 12549  001CB0  E201 D0AC          	bnc	l9148
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;tcpv4.c: 919: {
 12553                           ;tcpv4.c: 920: notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
 12554  001CB4  0E10               	movlw	16
 12555  001CB6  DAAC               	call	PL110	;call to abstracted procedure
 12556  001CB8  64F7               	cpfsgt	tblptrh,c
 12557  001CBA  D003               	bra	u13337
 12558  001CBC  0009               	tblrd		*+
 12559  001CBE  DB00               	call	PL122	;call to abstracted procedure
 12560  001CC0  D005               	bra	u13330
 12561  001CC2                     u13337:
 12562  001CC2  DADA               	call	PL114	;call to abstracted procedure
 12563  001CC4  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 12564  001CC8  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 12565  001CCC                     u13330:
 12566  001CCC  0101               	movlb	1	; () banked
 12567  001CCE  51BC               	movf	(_tcpHeader+8)& (0+255),w,b
 12568  001CD0  0100               	movlb	0	; () banked
 12569  001CD2  5DC5               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 12570  001CD4  6FD0               	movwf	TCP_FiniteStateMachine@notAckBytes& (0+255),b
 12571  001CD6  0101               	movlb	1	; () banked
 12572  001CD8  51BD               	movf	(_tcpHeader+9)& (0+255),w,b
 12573  001CDA  0100               	movlb	0	; () banked
 12574  001CDC  59C6               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 12575  001CDE  6FD1               	movwf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),b
 12576                           
 12577                           ;tcpv4.c: 923: currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
 12578  001CE0  0E25               	movlw	37
 12579  001CE2  DA96               	call	PL110	;call to abstracted procedure
 12580  001CE4  64F7               	cpfsgt	tblptrh,c
 12581  001CE6  D003               	bra	u13347
 12582  001CE8  0009               	tblrd		*+
 12583  001CEA  DAEA               	call	PL122	;call to abstracted procedure
 12584  001CEC  D005               	bra	u13340
 12585  001CEE                     u13347:
 12586  001CEE  DAC4               	call	PL114	;call to abstracted procedure
 12587  001CF0  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 12588  001CF4  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 12589  001CF8                     u13340:
 12590  001CF8  0100               	movlb	0	; () banked
 12591  001CFA  51D0               	movf	TCP_FiniteStateMachine@notAckBytes& (0+255),w,b
 12592  001CFC  5FC5               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
 12593  001CFE  51D1               	movf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),w,b
 12594  001D00  5BC6               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
 12595  001D02  0E25               	movlw	37
 12596  001D04  DAE3               	call	PL124	;call to abstracted procedure
 12597  001D06  64F7               	cpfsgt	tblptrh,c
 12598  001D08  D002               	bra	u13357
 12599  001D0A  DB44               	call	PL164	;call to abstracted procedure
 12600  001D0C  D002               	bra	u13350
 12601  001D0E                     u13357:
 12602  001D0E  DAB4               	call	PL114	;call to abstracted procedure
 12603  001D10  DBA0               	call	PL210	;call to abstracted procedure
 12604  001D12                     u13350:
 12605                           
 12606                           ;tcpv4.c: 924: currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
 12607  001D12  0E27               	movlw	39
 12608  001D14  DA7D               	call	PL110	;call to abstracted procedure
 12609  001D16  64F7               	cpfsgt	tblptrh,c
 12610  001D18  D003               	bra	u13367
 12611  001D1A  0009               	tblrd		*+
 12612  001D1C  DAD1               	call	PL122	;call to abstracted procedure
 12613  001D1E  D005               	bra	u13360
 12614  001D20                     u13367:
 12615  001D20  DAAB               	call	PL114	;call to abstracted procedure
 12616  001D22  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 12617  001D26  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 12618  001D2A                     u13360:
 12619  001D2A  0100               	movlb	0	; () banked
 12620  001D2C  51D0               	movf	TCP_FiniteStateMachine@notAckBytes& (0+255),w,b
 12621  001D2E  27C5               	addwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
 12622  001D30  51D1               	movf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),w,b
 12623  001D32  23C6               	addwfc	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
 12624  001D34  0E27               	movlw	39
 12625  001D36  DACA               	call	PL124	;call to abstracted procedure
 12626  001D38  64F7               	cpfsgt	tblptrh,c
 12627  001D3A  D002               	bra	u13377
 12628  001D3C  DB2B               	call	PL164	;call to abstracted procedure
 12629  001D3E  D002               	bra	u13370
 12630  001D40                     u13377:
 12631  001D40  DA9B               	call	PL114	;call to abstracted procedure
 12632  001D42  DB87               	call	PL210	;call to abstracted procedure
 12633  001D44                     u13370:
 12634                           
 12635                           ;tcpv4.c: 927: if(currentTCB->bytesToSend == 0)
 12636  001D44  0E27               	movlw	39
 12637  001D46  DA64               	call	PL110	;call to abstracted procedure
 12638  001D48  64F7               	cpfsgt	tblptrh,c
 12639  001D4A  D003               	bra	u13387
 12640  001D4C  0009               	tblrd		*+
 12641  001D4E  DAB8               	call	PL122	;call to abstracted procedure
 12642  001D50  D005               	bra	u13380
 12643  001D52                     u13387:
 12644  001D52  DA92               	call	PL114	;call to abstracted procedure
 12645  001D54  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 12646  001D58  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 12647  001D5C                     u13380:
 12648  001D5C  0100               	movlb	0	; () banked
 12649  001D5E  51C5               	movf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 12650  001D60  11C6               	iorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 12651  001D62  E114               	bnz	l9138
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;tcpv4.c: 928: {
 12655                           ;tcpv4.c: 929: if (currentTCB->txBufState == TX_BUFF_IN_USE)
 12656  001D64  0E29               	movlw	41
 12657  001D66  DA54               	call	PL110	;call to abstracted procedure
 12658  001D68  64F7               	cpfsgt	tblptrh,c
 12659  001D6A  D003               	bra	u13407
 12660  001D6C  0008               	tblrd		*
 12661  001D6E  50F5               	movf	tablat,w,c
 12662  001D70  D002               	bra	u13400
 12663  001D72                     u13407:
 12664  001D72  DA82               	call	PL114	;call to abstracted procedure
 12665  001D74  50EF               	movf	indf0,w,c
 12666  001D76                     u13400:
 12667  001D76  0A02               	xorlw	2
 12668  001D78  E109               	bnz	l9138
 12669                           
 12670                           ;tcpv4.c: 930: {
 12671                           ;tcpv4.c: 931: currentTCB->txBufState = NO_BUFF;
 12672  001D7A  0E29               	movlw	41
 12673  001D7C  DA49               	call	PL110	;call to abstracted procedure
 12674  001D7E  64F7               	cpfsgt	tblptrh,c
 12675  001D80  D003               	bra	u13427
 12676  001D82  6AF5               	clrf	tablat,c
 12677  001D84  000C               	tblwt		*
 12678  001D86  D002               	bra	u13420
 12679  001D88                     u13427:
 12680  001D88  DA77               	call	PL114	;call to abstracted procedure
 12681  001D8A  6AEF               	clrf	indf0,c
 12682  001D8C                     u13420:
 12683  001D8C                     l9138:
 12684                           
 12685                           ;tcpv4.c: 932: }
 12686                           ;tcpv4.c: 933: }
 12687                           ;tcpv4.c: 935: currentTCB->localLastAck = tcpHeader.ackNumber - 1;
 12688  001D8C  EE21  F0BC         	lfsr	2,_tcpHeader+8
 12689  001D90  0EFF               	movlw	255
 12690  001D92  24DE               	addwf	postinc2,w,c
 12691  001D94  0100               	movlb	0	; () banked
 12692  001D96  6FC3               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 12693  001D98  0EFF               	movlw	255
 12694  001D9A  20DE               	addwfc	postinc2,w,c
 12695  001D9C  6FC4               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 12696  001D9E  0EFF               	movlw	255
 12697  001DA0  20DE               	addwfc	postinc2,w,c
 12698  001DA2  6FC5               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
 12699  001DA4  0EFF               	movlw	255
 12700  001DA6  20DE               	addwfc	postinc2,w,c
 12701  001DA8  6FC6               	movwf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 12702  001DAA  0E14               	movlw	20
 12703  001DAC  DA8F               	call	PL124	;call to abstracted procedure
 12704  001DAE  64F7               	cpfsgt	tblptrh,c
 12705  001DB0  D003               	bra	u13437
 12706  001DB2  DAF7               	call	PL166	;call to abstracted procedure
 12707  001DB4  DAEF               	call	PL164	;call to abstracted procedure
 12708  001DB6  D002               	bra	u13430
 12709  001DB8                     u13437:
 12710  001DB8  DA5F               	call	PL114	;call to abstracted procedure
 12711  001DBA  DB36               	call	PL196	;call to abstracted procedure
 12712  001DBC                     u13430:
 12713                           
 12714                           ;tcpv4.c: 936: currentTCB->localSeqno = tcpHeader.ackNumber;
 12715  001DBC  0E10               	movlw	16
 12716  001DBE  DA28               	call	PL110	;call to abstracted procedure
 12717  001DC0  64F7               	cpfsgt	tblptrh,c
 12718  001DC2  D002               	bra	u13447
 12719  001DC4  DAF5               	call	PL168	;call to abstracted procedure
 12720  001DC6  D002               	bra	u13440
 12721  001DC8                     u13447:
 12722  001DC8  DA57               	call	PL114	;call to abstracted procedure
 12723  001DCA  DB3A               	call	PL204	;call to abstracted procedure
 12724  001DCC                     u13440:
 12725                           
 12726                           ;tcpv4.c: 939: if(rcvPayloadLen > 0)
 12727  001DCC  0101               	movlb	1	; () banked
 12728  001DCE  51AA               	movf	_rcvPayloadLen& (0+255),w,b
 12729  001DD0  11AB               	iorwf	(_rcvPayloadLen+1)& (0+255),w,b
 12730  001DD2  E101 D204          	bz	l9292
 12731                           
 12732                           ; BSR set to: 1
 12733                           ;tcpv4.c: 940: {
 12734                           ;tcpv4.c: 941: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
 12735  001DD6  0E08               	movlw	8
 12736  001DD8  25A0               	addwf	_currentTCB& (0+255),w,b
 12737  001DDA  0100               	movlb	0	; () banked
 12738  001DDC  6FC3               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 12739  001DDE  EC33  F022         	call	PL140	;call to abstracted procedure
 12740  001DE2  6FC4               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 12741  001DE4  C0C3  FFF6         	movff	??_TCP_FiniteStateMachine,tblptrl
 12742  001DE8  C0C4  FFF7         	movff	??_TCP_FiniteStateMachine+1,tblptrh
 12743  001DEC  0E00               	movlw	low (__smallconst shr (0+16))
 12744  001DEE  6EF8               	movwf	tblptru,c
 12745  001DF0  0E0F               	movlw	(high __ramtop+-1)
 12746  001DF2  64F7               	cpfsgt	tblptrh,c
 12747  001DF4  D002               	bra	u13467
 12748  001DF6  DAB4               	call	PL158	;call to abstracted procedure
 12749  001DF8  D002               	bra	u13460
 12750  001DFA                     u13467:
 12751  001DFA  DA3E               	call	PL114	;call to abstracted procedure
 12752  001DFC  DAFF               	call	PL186	;call to abstracted procedure
 12753  001DFE                     u13460:
 12754                           
 12755                           ;tcpv4.c: 944: TCP_PayloadSave(rcvPayloadLen);
 12756  001DFE  C1AA  F05A         	movff	_rcvPayloadLen,TCP_PayloadSave@len
 12757  001E02  C1AB  F05B         	movff	_rcvPayloadLen+1,TCP_PayloadSave@len+1
 12758  001E06  EC4A  F021         	call	_TCP_PayloadSave	;wreg free
 12759  001E0A  D1E9               	goto	l9292
 12760  001E0C                     l9148:
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;tcpv4.c: 947: {
 12764                           ;tcpv4.c: 951: currentTCB->flags = 0x04U | 0x10U;
 12765  001E0C  0E35               	movlw	53
 12766  001E0E  DA00               	call	PL110	;call to abstracted procedure
 12767  001E10  64F7               	cpfsgt	tblptrh,c
 12768  001E12  D004               	bra	u13477
 12769  001E14  0E14               	movlw	20
 12770  001E16  6EF5               	movwf	tablat,c
 12771  001E18  000C               	tblwt		*
 12772  001E1A  D003               	bra	u13470
 12773  001E1C                     u13477:
 12774  001E1C  DA2D               	call	PL114	;call to abstracted procedure
 12775  001E1E  0E14               	movlw	20
 12776  001E20  6EEF               	movwf	indf0,c
 12777  001E22                     u13470:
 12778                           
 12779                           ;tcpv4.c: 952: if (TCP_Snd(currentTCB))
 12780  001E22  DAD9               	call	PL178	;call to abstracted procedure
 12781  001E24  ECA2  F012         	call	_TCP_Snd	;wreg free
 12782  001E28  EF5E  F00A         	goto	L11
 12783  001E2C                     l9156:
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;tcpv4.c: 963: ;
 12787                           ;tcpv4.c: 964: currentTCB->flags = 0x01U;
 12788  001E2C  0E35               	movlw	53
 12789  001E2E  D9F0               	call	PL110	;call to abstracted procedure
 12790  001E30  64F7               	cpfsgt	tblptrh,c
 12791  001E32  D004               	bra	u13497
 12792  001E34  0E01               	movlw	1
 12793  001E36  6EF5               	movwf	tablat,c
 12794  001E38  000C               	tblwt		*
 12795  001E3A  D003               	bra	u13490
 12796  001E3C                     u13497:
 12797  001E3C  DA1D               	call	PL114	;call to abstracted procedure
 12798  001E3E  0E01               	movlw	1
 12799  001E40  6EEF               	movwf	indf0,c
 12800  001E42                     u13490:
 12801  001E42  D5A6               	goto	l9096
 12802  001E44                     l9162:
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;tcpv4.c: 971: ;
 12806                           ;tcpv4.c: 974: currentTCB->localSeqno = tcpHeader.ackNumber;
 12807  001E44  0E10               	movlw	16
 12808  001E46  D9E4               	call	PL110	;call to abstracted procedure
 12809  001E48  64F7               	cpfsgt	tblptrh,c
 12810  001E4A  D002               	bra	u13507
 12811  001E4C  DAB1               	call	PL168	;call to abstracted procedure
 12812  001E4E  D002               	bra	u13500
 12813  001E50                     u13507:
 12814  001E50  DA13               	call	PL114	;call to abstracted procedure
 12815  001E52  DAF6               	call	PL204	;call to abstracted procedure
 12816  001E54                     u13500:
 12817                           
 12818                           ;tcpv4.c: 975: currentTCB->remoteAck = currentTCB->remoteAck + 1;
 12819  001E54  0E0C               	movlw	12
 12820  001E56  D9DC               	call	PL110	;call to abstracted procedure
 12821  001E58  64F7               	cpfsgt	tblptrh,c
 12822  001E5A  D002               	bra	u13517
 12823  001E5C  DA24               	call	PL120	;call to abstracted procedure
 12824  001E5E  D002               	bra	u13510
 12825  001E60                     u13517:
 12826  001E60  DA0B               	call	PL114	;call to abstracted procedure
 12827  001E62  DA67               	call	PL134	;call to abstracted procedure
 12828  001E64                     u13510:
 12829  001E64  DA58               	call	PL132	;call to abstracted procedure
 12830  001E66  0E0C               	movlw	12
 12831  001E68  DA71               	call	PL146	;call to abstracted procedure
 12832  001E6A  EC33  F022         	call	PL140	;call to abstracted procedure
 12833  001E6E  DACF               	call	PL188	;call to abstracted procedure
 12834  001E70  64F7               	cpfsgt	tblptrh,c
 12835  001E72  D002               	bra	u13527
 12836  001E74  DA82               	call	PL160	;call to abstracted procedure
 12837  001E76  D002               	bra	u13520
 12838  001E78                     u13527:
 12839  001E78  D9FF               	call	PL114	;call to abstracted procedure
 12840  001E7A  DAB7               	call	PL184	;call to abstracted procedure
 12841  001E7C                     u13520:
 12842                           
 12843                           ;tcpv4.c: 977: currentTCB->socketState = SOCKET_CLOSING;
 12844  001E7C  0E36               	movlw	54
 12845  001E7E  D9C8               	call	PL110	;call to abstracted procedure
 12846  001E80  64F7               	cpfsgt	tblptrh,c
 12847  001E82  D004               	bra	u13537
 12848  001E84  0E04               	movlw	4
 12849  001E86  6EF5               	movwf	tablat,c
 12850  001E88  000C               	tblwt		*
 12851  001E8A  D003               	bra	u13530
 12852  001E8C                     u13537:
 12853  001E8C  D9F5               	call	PL114	;call to abstracted procedure
 12854  001E8E  0E04               	movlw	4
 12855  001E90  6EEF               	movwf	indf0,c
 12856  001E92                     u13530:
 12857                           
 12858                           ;tcpv4.c: 978: currentTCB->timeout = ((unsigned long)1*2);
 12859  001E92  0E30               	movlw	48
 12860  001E94  D9BD               	call	PL110	;call to abstracted procedure
 12861  001E96  64F7               	cpfsgt	tblptrh,c
 12862  001E98  D002               	bra	u13547
 12863  001E9A  DA97               	call	PL170	;call to abstracted procedure
 12864  001E9C  D002               	bra	u13540
 12865  001E9E                     u13547:
 12866  001E9E  D9EC               	call	PL114	;call to abstracted procedure
 12867  001EA0  DAE4               	call	PL318	;call to abstracted procedure
 12868  001EA2                     u13540:
 12869                           
 12870                           ;tcpv4.c: 979: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 12871  001EA2  0E32               	movlw	50
 12872  001EA4  D9B5               	call	PL110	;call to abstracted procedure
 12873  001EA6  64F7               	cpfsgt	tblptrh,c
 12874  001EA8  D002               	bra	u13557
 12875  001EAA  DA8F               	call	PL170	;call to abstracted procedure
 12876  001EAC  D002               	bra	u13550
 12877  001EAE                     u13557:
 12878  001EAE  D9E4               	call	PL114	;call to abstracted procedure
 12879  001EB0  DADC               	call	PL318	;call to abstracted procedure
 12880  001EB2                     u13550:
 12881                           
 12882                           ;tcpv4.c: 980: currentTCB->timeoutsCount = (5u);
 12883  001EB2  0E34               	movlw	52
 12884  001EB4  D9AD               	call	PL110	;call to abstracted procedure
 12885  001EB6  64F7               	cpfsgt	tblptrh,c
 12886  001EB8  D004               	bra	u13567
 12887  001EBA  0E05               	movlw	5
 12888  001EBC  6EF5               	movwf	tablat,c
 12889  001EBE  000C               	tblwt		*
 12890  001EC0  D003               	bra	u13560
 12891  001EC2                     u13567:
 12892  001EC2  D9DA               	call	PL114	;call to abstracted procedure
 12893  001EC4  0E05               	movlw	5
 12894  001EC6  6EEF               	movwf	indf0,c
 12895  001EC8                     u13560:
 12896                           
 12897                           ;tcpv4.c: 982: currentTCB->flags = 0x01U | 0x10U;
 12898  001EC8  0E35               	movlw	53
 12899  001ECA  D9A2               	call	PL110	;call to abstracted procedure
 12900  001ECC  64F7               	cpfsgt	tblptrh,c
 12901  001ECE  D004               	bra	u13577
 12902  001ED0  0E11               	movlw	17
 12903  001ED2  6EF5               	movwf	tablat,c
 12904  001ED4  000C               	tblwt		*
 12905  001ED6  D003               	bra	u13570
 12906  001ED8                     u13577:
 12907  001ED8  D9CF               	call	PL114	;call to abstracted procedure
 12908  001EDA  0E11               	movlw	17
 12909  001EDC  6EEF               	movwf	indf0,c
 12910  001EDE                     u13570:
 12911                           
 12912                           ;tcpv4.c: 984: nextState = LAST_ACK;
 12913  001EDE  0E09               	movlw	9
 12914  001EE0  D558               	goto	L13
 12915  001EE2                     l9170:
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;tcpv4.c: 993: ;
 12919                           ;tcpv4.c: 994: if (currentTCB->timeoutsCount)
 12920  001EE2  0E34               	movlw	52
 12921  001EE4  D995               	call	PL110	;call to abstracted procedure
 12922  001EE6  64F7               	cpfsgt	tblptrh,c
 12923  001EE8  D003               	bra	u13587
 12924  001EEA  0008               	tblrd		*
 12925  001EEC  50F5               	movf	tablat,w,c
 12926  001EEE  D002               	bra	u13580
 12927  001EF0                     u13587:
 12928  001EF0  D9C3               	call	PL114	;call to abstracted procedure
 12929  001EF2  50EF               	movf	indf0,w,c
 12930  001EF4                     u13580:
 12931  001EF4  0900               	iorlw	0
 12932  001EF6  E001 D54E          	bnz	l9098
 12933                           
 12934                           ;tcpv4.c: 998: {
 12935                           ;tcpv4.c: 1000: currentTCB->flags = 0x04U;
 12936  001EFA  0E35               	movlw	53
 12937  001EFC  D989               	call	PL110	;call to abstracted procedure
 12938  001EFE  64F7               	cpfsgt	tblptrh,c
 12939  001F00  D004               	bra	u13607
 12940  001F02  0E04               	movlw	4
 12941  001F04  6EF5               	movwf	tablat,c
 12942  001F06  000C               	tblwt		*
 12943  001F08  D003               	bra	u13600
 12944  001F0A                     u13607:
 12945  001F0A  D9B6               	call	PL114	;call to abstracted procedure
 12946  001F0C  0E04               	movlw	4
 12947  001F0E  6EEF               	movwf	indf0,c
 12948  001F10                     u13600:
 12949                           
 12950                           ;tcpv4.c: 1001: if(TCP_Snd(currentTCB))
 12951  001F10  DA62               	call	PL178	;call to abstracted procedure
 12952  001F12  ECA2  F012         	call	_TCP_Snd	;wreg free
 12953  001F16  EF5E  F00A         	goto	L11
 12954  001F1A                     l9184:
 12955  001F1A  0100               	movlb	0	; () banked
 12956  001F1C  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 12957                           
 12958                           ; Switch size 1, requested type "space"
 12959                           ; Number of cases is 7, Range of values is 0 to 12
 12960                           ; switch strategies available:
 12961                           ; Name         Instructions Cycles
 12962                           ; simple_byte           22    12 (average)
 12963                           ;	Chosen strategy is simple_byte
 12964  001F1E  E086               	bz	l9156
 12965  001F20  0A04               	xorlw	4	; case 4
 12966  001F22  E101 D668          	bz	l9124
 12967  001F26  0A02               	xorlw	2	; case 6
 12968  001F28  E08D               	bz	l9162
 12969  001F2A  0A01               	xorlw	1	; case 7
 12970  001F2C  E08B               	bz	l9162
 12971  001F2E  0A0E               	xorlw	14	; case 9
 12972  001F30  E102 EF32  F009    	bz	l1301
 12973  001F36  0A03               	xorlw	3	; case 10
 12974  001F38  E102 EF32  F009    	bz	l1301
 12975  001F3E  0A06               	xorlw	6	; case 12
 12976  001F40  E0D0               	bz	l9170
 12977  001F42  D14D               	goto	l9292
 12978  001F44                     l9186:
 12979                           
 12980                           ; BSR set to: 0
 12981                           ;tcpv4.c: 1016: ;
 12982                           ;tcpv4.c: 1017: currentTCB->flags = 0x10U;
 12983  001F44  0E35               	movlw	53
 12984  001F46  D964               	call	PL110	;call to abstracted procedure
 12985  001F48  64F7               	cpfsgt	tblptrh,c
 12986  001F4A  D004               	bra	u13627
 12987  001F4C  0E10               	movlw	16
 12988  001F4E  6EF5               	movwf	tablat,c
 12989  001F50  000C               	tblwt		*
 12990  001F52  D003               	bra	u13620
 12991  001F54                     u13627:
 12992  001F54  D991               	call	PL114	;call to abstracted procedure
 12993  001F56  0E10               	movlw	16
 12994  001F58  6EEF               	movwf	indf0,c
 12995  001F5A                     u13620:
 12996                           
 12997                           ;tcpv4.c: 1018: if(TCP_Snd(currentTCB))
 12998  001F5A  DA3D               	call	PL178	;call to abstracted procedure
 12999  001F5C  ECA2  F012         	call	_TCP_Snd	;wreg free
 13000  001F60  0900               	iorlw	0
 13001  001F62  E101 D13C          	bz	l9292
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;tcpv4.c: 1019: {
 13005                           ;tcpv4.c: 1020: nextState = CLOSING;
 13006  001F66  0E08               	movlw	8
 13007  001F68  D027               	goto	L15
 13008  001F6A                     l9192:
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;tcpv4.c: 1024: ;
 13012                           ;tcpv4.c: 1026: currentTCB->timeout = ((unsigned long)1*2);
 13013  001F6A  0E30               	movlw	48
 13014  001F6C  D951               	call	PL110	;call to abstracted procedure
 13015  001F6E  64F7               	cpfsgt	tblptrh,c
 13016  001F70  D002               	bra	u13647
 13017  001F72  DA2B               	call	PL170	;call to abstracted procedure
 13018  001F74  D002               	bra	u13640
 13019  001F76                     u13647:
 13020  001F76  D980               	call	PL114	;call to abstracted procedure
 13021  001F78  DA78               	call	PL318	;call to abstracted procedure
 13022  001F7A                     u13640:
 13023                           
 13024                           ;tcpv4.c: 1027: currentTCB->timeoutsCount = 1;
 13025  001F7A  0E34               	movlw	52
 13026  001F7C  D949               	call	PL110	;call to abstracted procedure
 13027  001F7E  64F7               	cpfsgt	tblptrh,c
 13028  001F80  D004               	bra	u13657
 13029  001F82  0E01               	movlw	1
 13030  001F84  6EF5               	movwf	tablat,c
 13031  001F86  000C               	tblwt		*
 13032  001F88  D003               	bra	u13650
 13033  001F8A                     u13657:
 13034  001F8A  D976               	call	PL114	;call to abstracted procedure
 13035  001F8C  0E01               	movlw	1
 13036  001F8E  6EEF               	movwf	indf0,c
 13037  001F90                     u13650:
 13038                           
 13039                           ;tcpv4.c: 1028: nextState = FIN_WAIT_2;
 13040  001F90  0E06               	movlw	6
 13041  001F92  D59D               	goto	L19
 13042  001F94                     l9196:
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;tcpv4.c: 1031: ;
 13046                           ;tcpv4.c: 1032: currentTCB->flags = 0x10U;
 13047  001F94  0E35               	movlw	53
 13048  001F96  D93C               	call	PL110	;call to abstracted procedure
 13049  001F98  64F7               	cpfsgt	tblptrh,c
 13050  001F9A  D004               	bra	u13667
 13051  001F9C  0E10               	movlw	16
 13052  001F9E  6EF5               	movwf	tablat,c
 13053  001FA0  000C               	tblwt		*
 13054  001FA2  D003               	bra	u13660
 13055  001FA4                     u13667:
 13056  001FA4  D969               	call	PL114	;call to abstracted procedure
 13057  001FA6  0E10               	movlw	16
 13058  001FA8  6EEF               	movwf	indf0,c
 13059  001FAA                     u13660:
 13060                           
 13061                           ;tcpv4.c: 1033: if(TCP_Snd(currentTCB))
 13062  001FAA  DA15               	call	PL178	;call to abstracted procedure
 13063  001FAC  ECA2  F012         	call	_TCP_Snd	;wreg free
 13064  001FB0  0900               	iorlw	0
 13065  001FB2  E101 D114          	bz	l9292
 13066  001FB6                     l9200:
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;tcpv4.c: 1034: {
 13070                           ;tcpv4.c: 1035: nextState = TIME_WAIT;
 13071  001FB6  0E0A               	movlw	10
 13072  001FB8                     L15:
 13073  001FB8  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 13074  001FBA  D111               	goto	l9292
 13075  001FBC                     l9202:
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;tcpv4.c: 1039: ;
 13079                           ;tcpv4.c: 1040: if (currentTCB->timeoutsCount)
 13080  001FBC  0E34               	movlw	52
 13081  001FBE  D928               	call	PL110	;call to abstracted procedure
 13082  001FC0  64F7               	cpfsgt	tblptrh,c
 13083  001FC2  D003               	bra	u13687
 13084  001FC4  0008               	tblrd		*
 13085  001FC6  50F5               	movf	tablat,w,c
 13086  001FC8  D002               	bra	u13680
 13087  001FCA                     u13687:
 13088  001FCA  D956               	call	PL114	;call to abstracted procedure
 13089  001FCC  50EF               	movf	indf0,w,c
 13090  001FCE                     u13680:
 13091  001FCE  0900               	iorlw	0
 13092  001FD0  E001 D4E1          	bnz	l9098
 13093                           
 13094                           ;tcpv4.c: 1044: {
 13095                           ;tcpv4.c: 1046: currentTCB->flags = 0x04U;
 13096  001FD4  0E35               	movlw	53
 13097  001FD6  D91C               	call	PL110	;call to abstracted procedure
 13098  001FD8  64F7               	cpfsgt	tblptrh,c
 13099  001FDA  D004               	bra	u13707
 13100  001FDC  0E04               	movlw	4
 13101  001FDE  6EF5               	movwf	tablat,c
 13102  001FE0  000C               	tblwt		*
 13103  001FE2  D003               	bra	u13700
 13104  001FE4                     u13707:
 13105  001FE4  D949               	call	PL114	;call to abstracted procedure
 13106  001FE6  0E04               	movlw	4
 13107  001FE8  6EEF               	movwf	indf0,c
 13108  001FEA                     u13700:
 13109                           
 13110                           ;tcpv4.c: 1047: if(TCP_Snd(currentTCB))
 13111  001FEA  D9F5               	call	PL178	;call to abstracted procedure
 13112  001FEC  ECA2  F012         	call	_TCP_Snd	;wreg free
 13113  001FF0  EF5E  F00A         	goto	L11
 13114  001FF4                     l9216:
 13115  001FF4  0100               	movlb	0	; () banked
 13116  001FF6  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 13117                           
 13118                           ; Switch size 1, requested type "space"
 13119                           ; Number of cases is 4, Range of values is 4 to 12
 13120                           ; switch strategies available:
 13121                           ; Name         Instructions Cycles
 13122                           ; simple_byte           13     7 (average)
 13123                           ;	Chosen strategy is simple_byte
 13124  001FF8  0A04               	xorlw	4	; case 4
 13125  001FFA  E0B7               	bz	l9192
 13126  001FFC  0A02               	xorlw	2	; case 6
 13127  001FFE  E0A2               	bz	l9186
 13128  002000  0A01               	xorlw	1	; case 7
 13129  002002  E0C8               	bz	l9196
 13130  002004  0A0B               	xorlw	11	; case 12
 13131  002006  E0DA               	bz	l9202
 13132  002008  D0EA               	goto	l9292
 13133  00200A                     l9218:
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;tcpv4.c: 1062: ;
 13137                           ;tcpv4.c: 1063: if(TCP_Snd(currentTCB))
 13138  00200A  D9E5               	call	PL178	;call to abstracted procedure
 13139  00200C  ECA2  F012         	call	_TCP_Snd	;wreg free
 13140  002010  D7CF               	goto	L16
 13141  002012                     l9222:
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;tcpv4.c: 1069: ;
 13145                           ;tcpv4.c: 1070: if (currentTCB->timeoutsCount)
 13146  002012  0E34               	movlw	52
 13147  002014  D8FD               	call	PL110	;call to abstracted procedure
 13148  002016  64F7               	cpfsgt	tblptrh,c
 13149  002018  D003               	bra	u13737
 13150  00201A  0008               	tblrd		*
 13151  00201C  50F5               	movf	tablat,w,c
 13152  00201E  D002               	bra	u13730
 13153  002020                     u13737:
 13154  002020  D92B               	call	PL114	;call to abstracted procedure
 13155  002022  50EF               	movf	indf0,w,c
 13156  002024                     u13730:
 13157  002024  0900               	iorlw	0
 13158  002026  E001 D4B6          	bnz	l9098
 13159                           
 13160                           ;tcpv4.c: 1074: {
 13161                           ;tcpv4.c: 1076: currentTCB->flags = 0x04U;
 13162  00202A  0E35               	movlw	53
 13163  00202C  D8F1               	call	PL110	;call to abstracted procedure
 13164  00202E  64F7               	cpfsgt	tblptrh,c
 13165  002030  D004               	bra	u13757
 13166  002032  0E04               	movlw	4
 13167  002034  6EF5               	movwf	tablat,c
 13168  002036  000C               	tblwt		*
 13169  002038  D003               	bra	u13750
 13170  00203A                     u13757:
 13171  00203A  D91E               	call	PL114	;call to abstracted procedure
 13172  00203C  0E04               	movlw	4
 13173  00203E  6EEF               	movwf	indf0,c
 13174  002040                     u13750:
 13175                           
 13176                           ;tcpv4.c: 1077: if(TCP_Snd(currentTCB))
 13177  002040  D9CA               	call	PL178	;call to abstracted procedure
 13178  002042  ECA2  F012         	call	_TCP_Snd	;wreg free
 13179  002046  EF5E  F00A         	goto	L11
 13180  00204A                     l9236:
 13181  00204A  0100               	movlb	0	; () banked
 13182  00204C  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 13183                           
 13184                           ; Switch size 1, requested type "space"
 13185                           ; Number of cases is 2, Range of values is 6 to 12
 13186                           ; switch strategies available:
 13187                           ; Name         Instructions Cycles
 13188                           ; simple_byte            7     4 (average)
 13189                           ;	Chosen strategy is simple_byte
 13190  00204E  0A06               	xorlw	6	; case 6
 13191  002050  E0DC               	bz	l9218
 13192  002052  0A0A               	xorlw	10	; case 12
 13193  002054  E0DE               	bz	l9222
 13194  002056  D0C3               	goto	l9292
 13195  002058                     l9242:
 13196  002058  0100               	movlb	0	; () banked
 13197  00205A  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 13198                           
 13199                           ; Switch size 1, requested type "space"
 13200                           ; Number of cases is 1, Range of values is 4 to 4
 13201                           ; switch strategies available:
 13202                           ; Name         Instructions Cycles
 13203                           ; simple_byte            4     3 (average)
 13204                           ;	Chosen strategy is simple_byte
 13205  00205C  0A04               	xorlw	4	; case 4
 13206  00205E  E0AB               	bz	l9200
 13207  002060  D0BE               	goto	l9292
 13208  002062                     l9244:
 13209                           
 13210                           ; BSR set to: 0
 13211                           ;tcpv4.c: 1107: case RCV_ACK:
 13212                           ;tcpv4.c: 1108: if ((currentTCB->destIP == receivedRemoteAddress) &&
 13213                           ;tcpv4.c: 1109: (currentTCB->destPort == tcpHeader.sourcePort))
 13214  002062  0E02               	movlw	2
 13215  002064  D8D5               	call	PL110	;call to abstracted procedure
 13216  002066  64F7               	cpfsgt	tblptrh,c
 13217  002068  D002               	bra	u13777
 13218  00206A  D91D               	call	PL120	;call to abstracted procedure
 13219  00206C  D002               	bra	u13770
 13220  00206E                     u13777:
 13221  00206E  D904               	call	PL114	;call to abstracted procedure
 13222  002070  D960               	call	PL134	;call to abstracted procedure
 13223  002072                     u13770:
 13224  002072  D9FF               	call	PL326	;call to abstracted procedure
 13225  002074  E106               	bnz	u13781
 13226  002076  DA02               	call	PL330	;call to abstracted procedure
 13227  002078  E104               	bnz	u13781
 13228  00207A  DA0A               	call	PL340	;call to abstracted procedure
 13229  00207C  E102               	bnz	u13781
 13230  00207E  DA0D               	call	PL344	;call to abstracted procedure
 13231  002080  A4D8               	btfss	status,2,c
 13232  002082                     u13781:
 13233  002082  D0AD               	goto	l9292
 13234                           
 13235                           ; BSR set to: 0
 13236  002084  0E06               	movlw	6
 13237  002086  D8C4               	call	PL110	;call to abstracted procedure
 13238  002088  64F7               	cpfsgt	tblptrh,c
 13239  00208A  D003               	bra	u13797
 13240  00208C  0009               	tblrd		*+
 13241  00208E  D918               	call	PL122	;call to abstracted procedure
 13242  002090  D005               	bra	u13790
 13243  002092                     u13797:
 13244  002092  D8F2               	call	PL114	;call to abstracted procedure
 13245  002094  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 13246  002098  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 13247  00209C                     u13790:
 13248  00209C  DA35               	call	PL384	;call to abstracted procedure
 13249  00209E  E102               	bnz	u13801
 13250  0020A0  DA29               	call	PL380	;call to abstracted procedure
 13251  0020A2  D09A               	goto	L17
 13252  0020A4                     u13801:
 13253  0020A4  D09C               	goto	l9292
 13254  0020A6                     l9252:
 13255                           
 13256                           ; BSR set to: 0
 13257                           ;tcpv4.c: 1117: if (currentTCB->timeoutsCount)
 13258  0020A6  0E34               	movlw	52
 13259  0020A8  D8B3               	call	PL110	;call to abstracted procedure
 13260  0020AA  64F7               	cpfsgt	tblptrh,c
 13261  0020AC  D003               	bra	u13817
 13262  0020AE  0008               	tblrd		*
 13263  0020B0  50F5               	movf	tablat,w,c
 13264  0020B2  D002               	bra	u13810
 13265  0020B4                     u13817:
 13266  0020B4  D8E1               	call	PL114	;call to abstracted procedure
 13267  0020B6  50EF               	movf	indf0,w,c
 13268  0020B8                     u13810:
 13269  0020B8  0900               	iorlw	0
 13270  0020BA  E001 D46C          	bnz	l9098
 13271                           
 13272                           ;tcpv4.c: 1121: {
 13273                           ;tcpv4.c: 1123: currentTCB->flags = 0x04U;
 13274  0020BE  0E35               	movlw	53
 13275  0020C0  D8A7               	call	PL110	;call to abstracted procedure
 13276  0020C2  64F7               	cpfsgt	tblptrh,c
 13277  0020C4  D004               	bra	u13837
 13278  0020C6  0E04               	movlw	4
 13279  0020C8  6EF5               	movwf	tablat,c
 13280  0020CA  000C               	tblwt		*
 13281  0020CC  D003               	bra	u13830
 13282  0020CE                     u13837:
 13283  0020CE  D8D4               	call	PL114	;call to abstracted procedure
 13284  0020D0  0E04               	movlw	4
 13285  0020D2  6EEF               	movwf	indf0,c
 13286  0020D4                     u13830:
 13287                           
 13288                           ;tcpv4.c: 1124: if(TCP_Snd(currentTCB))
 13289  0020D4  D980               	call	PL178	;call to abstracted procedure
 13290  0020D6  ECA2  F012         	call	_TCP_Snd	;wreg free
 13291  0020DA  EF5E  F00A         	goto	L11
 13292  0020DE                     l9266:
 13293  0020DE  0100               	movlb	0	; () banked
 13294  0020E0  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 13295                           
 13296                           ; Switch size 1, requested type "space"
 13297                           ; Number of cases is 3, Range of values is 4 to 12
 13298                           ; switch strategies available:
 13299                           ; Name         Instructions Cycles
 13300                           ; simple_byte           10     6 (average)
 13301                           ;	Chosen strategy is simple_byte
 13302  0020E2  0A04               	xorlw	4	; case 4
 13303  0020E4  E0BE               	bz	l9244
 13304  0020E6  0A03               	xorlw	3	; case 7
 13305  0020E8  E0BC               	bz	l9244
 13306  0020EA  0A0B               	xorlw	11	; case 12
 13307  0020EC  E0DC               	bz	l9252
 13308  0020EE  D077               	goto	l9292
 13309  0020F0                     l9270:
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;tcpv4.c: 1143: ;
 13313                           ;tcpv4.c: 1145: currentTCB->timeout = ((unsigned long)1*2);
 13314  0020F0  0E30               	movlw	48
 13315  0020F2  D88E               	call	PL110	;call to abstracted procedure
 13316  0020F4  64F7               	cpfsgt	tblptrh,c
 13317  0020F6  D002               	bra	u13857
 13318  0020F8  D968               	call	PL170	;call to abstracted procedure
 13319  0020FA  D002               	bra	u13850
 13320  0020FC                     u13857:
 13321  0020FC  D8BD               	call	PL114	;call to abstracted procedure
 13322  0020FE  D9B5               	call	PL318	;call to abstracted procedure
 13323  002100                     u13850:
 13324                           
 13325                           ;tcpv4.c: 1146: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 13326  002100  0E32               	movlw	50
 13327  002102  D886               	call	PL110	;call to abstracted procedure
 13328  002104  64F7               	cpfsgt	tblptrh,c
 13329  002106  D002               	bra	u13867
 13330  002108  D960               	call	PL170	;call to abstracted procedure
 13331  00210A  D002               	bra	u13860
 13332  00210C                     u13867:
 13333  00210C  D8B5               	call	PL114	;call to abstracted procedure
 13334  00210E  D9AD               	call	PL318	;call to abstracted procedure
 13335  002110                     u13860:
 13336                           
 13337                           ;tcpv4.c: 1147: currentTCB->timeoutsCount = (3u);
 13338  002110  0E34               	movlw	52
 13339  002112  D87E               	call	PL110	;call to abstracted procedure
 13340  002114  64F7               	cpfsgt	tblptrh,c
 13341  002116  D004               	bra	u13877
 13342  002118  0E03               	movlw	3
 13343  00211A  6EF5               	movwf	tablat,c
 13344  00211C  000C               	tblwt		*
 13345  00211E  D003               	bra	u13870
 13346  002120                     u13877:
 13347  002120  D8AB               	call	PL114	;call to abstracted procedure
 13348  002122  0E03               	movlw	3
 13349  002124  6EEF               	movwf	indf0,c
 13350  002126                     u13870:
 13351                           
 13352                           ;tcpv4.c: 1148: currentTCB->flags = 0x02U;
 13353  002126  0E35               	movlw	53
 13354  002128  D873               	call	PL110	;call to abstracted procedure
 13355  00212A  64F7               	cpfsgt	tblptrh,c
 13356  00212C  D004               	bra	u13887
 13357  00212E  0E02               	movlw	2
 13358  002130  6EF5               	movwf	tablat,c
 13359  002132  000C               	tblwt		*
 13360  002134  D003               	bra	u13880
 13361  002136                     u13887:
 13362  002136  D8A0               	call	PL114	;call to abstracted procedure
 13363  002138  0E02               	movlw	2
 13364  00213A  6EEF               	movwf	indf0,c
 13365  00213C                     u13880:
 13366                           
 13367                           ;tcpv4.c: 1149: TCP_Snd(currentTCB);
 13368  00213C  D94C               	call	PL178	;call to abstracted procedure
 13369  00213E  ECA2  F012         	call	_TCP_Snd	;wreg free
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;tcpv4.c: 1150: nextState = SYN_SENT;
 13373  002142  0E02               	movlw	2
 13374  002144  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;tcpv4.c: 1151: ret = 1;
 13378  002146  0E01               	movlw	1
 13379  002148  6FCF               	movwf	TCP_FiniteStateMachine@ret& (0+255),b
 13380                           
 13381                           ;tcpv4.c: 1152: break;
 13382  00214A  D049               	goto	l9292
 13383  00214C                     l9278:
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;tcpv4.c: 1154: ;
 13387                           ;tcpv4.c: 1155: currentTCB->destIP = 0;
 13388  00214C  0E02               	movlw	2
 13389  00214E  D860               	call	PL110	;call to abstracted procedure
 13390  002150  64F7               	cpfsgt	tblptrh,c
 13391  002152  D006               	bra	u13897
 13392  002154  6AF5               	clrf	tablat,c
 13393  002156  000D               	tblwt		*+
 13394  002158  6AF5               	clrf	tablat,c
 13395  00215A  000D               	tblwt		*+
 13396  00215C  D8FC               	call	PL150	;call to abstracted procedure
 13397  00215E  D002               	bra	u13890
 13398  002160                     u13897:
 13399  002160  D88B               	call	PL114	;call to abstracted procedure
 13400  002162  D93E               	call	PL180	;call to abstracted procedure
 13401  002164                     u13890:
 13402                           
 13403                           ;tcpv4.c: 1156: currentTCB->destPort = 0;
 13404  002164  0E06               	movlw	6
 13405  002166  D854               	call	PL110	;call to abstracted procedure
 13406  002168  64F7               	cpfsgt	tblptrh,c
 13407  00216A  D002               	bra	u13907
 13408  00216C  D8F4               	call	PL150	;call to abstracted procedure
 13409  00216E  D003               	bra	u13900
 13410  002170                     u13907:
 13411  002170  D883               	call	PL114	;call to abstracted procedure
 13412  002172  6AEE               	clrf	postinc0,c
 13413  002174  6AEF               	clrf	indf0,c
 13414  002176                     u13900:
 13415                           
 13416                           ;tcpv4.c: 1157: nextState = LISTEN;
 13417  002176  0E01               	movlw	1
 13418  002178  0100               	movlb	0	; () banked
 13419  00217A  D7E4               	goto	L18
 13420  00217C                     l9286:
 13421  00217C  0100               	movlb	0	; () banked
 13422  00217E  51D2               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 13423                           
 13424                           ; Switch size 1, requested type "space"
 13425                           ; Number of cases is 2, Range of values is 1 to 2
 13426                           ; switch strategies available:
 13427                           ; Name         Instructions Cycles
 13428                           ; simple_byte            7     4 (average)
 13429                           ;	Chosen strategy is simple_byte
 13430  002180  0A01               	xorlw	1	; case 1
 13431  002182  E0B6               	bz	l9270
 13432  002184  0A03               	xorlw	3	; case 2
 13433  002186  E0E2               	bz	l9278
 13434  002188  D02A               	goto	l9292
 13435  00218A                     l9290:
 13436                           
 13437                           ; BSR set to: 0
 13438  00218A  0E2A               	movlw	42
 13439  00218C  D841               	call	PL110	;call to abstracted procedure
 13440  00218E  64F7               	cpfsgt	tblptrh,c
 13441  002190  D003               	bra	u13917
 13442  002192  0008               	tblrd		*
 13443  002194  50F5               	movf	tablat,w,c
 13444  002196  D002               	bra	u13910
 13445  002198                     u13917:
 13446  002198  D86F               	call	PL114	;call to abstracted procedure
 13447  00219A  50EF               	movf	indf0,w,c
 13448  00219C                     u13910:
 13449                           
 13450                           ; Switch size 1, requested type "space"
 13451                           ; Number of cases is 11, Range of values is 0 to 10
 13452                           ; switch strategies available:
 13453                           ; Name         Instructions Cycles
 13454                           ; simple_byte           34    18 (average)
 13455                           ;	Chosen strategy is simple_byte
 13456  00219C  0A00               	xorlw	0	; case 0
 13457  00219E  E0EE               	bz	l9286
 13458  0021A0  0A01               	xorlw	1	; case 1
 13459  0021A2  E102 EF3C  F009    	bz	l8974
 13460  0021A8  0A03               	xorlw	3	; case 2
 13461  0021AA  E102 EF62  F00B    	bz	l9066
 13462  0021B0  0A01               	xorlw	1	; case 3
 13463  0021B2  E101 D50C          	bz	l9122
 13464  0021B6  0A07               	xorlw	7	; case 4
 13465  0021B8  E101 D6AF          	bz	l9184
 13466  0021BC  0A01               	xorlw	1	; case 5
 13467  0021BE  E101 D719          	bz	l9216
 13468  0021C2  0A03               	xorlw	3	; case 6
 13469  0021C4  E101 D741          	bz	l9236
 13470  0021C8  0A01               	xorlw	1	; case 7
 13471  0021CA  E009               	bz	l9292
 13472  0021CC  0A0F               	xorlw	15	; case 8
 13473  0021CE  E101 D743          	bz	l9242
 13474  0021D2  0A01               	xorlw	1	; case 9
 13475  0021D4  E084               	bz	l9266
 13476  0021D6  0A03               	xorlw	3	; case 10
 13477  0021D8                     L17:
 13478  0021D8  E102 EF32  F009    	bz	l1301
 13479  0021DE                     l9292:
 13480                           
 13481                           ;tcpv4.c: 1167: currentTCB->connectionEvent = NOP;
 13482  0021DE  0E2B               	movlw	43
 13483  0021E0  D817               	call	PL110	;call to abstracted procedure
 13484  0021E2  64F7               	cpfsgt	tblptrh,c
 13485  0021E4  D004               	bra	u13927
 13486  0021E6  0E0D               	movlw	13
 13487  0021E8  6EF5               	movwf	tablat,c
 13488  0021EA  000C               	tblwt		*
 13489  0021EC  D003               	bra	u13920
 13490  0021EE                     u13927:
 13491  0021EE  D844               	call	PL114	;call to abstracted procedure
 13492  0021F0  0E0D               	movlw	13
 13493  0021F2  6EEF               	movwf	indf0,c
 13494  0021F4                     u13920:
 13495                           
 13496                           ;tcpv4.c: 1168: currentTCB->fsmState = nextState;
 13497  0021F4  0E2A               	movlw	42
 13498  0021F6  D80C               	call	PL110	;call to abstracted procedure
 13499  0021F8  64F7               	cpfsgt	tblptrh,c
 13500  0021FA  D004               	bra	u13937
 13501  0021FC  C0D3  FFF5         	movff	TCP_FiniteStateMachine@nextState,tablat
 13502  002200  000C               	tblwt		*
 13503  002202  D003               	bra	u13930
 13504  002204                     u13937:
 13505  002204  D839               	call	PL114	;call to abstracted procedure
 13506  002206  C0D3  FFEF         	movff	TCP_FiniteStateMachine@nextState,indf0
 13507  00220A                     u13930:
 13508                           
 13509                           ;tcpv4.c: 1169: return ret;
 13510  00220A  0100               	movlb	0	; () banked
 13511  00220C  51CF               	movf	TCP_FiniteStateMachine@ret& (0+255),w,b
 13512                           
 13513                           ; BSR set to: 0
 13514  00220E  0012               	return		;funcret
 13515  002210                     __end_of_TCP_FiniteStateMachine:
 13516                           	opt stack 0
 13517  002210                     PL110:
 13518                           	opt stack 17
 13519  002210  0101               	movlb	1	; () banked
 13520  002212  25A0               	addwf	_currentTCB& (0+255),w,b
 13521  002214  0100               	movlb	0	; () banked
 13522  002216  6FC3               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 13523  002218  0E00               	movlw	0
 13524  00221A  0101               	movlb	1	; () banked
 13525  00221C  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 13526  00221E  0100               	movlb	0	; () banked
 13527  002220  6FC4               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 13528  002222  C0C3  FFF6         	movff	??_TCP_FiniteStateMachine,tblptrl
 13529  002226  C0C4  FFF7         	movff	??_TCP_FiniteStateMachine+1,tblptrh
 13530  00222A  0E00               	movlw	low (__smallconst shr (0+16))
 13531  00222C  6EF8               	movwf	tblptru,c
 13532  00222E  0E0F               	movlw	(high __ramtop+-1)
 13533  002230  0012               	return	
 13534  002232                     __end_ofPL110:
 13535                           	opt stack 0
 13536  002232                     PL112:
 13537                           	opt stack 17
 13538  002232  0100               	movlb	0	; () banked
 13539  002234  6FC3               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 13540  002236  0E00               	movlw	0
 13541  002238  0101               	movlb	1	; () banked
 13542  00223A  21B9               	addwfc	(_tcpHeader+5)& (0+255),w,b
 13543  00223C  0100               	movlb	0	; () banked
 13544  00223E  6FC4               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 13545  002240  0E00               	movlw	0
 13546  002242  0101               	movlb	1	; () banked
 13547  002244  21BA               	addwfc	(_tcpHeader+6)& (0+255),w,b
 13548  002246  0100               	movlb	0	; () banked
 13549  002248  6FC5               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
 13550  00224A  0E00               	movlw	0
 13551  00224C  0101               	movlb	1	; () banked
 13552  00224E  21BB               	addwfc	(_tcpHeader+7)& (0+255),w,b
 13553  002250  0100               	movlb	0	; () banked
 13554  002252  6FC6               	movwf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 13555  002254  0E0C               	movlw	12
 13556  002256  0101               	movlb	1	; () banked
 13557  002258  25A0               	addwf	_currentTCB& (0+255),w,b
 13558  00225A  0100               	movlb	0	; () banked
 13559  00225C  6FC7               	movwf	(??_TCP_FiniteStateMachine+4)& (0+255),b
 13560  00225E  0E00               	movlw	0
 13561  002260  0101               	movlb	1	; () banked
 13562  002262  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 13563  002264  0100               	movlb	0	; () banked
 13564  002266  6FC8               	movwf	(??_TCP_FiniteStateMachine+5)& (0+255),b
 13565  002268  C0C7  FFF6         	movff	??_TCP_FiniteStateMachine+4,tblptrl
 13566  00226C  C0C8  FFF7         	movff	??_TCP_FiniteStateMachine+5,tblptrh
 13567  002270  0E00               	movlw	low (__smallconst shr (0+16))
 13568  002272  6EF8               	movwf	tblptru,c
 13569  002274  0E0F               	movlw	(high __ramtop+-1)
 13570  002276  0012               	return	
 13571  002278                     __end_ofPL112:
 13572                           	opt stack 0
 13573  002278                     PL114:
 13574                           	opt stack 22
 13575  002278  CFF6 FFE9          	movff	tblptrl,fsr0l
 13576  00227C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13577  002280  0012               	return	
 13578  002282                     __end_ofPL114:
 13579                           	opt stack 0
 13580  002282                     PL116:
 13581                           	opt stack 17
 13582  002282  0E10               	movlw	16
 13583  002284  0101               	movlb	1	; () banked
 13584  002286  25A0               	addwf	_currentTCB& (0+255),w,b
 13585  002288  0100               	movlb	0	; () banked
 13586  00228A  6FCD               	movwf	(??_TCP_FiniteStateMachine+10)& (0+255),b
 13587  00228C  0E00               	movlw	0
 13588  00228E  0101               	movlb	1	; () banked
 13589  002290  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 13590  002292  0100               	movlb	0	; () banked
 13591  002294  6FCE               	movwf	(??_TCP_FiniteStateMachine+11)& (0+255),b
 13592  002296  C0CD  FFF6         	movff	??_TCP_FiniteStateMachine+10,tblptrl
 13593  00229A  C0CE  FFF7         	movff	??_TCP_FiniteStateMachine+11,tblptrh
 13594  00229E  0E00               	movlw	low (__smallconst shr (0+16))
 13595  0022A0  6EF8               	movwf	tblptru,c
 13596  0022A2  0E0F               	movlw	(high __ramtop+-1)
 13597  0022A4  0012               	return	
 13598  0022A6                     __end_ofPL116:
 13599                           	opt stack 0
 13600  0022A6                     PL120:
 13601                           	opt stack 17
 13602  0022A6  0009               	tblrd		*+
 13603  0022A8  CFF5 F0C5          	movff	tablat,??_TCP_FiniteStateMachine+2
 13604  0022AC  0009               	tblrd		*+
 13605  0022AE  CFF5 F0C6          	movff	tablat,??_TCP_FiniteStateMachine+3
 13606  0022B2  0009               	tblrd		*+
 13607  0022B4  CFF5 F0C7          	movff	tablat,??_TCP_FiniteStateMachine+4
 13608  0022B8  0009               	tblrd		*+
 13609  0022BA  CFF5 F0C8          	movff	tablat,??_TCP_FiniteStateMachine+5
 13610  0022BE  0012               	return	
 13611  0022C0                     __end_ofPL120:
 13612                           	opt stack 0
 13613  0022C0                     PL122:
 13614                           	opt stack 17
 13615  0022C0  CFF5 F0C5          	movff	tablat,??_TCP_FiniteStateMachine+2
 13616  0022C4  0009               	tblrd		*+
 13617  0022C6  CFF5 F0C6          	movff	tablat,??_TCP_FiniteStateMachine+3
 13618  0022CA  0012               	return	
 13619  0022CC                     __end_ofPL122:
 13620                           	opt stack 0
 13621  0022CC                     PL124:
 13622                           	opt stack 17
 13623  0022CC  0101               	movlb	1	; () banked
 13624  0022CE  25A0               	addwf	_currentTCB& (0+255),w,b
 13625  0022D0  0100               	movlb	0	; () banked
 13626  0022D2  6FC7               	movwf	(??_TCP_FiniteStateMachine+4)& (0+255),b
 13627  0022D4  0E00               	movlw	0
 13628  0022D6  0101               	movlb	1	; () banked
 13629  0022D8  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 13630  0022DA  0100               	movlb	0	; () banked
 13631  0022DC  6FC8               	movwf	(??_TCP_FiniteStateMachine+5)& (0+255),b
 13632  0022DE  C0C7  FFF6         	movff	??_TCP_FiniteStateMachine+4,tblptrl
 13633  0022E2  C0C8  FFF7         	movff	??_TCP_FiniteStateMachine+5,tblptrh
 13634  0022E6  0E00               	movlw	low (__smallconst shr (0+16))
 13635  0022E8  6EF8               	movwf	tblptru,c
 13636  0022EA  0E0F               	movlw	(high __ramtop+-1)
 13637  0022EC  0012               	return	
 13638  0022EE                     __end_ofPL124:
 13639                           	opt stack 0
 13640  0022EE                     PL128:
 13641                           	opt stack 17
 13642  0022EE  0101               	movlb	1	; () banked
 13643  0022F0  51C2               	movf	(_tcpHeader+14)& (0+255),w,b
 13644  0022F2  0100               	movlb	0	; () banked
 13645  0022F4  6FC4               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 13646  0022F6  6BC3               	clrf	??_TCP_FiniteStateMachine& (0+255),b
 13647  0022F8  EE21  F0C2         	lfsr	2,_tcpHeader+14
 13648  0022FC  CFDE F0C5          	movff	postinc2,??_TCP_FiniteStateMachine+2
 13649  002300  CFDD F0C6          	movff	postdec2,??_TCP_FiniteStateMachine+3
 13650  002304  C0C6  F0C5         	movff	??_TCP_FiniteStateMachine+3,??_TCP_FiniteStateMachine+2
 13651  002308  6BC6               	clrf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 13652  00230A  6BC6               	clrf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 13653  00230C  51C3               	movf	??_TCP_FiniteStateMachine& (0+255),w,b
 13654  00230E  13C5               	iorwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
 13655  002310  51C4               	movf	(??_TCP_FiniteStateMachine+1)& (0+255),w,b
 13656  002312  13C6               	iorwf	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
 13657  002314  0C18               	retlw	24
 13658  002316                     __end_ofPL128:
 13659                           	opt stack 0
 13660  002316                     PL132:
 13661                           	opt stack 17
 13662  002316  0E01               	movlw	1
 13663  002318  0100               	movlb	0	; () banked
 13664  00231A  25C5               	addwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 13665  00231C  6FC9               	movwf	(??_TCP_FiniteStateMachine+6)& (0+255),b
 13666  00231E  0E00               	movlw	0
 13667  002320  21C6               	addwfc	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 13668  002322  6FCA               	movwf	(??_TCP_FiniteStateMachine+7)& (0+255),b
 13669  002324  0E00               	movlw	0
 13670  002326  21C7               	addwfc	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 13671  002328  6FCB               	movwf	(??_TCP_FiniteStateMachine+8)& (0+255),b
 13672  00232A  0E00               	movlw	0
 13673  00232C  21C8               	addwfc	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 13674  00232E  6FCC               	movwf	(??_TCP_FiniteStateMachine+9)& (0+255),b
 13675  002330  0012               	return	
 13676  002332                     __end_ofPL132:
 13677                           	opt stack 0
 13678  002332                     PL134:
 13679                           	opt stack 17
 13680  002332  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+2
 13681  002336  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+3
 13682  00233A  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+4
 13683  00233E  CFEE F0C8          	movff	postinc0,??_TCP_FiniteStateMachine+5
 13684  002342  0012               	return	
 13685  002344                     __end_ofPL134:
 13686                           	opt stack 0
 13687  002344                     PL142:
 13688                           	opt stack 17
 13689  002344  0E01               	movlw	1
 13690  002346  0101               	movlb	1	; () banked
 13691  002348  25B8               	addwf	(_tcpHeader+4)& (0+255),w,b
 13692  00234A  0012               	return	
 13693  00234C                     __end_ofPL142:
 13694                           	opt stack 0
 13695  00234C                     PL146:
 13696                           	opt stack 17
 13697  00234C  0101               	movlb	1	; () banked
 13698  00234E  25A0               	addwf	_currentTCB& (0+255),w,b
 13699  002350  0100               	movlb	0	; () banked
 13700  002352  6FCD               	movwf	(??_TCP_FiniteStateMachine+10)& (0+255),b
 13701  002354  0012               	return	
 13702  002356                     __end_ofPL146:
 13703                           	opt stack 0
 13704  002356                     PL150:
 13705                           	opt stack 17
 13706  002356  6AF5               	clrf	tablat,c
 13707  002358  000D               	tblwt		*+
 13708  00235A  6AF5               	clrf	tablat,c
 13709  00235C  000C               	tblwt		*
 13710  00235E  0012               	return	
 13711  002360                     __end_ofPL150:
 13712                           	opt stack 0
 13713  002360                     PL158:
 13714                           	opt stack 17
 13715  002360  C1B8  FFF5         	movff	_tcpHeader+4,tablat
 13716  002364  000D               	tblwt		*+
 13717  002366  C1B9  FFF5         	movff	_tcpHeader+5,tablat
 13718  00236A  000D               	tblwt		*+
 13719  00236C  C1BA  FFF5         	movff	_tcpHeader+6,tablat
 13720  002370  000D               	tblwt		*+
 13721  002372  C1BB  FFF5         	movff	_tcpHeader+7,tablat
 13722  002376  000C               	tblwt		*
 13723  002378  0012               	return	
 13724  00237A                     __end_ofPL158:
 13725                           	opt stack 0
 13726  00237A                     PL160:
 13727                           	opt stack 17
 13728  00237A  C0C9  FFF5         	movff	??_TCP_FiniteStateMachine+6,tablat
 13729  00237E  000D               	tblwt		*+
 13730  002380  C0CA  FFF5         	movff	??_TCP_FiniteStateMachine+7,tablat
 13731  002384  000D               	tblwt		*+
 13732  002386  C0CB  FFF5         	movff	??_TCP_FiniteStateMachine+8,tablat
 13733  00238A  000D               	tblwt		*+
 13734  00238C  C0CC  FFF5         	movff	??_TCP_FiniteStateMachine+9,tablat
 13735  002390  000C               	tblwt		*
 13736  002392  0012               	return	
 13737  002394                     __end_ofPL160:
 13738                           	opt stack 0
 13739  002394                     PL164:
 13740                           	opt stack 17
 13741  002394  C0C5  FFF5         	movff	??_TCP_FiniteStateMachine+2,tablat
 13742  002398  000D               	tblwt		*+
 13743  00239A  C0C6  FFF5         	movff	??_TCP_FiniteStateMachine+3,tablat
 13744  00239E  000C               	tblwt		*
 13745  0023A0  0012               	return	
 13746  0023A2                     __end_ofPL164:
 13747                           	opt stack 0
 13748  0023A2                     PL166:
 13749                           	opt stack 17
 13750  0023A2  C0C3  FFF5         	movff	??_TCP_FiniteStateMachine,tablat
 13751  0023A6  000D               	tblwt		*+
 13752  0023A8  C0C4  FFF5         	movff	??_TCP_FiniteStateMachine+1,tablat
 13753  0023AC  000D               	tblwt		*+
 13754  0023AE  0012               	return	
 13755  0023B0                     __end_ofPL166:
 13756                           	opt stack 0
 13757  0023B0                     PL168:
 13758                           	opt stack 17
 13759  0023B0  C1BC  FFF5         	movff	_tcpHeader+8,tablat
 13760  0023B4  000D               	tblwt		*+
 13761  0023B6  C1BD  FFF5         	movff	_tcpHeader+9,tablat
 13762  0023BA  000D               	tblwt		*+
 13763  0023BC  C1BE  FFF5         	movff	_tcpHeader+10,tablat
 13764  0023C0  000D               	tblwt		*+
 13765  0023C2  C1BF  FFF5         	movff	_tcpHeader+11,tablat
 13766  0023C6  000C               	tblwt		*
 13767  0023C8  0012               	return	
 13768  0023CA                     __end_ofPL168:
 13769                           	opt stack 0
 13770  0023CA                     PL170:
 13771                           	opt stack 17
 13772  0023CA  0E02               	movlw	2
 13773  0023CC  6EF5               	movwf	tablat,c
 13774  0023CE  000D               	tblwt		*+
 13775  0023D0  6AF5               	clrf	tablat,c
 13776  0023D2  000C               	tblwt		*
 13777  0023D4  0C02               	retlw	2
 13778  0023D6                     __end_ofPL170:
 13779                           	opt stack 0
 13780  0023D6                     PL178:
 13781                           	opt stack 17
 13782  0023D6  C1A0  F058         	movff	_currentTCB,TCP_Snd@tcbPtr
 13783  0023DA  C1A1  F059         	movff	_currentTCB+1,TCP_Snd@tcbPtr+1
 13784  0023DE  0012               	return	
 13785  0023E0                     __end_ofPL178:
 13786                           	opt stack 0
 13787  0023E0                     PL180:
 13788                           	opt stack 17
 13789  0023E0  6AEE               	clrf	postinc0,c
 13790  0023E2  6AEE               	clrf	postinc0,c
 13791  0023E4  6AEE               	clrf	postinc0,c
 13792  0023E6  6AEF               	clrf	indf0,c
 13793  0023E8  0012               	return	
 13794  0023EA                     __end_ofPL180:
 13795                           	opt stack 0
 13796  0023EA                     PL184:
 13797                           	opt stack 17
 13798  0023EA  C0C9  FFEE         	movff	??_TCP_FiniteStateMachine+6,postinc0
 13799  0023EE  C0CA  FFEE         	movff	??_TCP_FiniteStateMachine+7,postinc0
 13800  0023F2  C0CB  FFEE         	movff	??_TCP_FiniteStateMachine+8,postinc0
 13801  0023F6  C0CC  FFEF         	movff	??_TCP_FiniteStateMachine+9,indf0
 13802  0023FA  0012               	return	
 13803  0023FC                     __end_ofPL184:
 13804                           	opt stack 0
 13805  0023FC                     PL186:
 13806                           	opt stack 17
 13807  0023FC  C1B8  FFEE         	movff	_tcpHeader+4,postinc0
 13808  002400  C1B9  FFEE         	movff	_tcpHeader+5,postinc0
 13809  002404  C1BA  FFEE         	movff	_tcpHeader+6,postinc0
 13810  002408  C1BB  FFEF         	movff	_tcpHeader+7,indf0
 13811  00240C  0012               	return	
 13812  00240E                     __end_ofPL186:
 13813                           	opt stack 0
 13814  00240E                     PL188:
 13815                           	opt stack 17
 13816  00240E  6FCE               	movwf	(??_TCP_FiniteStateMachine+11)& (0+255),b
 13817  002410  C0CD  FFF6         	movff	??_TCP_FiniteStateMachine+10,tblptrl
 13818  002414  C0CE  FFF7         	movff	??_TCP_FiniteStateMachine+11,tblptrh
 13819  002418  0E00               	movlw	low (__smallconst shr (0+16))
 13820  00241A  6EF8               	movwf	tblptru,c
 13821  00241C  0E0F               	movlw	(high __ramtop+-1)
 13822  00241E  0012               	return	
 13823  002420                     __end_ofPL188:
 13824                           	opt stack 0
 13825  002420                     PL194:
 13826                           	opt stack 17
 13827  002420  0E04               	movlw	4
 13828  002422  0100               	movlb	0	; () banked
 13829  002424  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 13830  002426  0C36               	retlw	54
 13831  002428                     __end_ofPL194:
 13832                           	opt stack 0
 13833  002428                     PL196:
 13834                           	opt stack 17
 13835  002428  C0C3  FFEE         	movff	??_TCP_FiniteStateMachine,postinc0
 13836  00242C  C0C4  FFEE         	movff	??_TCP_FiniteStateMachine+1,postinc0
 13837  002430  C0C5  FFEE         	movff	??_TCP_FiniteStateMachine+2,postinc0
 13838  002434  C0C6  FFEF         	movff	??_TCP_FiniteStateMachine+3,indf0
 13839  002438  0012               	return	
 13840  00243A                     __end_ofPL196:
 13841                           	opt stack 0
 13842  00243A                     PL202:
 13843                           	opt stack 17
 13844  00243A  0E04               	movlw	4
 13845  00243C  6FD3               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 13846  00243E  0C36               	retlw	54
 13847  002440                     __end_ofPL202:
 13848                           	opt stack 0
 13849  002440                     PL204:
 13850                           	opt stack 17
 13851  002440  C1BC  FFEE         	movff	_tcpHeader+8,postinc0
 13852  002444  C1BD  FFEE         	movff	_tcpHeader+9,postinc0
 13853  002448  C1BE  FFEE         	movff	_tcpHeader+10,postinc0
 13854  00244C  C1BF  FFEF         	movff	_tcpHeader+11,indf0
 13855  002450  0012               	return	
 13856  002452                     __end_ofPL204:
 13857                           	opt stack 0
 13858  002452                     PL210:
 13859                           	opt stack 17
 13860  002452  C0C5  FFEE         	movff	??_TCP_FiniteStateMachine+2,postinc0
 13861  002456  C0C6  FFEF         	movff	??_TCP_FiniteStateMachine+3,indf0
 13862  00245A  0012               	return	
 13863  00245C                     __end_ofPL210:
 13864                           	opt stack 0
 13865  00245C                     PL250:
 13866                           	opt stack 17
 13867  00245C  C1AE  FFF5         	movff	_tcpMss,tablat
 13868  002460  000D               	tblwt		*+
 13869  002462  C1AF  FFF5         	movff	_tcpMss+1,tablat
 13870  002466  000C               	tblwt		*
 13871  002468  0012               	return	
 13872  00246A                     __end_ofPL250:
 13873                           	opt stack 0
 13874  00246A                     PL318:
 13875                           	opt stack 17
 13876  00246A  0E02               	movlw	2
 13877  00246C  6EEE               	movwf	postinc0,c
 13878  00246E  6AEF               	clrf	indf0,c
 13879  002470  0C02               	retlw	2
 13880  002472                     __end_ofPL318:
 13881                           	opt stack 0
 13882  002472                     PL326:
 13883                           	opt stack 17
 13884  002472  0101               	movlb	1	; () banked
 13885  002474  519A               	movf	_receivedRemoteAddress& (0+255),w,b
 13886  002476  0100               	movlb	0	; () banked
 13887  002478  19C5               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 13888  00247A  0012               	return	
 13889  00247C                     __end_ofPL326:
 13890                           	opt stack 0
 13891  00247C                     PL330:
 13892                           	opt stack 17
 13893  00247C  0101               	movlb	1	; () banked
 13894  00247E  519B               	movf	(_receivedRemoteAddress+1)& (0+255),w,b
 13895  002480  0100               	movlb	0	; () banked
 13896  002482  19C6               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 13897  002484  0012               	return	
 13898  002486                     __end_ofPL330:
 13899                           	opt stack 0
 13900  002486                     PL338:
 13901                           	opt stack 17
 13902  002486  0101               	movlb	1	; () banked
 13903  002488  51BC               	movf	(_tcpHeader+8)& (0+255),w,b
 13904  00248A  0100               	movlb	0	; () banked
 13905  00248C  19C9               	xorwf	(??_TCP_FiniteStateMachine+6)& (0+255),w,b
 13906  00248E  0012               	return	
 13907  002490                     __end_ofPL338:
 13908                           	opt stack 0
 13909  002490                     PL340:
 13910                           	opt stack 17
 13911  002490  0101               	movlb	1	; () banked
 13912  002492  519C               	movf	(_receivedRemoteAddress+2)& (0+255),w,b
 13913  002494  0100               	movlb	0	; () banked
 13914  002496  19C7               	xorwf	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 13915  002498  0012               	return	
 13916  00249A                     __end_ofPL340:
 13917                           	opt stack 0
 13918  00249A                     PL344:
 13919                           	opt stack 17
 13920  00249A  0101               	movlb	1	; () banked
 13921  00249C  519D               	movf	(_receivedRemoteAddress+3)& (0+255),w,b
 13922  00249E  0100               	movlb	0	; () banked
 13923  0024A0  19C8               	xorwf	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 13924  0024A2  0012               	return	
 13925  0024A4                     __end_ofPL344:
 13926                           	opt stack 0
 13927  0024A4                     PL348:
 13928                           	opt stack 17
 13929  0024A4  C1AE  FFEE         	movff	_tcpMss,postinc0
 13930  0024A8  C1AF  FFEF         	movff	_tcpMss+1,indf0
 13931  0024AC  0012               	return	
 13932  0024AE                     __end_ofPL348:
 13933                           	opt stack 0
 13934  0024AE                     PL350:
 13935                           	opt stack 17
 13936  0024AE  0101               	movlb	1	; () banked
 13937  0024B0  51BD               	movf	(_tcpHeader+9)& (0+255),w,b
 13938  0024B2  0100               	movlb	0	; () banked
 13939  0024B4  19CA               	xorwf	(??_TCP_FiniteStateMachine+7)& (0+255),w,b
 13940  0024B6  0012               	return	
 13941  0024B8                     __end_ofPL350:
 13942                           	opt stack 0
 13943  0024B8                     PL352:
 13944                           	opt stack 17
 13945  0024B8  0101               	movlb	1	; () banked
 13946  0024BA  51BE               	movf	(_tcpHeader+10)& (0+255),w,b
 13947  0024BC  0100               	movlb	0	; () banked
 13948  0024BE  19CB               	xorwf	(??_TCP_FiniteStateMachine+8)& (0+255),w,b
 13949  0024C0  0012               	return	
 13950  0024C2                     __end_ofPL352:
 13951                           	opt stack 0
 13952  0024C2                     PL354:
 13953                           	opt stack 17
 13954  0024C2  C1A0  FFF6         	movff	_currentTCB,tblptrl
 13955  0024C6  C1A1  FFF7         	movff	_currentTCB+1,tblptrh
 13956  0024CA  0E00               	movlw	low (__smallconst shr (0+16))
 13957  0024CC  6EF8               	movwf	tblptru,c
 13958  0024CE  0E0F               	movlw	(high __ramtop+-1)
 13959  0024D0  0012               	return	
 13960  0024D2                     __end_ofPL354:
 13961                           	opt stack 0
 13962  0024D2                     PL356:
 13963                           	opt stack 17
 13964  0024D2  0101               	movlb	1	; () banked
 13965  0024D4  51BF               	movf	(_tcpHeader+11)& (0+255),w,b
 13966  0024D6  0100               	movlb	0	; () banked
 13967  0024D8  19CC               	xorwf	(??_TCP_FiniteStateMachine+9)& (0+255),w,b
 13968  0024DA  0012               	return	
 13969  0024DC                     __end_ofPL356:
 13970                           	opt stack 0
 13971  0024DC                     PL376:
 13972                           	opt stack 17
 13973  0024DC  0009               	tblrd		*+
 13974  0024DE  CFF5 F0C3          	movff	tablat,??_TCP_FiniteStateMachine
 13975  0024E2  0009               	tblrd		*+
 13976  0024E4  CFF5 F0C4          	movff	tablat,??_TCP_FiniteStateMachine+1
 13977  0024E8  0012               	return	
 13978  0024EA                     __end_ofPL376:
 13979                           	opt stack 0
 13980  0024EA                     PL378:
 13981                           	opt stack 17
 13982  0024EA  0101               	movlb	1	; () banked
 13983  0024EC  51BA               	movf	(_tcpHeader+6)& (0+255),w,b
 13984  0024EE  0100               	movlb	0	; () banked
 13985  0024F0  19C7               	xorwf	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 13986  0024F2  0012               	return	
 13987  0024F4                     __end_ofPL378:
 13988                           	opt stack 0
 13989  0024F4                     PL380:
 13990                           	opt stack 17
 13991  0024F4  0101               	movlb	1	; () banked
 13992  0024F6  51B5               	movf	(_tcpHeader+1)& (0+255),w,b
 13993  0024F8  0100               	movlb	0	; () banked
 13994  0024FA  19C6               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 13995  0024FC  0012               	return	
 13996  0024FE                     __end_ofPL380:
 13997                           	opt stack 0
 13998  0024FE                     PL382:
 13999                           	opt stack 17
 14000  0024FE  0101               	movlb	1	; () banked
 14001  002500  51BB               	movf	(_tcpHeader+7)& (0+255),w,b
 14002  002502  0100               	movlb	0	; () banked
 14003  002504  19C8               	xorwf	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 14004  002506  0012               	return	
 14005  002508                     __end_ofPL382:
 14006                           	opt stack 0
 14007  002508                     PL384:
 14008                           	opt stack 17
 14009  002508  0101               	movlb	1	; () banked
 14010  00250A  51B4               	movf	_tcpHeader& (0+255),w,b
 14011  00250C  0100               	movlb	0	; () banked
 14012  00250E  19C5               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 14013  002510  0012               	return	
 14014  002512                     __end_ofPL384:
 14015                           	opt stack 0
 14016  002512                     PL388:
 14017                           	opt stack 17
 14018  002512  0101               	movlb	1	; () banked
 14019  002514  51B8               	movf	(_tcpHeader+4)& (0+255),w,b
 14020  002516  0100               	movlb	0	; () banked
 14021  002518  19C5               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 14022  00251A  0012               	return	
 14023  00251C                     __end_ofPL388:
 14024                           	opt stack 0
 14025  00251C                     PL392:
 14026                           	opt stack 17
 14027  00251C  0101               	movlb	1	; () banked
 14028  00251E  51B9               	movf	(_tcpHeader+5)& (0+255),w,b
 14029  002520  0100               	movlb	0	; () banked
 14030  002522  19C6               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 14031  002524  0012               	return	
 14032  002526                     __end_ofPL392:
 14033                           	opt stack 0
 14034  002526                     PL426:
 14035                           	opt stack 17
 14036  002526  0101               	movlb	1	; () banked
 14037  002528  51B7               	movf	(_tcpHeader+3)& (0+255),w,b
 14038  00252A  0100               	movlb	0	; () banked
 14039  00252C  19C4               	xorwf	(??_TCP_FiniteStateMachine+1)& (0+255),w,b
 14040  00252E  0012               	return	
 14041  002530                     __end_ofPL426:
 14042                           	opt stack 0
 14043  002530                     PL442:
 14044                           	opt stack 17
 14045  002530  0101               	movlb	1	; () banked
 14046  002532  51B6               	movf	(_tcpHeader+2)& (0+255),w,b
 14047  002534  0100               	movlb	0	; () banked
 14048  002536  19C3               	xorwf	??_TCP_FiniteStateMachine& (0+255),w,b
 14049  002538  0012               	return	
 14050  00253A                     __end_ofPL442:
 14051                           	opt stack 0
 14052  00253A                     PL484:
 14053                           	opt stack 17
 14054  00253A  CFEE F0C3          	movff	postinc0,??_TCP_FiniteStateMachine
 14055  00253E  CFEE F0C4          	movff	postinc0,??_TCP_FiniteStateMachine+1
 14056  002542  0012               	return	
 14057  002544                     __end_ofPL484:
 14058                           	opt stack 0
 14059                           tosu	equ	0xFFF
 14060                           tosh	equ	0xFFE
 14061                           tosl	equ	0xFFD
 14062                           pclath	equ	0xFFA
 14063                           tblptru	equ	0xFF8
 14064                           tblptrh	equ	0xFF7
 14065                           tblptrl	equ	0xFF6
 14066                           tablat	equ	0xFF5
 14067                           prodh	equ	0xFF4
 14068                           prodl	equ	0xFF3
 14069                           intcon	equ	0xFF2
 14070                           intcon2	equ	0xFF1
 14071                           indf0	equ	0xFEF
 14072                           postinc0	equ	0xFEE
 14073                           fsr0h	equ	0xFEA
 14074                           fsr0l	equ	0xFE9
 14075                           wreg	equ	0xFE8
 14076                           postinc1	equ	0xFE6
 14077                           plusw1	equ	0xFE3
 14078                           fsr1h	equ	0xFE2
 14079                           fsr1l	equ	0xFE1
 14080                           bsr	equ	0xFE0
 14081                           indf2	equ	0xFDF
 14082                           postinc2	equ	0xFDE
 14083                           postdec2	equ	0xFDD
 14084                           plusw2	equ	0xFDB
 14085                           fsr2h	equ	0xFDA
 14086                           fsr2l	equ	0xFD9
 14087                           status	equ	0xFD8
 14088                           
 14089 ;; *************** function _TCP_PayloadSave *****************
 14090 ;; Defined at:
 14091 ;;		line 310 in file "../../TCPIP Library/source/tcpv4.c"
 14092 ;; Parameters:    Size  Location     Type
 14093 ;;  len             2   89[COMRAM] unsigned int 
 14094 ;; Auto vars:     Size  Location     Type
 14095 ;;  buffer_size     2   97[BANK0 ] unsigned int 
 14096 ;;  ret             1    0        unsigned char 
 14097 ;; Return value:  Size  Location     Type
 14098 ;;                  1    wreg      unsigned char 
 14099 ;; Registers used:
 14100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14101 ;; Tracked objects:
 14102 ;;		On entry : 0/1
 14103 ;;		On exit  : 0/0
 14104 ;;		Unchanged: 0/0
 14105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14107 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14108 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;Total ram usage:       17 bytes
 14111 ;; Hardware stack levels used:    1
 14112 ;; Hardware stack levels required when called:   10
 14113 ;; This function calls:
 14114 ;;		_ETH_ReadBlock
 14115 ;;		_TCP_Snd
 14116 ;; This function is called by:
 14117 ;;		_TCP_FiniteStateMachine
 14118 ;; This function uses a non-reentrant model
 14119 ;;
 14120                           
 14121                           	psect	text50
 14122  004294                     __ptext50:
 14123                           	opt stack 0
 14124  004294                     _TCP_PayloadSave:
 14125                           	opt stack 17
 14126                           
 14127                           ;tcpv4.c: 313: uint16_t buffer_size;
 14128                           ;tcpv4.c: 316: if (currentTCB->rxBufState == RX_BUFF_IN_USE)
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;incstack = 0
 14132  004294  0E22               	movlw	34
 14133  004296  0101               	movlb	1	; () banked
 14134  004298  D8D6               	call	PL136	;call to abstracted procedure
 14135  00429A  64F7               	cpfsgt	tblptrh,c
 14136  00429C  D003               	bra	u11737
 14137  00429E  0008               	tblrd		*
 14138  0042A0  50F5               	movf	tablat,w,c
 14139  0042A2  D003               	bra	u11730
 14140  0042A4                     u11737:
 14141  0042A4  EC3C  F011         	call	PL114	;call to abstracted procedure
 14142  0042A8  50EF               	movf	indf0,w,c
 14143  0042AA                     u11730:
 14144  0042AA  06E8               	decf	wreg,f,c
 14145  0042AC  A4D8               	btfss	status,2,c
 14146  0042AE  0012               	return	
 14147                           
 14148                           ;tcpv4.c: 317: {
 14149                           ;tcpv4.c: 319: if (currentTCB->localWnd >= len)
 14150  0042B0  0E1A               	movlw	26
 14151  0042B2  0101               	movlb	1	; () banked
 14152  0042B4  D8C8               	call	PL136	;call to abstracted procedure
 14153  0042B6  64F7               	cpfsgt	tblptrh,c
 14154  0042B8  D002               	bra	u11757
 14155  0042BA  D8DF               	call	PL248	;call to abstracted procedure
 14156  0042BC  D003               	bra	u11750
 14157  0042BE                     u11757:
 14158  0042BE  EC3C  F011         	call	PL114	;call to abstracted procedure
 14159  0042C2  D8EB               	call	PL342	;call to abstracted procedure
 14160  0042C4                     u11750:
 14161  0042C4  505A               	movf	TCP_PayloadSave@len,w,c
 14162  0042C6  0100               	movlb	0	; () banked
 14163  0042C8  5DB6               	subwf	(??_TCP_PayloadSave+2)& (0+255),w,b
 14164  0042CA  505B               	movf	TCP_PayloadSave@len+1,w,c
 14165  0042CC  59B7               	subwfb	(??_TCP_PayloadSave+3)& (0+255),w,b
 14166  0042CE  E305               	bnc	l8694
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;tcpv4.c: 320: {
 14170                           ;tcpv4.c: 321: buffer_size = len;
 14171  0042D0  C05A  F0C1         	movff	TCP_PayloadSave@len,TCP_PayloadSave@buffer_size
 14172  0042D4  C05B  F0C2         	movff	TCP_PayloadSave@len+1,TCP_PayloadSave@buffer_size+1
 14173                           
 14174                           ;tcpv4.c: 322: }else
 14175  0042D8  D012               	goto	l8696
 14176  0042DA                     l8694:
 14177                           
 14178                           ; BSR set to: 0
 14179                           ;tcpv4.c: 323: {
 14180                           ;tcpv4.c: 324: buffer_size = currentTCB->localWnd;
 14181  0042DA  0E1A               	movlw	26
 14182  0042DC  0101               	movlb	1	; () banked
 14183  0042DE  D8B3               	call	PL136	;call to abstracted procedure
 14184  0042E0  64F7               	cpfsgt	tblptrh,c
 14185  0042E2  D007               	bra	u11777
 14186  0042E4  0009               	tblrd		*+
 14187  0042E6  CFF5 F0C1          	movff	tablat,TCP_PayloadSave@buffer_size
 14188  0042EA  0009               	tblrd		*+
 14189  0042EC  CFF5 F0C2          	movff	tablat,TCP_PayloadSave@buffer_size+1
 14190  0042F0  D006               	bra	u11770
 14191  0042F2                     u11777:
 14192  0042F2  EC3C  F011         	call	PL114	;call to abstracted procedure
 14193  0042F6  CFEE F0C1          	movff	postinc0,TCP_PayloadSave@buffer_size
 14194  0042FA  CFEE F0C2          	movff	postinc0,TCP_PayloadSave@buffer_size+1
 14195  0042FE                     u11770:
 14196  0042FE                     l8696:
 14197                           
 14198                           ;tcpv4.c: 325: }
 14199                           ;tcpv4.c: 327: ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
 14200  0042FE  0E20               	movlw	32
 14201  004300  0101               	movlb	1	; () banked
 14202  004302  D8A1               	call	PL136	;call to abstracted procedure
 14203  004304  64F7               	cpfsgt	tblptrh,c
 14204  004306  D007               	bra	u11787
 14205  004308  0009               	tblrd		*+
 14206  00430A  CFF5 F003          	movff	tablat,ETH_ReadBlock@data
 14207  00430E  0009               	tblrd		*+
 14208  004310  CFF5 F004          	movff	tablat,ETH_ReadBlock@data+1
 14209  004314  D006               	bra	u11780
 14210  004316                     u11787:
 14211  004316  EC3C  F011         	call	PL114	;call to abstracted procedure
 14212  00431A  CFEE F003          	movff	postinc0,ETH_ReadBlock@data
 14213  00431E  CFEE F004          	movff	postinc0,ETH_ReadBlock@data+1
 14214  004322                     u11780:
 14215  004322  C0C1  F005         	movff	TCP_PayloadSave@buffer_size,ETH_ReadBlock@length
 14216  004326  C0C2  F006         	movff	TCP_PayloadSave@buffer_size+1,ETH_ReadBlock@length+1
 14217  00432A  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
 14218                           
 14219                           ; BSR set to: 1
 14220                           ;tcpv4.c: 328: currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
 14221  00432E  0E20               	movlw	32
 14222  004330  D88A               	call	PL136	;call to abstracted procedure
 14223  004332  64F7               	cpfsgt	tblptrh,c
 14224  004334  D002               	bra	u11797
 14225  004336  D8A1               	call	PL248	;call to abstracted procedure
 14226  004338  D003               	bra	u11790
 14227  00433A                     u11797:
 14228  00433A  EC3C  F011         	call	PL114	;call to abstracted procedure
 14229  00433E  D8AD               	call	PL342	;call to abstracted procedure
 14230  004340                     u11790:
 14231  004340  0100               	movlb	0	; () banked
 14232  004342  51C1               	movf	TCP_PayloadSave@buffer_size& (0+255),w,b
 14233  004344  27B6               	addwf	(??_TCP_PayloadSave+2)& (0+255),f,b
 14234  004346  51C2               	movf	(TCP_PayloadSave@buffer_size+1)& (0+255),w,b
 14235  004348  23B7               	addwfc	(??_TCP_PayloadSave+3)& (0+255),f,b
 14236  00434A  0E20               	movlw	32
 14237  00434C  D891               	call	PL212	;call to abstracted procedure
 14238  00434E  D88B               	call	PL140	;call to abstracted procedure
 14239  004350  D89B               	call	PL310	;call to abstracted procedure
 14240  004352  64F7               	cpfsgt	tblptrh,c
 14241  004354  D002               	bra	u11807
 14242  004356  D8A6               	call	PL364	;call to abstracted procedure
 14243  004358  D003               	bra	u11800
 14244  00435A                     u11807:
 14245  00435A  EC3C  F011         	call	PL114	;call to abstracted procedure
 14246  00435E  D8A9               	call	PL480	;call to abstracted procedure
 14247  004360                     u11800:
 14248                           
 14249                           ;tcpv4.c: 331: currentTCB->localWnd = currentTCB->localWnd - buffer_size;
 14250  004360  0E1A               	movlw	26
 14251  004362  0101               	movlb	1	; () banked
 14252  004364  D870               	call	PL136	;call to abstracted procedure
 14253  004366  64F7               	cpfsgt	tblptrh,c
 14254  004368  D002               	bra	u11817
 14255  00436A  D887               	call	PL248	;call to abstracted procedure
 14256  00436C  D003               	bra	u11810
 14257  00436E                     u11817:
 14258  00436E  EC3C  F011         	call	PL114	;call to abstracted procedure
 14259  004372  D893               	call	PL342	;call to abstracted procedure
 14260  004374                     u11810:
 14261  004374  0100               	movlb	0	; () banked
 14262  004376  51C1               	movf	TCP_PayloadSave@buffer_size& (0+255),w,b
 14263  004378  5FB6               	subwf	(??_TCP_PayloadSave+2)& (0+255),f,b
 14264  00437A  51C2               	movf	(TCP_PayloadSave@buffer_size+1)& (0+255),w,b
 14265  00437C  5BB7               	subwfb	(??_TCP_PayloadSave+3)& (0+255),f,b
 14266  00437E  0E1A               	movlw	26
 14267  004380  D877               	call	PL212	;call to abstracted procedure
 14268  004382  D871               	call	PL140	;call to abstracted procedure
 14269  004384  D881               	call	PL310	;call to abstracted procedure
 14270  004386  64F7               	cpfsgt	tblptrh,c
 14271  004388  D002               	bra	u11827
 14272  00438A  D88C               	call	PL364	;call to abstracted procedure
 14273  00438C  D003               	bra	u11820
 14274  00438E                     u11827:
 14275  00438E  EC3C  F011         	call	PL114	;call to abstracted procedure
 14276  004392  D88F               	call	PL480	;call to abstracted procedure
 14277  004394                     u11820:
 14278                           
 14279                           ;tcpv4.c: 332: currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
 14280  004394  0E08               	movlw	8
 14281  004396  0101               	movlb	1	; () banked
 14282  004398  D856               	call	PL136	;call to abstracted procedure
 14283  00439A  64F7               	cpfsgt	tblptrh,c
 14284  00439C  D008               	bra	u11837
 14285  00439E  D86D               	call	PL248	;call to abstracted procedure
 14286  0043A0  0009               	tblrd		*+
 14287  0043A2  CFF5 F0B8          	movff	tablat,??_TCP_PayloadSave+4
 14288  0043A6  0009               	tblrd		*+
 14289  0043A8  CFF5 F0B9          	movff	tablat,??_TCP_PayloadSave+5
 14290  0043AC  D007               	bra	u11830
 14291  0043AE                     u11837:
 14292  0043AE  EC3C  F011         	call	PL114	;call to abstracted procedure
 14293  0043B2  D873               	call	PL342	;call to abstracted procedure
 14294  0043B4  CFEE F0B8          	movff	postinc0,??_TCP_PayloadSave+4
 14295  0043B8  CFEE F0B9          	movff	postinc0,??_TCP_PayloadSave+5
 14296  0043BC                     u11830:
 14297  0043BC  0100               	movlb	0	; () banked
 14298  0043BE  51C1               	movf	TCP_PayloadSave@buffer_size& (0+255),w,b
 14299  0043C0  25B6               	addwf	(??_TCP_PayloadSave+2)& (0+255),w,b
 14300  0043C2  6FBA               	movwf	(??_TCP_PayloadSave+6)& (0+255),b
 14301  0043C4  51C2               	movf	(TCP_PayloadSave@buffer_size+1)& (0+255),w,b
 14302  0043C6  21B7               	addwfc	(??_TCP_PayloadSave+3)& (0+255),w,b
 14303  0043C8  6FBB               	movwf	(??_TCP_PayloadSave+7)& (0+255),b
 14304  0043CA  0E00               	movlw	0
 14305  0043CC  21B8               	addwfc	(??_TCP_PayloadSave+4)& (0+255),w,b
 14306  0043CE  6FBC               	movwf	(??_TCP_PayloadSave+8)& (0+255),b
 14307  0043D0  0E00               	movlw	0
 14308  0043D2  21B9               	addwfc	(??_TCP_PayloadSave+5)& (0+255),w,b
 14309  0043D4  6FBD               	movwf	(??_TCP_PayloadSave+9)& (0+255),b
 14310  0043D6  0E0C               	movlw	12
 14311  0043D8  0101               	movlb	1	; () banked
 14312  0043DA  25A0               	addwf	_currentTCB& (0+255),w,b
 14313  0043DC  0100               	movlb	0	; () banked
 14314  0043DE  6FBE               	movwf	(??_TCP_PayloadSave+10)& (0+255),b
 14315  0043E0  D842               	call	PL140	;call to abstracted procedure
 14316  0043E2  6FBF               	movwf	(??_TCP_PayloadSave+11)& (0+255),b
 14317  0043E4  C0BE  FFF6         	movff	??_TCP_PayloadSave+10,tblptrl
 14318  0043E8  C0BF  FFF7         	movff	??_TCP_PayloadSave+11,tblptrh
 14319  0043EC  0E00               	movlw	low (__smallconst shr (0+16))
 14320  0043EE  6EF8               	movwf	tblptru,c
 14321  0043F0  0E0F               	movlw	(high __ramtop+-1)
 14322  0043F2  64F7               	cpfsgt	tblptrh,c
 14323  0043F4  D00D               	bra	u11847
 14324  0043F6  C0BA  FFF5         	movff	??_TCP_PayloadSave+6,tablat
 14325  0043FA  000D               	tblwt		*+
 14326  0043FC  C0BB  FFF5         	movff	??_TCP_PayloadSave+7,tablat
 14327  004400  000D               	tblwt		*+
 14328  004402  C0BC  FFF5         	movff	??_TCP_PayloadSave+8,tablat
 14329  004406  000D               	tblwt		*+
 14330  004408  C0BD  FFF5         	movff	??_TCP_PayloadSave+9,tablat
 14331  00440C  000C               	tblwt		*
 14332  00440E  D00A               	bra	u11840
 14333  004410                     u11847:
 14334  004410  EC3C  F011         	call	PL114	;call to abstracted procedure
 14335  004414  C0BA  FFEE         	movff	??_TCP_PayloadSave+6,postinc0
 14336  004418  C0BB  FFEE         	movff	??_TCP_PayloadSave+7,postinc0
 14337  00441C  C0BC  FFEE         	movff	??_TCP_PayloadSave+8,postinc0
 14338  004420  C0BD  FFEF         	movff	??_TCP_PayloadSave+9,indf0
 14339  004424                     u11840:
 14340                           
 14341                           ;tcpv4.c: 335: currentTCB->flags = 0x10U;
 14342  004424  0E35               	movlw	53
 14343  004426  0101               	movlb	1	; () banked
 14344  004428  D80E               	call	PL136	;call to abstracted procedure
 14345  00442A  64F7               	cpfsgt	tblptrh,c
 14346  00442C  D004               	bra	u11857
 14347  00442E  0E10               	movlw	16
 14348  004430  6EF5               	movwf	tablat,c
 14349  004432  000C               	tblwt		*
 14350  004434  D004               	bra	u11850
 14351  004436                     u11857:
 14352  004436  EC3C  F011         	call	PL114	;call to abstracted procedure
 14353  00443A  0E10               	movlw	16
 14354  00443C  6EEF               	movwf	indf0,c
 14355  00443E                     u11850:
 14356                           
 14357                           ;tcpv4.c: 336: TCP_Snd(currentTCB);
 14358  00443E  ECEB  F011         	call	PL178	;call to abstracted procedure
 14359  004442  EFA2  F012         	goto	_TCP_Snd	;wreg free
 14360  004446                     __end_of_TCP_PayloadSave:
 14361                           	opt stack 0
 14362  004446                     PL136:
 14363                           	opt stack 17
 14364  004446  25A0               	addwf	_currentTCB& (0+255),w,b
 14365  004448  0100               	movlb	0	; () banked
 14366  00444A  6FB4               	movwf	??_TCP_PayloadSave& (0+255),b
 14367  00444C  0E00               	movlw	0
 14368  00444E  0101               	movlb	1	; () banked
 14369  004450  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 14370  004452  0100               	movlb	0	; () banked
 14371  004454  6FB5               	movwf	(??_TCP_PayloadSave+1)& (0+255),b
 14372  004456  C0B4  FFF6         	movff	??_TCP_PayloadSave,tblptrl
 14373  00445A  C0B5  FFF7         	movff	??_TCP_PayloadSave+1,tblptrh
 14374  00445E  0E00               	movlw	low (__smallconst shr (0+16))
 14375  004460  6EF8               	movwf	tblptru,c
 14376  004462  0E0F               	movlw	(high __ramtop+-1)
 14377  004464  0012               	return	
 14378  004466                     __end_ofPL136:
 14379                           	opt stack 0
 14380  004466                     PL140:
 14381                           	opt stack 17
 14382  004466  0E00               	movlw	0
 14383  004468  0101               	movlb	1	; () banked
 14384  00446A  21A1               	addwfc	(_currentTCB+1)& (0+255),w,b
 14385  00446C  0100               	movlb	0	; () banked
 14386  00446E  0012               	return	
 14387  004470                     __end_ofPL140:
 14388                           	opt stack 0
 14389  004470                     PL212:
 14390                           	opt stack 17
 14391  004470  0101               	movlb	1	; () banked
 14392  004472  25A0               	addwf	_currentTCB& (0+255),w,b
 14393  004474  0100               	movlb	0	; () banked
 14394  004476  6FB8               	movwf	(??_TCP_PayloadSave+4)& (0+255),b
 14395  004478  0012               	return	
 14396  00447A                     __end_ofPL212:
 14397                           	opt stack 0
 14398  00447A                     PL248:
 14399                           	opt stack 17
 14400  00447A  0009               	tblrd		*+
 14401  00447C  CFF5 F0B6          	movff	tablat,??_TCP_PayloadSave+2
 14402  004480  0009               	tblrd		*+
 14403  004482  CFF5 F0B7          	movff	tablat,??_TCP_PayloadSave+3
 14404  004486  0012               	return	
 14405  004488                     __end_ofPL248:
 14406                           	opt stack 0
 14407  004488                     PL310:
 14408                           	opt stack 17
 14409  004488  6FB9               	movwf	(??_TCP_PayloadSave+5)& (0+255),b
 14410  00448A  C0B8  FFF6         	movff	??_TCP_PayloadSave+4,tblptrl
 14411  00448E  C0B9  FFF7         	movff	??_TCP_PayloadSave+5,tblptrh
 14412  004492  0E00               	movlw	low (__smallconst shr (0+16))
 14413  004494  6EF8               	movwf	tblptru,c
 14414  004496  0E0F               	movlw	(high __ramtop+-1)
 14415  004498  0012               	return	
 14416  00449A                     __end_ofPL310:
 14417                           	opt stack 0
 14418  00449A                     PL342:
 14419                           	opt stack 17
 14420  00449A  CFEE F0B6          	movff	postinc0,??_TCP_PayloadSave+2
 14421  00449E  CFEE F0B7          	movff	postinc0,??_TCP_PayloadSave+3
 14422  0044A2  0012               	return	
 14423  0044A4                     __end_ofPL342:
 14424                           	opt stack 0
 14425  0044A4                     PL364:
 14426                           	opt stack 17
 14427  0044A4  C0B6  FFF5         	movff	??_TCP_PayloadSave+2,tablat
 14428  0044A8  000D               	tblwt		*+
 14429  0044AA  C0B7  FFF5         	movff	??_TCP_PayloadSave+3,tablat
 14430  0044AE  000C               	tblwt		*
 14431  0044B0  0012               	return	
 14432  0044B2                     __end_ofPL364:
 14433                           	opt stack 0
 14434  0044B2                     PL480:
 14435                           	opt stack 17
 14436  0044B2  C0B6  FFEE         	movff	??_TCP_PayloadSave+2,postinc0
 14437  0044B6  C0B7  FFEF         	movff	??_TCP_PayloadSave+3,indf0
 14438  0044BA  0012               	return	
 14439  0044BC                     __end_ofPL480:
 14440                           	opt stack 0
 14441                           tosu	equ	0xFFF
 14442                           tosh	equ	0xFFE
 14443                           tosl	equ	0xFFD
 14444                           pclath	equ	0xFFA
 14445                           tblptru	equ	0xFF8
 14446                           tblptrh	equ	0xFF7
 14447                           tblptrl	equ	0xFF6
 14448                           tablat	equ	0xFF5
 14449                           prodh	equ	0xFF4
 14450                           prodl	equ	0xFF3
 14451                           intcon	equ	0xFF2
 14452                           intcon2	equ	0xFF1
 14453                           indf0	equ	0xFEF
 14454                           postinc0	equ	0xFEE
 14455                           fsr0h	equ	0xFEA
 14456                           fsr0l	equ	0xFE9
 14457                           wreg	equ	0xFE8
 14458                           postinc1	equ	0xFE6
 14459                           plusw1	equ	0xFE3
 14460                           fsr1h	equ	0xFE2
 14461                           fsr1l	equ	0xFE1
 14462                           bsr	equ	0xFE0
 14463                           indf2	equ	0xFDF
 14464                           postinc2	equ	0xFDE
 14465                           postdec2	equ	0xFDD
 14466                           plusw2	equ	0xFDB
 14467                           fsr2h	equ	0xFDA
 14468                           fsr2l	equ	0xFD9
 14469                           status	equ	0xFD8
 14470                           
 14471 ;; *************** function _TCP_Snd *****************
 14472 ;; Defined at:
 14473 ;;		line 200 in file "../../TCPIP Library/source/tcpv4.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;  tcbPtr          2   87[COMRAM] PTR struct .
 14476 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 14477 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 14478 ;; Auto vars:     Size  Location     Type
 14479 ;;  txHeader       20   64[BANK0 ] struct .
 14480 ;;  tcpDataLengt    2   62[BANK0 ] unsigned int 
 14481 ;;  payloadLengt    2   59[BANK0 ] unsigned int 
 14482 ;;  cksm            2   57[BANK0 ] unsigned int 
 14483 ;;  data            2   55[BANK0 ] PTR unsigned char 
 14484 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 14485 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 14486 ;;  ret             1   61[BANK0 ] unsigned char 
 14487 ;; Return value:  Size  Location     Type
 14488 ;;                  1    wreg      unsigned char 
 14489 ;; Registers used:
 14490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14491 ;; Tracked objects:
 14492 ;;		On entry : 0/0
 14493 ;;		On exit  : F/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14496 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Temps:          0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;      Totals:         2      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;Total ram usage:       79 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; Hardware stack levels required when called:    9
 14503 ;; This function calls:
 14504 ;;		_ETH_Insert
 14505 ;;		_ETH_TxComputeChecksum
 14506 ;;		_ETH_WriteBlock
 14507 ;;		_IPV4_Send
 14508 ;;		_IPv4_Start
 14509 ;; This function is called by:
 14510 ;;		_TCP_PayloadSave
 14511 ;;		_TCP_FiniteStateMachine
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           	psect	text51
 14516  002544                     __ptext51:
 14517                           	opt stack 0
 14518  002544                     _TCP_Snd:
 14519                           	opt stack 0
 14520                           
 14521                           ;tcpv4.c: 203: tcpHeader_t txHeader;
 14522                           ;tcpv4.c: 204: uint16_t payloadLength;
 14523                           ;tcpv4.c: 205: uint16_t cksm;
 14524                           ;tcpv4.c: 206: uint16_t tcpDataLength;
 14525                           ;tcpv4.c: 207: uint8_t *data;
 14526                           ;tcpv4.c: 209: txHeader.sourcePort = ((((uint16_t)tcbPtr->localPort & (uint16_t)0xFF00) 
      +                          >> 8) | (((uint16_t)tcbPtr->localPort & (uint16_t)0x00FF) << 8));
 14527                           
 14528                           ;incstack = 0
 14529  002544  DB71               	call	PL358	;call to abstracted procedure
 14530  002546  64F7               	cpfsgt	tblptrh,c
 14531  002548  D007               	bra	u11027
 14532  00254A  0009               	tblrd		*+
 14533  00254C  CFF5 F067          	movff	tablat,??_TCP_Snd
 14534  002550  0009               	tblrd		*+
 14535  002552  CFF5 F068          	movff	tablat,??_TCP_Snd+1
 14536  002556  D006               	bra	u11020
 14537  002558                     u11027:
 14538  002558  EC3C  F011         	call	PL114	;call to abstracted procedure
 14539  00255C  CFEE F067          	movff	postinc0,??_TCP_Snd
 14540  002560  CFEE F068          	movff	postinc0,??_TCP_Snd+1
 14541  002564                     u11020:
 14542  002564  0100               	movlb	0	; () banked
 14543  002566  5167               	movf	??_TCP_Snd& (0+255),w,b
 14544  002568  6F6A               	movwf	(??_TCP_Snd+3)& (0+255),b
 14545  00256A  6B69               	clrf	(??_TCP_Snd+2)& (0+255),b
 14546  00256C  DB5D               	call	PL358	;call to abstracted procedure
 14547  00256E  64F7               	cpfsgt	tblptrh,c
 14548  002570  D002               	bra	u11037
 14549  002572  DAAF               	call	PL252	;call to abstracted procedure
 14550  002574  D003               	bra	u11030
 14551  002576                     u11037:
 14552  002576  EC3C  F011         	call	PL114	;call to abstracted procedure
 14553  00257A  DB49               	call	PL332	;call to abstracted procedure
 14554  00257C                     u11030:
 14555  00257C  C06C  F06B         	movff	??_TCP_Snd+5,??_TCP_Snd+4
 14556  002580  0100               	movlb	0	; () banked
 14557  002582  6B6C               	clrf	(??_TCP_Snd+5)& (0+255),b
 14558  002584  6B6C               	clrf	(??_TCP_Snd+5)& (0+255),b
 14559  002586  5169               	movf	(??_TCP_Snd+2)& (0+255),w,b
 14560  002588  116B               	iorwf	(??_TCP_Snd+4)& (0+255),w,b
 14561  00258A  6FA0               	movwf	TCP_Snd@txHeader& (0+255),b
 14562  00258C  516A               	movf	(??_TCP_Snd+3)& (0+255),w,b
 14563  00258E  116C               	iorwf	(??_TCP_Snd+5)& (0+255),w,b
 14564  002590  6FA1               	movwf	(TCP_Snd@txHeader+1)& (0+255),b
 14565                           
 14566                           ;tcpv4.c: 210: txHeader.destPort = ((((uint16_t)tcbPtr->destPort & (uint16_t)0xFF00) >> 
      +                          8) | (((uint16_t)tcbPtr->destPort & (uint16_t)0x00FF) << 8));
 14567  002592  0E06               	movlw	6
 14568  002594  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14569  002596  DA38               	call	PL118	;call to abstracted procedure
 14570  002598  64F7               	cpfsgt	tblptrh,c
 14571  00259A  D002               	bra	u11047
 14572  00259C  DA6B               	call	PL162	;call to abstracted procedure
 14573  00259E  D003               	bra	u11040
 14574  0025A0                     u11047:
 14575  0025A0  EC3C  F011         	call	PL114	;call to abstracted procedure
 14576  0025A4  DA7B               	call	PL208	;call to abstracted procedure
 14577  0025A6                     u11040:
 14578  0025A6  DB61               	call	PL418	;call to abstracted procedure
 14579  0025A8  0E06               	movlw	6
 14580  0025AA  DAA8               	call	PL258	;call to abstracted procedure
 14581  0025AC  64F7               	cpfsgt	tblptrh,c
 14582  0025AE  D002               	bra	u11057
 14583  0025B0  DB4A               	call	PL366	;call to abstracted procedure
 14584  0025B2  D003               	bra	u11050
 14585  0025B4                     u11057:
 14586  0025B4  EC3C  F011         	call	PL114	;call to abstracted procedure
 14587  0025B8  DB5D               	call	PL422	;call to abstracted procedure
 14588  0025BA                     u11050:
 14589  0025BA  DB2E               	call	PL334	;call to abstracted procedure
 14590  0025BC  6FA2               	movwf	(TCP_Snd@txHeader+2)& (0+255),b
 14591  0025BE  516C               	movf	(??_TCP_Snd+5)& (0+255),w,b
 14592  0025C0  1170               	iorwf	(??_TCP_Snd+9)& (0+255),w,b
 14593  0025C2  6FA3               	movwf	(TCP_Snd@txHeader+3)& (0+255),b
 14594                           
 14595                           ;tcpv4.c: 212: txHeader.sequenceNumber = ((((uint32_t)tcbPtr->localSeqno&(uint32_t)0xff0
      +                          00000) >> 24) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x00ff0000) >> 8) | (((uint32_t
      +                          )tcbPtr->localSeqno&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->localSeqno&(uint32
      +                          _
 14596  0025C4  0E10               	movlw	16
 14597  0025C6  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14598  0025C8  DA1F               	call	PL118	;call to abstracted procedure
 14599  0025CA  64F7               	cpfsgt	tblptrh,c
 14600  0025CC  D003               	bra	u11067
 14601  0025CE  DA52               	call	PL162	;call to abstracted procedure
 14602  0025D0  DA80               	call	PL252	;call to abstracted procedure
 14603  0025D2  D004               	bra	u11060
 14604  0025D4                     u11067:
 14605  0025D4  EC3C  F011         	call	PL114	;call to abstracted procedure
 14606  0025D8  DA61               	call	PL208	;call to abstracted procedure
 14607  0025DA  DB19               	call	PL332	;call to abstracted procedure
 14608  0025DC                     u11060:
 14609  0025DC  DAEA               	call	PL280	;call to abstracted procedure
 14610  0025DE  0E10               	movlw	16
 14611  0025E0  DA50               	call	PL190	;call to abstracted procedure
 14612  0025E2  64F7               	cpfsgt	tblptrh,c
 14613  0025E4  D002               	bra	u11077
 14614  0025E6  DAB1               	call	PL266	;call to abstracted procedure
 14615  0025E8  D003               	bra	u11070
 14616  0025EA                     u11077:
 14617  0025EA  EC3C  F011         	call	PL114	;call to abstracted procedure
 14618  0025EE  DAF4               	call	PL312	;call to abstracted procedure
 14619  0025F0                     u11070:
 14620  0025F0  DA77               	call	PL256	;call to abstracted procedure
 14621  0025F2  0E10               	movlw	16
 14622  0025F4  DA90               	call	PL260	;call to abstracted procedure
 14623  0025F6  64F7               	cpfsgt	tblptrh,c
 14624  0025F8  D002               	bra	u11087
 14625  0025FA  DAB4               	call	PL268	;call to abstracted procedure
 14626  0025FC  D003               	bra	u11080
 14627  0025FE                     u11087:
 14628  0025FE  EC3C  F011         	call	PL114	;call to abstracted procedure
 14629  002602  DAF3               	call	PL314	;call to abstracted procedure
 14630  002604                     u11080:
 14631  002604  DA58               	call	PL242	;call to abstracted procedure
 14632  002606  0E10               	movlw	16
 14633  002608  DA93               	call	PL264	;call to abstracted procedure
 14634  00260A  64F7               	cpfsgt	tblptrh,c
 14635  00260C  D002               	bra	u11097
 14636  00260E  DAB7               	call	PL270	;call to abstracted procedure
 14637  002610  D003               	bra	u11090
 14638  002612                     u11097:
 14639  002612  EC3C  F011         	call	PL114	;call to abstracted procedure
 14640  002616  DAF2               	call	PL316	;call to abstracted procedure
 14641  002618                     u11090:
 14642  002618  DA03               	call	PL156	;call to abstracted procedure
 14643  00261A  6FA4               	movwf	(TCP_Snd@txHeader+4)& (0+255),b
 14644  00261C  516E               	movf	(??_TCP_Snd+7)& (0+255),w,b
 14645  00261E  1194               	iorwf	(??_TCP_Snd+45)& (0+255),w,b
 14646  002620  6FA5               	movwf	(TCP_Snd@txHeader+5)& (0+255),b
 14647  002622  516F               	movf	(??_TCP_Snd+8)& (0+255),w,b
 14648  002624  1195               	iorwf	(??_TCP_Snd+46)& (0+255),w,b
 14649  002626  6FA6               	movwf	(TCP_Snd@txHeader+6)& (0+255),b
 14650  002628  5170               	movf	(??_TCP_Snd+9)& (0+255),w,b
 14651  00262A  1196               	iorwf	(??_TCP_Snd+47)& (0+255),w,b
 14652  00262C  6FA7               	movwf	(TCP_Snd@txHeader+7)& (0+255),b
 14653                           
 14654                           ;tcpv4.c: 214: txHeader.ackNumber = ((((uint32_t)tcbPtr->remoteAck&(uint32_t)0xff000000)
      +                           >> 24) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr
      +                          ->remoteAck&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x0000
      +                          0
 14655  00262E  0E0C               	movlw	12
 14656  002630  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14657  002632  D9EA               	call	PL118	;call to abstracted procedure
 14658  002634  64F7               	cpfsgt	tblptrh,c
 14659  002636  D003               	bra	u11117
 14660  002638  DA1D               	call	PL162	;call to abstracted procedure
 14661  00263A  DA4B               	call	PL252	;call to abstracted procedure
 14662  00263C  D004               	bra	u11110
 14663  00263E                     u11117:
 14664  00263E  EC3C  F011         	call	PL114	;call to abstracted procedure
 14665  002642  DA2C               	call	PL208	;call to abstracted procedure
 14666  002644  DAE4               	call	PL332	;call to abstracted procedure
 14667  002646                     u11110:
 14668  002646  DAB5               	call	PL280	;call to abstracted procedure
 14669  002648  0E0C               	movlw	12
 14670  00264A  DA1B               	call	PL190	;call to abstracted procedure
 14671  00264C  64F7               	cpfsgt	tblptrh,c
 14672  00264E  D002               	bra	u11127
 14673  002650  DA7C               	call	PL266	;call to abstracted procedure
 14674  002652  D003               	bra	u11120
 14675  002654                     u11127:
 14676  002654  EC3C  F011         	call	PL114	;call to abstracted procedure
 14677  002658  DABF               	call	PL312	;call to abstracted procedure
 14678  00265A                     u11120:
 14679  00265A  DA42               	call	PL256	;call to abstracted procedure
 14680  00265C  0E0C               	movlw	12
 14681  00265E  DA5B               	call	PL260	;call to abstracted procedure
 14682  002660  64F7               	cpfsgt	tblptrh,c
 14683  002662  D002               	bra	u11137
 14684  002664  DA7F               	call	PL268	;call to abstracted procedure
 14685  002666  D003               	bra	u11130
 14686  002668                     u11137:
 14687  002668  EC3C  F011         	call	PL114	;call to abstracted procedure
 14688  00266C  DABE               	call	PL314	;call to abstracted procedure
 14689  00266E                     u11130:
 14690  00266E  DA23               	call	PL242	;call to abstracted procedure
 14691  002670  0E0C               	movlw	12
 14692  002672  DA5E               	call	PL264	;call to abstracted procedure
 14693  002674  64F7               	cpfsgt	tblptrh,c
 14694  002676  D002               	bra	u11147
 14695  002678  DA82               	call	PL270	;call to abstracted procedure
 14696  00267A  D003               	bra	u11140
 14697  00267C                     u11147:
 14698  00267C  EC3C  F011         	call	PL114	;call to abstracted procedure
 14699  002680  DABD               	call	PL316	;call to abstracted procedure
 14700  002682                     u11140:
 14701  002682  D9CE               	call	PL156	;call to abstracted procedure
 14702  002684  6FA8               	movwf	(TCP_Snd@txHeader+8)& (0+255),b
 14703  002686  516E               	movf	(??_TCP_Snd+7)& (0+255),w,b
 14704  002688  1194               	iorwf	(??_TCP_Snd+45)& (0+255),w,b
 14705  00268A  6FA9               	movwf	(TCP_Snd@txHeader+9)& (0+255),b
 14706  00268C  516F               	movf	(??_TCP_Snd+8)& (0+255),w,b
 14707  00268E  1195               	iorwf	(??_TCP_Snd+46)& (0+255),w,b
 14708  002690  6FAA               	movwf	(TCP_Snd@txHeader+10)& (0+255),b
 14709  002692  5170               	movf	(??_TCP_Snd+9)& (0+255),w,b
 14710  002694  1196               	iorwf	(??_TCP_Snd+47)& (0+255),w,b
 14711  002696  6FAB               	movwf	(TCP_Snd@txHeader+11)& (0+255),b
 14712                           
 14713                           ; BSR set to: 0
 14714                           ;tcpv4.c: 216: txHeader.ns = 0;
 14715  002698  91AC               	bcf	(TCP_Snd@txHeader+12)& (0+255),0,b
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;tcpv4.c: 217: txHeader.reserved = 0;
 14719  00269A  0EF1               	movlw	-15
 14720  00269C  17AC               	andwf	(TCP_Snd@txHeader+12)& (0+255),f,b
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;tcpv4.c: 218: txHeader.dataOffset = 5;
 14724  00269E  51AC               	movf	(TCP_Snd@txHeader+12)& (0+255),w,b
 14725  0026A0  0B0F               	andlw	-241
 14726  0026A2  0950               	iorlw	80
 14727  0026A4  6FAC               	movwf	(TCP_Snd@txHeader+12)& (0+255),b
 14728                           
 14729                           ;tcpv4.c: 219: txHeader.windowSize = ((((uint16_t)tcbPtr->localWnd & (uint16_t)0xFF00) >
      +                          > 8) | (((uint16_t)tcbPtr->localWnd & (uint16_t)0x00FF) << 8));
 14730  0026A6  0E1A               	movlw	26
 14731  0026A8  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14732  0026AA  D9AE               	call	PL118	;call to abstracted procedure
 14733  0026AC  64F7               	cpfsgt	tblptrh,c
 14734  0026AE  D002               	bra	u11167
 14735  0026B0  D9E1               	call	PL162	;call to abstracted procedure
 14736  0026B2  D003               	bra	u11160
 14737  0026B4                     u11167:
 14738  0026B4  EC3C  F011         	call	PL114	;call to abstracted procedure
 14739  0026B8  D9F1               	call	PL208	;call to abstracted procedure
 14740  0026BA                     u11160:
 14741  0026BA  DAD7               	call	PL418	;call to abstracted procedure
 14742  0026BC  0E1A               	movlw	26
 14743  0026BE  DA1E               	call	PL258	;call to abstracted procedure
 14744  0026C0  64F7               	cpfsgt	tblptrh,c
 14745  0026C2  D002               	bra	u11177
 14746  0026C4  DAC0               	call	PL366	;call to abstracted procedure
 14747  0026C6  D003               	bra	u11170
 14748  0026C8                     u11177:
 14749  0026C8  EC3C  F011         	call	PL114	;call to abstracted procedure
 14750  0026CC  DAD3               	call	PL422	;call to abstracted procedure
 14751  0026CE                     u11170:
 14752  0026CE  DAA4               	call	PL334	;call to abstracted procedure
 14753  0026D0  6FAE               	movwf	(TCP_Snd@txHeader+14)& (0+255),b
 14754  0026D2  516C               	movf	(??_TCP_Snd+5)& (0+255),w,b
 14755  0026D4  1170               	iorwf	(??_TCP_Snd+9)& (0+255),w,b
 14756  0026D6  6FAF               	movwf	(TCP_Snd@txHeader+15)& (0+255),b
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;tcpv4.c: 220: txHeader.checksum = 0;
 14760  0026D8  6BB0               	clrf	(TCP_Snd@txHeader+16)& (0+255),b
 14761  0026DA  6BB1               	clrf	(TCP_Snd@txHeader+17)& (0+255),b
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;tcpv4.c: 221: txHeader.urgentPtr = 0;
 14765  0026DC  6BB2               	clrf	(TCP_Snd@txHeader+18)& (0+255),b
 14766  0026DE  6BB3               	clrf	(TCP_Snd@txHeader+19)& (0+255),b
 14767                           
 14768                           ;tcpv4.c: 223: if ((tcbPtr->flags) & (0x02U | 0x04U))
 14769  0026E0  0E35               	movlw	53
 14770  0026E2  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14771  0026E4  D991               	call	PL118	;call to abstracted procedure
 14772  0026E6  64F7               	cpfsgt	tblptrh,c
 14773  0026E8  D003               	bra	u11187
 14774  0026EA  0008               	tblrd		*
 14775  0026EC  50F5               	movf	tablat,w,c
 14776  0026EE  D003               	bra	u11180
 14777  0026F0                     u11187:
 14778  0026F0  EC3C  F011         	call	PL114	;call to abstracted procedure
 14779  0026F4  50EF               	movf	indf0,w,c
 14780  0026F6                     u11180:
 14781  0026F6  0100               	movlb	0	; () banked
 14782  0026F8  6F69               	movwf	(??_TCP_Snd+2)& (0+255),b
 14783  0026FA  0E06               	movlw	6
 14784  0026FC  1769               	andwf	(??_TCP_Snd+2)& (0+255),f,b
 14785  0026FE  E003               	bz	l8486
 14786                           
 14787                           ; BSR set to: 0
 14788                           ;tcpv4.c: 224: {
 14789                           ;tcpv4.c: 225: tcpDataLength = 0;
 14790  002700  6B9E               	clrf	TCP_Snd@tcpDataLength& (0+255),b
 14791  002702  6B9F               	clrf	(TCP_Snd@tcpDataLength+1)& (0+255),b
 14792                           
 14793                           ;tcpv4.c: 226: } else
 14794  002704  D096               	goto	l1220
 14795  002706                     l8486:
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;tcpv4.c: 227: {
 14799                           ;tcpv4.c: 228: tcpDataLength = tcbPtr->bytesToSend;
 14800  002706  0E27               	movlw	39
 14801  002708  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14802  00270A  D97E               	call	PL118	;call to abstracted procedure
 14803  00270C  64F7               	cpfsgt	tblptrh,c
 14804  00270E  D002               	bra	u11207
 14805  002710  DA5C               	call	PL306	;call to abstracted procedure
 14806  002712  D003               	bra	u11200
 14807  002714                     u11207:
 14808  002714  EC3C  F011         	call	PL114	;call to abstracted procedure
 14809  002718  DA9D               	call	PL390	;call to abstracted procedure
 14810  00271A                     u11200:
 14811                           
 14812                           ;tcpv4.c: 230: if (tcpDataLength != 0)
 14813  00271A  0100               	movlb	0	; () banked
 14814  00271C  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 14815  00271E  119F               	iorwf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 14816  002720  E101 D087          	bz	l1220
 14817                           
 14818                           ; BSR set to: 0
 14819                           ;tcpv4.c: 231: {
 14820                           ;tcpv4.c: 232: if(tcpDataLength > tcbPtr->remoteWnd)
 14821  002724  0E18               	movlw	24
 14822  002726  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14823  002728  D96F               	call	PL118	;call to abstracted procedure
 14824  00272A  64F7               	cpfsgt	tblptrh,c
 14825  00272C  D002               	bra	u11227
 14826  00272E  D9A2               	call	PL162	;call to abstracted procedure
 14827  002730  D003               	bra	u11220
 14828  002732                     u11227:
 14829  002732  EC3C  F011         	call	PL114	;call to abstracted procedure
 14830  002736  D9B2               	call	PL208	;call to abstracted procedure
 14831  002738                     u11220:
 14832  002738  DA92               	call	PL396	;call to abstracted procedure
 14833  00273A  E20A               	bc	l1222
 14834                           
 14835                           ; BSR set to: 0
 14836                           ;tcpv4.c: 233: {
 14837                           ;tcpv4.c: 234: tcpDataLength = tcbPtr->remoteWnd;
 14838  00273C  0E18               	movlw	24
 14839  00273E  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14840  002740  D963               	call	PL118	;call to abstracted procedure
 14841  002742  64F7               	cpfsgt	tblptrh,c
 14842  002744  D002               	bra	u11247
 14843  002746  DA41               	call	PL306	;call to abstracted procedure
 14844  002748  D003               	bra	u11240
 14845  00274A                     u11247:
 14846  00274A  EC3C  F011         	call	PL114	;call to abstracted procedure
 14847  00274E  DA82               	call	PL390	;call to abstracted procedure
 14848  002750                     u11240:
 14849  002750                     l1222:
 14850                           
 14851                           ;tcpv4.c: 235: }
 14852                           ;tcpv4.c: 237: if(tcpDataLength > tcbPtr->mss)
 14853  002750  0E1C               	movlw	28
 14854  002752  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14855  002754  0100               	movlb	0	; () banked
 14856  002756  D958               	call	PL118	;call to abstracted procedure
 14857  002758  64F7               	cpfsgt	tblptrh,c
 14858  00275A  D002               	bra	u11257
 14859  00275C  D98B               	call	PL162	;call to abstracted procedure
 14860  00275E  D003               	bra	u11250
 14861  002760                     u11257:
 14862  002760  EC3C  F011         	call	PL114	;call to abstracted procedure
 14863  002764  D99B               	call	PL208	;call to abstracted procedure
 14864  002766                     u11250:
 14865  002766  DA7B               	call	PL396	;call to abstracted procedure
 14866  002768  E20A               	bc	l1223
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;tcpv4.c: 238: {
 14870                           ;tcpv4.c: 239: tcpDataLength = tcbPtr->mss;
 14871  00276A  0E1C               	movlw	28
 14872  00276C  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14873  00276E  D94C               	call	PL118	;call to abstracted procedure
 14874  002770  64F7               	cpfsgt	tblptrh,c
 14875  002772  D002               	bra	u11277
 14876  002774  DA2A               	call	PL306	;call to abstracted procedure
 14877  002776  D003               	bra	u11270
 14878  002778                     u11277:
 14879  002778  EC3C  F011         	call	PL114	;call to abstracted procedure
 14880  00277C  DA6B               	call	PL390	;call to abstracted procedure
 14881  00277E                     u11270:
 14882  00277E                     l1223:
 14883                           
 14884                           ;tcpv4.c: 240: }
 14885                           ;tcpv4.c: 241: data = tcbPtr->txBufferPtr;
 14886  00277E  D993               	call	PL228	;call to abstracted procedure
 14887  002780  D943               	call	PL118	;call to abstracted procedure
 14888  002782  64F7               	cpfsgt	tblptrh,c
 14889  002784  D007               	bra	u11287
 14890  002786  0009               	tblrd		*+
 14891  002788  CFF5 F097          	movff	tablat,TCP_Snd@data
 14892  00278C  0009               	tblrd		*+
 14893  00278E  CFF5 F098          	movff	tablat,TCP_Snd@data+1
 14894  002792  D006               	bra	u11280
 14895  002794                     u11287:
 14896  002794  EC3C  F011         	call	PL114	;call to abstracted procedure
 14897  002798  CFEE F097          	movff	postinc0,TCP_Snd@data
 14898  00279C  CFEE F098          	movff	postinc0,TCP_Snd@data+1
 14899  0027A0                     u11280:
 14900                           
 14901                           ;tcpv4.c: 244: tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
 14902  0027A0  D982               	call	PL228	;call to abstracted procedure
 14903  0027A2  D932               	call	PL118	;call to abstracted procedure
 14904  0027A4  64F7               	cpfsgt	tblptrh,c
 14905  0027A6  D002               	bra	u11297
 14906  0027A8  D965               	call	PL162	;call to abstracted procedure
 14907  0027AA  D003               	bra	u11290
 14908  0027AC                     u11297:
 14909  0027AC  EC3C  F011         	call	PL114	;call to abstracted procedure
 14910  0027B0  D975               	call	PL208	;call to abstracted procedure
 14911  0027B2                     u11290:
 14912  0027B2  0100               	movlb	0	; () banked
 14913  0027B4  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 14914  0027B6  2769               	addwf	(??_TCP_Snd+2)& (0+255),f,b
 14915  0027B8  519F               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 14916  0027BA  236A               	addwfc	(??_TCP_Snd+3)& (0+255),f,b
 14917  0027BC  0E25               	movlw	37
 14918  0027BE  D9EC               	call	PL274	;call to abstracted procedure
 14919  0027C0  64F7               	cpfsgt	tblptrh,c
 14920  0027C2  D002               	bra	u11307
 14921  0027C4  DA39               	call	PL360	;call to abstracted procedure
 14922  0027C6  D003               	bra	u11300
 14923  0027C8                     u11307:
 14924  0027C8  EC3C  F011         	call	PL114	;call to abstracted procedure
 14925  0027CC  DA5C               	call	PL458	;call to abstracted procedure
 14926  0027CE                     u11300:
 14927                           
 14928                           ;tcpv4.c: 245: tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
 14929  0027CE  D96F               	call	PL232	;call to abstracted procedure
 14930  0027D0  D91B               	call	PL118	;call to abstracted procedure
 14931  0027D2  64F7               	cpfsgt	tblptrh,c
 14932  0027D4  D002               	bra	u11317
 14933  0027D6  D94E               	call	PL162	;call to abstracted procedure
 14934  0027D8  D003               	bra	u11310
 14935  0027DA                     u11317:
 14936  0027DA  EC3C  F011         	call	PL114	;call to abstracted procedure
 14937  0027DE  D95E               	call	PL208	;call to abstracted procedure
 14938  0027E0                     u11310:
 14939  0027E0  0100               	movlb	0	; () banked
 14940  0027E2  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 14941  0027E4  5F69               	subwf	(??_TCP_Snd+2)& (0+255),f,b
 14942  0027E6  519F               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 14943  0027E8  5B6A               	subwfb	(??_TCP_Snd+3)& (0+255),f,b
 14944  0027EA  0E27               	movlw	39
 14945  0027EC  D9D5               	call	PL274	;call to abstracted procedure
 14946  0027EE  64F7               	cpfsgt	tblptrh,c
 14947  0027F0  D002               	bra	u11327
 14948  0027F2  DA22               	call	PL360	;call to abstracted procedure
 14949  0027F4  D003               	bra	u11320
 14950  0027F6                     u11327:
 14951  0027F6  EC3C  F011         	call	PL114	;call to abstracted procedure
 14952  0027FA  DA45               	call	PL458	;call to abstracted procedure
 14953  0027FC                     u11320:
 14954                           
 14955                           ;tcpv4.c: 247: if (tcbPtr->bytesToSend == 0)
 14956  0027FC  D958               	call	PL232	;call to abstracted procedure
 14957  0027FE  D904               	call	PL118	;call to abstracted procedure
 14958  002800  64F7               	cpfsgt	tblptrh,c
 14959  002802  D002               	bra	u11337
 14960  002804  D937               	call	PL162	;call to abstracted procedure
 14961  002806  D003               	bra	u11330
 14962  002808                     u11337:
 14963  002808  EC3C  F011         	call	PL114	;call to abstracted procedure
 14964  00280C  D947               	call	PL208	;call to abstracted procedure
 14965  00280E                     u11330:
 14966  00280E  0100               	movlb	0	; () banked
 14967  002810  5169               	movf	(??_TCP_Snd+2)& (0+255),w,b
 14968  002812  116A               	iorwf	(??_TCP_Snd+3)& (0+255),w,b
 14969  002814  E10E               	bnz	l1220
 14970                           
 14971                           ; BSR set to: 0
 14972                           ;tcpv4.c: 248: {
 14973                           ;tcpv4.c: 249: tcbPtr->flags |= 0x08U;
 14974  002816  0E35               	movlw	53
 14975  002818  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14976  00281A  D8F6               	call	PL118	;call to abstracted procedure
 14977  00281C  64F7               	cpfsgt	tblptrh,c
 14978  00281E  D005               	bra	u11357
 14979  002820  0E08               	movlw	8
 14980  002822  0008               	tblrd		*
 14981  002824  12F5               	iorwf	tablat,f,c
 14982  002826  000C               	tblwt		*
 14983  002828  D004               	bra	u11350
 14984  00282A                     u11357:
 14985  00282A  EC3C  F011         	call	PL114	;call to abstracted procedure
 14986  00282E  0E08               	movlw	8
 14987  002830  12EF               	iorwf	indf0,f,c
 14988  002832                     u11350:
 14989  002832                     l1220:
 14990                           
 14991                           ;tcpv4.c: 250: }
 14992                           ;tcpv4.c: 251: }
 14993                           ;tcpv4.c: 252: }
 14994                           ;tcpv4.c: 254: txHeader.flags = tcbPtr->flags;
 14995  002832  0E35               	movlw	53
 14996  002834  2458               	addwf	TCP_Snd@tcbPtr,w,c
 14997  002836  0100               	movlb	0	; () banked
 14998  002838  D8E7               	call	PL118	;call to abstracted procedure
 14999  00283A  64F7               	cpfsgt	tblptrh,c
 15000  00283C  D003               	bra	u11367
 15001  00283E  0008               	tblrd		*
 15002  002840  50F5               	movf	tablat,w,c
 15003  002842  D003               	bra	u11360
 15004  002844                     u11367:
 15005  002844  EC3C  F011         	call	PL114	;call to abstracted procedure
 15006  002848  50EF               	movf	indf0,w,c
 15007  00284A                     u11360:
 15008  00284A  0100               	movlb	0	; () banked
 15009  00284C  6FAD               	movwf	(TCP_Snd@txHeader+13)& (0+255),b
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;tcpv4.c: 255: payloadLength = sizeof(tcpHeader_t) + tcpDataLength;
 15013  00284E  0E14               	movlw	20
 15014  002850  259E               	addwf	TCP_Snd@tcpDataLength& (0+255),w,b
 15015  002852  6F9B               	movwf	TCP_Snd@payloadLength& (0+255),b
 15016  002854  0E00               	movlw	0
 15017  002856  219F               	addwfc	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 15018  002858  6F9C               	movwf	(TCP_Snd@payloadLength+1)& (0+255),b
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;tcpv4.c: 257: ret = IPv4_Start(tcbPtr->destIP, TCP);
 15022  00285A  0E02               	movlw	2
 15023  00285C  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15024  00285E  D8D4               	call	PL118	;call to abstracted procedure
 15025  002860  64F7               	cpfsgt	tblptrh,c
 15026  002862  D00D               	bra	u11377
 15027  002864  0009               	tblrd		*+
 15028  002866  CFF5 F04B          	movff	tablat,IPv4_Start@destAddress
 15029  00286A  0009               	tblrd		*+
 15030  00286C  CFF5 F04C          	movff	tablat,IPv4_Start@destAddress+1
 15031  002870  0009               	tblrd		*+
 15032  002872  CFF5 F04D          	movff	tablat,IPv4_Start@destAddress+2
 15033  002876  0009               	tblrd		*+
 15034  002878  CFF5 F04E          	movff	tablat,IPv4_Start@destAddress+3
 15035  00287C  D00A               	bra	u11370
 15036  00287E                     u11377:
 15037  00287E  EC3C  F011         	call	PL114	;call to abstracted procedure
 15038  002882  CFEE F04B          	movff	postinc0,IPv4_Start@destAddress
 15039  002886  CFEE F04C          	movff	postinc0,IPv4_Start@destAddress+1
 15040  00288A  CFEE F04D          	movff	postinc0,IPv4_Start@destAddress+2
 15041  00288E  CFEE F04E          	movff	postinc0,IPv4_Start@destAddress+3
 15042  002892                     u11370:
 15043  002892  0E06               	movlw	6
 15044  002894  6E4F               	movwf	IPv4_Start@protocol,c
 15045  002896  EC37  F023         	call	_IPv4_Start	;wreg free
 15046  00289A  6F9D               	movwf	TCP_Snd@ret& (0+255),b
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;tcpv4.c: 258: if (ret)
 15050  00289C  519D               	movf	TCP_Snd@ret& (0+255),w,b
 15051  00289E  E03A               	bz	l8518
 15052                           
 15053                           ; BSR set to: 0
 15054                           ;tcpv4.c: 259: {
 15055                           ;tcpv4.c: 260: ETH_WriteBlock((uint8_t *) &txHeader, sizeof(tcpHeader_t));
 15056  0028A0  0EA0               	movlw	low TCP_Snd@txHeader
 15057  0028A2  6E03               	movwf	ETH_WriteBlock@data,c
 15058  0028A4  6A04               	clrf	ETH_WriteBlock@data+1,c
 15059  0028A6  D9F4               	call	PL492	;call to abstracted procedure
 15060  0028A8  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 15061                           
 15062                           ;tcpv4.c: 262: if (tcpDataLength > 0)
 15063  0028AC  0100               	movlb	0	; () banked
 15064  0028AE  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 15065  0028B0  119F               	iorwf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 15066  0028B2  E00A               	bz	l8510
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;tcpv4.c: 263: {
 15070                           ;tcpv4.c: 264: ETH_WriteBlock( data, tcpDataLength);
 15071  0028B4  C097  F003         	movff	TCP_Snd@data,ETH_WriteBlock@data
 15072  0028B8  C098  F004         	movff	TCP_Snd@data+1,ETH_WriteBlock@data+1
 15073  0028BC  C09E  F005         	movff	TCP_Snd@tcpDataLength,ETH_WriteBlock@len
 15074  0028C0  C09F  F006         	movff	TCP_Snd@tcpDataLength+1,ETH_WriteBlock@len+1
 15075  0028C4  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 15076  0028C8                     l8510:
 15077                           
 15078                           ;tcpv4.c: 265: }
 15079                           ;tcpv4.c: 267: cksm = payloadLength + TCP;
 15080  0028C8  0E06               	movlw	6
 15081  0028CA  0100               	movlb	0	; () banked
 15082  0028CC  259B               	addwf	TCP_Snd@payloadLength& (0+255),w,b
 15083  0028CE  6F99               	movwf	TCP_Snd@cksm& (0+255),b
 15084  0028D0  0E00               	movlw	0
 15085  0028D2  219C               	addwfc	(TCP_Snd@payloadLength+1)& (0+255),w,b
 15086  0028D4  6F9A               	movwf	(TCP_Snd@cksm+1)& (0+255),b
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;tcpv4.c: 269: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) - 8, payloadLength + 8, cksm);
 15090  0028D6  D9D3               	call	PL454	;call to abstracted procedure
 15091  0028D8  259B               	addwf	TCP_Snd@payloadLength& (0+255),w,b
 15092  0028DA  6E0F               	movwf	ETH_TxComputeChecksum@length,c
 15093  0028DC  0E00               	movlw	0
 15094  0028DE  219C               	addwfc	(TCP_Snd@payloadLength+1)& (0+255),w,b
 15095  0028E0  6E10               	movwf	ETH_TxComputeChecksum@length+1,c
 15096  0028E2  C099  F011         	movff	TCP_Snd@cksm,ETH_TxComputeChecksum@seed
 15097  0028E6  C09A  F012         	movff	TCP_Snd@cksm+1,ETH_TxComputeChecksum@seed+1
 15098  0028EA  EC71  F029         	call	_ETH_TxComputeChecksum	;wreg free
 15099  0028EE  C00D  F099         	movff	?_ETH_TxComputeChecksum,TCP_Snd@cksm
 15100  0028F2  C00E  F09A         	movff	?_ETH_TxComputeChecksum+1,TCP_Snd@cksm+1
 15101                           
 15102                           ;tcpv4.c: 270: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) + (int)(((char*)&((tcpHeader_t *)1)->checksum)-1));
 15103  0028F6  ECC9  F02C         	call	PL300	;call to abstracted procedure
 15104  0028FA  0E32               	movlw	50
 15105  0028FC  6E0D               	movwf	ETH_Insert@offset,c
 15106  0028FE  0E99               	movlw	TCP_Snd@cksm& (0+255)
 15107  002900  ECD0  F02D         	call	_ETH_Insert
 15108                           
 15109                           ;tcpv4.c: 272: ret = IPV4_Send(payloadLength);
 15110  002904  C09B  F01D         	movff	TCP_Snd@payloadLength,IPV4_Send@payloadLength
 15111  002908  C09C  F01E         	movff	TCP_Snd@payloadLength+1,IPV4_Send@payloadLength+1
 15112  00290C  EC98  F02C         	call	_IPV4_Send	;wreg free
 15113  002910  0100               	movlb	0	; () banked
 15114  002912  6F9D               	movwf	TCP_Snd@ret& (0+255),b
 15115  002914                     l8518:
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;tcpv4.c: 273: }
 15119                           ;tcpv4.c: 277: if (ret == 0)
 15120  002914  519D               	movf	TCP_Snd@ret& (0+255),w,b
 15121  002916  E141               	bnz	l8524
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;tcpv4.c: 278: {
 15125                           ;tcpv4.c: 281: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
 15126  002918  0E34               	movlw	52
 15127  00291A  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15128  00291C  D875               	call	PL118	;call to abstracted procedure
 15129  00291E  64F7               	cpfsgt	tblptrh,c
 15130  002920  D003               	bra	u11417
 15131  002922  0008               	tblrd		*
 15132  002924  50F5               	movf	tablat,w,c
 15133  002926  D003               	bra	u11410
 15134  002928                     u11417:
 15135  002928  EC3C  F011         	call	PL114	;call to abstracted procedure
 15136  00292C  50EF               	movf	indf0,w,c
 15137  00292E                     u11410:
 15138  00292E  0100               	movlb	0	; () banked
 15139  002930  6F69               	movwf	(??_TCP_Snd+2)& (0+255),b
 15140  002932  2B69               	incf	(??_TCP_Snd+2)& (0+255),f,b
 15141  002934  0E34               	movlw	52
 15142  002936  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15143  002938  6F6A               	movwf	(??_TCP_Snd+3)& (0+255),b
 15144  00293A  0E00               	movlw	0
 15145  00293C  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15146  00293E  6F6B               	movwf	(??_TCP_Snd+4)& (0+255),b
 15147  002940  C06A  FFF6         	movff	??_TCP_Snd+3,tblptrl
 15148  002944  C06B  FFF7         	movff	??_TCP_Snd+4,tblptrh
 15149  002948  0E00               	movlw	low (__smallconst shr (0+16))
 15150  00294A  6EF8               	movwf	tblptru,c
 15151  00294C  0E0F               	movlw	(high __ramtop+-1)
 15152  00294E  64F7               	cpfsgt	tblptrh,c
 15153  002950  D004               	bra	u11427
 15154  002952  C069  FFF5         	movff	??_TCP_Snd+2,tablat
 15155  002956  000C               	tblwt		*
 15156  002958  D004               	bra	u11420
 15157  00295A                     u11427:
 15158  00295A  EC3C  F011         	call	PL114	;call to abstracted procedure
 15159  00295E  C069  FFEF         	movff	??_TCP_Snd+2,indf0
 15160  002962                     u11420:
 15161                           
 15162                           ;tcpv4.c: 283: if (tcbPtr->timeout == 0)
 15163  002962  0E30               	movlw	48
 15164  002964  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15165  002966  0100               	movlb	0	; () banked
 15166  002968  D84F               	call	PL118	;call to abstracted procedure
 15167  00296A  64F7               	cpfsgt	tblptrh,c
 15168  00296C  D002               	bra	u11437
 15169  00296E  D882               	call	PL162	;call to abstracted procedure
 15170  002970  D003               	bra	u11430
 15171  002972                     u11437:
 15172  002972  EC3C  F011         	call	PL114	;call to abstracted procedure
 15173  002976  D892               	call	PL208	;call to abstracted procedure
 15174  002978                     u11430:
 15175  002978  0100               	movlb	0	; () banked
 15176  00297A  5169               	movf	(??_TCP_Snd+2)& (0+255),w,b
 15177  00297C  116A               	iorwf	(??_TCP_Snd+3)& (0+255),w,b
 15178  00297E  E141               	bnz	l8526
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;tcpv4.c: 284: {
 15182                           ;tcpv4.c: 285: tcbPtr->timeout = ((unsigned long)1*2);
 15183  002980  0E30               	movlw	48
 15184  002982  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15185  002984  D841               	call	PL118	;call to abstracted procedure
 15186  002986  64F7               	cpfsgt	tblptrh,c
 15187  002988  D003               	bra	u11457
 15188  00298A  ECE5  F011         	call	PL170	;call to abstracted procedure
 15189  00298E  D004               	bra	u11450
 15190  002990                     u11457:
 15191  002990  EC3C  F011         	call	PL114	;call to abstracted procedure
 15192  002994  EC35  F012         	call	PL318	;call to abstracted procedure
 15193  002998                     u11450:
 15194  002998  D034               	goto	l8526
 15195  00299A                     l8524:
 15196                           
 15197                           ; BSR set to: 0
 15198                           ;tcpv4.c: 288: else
 15199                           ;tcpv4.c: 289: {
 15200                           ;tcpv4.c: 291: tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
 15201  00299A  0E10               	movlw	16
 15202  00299C  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15203  00299E  D834               	call	PL118	;call to abstracted procedure
 15204  0029A0  64F7               	cpfsgt	tblptrh,c
 15205  0029A2  D003               	bra	u11467
 15206  0029A4  D867               	call	PL162	;call to abstracted procedure
 15207  0029A6  D895               	call	PL252	;call to abstracted procedure
 15208  0029A8  D004               	bra	u11460
 15209  0029AA                     u11467:
 15210  0029AA  EC3C  F011         	call	PL114	;call to abstracted procedure
 15211  0029AE  D876               	call	PL208	;call to abstracted procedure
 15212  0029B0  D92E               	call	PL332	;call to abstracted procedure
 15213  0029B2                     u11460:
 15214  0029B2  0100               	movlb	0	; () banked
 15215  0029B4  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 15216  0029B6  2569               	addwf	(??_TCP_Snd+2)& (0+255),w,b
 15217  0029B8  6F6D               	movwf	(??_TCP_Snd+6)& (0+255),b
 15218  0029BA  519F               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 15219  0029BC  216A               	addwfc	(??_TCP_Snd+3)& (0+255),w,b
 15220  0029BE  6F6E               	movwf	(??_TCP_Snd+7)& (0+255),b
 15221  0029C0  0E00               	movlw	0
 15222  0029C2  216B               	addwfc	(??_TCP_Snd+4)& (0+255),w,b
 15223  0029C4  6F6F               	movwf	(??_TCP_Snd+8)& (0+255),b
 15224  0029C6  0E00               	movlw	0
 15225  0029C8  216C               	addwfc	(??_TCP_Snd+5)& (0+255),w,b
 15226  0029CA  6F70               	movwf	(??_TCP_Snd+9)& (0+255),b
 15227  0029CC  0E10               	movlw	16
 15228  0029CE  D859               	call	PL190	;call to abstracted procedure
 15229  0029D0  64F7               	cpfsgt	tblptrh,c
 15230  0029D2  D00D               	bra	u11477
 15231  0029D4  C06D  FFF5         	movff	??_TCP_Snd+6,tablat
 15232  0029D8  000D               	tblwt		*+
 15233  0029DA  C06E  FFF5         	movff	??_TCP_Snd+7,tablat
 15234  0029DE  000D               	tblwt		*+
 15235  0029E0  C06F  FFF5         	movff	??_TCP_Snd+8,tablat
 15236  0029E4  000D               	tblwt		*+
 15237  0029E6  C070  FFF5         	movff	??_TCP_Snd+9,tablat
 15238  0029EA  000C               	tblwt		*
 15239  0029EC  D00A               	bra	u11470
 15240  0029EE                     u11477:
 15241  0029EE  EC3C  F011         	call	PL114	;call to abstracted procedure
 15242  0029F2  C06D  FFEE         	movff	??_TCP_Snd+6,postinc0
 15243  0029F6  C06E  FFEE         	movff	??_TCP_Snd+7,postinc0
 15244  0029FA  C06F  FFEE         	movff	??_TCP_Snd+8,postinc0
 15245  0029FE  C070  FFEF         	movff	??_TCP_Snd+9,indf0
 15246  002A02                     u11470:
 15247  002A02                     l8526:
 15248                           
 15249                           ;tcpv4.c: 293: }
 15250                           ;tcpv4.c: 295: return ret;
 15251  002A02  0100               	movlb	0	; () banked
 15252  002A04  519D               	movf	TCP_Snd@ret& (0+255),w,b
 15253                           
 15254                           ; BSR set to: 0
 15255  002A06  0012               	return		;funcret
 15256  002A08                     __end_of_TCP_Snd:
 15257                           	opt stack 0
 15258  002A08                     PL118:
 15259                           	opt stack 18
 15260  002A08  6F67               	movwf	??_TCP_Snd& (0+255),b
 15261  002A0A  0E00               	movlw	0
 15262  002A0C  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15263  002A0E  6F68               	movwf	(??_TCP_Snd+1)& (0+255),b
 15264  002A10  C067  FFF6         	movff	??_TCP_Snd,tblptrl
 15265  002A14  C068  FFF7         	movff	??_TCP_Snd+1,tblptrh
 15266  002A18  0E00               	movlw	low (__smallconst shr (0+16))
 15267  002A1A  6EF8               	movwf	tblptru,c
 15268  002A1C  0E0F               	movlw	(high __ramtop+-1)
 15269  002A1E  0012               	return	
 15270  002A20                     __end_ofPL118:
 15271                           	opt stack 0
 15272  002A20                     PL156:
 15273                           	opt stack 18
 15274  002A20  0100               	movlb	0	; () banked
 15275  002A22  6B8B               	clrf	(??_TCP_Snd+36)& (0+255),b
 15276  002A24  6B8C               	clrf	(??_TCP_Snd+37)& (0+255),b
 15277  002A26  6B8D               	clrf	(??_TCP_Snd+38)& (0+255),b
 15278  002A28  518A               	movf	(??_TCP_Snd+35)& (0+255),w,b
 15279  002A2A  6F8E               	movwf	(??_TCP_Snd+39)& (0+255),b
 15280  002A2C  0E19               	movlw	25
 15281  002A2E  D005               	goto	u11100
 15282  002A30                     u11105:
 15283  002A30  90D8               	bcf	status,0,c
 15284  002A32  338E               	rrcf	(??_TCP_Snd+39)& (0+255),f,b
 15285  002A34  338D               	rrcf	(??_TCP_Snd+38)& (0+255),f,b
 15286  002A36  338C               	rrcf	(??_TCP_Snd+37)& (0+255),f,b
 15287  002A38  338B               	rrcf	(??_TCP_Snd+36)& (0+255),f,b
 15288  002A3A                     u11100:
 15289  002A3A  2EE8               	decfsz	wreg,f,c
 15290  002A3C  D7F9               	goto	u11105
 15291  002A3E  5181               	movf	(??_TCP_Snd+26)& (0+255),w,b
 15292  002A40  118B               	iorwf	(??_TCP_Snd+36)& (0+255),w,b
 15293  002A42  6F8F               	movwf	(??_TCP_Snd+40)& (0+255),b
 15294  002A44  5182               	movf	(??_TCP_Snd+27)& (0+255),w,b
 15295  002A46  118C               	iorwf	(??_TCP_Snd+37)& (0+255),w,b
 15296  002A48  6F90               	movwf	(??_TCP_Snd+41)& (0+255),b
 15297  002A4A  5183               	movf	(??_TCP_Snd+28)& (0+255),w,b
 15298  002A4C  118D               	iorwf	(??_TCP_Snd+38)& (0+255),w,b
 15299  002A4E  6F91               	movwf	(??_TCP_Snd+42)& (0+255),b
 15300  002A50  5184               	movf	(??_TCP_Snd+29)& (0+255),w,b
 15301  002A52  118E               	iorwf	(??_TCP_Snd+39)& (0+255),w,b
 15302  002A54  6F92               	movwf	(??_TCP_Snd+43)& (0+255),b
 15303  002A56  5177               	movf	(??_TCP_Snd+16)& (0+255),w,b
 15304  002A58  118F               	iorwf	(??_TCP_Snd+40)& (0+255),w,b
 15305  002A5A  6F93               	movwf	(??_TCP_Snd+44)& (0+255),b
 15306  002A5C  5178               	movf	(??_TCP_Snd+17)& (0+255),w,b
 15307  002A5E  1190               	iorwf	(??_TCP_Snd+41)& (0+255),w,b
 15308  002A60  6F94               	movwf	(??_TCP_Snd+45)& (0+255),b
 15309  002A62  5179               	movf	(??_TCP_Snd+18)& (0+255),w,b
 15310  002A64  1191               	iorwf	(??_TCP_Snd+42)& (0+255),w,b
 15311  002A66  6F95               	movwf	(??_TCP_Snd+46)& (0+255),b
 15312  002A68  517A               	movf	(??_TCP_Snd+19)& (0+255),w,b
 15313  002A6A  1192               	iorwf	(??_TCP_Snd+43)& (0+255),w,b
 15314  002A6C  6F96               	movwf	(??_TCP_Snd+47)& (0+255),b
 15315  002A6E  516D               	movf	(??_TCP_Snd+6)& (0+255),w,b
 15316  002A70  1193               	iorwf	(??_TCP_Snd+44)& (0+255),w,b
 15317  002A72  0012               	return	
 15318  002A74                     __end_ofPL156:
 15319                           	opt stack 0
 15320  002A74                     PL162:
 15321                           	opt stack 18
 15322  002A74  0009               	tblrd		*+
 15323  002A76  CFF5 F069          	movff	tablat,??_TCP_Snd+2
 15324  002A7A  0009               	tblrd		*+
 15325  002A7C  CFF5 F06A          	movff	tablat,??_TCP_Snd+3
 15326  002A80  0012               	return	
 15327  002A82                     __end_ofPL162:
 15328                           	opt stack 0
 15329  002A82                     PL190:
 15330                           	opt stack 18
 15331  002A82  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15332  002A84  6F71               	movwf	(??_TCP_Snd+10)& (0+255),b
 15333  002A86  0E00               	movlw	0
 15334  002A88  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15335  002A8A  6F72               	movwf	(??_TCP_Snd+11)& (0+255),b
 15336  002A8C  C071  FFF6         	movff	??_TCP_Snd+10,tblptrl
 15337  002A90  C072  FFF7         	movff	??_TCP_Snd+11,tblptrh
 15338  002A94  0E00               	movlw	low (__smallconst shr (0+16))
 15339  002A96  6EF8               	movwf	tblptru,c
 15340  002A98  0E0F               	movlw	(high __ramtop+-1)
 15341  002A9A  0012               	return	
 15342  002A9C                     __end_ofPL190:
 15343                           	opt stack 0
 15344  002A9C                     PL208:
 15345                           	opt stack 18
 15346  002A9C  CFEE F069          	movff	postinc0,??_TCP_Snd+2
 15347  002AA0  CFEE F06A          	movff	postinc0,??_TCP_Snd+3
 15348  002AA4  0012               	return	
 15349  002AA6                     __end_ofPL208:
 15350                           	opt stack 0
 15351  002AA6                     PL228:
 15352                           	opt stack 18
 15353  002AA6  0E25               	movlw	37
 15354  002AA8  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15355  002AAA  0100               	movlb	0	; () banked
 15356  002AAC  0012               	return	
 15357  002AAE                     __end_ofPL228:
 15358                           	opt stack 0
 15359  002AAE                     PL232:
 15360                           	opt stack 18
 15361  002AAE  0E27               	movlw	39
 15362  002AB0  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15363  002AB2  0100               	movlb	0	; () banked
 15364  002AB4  0012               	return	
 15365  002AB6                     __end_ofPL232:
 15366                           	opt stack 0
 15367  002AB6                     PL242:
 15368                           	opt stack 18
 15369  002AB6  C07E  F07D         	movff	??_TCP_Snd+23,??_TCP_Snd+22
 15370  002ABA  C07F  F07E         	movff	??_TCP_Snd+24,??_TCP_Snd+23
 15371  002ABE  C080  F07F         	movff	??_TCP_Snd+25,??_TCP_Snd+24
 15372  002AC2  0100               	movlb	0	; () banked
 15373  002AC4  6B80               	clrf	(??_TCP_Snd+25)& (0+255),b
 15374  002AC6  6B81               	clrf	(??_TCP_Snd+26)& (0+255),b
 15375  002AC8  517E               	movf	(??_TCP_Snd+23)& (0+255),w,b
 15376  002ACA  6F82               	movwf	(??_TCP_Snd+27)& (0+255),b
 15377  002ACC  6B83               	clrf	(??_TCP_Snd+28)& (0+255),b
 15378  002ACE  6B84               	clrf	(??_TCP_Snd+29)& (0+255),b
 15379  002AD0  0012               	return	
 15380  002AD2                     __end_ofPL242:
 15381                           	opt stack 0
 15382  002AD2                     PL252:
 15383                           	opt stack 18
 15384  002AD2  0009               	tblrd		*+
 15385  002AD4  CFF5 F06B          	movff	tablat,??_TCP_Snd+4
 15386  002AD8  0009               	tblrd		*+
 15387  002ADA  CFF5 F06C          	movff	tablat,??_TCP_Snd+5
 15388  002ADE  0012               	return	
 15389  002AE0                     __end_ofPL252:
 15390                           	opt stack 0
 15391  002AE0                     PL256:
 15392                           	opt stack 18
 15393  002AE0  0100               	movlb	0	; () banked
 15394  002AE2  6B77               	clrf	(??_TCP_Snd+16)& (0+255),b
 15395  002AE4  5174               	movf	(??_TCP_Snd+13)& (0+255),w,b
 15396  002AE6  6F78               	movwf	(??_TCP_Snd+17)& (0+255),b
 15397  002AE8  6B79               	clrf	(??_TCP_Snd+18)& (0+255),b
 15398  002AEA  6B7A               	clrf	(??_TCP_Snd+19)& (0+255),b
 15399  002AEC  C079  F07A         	movff	??_TCP_Snd+18,??_TCP_Snd+19
 15400  002AF0  C078  F079         	movff	??_TCP_Snd+17,??_TCP_Snd+18
 15401  002AF4  C077  F078         	movff	??_TCP_Snd+16,??_TCP_Snd+17
 15402  002AF8  6B77               	clrf	(??_TCP_Snd+16)& (0+255),b
 15403  002AFA  0012               	return	
 15404  002AFC                     __end_ofPL256:
 15405                           	opt stack 0
 15406  002AFC                     PL258:
 15407                           	opt stack 18
 15408  002AFC  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15409  002AFE  6F6D               	movwf	(??_TCP_Snd+6)& (0+255),b
 15410  002B00  0E00               	movlw	0
 15411  002B02  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15412  002B04  6F6E               	movwf	(??_TCP_Snd+7)& (0+255),b
 15413  002B06  C06D  FFF6         	movff	??_TCP_Snd+6,tblptrl
 15414  002B0A  C06E  FFF7         	movff	??_TCP_Snd+7,tblptrh
 15415  002B0E  0E00               	movlw	low (__smallconst shr (0+16))
 15416  002B10  6EF8               	movwf	tblptru,c
 15417  002B12  0E0F               	movlw	(high __ramtop+-1)
 15418  002B14  0012               	return	
 15419  002B16                     __end_ofPL258:
 15420                           	opt stack 0
 15421  002B16                     PL260:
 15422                           	opt stack 18
 15423  002B16  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15424  002B18  6F7B               	movwf	(??_TCP_Snd+20)& (0+255),b
 15425  002B1A  0E00               	movlw	0
 15426  002B1C  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15427  002B1E  6F7C               	movwf	(??_TCP_Snd+21)& (0+255),b
 15428  002B20  C07B  FFF6         	movff	??_TCP_Snd+20,tblptrl
 15429  002B24  C07C  FFF7         	movff	??_TCP_Snd+21,tblptrh
 15430  002B28  0E00               	movlw	low (__smallconst shr (0+16))
 15431  002B2A  6EF8               	movwf	tblptru,c
 15432  002B2C  0E0F               	movlw	(high __ramtop+-1)
 15433  002B2E  0012               	return	
 15434  002B30                     __end_ofPL260:
 15435                           	opt stack 0
 15436  002B30                     PL264:
 15437                           	opt stack 18
 15438  002B30  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15439  002B32  6F85               	movwf	(??_TCP_Snd+30)& (0+255),b
 15440  002B34  0E00               	movlw	0
 15441  002B36  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15442  002B38  6F86               	movwf	(??_TCP_Snd+31)& (0+255),b
 15443  002B3A  C085  FFF6         	movff	??_TCP_Snd+30,tblptrl
 15444  002B3E  C086  FFF7         	movff	??_TCP_Snd+31,tblptrh
 15445  002B42  0E00               	movlw	low (__smallconst shr (0+16))
 15446  002B44  6EF8               	movwf	tblptru,c
 15447  002B46  0E0F               	movlw	(high __ramtop+-1)
 15448  002B48  0012               	return	
 15449  002B4A                     __end_ofPL264:
 15450                           	opt stack 0
 15451  002B4A                     PL266:
 15452                           	opt stack 18
 15453  002B4A  0009               	tblrd		*+
 15454  002B4C  CFF5 F073          	movff	tablat,??_TCP_Snd+12
 15455  002B50  0009               	tblrd		*+
 15456  002B52  CFF5 F074          	movff	tablat,??_TCP_Snd+13
 15457  002B56  0009               	tblrd		*+
 15458  002B58  CFF5 F075          	movff	tablat,??_TCP_Snd+14
 15459  002B5C  0009               	tblrd		*+
 15460  002B5E  CFF5 F076          	movff	tablat,??_TCP_Snd+15
 15461  002B62  0012               	return	
 15462  002B64                     __end_ofPL266:
 15463                           	opt stack 0
 15464  002B64                     PL268:
 15465                           	opt stack 18
 15466  002B64  0009               	tblrd		*+
 15467  002B66  CFF5 F07D          	movff	tablat,??_TCP_Snd+22
 15468  002B6A  0009               	tblrd		*+
 15469  002B6C  CFF5 F07E          	movff	tablat,??_TCP_Snd+23
 15470  002B70  0009               	tblrd		*+
 15471  002B72  CFF5 F07F          	movff	tablat,??_TCP_Snd+24
 15472  002B76  0009               	tblrd		*+
 15473  002B78  CFF5 F080          	movff	tablat,??_TCP_Snd+25
 15474  002B7C  0012               	return	
 15475  002B7E                     __end_ofPL268:
 15476                           	opt stack 0
 15477  002B7E                     PL270:
 15478                           	opt stack 18
 15479  002B7E  0009               	tblrd		*+
 15480  002B80  CFF5 F087          	movff	tablat,??_TCP_Snd+32
 15481  002B84  0009               	tblrd		*+
 15482  002B86  CFF5 F088          	movff	tablat,??_TCP_Snd+33
 15483  002B8A  0009               	tblrd		*+
 15484  002B8C  CFF5 F089          	movff	tablat,??_TCP_Snd+34
 15485  002B90  0009               	tblrd		*+
 15486  002B92  CFF5 F08A          	movff	tablat,??_TCP_Snd+35
 15487  002B96  0012               	return	
 15488  002B98                     __end_ofPL270:
 15489                           	opt stack 0
 15490  002B98                     PL274:
 15491                           	opt stack 18
 15492  002B98  2458               	addwf	TCP_Snd@tcbPtr,w,c
 15493  002B9A  6F6B               	movwf	(??_TCP_Snd+4)& (0+255),b
 15494  002B9C  0E00               	movlw	0
 15495  002B9E  2059               	addwfc	TCP_Snd@tcbPtr+1,w,c
 15496  002BA0  6F6C               	movwf	(??_TCP_Snd+5)& (0+255),b
 15497  002BA2  C06B  FFF6         	movff	??_TCP_Snd+4,tblptrl
 15498  002BA6  C06C  FFF7         	movff	??_TCP_Snd+5,tblptrh
 15499  002BAA  0E00               	movlw	low (__smallconst shr (0+16))
 15500  002BAC  6EF8               	movwf	tblptru,c
 15501  002BAE  0E0F               	movlw	(high __ramtop+-1)
 15502  002BB0  0012               	return	
 15503  002BB2                     __end_ofPL274:
 15504                           	opt stack 0
 15505  002BB2                     PL280:
 15506                           	opt stack 18
 15507  002BB2  0100               	movlb	0	; () banked
 15508  002BB4  5169               	movf	(??_TCP_Snd+2)& (0+255),w,b
 15509  002BB6  6F6D               	movwf	(??_TCP_Snd+6)& (0+255),b
 15510  002BB8  6B6E               	clrf	(??_TCP_Snd+7)& (0+255),b
 15511  002BBA  6B6F               	clrf	(??_TCP_Snd+8)& (0+255),b
 15512  002BBC  6B70               	clrf	(??_TCP_Snd+9)& (0+255),b
 15513  002BBE  C06D  F070         	movff	??_TCP_Snd+6,??_TCP_Snd+9
 15514  002BC2  6B6F               	clrf	(??_TCP_Snd+8)& (0+255),b
 15515  002BC4  6B6E               	clrf	(??_TCP_Snd+7)& (0+255),b
 15516  002BC6  6B6D               	clrf	(??_TCP_Snd+6)& (0+255),b
 15517  002BC8  0012               	return	
 15518  002BCA                     __end_ofPL280:
 15519                           	opt stack 0
 15520  002BCA                     PL306:
 15521                           	opt stack 18
 15522  002BCA  0009               	tblrd		*+
 15523  002BCC  CFF5 F09E          	movff	tablat,TCP_Snd@tcpDataLength
 15524  002BD0  0009               	tblrd		*+
 15525  002BD2  CFF5 F09F          	movff	tablat,TCP_Snd@tcpDataLength+1
 15526  002BD6  0012               	return	
 15527  002BD8                     __end_ofPL306:
 15528                           	opt stack 0
 15529  002BD8                     PL312:
 15530                           	opt stack 18
 15531  002BD8  CFEE F073          	movff	postinc0,??_TCP_Snd+12
 15532  002BDC  CFEE F074          	movff	postinc0,??_TCP_Snd+13
 15533  002BE0  CFEE F075          	movff	postinc0,??_TCP_Snd+14
 15534  002BE4  CFEE F076          	movff	postinc0,??_TCP_Snd+15
 15535  002BE8  0012               	return	
 15536  002BEA                     __end_ofPL312:
 15537                           	opt stack 0
 15538  002BEA                     PL314:
 15539                           	opt stack 18
 15540  002BEA  CFEE F07D          	movff	postinc0,??_TCP_Snd+22
 15541  002BEE  CFEE F07E          	movff	postinc0,??_TCP_Snd+23
 15542  002BF2  CFEE F07F          	movff	postinc0,??_TCP_Snd+24
 15543  002BF6  CFEE F080          	movff	postinc0,??_TCP_Snd+25
 15544  002BFA  0012               	return	
 15545  002BFC                     __end_ofPL314:
 15546                           	opt stack 0
 15547  002BFC                     PL316:
 15548                           	opt stack 18
 15549  002BFC  CFEE F087          	movff	postinc0,??_TCP_Snd+32
 15550  002C00  CFEE F088          	movff	postinc0,??_TCP_Snd+33
 15551  002C04  CFEE F089          	movff	postinc0,??_TCP_Snd+34
 15552  002C08  CFEE F08A          	movff	postinc0,??_TCP_Snd+35
 15553  002C0C  0012               	return	
 15554  002C0E                     __end_ofPL316:
 15555                           	opt stack 0
 15556  002C0E                     PL332:
 15557                           	opt stack 18
 15558  002C0E  CFEE F06B          	movff	postinc0,??_TCP_Snd+4
 15559  002C12  CFEE F06C          	movff	postinc0,??_TCP_Snd+5
 15560  002C16  0012               	return	
 15561  002C18                     __end_ofPL332:
 15562                           	opt stack 0
 15563  002C18                     PL334:
 15564                           	opt stack 18
 15565  002C18  C070  F06F         	movff	??_TCP_Snd+9,??_TCP_Snd+8
 15566  002C1C  0100               	movlb	0	; () banked
 15567  002C1E  6B70               	clrf	(??_TCP_Snd+9)& (0+255),b
 15568  002C20  6B70               	clrf	(??_TCP_Snd+9)& (0+255),b
 15569  002C22  516B               	movf	(??_TCP_Snd+4)& (0+255),w,b
 15570  002C24  116F               	iorwf	(??_TCP_Snd+8)& (0+255),w,b
 15571  002C26  0012               	return	
 15572  002C28                     __end_ofPL334:
 15573                           	opt stack 0
 15574  002C28                     PL358:
 15575                           	opt stack 18
 15576  002C28  C058  FFF6         	movff	TCP_Snd@tcbPtr,tblptrl
 15577  002C2C  C059  FFF7         	movff	TCP_Snd@tcbPtr+1,tblptrh
 15578  002C30  0E00               	movlw	low (__smallconst shr (0+16))
 15579  002C32  6EF8               	movwf	tblptru,c
 15580  002C34  0E0F               	movlw	(high __ramtop+-1)
 15581  002C36  0012               	return	
 15582  002C38                     __end_ofPL358:
 15583                           	opt stack 0
 15584  002C38                     PL360:
 15585                           	opt stack 18
 15586  002C38  C069  FFF5         	movff	??_TCP_Snd+2,tablat
 15587  002C3C  000D               	tblwt		*+
 15588  002C3E  C06A  FFF5         	movff	??_TCP_Snd+3,tablat
 15589  002C42  000C               	tblwt		*
 15590  002C44  0012               	return	
 15591  002C46                     __end_ofPL360:
 15592                           	opt stack 0
 15593  002C46                     PL366:
 15594                           	opt stack 18
 15595  002C46  0009               	tblrd		*+
 15596  002C48  CFF5 F06F          	movff	tablat,??_TCP_Snd+8
 15597  002C4C  0009               	tblrd		*+
 15598  002C4E  CFF5 F070          	movff	tablat,??_TCP_Snd+9
 15599  002C52  0012               	return	
 15600  002C54                     __end_ofPL366:
 15601                           	opt stack 0
 15602  002C54                     PL390:
 15603                           	opt stack 18
 15604  002C54  CFEE F09E          	movff	postinc0,TCP_Snd@tcpDataLength
 15605  002C58  CFEE F09F          	movff	postinc0,TCP_Snd@tcpDataLength+1
 15606  002C5C  0012               	return	
 15607  002C5E                     __end_ofPL390:
 15608                           	opt stack 0
 15609  002C5E                     PL396:
 15610                           	opt stack 18
 15611  002C5E  0100               	movlb	0	; () banked
 15612  002C60  519E               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 15613  002C62  5D69               	subwf	(??_TCP_Snd+2)& (0+255),w,b
 15614  002C64  519F               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 15615  002C66  596A               	subwfb	(??_TCP_Snd+3)& (0+255),w,b
 15616  002C68  0012               	return	
 15617  002C6A                     __end_ofPL396:
 15618                           	opt stack 0
 15619  002C6A                     PL418:
 15620                           	opt stack 18
 15621  002C6A  0100               	movlb	0	; () banked
 15622  002C6C  5169               	movf	(??_TCP_Snd+2)& (0+255),w,b
 15623  002C6E  6F6C               	movwf	(??_TCP_Snd+5)& (0+255),b
 15624  002C70  6B6B               	clrf	(??_TCP_Snd+4)& (0+255),b
 15625  002C72  0012               	return	
 15626  002C74                     __end_ofPL418:
 15627                           	opt stack 0
 15628  002C74                     PL422:
 15629                           	opt stack 18
 15630  002C74  CFEE F06F          	movff	postinc0,??_TCP_Snd+8
 15631  002C78  CFEE F070          	movff	postinc0,??_TCP_Snd+9
 15632  002C7C  0012               	return	
 15633  002C7E                     __end_ofPL422:
 15634                           	opt stack 0
 15635  002C7E                     PL454:
 15636                           	opt stack 15
 15637  002C7E  6A0E               	clrf	ETH_TxComputeChecksum@position+1,c
 15638  002C80  0E1A               	movlw	26
 15639  002C82  6E0D               	movwf	ETH_TxComputeChecksum@position,c
 15640  002C84  0C08               	retlw	8
 15641  002C86                     __end_ofPL454:
 15642                           	opt stack 0
 15643  002C86                     PL458:
 15644                           	opt stack 18
 15645  002C86  C069  FFEE         	movff	??_TCP_Snd+2,postinc0
 15646  002C8A  C06A  FFEF         	movff	??_TCP_Snd+3,indf0
 15647  002C8E  0012               	return	
 15648  002C90                     __end_ofPL458:
 15649                           	opt stack 0
 15650  002C90                     PL492:
 15651                           	opt stack 15
 15652  002C90  6A06               	clrf	ETH_WriteBlock@len+1,c
 15653  002C92  0E14               	movlw	20
 15654  002C94  6E05               	movwf	ETH_WriteBlock@len,c
 15655  002C96  0C14               	retlw	20
 15656  002C98                     __end_ofPL492:
 15657                           	opt stack 0
 15658                           tosu	equ	0xFFF
 15659                           tosh	equ	0xFFE
 15660                           tosl	equ	0xFFD
 15661                           pclath	equ	0xFFA
 15662                           tblptru	equ	0xFF8
 15663                           tblptrh	equ	0xFF7
 15664                           tblptrl	equ	0xFF6
 15665                           tablat	equ	0xFF5
 15666                           prodh	equ	0xFF4
 15667                           prodl	equ	0xFF3
 15668                           intcon	equ	0xFF2
 15669                           intcon2	equ	0xFF1
 15670                           indf0	equ	0xFEF
 15671                           postinc0	equ	0xFEE
 15672                           fsr0h	equ	0xFEA
 15673                           fsr0l	equ	0xFE9
 15674                           wreg	equ	0xFE8
 15675                           postinc1	equ	0xFE6
 15676                           plusw1	equ	0xFE3
 15677                           fsr1h	equ	0xFE2
 15678                           fsr1l	equ	0xFE1
 15679                           bsr	equ	0xFE0
 15680                           indf2	equ	0xFDF
 15681                           postinc2	equ	0xFDE
 15682                           postdec2	equ	0xFDD
 15683                           plusw2	equ	0xFDB
 15684                           fsr2h	equ	0xFDA
 15685                           fsr2l	equ	0xFD9
 15686                           status	equ	0xFD8
 15687                           
 15688 ;; *************** function _TCB_Reset *****************
 15689 ;; Defined at:
 15690 ;;		line 134 in file "../../TCPIP Library/source/tcpv4.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;  tcbPtr          2    1[COMRAM] PTR struct .
 15693 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 15694 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 15695 ;; Auto vars:     Size  Location     Type
 15696 ;;		None
 15697 ;; Return value:  Size  Location     Type
 15698 ;;		None               void
 15699 ;; Registers used:
 15700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 15701 ;; Tracked objects:
 15702 ;;		On entry : F/0
 15703 ;;		On exit  : 0/0
 15704 ;;		Unchanged: 0/0
 15705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15709 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15710 ;;Total ram usage:        4 bytes
 15711 ;; Hardware stack levels used:    1
 15712 ;; Hardware stack levels required when called:    3
 15713 ;; This function calls:
 15714 ;;		Nothing
 15715 ;; This function is called by:
 15716 ;;		_TCP_FiniteStateMachine
 15717 ;; This function uses a non-reentrant model
 15718 ;;
 15719                           
 15720                           	psect	text52
 15721  0047F4                     __ptext52:
 15722                           	opt stack 0
 15723  0047F4                     _TCB_Reset:
 15724                           	opt stack 24
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;tcpv4.c: 136: tcbPtr->destIP = 0;
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;incstack = 0
 15731  0047F4  0E02               	movlw	2
 15732  0047F6  D8A6               	call	PL126	;call to abstracted procedure
 15733  0047F8  64F7               	cpfsgt	tblptrh,c
 15734  0047FA  D007               	bra	u11607
 15735  0047FC  6AF5               	clrf	tablat,c
 15736  0047FE  000D               	tblwt		*+
 15737  004800  6AF5               	clrf	tablat,c
 15738  004802  000D               	tblwt		*+
 15739  004804  ECAB  F011         	call	PL150	;call to abstracted procedure
 15740  004808  D004               	bra	u11600
 15741  00480A                     u11607:
 15742  00480A  EC3C  F011         	call	PL114	;call to abstracted procedure
 15743  00480E  ECF0  F011         	call	PL180	;call to abstracted procedure
 15744  004812                     u11600:
 15745                           
 15746                           ;tcpv4.c: 137: tcbPtr->destPort = 0;
 15747  004812  0E06               	movlw	6
 15748  004814  D897               	call	PL126	;call to abstracted procedure
 15749  004816  64F7               	cpfsgt	tblptrh,c
 15750  004818  D003               	bra	u11617
 15751  00481A  ECAB  F011         	call	PL150	;call to abstracted procedure
 15752  00481E  D004               	bra	u11610
 15753  004820                     u11617:
 15754  004820  EC3C  F011         	call	PL114	;call to abstracted procedure
 15755  004824  6AEE               	clrf	postinc0,c
 15756  004826  6AEF               	clrf	indf0,c
 15757  004828                     u11610:
 15758                           
 15759                           ;tcpv4.c: 138: tcbPtr->localSeqno = 0;
 15760  004828  0E10               	movlw	16
 15761  00482A  D88C               	call	PL126	;call to abstracted procedure
 15762  00482C  64F7               	cpfsgt	tblptrh,c
 15763  00482E  D007               	bra	u11627
 15764  004830  6AF5               	clrf	tablat,c
 15765  004832  000D               	tblwt		*+
 15766  004834  6AF5               	clrf	tablat,c
 15767  004836  000D               	tblwt		*+
 15768  004838  ECAB  F011         	call	PL150	;call to abstracted procedure
 15769  00483C  D004               	bra	u11620
 15770  00483E                     u11627:
 15771  00483E  EC3C  F011         	call	PL114	;call to abstracted procedure
 15772  004842  ECF0  F011         	call	PL180	;call to abstracted procedure
 15773  004846                     u11620:
 15774                           
 15775                           ;tcpv4.c: 139: tcbPtr->localLastAck = 0;
 15776  004846  0E14               	movlw	20
 15777  004848  D87D               	call	PL126	;call to abstracted procedure
 15778  00484A  64F7               	cpfsgt	tblptrh,c
 15779  00484C  D007               	bra	u11637
 15780  00484E  6AF5               	clrf	tablat,c
 15781  004850  000D               	tblwt		*+
 15782  004852  6AF5               	clrf	tablat,c
 15783  004854  000D               	tblwt		*+
 15784  004856  ECAB  F011         	call	PL150	;call to abstracted procedure
 15785  00485A  D004               	bra	u11630
 15786  00485C                     u11637:
 15787  00485C  EC3C  F011         	call	PL114	;call to abstracted procedure
 15788  004860  ECF0  F011         	call	PL180	;call to abstracted procedure
 15789  004864                     u11630:
 15790                           
 15791                           ;tcpv4.c: 140: tcbPtr->remoteSeqno = 0;
 15792  004864  0E08               	movlw	8
 15793  004866  D86E               	call	PL126	;call to abstracted procedure
 15794  004868  64F7               	cpfsgt	tblptrh,c
 15795  00486A  D007               	bra	u11647
 15796  00486C  6AF5               	clrf	tablat,c
 15797  00486E  000D               	tblwt		*+
 15798  004870  6AF5               	clrf	tablat,c
 15799  004872  000D               	tblwt		*+
 15800  004874  ECAB  F011         	call	PL150	;call to abstracted procedure
 15801  004878  D004               	bra	u11640
 15802  00487A                     u11647:
 15803  00487A  EC3C  F011         	call	PL114	;call to abstracted procedure
 15804  00487E  ECF0  F011         	call	PL180	;call to abstracted procedure
 15805  004882                     u11640:
 15806                           
 15807                           ;tcpv4.c: 141: tcbPtr->remoteAck = 0;
 15808  004882  0E0C               	movlw	12
 15809  004884  D85F               	call	PL126	;call to abstracted procedure
 15810  004886  64F7               	cpfsgt	tblptrh,c
 15811  004888  D007               	bra	u11657
 15812  00488A  6AF5               	clrf	tablat,c
 15813  00488C  000D               	tblwt		*+
 15814  00488E  6AF5               	clrf	tablat,c
 15815  004890  000D               	tblwt		*+
 15816  004892  ECAB  F011         	call	PL150	;call to abstracted procedure
 15817  004896  D004               	bra	u11650
 15818  004898                     u11657:
 15819  004898  EC3C  F011         	call	PL114	;call to abstracted procedure
 15820  00489C  ECF0  F011         	call	PL180	;call to abstracted procedure
 15821  0048A0                     u11650:
 15822                           
 15823                           ;tcpv4.c: 142: tcbPtr->remoteWnd = 0;
 15824  0048A0  0E18               	movlw	24
 15825  0048A2  D850               	call	PL126	;call to abstracted procedure
 15826  0048A4  64F7               	cpfsgt	tblptrh,c
 15827  0048A6  D003               	bra	u11667
 15828  0048A8  ECAB  F011         	call	PL150	;call to abstracted procedure
 15829  0048AC  D004               	bra	u11660
 15830  0048AE                     u11667:
 15831  0048AE  EC3C  F011         	call	PL114	;call to abstracted procedure
 15832  0048B2  6AEE               	clrf	postinc0,c
 15833  0048B4  6AEF               	clrf	indf0,c
 15834  0048B6                     u11660:
 15835                           
 15836                           ;tcpv4.c: 144: tcbPtr->timeout = 0;
 15837  0048B6  0E30               	movlw	48
 15838  0048B8  D845               	call	PL126	;call to abstracted procedure
 15839  0048BA  64F7               	cpfsgt	tblptrh,c
 15840  0048BC  D003               	bra	u11677
 15841  0048BE  ECAB  F011         	call	PL150	;call to abstracted procedure
 15842  0048C2  D004               	bra	u11670
 15843  0048C4                     u11677:
 15844  0048C4  EC3C  F011         	call	PL114	;call to abstracted procedure
 15845  0048C8  6AEE               	clrf	postinc0,c
 15846  0048CA  6AEF               	clrf	indf0,c
 15847  0048CC                     u11670:
 15848                           
 15849                           ;tcpv4.c: 145: tcbPtr->timeoutReloadValue = 0;
 15850  0048CC  0E32               	movlw	50
 15851  0048CE  D83A               	call	PL126	;call to abstracted procedure
 15852  0048D0  64F7               	cpfsgt	tblptrh,c
 15853  0048D2  D003               	bra	u11687
 15854  0048D4  ECAB  F011         	call	PL150	;call to abstracted procedure
 15855  0048D8  D004               	bra	u11680
 15856  0048DA                     u11687:
 15857  0048DA  EC3C  F011         	call	PL114	;call to abstracted procedure
 15858  0048DE  6AEE               	clrf	postinc0,c
 15859  0048E0  6AEF               	clrf	indf0,c
 15860  0048E2                     u11680:
 15861                           
 15862                           ;tcpv4.c: 146: tcbPtr->timeoutsCount = 0;
 15863  0048E2  0E34               	movlw	52
 15864  0048E4  D82F               	call	PL126	;call to abstracted procedure
 15865  0048E6  64F7               	cpfsgt	tblptrh,c
 15866  0048E8  D003               	bra	u11697
 15867  0048EA  6AF5               	clrf	tablat,c
 15868  0048EC  000C               	tblwt		*
 15869  0048EE  D003               	bra	u11690
 15870  0048F0                     u11697:
 15871  0048F0  EC3C  F011         	call	PL114	;call to abstracted procedure
 15872  0048F4  6AEF               	clrf	indf0,c
 15873  0048F6                     u11690:
 15874                           
 15875                           ;tcpv4.c: 147: tcbPtr->flags = 0;
 15876  0048F6  0E35               	movlw	53
 15877  0048F8  D825               	call	PL126	;call to abstracted procedure
 15878  0048FA  64F7               	cpfsgt	tblptrh,c
 15879  0048FC  D003               	bra	u11707
 15880  0048FE  6AF5               	clrf	tablat,c
 15881  004900  000C               	tblwt		*
 15882  004902  D003               	bra	u11700
 15883  004904                     u11707:
 15884  004904  EC3C  F011         	call	PL114	;call to abstracted procedure
 15885  004908  6AEF               	clrf	indf0,c
 15886  00490A                     u11700:
 15887                           
 15888                           ;tcpv4.c: 149: tcbPtr->localPort = 0;
 15889  00490A  C002  FFF6         	movff	TCB_Reset@tcbPtr,tblptrl
 15890  00490E  C003  FFF7         	movff	TCB_Reset@tcbPtr+1,tblptrh
 15891  004912  0E00               	movlw	low (__smallconst shr (0+16))
 15892  004914  6EF8               	movwf	tblptru,c
 15893  004916  0E0F               	movlw	(high __ramtop+-1)
 15894  004918  64F7               	cpfsgt	tblptrh,c
 15895  00491A  D003               	bra	u11717
 15896  00491C  ECAB  F011         	call	PL150	;call to abstracted procedure
 15897  004920  D004               	bra	u11710
 15898  004922                     u11717:
 15899  004922  EC3C  F011         	call	PL114	;call to abstracted procedure
 15900  004926  6AEE               	clrf	postinc0,c
 15901  004928  6AEF               	clrf	indf0,c
 15902  00492A                     u11710:
 15903                           
 15904                           ;tcpv4.c: 150: tcbPtr->socketState = SOCKET_CLOSED;
 15905  00492A  0E36               	movlw	54
 15906  00492C  D80B               	call	PL126	;call to abstracted procedure
 15907  00492E  64F7               	cpfsgt	tblptrh,c
 15908  004930  D004               	bra	u11727
 15909  004932  0E01               	movlw	1
 15910  004934  6EF5               	movwf	tablat,c
 15911  004936  000C               	tblwt		*
 15912  004938  D004               	bra	u11720
 15913  00493A                     u11727:
 15914  00493A  EC3C  F011         	call	PL114	;call to abstracted procedure
 15915  00493E  0E01               	movlw	1
 15916  004940  6EEF               	movwf	indf0,c
 15917  004942                     u11720:
 15918  004942  0012               	return		;funcret
 15919  004944                     __end_of_TCB_Reset:
 15920                           	opt stack 0
 15921  004944                     PL126:
 15922                           	opt stack 24
 15923  004944  2402               	addwf	TCB_Reset@tcbPtr,w,c
 15924  004946  6E04               	movwf	??_TCB_Reset& (0+255),c
 15925  004948  0E00               	movlw	0
 15926  00494A  2003               	addwfc	TCB_Reset@tcbPtr+1,w,c
 15927  00494C  6E05               	movwf	(??_TCB_Reset+1)& (0+255),c
 15928  00494E  C004  FFF6         	movff	??_TCB_Reset,tblptrl
 15929  004952  C005  FFF7         	movff	??_TCB_Reset+1,tblptrh
 15930  004956  0E00               	movlw	low (__smallconst shr (0+16))
 15931  004958  6EF8               	movwf	tblptru,c
 15932  00495A  0E0F               	movlw	(high __ramtop+-1)
 15933  00495C  0012               	return	
 15934  00495E                     __end_ofPL126:
 15935                           	opt stack 0
 15936                           tosu	equ	0xFFF
 15937                           tosh	equ	0xFFE
 15938                           tosl	equ	0xFFD
 15939                           pclath	equ	0xFFA
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           intcon2	equ	0xFF1
 15948                           indf0	equ	0xFEF
 15949                           postinc0	equ	0xFEE
 15950                           fsr0h	equ	0xFEA
 15951                           fsr0l	equ	0xFE9
 15952                           wreg	equ	0xFE8
 15953                           postinc1	equ	0xFE6
 15954                           plusw1	equ	0xFE3
 15955                           fsr1h	equ	0xFE2
 15956                           fsr1l	equ	0xFE1
 15957                           bsr	equ	0xFE0
 15958                           indf2	equ	0xFDF
 15959                           postinc2	equ	0xFDE
 15960                           postdec2	equ	0xFDD
 15961                           plusw2	equ	0xFDB
 15962                           fsr2h	equ	0xFDA
 15963                           fsr2l	equ	0xFD9
 15964                           status	equ	0xFD8
 15965                           
 15966 ;; *************** function _IPV4_PseudoHeaderChecksum *****************
 15967 ;; Defined at:
 15968 ;;		line 83 in file "../../TCPIP Library/source/ipv4.c"
 15969 ;; Parameters:    Size  Location     Type
 15970 ;;  payloadLen      2    1[COMRAM] unsigned int 
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;  tmp            12   13[COMRAM] struct .
 15973 ;;  cksm            4    9[COMRAM] unsigned long 
 15974 ;;  len             1    8[COMRAM] unsigned char 
 15975 ;;  v               1    7[COMRAM] PTR unsigned int 
 15976 ;;		 -> IPV4_PseudoHeaderChecksum@tmp(12), 
 15977 ;; Return value:  Size  Location     Type
 15978 ;;                  2    1[COMRAM] unsigned int 
 15979 ;; Registers used:
 15980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15981 ;; Tracked objects:
 15982 ;;		On entry : F/0
 15983 ;;		On exit  : F/0
 15984 ;;		Unchanged: F/0
 15985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15987 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15988 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15989 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15990 ;;Total ram usage:       24 bytes
 15991 ;; Hardware stack levels used:    1
 15992 ;; Hardware stack levels required when called:    3
 15993 ;; This function calls:
 15994 ;;		Nothing
 15995 ;; This function is called by:
 15996 ;;		_IPV4_Packet
 15997 ;; This function uses a non-reentrant model
 15998 ;;
 15999                           
 16000                           	psect	text53
 16001  005604                     __ptext53:
 16002                           	opt stack 0
 16003  005604                     _IPV4_PseudoHeaderChecksum:
 16004                           	opt stack 24
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;ipv4.c: 85: ipv4_pseudo_header_t tmp;
 16008                           ;ipv4.c: 86: uint8_t len;
 16009                           ;ipv4.c: 87: uint32_t cksm = 0;
 16010                           
 16011                           ;incstack = 0
 16012  005604  6A0A               	clrf	IPV4_PseudoHeaderChecksum@cksm,c
 16013  005606  6A0B               	clrf	IPV4_PseudoHeaderChecksum@cksm+1,c
 16014  005608  6A0C               	clrf	IPV4_PseudoHeaderChecksum@cksm+2,c
 16015  00560A  6A0D               	clrf	IPV4_PseudoHeaderChecksum@cksm+3,c
 16016                           
 16017                           ;ipv4.c: 88: uint16_t *v;
 16018                           ;ipv4.c: 90: tmp.srcIpAddress = ipv4Header.srcIpAddress;
 16019  00560C  C2A2  F00E         	movff	_ipv4Header+12,IPV4_PseudoHeaderChecksum@tmp
 16020  005610  C2A3  F00F         	movff	_ipv4Header+13,IPV4_PseudoHeaderChecksum@tmp+1
 16021  005614  C2A4  F010         	movff	_ipv4Header+14,IPV4_PseudoHeaderChecksum@tmp+2
 16022  005618  C2A5  F011         	movff	_ipv4Header+15,IPV4_PseudoHeaderChecksum@tmp+3
 16023                           
 16024                           ;ipv4.c: 91: tmp.dstIpAddress = ipv4Header.dstIpAddress;
 16025  00561C  C2A6  F012         	movff	_ipv4Header+16,IPV4_PseudoHeaderChecksum@tmp+4
 16026  005620  C2A7  F013         	movff	_ipv4Header+17,IPV4_PseudoHeaderChecksum@tmp+5
 16027  005624  C2A8  F014         	movff	_ipv4Header+18,IPV4_PseudoHeaderChecksum@tmp+6
 16028  005628  C2A9  F015         	movff	_ipv4Header+19,IPV4_PseudoHeaderChecksum@tmp+7
 16029                           
 16030                           ;ipv4.c: 92: tmp.protocol = ipv4Header.protocol;
 16031  00562C  C29F  F016         	movff	_ipv4Header+9,IPV4_PseudoHeaderChecksum@tmp+8
 16032                           
 16033                           ;ipv4.c: 93: tmp.z = 0;
 16034  005630  6A17               	clrf	IPV4_PseudoHeaderChecksum@tmp+9,c
 16035                           
 16036                           ;ipv4.c: 94: tmp.length = payloadLen;
 16037  005632  C002  F018         	movff	IPV4_PseudoHeaderChecksum@payloadLen,IPV4_PseudoHeaderChecksum@tmp+10
 16038  005636  C003  F019         	movff	IPV4_PseudoHeaderChecksum@payloadLen+1,IPV4_PseudoHeaderChecksum@tmp+11
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;ipv4.c: 96: len = sizeof(tmp);
 16042  00563A  0E0C               	movlw	12
 16043  00563C  6E09               	movwf	IPV4_PseudoHeaderChecksum@len,c
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;ipv4.c: 97: len = len >> 1;
 16047  00563E  90D8               	bcf	status,0,c
 16048  005640  3209               	rrcf	IPV4_PseudoHeaderChecksum@len,f,c
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;ipv4.c: 99: v = (uint16_t *) &tmp;
 16052  005642  0E0E               	movlw	low IPV4_PseudoHeaderChecksum@tmp
 16053  005644  6E08               	movwf	IPV4_PseudoHeaderChecksum@v,c
 16054                           
 16055                           ;ipv4.c: 101: while(len)
 16056  005646  D011               	goto	l9622
 16057  005648                     l9616:
 16058                           
 16059                           ; BSR set to: 0
 16060                           ;ipv4.c: 102: {
 16061                           ;ipv4.c: 103: cksm += *v;
 16062  005648  5008               	movf	IPV4_PseudoHeaderChecksum@v,w,c
 16063  00564A  6ED9               	movwf	fsr2l,c
 16064  00564C  6ADA               	clrf	fsr2h,c
 16065  00564E  CFDE F004          	movff	postinc2,??_IPV4_PseudoHeaderChecksum
 16066  005652  CFDD F005          	movff	postdec2,??_IPV4_PseudoHeaderChecksum+1
 16067  005656  5004               	movf	??_IPV4_PseudoHeaderChecksum,w,c
 16068  005658  260A               	addwf	IPV4_PseudoHeaderChecksum@cksm,f,c
 16069  00565A  5005               	movf	??_IPV4_PseudoHeaderChecksum+1,w,c
 16070  00565C  220B               	addwfc	IPV4_PseudoHeaderChecksum@cksm+1,f,c
 16071  00565E  0E00               	movlw	0
 16072  005660  220C               	addwfc	IPV4_PseudoHeaderChecksum@cksm+2,f,c
 16073  005662  220D               	addwfc	IPV4_PseudoHeaderChecksum@cksm+3,f,c
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;ipv4.c: 104: len--;
 16077  005664  0609               	decf	IPV4_PseudoHeaderChecksum@len,f,c
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;ipv4.c: 105: v++;
 16081  005666  0E02               	movlw	2
 16082  005668  2608               	addwf	IPV4_PseudoHeaderChecksum@v,f,c
 16083  00566A                     l9622:
 16084                           
 16085                           ; BSR set to: 0
 16086  00566A  5009               	movf	IPV4_PseudoHeaderChecksum@len,w,c
 16087  00566C  E1ED               	bnz	l9616
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;ipv4.c: 106: }
 16091                           ;ipv4.c: 109: cksm = (cksm & 0x0FFFF) + (cksm>>16);
 16092  00566E  500A               	movf	IPV4_PseudoHeaderChecksum@cksm,w,c
 16093  005670  6E04               	movwf	??_IPV4_PseudoHeaderChecksum& (0+255),c
 16094  005672  500B               	movf	IPV4_PseudoHeaderChecksum@cksm+1,w,c
 16095  005674  6E05               	movwf	(??_IPV4_PseudoHeaderChecksum+1)& (0+255),c
 16096  005676  6A06               	clrf	(??_IPV4_PseudoHeaderChecksum+2)& (0+255),c
 16097  005678  6A07               	clrf	(??_IPV4_PseudoHeaderChecksum+3)& (0+255),c
 16098  00567A  500C               	movf	IPV4_PseudoHeaderChecksum@cksm+2,w,c
 16099  00567C  2404               	addwf	??_IPV4_PseudoHeaderChecksum,w,c
 16100  00567E  6E0A               	movwf	IPV4_PseudoHeaderChecksum@cksm,c
 16101  005680  500D               	movf	IPV4_PseudoHeaderChecksum@cksm+3,w,c
 16102  005682  2005               	addwfc	??_IPV4_PseudoHeaderChecksum+1,w,c
 16103  005684  6E0B               	movwf	IPV4_PseudoHeaderChecksum@cksm+1,c
 16104  005686  0E00               	movlw	0
 16105  005688  2006               	addwfc	??_IPV4_PseudoHeaderChecksum+2,w,c
 16106  00568A  6E0C               	movwf	IPV4_PseudoHeaderChecksum@cksm+2,c
 16107  00568C  0E00               	movlw	0
 16108  00568E  2007               	addwfc	??_IPV4_PseudoHeaderChecksum+3,w,c
 16109  005690  6E0D               	movwf	IPV4_PseudoHeaderChecksum@cksm+3,c
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;ipv4.c: 112: return cksm;
 16113  005692  C00A  F002         	movff	IPV4_PseudoHeaderChecksum@cksm,?_IPV4_PseudoHeaderChecksum
 16114  005696  C00B  F003         	movff	IPV4_PseudoHeaderChecksum@cksm+1,?_IPV4_PseudoHeaderChecksum+1
 16115                           
 16116                           ; BSR set to: 0
 16117  00569A  0012               	return		;funcret
 16118  00569C                     __end_of_IPV4_PseudoHeaderChecksum:
 16119                           	opt stack 0
 16120                           tosu	equ	0xFFF
 16121                           tosh	equ	0xFFE
 16122                           tosl	equ	0xFFD
 16123                           pclath	equ	0xFFA
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           intcon2	equ	0xFF1
 16132                           indf0	equ	0xFEF
 16133                           postinc0	equ	0xFEE
 16134                           fsr0h	equ	0xFEA
 16135                           fsr0l	equ	0xFE9
 16136                           wreg	equ	0xFE8
 16137                           postinc1	equ	0xFE6
 16138                           plusw1	equ	0xFE3
 16139                           fsr1h	equ	0xFE2
 16140                           fsr1l	equ	0xFE1
 16141                           bsr	equ	0xFE0
 16142                           indf2	equ	0xFDF
 16143                           postinc2	equ	0xFDE
 16144                           postdec2	equ	0xFDD
 16145                           plusw2	equ	0xFDB
 16146                           fsr2h	equ	0xFDA
 16147                           fsr2l	equ	0xFD9
 16148                           status	equ	0xFD8
 16149                           
 16150 ;; *************** function _ICMP_Receive *****************
 16151 ;; Defined at:
 16152 ;;		line 56 in file "../../TCPIP Library/source/icmp.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;  ipv4Hdr         2   89[COMRAM] PTR struct .
 16155 ;;		 -> ipv4Header(20), 
 16156 ;; Auto vars:     Size  Location     Type
 16157 ;;  icmpHdr         8   26[BANK0 ] struct .
 16158 ;;  ret             1    0        enum E366
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      enum E366
 16161 ;; Registers used:
 16162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : F/0
 16165 ;;		On exit  : F/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16169 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Totals:         2      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;Total ram usage:       15 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:   10
 16175 ;; This function calls:
 16176 ;;		_ETH_ReadBlock
 16177 ;;		_ETH_SaveRDPT
 16178 ;;		_ICMP_EchoReply
 16179 ;; This function is called by:
 16180 ;;		_IPV4_Packet
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text54
 16185  005D28                     __ptext54:
 16186                           	opt stack 0
 16187  005D28                     _ICMP_Receive:
 16188                           	opt stack 17
 16189                           
 16190                           ; BSR set to: 0
 16191                           ;icmp.c: 60: ETH_ReadBlock((char *)&icmpHdr, sizeof(icmpHeader_t));
 16192                           
 16193                           ; BSR set to: 0
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;incstack = 0
 16197  005D28  0E7A               	movlw	low ICMP_Receive@icmpHdr
 16198  005D2A  6E03               	movwf	ETH_ReadBlock@data,c
 16199  005D2C  6A04               	clrf	ETH_ReadBlock@data+1,c
 16200  005D2E  D81E               	call	PL490	;call to abstracted procedure
 16201  005D30  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
 16202                           
 16203                           ; BSR set to: 1
 16204                           ;icmp.c: 61: ETH_SaveRDPT();
 16205  005D34  ECC7  F032         	call	_ETH_SaveRDPT	;wreg free
 16206                           
 16207                           ;icmp.c: 63: switch(((((uint16_t)(icmpTypeCodes_t)icmpHdr.typeCode & (uint16_t)0xFF00) >
      +                          > 8) | (((uint16_t)(icmpTypeCodes_t)icmpHdr.typeCode & (uint16_t)0x00FF) << 8)))
 16208  005D38  D007               	goto	l9602
 16209  005D3A                     l9598:
 16210                           
 16211                           ; BSR set to: 0
 16212  005D3A  C05A  F058         	movff	ICMP_Receive@ipv4Hdr,ICMP_EchoReply@ipv4Hdr
 16213  005D3E  C05B  F059         	movff	ICMP_Receive@ipv4Hdr+1,ICMP_EchoReply@ipv4Hdr+1
 16214  005D42  0E7A               	movlw	ICMP_Receive@icmpHdr& (0+255)
 16215  005D44  EF60  F025         	goto	_ICMP_EchoReply
 16216  005D48                     l9602:
 16217  005D48  0100               	movlb	0	; () banked
 16218  005D4A  517A               	movf	ICMP_Receive@icmpHdr& (0+255),w,b
 16219  005D4C  6F76               	movwf	(??_ICMP_Receive+1)& (0+255),b
 16220  005D4E  6B75               	clrf	??_ICMP_Receive& (0+255),b
 16221  005D50  517B               	movf	(ICMP_Receive@icmpHdr+1)& (0+255),w,b
 16222  005D52  6F77               	movwf	(??_ICMP_Receive+2)& (0+255),b
 16223  005D54  6B78               	clrf	(??_ICMP_Receive+3)& (0+255),b
 16224  005D56  5175               	movf	??_ICMP_Receive& (0+255),w,b
 16225  005D58  1377               	iorwf	(??_ICMP_Receive+2)& (0+255),f,b
 16226  005D5A  5176               	movf	(??_ICMP_Receive+1)& (0+255),w,b
 16227  005D5C  1378               	iorwf	(??_ICMP_Receive+3)& (0+255),f,b
 16228                           
 16229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16230                           ; Switch size 1, requested type "space"
 16231                           ; Number of cases is 1, Range of values is 8 to 8
 16232                           ; switch strategies available:
 16233                           ; Name         Instructions Cycles
 16234                           ; simple_byte            4     3 (average)
 16235                           ;	Chosen strategy is simple_byte
 16236  005D5E  5178               	movf	(??_ICMP_Receive+3)& (0+255),w,b
 16237  005D60  0A08               	xorlw	8	; case 8
 16238  005D62  A4D8               	btfss	status,2,c
 16239  005D64  0012               	return	
 16240                           
 16241                           ; BSR set to: 0
 16242                           ; Switch size 1, requested type "space"
 16243                           ; Number of cases is 1, Range of values is 0 to 0
 16244                           ; switch strategies available:
 16245                           ; Name         Instructions Cycles
 16246                           ; simple_byte            4     3 (average)
 16247                           ;	Chosen strategy is simple_byte
 16248  005D66  5177               	movf	(??_ICMP_Receive+2)& (0+255),w,b
 16249  005D68  E0E8               	bz	l9598
 16250                           
 16251                           ; BSR set to: 0
 16252  005D6A  0012               	return		;funcret
 16253  005D6C                     __end_of_ICMP_Receive:
 16254                           	opt stack 0
 16255  005D6C                     PL490:
 16256                           	opt stack 15
 16257  005D6C  6A06               	clrf	ETH_ReadBlock@length+1,c
 16258  005D6E  0E08               	movlw	8
 16259  005D70  6E05               	movwf	ETH_ReadBlock@length,c
 16260  005D72  0C08               	retlw	8
 16261  005D74                     __end_ofPL490:
 16262                           	opt stack 0
 16263                           tosu	equ	0xFFF
 16264                           tosh	equ	0xFFE
 16265                           tosl	equ	0xFFD
 16266                           pclath	equ	0xFFA
 16267                           tblptru	equ	0xFF8
 16268                           tblptrh	equ	0xFF7
 16269                           tblptrl	equ	0xFF6
 16270                           tablat	equ	0xFF5
 16271                           prodh	equ	0xFF4
 16272                           prodl	equ	0xFF3
 16273                           intcon	equ	0xFF2
 16274                           intcon2	equ	0xFF1
 16275                           indf0	equ	0xFEF
 16276                           postinc0	equ	0xFEE
 16277                           fsr0h	equ	0xFEA
 16278                           fsr0l	equ	0xFE9
 16279                           wreg	equ	0xFE8
 16280                           postinc1	equ	0xFE6
 16281                           plusw1	equ	0xFE3
 16282                           fsr1h	equ	0xFE2
 16283                           fsr1l	equ	0xFE1
 16284                           bsr	equ	0xFE0
 16285                           indf2	equ	0xFDF
 16286                           postinc2	equ	0xFDE
 16287                           postdec2	equ	0xFDD
 16288                           plusw2	equ	0xFDB
 16289                           fsr2h	equ	0xFDA
 16290                           fsr2l	equ	0xFD9
 16291                           status	equ	0xFD8
 16292                           
 16293 ;; *************** function _ICMP_EchoReply *****************
 16294 ;; Defined at:
 16295 ;;		line 86 in file "../../TCPIP Library/source/icmp.c"
 16296 ;; Parameters:    Size  Location     Type
 16297 ;;  icmpHdr         1    wreg     PTR struct .
 16298 ;;		 -> ICMP_Receive@icmpHdr(8), 
 16299 ;;  ipv4Hdr         2   87[COMRAM] PTR struct .
 16300 ;;		 -> ipv4Header(20), 
 16301 ;; Auto vars:     Size  Location     Type
 16302 ;;  icmpHdr         1   20[BANK0 ] PTR struct .
 16303 ;;		 -> ICMP_Receive@icmpHdr(8), 
 16304 ;;  ipv4PayloadL    2   17[BANK0 ] unsigned int 
 16305 ;;  icmp_cksm_st    2    0        unsigned int 
 16306 ;;  cksm            2   15[BANK0 ] unsigned int 
 16307 ;;  ret             1   19[BANK0 ] enum E366
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      enum E366
 16310 ;; Registers used:
 16311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16312 ;; Tracked objects:
 16313 ;;		On entry : F/0
 16314 ;;		On exit  : F/0
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16317 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;Total ram usage:       16 bytes
 16322 ;; Hardware stack levels used:    1
 16323 ;; Hardware stack levels required when called:    9
 16324 ;; This function calls:
 16325 ;;		_ETH_Copy
 16326 ;;		_ETH_Insert
 16327 ;;		_ETH_SaveRDPT
 16328 ;;		_ETH_TxComputeChecksum
 16329 ;;		_ETH_Write16
 16330 ;;		_IPV4_Send
 16331 ;;		_IPv4_Start
 16332 ;; This function is called by:
 16333 ;;		_ICMP_Receive
 16334 ;; This function uses a non-reentrant model
 16335 ;;
 16336                           
 16337                           	psect	text55
 16338  004AC0                     __ptext55:
 16339                           	opt stack 0
 16340  004AC0                     _ICMP_EchoReply:
 16341                           	opt stack 17
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;incstack = 0
 16345                           ;ICMP_EchoReply@icmpHdr stored from wreg
 16346  004AC0  6F74               	movwf	ICMP_EchoReply@icmpHdr& (0+255),b
 16347                           
 16348                           ;icmp.c: 89: error_msg ret = ERROR;
 16349  004AC2  0100               	movlb	0	; () banked
 16350  004AC4  6B73               	clrf	ICMP_EchoReply@ret& (0+255),b
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;icmp.c: 91: ret = IPv4_Start(ipv4Hdr->srcIpAddress, ipv4Hdr->protocol);
 16354  004AC6  EE20 F00C          	lfsr	2,12
 16355  004ACA  D89B               	call	PL346	;call to abstracted procedure
 16356  004ACC  CFDE F04B          	movff	postinc2,IPv4_Start@destAddress
 16357  004AD0  CFDE F04C          	movff	postinc2,IPv4_Start@destAddress+1
 16358  004AD4  CFDE F04D          	movff	postinc2,IPv4_Start@destAddress+2
 16359  004AD8  CFDE F04E          	movff	postinc2,IPv4_Start@destAddress+3
 16360  004ADC  EE20 F009          	lfsr	2,9
 16361  004AE0  D890               	call	PL346	;call to abstracted procedure
 16362  004AE2  50DF               	movf	indf2,w,c
 16363  004AE4  6E4F               	movwf	IPv4_Start@protocol,c
 16364  004AE6  EC37  F023         	call	_IPv4_Start	;wreg free
 16365  004AEA  6F73               	movwf	ICMP_EchoReply@ret& (0+255),b
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;icmp.c: 92: if(ret == SUCCESS)
 16369  004AEC  0573               	decf	ICMP_EchoReply@ret& (0+255),w,b
 16370  004AEE  E16B               	bnz	l8882
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;icmp.c: 93: {
 16374                           ;icmp.c: 94: uint16_t icmp_cksm_start;
 16375                           ;icmp.c: 95: uint16_t ipv4PayloadLength = ipv4Hdr->length - sizeof(ipv4Header_t);
 16376  004AF0  EE20 F002          	lfsr	2,2
 16377  004AF4  D886               	call	PL346	;call to abstracted procedure
 16378  004AF6  CFDE F067          	movff	postinc2,??_ICMP_EchoReply
 16379  004AFA  CFDD F068          	movff	postdec2,??_ICMP_EchoReply+1
 16380  004AFE  0EEC               	movlw	236
 16381  004B00  2567               	addwf	??_ICMP_EchoReply& (0+255),w,b
 16382  004B02  6F71               	movwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),b
 16383  004B04  0EFF               	movlw	255
 16384  004B06  2168               	addwfc	(??_ICMP_EchoReply+1)& (0+255),w,b
 16385  004B08  6F72               	movwf	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),b
 16386                           
 16387                           ;icmp.c: 97: ipv4PayloadLength = ipv4Hdr->length - (uint16_t)(ipv4Hdr->ihl << 2);
 16388  004B0A  C058  FFD9         	movff	ICMP_EchoReply@ipv4Hdr,fsr2l
 16389  004B0E  C059  FFDA         	movff	ICMP_EchoReply@ipv4Hdr+1,fsr2h
 16390  004B12  50DF               	movf	indf2,w,c
 16391  004B14  0B0F               	andlw	15
 16392  004B16  6F67               	movwf	??_ICMP_EchoReply& (0+255),b
 16393  004B18  6B68               	clrf	(??_ICMP_EchoReply+1)& (0+255),b
 16394  004B1A  90D8               	bcf	status,0,c
 16395  004B1C  3767               	rlcf	??_ICMP_EchoReply& (0+255),f,b
 16396  004B1E  3768               	rlcf	(??_ICMP_EchoReply+1)& (0+255),f,b
 16397  004B20  90D8               	bcf	status,0,c
 16398  004B22  3767               	rlcf	??_ICMP_EchoReply& (0+255),f,b
 16399  004B24  3768               	rlcf	(??_ICMP_EchoReply+1)& (0+255),f,b
 16400  004B26  EE20 F002          	lfsr	2,2
 16401  004B2A  D86B               	call	PL346	;call to abstracted procedure
 16402  004B2C  CFDE F069          	movff	postinc2,??_ICMP_EchoReply+2
 16403  004B30  CFDD F06A          	movff	postdec2,??_ICMP_EchoReply+3
 16404  004B34  5167               	movf	??_ICMP_EchoReply& (0+255),w,b
 16405  004B36  5D69               	subwf	(??_ICMP_EchoReply+2)& (0+255),w,b
 16406  004B38  6F71               	movwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),b
 16407  004B3A  5168               	movf	(??_ICMP_EchoReply+1)& (0+255),w,b
 16408  004B3C  596A               	subwfb	(??_ICMP_EchoReply+3)& (0+255),w,b
 16409  004B3E  6F72               	movwf	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),b
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;icmp.c: 99: ETH_Write16(ECHO_REPLY);
 16413  004B40  6A04               	clrf	ETH_Write16@data+1,c
 16414  004B42  6A03               	clrf	ETH_Write16@data,c
 16415  004B44  EC91  F031         	call	_ETH_Write16	;wreg free
 16416                           
 16417                           ;icmp.c: 100: ETH_Write16(0);
 16418  004B48  6A04               	clrf	ETH_Write16@data+1,c
 16419  004B4A  6A03               	clrf	ETH_Write16@data,c
 16420  004B4C  EC91  F031         	call	_ETH_Write16	;wreg free
 16421                           
 16422                           ;icmp.c: 101: ETH_Write16(((((uint16_t)icmpHdr->identifier & (uint16_t)0xFF00) >> 8) | (
      +                          ((uint16_t)icmpHdr->identifier & (uint16_t)0x00FF) << 8)));
 16423  004B50  D85D               	call	PL460	;call to abstracted procedure
 16424  004B52  0E04               	movlw	4
 16425  004B54  D84A               	call	PL288	;call to abstracted procedure
 16426  004B56  0E04               	movlw	4
 16427  004B58  D838               	call	PL224	;call to abstracted procedure
 16428  004B5A  EC91  F031         	call	_ETH_Write16	;wreg free
 16429                           
 16430                           ;icmp.c: 102: ETH_Write16(((((uint16_t)icmpHdr->sequence & (uint16_t)0xFF00) >> 8) | (((
      +                          uint16_t)icmpHdr->sequence & (uint16_t)0x00FF) << 8)));
 16431  004B5E  D856               	call	PL460	;call to abstracted procedure
 16432  004B60  0E06               	movlw	6
 16433  004B62  D843               	call	PL288	;call to abstracted procedure
 16434  004B64  0E06               	movlw	6
 16435  004B66  D831               	call	PL224	;call to abstracted procedure
 16436  004B68  EC91  F031         	call	_ETH_Write16	;wreg free
 16437                           
 16438                           ;icmp.c: 105: ret = ETH_Copy(ipv4PayloadLength - sizeof(icmpHeader_t));
 16439  004B6C  0EF8               	movlw	248
 16440  004B6E  0100               	movlb	0	; () banked
 16441  004B70  2571               	addwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),w,b
 16442  004B72  6E0D               	movwf	ETH_Copy@len,c
 16443  004B74  0EFF               	movlw	255
 16444  004B76  2172               	addwfc	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),w,b
 16445  004B78  6E0E               	movwf	ETH_Copy@len+1,c
 16446  004B7A  ECB5  F02A         	call	_ETH_Copy	;wreg free
 16447  004B7E  0100               	movlb	0	; () banked
 16448  004B80  6F73               	movwf	ICMP_EchoReply@ret& (0+255),b
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;icmp.c: 106: if(ret==SUCCESS)
 16452  004B82  0573               	decf	ICMP_EchoReply@ret& (0+255),w,b
 16453  004B84  E120               	bnz	l8882
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;icmp.c: 107: {
 16457                           ;icmp.c: 108: ETH_SaveRDPT();
 16458  004B86  ECC7  F032         	call	_ETH_SaveRDPT	;wreg free
 16459                           
 16460                           ;icmp.c: 112: cksm = ETH_TxComputeChecksum(icmp_cksm_start, ipv4PayloadLength, 0);
 16461  004B8A  6A0E               	clrf	ETH_TxComputeChecksum@position+1,c
 16462  004B8C  0E22               	movlw	34
 16463  004B8E  6E0D               	movwf	ETH_TxComputeChecksum@position,c
 16464  004B90  C071  F00F         	movff	ICMP_EchoReply@ipv4PayloadLength,ETH_TxComputeChecksum@length
 16465  004B94  C072  F010         	movff	ICMP_EchoReply@ipv4PayloadLength+1,ETH_TxComputeChecksum@length+1
 16466  004B98  6A12               	clrf	ETH_TxComputeChecksum@seed+1,c
 16467  004B9A  6A11               	clrf	ETH_TxComputeChecksum@seed,c
 16468  004B9C  EC71  F029         	call	_ETH_TxComputeChecksum	;wreg free
 16469  004BA0  C00D  F06F         	movff	?_ETH_TxComputeChecksum,ICMP_EchoReply@cksm
 16470  004BA4  C00E  F070         	movff	?_ETH_TxComputeChecksum+1,ICMP_EchoReply@cksm+1
 16471                           
 16472                           ;icmp.c: 113: ETH_Insert((char *)&cksm,sizeof(cksm),sizeof(ethernetFrame_t) + sizeof(ipv
      +                          4Header_t) + (int)(((char*)&((icmpHeader_t *)1)->checksum)-1));
 16473  004BA8  ECC9  F02C         	call	PL300	;call to abstracted procedure
 16474  004BAC  0E24               	movlw	36
 16475  004BAE  6E0D               	movwf	ETH_Insert@offset,c
 16476  004BB0  0E6F               	movlw	ICMP_EchoReply@cksm& (0+255)
 16477  004BB2  ECD0  F02D         	call	_ETH_Insert
 16478                           
 16479                           ;icmp.c: 114: ret = IPV4_Send(ipv4PayloadLength);
 16480  004BB6  C071  F01D         	movff	ICMP_EchoReply@ipv4PayloadLength,IPV4_Send@payloadLength
 16481  004BBA  C072  F01E         	movff	ICMP_EchoReply@ipv4PayloadLength+1,IPV4_Send@payloadLength+1
 16482  004BBE  EC98  F02C         	call	_IPV4_Send	;wreg free
 16483  004BC2  0100               	movlb	0	; () banked
 16484  004BC4  6F73               	movwf	ICMP_EchoReply@ret& (0+255),b
 16485  004BC6                     l8882:
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;icmp.c: 115: }
 16489                           ;icmp.c: 116: }
 16490                           ;icmp.c: 117: return ret;
 16491  004BC6  5173               	movf	ICMP_EchoReply@ret& (0+255),w,b
 16492                           
 16493                           ; BSR set to: 0
 16494  004BC8  0012               	return		;funcret
 16495  004BCA                     __end_of_ICMP_EchoReply:
 16496                           	opt stack 0
 16497  004BCA                     PL224:
 16498                           	opt stack 17
 16499  004BCA  26D9               	addwf	fsr2l,f,c
 16500  004BCC  CFDE F06B          	movff	postinc2,??_ICMP_EchoReply+4
 16501  004BD0  CFDD F06C          	movff	postdec2,??_ICMP_EchoReply+5
 16502  004BD4  C06C  F06B         	movff	??_ICMP_EchoReply+5,??_ICMP_EchoReply+4
 16503  004BD8  6B6C               	clrf	(??_ICMP_EchoReply+5)& (0+255),b
 16504  004BDA  6B6C               	clrf	(??_ICMP_EchoReply+5)& (0+255),b
 16505  004BDC  5169               	movf	(??_ICMP_EchoReply+2)& (0+255),w,b
 16506  004BDE  116B               	iorwf	(??_ICMP_EchoReply+4)& (0+255),w,b
 16507  004BE0  6E03               	movwf	ETH_Write16@data,c
 16508  004BE2  516A               	movf	(??_ICMP_EchoReply+3)& (0+255),w,b
 16509  004BE4  116C               	iorwf	(??_ICMP_EchoReply+5)& (0+255),w,b
 16510  004BE6  6E04               	movwf	ETH_Write16@data+1,c
 16511  004BE8  0012               	return	
 16512  004BEA                     __end_ofPL224:
 16513                           	opt stack 0
 16514  004BEA                     PL288:
 16515                           	opt stack 17
 16516  004BEA  26D9               	addwf	fsr2l,f,c
 16517  004BEC  CFDE F067          	movff	postinc2,??_ICMP_EchoReply
 16518  004BF0  CFDD F068          	movff	postdec2,??_ICMP_EchoReply+1
 16519  004BF4  5167               	movf	??_ICMP_EchoReply& (0+255),w,b
 16520  004BF6  6F6A               	movwf	(??_ICMP_EchoReply+3)& (0+255),b
 16521  004BF8  6B69               	clrf	(??_ICMP_EchoReply+2)& (0+255),b
 16522  004BFA  5174               	movf	ICMP_EchoReply@icmpHdr& (0+255),w,b
 16523  004BFC  6ED9               	movwf	fsr2l,c
 16524  004BFE  6ADA               	clrf	fsr2h,c
 16525  004C00  0012               	return	
 16526  004C02                     __end_ofPL288:
 16527                           	opt stack 0
 16528  004C02                     PL346:
 16529                           	opt stack 17
 16530  004C02  5058               	movf	ICMP_EchoReply@ipv4Hdr,w,c
 16531  004C04  26D9               	addwf	fsr2l,f,c
 16532  004C06  5059               	movf	ICMP_EchoReply@ipv4Hdr+1,w,c
 16533  004C08  22DA               	addwfc	fsr2h,f,c
 16534  004C0A  0012               	return	
 16535  004C0C                     __end_ofPL346:
 16536                           	opt stack 0
 16537  004C0C                     PL460:
 16538                           	opt stack 17
 16539  004C0C  0100               	movlb	0	; () banked
 16540  004C0E  5174               	movf	ICMP_EchoReply@icmpHdr& (0+255),w,b
 16541  004C10  6ED9               	movwf	fsr2l,c
 16542  004C12  6ADA               	clrf	fsr2h,c
 16543  004C14  0012               	return	
 16544  004C16                     __end_ofPL460:
 16545                           	opt stack 0
 16546                           tosu	equ	0xFFF
 16547                           tosh	equ	0xFFE
 16548                           tosl	equ	0xFFD
 16549                           pclath	equ	0xFFA
 16550                           tblptru	equ	0xFF8
 16551                           tblptrh	equ	0xFF7
 16552                           tblptrl	equ	0xFF6
 16553                           tablat	equ	0xFF5
 16554                           prodh	equ	0xFF4
 16555                           prodl	equ	0xFF3
 16556                           intcon	equ	0xFF2
 16557                           intcon2	equ	0xFF1
 16558                           indf0	equ	0xFEF
 16559                           postinc0	equ	0xFEE
 16560                           fsr0h	equ	0xFEA
 16561                           fsr0l	equ	0xFE9
 16562                           wreg	equ	0xFE8
 16563                           postinc1	equ	0xFE6
 16564                           plusw1	equ	0xFE3
 16565                           fsr1h	equ	0xFE2
 16566                           fsr1l	equ	0xFE1
 16567                           bsr	equ	0xFE0
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           plusw2	equ	0xFDB
 16572                           fsr2h	equ	0xFDA
 16573                           fsr2l	equ	0xFD9
 16574                           status	equ	0xFD8
 16575                           
 16576 ;; *************** function _ETH_SaveRDPT *****************
 16577 ;; Defined at:
 16578 ;;		line 592 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 16579 ;; Parameters:    Size  Location     Type
 16580 ;;		None
 16581 ;; Auto vars:     Size  Location     Type
 16582 ;;		None
 16583 ;; Return value:  Size  Location     Type
 16584 ;;		None               void
 16585 ;; Registers used:
 16586 ;;		wreg, status,2, status,0, cstack
 16587 ;; Tracked objects:
 16588 ;;		On entry : E/1
 16589 ;;		On exit  : 0/0
 16590 ;;		Unchanged: 0/0
 16591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16596 ;;Total ram usage:        0 bytes
 16597 ;; Hardware stack levels used:    1
 16598 ;; Hardware stack levels required when called:    6
 16599 ;; This function calls:
 16600 ;;		_ENCx24_Read
 16601 ;; This function is called by:
 16602 ;;		_ICMP_Receive
 16603 ;;		_ICMP_EchoReply
 16604 ;; This function uses a non-reentrant model
 16605 ;;
 16606                           
 16607                           	psect	text56
 16608  00658E                     __ptext56:
 16609                           	opt stack 0
 16610  00658E                     _ETH_SaveRDPT:
 16611                           	opt stack 19
 16612                           
 16613                           ;encX24J600_driver.c: 594: ethData.saveRDPT = ENCx24_Read(XJ600_ERXRDPTL);
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;incstack = 0
 16617  00658E  0E8A               	movlw	138
 16618  006590  EC04  F02F         	call	_ENCx24_Read
 16619  006594  C005  F186         	movff	?_ENCx24_Read,_ethData+3	;volatile
 16620  006598  C006  F187         	movff	?_ENCx24_Read+1,_ethData+4	;volatile
 16621  00659C  0012               	return		;funcret
 16622  00659E                     __end_of_ETH_SaveRDPT:
 16623                           	opt stack 0
 16624                           tosu	equ	0xFFF
 16625                           tosh	equ	0xFFE
 16626                           tosl	equ	0xFFD
 16627                           pclath	equ	0xFFA
 16628                           tblptru	equ	0xFF8
 16629                           tblptrh	equ	0xFF7
 16630                           tblptrl	equ	0xFF6
 16631                           tablat	equ	0xFF5
 16632                           prodh	equ	0xFF4
 16633                           prodl	equ	0xFF3
 16634                           intcon	equ	0xFF2
 16635                           intcon2	equ	0xFF1
 16636                           indf0	equ	0xFEF
 16637                           postinc0	equ	0xFEE
 16638                           fsr0h	equ	0xFEA
 16639                           fsr0l	equ	0xFE9
 16640                           wreg	equ	0xFE8
 16641                           postinc1	equ	0xFE6
 16642                           plusw1	equ	0xFE3
 16643                           fsr1h	equ	0xFE2
 16644                           fsr1l	equ	0xFE1
 16645                           bsr	equ	0xFE0
 16646                           indf2	equ	0xFDF
 16647                           postinc2	equ	0xFDE
 16648                           postdec2	equ	0xFDD
 16649                           plusw2	equ	0xFDB
 16650                           fsr2h	equ	0xFDA
 16651                           fsr2l	equ	0xFD9
 16652                           status	equ	0xFD8
 16653                           
 16654 ;; *************** function _ETH_Copy *****************
 16655 ;; Defined at:
 16656 ;;		line 416 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 16657 ;; Parameters:    Size  Location     Type
 16658 ;;  len             2   12[COMRAM] unsigned int 
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;  txBufferAddr    2   14[COMRAM] unsigned int 
 16661 ;; Return value:  Size  Location     Type
 16662 ;;                  1    wreg      enum E6988
 16663 ;; Registers used:
 16664 ;;		wreg, status,2, status,0, cstack
 16665 ;; Tracked objects:
 16666 ;;		On entry : F/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16674 ;;Total ram usage:        4 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    7
 16677 ;; This function calls:
 16678 ;;		_ENCx24_BFC
 16679 ;;		_ENCx24_BFS
 16680 ;;		_ENCx24_Read
 16681 ;;		_ENCx24_Write
 16682 ;;		_waitForDMA
 16683 ;; This function is called by:
 16684 ;;		_ICMP_EchoReply
 16685 ;; This function uses a non-reentrant model
 16686 ;;
 16687                           
 16688                           	psect	text57
 16689  00556A                     __ptext57:
 16690                           	opt stack 0
 16691  00556A                     _ETH_Copy:
 16692                           	opt stack 0
 16693  00556A                     i5L__ptext101:
 16694                           	opt stack 0
 16695  00556A                     i5L_waitForDMA:
 16696                           	opt stack 0
 16697  00556A                     i5Ll501:
 16698                           	opt stack 0
 16699  00556A                     i5Ll8150:
 16700                           	opt stack 18
 16701                           
 16702                           ;encX24J600_driver.c: 487: {
 16703                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 16704  00556A  0EFE               	movlw	254
 16705  00556C  EC04  F02F         	call	_ENCx24_Read
 16706  005570  EC11  F029         	call	PL298	;call to abstracted procedure
 16707  005574                     i5Ll8152:
 16708                           	opt stack 18
 16709                           
 16710                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 16711  005574  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 16712  005576                     i5Lu10751:
 16713                           	opt stack 0
 16714  005576  D7F9               	goto	i5Ll501
 16715  005578                     i5Lu10750:
 16716                           	opt stack 0
 16717  005578                     i5Ll503:
 16718                           	opt stack 18
 16719                           
 16720                           ;encX24J600_driver.c: 425: if((ENCx24_Read(XJ600_ECON1L) & 0x20) == 0)
 16721  005578  0EFE               	movlw	254
 16722  00557A  EC04  F02F         	call	_ENCx24_Read
 16723  00557E  BA05               	btfsc	?_ENCx24_Read,5,c
 16724  005580  D03A               	goto	l491
 16725                           
 16726                           ;encX24J600_driver.c: 426: {
 16727                           ;encX24J600_driver.c: 427: txBufferAddress = ENCx24_Read(XJ600_EGPWRPTL);
 16728  005582  0E88               	movlw	136
 16729  005584  EC04  F02F         	call	_ENCx24_Read
 16730  005588  C005  F00F         	movff	?_ENCx24_Read,ETH_Copy@txBufferAddress
 16731  00558C  C006  F010         	movff	?_ENCx24_Read+1,ETH_Copy@txBufferAddress+1
 16732                           
 16733                           ;encX24J600_driver.c: 428: ENCx24_Write(XJ600_EDMASTL, ethData.saveRDPT);
 16734  005590  C186  F005         	movff	_ethData+3,ENCx24_Write@data	;volatile
 16735  005594  C187  F006         	movff	_ethData+4,ENCx24_Write@data+1	;volatile
 16736  005598  0E0A               	movlw	10
 16737  00559A  EC29  F02F         	call	_ENCx24_Write
 16738                           
 16739                           ;encX24J600_driver.c: 429: ENCx24_Write(XJ600_EDMALENL,len);
 16740  00559E  C00D  F005         	movff	ETH_Copy@len,ENCx24_Write@data
 16741  0055A2  C00E  F006         	movff	ETH_Copy@len+1,ENCx24_Write@data+1
 16742  0055A6  0E0C               	movlw	12
 16743  0055A8  EC29  F02F         	call	_ENCx24_Write
 16744                           
 16745                           ;encX24J600_driver.c: 430: ENCx24_Write(XJ600_EDMADSTL, txBufferAddress);
 16746  0055AC  D826               	call	PL438	;call to abstracted procedure
 16747  0055AE  0E0E               	movlw	14
 16748  0055B0  EC29  F02F         	call	_ENCx24_Write
 16749                           
 16750                           ;encX24J600_driver.c: 433: ENCx24_BFC(XJ600_ECON1L, 0x0004);
 16751  0055B4  6A06               	clrf	ENCx24_BFC@bitMask+1,c
 16752  0055B6  0E04               	movlw	4
 16753  0055B8  6E05               	movwf	ENCx24_BFC@bitMask,c
 16754  0055BA  0EFE               	movlw	254
 16755  0055BC  ECAA  F02F         	call	_ENCx24_BFC
 16756                           
 16757                           ;encX24J600_driver.c: 437: ENCx24_BFS(XJ600_ECON1L, 0b0000000000111000);
 16758  0055C0  6A06               	clrf	ENCx24_BFS@bitMask+1,c
 16759  0055C2  0E38               	movlw	56
 16760  0055C4  6E05               	movwf	ENCx24_BFS@bitMask,c
 16761  0055C6  0EFE               	movlw	254
 16762  0055C8  EC8A  F02F         	call	_ENCx24_BFS
 16763  0055CC                     i6L__ptext101:
 16764                           	opt stack 0
 16765  0055CC                     i6L_waitForDMA:
 16766                           	opt stack 0
 16767  0055CC                     i6Ll501:
 16768                           	opt stack 0
 16769  0055CC                     i6Ll8150:
 16770                           	opt stack 18
 16771                           
 16772                           ;encX24J600_driver.c: 487: {
 16773                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 16774  0055CC  0EFE               	movlw	254
 16775  0055CE  EC04  F02F         	call	_ENCx24_Read
 16776  0055D2  EC11  F029         	call	PL298	;call to abstracted procedure
 16777  0055D6                     i6Ll8152:
 16778                           	opt stack 18
 16779                           
 16780                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 16781  0055D6  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 16782  0055D8                     i6Lu10751:
 16783                           	opt stack 0
 16784  0055D8  D7F9               	goto	i6Ll501
 16785  0055DA                     i6Lu10750:
 16786                           	opt stack 0
 16787  0055DA                     i6Ll503:
 16788                           	opt stack 18
 16789                           
 16790                           ;encX24J600_driver.c: 441: txBufferAddress += len;
 16791  0055DA  500D               	movf	ETH_Copy@len,w,c
 16792  0055DC  260F               	addwf	ETH_Copy@txBufferAddress,f,c
 16793  0055DE  500E               	movf	ETH_Copy@len+1,w,c
 16794  0055E0  2210               	addwfc	ETH_Copy@txBufferAddress+1,f,c
 16795                           
 16796                           ;encX24J600_driver.c: 443: ENCx24_Write(XJ600_EGPWRPTL, txBufferAddress);
 16797  0055E2  D80B               	call	PL438	;call to abstracted procedure
 16798  0055E4  0E88               	movlw	136
 16799  0055E6  EC29  F02F         	call	_ENCx24_Write
 16800                           
 16801                           ;encX24J600_driver.c: 445: TXPacketSize += len;
 16802  0055EA  500D               	movf	ETH_Copy@len,w,c
 16803  0055EC  0101               	movlb	1	; () banked
 16804  0055EE  279E               	addwf	_TXPacketSize& (0+255),f,b
 16805  0055F0  500E               	movf	ETH_Copy@len+1,w,c
 16806  0055F2  239F               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 16807                           
 16808                           ; BSR set to: 1
 16809                           ;encX24J600_driver.c: 447: return SUCCESS;
 16810  0055F4  0C01               	retlw	1
 16811  0055F6                     l491:
 16812  0055F6  00FF               	reset		;# 
 16813                           
 16814                           ;encX24J600_driver.c: 450: return DMA_TIMEOUT;
 16815  0055F8  0C0C               	retlw	12	;funcret
 16816  0055FA                     __end_of_ETH_Copy:
 16817                           	opt stack 0
 16818  0055FA                     PL438:
 16819                           	opt stack 18
 16820  0055FA  C00F  F005         	movff	ETH_Copy@txBufferAddress,ENCx24_Write@data
 16821  0055FE  C010  F006         	movff	ETH_Copy@txBufferAddress+1,ENCx24_Write@data+1
 16822  005602  0012               	return	
 16823  005604                     __end_ofPL438:
 16824                           	opt stack 0
 16825                           tosu	equ	0xFFF
 16826                           tosh	equ	0xFFE
 16827                           tosl	equ	0xFFD
 16828                           pclath	equ	0xFFA
 16829                           tblptru	equ	0xFF8
 16830                           tblptrh	equ	0xFF7
 16831                           tblptrl	equ	0xFF6
 16832                           tablat	equ	0xFF5
 16833                           prodh	equ	0xFF4
 16834                           prodl	equ	0xFF3
 16835                           intcon	equ	0xFF2
 16836                           intcon2	equ	0xFF1
 16837                           indf0	equ	0xFEF
 16838                           postinc0	equ	0xFEE
 16839                           fsr0h	equ	0xFEA
 16840                           fsr0l	equ	0xFE9
 16841                           wreg	equ	0xFE8
 16842                           postinc1	equ	0xFE6
 16843                           plusw1	equ	0xFE3
 16844                           fsr1h	equ	0xFE2
 16845                           fsr1l	equ	0xFE1
 16846                           bsr	equ	0xFE0
 16847                           indf2	equ	0xFDF
 16848                           postinc2	equ	0xFDE
 16849                           postdec2	equ	0xFDD
 16850                           plusw2	equ	0xFDB
 16851                           fsr2h	equ	0xFDA
 16852                           fsr2l	equ	0xFD9
 16853                           status	equ	0xFD8
 16854                           
 16855 ;; *************** function _ETH_RxComputeChecksum *****************
 16856 ;; Defined at:
 16857 ;;		line 545 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 16858 ;; Parameters:    Size  Location     Type
 16859 ;;  len             2   12[COMRAM] unsigned int 
 16860 ;;  seed            2   14[COMRAM] unsigned int 
 16861 ;; Auto vars:     Size  Location     Type
 16862 ;;  econ1Val        2   24[COMRAM] unsigned int 
 16863 ;;  rxPtr           2   22[COMRAM] unsigned int 
 16864 ;;  cksm            2   20[COMRAM] unsigned int 
 16865 ;; Return value:  Size  Location     Type
 16866 ;;                  2   12[COMRAM] unsigned int 
 16867 ;; Registers used:
 16868 ;;		wreg, status,2, status,0, cstack
 16869 ;; Tracked objects:
 16870 ;;		On entry : F/0
 16871 ;;		On exit  : 0/0
 16872 ;;		Unchanged: 0/0
 16873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16875 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16876 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16877 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16878 ;;Total ram usage:       14 bytes
 16879 ;; Hardware stack levels used:    1
 16880 ;; Hardware stack levels required when called:    7
 16881 ;; This function calls:
 16882 ;;		_ENCx24_BFC
 16883 ;;		_ENCx24_BFS
 16884 ;;		_ENCx24_Read
 16885 ;;		_ENCx24_Write
 16886 ;;		_waitForDMA
 16887 ;; This function is called by:
 16888 ;;		_IPV4_Packet
 16889 ;; This function uses a non-reentrant model
 16890 ;;
 16891                           
 16892                           	psect	text58
 16893  005178                     __ptext58:
 16894                           	opt stack 0
 16895  005178                     _ETH_RxComputeChecksum:
 16896                           	opt stack 0
 16897  005178                     i7L__ptext101:
 16898                           	opt stack 0
 16899  005178                     i7L_waitForDMA:
 16900                           	opt stack 0
 16901  005178                     i7Ll501:
 16902                           	opt stack 0
 16903  005178                     i7Ll8150:
 16904                           	opt stack 18
 16905                           
 16906                           ;encX24J600_driver.c: 487: {
 16907                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 16908  005178  0EFE               	movlw	254
 16909  00517A  EC04  F02F         	call	_ENCx24_Read
 16910  00517E  D851               	call	PL298	;call to abstracted procedure
 16911  005180                     i7Ll8152:
 16912                           	opt stack 18
 16913                           
 16914                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 16915  005180  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 16916  005182                     i7Lu10751:
 16917                           	opt stack 0
 16918  005182  D7FA               	goto	i7Ll501
 16919  005184                     i7Lu10750:
 16920                           	opt stack 0
 16921  005184                     i7Ll503:
 16922                           	opt stack 0
 16923                           
 16924                           ;encX24J600_driver.c: 560: ENCx24_BFC(XJ600_ECON1L, econ1Val);
 16925  005184  ECC1  F029         	call	PL486	;call to abstracted procedure
 16926  005188  ECAA  F02F         	call	_ENCx24_BFC
 16927                           
 16928                           ;encX24J600_driver.c: 562: rxPtr = ENCx24_Read(XJ600_ERXRDPTL);
 16929  00518C  0E8A               	movlw	138
 16930  00518E  EC04  F02F         	call	_ENCx24_Read
 16931  005192  C005  F017         	movff	?_ENCx24_Read,ETH_RxComputeChecksum@rxPtr
 16932  005196  C006  F018         	movff	?_ENCx24_Read+1,ETH_RxComputeChecksum@rxPtr+1
 16933                           
 16934                           ;encX24J600_driver.c: 565: ENCx24_Write(XJ600_EDMASTL, rxPtr);
 16935  00519A  D848               	call	PL476	;call to abstracted procedure
 16936  00519C  0E0A               	movlw	10
 16937  00519E  EC29  F02F         	call	_ENCx24_Write
 16938                           
 16939                           ;encX24J600_driver.c: 567: ENCx24_Write(XJ600_EDMALENL, len);
 16940  0051A2  C00D  F005         	movff	ETH_RxComputeChecksum@len,ENCx24_Write@data
 16941  0051A6  C00E  F006         	movff	ETH_RxComputeChecksum@len+1,ENCx24_Write@data+1
 16942  0051AA  0E0C               	movlw	12
 16943  0051AC  EC29  F02F         	call	_ENCx24_Write
 16944                           
 16945                           ;encX24J600_driver.c: 569: econ1Val = 0x0020;
 16946  0051B0  6A1A               	clrf	ETH_RxComputeChecksum@econ1Val+1,c
 16947  0051B2  0E20               	movlw	32
 16948  0051B4  6E19               	movwf	ETH_RxComputeChecksum@econ1Val,c
 16949                           
 16950                           ;encX24J600_driver.c: 570: if (seed)
 16951  0051B6  500F               	movf	ETH_RxComputeChecksum@seed,w,c
 16952  0051B8  1010               	iorwf	ETH_RxComputeChecksum@seed+1,w,c
 16953  0051BA  E016               	bz	l9580
 16954                           
 16955                           ;encX24J600_driver.c: 571: {
 16956                           ;encX24J600_driver.c: 572: econ1Val |= 0x0008;
 16957  0051BC  8619               	bsf	ETH_RxComputeChecksum@econ1Val,3,c
 16958                           
 16959                           ;encX24J600_driver.c: 573: seed=~(seed);
 16960  0051BE  1E0F               	comf	ETH_RxComputeChecksum@seed,f,c
 16961  0051C0  1E10               	comf	ETH_RxComputeChecksum@seed+1,f,c
 16962                           
 16963                           ;encX24J600_driver.c: 574: seed = ((((uint16_t)seed & (uint16_t)0xFF00) >> 8) | (((uint1
      +                          6_t)seed & (uint16_t)0x00FF) << 8));
 16964  0051C2  500F               	movf	ETH_RxComputeChecksum@seed,w,c
 16965  0051C4  6E12               	movwf	(??_ETH_RxComputeChecksum+1)& (0+255),c
 16966  0051C6  6A11               	clrf	??_ETH_RxComputeChecksum& (0+255),c
 16967  0051C8  5010               	movf	ETH_RxComputeChecksum@seed+1,w,c
 16968  0051CA  6E13               	movwf	(??_ETH_RxComputeChecksum+2)& (0+255),c
 16969  0051CC  6A14               	clrf	(??_ETH_RxComputeChecksum+3)& (0+255),c
 16970  0051CE  5011               	movf	??_ETH_RxComputeChecksum,w,c
 16971  0051D0  1013               	iorwf	??_ETH_RxComputeChecksum+2,w,c
 16972  0051D2  6E0F               	movwf	ETH_RxComputeChecksum@seed,c
 16973  0051D4  5012               	movf	??_ETH_RxComputeChecksum+1,w,c
 16974  0051D6  1014               	iorwf	??_ETH_RxComputeChecksum+3,w,c
 16975  0051D8  6E10               	movwf	ETH_RxComputeChecksum@seed+1,c
 16976                           
 16977                           ;encX24J600_driver.c: 575: ENCx24_Write(XJ600_EDMACSL, seed);
 16978  0051DA  C00F  F005         	movff	ETH_RxComputeChecksum@seed,ENCx24_Write@data
 16979  0051DE  C010  F006         	movff	ETH_RxComputeChecksum@seed+1,ENCx24_Write@data+1
 16980  0051E2  0E10               	movlw	16
 16981  0051E4  EC29  F02F         	call	_ENCx24_Write
 16982  0051E8                     l9580:
 16983                           
 16984                           ;encX24J600_driver.c: 576: }
 16985                           ;encX24J600_driver.c: 579: ENCx24_BFS(XJ600_ECON1L, econ1Val);
 16986  0051E8  C019  F005         	movff	ETH_RxComputeChecksum@econ1Val,ENCx24_BFS@bitMask
 16987  0051EC  C01A  F006         	movff	ETH_RxComputeChecksum@econ1Val+1,ENCx24_BFS@bitMask+1
 16988  0051F0  0EFE               	movlw	254
 16989  0051F2  EC8A  F02F         	call	_ENCx24_BFS
 16990  0051F6                     i8L__ptext101:
 16991                           	opt stack 0
 16992  0051F6                     i8L_waitForDMA:
 16993                           	opt stack 0
 16994  0051F6                     i8Ll501:
 16995                           	opt stack 0
 16996  0051F6                     i8Ll8150:
 16997                           	opt stack 18
 16998                           
 16999                           ;encX24J600_driver.c: 487: {
 17000                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 17001  0051F6  0EFE               	movlw	254
 17002  0051F8  EC04  F02F         	call	_ENCx24_Read
 17003  0051FC  D812               	call	PL298	;call to abstracted procedure
 17004  0051FE                     i8Ll8152:
 17005                           	opt stack 18
 17006                           
 17007                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 17008  0051FE  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 17009  005200                     i8Lu10751:
 17010                           	opt stack 0
 17011  005200  D7FA               	goto	i8Ll501
 17012  005202                     i8Lu10750:
 17013                           	opt stack 0
 17014  005202                     i8Ll503:
 17015                           	opt stack 20
 17016                           
 17017                           ;encX24J600_driver.c: 582: cksm = ENCx24_Read(XJ600_EDMACSL);
 17018  005202  0E10               	movlw	16
 17019  005204  EC04  F02F         	call	_ENCx24_Read
 17020  005208  C005  F015         	movff	?_ENCx24_Read,ETH_RxComputeChecksum@cksm
 17021  00520C  C006  F016         	movff	?_ENCx24_Read+1,ETH_RxComputeChecksum@cksm+1
 17022                           
 17023                           ;encX24J600_driver.c: 584: ENCx24_Write(XJ600_ERXRDPTL, rxPtr);
 17024  005210  D80D               	call	PL476	;call to abstracted procedure
 17025  005212  0E8A               	movlw	138
 17026  005214  EC29  F02F         	call	_ENCx24_Write
 17027                           
 17028                           ;encX24J600_driver.c: 586: return cksm;
 17029  005218  C015  F00D         	movff	ETH_RxComputeChecksum@cksm,?_ETH_RxComputeChecksum
 17030  00521C  C016  F00E         	movff	ETH_RxComputeChecksum@cksm+1,?_ETH_RxComputeChecksum+1
 17031  005220  0012               	return		;funcret
 17032  005222                     __end_of_ETH_RxComputeChecksum:
 17033                           	opt stack 0
 17034  005222                     PL298:
 17035                           	opt stack 18
 17036  005222  C005  F00B         	movff	?_ENCx24_Read,waitForDMA@econ1_val
 17037  005226  C006  F00C         	movff	?_ENCx24_Read+1,waitForDMA@econ1_val+1
 17038  00522A  0012               	return	
 17039  00522C                     __end_ofPL298:
 17040                           	opt stack 0
 17041  00522C                     PL476:
 17042                           	opt stack 20
 17043  00522C  C017  F005         	movff	ETH_RxComputeChecksum@rxPtr,ENCx24_Write@data
 17044  005230  C018  F006         	movff	ETH_RxComputeChecksum@rxPtr+1,ENCx24_Write@data+1
 17045  005234  0012               	return	
 17046  005236                     __end_ofPL476:
 17047                           	opt stack 0
 17048                           tosu	equ	0xFFF
 17049                           tosh	equ	0xFFE
 17050                           tosl	equ	0xFFD
 17051                           pclath	equ	0xFFA
 17052                           tblptru	equ	0xFF8
 17053                           tblptrh	equ	0xFF7
 17054                           tblptrl	equ	0xFF6
 17055                           tablat	equ	0xFF5
 17056                           prodh	equ	0xFF4
 17057                           prodl	equ	0xFF3
 17058                           intcon	equ	0xFF2
 17059                           intcon2	equ	0xFF1
 17060                           indf0	equ	0xFEF
 17061                           postinc0	equ	0xFEE
 17062                           fsr0h	equ	0xFEA
 17063                           fsr0l	equ	0xFE9
 17064                           wreg	equ	0xFE8
 17065                           postinc1	equ	0xFE6
 17066                           plusw1	equ	0xFE3
 17067                           fsr1h	equ	0xFE2
 17068                           fsr1l	equ	0xFE1
 17069                           bsr	equ	0xFE0
 17070                           indf2	equ	0xFDF
 17071                           postinc2	equ	0xFDE
 17072                           postdec2	equ	0xFDD
 17073                           plusw2	equ	0xFDB
 17074                           fsr2h	equ	0xFDA
 17075                           fsr2l	equ	0xFD9
 17076                           status	equ	0xFD8
 17077                           
 17078 ;; *************** function _ETH_NextPacketUpdate *****************
 17079 ;; Defined at:
 17080 ;;		line 278 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 17081 ;; Parameters:    Size  Location     Type
 17082 ;;		None
 17083 ;; Auto vars:     Size  Location     Type
 17084 ;;		None
 17085 ;; Return value:  Size  Location     Type
 17086 ;;		None               void
 17087 ;; Registers used:
 17088 ;;		wreg, status,2, status,0, cstack
 17089 ;; Tracked objects:
 17090 ;;		On entry : F/1
 17091 ;;		On exit  : F/2
 17092 ;;		Unchanged: 0/0
 17093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17098 ;;Total ram usage:        0 bytes
 17099 ;; Hardware stack levels used:    1
 17100 ;; Hardware stack levels required when called:    5
 17101 ;; This function calls:
 17102 ;;		_ETH_SetRXptr
 17103 ;;		_SPI_ExchangeByte
 17104 ;; This function is called by:
 17105 ;;		_Network_Read
 17106 ;; This function uses a non-reentrant model
 17107 ;;
 17108                           
 17109                           	psect	text59
 17110  005850                     __ptext59:
 17111                           	opt stack 0
 17112  005850                     _ETH_NextPacketUpdate:
 17113                           	opt stack 23
 17114                           
 17115                           ; BSR set to: 1
 17116                           ;encX24J600_driver.c: 280: ETH_SetRXptr(nextPacketPointer);
 17117                           
 17118                           ;incstack = 0
 17119  005850  C1A6  F003         	movff	_nextPacketPointer,ETH_SetRXptr@address
 17120  005854  C1A7  F004         	movff	_nextPacketPointer+1,ETH_SetRXptr@address+1
 17121  005858  EC72  F032         	call	_ETH_SetRXptr	;wreg free
 17122  00585C  968A               	bcf	3978,3,c	;volatile
 17123                           
 17124                           ;encX24J600_driver.c: 283: SPI_ExchangeByte(rrxdata_inst);
 17125  00585E  0E2C               	movlw	44
 17126  005860  ECF3  F032         	call	_SPI_ExchangeByte
 17127                           
 17128                           ;encX24J600_driver.c: 284: ((char *) &nextPacketPointer)[0] = SPI_ExchangeByte(0);
 17129  005864  0E00               	movlw	0
 17130  005866  ECF3  F032         	call	_SPI_ExchangeByte
 17131  00586A  0101               	movlb	1	; () banked
 17132  00586C  6FA6               	movwf	_nextPacketPointer& (0+255),b
 17133                           
 17134                           ;encX24J600_driver.c: 285: ((char *) &nextPacketPointer)[1] = SPI_ExchangeByte(0);
 17135  00586E  0E00               	movlw	0
 17136  005870  ECF3  F032         	call	_SPI_ExchangeByte
 17137  005874  0101               	movlb	1	; () banked
 17138  005876  6FA7               	movwf	(_nextPacketPointer+1)& (0+255),b
 17139                           
 17140                           ;encX24J600_driver.c: 286: ((char *) &rxPacketStatusVector)[0] = SPI_ExchangeByte(0);
 17141  005878  0E00               	movlw	0
 17142  00587A  ECF3  F032         	call	_SPI_ExchangeByte
 17143  00587E  0102               	movlb	2	; () banked
 17144  005880  6F18               	movwf	_rxPacketStatusVector& (0+255),b
 17145                           
 17146                           ;encX24J600_driver.c: 287: ((char *) &rxPacketStatusVector)[1] = SPI_ExchangeByte(0);
 17147  005882  0E00               	movlw	0
 17148  005884  ECF3  F032         	call	_SPI_ExchangeByte
 17149  005888  0102               	movlb	2	; () banked
 17150  00588A  6F19               	movwf	(_rxPacketStatusVector+1)& (0+255),b
 17151                           
 17152                           ;encX24J600_driver.c: 288: ((char *) &rxPacketStatusVector)[2] = SPI_ExchangeByte(0);
 17153  00588C  0E00               	movlw	0
 17154  00588E  ECF3  F032         	call	_SPI_ExchangeByte
 17155  005892  0102               	movlb	2	; () banked
 17156  005894  6F1A               	movwf	(_rxPacketStatusVector+2)& (0+255),b
 17157                           
 17158                           ;encX24J600_driver.c: 289: ((char *) &rxPacketStatusVector)[3] = SPI_ExchangeByte(0);
 17159  005896  0E00               	movlw	0
 17160  005898  ECF3  F032         	call	_SPI_ExchangeByte
 17161  00589C  0102               	movlb	2	; () banked
 17162  00589E  6F1B               	movwf	(_rxPacketStatusVector+3)& (0+255),b
 17163                           
 17164                           ;encX24J600_driver.c: 290: ((char *) &rxPacketStatusVector)[4] = SPI_ExchangeByte(0);
 17165  0058A0  0E00               	movlw	0
 17166  0058A2  ECF3  F032         	call	_SPI_ExchangeByte
 17167  0058A6  0102               	movlb	2	; () banked
 17168  0058A8  6F1C               	movwf	(_rxPacketStatusVector+4)& (0+255),b
 17169                           
 17170                           ;encX24J600_driver.c: 291: ((char *) &rxPacketStatusVector)[5] = SPI_ExchangeByte(0);
 17171  0058AA  0E00               	movlw	0
 17172  0058AC  ECF3  F032         	call	_SPI_ExchangeByte
 17173  0058B0  0102               	movlb	2	; () banked
 17174  0058B2  6F1D               	movwf	(_rxPacketStatusVector+5)& (0+255),b
 17175                           
 17176                           ; BSR set to: 2
 17177  0058B4  868A               	bsf	3978,3,c	;volatile
 17178                           
 17179                           ; BSR set to: 2
 17180                           ;encX24J600_driver.c: 295: rxPacketStatusVector.ByteCount -= 4;
 17181  0058B6  0E04               	movlw	4
 17182  0058B8  5F18               	subwf	_rxPacketStatusVector& (0+255),f,b
 17183  0058BA  0E00               	movlw	0
 17184  0058BC  5B19               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
 17185                           
 17186                           ; BSR set to: 2
 17187  0058BE  0C00               	retlw	0	;funcret
 17188  0058C0                     __end_of_ETH_NextPacketUpdate:
 17189                           	opt stack 0
 17190                           tosu	equ	0xFFF
 17191                           tosh	equ	0xFFE
 17192                           tosl	equ	0xFFD
 17193                           pclath	equ	0xFFA
 17194                           tblptru	equ	0xFF8
 17195                           tblptrh	equ	0xFF7
 17196                           tblptrl	equ	0xFF6
 17197                           tablat	equ	0xFF5
 17198                           prodh	equ	0xFF4
 17199                           prodl	equ	0xFF3
 17200                           intcon	equ	0xFF2
 17201                           intcon2	equ	0xFF1
 17202                           indf0	equ	0xFEF
 17203                           postinc0	equ	0xFEE
 17204                           fsr0h	equ	0xFEA
 17205                           fsr0l	equ	0xFE9
 17206                           wreg	equ	0xFE8
 17207                           postinc1	equ	0xFE6
 17208                           plusw1	equ	0xFE3
 17209                           fsr1h	equ	0xFE2
 17210                           fsr1l	equ	0xFE1
 17211                           bsr	equ	0xFE0
 17212                           indf2	equ	0xFDF
 17213                           postinc2	equ	0xFDE
 17214                           postdec2	equ	0xFDD
 17215                           plusw2	equ	0xFDB
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _ETH_SetRXptr *****************
 17221 ;; Defined at:
 17222 ;;		line 456 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;  address         2    2[COMRAM] unsigned int 
 17225 ;; Auto vars:     Size  Location     Type
 17226 ;;		None
 17227 ;; Return value:  Size  Location     Type
 17228 ;;		None               void
 17229 ;; Registers used:
 17230 ;;		wreg, status,2, cstack
 17231 ;; Tracked objects:
 17232 ;;		On entry : F/1
 17233 ;;		On exit  : 0/0
 17234 ;;		Unchanged: 0/0
 17235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;Total ram usage:        2 bytes
 17241 ;; Hardware stack levels used:    1
 17242 ;; Hardware stack levels required when called:    4
 17243 ;; This function calls:
 17244 ;;		_SPI_ExchangeByte
 17245 ;; This function is called by:
 17246 ;;		_ETH_NextPacketUpdate
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text60
 17251  0064E4                     __ptext60:
 17252                           	opt stack 0
 17253  0064E4                     _ETH_SetRXptr:
 17254                           	opt stack 23
 17255                           
 17256                           ; BSR set to: 1
 17257                           
 17258                           ; BSR set to: 2
 17259                           ;incstack = 0
 17260                           ;encX24j600_spi.c: 459: do{LATB3 = 0;} while(0);
 17261  0064E4  968A               	bcf	3978,3,c	;volatile
 17262                           
 17263                           ; BSR set to: 1
 17264                           ;encX24j600_spi.c: 460: SPI_ExchangeByte(wrxrdpt_inst);
 17265  0064E6  0E64               	movlw	100
 17266  0064E8  ECF3  F032         	call	_SPI_ExchangeByte
 17267                           
 17268                           ;encX24j600_spi.c: 461: SPI_ExchangeByte(((uint8_t*) &address)[0]);
 17269  0064EC  5003               	movf	ETH_SetRXptr@address,w,c
 17270  0064EE  ECF3  F032         	call	_SPI_ExchangeByte
 17271                           
 17272                           ;encX24j600_spi.c: 462: SPI_ExchangeByte(((uint8_t*) &address)[1]);
 17273  0064F2  5004               	movf	ETH_SetRXptr@address+1,w,c
 17274  0064F4  ECF3  F032         	call	_SPI_ExchangeByte
 17275  0064F8  868A               	bsf	3978,3,c	;volatile
 17276  0064FA  0012               	return		;funcret
 17277  0064FC                     __end_of_ETH_SetRXptr:
 17278                           	opt stack 0
 17279                           tosu	equ	0xFFF
 17280                           tosh	equ	0xFFE
 17281                           tosl	equ	0xFFD
 17282                           pclath	equ	0xFFA
 17283                           tblptru	equ	0xFF8
 17284                           tblptrh	equ	0xFF7
 17285                           tblptrl	equ	0xFF6
 17286                           tablat	equ	0xFF5
 17287                           prodh	equ	0xFF4
 17288                           prodl	equ	0xFF3
 17289                           intcon	equ	0xFF2
 17290                           intcon2	equ	0xFF1
 17291                           indf0	equ	0xFEF
 17292                           postinc0	equ	0xFEE
 17293                           fsr0h	equ	0xFEA
 17294                           fsr0l	equ	0xFE9
 17295                           wreg	equ	0xFE8
 17296                           postinc1	equ	0xFE6
 17297                           plusw1	equ	0xFE3
 17298                           fsr1h	equ	0xFE2
 17299                           fsr1l	equ	0xFE1
 17300                           bsr	equ	0xFE0
 17301                           indf2	equ	0xFDF
 17302                           postinc2	equ	0xFDE
 17303                           postdec2	equ	0xFDD
 17304                           plusw2	equ	0xFDB
 17305                           fsr2h	equ	0xFDA
 17306                           fsr2l	equ	0xFD9
 17307                           status	equ	0xFD8
 17308                           
 17309 ;; *************** function _ETH_Flush *****************
 17310 ;; Defined at:
 17311 ;;		line 341 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;		None
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  newRXTail       2    8[COMRAM] unsigned int 
 17316 ;; Return value:  Size  Location     Type
 17317 ;;		None               void
 17318 ;; Registers used:
 17319 ;;		wreg, status,2, status,0, cstack
 17320 ;; Tracked objects:
 17321 ;;		On entry : 0/1
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;Total ram usage:        2 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:    6
 17332 ;; This function calls:
 17333 ;;		_ENCx24_Write
 17334 ;;		_ETH_SetPktDec
 17335 ;; This function is called by:
 17336 ;;		_Network_Read
 17337 ;; This function uses a non-reentrant model
 17338 ;;
 17339                           
 17340                           	psect	text61
 17341  0060BA                     __ptext61:
 17342                           	opt stack 0
 17343  0060BA                     _ETH_Flush:
 17344                           	opt stack 22
 17345                           
 17346                           ;encX24J600_driver.c: 343: uint16_t newRXTail = nextPacketPointer - 2;
 17347                           
 17348                           ;incstack = 0
 17349  0060BA  0EFE               	movlw	254
 17350  0060BC  0101               	movlb	1	; () banked
 17351  0060BE  25A6               	addwf	_nextPacketPointer& (0+255),w,b
 17352  0060C0  6E09               	movwf	ETH_Flush@newRXTail,c
 17353  0060C2  0EFF               	movlw	255
 17354  0060C4  21A7               	addwfc	(_nextPacketPointer+1)& (0+255),w,b
 17355  0060C6  6E0A               	movwf	ETH_Flush@newRXTail+1,c
 17356                           
 17357                           ;encX24J600_driver.c: 346: if (nextPacketPointer == 0x1600ul)
 17358  0060C8  0E16               	movlw	22
 17359  0060CA  19A7               	xorwf	(_nextPacketPointer+1)& (0+255),w,b
 17360  0060CC  11A6               	iorwf	_nextPacketPointer& (0+255),w,b
 17361  0060CE  E104               	bnz	l9912
 17362                           
 17363                           ; BSR set to: 1
 17364                           ;encX24J600_driver.c: 347: newRXTail = 0x6000ul - 2;
 17365  0060D0  0E5F               	movlw	95
 17366  0060D2  6E0A               	movwf	ETH_Flush@newRXTail+1,c
 17367  0060D4  0EFE               	movlw	254
 17368  0060D6  6E09               	movwf	ETH_Flush@newRXTail,c
 17369  0060D8                     l9912:
 17370                           
 17371                           ; BSR set to: 1
 17372                           ;encX24J600_driver.c: 350: ETH_SetPktDec();
 17373  0060D8  EC00  F033         	call	_ETH_SetPktDec	;wreg free
 17374                           
 17375                           ;encX24J600_driver.c: 351: ethData.pktReady = 0;
 17376  0060DC  0101               	movlb	1	; () banked
 17377  0060DE  9383               	bcf	_ethData& (0+255),1,b	;volatile
 17378                           
 17379                           ; BSR set to: 1
 17380                           ;encX24J600_driver.c: 354: ENCx24_Write(XJ600_ERXTAILL, newRXTail);
 17381  0060E0  C009  F005         	movff	ETH_Flush@newRXTail,ENCx24_Write@data
 17382  0060E4  C00A  F006         	movff	ETH_Flush@newRXTail+1,ENCx24_Write@data+1
 17383  0060E8  0E06               	movlw	6
 17384  0060EA  EF29  F02F         	goto	_ENCx24_Write
 17385  0060EE                     __end_of_ETH_Flush:
 17386                           	opt stack 0
 17387                           tosu	equ	0xFFF
 17388                           tosh	equ	0xFFE
 17389                           tosl	equ	0xFFD
 17390                           pclath	equ	0xFFA
 17391                           tblptru	equ	0xFF8
 17392                           tblptrh	equ	0xFF7
 17393                           tblptrl	equ	0xFF6
 17394                           tablat	equ	0xFF5
 17395                           prodh	equ	0xFF4
 17396                           prodl	equ	0xFF3
 17397                           intcon	equ	0xFF2
 17398                           intcon2	equ	0xFF1
 17399                           indf0	equ	0xFEF
 17400                           postinc0	equ	0xFEE
 17401                           fsr0h	equ	0xFEA
 17402                           fsr0l	equ	0xFE9
 17403                           wreg	equ	0xFE8
 17404                           postinc1	equ	0xFE6
 17405                           plusw1	equ	0xFE3
 17406                           fsr1h	equ	0xFE2
 17407                           fsr1l	equ	0xFE1
 17408                           bsr	equ	0xFE0
 17409                           indf2	equ	0xFDF
 17410                           postinc2	equ	0xFDE
 17411                           postdec2	equ	0xFDD
 17412                           plusw2	equ	0xFDB
 17413                           fsr2h	equ	0xFDA
 17414                           fsr2l	equ	0xFD9
 17415                           status	equ	0xFD8
 17416                           
 17417 ;; *************** function _ETH_SetPktDec *****************
 17418 ;; Defined at:
 17419 ;;		line 445 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 17420 ;; Parameters:    Size  Location     Type
 17421 ;;		None
 17422 ;; Auto vars:     Size  Location     Type
 17423 ;;		None
 17424 ;; Return value:  Size  Location     Type
 17425 ;;		None               void
 17426 ;; Registers used:
 17427 ;;		wreg, status,2, cstack
 17428 ;; Tracked objects:
 17429 ;;		On entry : F/1
 17430 ;;		On exit  : 0/0
 17431 ;;		Unchanged: 0/0
 17432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17437 ;;Total ram usage:        0 bytes
 17438 ;; Hardware stack levels used:    1
 17439 ;; Hardware stack levels required when called:    4
 17440 ;; This function calls:
 17441 ;;		_SPI_ExchangeByte
 17442 ;; This function is called by:
 17443 ;;		_ETH_Flush
 17444 ;; This function uses a non-reentrant model
 17445 ;;
 17446                           
 17447                           	psect	text62
 17448  006600                     __ptext62:
 17449                           	opt stack 0
 17450  006600                     _ETH_SetPktDec:
 17451                           	opt stack 23
 17452                           
 17453                           ; BSR set to: 1
 17454                           
 17455                           ;incstack = 0
 17456                           ;encX24j600_spi.c: 448: do{LATB3 = 0;} while(0);
 17457  006600  968A               	bcf	3978,3,c	;volatile
 17458                           
 17459                           ; BSR set to: 1
 17460                           ;encX24j600_spi.c: 449: SPI_ExchangeByte(setpktdec_inst);
 17461  006602  0ECC               	movlw	204
 17462  006604  ECF3  F032         	call	_SPI_ExchangeByte
 17463  006608  868A               	bsf	3978,3,c	;volatile
 17464  00660A  0012               	return		;funcret
 17465  00660C                     __end_of_ETH_SetPktDec:
 17466                           	opt stack 0
 17467                           tosu	equ	0xFFF
 17468                           tosh	equ	0xFFE
 17469                           tosl	equ	0xFFD
 17470                           pclath	equ	0xFFA
 17471                           tblptru	equ	0xFF8
 17472                           tblptrh	equ	0xFF7
 17473                           tblptrl	equ	0xFF6
 17474                           tablat	equ	0xFF5
 17475                           prodh	equ	0xFF4
 17476                           prodl	equ	0xFF3
 17477                           intcon	equ	0xFF2
 17478                           intcon2	equ	0xFF1
 17479                           indf0	equ	0xFEF
 17480                           postinc0	equ	0xFEE
 17481                           fsr0h	equ	0xFEA
 17482                           fsr0l	equ	0xFE9
 17483                           wreg	equ	0xFE8
 17484                           postinc1	equ	0xFE6
 17485                           plusw1	equ	0xFE3
 17486                           fsr1h	equ	0xFE2
 17487                           fsr1l	equ	0xFE1
 17488                           bsr	equ	0xFE0
 17489                           indf2	equ	0xFDF
 17490                           postinc2	equ	0xFDE
 17491                           postdec2	equ	0xFDD
 17492                           plusw2	equ	0xFDB
 17493                           fsr2h	equ	0xFDA
 17494                           fsr2l	equ	0xFD9
 17495                           status	equ	0xFD8
 17496                           
 17497 ;; *************** function _ARPV4_Packet *****************
 17498 ;; Defined at:
 17499 ;;		line 97 in file "../../TCPIP Library/source/arpv4.c"
 17500 ;; Parameters:    Size  Location     Type
 17501 ;;		None
 17502 ;; Auto vars:     Size  Location     Type
 17503 ;;  x               1   53[COMRAM] unsigned char 
 17504 ;;  arpPtr          2   50[COMRAM] PTR struct .
 17505 ;;		 -> arpMap(104), 
 17506 ;;  x               1   52[COMRAM] unsigned char 
 17507 ;;  header         28   56[COMRAM] struct .
 17508 ;;  entryPointer    2   54[COMRAM] PTR struct .
 17509 ;;		 -> arpMap(104), 
 17510 ;;  length          2   46[COMRAM] unsigned int 
 17511 ;;  ret             1   49[COMRAM] enum E450
 17512 ;;  mergeFlag       1   48[COMRAM] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  1    wreg      enum E450
 17515 ;; Registers used:
 17516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/1
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:         32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:        70       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:       70 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    7
 17529 ;; This function calls:
 17530 ;;		_ETH_GetMAC
 17531 ;;		_ETH_ReadBlock
 17532 ;;		_ETH_Send
 17533 ;;		_ETH_WriteBlock
 17534 ;;		_ETH_WriteStart
 17535 ;; This function is called by:
 17536 ;;		_Network_Read
 17537 ;; This function uses a non-reentrant model
 17538 ;;
 17539                           
 17540                           	psect	text63
 17541  0034A8                     __ptext63:
 17542                           	opt stack 0
 17543  0034A8                     _ARPV4_Packet:
 17544                           	opt stack 21
 17545                           
 17546                           ;arpv4.c: 107: length = ETH_ReadBlock((char*)&header,sizeof(arpHeader_t));
 17547                           
 17548                           ;incstack = 0
 17549  0034A8  0E39               	movlw	low ARPV4_Packet@header
 17550  0034AA  6E03               	movwf	ETH_ReadBlock@data,c
 17551  0034AC  6A04               	clrf	ETH_ReadBlock@data+1,c
 17552  0034AE  6A06               	clrf	ETH_ReadBlock@length+1,c
 17553  0034B0  0E1C               	movlw	28
 17554  0034B2  6E05               	movwf	ETH_ReadBlock@length,c
 17555  0034B4  EC9A  F02B         	call	_ETH_ReadBlock	;wreg free
 17556  0034B8  C003  F02F         	movff	?_ETH_ReadBlock,ARPV4_Packet@length
 17557  0034BC  C004  F030         	movff	?_ETH_ReadBlock+1,ARPV4_Packet@length+1
 17558                           
 17559                           ; BSR set to: 1
 17560                           ;arpv4.c: 108: if(length == sizeof(arpHeader_t))
 17561  0034C0  0E1C               	movlw	28
 17562  0034C2  182F               	xorwf	ARPV4_Packet@length,w,c
 17563  0034C4  1030               	iorwf	ARPV4_Packet@length+1,w,c
 17564  0034C6  A4D8               	btfss	status,2,c
 17565  0034C8  0012               	return	
 17566                           
 17567                           ; BSR set to: 1
 17568                           ;arpv4.c: 109: {
 17569                           ;arpv4.c: 111: mergeFlag = 0;
 17570  0034CA  6A31               	clrf	ARPV4_Packet@mergeFlag,c
 17571                           
 17572                           ; BSR set to: 1
 17573                           ;arpv4.c: 112: entryPointer = arpMap;
 17574  0034CC  D988               	call	PL452	;call to abstracted procedure
 17575                           
 17576                           ; BSR set to: 1
 17577                           ;arpv4.c: 114: for(uint8_t x=8; x > 0; x--)
 17578  0034CE  0E08               	movlw	8
 17579  0034D0  6E35               	movwf	ARPV4_Packet@x,c
 17580  0034D2                     l9934:
 17581                           
 17582                           ; BSR set to: 1
 17583                           ;arpv4.c: 115: {
 17584                           ;arpv4.c: 116: if( (header.spa == entryPointer->ipAddress) && (header.ptype == entryPoin
      +                          ter->protocolType) )
 17585  0034D2  EE20 F006          	lfsr	2,6
 17586  0034D6  D97E               	call	PL290	;call to abstracted procedure
 17587  0034D8  50DE               	movf	postinc2,w,c
 17588  0034DA  1847               	xorwf	ARPV4_Packet@header+14,w,c
 17589  0034DC  E11A               	bnz	l9944
 17590  0034DE  50DE               	movf	postinc2,w,c
 17591  0034E0  1848               	xorwf	ARPV4_Packet@header+15,w,c
 17592  0034E2  E117               	bnz	l9944
 17593  0034E4  50DE               	movf	postinc2,w,c
 17594  0034E6  1849               	xorwf	ARPV4_Packet@header+16,w,c
 17595  0034E8  E114               	bnz	l9944
 17596  0034EA  50DE               	movf	postinc2,w,c
 17597  0034EC  184A               	xorwf	ARPV4_Packet@header+17,w,c
 17598  0034EE  E111               	bnz	l9944
 17599                           
 17600                           ; BSR set to: 1
 17601  0034F0  EE20 F00A          	lfsr	2,10
 17602  0034F4  D96F               	call	PL290	;call to abstracted procedure
 17603  0034F6  50DE               	movf	postinc2,w,c
 17604  0034F8  183B               	xorwf	ARPV4_Packet@header+2,w,c
 17605  0034FA  E10B               	bnz	l9944
 17606  0034FC  50DE               	movf	postinc2,w,c
 17607  0034FE  183C               	xorwf	ARPV4_Packet@header+3,w,c
 17608  003500  E108               	bnz	l9944
 17609                           
 17610                           ; BSR set to: 1
 17611                           ;arpv4.c: 117: {
 17612                           ;arpv4.c: 118: entryPointer->age = 0;
 17613                           
 17614                           ; BSR set to: 1
 17615                           ;arpv4.c: 119: entryPointer->macAddress.s = header.sha.s;
 17616  003502  D94D               	call	PL230	;call to abstracted procedure
 17617  003504                     u15051:
 17618  003504  CFDB FFE3          	movff	plusw2,plusw1
 17619  003508  06E8               	decf	wreg,f,c
 17620  00350A  E2FC               	bc	u15051
 17621                           
 17622                           ; BSR set to: 1
 17623                           ;arpv4.c: 120: mergeFlag = 1;
 17624  00350C  0E01               	movlw	1
 17625  00350E  6E31               	movwf	ARPV4_Packet@mergeFlag,c
 17626                           
 17627                           ;arpv4.c: 121: break;
 17628  003510  D007               	goto	l9950
 17629  003512                     l9944:
 17630                           
 17631                           ; BSR set to: 1
 17632                           ;arpv4.c: 122: }
 17633                           ;arpv4.c: 123: entryPointer++;
 17634  003512  0E0D               	movlw	13
 17635  003514  2637               	addwf	ARPV4_Packet@entryPointer,f,c
 17636  003516  0E00               	movlw	0
 17637  003518  2238               	addwfc	ARPV4_Packet@entryPointer+1,f,c
 17638                           
 17639                           ; BSR set to: 1
 17640  00351A  0635               	decf	ARPV4_Packet@x,f,c
 17641                           
 17642                           ; BSR set to: 1
 17643  00351C  5035               	movf	ARPV4_Packet@x,w,c
 17644  00351E  E1D9               	bnz	l9934
 17645  003520                     l9950:
 17646                           
 17647                           ; BSR set to: 1
 17648                           ;arpv4.c: 124: }
 17649                           ;arpv4.c: 126: if(ipv4Address && (ipv4Address == ((((uint32_t)header.tpa&(uint32_t)0xff0
      +                          00000) >> 24) | (((uint32_t)header.tpa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.
      +                          tpa&(uint32_t)0x0000ff00) << 8) | (((uint32_t)header.tpa&(uint32_t)0x000000ff) << 24) ))
      +                          )
 17650  003520  ECF5  F023         	call	PL446	;call to abstracted procedure
 17651  003524  B4D8               	btfsc	status,2,c
 17652  003526  0012               	return	
 17653                           
 17654                           ; BSR set to: 1
 17655  003528  5051               	movf	ARPV4_Packet@header+24,w,c
 17656  00352A  D92F               	call	PL220	;call to abstracted procedure
 17657  00352C  EE20  F051         	lfsr	2,ARPV4_Packet@header+24
 17658  003530  D918               	call	PL200	;call to abstracted procedure
 17659  003532  C051  F017         	movff	ARPV4_Packet@header+24,??_ARPV4_Packet+8
 17660  003536  C052  F018         	movff	ARPV4_Packet@header+25,??_ARPV4_Packet+9
 17661  00353A  C053  F019         	movff	ARPV4_Packet@header+26,??_ARPV4_Packet+10
 17662  00353E  C054  F01A         	movff	ARPV4_Packet@header+27,??_ARPV4_Packet+11
 17663  003542  D93B               	call	PL254	;call to abstracted procedure
 17664  003544  EE20  F051         	lfsr	2,ARPV4_Packet@header+24
 17665  003548  D8D3               	call	PL148	;call to abstracted procedure
 17666  00354A  5192               	movf	_ipv4Address& (0+255),w,b
 17667  00354C  182B               	xorwf	??_ARPV4_Packet+28,w,c
 17668  00354E  E109               	bnz	u15091
 17669  003550  5193               	movf	(_ipv4Address+1)& (0+255),w,b
 17670  003552  182C               	xorwf	??_ARPV4_Packet+29,w,c
 17671  003554  E106               	bnz	u15091
 17672  003556  5194               	movf	(_ipv4Address+2)& (0+255),w,b
 17673  003558  182D               	xorwf	??_ARPV4_Packet+30,w,c
 17674  00355A  E103               	bnz	u15091
 17675  00355C  5195               	movf	(_ipv4Address+3)& (0+255),w,b
 17676  00355E  182E               	xorwf	??_ARPV4_Packet+31,w,c
 17677  003560  A4D8               	btfss	status,2,c
 17678  003562                     u15091:
 17679  003562  0012               	return	
 17680                           
 17681                           ; BSR set to: 1
 17682                           ;arpv4.c: 127: {
 17683                           ;arpv4.c: 128: if(!mergeFlag)
 17684  003564  5031               	movf	ARPV4_Packet@mergeFlag,w,c
 17685  003566  E149               	bnz	l9980
 17686                           
 17687                           ; BSR set to: 1
 17688                           ;arpv4.c: 129: {
 17689                           ;arpv4.c: 131: entryPointer = arpMap;
 17690  003568  D93A               	call	PL452	;call to abstracted procedure
 17691                           
 17692                           ;arpv4.c: 132: arpMap_t *arpPtr = arpMap;
 17693  00356A  0E2E               	movlw	low _arpMap
 17694  00356C  6E33               	movwf	ARPV4_Packet@arpPtr,c
 17695  00356E  0E02               	movlw	high _arpMap
 17696  003570  6E34               	movwf	ARPV4_Packet@arpPtr+1,c
 17697                           
 17698                           ; BSR set to: 1
 17699                           ;arpv4.c: 133: for(uint8_t x=8; x !=0; x--)
 17700  003572  0E08               	movlw	8
 17701  003574  6E36               	movwf	ARPV4_Packet@x_2060,c
 17702  003576                     l9964:
 17703                           
 17704                           ; BSR set to: 1
 17705                           ;arpv4.c: 134: {
 17706                           ;arpv4.c: 135: if(entryPointer->age < arpPtr->age)
 17707  003576  EE20 F00C          	lfsr	2,12
 17708  00357A  5033               	movf	ARPV4_Packet@arpPtr,w,c
 17709  00357C  26D9               	addwf	fsr2l,f,c
 17710  00357E  5034               	movf	ARPV4_Packet@arpPtr+1,w,c
 17711  003580  22DA               	addwfc	fsr2h,f,c
 17712  003582  EE10 F00C          	lfsr	1,12
 17713  003586  5037               	movf	ARPV4_Packet@entryPointer,w,c
 17714  003588  26E1               	addwf	fsr1l,f,c
 17715  00358A  5038               	movf	ARPV4_Packet@entryPointer+1,w,c
 17716  00358C  22E2               	addwfc	fsr1h,f,c
 17717  00358E  50DE               	movf	postinc2,w,c
 17718  003590  5CE6               	subwf	postinc1,w,c
 17719  003592  E204               	bc	l779
 17720                           
 17721                           ; BSR set to: 1
 17722                           ;arpv4.c: 136: {
 17723                           ;arpv4.c: 137: entryPointer = arpPtr;
 17724  003594  C033  F037         	movff	ARPV4_Packet@arpPtr,ARPV4_Packet@entryPointer
 17725  003598  C034  F038         	movff	ARPV4_Packet@arpPtr+1,ARPV4_Packet@entryPointer+1
 17726  00359C                     l779:
 17727                           
 17728                           ; BSR set to: 1
 17729                           ;arpv4.c: 138: }
 17730                           ;arpv4.c: 140: arpPtr++;
 17731  00359C  0E0D               	movlw	13
 17732  00359E  2633               	addwf	ARPV4_Packet@arpPtr,f,c
 17733  0035A0  0E00               	movlw	0
 17734  0035A2  2234               	addwfc	ARPV4_Packet@arpPtr+1,f,c
 17735                           
 17736                           ; BSR set to: 1
 17737  0035A4  0636               	decf	ARPV4_Packet@x_2060,f,c
 17738                           
 17739                           ; BSR set to: 1
 17740  0035A6  5036               	movf	ARPV4_Packet@x_2060,w,c
 17741  0035A8  E1E6               	bnz	l9964
 17742                           
 17743                           ; BSR set to: 1
 17744                           ;arpv4.c: 141: }
 17745                           ;arpv4.c: 144: entryPointer->age = 0;
 17746                           
 17747                           ; BSR set to: 1
 17748                           ;arpv4.c: 145: entryPointer->macAddress.s = header.sha.s;
 17749  0035AA  D8F9               	call	PL230	;call to abstracted procedure
 17750  0035AC                     u15131:
 17751  0035AC  CFDB FFE3          	movff	plusw2,plusw1
 17752  0035B0  06E8               	decf	wreg,f,c
 17753  0035B2  E2FC               	bc	u15131
 17754                           
 17755                           ; BSR set to: 1
 17756                           ;arpv4.c: 146: entryPointer->ipAddress = ((((uint32_t)header.spa&(uint32_t)0xff000000) >
      +                          > 24) | (((uint32_t)header.spa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.spa&(uin
      +                          t32_t)0x0000ff00) << 8) | (((uint32_t)header.spa&(uint32_t)0x000000ff) << 24) );
 17757  0035B4  5047               	movf	ARPV4_Packet@header+14,w,c
 17758  0035B6  D8E9               	call	PL220	;call to abstracted procedure
 17759  0035B8  EE20  F047         	lfsr	2,ARPV4_Packet@header+14
 17760  0035BC  D8D2               	call	PL200	;call to abstracted procedure
 17761  0035BE  C047  F017         	movff	ARPV4_Packet@header+14,??_ARPV4_Packet+8
 17762  0035C2  C048  F018         	movff	ARPV4_Packet@header+15,??_ARPV4_Packet+9
 17763  0035C6  C049  F019         	movff	ARPV4_Packet@header+16,??_ARPV4_Packet+10
 17764  0035CA  C04A  F01A         	movff	ARPV4_Packet@header+17,??_ARPV4_Packet+11
 17765  0035CE  D8F5               	call	PL254	;call to abstracted procedure
 17766  0035D0  EE20  F047         	lfsr	2,ARPV4_Packet@header+14
 17767  0035D4  D88D               	call	PL148	;call to abstracted procedure
 17768  0035D6  EE20 F006          	lfsr	2,6
 17769  0035DA  D8FC               	call	PL290	;call to abstracted procedure
 17770  0035DC  C02B  FFDE         	movff	??_ARPV4_Packet+28,postinc2
 17771  0035E0  C02C  FFDE         	movff	??_ARPV4_Packet+29,postinc2
 17772  0035E4  C02D  FFDE         	movff	??_ARPV4_Packet+30,postinc2
 17773  0035E8  C02E  FFDE         	movff	??_ARPV4_Packet+31,postinc2
 17774                           
 17775                           ; BSR set to: 1
 17776                           ;arpv4.c: 147: entryPointer->protocolType = header.ptype;
 17777  0035EC  EE20 F00A          	lfsr	2,10
 17778  0035F0  D8F1               	call	PL290	;call to abstracted procedure
 17779  0035F2  C03B  FFDE         	movff	ARPV4_Packet@header+2,postinc2
 17780  0035F6  C03C  FFDD         	movff	ARPV4_Packet@header+3,postdec2
 17781  0035FA                     l9980:
 17782                           
 17783                           ; BSR set to: 1
 17784                           ;arpv4.c: 148: }
 17785                           ;arpv4.c: 149: if(header.oper == ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)
      +                          1 & (uint16_t)0x00FF) << 8)))
 17786  0035FA  0440               	decf	ARPV4_Packet@header+7,w,c
 17787  0035FC  103F               	iorwf	ARPV4_Packet@header+6,w,c
 17788  0035FE  A4D8               	btfss	status,2,c
 17789  003600  0012               	return	
 17790                           
 17791                           ; BSR set to: 1
 17792                           ;arpv4.c: 150: {
 17793                           ;arpv4.c: 151: ret = ETH_WriteStart(&header.sha ,0x0806);
 17794  003602  0E41               	movlw	low (ARPV4_Packet@header+8)
 17795  003604  6E0B               	movwf	ETH_WriteStart@destMAC,c
 17796  003606  6A0C               	clrf	ETH_WriteStart@destMAC+1,c
 17797  003608  EC5B  F025         	call	PL464	;call to abstracted procedure
 17798  00360C  EC7C  F02D         	call	_ETH_WriteStart	;wreg free
 17799  003610  6E32               	movwf	ARPV4_Packet@ret,c
 17800                           
 17801                           ;arpv4.c: 152: if(ret == SUCCESS)
 17802  003612  0432               	decf	ARPV4_Packet@ret,w,c
 17803  003614  A4D8               	btfss	status,2,c
 17804  003616  0012               	return	
 17805                           
 17806                           ;arpv4.c: 153: {
 17807                           ;arpv4.c: 155: header.tha.s = header.sha.s;
 17808  003618  EE20  F041         	lfsr	2,ARPV4_Packet@header+8
 17809  00361C  EE10  F04B         	lfsr	1,ARPV4_Packet@header+18
 17810  003620  0E05               	movlw	5
 17811  003622                     u15171:
 17812  003622  CFDB FFE3          	movff	plusw2,plusw1
 17813  003626  06E8               	decf	wreg,f,c
 17814  003628  E2FC               	bc	u15171
 17815                           
 17816                           ;arpv4.c: 156: ETH_GetMAC((char*)&header.sha.s);
 17817  00362A  0E41               	movlw	low (ARPV4_Packet@header+8)
 17818  00362C  6E08               	movwf	ETH_GetMAC@macAddr,c
 17819  00362E  6A09               	clrf	ETH_GetMAC@macAddr+1,c
 17820  003630  ECFC  F02C         	call	_ETH_GetMAC	;wreg free
 17821                           
 17822                           ;arpv4.c: 157: header.tpa = header.spa;
 17823  003634  C047  F051         	movff	ARPV4_Packet@header+14,ARPV4_Packet@header+24
 17824  003638  C048  F052         	movff	ARPV4_Packet@header+15,ARPV4_Packet@header+25
 17825  00363C  C049  F053         	movff	ARPV4_Packet@header+16,ARPV4_Packet@header+26
 17826  003640  C04A  F054         	movff	ARPV4_Packet@header+17,ARPV4_Packet@header+27
 17827                           
 17828                           ;arpv4.c: 158: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((u
      +                          int32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x00
      +                          00ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
 17829  003644  0101               	movlb	1	; () banked
 17830  003646  5192               	movf	_ipv4Address& (0+255),w,b
 17831  003648  D8A0               	call	PL220	;call to abstracted procedure
 17832  00364A  6A13               	clrf	(??_ARPV4_Packet+4)& (0+255),c
 17833  00364C  5193               	movf	(_ipv4Address+1)& (0+255),w,b
 17834  00364E  6E14               	movwf	(??_ARPV4_Packet+5)& (0+255),c
 17835  003650  6A15               	clrf	(??_ARPV4_Packet+6)& (0+255),c
 17836  003652  6A16               	clrf	(??_ARPV4_Packet+7)& (0+255),c
 17837  003654  C015  F016         	movff	??_ARPV4_Packet+6,??_ARPV4_Packet+7
 17838  003658  C014  F015         	movff	??_ARPV4_Packet+5,??_ARPV4_Packet+6
 17839  00365C  C013  F014         	movff	??_ARPV4_Packet+4,??_ARPV4_Packet+5
 17840  003660  6A13               	clrf	??_ARPV4_Packet+4,c
 17841  003662  6A17               	clrf	(??_ARPV4_Packet+8)& (0+255),c
 17842  003664  5194               	movf	(_ipv4Address+2)& (0+255),w,b
 17843  003666  6E18               	movwf	(??_ARPV4_Packet+9)& (0+255),c
 17844  003668  6A19               	clrf	(??_ARPV4_Packet+10)& (0+255),c
 17845  00366A  5017               	movf	??_ARPV4_Packet+8,w,c
 17846  00366C  6E1A               	movwf	(??_ARPV4_Packet+11)& (0+255),c
 17847  00366E  5018               	movf	??_ARPV4_Packet+9,w,c
 17848  003670  6E1B               	movwf	(??_ARPV4_Packet+12)& (0+255),c
 17849  003672  5019               	movf	??_ARPV4_Packet+10,w,c
 17850  003674  6E1C               	movwf	(??_ARPV4_Packet+13)& (0+255),c
 17851  003676  6A1D               	clrf	(??_ARPV4_Packet+14)& (0+255),c
 17852  003678  6A1E               	clrf	(??_ARPV4_Packet+15)& (0+255),c
 17853  00367A  6A1F               	clrf	(??_ARPV4_Packet+16)& (0+255),c
 17854  00367C  6A20               	clrf	(??_ARPV4_Packet+17)& (0+255),c
 17855  00367E  5195               	movf	(_ipv4Address+3)& (0+255),w,b
 17856  003680  6E21               	movwf	(??_ARPV4_Packet+18)& (0+255),c
 17857  003682  0E19               	movlw	25
 17858  003684  D005               	goto	u15180
 17859  003686                     u15185:
 17860  003686  90D8               	bcf	status,0,c
 17861  003688  3221               	rrcf	??_ARPV4_Packet+18,f,c
 17862  00368A  3220               	rrcf	??_ARPV4_Packet+17,f,c
 17863  00368C  321F               	rrcf	??_ARPV4_Packet+16,f,c
 17864  00368E  321E               	rrcf	??_ARPV4_Packet+15,f,c
 17865  003690                     u15180:
 17866  003690  2EE8               	decfsz	wreg,f,c
 17867  003692  D7F9               	goto	u15185
 17868  003694  501A               	movf	??_ARPV4_Packet+11,w,c
 17869  003696  101E               	iorwf	??_ARPV4_Packet+15,w,c
 17870  003698  6E22               	movwf	(??_ARPV4_Packet+19)& (0+255),c
 17871  00369A  501B               	movf	??_ARPV4_Packet+12,w,c
 17872  00369C  101F               	iorwf	??_ARPV4_Packet+16,w,c
 17873  00369E  6E23               	movwf	(??_ARPV4_Packet+20)& (0+255),c
 17874  0036A0  501C               	movf	??_ARPV4_Packet+13,w,c
 17875  0036A2  1020               	iorwf	??_ARPV4_Packet+17,w,c
 17876  0036A4  6E24               	movwf	(??_ARPV4_Packet+21)& (0+255),c
 17877  0036A6  501D               	movf	??_ARPV4_Packet+14,w,c
 17878  0036A8  1021               	iorwf	??_ARPV4_Packet+18,w,c
 17879  0036AA  6E25               	movwf	(??_ARPV4_Packet+22)& (0+255),c
 17880  0036AC  5013               	movf	??_ARPV4_Packet+4,w,c
 17881  0036AE  1022               	iorwf	??_ARPV4_Packet+19,w,c
 17882  0036B0  6E26               	movwf	(??_ARPV4_Packet+23)& (0+255),c
 17883  0036B2  5014               	movf	??_ARPV4_Packet+5,w,c
 17884  0036B4  1023               	iorwf	??_ARPV4_Packet+20,w,c
 17885  0036B6  6E27               	movwf	(??_ARPV4_Packet+24)& (0+255),c
 17886  0036B8  5015               	movf	??_ARPV4_Packet+6,w,c
 17887  0036BA  1024               	iorwf	??_ARPV4_Packet+21,w,c
 17888  0036BC  6E28               	movwf	(??_ARPV4_Packet+25)& (0+255),c
 17889  0036BE  5016               	movf	??_ARPV4_Packet+7,w,c
 17890  0036C0  1025               	iorwf	??_ARPV4_Packet+22,w,c
 17891  0036C2  6E29               	movwf	(??_ARPV4_Packet+26)& (0+255),c
 17892  0036C4  500F               	movf	??_ARPV4_Packet,w,c
 17893  0036C6  1026               	iorwf	??_ARPV4_Packet+23,w,c
 17894  0036C8  6E47               	movwf	ARPV4_Packet@header+14,c
 17895  0036CA  5010               	movf	??_ARPV4_Packet+1,w,c
 17896  0036CC  1027               	iorwf	??_ARPV4_Packet+24,w,c
 17897  0036CE  6E48               	movwf	ARPV4_Packet@header+15,c
 17898  0036D0  5011               	movf	??_ARPV4_Packet+2,w,c
 17899  0036D2  1028               	iorwf	??_ARPV4_Packet+25,w,c
 17900  0036D4  6E49               	movwf	ARPV4_Packet@header+16,c
 17901  0036D6  5012               	movf	??_ARPV4_Packet+3,w,c
 17902  0036D8  1029               	iorwf	??_ARPV4_Packet+26,w,c
 17903  0036DA  6E4A               	movwf	ARPV4_Packet@header+17,c
 17904                           
 17905                           ; BSR set to: 1
 17906                           ;arpv4.c: 159: header.oper = ((((uint16_t)2 & (uint16_t)0xFF00) >> 8) | (((uint16_t)2 & 
      +                          (uint16_t)0x00FF) << 8));
 17907  0036DC  0E02               	movlw	2
 17908  0036DE  6E40               	movwf	ARPV4_Packet@header+7,c
 17909  0036E0  6A3F               	clrf	ARPV4_Packet@header+6,c
 17910                           
 17911                           ; BSR set to: 1
 17912                           ;arpv4.c: 160: ETH_WriteBlock((char*)&header,sizeof(header));
 17913  0036E2  0E39               	movlw	low ARPV4_Packet@header
 17914  0036E4  EC4F  F025         	call	PL398	;call to abstracted procedure
 17915  0036E8  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 17916  0036EC  EFC5  F031         	goto	_ETH_Send	;wreg free
 17917  0036F0                     __end_of_ARPV4_Packet:
 17918                           	opt stack 0
 17919  0036F0                     PL148:
 17920                           	opt stack 21
 17921  0036F0  14DE               	andwf	postinc2,w,c
 17922  0036F2  6E1F               	movwf	(??_ARPV4_Packet+16)& (0+255),c
 17923  0036F4  0E00               	movlw	0
 17924  0036F6  14DE               	andwf	postinc2,w,c
 17925  0036F8  6E20               	movwf	(??_ARPV4_Packet+17)& (0+255),c
 17926  0036FA  0E00               	movlw	0
 17927  0036FC  14DE               	andwf	postinc2,w,c
 17928  0036FE  6E21               	movwf	(??_ARPV4_Packet+18)& (0+255),c
 17929  003700  0EFF               	movlw	255
 17930  003702  14DE               	andwf	postinc2,w,c
 17931  003704  6E22               	movwf	(??_ARPV4_Packet+19)& (0+255),c
 17932  003706  0E19               	movlw	25
 17933  003708  D005               	goto	u15080
 17934  00370A                     u15085:
 17935  00370A  90D8               	bcf	status,0,c
 17936  00370C  3222               	rrcf	??_ARPV4_Packet+19,f,c
 17937  00370E  3221               	rrcf	??_ARPV4_Packet+18,f,c
 17938  003710  3220               	rrcf	??_ARPV4_Packet+17,f,c
 17939  003712  321F               	rrcf	??_ARPV4_Packet+16,f,c
 17940  003714                     u15080:
 17941  003714  2EE8               	decfsz	wreg,f,c
 17942  003716  D7F9               	goto	u15085
 17943  003718  501B               	movf	??_ARPV4_Packet+12,w,c
 17944  00371A  101F               	iorwf	??_ARPV4_Packet+16,w,c
 17945  00371C  6E23               	movwf	(??_ARPV4_Packet+20)& (0+255),c
 17946  00371E  501C               	movf	??_ARPV4_Packet+13,w,c
 17947  003720  1020               	iorwf	??_ARPV4_Packet+17,w,c
 17948  003722  6E24               	movwf	(??_ARPV4_Packet+21)& (0+255),c
 17949  003724  501D               	movf	??_ARPV4_Packet+14,w,c
 17950  003726  1021               	iorwf	??_ARPV4_Packet+18,w,c
 17951  003728  6E25               	movwf	(??_ARPV4_Packet+22)& (0+255),c
 17952  00372A  501E               	movf	??_ARPV4_Packet+15,w,c
 17953  00372C  1022               	iorwf	??_ARPV4_Packet+19,w,c
 17954  00372E  6E26               	movwf	(??_ARPV4_Packet+23)& (0+255),c
 17955  003730  5013               	movf	??_ARPV4_Packet+4,w,c
 17956  003732  1023               	iorwf	??_ARPV4_Packet+20,w,c
 17957  003734  6E27               	movwf	(??_ARPV4_Packet+24)& (0+255),c
 17958  003736  5014               	movf	??_ARPV4_Packet+5,w,c
 17959  003738  1024               	iorwf	??_ARPV4_Packet+21,w,c
 17960  00373A  6E28               	movwf	(??_ARPV4_Packet+25)& (0+255),c
 17961  00373C  5015               	movf	??_ARPV4_Packet+6,w,c
 17962  00373E  1025               	iorwf	??_ARPV4_Packet+22,w,c
 17963  003740  6E29               	movwf	(??_ARPV4_Packet+26)& (0+255),c
 17964  003742  5016               	movf	??_ARPV4_Packet+7,w,c
 17965  003744  1026               	iorwf	??_ARPV4_Packet+23,w,c
 17966  003746  6E2A               	movwf	(??_ARPV4_Packet+27)& (0+255),c
 17967  003748  500F               	movf	??_ARPV4_Packet,w,c
 17968  00374A  1027               	iorwf	??_ARPV4_Packet+24,w,c
 17969  00374C  6E2B               	movwf	(??_ARPV4_Packet+28)& (0+255),c
 17970  00374E  5010               	movf	??_ARPV4_Packet+1,w,c
 17971  003750  1028               	iorwf	??_ARPV4_Packet+25,w,c
 17972  003752  6E2C               	movwf	(??_ARPV4_Packet+29)& (0+255),c
 17973  003754  5011               	movf	??_ARPV4_Packet+2,w,c
 17974  003756  1029               	iorwf	??_ARPV4_Packet+26,w,c
 17975  003758  6E2D               	movwf	(??_ARPV4_Packet+30)& (0+255),c
 17976  00375A  5012               	movf	??_ARPV4_Packet+3,w,c
 17977  00375C  102A               	iorwf	??_ARPV4_Packet+27,w,c
 17978  00375E  6E2E               	movwf	(??_ARPV4_Packet+31)& (0+255),c
 17979  003760  0012               	return	
 17980  003762                     __end_ofPL148:
 17981                           	opt stack 0
 17982  003762                     PL200:
 17983                           	opt stack 21
 17984  003762  0E00               	movlw	0
 17985  003764  14DE               	andwf	postinc2,w,c
 17986  003766  6E13               	movwf	(??_ARPV4_Packet+4)& (0+255),c
 17987  003768  0EFF               	movlw	255
 17988  00376A  14DE               	andwf	postinc2,w,c
 17989  00376C  6E14               	movwf	(??_ARPV4_Packet+5)& (0+255),c
 17990  00376E  0E00               	movlw	0
 17991  003770  14DE               	andwf	postinc2,w,c
 17992  003772  6E15               	movwf	(??_ARPV4_Packet+6)& (0+255),c
 17993  003774  0E00               	movlw	0
 17994  003776  14DE               	andwf	postinc2,w,c
 17995  003778  6E16               	movwf	(??_ARPV4_Packet+7)& (0+255),c
 17996  00377A  C015  F016         	movff	??_ARPV4_Packet+6,??_ARPV4_Packet+7
 17997  00377E  C014  F015         	movff	??_ARPV4_Packet+5,??_ARPV4_Packet+6
 17998  003782  C013  F014         	movff	??_ARPV4_Packet+4,??_ARPV4_Packet+5
 17999  003786  6A13               	clrf	??_ARPV4_Packet+4,c
 18000  003788  0012               	return	
 18001  00378A                     __end_ofPL200:
 18002                           	opt stack 0
 18003  00378A                     PL220:
 18004                           	opt stack 21
 18005  00378A  6E0F               	movwf	??_ARPV4_Packet& (0+255),c
 18006  00378C  6A10               	clrf	(??_ARPV4_Packet+1)& (0+255),c
 18007  00378E  6A11               	clrf	(??_ARPV4_Packet+2)& (0+255),c
 18008  003790  6A12               	clrf	(??_ARPV4_Packet+3)& (0+255),c
 18009  003792  C00F  F012         	movff	??_ARPV4_Packet,??_ARPV4_Packet+3
 18010  003796  6A11               	clrf	??_ARPV4_Packet+2,c
 18011  003798  6A10               	clrf	??_ARPV4_Packet+1,c
 18012  00379A  6A0F               	clrf	??_ARPV4_Packet,c
 18013  00379C  0012               	return	
 18014  00379E                     __end_ofPL220:
 18015                           	opt stack 0
 18016  00379E                     PL230:
 18017                           	opt stack 21
 18018  00379E  EE20 F00C          	lfsr	2,12
 18019  0037A2  5037               	movf	ARPV4_Packet@entryPointer,w,c
 18020  0037A4  26D9               	addwf	fsr2l,f,c
 18021  0037A6  5038               	movf	ARPV4_Packet@entryPointer+1,w,c
 18022  0037A8  22DA               	addwfc	fsr2h,f,c
 18023  0037AA  6ADF               	clrf	indf2,c
 18024  0037AC  EE20  F041         	lfsr	2,ARPV4_Packet@header+8
 18025  0037B0  C037  FFE1         	movff	ARPV4_Packet@entryPointer,fsr1l
 18026  0037B4  C038  FFE2         	movff	ARPV4_Packet@entryPointer+1,fsr1h
 18027  0037B8  0C05               	retlw	5
 18028  0037BA                     __end_ofPL230:
 18029                           	opt stack 0
 18030  0037BA                     PL254:
 18031                           	opt stack 21
 18032  0037BA  C018  F017         	movff	??_ARPV4_Packet+9,??_ARPV4_Packet+8
 18033  0037BE  C019  F018         	movff	??_ARPV4_Packet+10,??_ARPV4_Packet+9
 18034  0037C2  C01A  F019         	movff	??_ARPV4_Packet+11,??_ARPV4_Packet+10
 18035  0037C6  6A1A               	clrf	??_ARPV4_Packet+11,c
 18036  0037C8  6A1B               	clrf	(??_ARPV4_Packet+12)& (0+255),c
 18037  0037CA  5018               	movf	??_ARPV4_Packet+9,w,c
 18038  0037CC  6E1C               	movwf	(??_ARPV4_Packet+13)& (0+255),c
 18039  0037CE  6A1D               	clrf	(??_ARPV4_Packet+14)& (0+255),c
 18040  0037D0  6A1E               	clrf	(??_ARPV4_Packet+15)& (0+255),c
 18041  0037D2  0C00               	retlw	0
 18042  0037D4                     __end_ofPL254:
 18043                           	opt stack 0
 18044  0037D4                     PL290:
 18045                           	opt stack 21
 18046  0037D4  5037               	movf	ARPV4_Packet@entryPointer,w,c
 18047  0037D6  26D9               	addwf	fsr2l,f,c
 18048  0037D8  5038               	movf	ARPV4_Packet@entryPointer+1,w,c
 18049  0037DA  22DA               	addwfc	fsr2h,f,c
 18050  0037DC  0012               	return	
 18051  0037DE                     __end_ofPL290:
 18052                           	opt stack 0
 18053  0037DE                     PL452:
 18054                           	opt stack 21
 18055  0037DE  0E2E               	movlw	low _arpMap
 18056  0037E0  6E37               	movwf	ARPV4_Packet@entryPointer,c
 18057  0037E2  0E02               	movlw	high _arpMap
 18058  0037E4  6E38               	movwf	ARPV4_Packet@entryPointer+1,c
 18059  0037E6  0012               	return	
 18060  0037E8                     __end_ofPL452:
 18061                           	opt stack 0
 18062                           tosu	equ	0xFFF
 18063                           tosh	equ	0xFFE
 18064                           tosl	equ	0xFFD
 18065                           pclath	equ	0xFFA
 18066                           tblptru	equ	0xFF8
 18067                           tblptrh	equ	0xFF7
 18068                           tblptrl	equ	0xFF6
 18069                           tablat	equ	0xFF5
 18070                           prodh	equ	0xFF4
 18071                           prodl	equ	0xFF3
 18072                           intcon	equ	0xFF2
 18073                           intcon2	equ	0xFF1
 18074                           indf0	equ	0xFEF
 18075                           postinc0	equ	0xFEE
 18076                           fsr0h	equ	0xFEA
 18077                           fsr0l	equ	0xFE9
 18078                           wreg	equ	0xFE8
 18079                           postinc1	equ	0xFE6
 18080                           plusw1	equ	0xFE3
 18081                           fsr1h	equ	0xFE2
 18082                           fsr1l	equ	0xFE1
 18083                           bsr	equ	0xFE0
 18084                           indf2	equ	0xFDF
 18085                           postinc2	equ	0xFDE
 18086                           postdec2	equ	0xFDD
 18087                           plusw2	equ	0xFDB
 18088                           fsr2h	equ	0xFDA
 18089                           fsr2l	equ	0xFD9
 18090                           status	equ	0xFD8
 18091                           
 18092 ;; *************** function _ETH_ReadBlock *****************
 18093 ;; Defined at:
 18094 ;;		line 305 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 18095 ;; Parameters:    Size  Location     Type
 18096 ;;  data            2    2[COMRAM] PTR void 
 18097 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), 
 18098 ;;		 -> DEMO_UDP_Recv@str(32), data(2), idle_packet(2), main@str(32), 
 18099 ;;		 -> STR_5(13), STR_4(17), udpHeader(8), tcpHeader(20), 
 18100 ;;		 -> Network_Read@debug_str(80), Network_Read@header(14), ipv4Header(20), ICMP_Receive@icmpHdr(8), 
 18101 ;;		 -> DHCP_Handler@ethPktMAC(6), ARPV4_Packet@header(28), NULL(0), 
 18102 ;;  length          2    4[COMRAM] unsigned int 
 18103 ;; Auto vars:     Size  Location     Type
 18104 ;;  len             2    9[COMRAM] unsigned int 
 18105 ;;  p               2    7[COMRAM] PTR unsigned char 
 18106 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), 
 18107 ;;		 -> DEMO_UDP_Recv@str(32), data(2), idle_packet(2), main@str(32), 
 18108 ;;		 -> STR_5(13), STR_4(17), udpHeader(8), tcpHeader(20), 
 18109 ;;		 -> Network_Read@debug_str(80), Network_Read@header(14), ipv4Header(20), ICMP_Receive@icmpHdr(8), 
 18110 ;;		 -> DHCP_Handler@ethPktMAC(6), ARPV4_Packet@header(28), NULL(0), 
 18111 ;; Return value:  Size  Location     Type
 18112 ;;                  2    2[COMRAM] unsigned int 
 18113 ;; Registers used:
 18114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18115 ;; Tracked objects:
 18116 ;;		On entry : 0/2
 18117 ;;		On exit  : F/1
 18118 ;;		Unchanged: 0/0
 18119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18121 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18123 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;Total ram usage:        9 bytes
 18125 ;; Hardware stack levels used:    1
 18126 ;; Hardware stack levels required when called:    4
 18127 ;; This function calls:
 18128 ;;		_SPI_ExchangeByte
 18129 ;; This function is called by:
 18130 ;;		_ARPV4_Packet
 18131 ;;		_DHCP_Handler
 18132 ;;		_ICMP_Receive
 18133 ;;		_IPV4_Packet
 18134 ;;		_Network_Read
 18135 ;;		_TCP_PayloadSave
 18136 ;;		_TCP_Recv
 18137 ;;		_UDP_Receive
 18138 ;;		_UDP_ReadBlock
 18139 ;; This function uses a non-reentrant model
 18140 ;;
 18141                           
 18142                           	psect	text64
 18143  005734                     __ptext64:
 18144                           	opt stack 0
 18145  005734                     _ETH_ReadBlock:
 18146                           	opt stack 22
 18147                           
 18148                           ;encX24j600_spi.c: 307: uint16_t len = length;
 18149                           
 18150                           ;incstack = 0
 18151  005734  C005  F00A         	movff	ETH_ReadBlock@length,ETH_ReadBlock@len
 18152  005738  C006  F00B         	movff	ETH_ReadBlock@length+1,ETH_ReadBlock@len+1
 18153                           
 18154                           ;encX24j600_spi.c: 308: char *p = data;
 18155  00573C  C003  F008         	movff	ETH_ReadBlock@data,ETH_ReadBlock@p
 18156  005740  C004  F009         	movff	ETH_ReadBlock@data+1,ETH_ReadBlock@p+1
 18157                           
 18158                           ;encX24j600_spi.c: 309: if(rxPacketStatusVector.ByteCount)
 18159  005744  0102               	movlb	2	; () banked
 18160  005746  5118               	movf	_rxPacketStatusVector& (0+255),w,b
 18161  005748  1119               	iorwf	(_rxPacketStatusVector+1)& (0+255),w,b
 18162  00574A  E038               	bz	l635
 18163                           
 18164                           ; BSR set to: 2
 18165                           ;encX24j600_spi.c: 310: {
 18166                           ;encX24j600_spi.c: 311: if(length > rxPacketStatusVector.ByteCount)
 18167  00574C  5005               	movf	ETH_ReadBlock@length,w,c
 18168  00574E  5D18               	subwf	_rxPacketStatusVector& (0+255),w,b
 18169  005750  5006               	movf	ETH_ReadBlock@length+1,w,c
 18170  005752  5919               	subwfb	(_rxPacketStatusVector+1)& (0+255),w,b
 18171  005754  E204               	bc	l8416
 18172                           
 18173                           ; BSR set to: 2
 18174                           ;encX24j600_spi.c: 312: {
 18175                           ;encX24j600_spi.c: 313: len = rxPacketStatusVector.ByteCount;
 18176  005756  C218  F00A         	movff	_rxPacketStatusVector,ETH_ReadBlock@len
 18177  00575A  C219  F00B         	movff	_rxPacketStatusVector+1,ETH_ReadBlock@len+1
 18178  00575E                     l8416:
 18179                           
 18180                           ; BSR set to: 2
 18181                           ;encX24j600_spi.c: 314: }
 18182                           ;encX24j600_spi.c: 315: rxPacketStatusVector.ByteCount -= len;
 18183  00575E  500A               	movf	ETH_ReadBlock@len,w,c
 18184  005760  5F18               	subwf	_rxPacketStatusVector& (0+255),f,b
 18185  005762  500B               	movf	ETH_ReadBlock@len+1,w,c
 18186  005764  5B19               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
 18187                           
 18188                           ; BSR set to: 2
 18189  005766  968A               	bcf	3978,3,c	;volatile
 18190                           
 18191                           ; BSR set to: 2
 18192                           ;encX24j600_spi.c: 317: SPI_ExchangeByte(rrxdata_inst);
 18193  005768  0E2C               	movlw	44
 18194  00576A  ECF3  F032         	call	_SPI_ExchangeByte
 18195                           
 18196                           ;encX24j600_spi.c: 318: while(len--) *p++=SPI_ExchangeByte(0);
 18197  00576E  D017               	goto	l8426
 18198  005770                     l8422:
 18199  005770  C008  FFF6         	movff	ETH_ReadBlock@p,tblptrl
 18200  005774  C009  FFF7         	movff	ETH_ReadBlock@p+1,tblptrh
 18201  005778  0E00               	movlw	low (__smallconst shr (0+16))
 18202  00577A  6EF8               	movwf	tblptru,c
 18203  00577C  0E00               	movlw	0
 18204  00577E  ECF3  F032         	call	_SPI_ExchangeByte
 18205  005782  6E07               	movwf	??_ETH_ReadBlock& (0+255),c
 18206  005784  0E0F               	movlw	(high __ramtop+-1)
 18207  005786  64F7               	cpfsgt	tblptrh,c
 18208  005788  D004               	bra	u10977
 18209  00578A  C007  FFF5         	movff	??_ETH_ReadBlock,tablat
 18210  00578E  000C               	tblwt		*
 18211  005790  D004               	bra	u10970
 18212  005792                     u10977:
 18213  005792  EC3C  F011         	call	PL114	;call to abstracted procedure
 18214  005796  C007  FFEF         	movff	??_ETH_ReadBlock,indf0
 18215  00579A                     u10970:
 18216  00579A  4A08               	infsnz	ETH_ReadBlock@p,f,c
 18217  00579C  2A09               	incf	ETH_ReadBlock@p+1,f,c
 18218  00579E                     l8426:
 18219  00579E  060A               	decf	ETH_ReadBlock@len,f,c
 18220  0057A0  A0D8               	btfss	status,0,c
 18221  0057A2  060B               	decf	ETH_ReadBlock@len+1,f,c
 18222  0057A4  280A               	incf	ETH_ReadBlock@len,w,c
 18223  0057A6  E1E4               	bnz	l8422
 18224  0057A8  280B               	incf	ETH_ReadBlock@len+1,w,c
 18225  0057AA  E1E2               	bnz	l8422
 18226                           
 18227                           ;encX24j600_spi.c: 319: do{LATB3 = 1;} while(0);
 18228  0057AC  868A               	bsf	3978,3,c	;volatile
 18229                           
 18230                           ;encX24j600_spi.c: 320: ethData.error=0;
 18231  0057AE  0101               	movlb	1	; () banked
 18232  0057B0  9183               	bcf	_ethData& (0+255),0,b	;volatile
 18233                           
 18234                           ;encX24j600_spi.c: 321: return length;
 18235  0057B2  C005  F003         	movff	ETH_ReadBlock@length,?_ETH_ReadBlock
 18236  0057B6  C006  F004         	movff	ETH_ReadBlock@length+1,?_ETH_ReadBlock+1
 18237  0057BA  0012               	return	
 18238  0057BC                     l635:
 18239                           
 18240                           ; BSR set to: 2
 18241                           ;encX24j600_spi.c: 323: else
 18242                           ;encX24j600_spi.c: 324: {
 18243                           ;encX24j600_spi.c: 325: ethData.error= 1;
 18244  0057BC  0101               	movlb	1	; () banked
 18245  0057BE  8183               	bsf	_ethData& (0+255),0,b	;volatile
 18246                           
 18247                           ;encX24j600_spi.c: 326: return 0;
 18248  0057C0  6A03               	clrf	?_ETH_ReadBlock,c
 18249  0057C2  6A04               	clrf	?_ETH_ReadBlock+1,c
 18250                           
 18251                           ; BSR set to: 1
 18252  0057C4  0012               	return		;funcret
 18253  0057C6                     __end_of_ETH_ReadBlock:
 18254                           	opt stack 0
 18255                           tosu	equ	0xFFF
 18256                           tosh	equ	0xFFE
 18257                           tosl	equ	0xFFD
 18258                           pclath	equ	0xFFA
 18259                           tblptru	equ	0xFF8
 18260                           tblptrh	equ	0xFF7
 18261                           tblptrl	equ	0xFF6
 18262                           tablat	equ	0xFF5
 18263                           prodh	equ	0xFF4
 18264                           prodl	equ	0xFF3
 18265                           intcon	equ	0xFF2
 18266                           intcon2	equ	0xFF1
 18267                           indf0	equ	0xFEF
 18268                           postinc0	equ	0xFEE
 18269                           fsr0h	equ	0xFEA
 18270                           fsr0l	equ	0xFE9
 18271                           wreg	equ	0xFE8
 18272                           postinc1	equ	0xFE6
 18273                           plusw1	equ	0xFE3
 18274                           fsr1h	equ	0xFE2
 18275                           fsr1l	equ	0xFE1
 18276                           bsr	equ	0xFE0
 18277                           indf2	equ	0xFDF
 18278                           postinc2	equ	0xFDE
 18279                           postdec2	equ	0xFDD
 18280                           plusw2	equ	0xFDB
 18281                           fsr2h	equ	0xFDA
 18282                           fsr2l	equ	0xFD9
 18283                           status	equ	0xFD8
 18284                           
 18285 ;; *************** function _ETH_EventHandler *****************
 18286 ;; Defined at:
 18287 ;;		line 215 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;		None
 18290 ;; Auto vars:     Size  Location     Type
 18291 ;;  eirVal          2   16[COMRAM] unsigned int 
 18292 ;;  estatVal        2   14[COMRAM] unsigned int 
 18293 ;;  macon2Val       2   12[COMRAM] unsigned int 
 18294 ;;  mabbipgVal      2   10[COMRAM] unsigned int 
 18295 ;; Return value:  Size  Location     Type
 18296 ;;		None               void
 18297 ;; Registers used:
 18298 ;;		wreg, status,2, status,0, cstack
 18299 ;; Tracked objects:
 18300 ;;		On entry : 0/2
 18301 ;;		On exit  : 0/0
 18302 ;;		Unchanged: 0/0
 18303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18305 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;Total ram usage:        8 bytes
 18309 ;; Hardware stack levels used:    1
 18310 ;; Hardware stack levels required when called:    7
 18311 ;; This function calls:
 18312 ;;		_ENCx24_BFC
 18313 ;;		_ENCx24_Read
 18314 ;;		_ENCx24_Write
 18315 ;;		_ETH_ResetReceiver
 18316 ;; This function is called by:
 18317 ;;		_Network_Manage
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           	psect	text65
 18322  00538A                     __ptext65:
 18323                           	opt stack 0
 18324  00538A                     _ETH_EventHandler:
 18325                           	opt stack 22
 18326                           
 18327                           ;encX24J600_driver.c: 217: uint16_t eirVal,estatVal,mabbipgVal,macon2Val;
 18328                           ;encX24J600_driver.c: 219: estatVal = ENCx24_Read(XJ600_ESTATL);
 18329                           
 18330                           ; BSR set to: 1
 18331                           ;incstack = 0
 18332  00538A  0EFA               	movlw	250
 18333  00538C  EC04  F02F         	call	_ENCx24_Read
 18334  005390  C005  F00F         	movff	?_ENCx24_Read,ETH_EventHandler@estatVal
 18335  005394  C006  F010         	movff	?_ENCx24_Read+1,ETH_EventHandler@estatVal+1
 18336                           
 18337                           ;encX24J600_driver.c: 222: eirVal = ENCx24_Read(XJ600_EIRL);
 18338  005398  0EFC               	movlw	252
 18339  00539A  EC04  F02F         	call	_ENCx24_Read
 18340  00539E  C005  F011         	movff	?_ENCx24_Read,ETH_EventHandler@eirVal
 18341  0053A2  C006  F012         	movff	?_ENCx24_Read+1,ETH_EventHandler@eirVal+1
 18342                           
 18343                           ;encX24J600_driver.c: 224: if (eirVal !=0 )
 18344  0053A6  5011               	movf	ETH_EventHandler@eirVal,w,c
 18345  0053A8  1012               	iorwf	ETH_EventHandler@eirVal+1,w,c
 18346  0053AA  B4D8               	btfsc	status,2,c
 18347  0053AC  0012               	return	
 18348                           
 18349                           ;encX24J600_driver.c: 225: {
 18350                           ;encX24J600_driver.c: 226: if (eirVal & 0x0800)
 18351  0053AE  A612               	btfss	ETH_EventHandler@eirVal+1,3,c
 18352  0053B0  D029               	goto	l10242
 18353                           
 18354                           ;encX24J600_driver.c: 227: {
 18355                           ;encX24J600_driver.c: 228: ethData.linkChange = 1;
 18356  0053B2  0101               	movlb	1	; () banked
 18357  0053B4  8983               	bsf	_ethData& (0+255),4,b	;volatile
 18358                           
 18359                           ; BSR set to: 1
 18360                           ;encX24J600_driver.c: 229: macon2Val = ENCx24_Read(XJ600_MACON2L);
 18361  0053B6  0E42               	movlw	66
 18362  0053B8  EC04  F02F         	call	_ENCx24_Read
 18363  0053BC  C005  F00D         	movff	?_ENCx24_Read,ETH_EventHandler@macon2Val
 18364  0053C0  C006  F00E         	movff	?_ENCx24_Read+1,ETH_EventHandler@macon2Val+1
 18365                           
 18366                           ;encX24J600_driver.c: 231: ethData.up = 0;
 18367  0053C4  0101               	movlb	1	; () banked
 18368  0053C6  9583               	bcf	_ethData& (0+255),2,b	;volatile
 18369                           
 18370                           ; BSR set to: 1
 18371                           ;encX24J600_driver.c: 232: if(estatVal & 0x0100)
 18372  0053C8  B010               	btfsc	ETH_EventHandler@estatVal+1,0,c
 18373                           
 18374                           ; BSR set to: 1
 18375                           ;encX24J600_driver.c: 233: {
 18376                           ;encX24J600_driver.c: 234: ethData.up = 1;
 18377  0053CA  8583               	bsf	_ethData& (0+255),2,b	;volatile
 18378                           
 18379                           ; BSR set to: 1
 18380                           ;encX24J600_driver.c: 235: }
 18381                           ;encX24J600_driver.c: 238: if (estatVal & 0x0400)
 18382  0053CC  A410               	btfss	ETH_EventHandler@estatVal+1,2,c
 18383  0053CE  D005               	goto	l10234
 18384                           
 18385                           ; BSR set to: 1
 18386                           ;encX24J600_driver.c: 239: {
 18387                           ;encX24J600_driver.c: 241: mabbipgVal = 0x15;
 18388  0053D0  6A0C               	clrf	ETH_EventHandler@mabbipgVal+1,c
 18389  0053D2  0E15               	movlw	21
 18390  0053D4  6E0B               	movwf	ETH_EventHandler@mabbipgVal,c
 18391                           
 18392                           ; BSR set to: 1
 18393                           ;encX24J600_driver.c: 242: macon2Val |= 0x0001;
 18394  0053D6  800D               	bsf	ETH_EventHandler@macon2Val,0,c
 18395                           
 18396                           ;encX24J600_driver.c: 243: }
 18397  0053D8  D007               	goto	l10238
 18398  0053DA                     l10234:
 18399                           
 18400                           ; BSR set to: 1
 18401                           ;encX24J600_driver.c: 244: else
 18402                           ;encX24J600_driver.c: 245: {
 18403                           ;encX24J600_driver.c: 247: mabbipgVal = 0x12;
 18404  0053DA  6A0C               	clrf	ETH_EventHandler@mabbipgVal+1,c
 18405  0053DC  0E12               	movlw	18
 18406  0053DE  6E0B               	movwf	ETH_EventHandler@mabbipgVal,c
 18407                           
 18408                           ; BSR set to: 1
 18409                           ;encX24J600_driver.c: 248: macon2Val |= 0xFFFE;
 18410  0053E0  0EFE               	movlw	254
 18411  0053E2  120D               	iorwf	ETH_EventHandler@macon2Val,f,c
 18412  0053E4  0EFF               	movlw	255
 18413  0053E6  120E               	iorwf	ETH_EventHandler@macon2Val+1,f,c
 18414  0053E8                     l10238:
 18415                           
 18416                           ; BSR set to: 1
 18417                           ;encX24J600_driver.c: 249: }
 18418                           ;encX24J600_driver.c: 250: ENCx24_Write(XJ600_MABBIPGL,mabbipgVal);
 18419  0053E8  C00B  F005         	movff	ETH_EventHandler@mabbipgVal,ENCx24_Write@data
 18420  0053EC  C00C  F006         	movff	ETH_EventHandler@mabbipgVal+1,ENCx24_Write@data+1
 18421  0053F0  0E44               	movlw	68
 18422  0053F2  EC29  F02F         	call	_ENCx24_Write
 18423                           
 18424                           ;encX24J600_driver.c: 251: ENCx24_Write(XJ600_MACON2L, macon2Val);
 18425  0053F6  C00D  F005         	movff	ETH_EventHandler@macon2Val,ENCx24_Write@data
 18426  0053FA  C00E  F006         	movff	ETH_EventHandler@macon2Val+1,ENCx24_Write@data+1
 18427  0053FE  0E42               	movlw	66
 18428  005400  EC29  F02F         	call	_ENCx24_Write
 18429  005404                     l10242:
 18430                           
 18431                           ;encX24J600_driver.c: 252: }
 18432                           ;encX24J600_driver.c: 253: if(eirVal & 0x0008)
 18433  005404  A611               	btfss	ETH_EventHandler@eirVal,3,c
 18434  005406  D002               	goto	l448
 18435                           
 18436                           ;encX24J600_driver.c: 254: {
 18437                           ;encX24J600_driver.c: 255: ethData.bufferBusy = 0;
 18438  005408  0101               	movlb	1	; () banked
 18439  00540A  9B83               	bcf	_ethData& (0+255),5,b	;volatile
 18440  00540C                     l448:
 18441                           
 18442                           ;encX24J600_driver.c: 256: }
 18443                           ;encX24J600_driver.c: 257: if((eirVal & 0x0002 )|| (eirVal & 0x0001))
 18444  00540C  A211               	btfss	ETH_EventHandler@eirVal,1,c
 18445  00540E  B011               	btfsc	ETH_EventHandler@eirVal,0,c
 18446                           
 18447                           ;encX24J600_driver.c: 258: {
 18448                           ;encX24J600_driver.c: 259: ETH_ResetReceiver();
 18449  005410  EC4A  F02F         	call	_ETH_ResetReceiver	;wreg free
 18450                           
 18451                           ;encX24J600_driver.c: 260: }
 18452                           ;encX24J600_driver.c: 262: if(estatVal & 0x00FF || eirVal & 0x0040)
 18453  005414  500F               	movf	ETH_EventHandler@estatVal,w,c
 18454  005416  E102               	bnz	l454
 18455  005418  AC11               	btfss	ETH_EventHandler@eirVal,6,c
 18456  00541A  D003               	goto	l10256
 18457  00541C                     l454:
 18458                           
 18459                           ;encX24J600_driver.c: 263: {
 18460                           ;encX24J600_driver.c: 264: if(ethData.pktReady == 0)
 18461  00541C  0101               	movlb	1	; () banked
 18462  00541E  A383               	btfss	_ethData& (0+255),1,b	;volatile
 18463                           
 18464                           ; BSR set to: 1
 18465                           ;encX24J600_driver.c: 265: {
 18466                           ;encX24J600_driver.c: 266: ethData.pktReady = 1;
 18467  005420  8383               	bsf	_ethData& (0+255),1,b	;volatile
 18468  005422                     l10256:
 18469                           
 18470                           ;encX24J600_driver.c: 267: }
 18471                           ;encX24J600_driver.c: 268: }
 18472                           ;encX24J600_driver.c: 269: ENCx24_BFC(XJ600_EIRL,eirVal);
 18473  005422  C011  F005         	movff	ETH_EventHandler@eirVal,ENCx24_BFC@bitMask
 18474  005426  C012  F006         	movff	ETH_EventHandler@eirVal+1,ENCx24_BFC@bitMask+1
 18475  00542A  0EFC               	movlw	252
 18476  00542C  EFAA  F02F         	goto	_ENCx24_BFC
 18477  005430                     __end_of_ETH_EventHandler:
 18478                           	opt stack 0
 18479                           tosu	equ	0xFFF
 18480                           tosh	equ	0xFFE
 18481                           tosl	equ	0xFFD
 18482                           pclath	equ	0xFFA
 18483                           tblptru	equ	0xFF8
 18484                           tblptrh	equ	0xFF7
 18485                           tblptrl	equ	0xFF6
 18486                           tablat	equ	0xFF5
 18487                           prodh	equ	0xFF4
 18488                           prodl	equ	0xFF3
 18489                           intcon	equ	0xFF2
 18490                           intcon2	equ	0xFF1
 18491                           indf0	equ	0xFEF
 18492                           postinc0	equ	0xFEE
 18493                           fsr0h	equ	0xFEA
 18494                           fsr0l	equ	0xFE9
 18495                           wreg	equ	0xFE8
 18496                           postinc1	equ	0xFE6
 18497                           plusw1	equ	0xFE3
 18498                           fsr1h	equ	0xFE2
 18499                           fsr1l	equ	0xFE1
 18500                           bsr	equ	0xFE0
 18501                           indf2	equ	0xFDF
 18502                           postinc2	equ	0xFDE
 18503                           postdec2	equ	0xFDD
 18504                           plusw2	equ	0xFDB
 18505                           fsr2h	equ	0xFDA
 18506                           fsr2l	equ	0xFD9
 18507                           status	equ	0xFD8
 18508                           
 18509 ;; *************** function _ETH_ResetReceiver *****************
 18510 ;; Defined at:
 18511 ;;		line 302 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 18512 ;; Parameters:    Size  Location     Type
 18513 ;;		None
 18514 ;; Auto vars:     Size  Location     Type
 18515 ;;		None
 18516 ;; Return value:  Size  Location     Type
 18517 ;;		None               void
 18518 ;; Registers used:
 18519 ;;		wreg, status,2, status,0, cstack
 18520 ;; Tracked objects:
 18521 ;;		On entry : 0/2
 18522 ;;		On exit  : 0/0
 18523 ;;		Unchanged: 0/0
 18524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18529 ;;Total ram usage:        0 bytes
 18530 ;; Hardware stack levels used:    1
 18531 ;; Hardware stack levels required when called:    6
 18532 ;; This function calls:
 18533 ;;		_ENCx24_BFC
 18534 ;;		_ENCx24_BFS
 18535 ;;		_ENCx24_Write
 18536 ;; This function is called by:
 18537 ;;		_ETH_EventHandler
 18538 ;; This function uses a non-reentrant model
 18539 ;;
 18540                           
 18541                           	psect	text66
 18542  005E94                     __ptext66:
 18543                           	opt stack 0
 18544  005E94                     _ETH_ResetReceiver:
 18545                           	opt stack 22
 18546                           
 18547                           ;encX24J600_driver.c: 304: ENCx24_BFS(XJ600_ECON2L, 0x0020);
 18548                           
 18549                           ;incstack = 0
 18550  005E94  6A06               	clrf	ENCx24_BFS@bitMask+1,c
 18551  005E96  0E20               	movlw	32
 18552  005E98  6E05               	movwf	ENCx24_BFS@bitMask,c
 18553  005E9A  0E6E               	movlw	110
 18554  005E9C  EC8A  F02F         	call	_ENCx24_BFS
 18555                           
 18556                           ;encX24J600_driver.c: 305: ENCx24_BFC(XJ600_ECON2L, 0x0020);
 18557  005EA0  6A06               	clrf	ENCx24_BFC@bitMask+1,c
 18558  005EA2  0E20               	movlw	32
 18559  005EA4  6E05               	movwf	ENCx24_BFC@bitMask,c
 18560  005EA6  0E6E               	movlw	110
 18561  005EA8  ECAA  F02F         	call	_ENCx24_BFC
 18562                           
 18563                           ;encX24J600_driver.c: 307: ENCx24_BFC(XJ600_ECON1L, 0x0001);
 18564  005EAC  6A06               	clrf	ENCx24_BFC@bitMask+1,c
 18565  005EAE  0E01               	movlw	1
 18566  005EB0  6E05               	movwf	ENCx24_BFC@bitMask,c
 18567  005EB2  0EFE               	movlw	254
 18568  005EB4  ECAA  F02F         	call	_ENCx24_BFC
 18569                           
 18570                           ;encX24J600_driver.c: 310: nextPacketPointer = 0x1600ul;
 18571  005EB8  EC2C  F027         	call	PL440	;call to abstracted procedure
 18572                           
 18573                           ; BSR set to: 1
 18574                           ;encX24J600_driver.c: 313: ENCx24_Write(XJ600_ERXSTL, 0x1600ul);
 18575  005EBC  EC35  F027         	call	PL488	;call to abstracted procedure
 18576  005EC0  EC29  F02F         	call	_ENCx24_Write
 18577                           
 18578                           ;encX24J600_driver.c: 314: ENCx24_Write(XJ600_ERXTAILL, 0x6000ul - 2);
 18579  005EC4  EC27  F027         	call	PL404	;call to abstracted procedure
 18580  005EC8  EC29  F02F         	call	_ENCx24_Write
 18581                           
 18582                           ;encX24J600_driver.c: 317: ENCx24_BFS(XJ600_ECON1L, 0x0001);
 18583  005ECC  EC31  F027         	call	PL450	;call to abstracted procedure
 18584  005ED0  EF8A  F02F         	goto	_ENCx24_BFS
 18585  005ED4                     __end_of_ETH_ResetReceiver:
 18586                           	opt stack 0
 18587                           tosu	equ	0xFFF
 18588                           tosh	equ	0xFFE
 18589                           tosl	equ	0xFFD
 18590                           pclath	equ	0xFFA
 18591                           tblptru	equ	0xFF8
 18592                           tblptrh	equ	0xFF7
 18593                           tblptrl	equ	0xFF6
 18594                           tablat	equ	0xFF5
 18595                           prodh	equ	0xFF4
 18596                           prodl	equ	0xFF3
 18597                           intcon	equ	0xFF2
 18598                           intcon2	equ	0xFF1
 18599                           indf0	equ	0xFEF
 18600                           postinc0	equ	0xFEE
 18601                           fsr0h	equ	0xFEA
 18602                           fsr0l	equ	0xFE9
 18603                           wreg	equ	0xFE8
 18604                           postinc1	equ	0xFE6
 18605                           plusw1	equ	0xFE3
 18606                           fsr1h	equ	0xFE2
 18607                           fsr1l	equ	0xFE1
 18608                           bsr	equ	0xFE0
 18609                           indf2	equ	0xFDF
 18610                           postinc2	equ	0xFDE
 18611                           postdec2	equ	0xFDD
 18612                           plusw2	equ	0xFDB
 18613                           fsr2h	equ	0xFDA
 18614                           fsr2l	equ	0xFD9
 18615                           status	equ	0xFD8
 18616                           
 18617 ;; *************** function _DHCP_Manage *****************
 18618 ;; Defined at:
 18619 ;;		line 130 in file "../../TCPIP Library/source/dhcp_client.c"
 18620 ;; Parameters:    Size  Location     Type
 18621 ;;		None
 18622 ;; Auto vars:     Size  Location     Type
 18623 ;;		None
 18624 ;; Return value:  Size  Location     Type
 18625 ;;		None               void
 18626 ;; Registers used:
 18627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18628 ;; Tracked objects:
 18629 ;;		On entry : F/0
 18630 ;;		On exit  : E/0
 18631 ;;		Unchanged: 0/0
 18632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18637 ;;Total ram usage:        0 bytes
 18638 ;; Hardware stack levels used:    1
 18639 ;; Hardware stack levels required when called:   11
 18640 ;; This function calls:
 18641 ;;		_DHCP_Request
 18642 ;; This function is called by:
 18643 ;;		_Network_Manage
 18644 ;; This function uses a non-reentrant model
 18645 ;;
 18646                           
 18647                           	psect	text67
 18648  00569C                     __ptext67:
 18649                           	opt stack 0
 18650  00569C                     _DHCP_Manage:
 18651                           	opt stack 18
 18652                           
 18653                           ; BSR set to: 0
 18654                           ;dhcp_client.c: 132: if(ethData.linkChange)
 18655                           
 18656                           ;incstack = 0
 18657  00569C  0101               	movlb	1	; () banked
 18658  00569E  A983               	btfss	_ethData& (0+255),4,b	;volatile
 18659  0056A0  D017               	goto	l10300
 18660                           
 18661                           ; BSR set to: 1
 18662                           ;dhcp_client.c: 133: {
 18663                           ;dhcp_client.c: 134: if (clientState == BOUND && dhcpLeaseTime)
 18664  0056A2  0E05               	movlw	5
 18665  0056A4  0100               	movlb	0	; () banked
 18666  0056A6  19FF               	xorwf	_clientState& (0+255),w,b
 18667  0056A8  E10B               	bnz	l10294
 18668                           
 18669                           ; BSR set to: 0
 18670  0056AA  D83E               	call	PL322	;call to abstracted procedure
 18671  0056AC  E009               	bz	l10294
 18672                           
 18673                           ; BSR set to: 1
 18674                           ;dhcp_client.c: 135: {
 18675                           ;dhcp_client.c: 136: dhcpServerId = 0xFFFFFFFF;
 18676  0056AE  0102               	movlb	2	; () banked
 18677  0056B0  6922               	setf	_dhcpServerId& (0+255),b
 18678  0056B2  6923               	setf	(_dhcpServerId+1)& (0+255),b
 18679  0056B4  6924               	setf	(_dhcpServerId+2)& (0+255),b
 18680  0056B6  6925               	setf	(_dhcpServerId+3)& (0+255),b
 18681                           
 18682                           ; BSR set to: 2
 18683                           ;dhcp_client.c: 137: DHCP_Request(DHCP_REQUEST);
 18684  0056B8  0E03               	movlw	3
 18685  0056BA  EC5E  F022         	call	_DHCP_Request
 18686                           
 18687                           ;dhcp_client.c: 138: }
 18688  0056BE  D005               	goto	l10298
 18689  0056C0                     l10294:
 18690                           
 18691                           ;dhcp_client.c: 139: else
 18692                           ;dhcp_client.c: 140: {
 18693                           ;dhcp_client.c: 141: clientState = INIT;
 18694  0056C0  0E01               	movlw	1
 18695  0056C2  0100               	movlb	0	; () banked
 18696  0056C4  6FFF               	movwf	_clientState& (0+255),b
 18697                           
 18698                           ; BSR set to: 0
 18699                           ;dhcp_client.c: 142: DHCP_Request(DHCP_DISCOVER);
 18700  0056C6  EC5E  F022         	call	_DHCP_Request
 18701  0056CA                     l10298:
 18702                           
 18703                           ; BSR set to: 0
 18704                           ;dhcp_client.c: 143: }
 18705                           ;dhcp_client.c: 144: ethData.linkChange=0;
 18706  0056CA  0101               	movlb	1	; () banked
 18707  0056CC  9983               	bcf	_ethData& (0+255),4,b	;volatile
 18708                           
 18709                           ;dhcp_client.c: 145: }
 18710  0056CE  0012               	return	
 18711  0056D0                     l10300:
 18712                           
 18713                           ; BSR set to: 1
 18714                           ;dhcp_client.c: 146: else if (clientState == INIT || clientState == INIT_REBOOT)
 18715  0056D0  0100               	movlb	0	; () banked
 18716  0056D2  05FF               	decf	_clientState& (0+255),w,b
 18717  0056D4  E003               	bz	l10304
 18718                           
 18719                           ; BSR set to: 0
 18720  0056D6  0E02               	movlw	2
 18721  0056D8  19FF               	xorwf	_clientState& (0+255),w,b
 18722  0056DA  E104               	bnz	l10308
 18723  0056DC                     l10304:
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;dhcp_client.c: 147: {
 18727                           ;dhcp_client.c: 148: clientState = INIT;
 18728  0056DC  0E01               	movlw	1
 18729  0056DE  6FFF               	movwf	_clientState& (0+255),b
 18730                           
 18731                           ; BSR set to: 0
 18732                           ;dhcp_client.c: 149: DHCP_Request(DHCP_DISCOVER);
 18733  0056E0  EF5E  F022         	goto	_DHCP_Request
 18734  0056E4                     l10308:
 18735                           
 18736                           ; BSR set to: 0
 18737                           ;dhcp_client.c: 151: else if ((dhcpLeaseTime < 100)&& clientState == BOUND)
 18738  0056E4  0101               	movlb	1	; () banked
 18739  0056E6  5191               	movf	(_dhcpLeaseTime+3)& (0+255),w,b
 18740  0056E8  1190               	iorwf	(_dhcpLeaseTime+2)& (0+255),w,b
 18741  0056EA  118F               	iorwf	(_dhcpLeaseTime+1)& (0+255),w,b
 18742  0056EC  E10A               	bnz	l10314
 18743  0056EE  0E64               	movlw	100
 18744  0056F0  5D8E               	subwf	_dhcpLeaseTime& (0+255),w,b
 18745  0056F2  E207               	bc	l10314
 18746                           
 18747                           ; BSR set to: 1
 18748  0056F4  0E05               	movlw	5
 18749  0056F6  0100               	movlb	0	; () banked
 18750  0056F8  19FF               	xorwf	_clientState& (0+255),w,b
 18751  0056FA  E103               	bnz	l10314
 18752                           
 18753                           ; BSR set to: 0
 18754                           ;dhcp_client.c: 152: {
 18755                           ;dhcp_client.c: 153: DHCP_Request(DHCP_REQUEST);
 18756  0056FC  0E03               	movlw	3
 18757  0056FE  EF5E  F022         	goto	_DHCP_Request
 18758  005702                     l10314:
 18759                           
 18760                           ;dhcp_client.c: 155: else
 18761                           ;dhcp_client.c: 156: {
 18762                           ;dhcp_client.c: 157: if(clientState == BOUND && dhcpLeaseTime) dhcpLeaseTime --;
 18763  005702  0E05               	movlw	5
 18764  005704  0100               	movlb	0	; () banked
 18765  005706  19FF               	xorwf	_clientState& (0+255),w,b
 18766  005708  E108               	bnz	l10320
 18767                           
 18768                           ; BSR set to: 0
 18769  00570A  D80E               	call	PL322	;call to abstracted procedure
 18770  00570C  E006               	bz	l10320
 18771                           
 18772                           ; BSR set to: 1
 18773  00570E  078E               	decf	_dhcpLeaseTime& (0+255),f,b
 18774  005710  0E00               	movlw	0
 18775  005712  5B8F               	subwfb	(_dhcpLeaseTime+1)& (0+255),f,b
 18776  005714  5B90               	subwfb	(_dhcpLeaseTime+2)& (0+255),f,b
 18777  005716  5B91               	subwfb	(_dhcpLeaseTime+3)& (0+255),f,b
 18778  005718  0C00               	retlw	0
 18779  00571A                     l10320:
 18780                           
 18781                           ;dhcp_client.c: 158: else if (!dhcpLeaseTime) clientState = INIT_REBOOT;
 18782  00571A  D806               	call	PL322	;call to abstracted procedure
 18783  00571C  A4D8               	btfss	status,2,c
 18784  00571E  0012               	return	
 18785                           
 18786                           ; BSR set to: 1
 18787  005720  0E02               	movlw	2
 18788  005722  0100               	movlb	0	; () banked
 18789  005724  6FFF               	movwf	_clientState& (0+255),b
 18790  005726  0C02               	retlw	2
 18791  005728                     __end_of_DHCP_Manage:
 18792                           	opt stack 0
 18793  005728                     PL322:
 18794                           	opt stack 18
 18795  005728  0101               	movlb	1	; () banked
 18796  00572A  518E               	movf	_dhcpLeaseTime& (0+255),w,b
 18797  00572C  118F               	iorwf	(_dhcpLeaseTime+1)& (0+255),w,b
 18798  00572E  1190               	iorwf	(_dhcpLeaseTime+2)& (0+255),w,b
 18799  005730  1191               	iorwf	(_dhcpLeaseTime+3)& (0+255),w,b
 18800  005732  0012               	return	
 18801  005734                     __end_ofPL322:
 18802                           	opt stack 0
 18803                           tosu	equ	0xFFF
 18804                           tosh	equ	0xFFE
 18805                           tosl	equ	0xFFD
 18806                           pclath	equ	0xFFA
 18807                           tblptru	equ	0xFF8
 18808                           tblptrh	equ	0xFF7
 18809                           tblptrl	equ	0xFF6
 18810                           tablat	equ	0xFF5
 18811                           prodh	equ	0xFF4
 18812                           prodl	equ	0xFF3
 18813                           intcon	equ	0xFF2
 18814                           intcon2	equ	0xFF1
 18815                           indf0	equ	0xFEF
 18816                           postinc0	equ	0xFEE
 18817                           fsr0h	equ	0xFEA
 18818                           fsr0l	equ	0xFE9
 18819                           wreg	equ	0xFE8
 18820                           postinc1	equ	0xFE6
 18821                           plusw1	equ	0xFE3
 18822                           fsr1h	equ	0xFE2
 18823                           fsr1l	equ	0xFE1
 18824                           bsr	equ	0xFE0
 18825                           indf2	equ	0xFDF
 18826                           postinc2	equ	0xFDE
 18827                           postdec2	equ	0xFDD
 18828                           plusw2	equ	0xFDB
 18829                           fsr2h	equ	0xFDA
 18830                           fsr2l	equ	0xFD9
 18831                           status	equ	0xFD8
 18832                           
 18833 ;; *************** function _DHCP_Request *****************
 18834 ;; Defined at:
 18835 ;;		line 71 in file "../../TCPIP Library/source/dhcp_client.c"
 18836 ;; Parameters:    Size  Location     Type
 18837 ;;  type            1    wreg     enum E592
 18838 ;; Auto vars:     Size  Location     Type
 18839 ;;  type            1   16[BANK0 ] enum E592
 18840 ;;  ethMAC          6   17[BANK0 ] struct .
 18841 ;;  msglength       2    0        unsigned int 
 18842 ;;  started         1   15[BANK0 ] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;		None               void
 18845 ;; Registers used:
 18846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18847 ;; Tracked objects:
 18848 ;;		On entry : D/0
 18849 ;;		On exit  : F/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18853 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18855 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18856 ;;Total ram usage:        8 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:   10
 18859 ;; This function calls:
 18860 ;;		_DHCP_WriteZeros
 18861 ;;		_ETH_GetMAC
 18862 ;;		_ETH_Write16
 18863 ;;		_ETH_Write32
 18864 ;;		_ETH_Write8
 18865 ;;		_ETH_WriteBlock
 18866 ;;		_UDP_Send
 18867 ;;		_UDP_Start
 18868 ;; This function is called by:
 18869 ;;		_DHCP_Manage
 18870 ;;		_DHCP_Handler
 18871 ;; This function uses a non-reentrant model
 18872 ;;
 18873                           
 18874                           	psect	text68
 18875  0044BC                     __ptext68:
 18876                           	opt stack 0
 18877  0044BC                     _DHCP_Request:
 18878                           	opt stack 15
 18879                           
 18880                           ;incstack = 0
 18881                           ;DHCP_Request@type stored from wreg
 18882  0044BC  0100               	movlb	0	; () banked
 18883  0044BE  6F70               	movwf	DHCP_Request@type& (0+255),b
 18884                           
 18885                           ;dhcp_client.c: 78: ETH_GetMAC((char*)&ethMAC);
 18886  0044C0  0E71               	movlw	low DHCP_Request@ethMAC
 18887  0044C2  6E08               	movwf	ETH_GetMAC@macAddr,c
 18888  0044C4  6A09               	clrf	ETH_GetMAC@macAddr+1,c
 18889  0044C6  ECFC  F02C         	call	_ETH_GetMAC	;wreg free
 18890                           
 18891                           ;dhcp_client.c: 83: }
 18892                           ;dhcp_client.c: 85: started = UDP_Start(0xFFFFFFFF,68,67);
 18893  0044CA  ECB6  F028         	call	PL408	;call to abstracted procedure
 18894  0044CE  6B6C               	clrf	(UDP_Start@srcPort+1)& (0+255),b
 18895  0044D0  0E44               	movlw	68
 18896  0044D2  6F6B               	movwf	UDP_Start@srcPort& (0+255),b
 18897  0044D4  6B6E               	clrf	(UDP_Start@dstPort+1)& (0+255),b
 18898  0044D6  0E43               	movlw	67
 18899  0044D8  6F6D               	movwf	UDP_Start@dstPort& (0+255),b
 18900  0044DA  ECFA  F02D         	call	_UDP_Start	;wreg free
 18901  0044DE  0100               	movlb	0	; () banked
 18902  0044E0  6F6F               	movwf	DHCP_Request@started& (0+255),b
 18903                           
 18904                           ; BSR set to: 0
 18905                           ;dhcp_client.c: 87: if(started==SUCCESS)
 18906  0044E2  056F               	decf	DHCP_Request@started& (0+255),w,b
 18907  0044E4  A4D8               	btfss	status,2,c
 18908  0044E6  0012               	return	
 18909                           
 18910                           ; BSR set to: 0
 18911                           ;dhcp_client.c: 88: {
 18912                           ;dhcp_client.c: 89: ETH_Write32(0x01010600);
 18913  0044E8  6A03               	clrf	ETH_Write32@data,c
 18914  0044EA  0E06               	movlw	6
 18915  0044EC  6E04               	movwf	ETH_Write32@data+1,c
 18916  0044EE  0E01               	movlw	1
 18917  0044F0  6E05               	movwf	ETH_Write32@data+2,c
 18918  0044F2  6E06               	movwf	ETH_Write32@data+3,c
 18919  0044F4  EC44  F031         	call	_ETH_Write32	;wreg free
 18920                           
 18921                           ;dhcp_client.c: 90: ETH_Write32(xidValue);
 18922  0044F8  0E50               	movlw	80
 18923  0044FA  6E03               	movwf	ETH_Write32@data,c
 18924  0044FC  0E48               	movlw	72
 18925  0044FE  6E04               	movwf	ETH_Write32@data+1,c
 18926  004500  0E43               	movlw	67
 18927  004502  6E05               	movwf	ETH_Write32@data+2,c
 18928  004504  0E4D               	movlw	77
 18929  004506  6E06               	movwf	ETH_Write32@data+3,c
 18930  004508  EC44  F031         	call	_ETH_Write32	;wreg free
 18931                           
 18932                           ;dhcp_client.c: 91: ETH_Write32(0x00008000);
 18933  00450C  6A03               	clrf	ETH_Write32@data,c
 18934  00450E  0E80               	movlw	128
 18935  004510  6E04               	movwf	ETH_Write32@data+1,c
 18936  004512  6A05               	clrf	ETH_Write32@data+2,c
 18937  004514  6A06               	clrf	ETH_Write32@data+3,c
 18938  004516  EC44  F031         	call	_ETH_Write32	;wreg free
 18939                           
 18940                           ;dhcp_client.c: 92: if (type == DHCP_REQUEST)
 18941  00451A  0E03               	movlw	3
 18942  00451C  0100               	movlb	0	; () banked
 18943  00451E  1970               	xorwf	DHCP_Request@type& (0+255),w,b
 18944  004520  E104               	bnz	l8632
 18945                           
 18946                           ; BSR set to: 0
 18947                           ;dhcp_client.c: 93: {
 18948                           ;dhcp_client.c: 94: ETH_Write32(0);
 18949  004522  D899               	call	PL336	;call to abstracted procedure
 18950  004524  EC44  F031         	call	_ETH_Write32	;wreg free
 18951                           
 18952                           ;dhcp_client.c: 95: }
 18953  004528  D003               	goto	l863
 18954  00452A                     l8632:
 18955                           
 18956                           ; BSR set to: 0
 18957                           ;dhcp_client.c: 96: else
 18958                           ;dhcp_client.c: 97: {
 18959                           ;dhcp_client.c: 98: ETH_Write32(ipv4Address);
 18960  00452A  D88C               	call	PL236	;call to abstracted procedure
 18961  00452C  EC44  F031         	call	_ETH_Write32	;wreg free
 18962  004530                     l863:
 18963                           
 18964                           ;dhcp_client.c: 99: }
 18965                           ;dhcp_client.c: 100: ETH_Write32(0);
 18966  004530  D892               	call	PL336	;call to abstracted procedure
 18967  004532  EC44  F031         	call	_ETH_Write32	;wreg free
 18968                           
 18969                           ;dhcp_client.c: 101: ETH_Write32(0);
 18970  004536  D88F               	call	PL336	;call to abstracted procedure
 18971  004538  EC44  F031         	call	_ETH_Write32	;wreg free
 18972                           
 18973                           ;dhcp_client.c: 102: ETH_Write32(0);
 18974  00453C  D88C               	call	PL336	;call to abstracted procedure
 18975  00453E  EC44  F031         	call	_ETH_Write32	;wreg free
 18976                           
 18977                           ;dhcp_client.c: 103: ETH_WriteBlock((char *)&ethMAC,6);
 18978  004542  D88E               	call	PL374	;call to abstracted procedure
 18979  004544  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 18980                           
 18981                           ;dhcp_client.c: 104: DHCP_WriteZeros(202);
 18982  004548  6A05               	clrf	DHCP_WriteZeros@length+1,c
 18983  00454A  0ECA               	movlw	202
 18984  00454C  6E04               	movwf	DHCP_WriteZeros@length,c
 18985  00454E  EC7E  F032         	call	_DHCP_WriteZeros	;wreg free
 18986                           
 18987                           ;dhcp_client.c: 105: ETH_Write32(0x63825363);
 18988  004552  0E63               	movlw	99
 18989  004554  6E03               	movwf	ETH_Write32@data,c
 18990  004556  0E53               	movlw	83
 18991  004558  6E04               	movwf	ETH_Write32@data+1,c
 18992  00455A  0E82               	movlw	130
 18993  00455C  6E05               	movwf	ETH_Write32@data+2,c
 18994  00455E  0E63               	movlw	99
 18995  004560  6E06               	movwf	ETH_Write32@data+3,c
 18996  004562  EC44  F031         	call	_ETH_Write32	;wreg free
 18997                           
 18998                           ;dhcp_client.c: 107: ETH_Write8(53);
 18999  004566  0E35               	movlw	53
 19000  004568  EC4C  F032         	call	_ETH_Write8
 19001                           
 19002                           ;dhcp_client.c: 108: ETH_Write8(1);
 19003  00456C  0E01               	movlw	1
 19004  00456E  EC4C  F032         	call	_ETH_Write8
 19005                           
 19006                           ;dhcp_client.c: 109: ETH_Write8(type);
 19007  004572  0100               	movlb	0	; () banked
 19008  004574  5170               	movf	DHCP_Request@type& (0+255),w,b
 19009  004576  EC4C  F032         	call	_ETH_Write8
 19010                           
 19011                           ;dhcp_client.c: 110: if(type == DHCP_REQUEST)
 19012  00457A  0E03               	movlw	3
 19013  00457C  0100               	movlb	0	; () banked
 19014  00457E  1970               	xorwf	DHCP_Request@type& (0+255),w,b
 19015  004580  E119               	bnz	l864
 19016                           
 19017                           ; BSR set to: 0
 19018                           ;dhcp_client.c: 111: {
 19019                           ;dhcp_client.c: 112: ETH_Write8(54);ETH_Write8(4);ETH_Write32(dhcpServerId);
 19020  004582  0E36               	movlw	54
 19021  004584  EC4C  F032         	call	_ETH_Write8
 19022  004588  0E04               	movlw	4
 19023  00458A  EC4C  F032         	call	_ETH_Write8
 19024  00458E  C222  F003         	movff	_dhcpServerId,ETH_Write32@data
 19025  004592  C223  F004         	movff	_dhcpServerId+1,ETH_Write32@data+1
 19026  004596  C224  F005         	movff	_dhcpServerId+2,ETH_Write32@data+2
 19027  00459A  C225  F006         	movff	_dhcpServerId+3,ETH_Write32@data+3
 19028  00459E  EC44  F031         	call	_ETH_Write32	;wreg free
 19029                           
 19030                           ;dhcp_client.c: 113: ETH_Write8(50);ETH_Write8(4);ETH_Write32(ipv4Address);
 19031  0045A2  0E32               	movlw	50
 19032  0045A4  EC4C  F032         	call	_ETH_Write8
 19033  0045A8  0E04               	movlw	4
 19034  0045AA  EC4C  F032         	call	_ETH_Write8
 19035  0045AE  D84A               	call	PL236	;call to abstracted procedure
 19036  0045B0  EC44  F031         	call	_ETH_Write32	;wreg free
 19037  0045B4                     l864:
 19038                           
 19039                           ;dhcp_client.c: 114: }
 19040                           ;dhcp_client.c: 115: ETH_Write8(55); ETH_Write8(4); ETH_Write8(1); ETH_Write8(3); ETH_Wr
      +                          ite8(6); ETH_Write8(15);
 19041  0045B4  0E37               	movlw	55
 19042  0045B6  EC4C  F032         	call	_ETH_Write8
 19043  0045BA  0E04               	movlw	4
 19044  0045BC  EC4C  F032         	call	_ETH_Write8
 19045  0045C0  0E01               	movlw	1
 19046  0045C2  EC4C  F032         	call	_ETH_Write8
 19047  0045C6  0E03               	movlw	3
 19048  0045C8  EC4C  F032         	call	_ETH_Write8
 19049  0045CC  0E06               	movlw	6
 19050  0045CE  EC4C  F032         	call	_ETH_Write8
 19051  0045D2  0E0F               	movlw	15
 19052  0045D4  EC4C  F032         	call	_ETH_Write8
 19053                           
 19054                           ;dhcp_client.c: 116: ETH_Write8(57); ETH_Write8(2); ETH_Write16(512);
 19055  0045D8  0E39               	movlw	57
 19056  0045DA  EC4C  F032         	call	_ETH_Write8
 19057  0045DE  0E02               	movlw	2
 19058  0045E0  EC4C  F032         	call	_ETH_Write8
 19059  0045E4  0E02               	movlw	2
 19060  0045E6  6E04               	movwf	ETH_Write16@data+1,c
 19061  0045E8  6A03               	clrf	ETH_Write16@data,c
 19062  0045EA  EC91  F031         	call	_ETH_Write16	;wreg free
 19063                           
 19064                           ;dhcp_client.c: 117: ETH_Write8(12); ETH_Write8(20); ETH_WriteBlock((char *)dhcpName,20)
      +                          ;
 19065  0045EE  0E0C               	movlw	12
 19066  0045F0  EC4C  F032         	call	_ETH_Write8
 19067  0045F4  0E14               	movlw	20
 19068  0045F6  EC4C  F032         	call	_ETH_Write8
 19069  0045FA  0E13               	movlw	low _dhcpName
 19070  0045FC  6E03               	movwf	ETH_WriteBlock@data,c
 19071  0045FE  5003               	movf	ETH_WriteBlock@data,w,c
 19072  004600  A4D8               	btfss	status,2,c
 19073  004602  0E10               	movlw	high __smallconst
 19074  004604  6E04               	movwf	ETH_WriteBlock@data+1,c
 19075  004606  EC48  F016         	call	PL492	;call to abstracted procedure
 19076  00460A  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 19077                           
 19078                           ;dhcp_client.c: 119: ETH_Write8(61); ETH_Write8(7); ETH_Write8(1); ETH_WriteBlock((char 
      +                          *)&ethMAC,6);
 19079  00460E  0E3D               	movlw	61
 19080  004610  EC4C  F032         	call	_ETH_Write8
 19081  004614  0E07               	movlw	7
 19082  004616  EC4C  F032         	call	_ETH_Write8
 19083  00461A  0E01               	movlw	1
 19084  00461C  EC4C  F032         	call	_ETH_Write8
 19085  004620  D81F               	call	PL374	;call to abstracted procedure
 19086  004622  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 19087                           
 19088                           ;dhcp_client.c: 120: ETH_Write8(255);
 19089  004626  0EFF               	movlw	255
 19090  004628  EC4C  F032         	call	_ETH_Write8
 19091                           
 19092                           ;dhcp_client.c: 122: ETH_Write8(0);
 19093  00462C  0E00               	movlw	0
 19094  00462E  EC4C  F032         	call	_ETH_Write8
 19095                           
 19096                           ;dhcp_client.c: 124: UDP_Send();
 19097  004632  ECE3  F02B         	call	_UDP_Send	;wreg free
 19098                           
 19099                           ; BSR set to: 1
 19100                           ;dhcp_client.c: 125: if (type == DHCP_DISCOVER)
 19101  004636  0100               	movlb	0	; () banked
 19102  004638  0570               	decf	DHCP_Request@type& (0+255),w,b
 19103  00463A  A4D8               	btfss	status,2,c
 19104  00463C  0012               	return	
 19105                           
 19106                           ; BSR set to: 0
 19107                           ;dhcp_client.c: 126: clientState=SELECTING;
 19108  00463E  0E03               	movlw	3
 19109  004640  6FFF               	movwf	_clientState& (0+255),b
 19110                           
 19111                           ; BSR set to: 0
 19112  004642  0C03               	retlw	3	;funcret
 19113  004644                     __end_of_DHCP_Request:
 19114                           	opt stack 0
 19115  004644                     PL236:
 19116                           	opt stack 15
 19117  004644  C192  F003         	movff	_ipv4Address,ETH_Write32@data
 19118  004648  C193  F004         	movff	_ipv4Address+1,ETH_Write32@data+1
 19119  00464C  C194  F005         	movff	_ipv4Address+2,ETH_Write32@data+2
 19120  004650  C195  F006         	movff	_ipv4Address+3,ETH_Write32@data+3
 19121  004654  0012               	return	
 19122  004656                     __end_ofPL236:
 19123                           	opt stack 0
 19124  004656                     PL336:
 19125                           	opt stack 15
 19126  004656  6A03               	clrf	ETH_Write32@data,c
 19127  004658  6A04               	clrf	ETH_Write32@data+1,c
 19128  00465A  6A05               	clrf	ETH_Write32@data+2,c
 19129  00465C  6A06               	clrf	ETH_Write32@data+3,c
 19130  00465E  0012               	return	
 19131  004660                     __end_ofPL336:
 19132                           	opt stack 0
 19133  004660                     PL374:
 19134                           	opt stack 15
 19135  004660  0E71               	movlw	low DHCP_Request@ethMAC
 19136  004662  6E03               	movwf	ETH_WriteBlock@data,c
 19137  004664  6A04               	clrf	ETH_WriteBlock@data+1,c
 19138  004666  6A06               	clrf	ETH_WriteBlock@len+1,c
 19139  004668  0E06               	movlw	6
 19140  00466A  6E05               	movwf	ETH_WriteBlock@len,c
 19141  00466C  0C06               	retlw	6
 19142  00466E                     __end_ofPL374:
 19143                           	opt stack 0
 19144                           tosu	equ	0xFFF
 19145                           tosh	equ	0xFFE
 19146                           tosl	equ	0xFFD
 19147                           pclath	equ	0xFFA
 19148                           tblptru	equ	0xFF8
 19149                           tblptrh	equ	0xFF7
 19150                           tblptrl	equ	0xFF6
 19151                           tablat	equ	0xFF5
 19152                           prodh	equ	0xFF4
 19153                           prodl	equ	0xFF3
 19154                           intcon	equ	0xFF2
 19155                           intcon2	equ	0xFF1
 19156                           indf0	equ	0xFEF
 19157                           postinc0	equ	0xFEE
 19158                           fsr0h	equ	0xFEA
 19159                           fsr0l	equ	0xFE9
 19160                           wreg	equ	0xFE8
 19161                           postinc1	equ	0xFE6
 19162                           plusw1	equ	0xFE3
 19163                           fsr1h	equ	0xFE2
 19164                           fsr1l	equ	0xFE1
 19165                           bsr	equ	0xFE0
 19166                           indf2	equ	0xFDF
 19167                           postinc2	equ	0xFDE
 19168                           postdec2	equ	0xFDD
 19169                           plusw2	equ	0xFDB
 19170                           fsr2h	equ	0xFDA
 19171                           fsr2l	equ	0xFD9
 19172                           status	equ	0xFD8
 19173                           
 19174 ;; *************** function _DHCP_WriteZeros *****************
 19175 ;; Defined at:
 19176 ;;		line 277 in file "../../TCPIP Library/source/dhcp_client.c"
 19177 ;; Parameters:    Size  Location     Type
 19178 ;;  length          2    3[COMRAM] unsigned int 
 19179 ;; Auto vars:     Size  Location     Type
 19180 ;;		None
 19181 ;; Return value:  Size  Location     Type
 19182 ;;		None               void
 19183 ;; Registers used:
 19184 ;;		wreg, status,2, status,0, cstack
 19185 ;; Tracked objects:
 19186 ;;		On entry : 0/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;Total ram usage:        2 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    5
 19197 ;; This function calls:
 19198 ;;		_ETH_Write8
 19199 ;; This function is called by:
 19200 ;;		_DHCP_Request
 19201 ;; This function uses a non-reentrant model
 19202 ;;
 19203                           
 19204                           	psect	text69
 19205  0064FC                     __ptext69:
 19206                           	opt stack 0
 19207  0064FC                     _DHCP_WriteZeros:
 19208                           	opt stack 19
 19209                           
 19210                           ;dhcp_client.c: 279: while(length--)
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;incstack = 0
 19214  0064FC  D003               	goto	l8446
 19215  0064FE                     l8444:
 19216                           
 19217                           ;dhcp_client.c: 280: {
 19218                           ;dhcp_client.c: 281: ETH_Write8(0);
 19219  0064FE  0E00               	movlw	0
 19220  006500  EC4C  F032         	call	_ETH_Write8
 19221  006504                     l8446:
 19222  006504  0604               	decf	DHCP_WriteZeros@length,f,c
 19223  006506  A0D8               	btfss	status,0,c
 19224  006508  0605               	decf	DHCP_WriteZeros@length+1,f,c
 19225  00650A  2804               	incf	DHCP_WriteZeros@length,w,c
 19226  00650C  E1F8               	bnz	l8444
 19227  00650E  2805               	incf	DHCP_WriteZeros@length+1,w,c
 19228  006510  E1F6               	bnz	l8444
 19229  006512  0012               	return		;funcret
 19230  006514                     __end_of_DHCP_WriteZeros:
 19231                           	opt stack 0
 19232                           tosu	equ	0xFFF
 19233                           tosh	equ	0xFFE
 19234                           tosl	equ	0xFFD
 19235                           pclath	equ	0xFFA
 19236                           tblptru	equ	0xFF8
 19237                           tblptrh	equ	0xFF7
 19238                           tblptrl	equ	0xFF6
 19239                           tablat	equ	0xFF5
 19240                           prodh	equ	0xFF4
 19241                           prodl	equ	0xFF3
 19242                           intcon	equ	0xFF2
 19243                           intcon2	equ	0xFF1
 19244                           indf0	equ	0xFEF
 19245                           postinc0	equ	0xFEE
 19246                           fsr0h	equ	0xFEA
 19247                           fsr0l	equ	0xFE9
 19248                           wreg	equ	0xFE8
 19249                           postinc1	equ	0xFE6
 19250                           plusw1	equ	0xFE3
 19251                           fsr1h	equ	0xFE2
 19252                           fsr1l	equ	0xFE1
 19253                           bsr	equ	0xFE0
 19254                           indf2	equ	0xFDF
 19255                           postinc2	equ	0xFDE
 19256                           postdec2	equ	0xFDD
 19257                           plusw2	equ	0xFDB
 19258                           fsr2h	equ	0xFDA
 19259                           fsr2l	equ	0xFD9
 19260                           status	equ	0xFD8
 19261                           
 19262 ;; *************** function _ARPV4_Update *****************
 19263 ;; Defined at:
 19264 ;;		line 179 in file "../../TCPIP Library/source/arpv4.c"
 19265 ;; Parameters:    Size  Location     Type
 19266 ;;		None
 19267 ;; Auto vars:     Size  Location     Type
 19268 ;;  x               1    3[COMRAM] unsigned char 
 19269 ;;  entryPointer    2    1[COMRAM] PTR struct .
 19270 ;;		 -> arpMap(104), 
 19271 ;; Return value:  Size  Location     Type
 19272 ;;		None               void
 19273 ;; Registers used:
 19274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19275 ;; Tracked objects:
 19276 ;;		On entry : F/0
 19277 ;;		On exit  : F/0
 19278 ;;		Unchanged: F/0
 19279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;Total ram usage:        3 bytes
 19285 ;; Hardware stack levels used:    1
 19286 ;; Hardware stack levels required when called:    3
 19287 ;; This function calls:
 19288 ;;		Nothing
 19289 ;; This function is called by:
 19290 ;;		_Network_Manage
 19291 ;; This function uses a non-reentrant model
 19292 ;;
 19293                           
 19294                           	psect	text70
 19295  00625E                     __ptext70:
 19296                           	opt stack 0
 19297  00625E                     _ARPV4_Update:
 19298                           	opt stack 26
 19299                           
 19300                           ; BSR set to: 0
 19301                           ;arpv4.c: 181: arpMap_t *entryPointer = arpMap;
 19302                           
 19303                           ;incstack = 0
 19304  00625E  0E2E               	movlw	low _arpMap
 19305  006260  6E02               	movwf	ARPV4_Update@entryPointer,c
 19306  006262  0E02               	movlw	high _arpMap
 19307  006264  6E03               	movwf	ARPV4_Update@entryPointer+1,c
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;arpv4.c: 182: for(uint8_t x=0; x < 8; x++)
 19311  006266  6A04               	clrf	ARPV4_Update@x,c
 19312  006268                     l10276:
 19313                           
 19314                           ; BSR set to: 0
 19315                           ;arpv4.c: 183: {
 19316                           ;arpv4.c: 184: entryPointer->age ++;
 19317  006268  EE20 F00C          	lfsr	2,12
 19318  00626C  5002               	movf	ARPV4_Update@entryPointer,w,c
 19319  00626E  26D9               	addwf	fsr2l,f,c
 19320  006270  5003               	movf	ARPV4_Update@entryPointer+1,w,c
 19321  006272  22DA               	addwfc	fsr2h,f,c
 19322  006274  2ADF               	incf	indf2,f,c
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;arpv4.c: 185: entryPointer ++;
 19326  006276  0E0D               	movlw	13
 19327  006278  2602               	addwf	ARPV4_Update@entryPointer,f,c
 19328  00627A  0E00               	movlw	0
 19329  00627C  2203               	addwfc	ARPV4_Update@entryPointer+1,f,c
 19330                           
 19331                           ; BSR set to: 0
 19332  00627E  2A04               	incf	ARPV4_Update@x,f,c
 19333                           
 19334                           ; BSR set to: 0
 19335  006280  0E07               	movlw	7
 19336  006282  6404               	cpfsgt	ARPV4_Update@x,c
 19337  006284  D7F1               	goto	l10276
 19338  006286  0C07               	retlw	7
 19339  006288                     __end_of_ARPV4_Update:
 19340                           	opt stack 0
 19341                           tosu	equ	0xFFF
 19342                           tosh	equ	0xFFE
 19343                           tosl	equ	0xFFD
 19344                           pclath	equ	0xFFA
 19345                           tblptru	equ	0xFF8
 19346                           tblptrh	equ	0xFF7
 19347                           tblptrl	equ	0xFF6
 19348                           tablat	equ	0xFF5
 19349                           prodh	equ	0xFF4
 19350                           prodl	equ	0xFF3
 19351                           intcon	equ	0xFF2
 19352                           intcon2	equ	0xFF1
 19353                           indf0	equ	0xFEF
 19354                           postinc0	equ	0xFEE
 19355                           fsr0h	equ	0xFEA
 19356                           fsr0l	equ	0xFE9
 19357                           wreg	equ	0xFE8
 19358                           postinc1	equ	0xFE6
 19359                           plusw1	equ	0xFE3
 19360                           fsr1h	equ	0xFE2
 19361                           fsr1l	equ	0xFE1
 19362                           bsr	equ	0xFE0
 19363                           indf2	equ	0xFDF
 19364                           postinc2	equ	0xFDE
 19365                           postdec2	equ	0xFDD
 19366                           plusw2	equ	0xFDB
 19367                           fsr2h	equ	0xFDA
 19368                           fsr2l	equ	0xFD9
 19369                           status	equ	0xFD8
 19370                           
 19371 ;; *************** function _Network_Init *****************
 19372 ;; Defined at:
 19373 ;;		line 65 in file "../../TCPIP Library/source/network.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;		None
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;		None
 19378 ;; Return value:  Size  Location     Type
 19379 ;;		None               void
 19380 ;; Registers used:
 19381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/2
 19384 ;;		On exit  : F/2
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;Total ram usage:        0 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:    9
 19394 ;; This function calls:
 19395 ;;		_ARPV4_Init
 19396 ;;		_ETH_Init
 19397 ;;		_IPV4_Init
 19398 ;;		_TCP_Init
 19399 ;;		_time
 19400 ;; This function is called by:
 19401 ;;		_main
 19402 ;; This function uses a non-reentrant model
 19403 ;;
 19404                           
 19405                           	psect	text71
 19406  006368                     __ptext71:
 19407                           	opt stack 0
 19408  006368                     _Network_Init:
 19409                           	opt stack 21
 19410                           
 19411                           ;network.c: 67: ETH_Init();
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;incstack = 0
 19415  006368  ECA7  F026         	call	_ETH_Init	;wreg free
 19416                           
 19417                           ;network.c: 68: ARPV4_Init();
 19418  00636C  EC3F  F032         	call	_ARPV4_Init	;wreg free
 19419                           
 19420                           ;network.c: 69: IPV4_Init();
 19421  006370  EC06  F033         	call	_IPV4_Init	;wreg free
 19422                           
 19423                           ; BSR set to: 1
 19424                           ;network.c: 70: TCP_Init();
 19425  006374  ECEC  F032         	call	_TCP_Init	;wreg free
 19426                           
 19427                           ; BSR set to: 1
 19428                           ;network.c: 72: time(&arpTimer);
 19429  006378  0EB8               	movlw	low _arpTimer
 19430  00637A  6E02               	movwf	time@t,c
 19431  00637C  0E02               	movlw	high _arpTimer
 19432  00637E  6E03               	movwf	time@t+1,c
 19433  006380  EC52  F02D         	call	_time	;wreg free
 19434                           
 19435                           ;network.c: 73: arpTimer += 10;
 19436  006384  ECAD  F02A         	call	PL328	;call to abstracted procedure
 19437                           
 19438                           ; BSR set to: 2
 19439  006388  0C00               	retlw	0	;funcret
 19440  00638A                     __end_of_Network_Init:
 19441                           	opt stack 0
 19442                           tosu	equ	0xFFF
 19443                           tosh	equ	0xFFE
 19444                           tosl	equ	0xFFD
 19445                           pclath	equ	0xFFA
 19446                           tblptru	equ	0xFF8
 19447                           tblptrh	equ	0xFF7
 19448                           tblptrl	equ	0xFF6
 19449                           tablat	equ	0xFF5
 19450                           prodh	equ	0xFF4
 19451                           prodl	equ	0xFF3
 19452                           intcon	equ	0xFF2
 19453                           intcon2	equ	0xFF1
 19454                           indf0	equ	0xFEF
 19455                           postinc0	equ	0xFEE
 19456                           fsr0h	equ	0xFEA
 19457                           fsr0l	equ	0xFE9
 19458                           wreg	equ	0xFE8
 19459                           postinc1	equ	0xFE6
 19460                           plusw1	equ	0xFE3
 19461                           fsr1h	equ	0xFE2
 19462                           fsr1l	equ	0xFE1
 19463                           bsr	equ	0xFE0
 19464                           indf2	equ	0xFDF
 19465                           postinc2	equ	0xFDE
 19466                           postdec2	equ	0xFDD
 19467                           plusw2	equ	0xFDB
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function _time *****************
 19473 ;; Defined at:
 19474 ;;		line 198 in file "../board_support_package/picdem2_net/rtcc.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;  t               2    1[COMRAM] PTR long 
 19477 ;;		 -> main@t(4), main@now_p(4), main@ip_timer(4), Network_Manage@now(4), 
 19478 ;;		 -> arpTimer(4), NULL(0), 
 19479 ;; Auto vars:     Size  Location     Type
 19480 ;;  the_time        4    6[COMRAM] long 
 19481 ;;  gie_val         1    5[COMRAM] unsigned char 
 19482 ;; Return value:  Size  Location     Type
 19483 ;;                  4    1[COMRAM] long 
 19484 ;; Registers used:
 19485 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19486 ;; Tracked objects:
 19487 ;;		On entry : 0/2
 19488 ;;		On exit  : 0/0
 19489 ;;		Unchanged: 0/0
 19490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19492 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19494 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19495 ;;Total ram usage:        9 bytes
 19496 ;; Hardware stack levels used:    1
 19497 ;; Hardware stack levels required when called:    3
 19498 ;; This function calls:
 19499 ;;		Nothing
 19500 ;; This function is called by:
 19501 ;;		_Network_Init
 19502 ;;		_Network_Manage
 19503 ;;		_SYSLOG_Init
 19504 ;;		_SYSLOG_Write
 19505 ;;		_main
 19506 ;; This function uses a non-reentrant model
 19507 ;;
 19508                           
 19509                           	psect	text72
 19510  005AA4                     __ptext72:
 19511                           	opt stack 0
 19512  005AA4                     _time:
 19513                           	opt stack 27
 19514                           
 19515                           ;rtcc.c: 200: bool gie_val;
 19516                           ;rtcc.c: 201: time_t the_time;
 19517                           ;rtcc.c: 203: gie_val = GIE;
 19518                           
 19519                           ; BSR set to: 2
 19520                           ;incstack = 0
 19521  005AA4  0E00               	movlw	0
 19522  005AA6  BEF2               	btfsc	intcon,7,c	;volatile
 19523  005AA8  0E01               	movlw	1
 19524  005AAA  6E06               	movwf	time@gie_val,c
 19525                           
 19526                           ;rtcc.c: 204: GIE = 0;
 19527  005AAC  9EF2               	bcf	intcon,7,c	;volatile
 19528                           
 19529                           ;rtcc.c: 205: the_time = deviceTime;
 19530  005AAE  C2F1  F007         	movff	_deviceTime,time@the_time	;volatile
 19531  005AB2  C2F2  F008         	movff	_deviceTime+1,time@the_time+1	;volatile
 19532  005AB6  C2F3  F009         	movff	_deviceTime+2,time@the_time+2	;volatile
 19533  005ABA  C2F4  F00A         	movff	_deviceTime+3,time@the_time+3	;volatile
 19534                           
 19535                           ;rtcc.c: 206: GIE = gie_val;
 19536  005ABE  A006               	btfss	time@gie_val,0,c
 19537  005AC0  D002               	goto	u15290
 19538  005AC2  8EF2               	bsf	intcon,7,c	;volatile
 19539  005AC4  D001               	goto	l10148
 19540  005AC6                     u15290:
 19541  005AC6  9EF2               	bcf	intcon,7,c	;volatile
 19542  005AC8                     l10148:
 19543                           
 19544                           ;rtcc.c: 208: if(t)
 19545  005AC8  5002               	movf	time@t,w,c
 19546  005ACA  1003               	iorwf	time@t+1,w,c
 19547  005ACC  E00C               	bz	l10152
 19548                           
 19549                           ;rtcc.c: 209: {
 19550                           ;rtcc.c: 210: *t = the_time;
 19551  005ACE  C002  FFD9         	movff	time@t,fsr2l
 19552  005AD2  C003  FFDA         	movff	time@t+1,fsr2h
 19553  005AD6  C007  FFDE         	movff	time@the_time,postinc2
 19554  005ADA  C008  FFDE         	movff	time@the_time+1,postinc2
 19555  005ADE  C009  FFDE         	movff	time@the_time+2,postinc2
 19556  005AE2  C00A  FFDE         	movff	time@the_time+3,postinc2
 19557  005AE6                     l10152:
 19558                           
 19559                           ;rtcc.c: 211: }
 19560                           ;rtcc.c: 213: return (the_time);
 19561  005AE6  C007  F002         	movff	time@the_time,?_time
 19562  005AEA  C008  F003         	movff	time@the_time+1,?_time+1
 19563  005AEE  C009  F004         	movff	time@the_time+2,?_time+2
 19564  005AF2  C00A  F005         	movff	time@the_time+3,?_time+3
 19565  005AF6  0012               	return		;funcret
 19566  005AF8                     __end_of_time:
 19567                           	opt stack 0
 19568                           tosu	equ	0xFFF
 19569                           tosh	equ	0xFFE
 19570                           tosl	equ	0xFFD
 19571                           pclath	equ	0xFFA
 19572                           tblptru	equ	0xFF8
 19573                           tblptrh	equ	0xFF7
 19574                           tblptrl	equ	0xFF6
 19575                           tablat	equ	0xFF5
 19576                           prodh	equ	0xFF4
 19577                           prodl	equ	0xFF3
 19578                           intcon	equ	0xFF2
 19579                           intcon2	equ	0xFF1
 19580                           indf0	equ	0xFEF
 19581                           postinc0	equ	0xFEE
 19582                           fsr0h	equ	0xFEA
 19583                           fsr0l	equ	0xFE9
 19584                           wreg	equ	0xFE8
 19585                           postinc1	equ	0xFE6
 19586                           plusw1	equ	0xFE3
 19587                           fsr1h	equ	0xFE2
 19588                           fsr1l	equ	0xFE1
 19589                           bsr	equ	0xFE0
 19590                           indf2	equ	0xFDF
 19591                           postinc2	equ	0xFDE
 19592                           postdec2	equ	0xFDD
 19593                           plusw2	equ	0xFDB
 19594                           fsr2h	equ	0xFDA
 19595                           fsr2l	equ	0xFD9
 19596                           status	equ	0xFD8
 19597                           
 19598 ;; *************** function _TCP_Init *****************
 19599 ;; Defined at:
 19600 ;;		line 1173 in file "../../TCPIP Library/source/tcpv4.c"
 19601 ;; Parameters:    Size  Location     Type
 19602 ;;		None
 19603 ;; Auto vars:     Size  Location     Type
 19604 ;;		None
 19605 ;; Return value:  Size  Location     Type
 19606 ;;		None               void
 19607 ;; Registers used:
 19608 ;;		wreg, status,2
 19609 ;; Tracked objects:
 19610 ;;		On entry : F/1
 19611 ;;		On exit  : F/1
 19612 ;;		Unchanged: 0/0
 19613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;Total ram usage:        0 bytes
 19619 ;; Hardware stack levels used:    1
 19620 ;; Hardware stack levels required when called:    3
 19621 ;; This function calls:
 19622 ;;		Nothing
 19623 ;; This function is called by:
 19624 ;;		_Network_Init
 19625 ;; This function uses a non-reentrant model
 19626 ;;
 19627                           
 19628                           	psect	text73
 19629  0065D8                     __ptext73:
 19630                           	opt stack 0
 19631  0065D8                     _TCP_Init:
 19632                           	opt stack 26
 19633                           
 19634                           ; BSR set to: 1
 19635                           ;tcpv4.c: 1175: tcbList = (0);
 19636                           
 19637                           ;incstack = 0
 19638  0065D8  6BAC               	clrf	_tcbList& (0+255),b
 19639  0065DA  6BAD               	clrf	(_tcbList+1)& (0+255),b
 19640                           
 19641                           ;tcpv4.c: 1176: tcbListSize = 0;
 19642  0065DC  6A5D               	clrf	_tcbListSize,c
 19643                           
 19644                           ; BSR set to: 1
 19645                           ;tcpv4.c: 1178: nextSequenceNumber = 0;
 19646  0065DE  0E04               	movlw	4
 19647  0065E0  6FA5               	movwf	(_nextAvailablePort+1)& (0+255),b
 19648  0065E2  6BA4               	clrf	_nextAvailablePort& (0+255),b
 19649                           
 19650                           ; BSR set to: 1
 19651  0065E4  0C00               	retlw	0	;funcret
 19652  0065E6                     __end_of_TCP_Init:
 19653                           	opt stack 0
 19654                           tosu	equ	0xFFF
 19655                           tosh	equ	0xFFE
 19656                           tosl	equ	0xFFD
 19657                           pclath	equ	0xFFA
 19658                           tblptru	equ	0xFF8
 19659                           tblptrh	equ	0xFF7
 19660                           tblptrl	equ	0xFF6
 19661                           tablat	equ	0xFF5
 19662                           prodh	equ	0xFF4
 19663                           prodl	equ	0xFF3
 19664                           intcon	equ	0xFF2
 19665                           intcon2	equ	0xFF1
 19666                           indf0	equ	0xFEF
 19667                           postinc0	equ	0xFEE
 19668                           fsr0h	equ	0xFEA
 19669                           fsr0l	equ	0xFE9
 19670                           wreg	equ	0xFE8
 19671                           postinc1	equ	0xFE6
 19672                           plusw1	equ	0xFE3
 19673                           fsr1h	equ	0xFE2
 19674                           fsr1l	equ	0xFE1
 19675                           bsr	equ	0xFE0
 19676                           indf2	equ	0xFDF
 19677                           postinc2	equ	0xFDE
 19678                           postdec2	equ	0xFDD
 19679                           plusw2	equ	0xFDB
 19680                           fsr2h	equ	0xFDA
 19681                           fsr2l	equ	0xFD9
 19682                           status	equ	0xFD8
 19683                           
 19684 ;; *************** function _IPV4_Init *****************
 19685 ;; Defined at:
 19686 ;;		line 78 in file "../../TCPIP Library/source/ipv4.c"
 19687 ;; Parameters:    Size  Location     Type
 19688 ;;		None
 19689 ;; Auto vars:     Size  Location     Type
 19690 ;;		None
 19691 ;; Return value:  Size  Location     Type
 19692 ;;		None               void
 19693 ;; Registers used:
 19694 ;;		None
 19695 ;; Tracked objects:
 19696 ;;		On entry : 0/2
 19697 ;;		On exit  : F/1
 19698 ;;		Unchanged: 0/0
 19699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19704 ;;Total ram usage:        0 bytes
 19705 ;; Hardware stack levels used:    1
 19706 ;; Hardware stack levels required when called:    3
 19707 ;; This function calls:
 19708 ;;		Nothing
 19709 ;; This function is called by:
 19710 ;;		_Network_Init
 19711 ;; This function uses a non-reentrant model
 19712 ;;
 19713                           
 19714                           	psect	text74
 19715  00660C                     __ptext74:
 19716                           	opt stack 0
 19717  00660C                     _IPV4_Init:
 19718                           	opt stack 26
 19719                           
 19720                           ;ipv4.c: 80: ipv4Address = 0;
 19721                           
 19722                           ; BSR set to: 1
 19723                           ;incstack = 0
 19724  00660C  0101               	movlb	1	; () banked
 19725  00660E  6B92               	clrf	_ipv4Address& (0+255),b
 19726  006610  6B93               	clrf	(_ipv4Address+1)& (0+255),b
 19727  006612  6B94               	clrf	(_ipv4Address+2)& (0+255),b
 19728  006614  6B95               	clrf	(_ipv4Address+3)& (0+255),b
 19729                           
 19730                           ; BSR set to: 1
 19731  006616  0012               	return		;funcret
 19732  006618                     __end_of_IPV4_Init:
 19733                           	opt stack 0
 19734                           tosu	equ	0xFFF
 19735                           tosh	equ	0xFFE
 19736                           tosl	equ	0xFFD
 19737                           pclath	equ	0xFFA
 19738                           tblptru	equ	0xFF8
 19739                           tblptrh	equ	0xFF7
 19740                           tblptrl	equ	0xFF6
 19741                           tablat	equ	0xFF5
 19742                           prodh	equ	0xFF4
 19743                           prodl	equ	0xFF3
 19744                           intcon	equ	0xFF2
 19745                           intcon2	equ	0xFF1
 19746                           indf0	equ	0xFEF
 19747                           postinc0	equ	0xFEE
 19748                           fsr0h	equ	0xFEA
 19749                           fsr0l	equ	0xFE9
 19750                           wreg	equ	0xFE8
 19751                           postinc1	equ	0xFE6
 19752                           plusw1	equ	0xFE3
 19753                           fsr1h	equ	0xFE2
 19754                           fsr1l	equ	0xFE1
 19755                           bsr	equ	0xFE0
 19756                           indf2	equ	0xFDF
 19757                           postinc2	equ	0xFDE
 19758                           postdec2	equ	0xFDD
 19759                           plusw2	equ	0xFDB
 19760                           fsr2h	equ	0xFDA
 19761                           fsr2l	equ	0xFD9
 19762                           status	equ	0xFD8
 19763                           
 19764 ;; *************** function _ETH_Init *****************
 19765 ;; Defined at:
 19766 ;;		line 94 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 19767 ;; Parameters:    Size  Location     Type
 19768 ;;		None
 19769 ;; Auto vars:     Size  Location     Type
 19770 ;;  phcon1_val      2   21[COMRAM] unsigned int 
 19771 ;; Return value:  Size  Location     Type
 19772 ;;		None               void
 19773 ;; Registers used:
 19774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19775 ;; Tracked objects:
 19776 ;;		On entry : 0/2
 19777 ;;		On exit  : 0/0
 19778 ;;		Unchanged: 0/0
 19779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19784 ;;Total ram usage:        4 bytes
 19785 ;; Hardware stack levels used:    1
 19786 ;; Hardware stack levels required when called:    8
 19787 ;; This function calls:
 19788 ;;		_ENCx24_BFS
 19789 ;;		_ENCx24_PHYWrite
 19790 ;;		_ENCx24_PhyRead
 19791 ;;		_ENCx24_Read
 19792 ;;		_ENCx24_Write
 19793 ;;		_ETH_CheckLinkUp
 19794 ;;		_ETH_GetMAC
 19795 ;;		_ETH_SendSystemReset
 19796 ;;		_SPI_ExchangeByte
 19797 ;; This function is called by:
 19798 ;;		_Network_Init
 19799 ;; This function uses a non-reentrant model
 19800 ;;
 19801                           
 19802                           	psect	text75
 19803  004D4E                     __ptext75:
 19804                           	opt stack 0
 19805  004D4E                     _ETH_Init:
 19806                           	opt stack 21
 19807                           
 19808                           ;encX24J600_driver.c: 96: uint16_t phcon1_val;
 19809                           ;encX24J600_driver.c: 99: LATBbits.LATB5 = 0;
 19810                           
 19811                           ; BSR set to: 1
 19812                           ;incstack = 0
 19813  004D4E  9A8A               	bcf	3978,5,c	;volatile
 19814                           
 19815                           ;encX24J600_driver.c: 100: TRISBbits.TRISB5 = 0;
 19816  004D50  9A93               	bcf	3987,5,c	;volatile
 19817                           
 19818                           ;encX24J600_driver.c: 101: _delay((unsigned long)((10)*(41666667UL/4000.0)));
 19819  004D52  0E88               	movlw	136
 19820  004D54  6E14               	movwf	??_ETH_Init& (0+255),c
 19821  004D56  0E46               	movlw	70
 19822  004D58                     u16027:
 19823  004D58  2EE8               	decfsz	wreg,f,c
 19824  004D5A  D7FE               	goto	u16027
 19825  004D5C  2E14               	decfsz	??_ETH_Init& (0+255),f,c
 19826  004D5E  D7FC               	goto	u16027
 19827  004D60  D000               	nop2	
 19828                           
 19829                           ;encX24J600_driver.c: 105: PORTBbits.RB2 = 1;
 19830  004D62  8481               	bsf	3969,2,c	;volatile
 19831                           
 19832                           ;encX24J600_driver.c: 106: TRISBbits.TRISB2 = 0;
 19833  004D64  9493               	bcf	3987,2,c	;volatile
 19834                           
 19835                           ;encX24J600_driver.c: 109: LATBbits.LATB5 = 1;
 19836  004D66  8A8A               	bsf	3978,5,c	;volatile
 19837                           
 19838                           ;encX24J600_driver.c: 110: _delay((unsigned long)((400)*(41666667UL/4000000.0)));
 19839  004D68  0E06               	movlw	6
 19840  004D6A  6E14               	movwf	??_ETH_Init& (0+255),c
 19841  004D6C  0E68               	movlw	104
 19842  004D6E                     u16037:
 19843  004D6E  2EE8               	decfsz	wreg,f,c
 19844  004D70  D7FE               	goto	u16037
 19845  004D72  2E14               	decfsz	??_ETH_Init& (0+255),f,c
 19846  004D74  D7FC               	goto	u16037
 19847                           
 19848                           ;encX24J600_driver.c: 113: TRISBbits.TRISB2 = 1;
 19849  004D76  8493               	bsf	3987,2,c	;volatile
 19850  004D78  868A               	bsf	3978,3,c	;volatile
 19851                           
 19852                           ;encX24J600_driver.c: 117: ethData.error = 0;
 19853  004D7A  0101               	movlb	1	; () banked
 19854  004D7C  9183               	bcf	_ethData& (0+255),0,b	;volatile
 19855                           
 19856                           ; BSR set to: 1
 19857                           ;encX24J600_driver.c: 118: ethData.up = 0;
 19858  004D7E  9583               	bcf	_ethData& (0+255),2,b	;volatile
 19859                           
 19860                           ; BSR set to: 1
 19861                           ;encX24J600_driver.c: 119: ethData.linkChange = 0;
 19862  004D80  9983               	bcf	_ethData& (0+255),4,b	;volatile
 19863                           
 19864                           ; BSR set to: 1
 19865                           ;encX24J600_driver.c: 120: ethData.bufferBusy = 0;
 19866  004D82  9B83               	bcf	_ethData& (0+255),5,b	;volatile
 19867                           
 19868                           ; BSR set to: 1
 19869                           ;encX24J600_driver.c: 121: ethData.saveRDPT = 0;
 19870  004D84  6B86               	clrf	(_ethData+3)& (0+255),b	;volatile
 19871  004D86  6B87               	clrf	(_ethData+4)& (0+255),b	;volatile
 19872                           
 19873                           ; BSR set to: 1
 19874                           ;encX24J600_driver.c: 123: ETH_SendSystemReset();
 19875  004D88  EC60  F02C         	call	_ETH_SendSystemReset	;wreg free
 19876                           
 19877                           ;encX24J600_driver.c: 126: nextPacketPointer = 0x1600ul;
 19878  004D8C  D865               	call	PL440	;call to abstracted procedure
 19879                           
 19880                           ; BSR set to: 1
 19881                           ;encX24J600_driver.c: 129: ENCx24_Write(XJ600_ETXSTL, 0x0000ul);
 19882  004D8E  0E00               	movlw	0
 19883  004D90  6A06               	clrf	ENCx24_Write@data+1,c
 19884  004D92  6A05               	clrf	ENCx24_Write@data,c
 19885  004D94  EC29  F02F         	call	_ENCx24_Write
 19886                           
 19887                           ;encX24J600_driver.c: 130: ENCx24_Write(XJ600_ERXSTL, 0x1600ul);
 19888  004D98  0E16               	movlw	22
 19889  004D9A  D867               	call	PL488	;call to abstracted procedure
 19890  004D9C  EC29  F02F         	call	_ENCx24_Write
 19891                           
 19892                           ;encX24J600_driver.c: 131: ENCx24_Write(XJ600_ERXTAILL, 0x6000ul - 2);
 19893  004DA0  D856               	call	PL404	;call to abstracted procedure
 19894  004DA2  EC29  F02F         	call	_ENCx24_Write
 19895                           
 19896                           ;encX24J600_driver.c: 132: ENCx24_Write(XJ600_EUDASTL,0x15FFul + 1);
 19897  004DA6  0E16               	movlw	22
 19898  004DA8  6E06               	movwf	ENCx24_Write@data+1,c
 19899  004DAA  6A05               	clrf	ENCx24_Write@data,c
 19900  004DAC  0EF6               	movlw	246
 19901  004DAE  EC29  F02F         	call	_ENCx24_Write
 19902                           
 19903                           ;encX24J600_driver.c: 133: ENCx24_Write(XJ600_EUDANDL,0x15FFul + 1);
 19904  004DB2  0E16               	movlw	22
 19905  004DB4  6E06               	movwf	ENCx24_Write@data+1,c
 19906  004DB6  6A05               	clrf	ENCx24_Write@data,c
 19907  004DB8  0EF8               	movlw	248
 19908  004DBA  EC29  F02F         	call	_ENCx24_Write
 19909                           
 19910                           ;encX24J600_driver.c: 135: phcon1_val = ENCx24_PhyRead(PHCON1);
 19911  004DBE  0E00               	movlw	0
 19912  004DC0  EC6A  F02F         	call	_ENCx24_PhyRead
 19913  004DC4  C00B  F016         	movff	?_ENCx24_PhyRead,ETH_Init@phcon1_val
 19914  004DC8  C00C  F017         	movff	?_ENCx24_PhyRead+1,ETH_Init@phcon1_val+1
 19915                           
 19916                           ;encX24J600_driver.c: 136: phcon1_val &= 0xF7FF;
 19917  004DCC  9617               	bcf	ETH_Init@phcon1_val+1,3,c
 19918                           
 19919                           ;encX24J600_driver.c: 137: ENCx24_PHYWrite(PHCON1, phcon1_val);
 19920  004DCE  C016  F00B         	movff	ETH_Init@phcon1_val,ENCx24_PHYWrite@data
 19921  004DD2  C017  F00C         	movff	ETH_Init@phcon1_val+1,ENCx24_PHYWrite@data+1
 19922  004DD6  0E00               	movlw	0
 19923  004DD8  ECC0  F030         	call	_ENCx24_PHYWrite
 19924                           
 19925                           ;encX24J600_driver.c: 144: ENCx24_PHYWrite(PHANA,0x05E1);
 19926  004DDC  0E05               	movlw	5
 19927  004DDE  6E0C               	movwf	ENCx24_PHYWrite@data+1,c
 19928  004DE0  0EE1               	movlw	225
 19929  004DE2  6E0B               	movwf	ENCx24_PHYWrite@data,c
 19930  004DE4  0E04               	movlw	4
 19931  004DE6  ECC0  F030         	call	_ENCx24_PHYWrite
 19932                           
 19933                           ;encX24J600_driver.c: 147: while((ENCx24_Read(XJ600_ESTATL)&0X1100)!=0x1100)
 19934  004DEA  D008               	goto	l10204
 19935  004DEC                     l10202:
 19936                           
 19937                           ;encX24J600_driver.c: 148: {
 19938                           ;encX24J600_driver.c: 149: _delay((unsigned long)((256)*(41666667UL/4000000.0)));
 19939  004DEC  0E04               	movlw	4
 19940  004DEE  6E14               	movwf	??_ETH_Init& (0+255),c
 19941  004DF0  0E75               	movlw	117
 19942  004DF2                     u16047:
 19943  004DF2  2EE8               	decfsz	wreg,f,c
 19944  004DF4  D7FE               	goto	u16047
 19945  004DF6  2E14               	decfsz	??_ETH_Init& (0+255),f,c
 19946  004DF8  D7FC               	goto	u16047
 19947  004DFA  F000               	nop	
 19948  004DFC                     l10204:
 19949  004DFC  6A14               	clrf	??_ETH_Init& (0+255),c
 19950  004DFE  0E11               	movlw	17
 19951  004E00  6E15               	movwf	(??_ETH_Init+1)& (0+255),c
 19952  004E02  0EFA               	movlw	250
 19953  004E04  EC04  F02F         	call	_ENCx24_Read
 19954  004E08  5014               	movf	??_ETH_Init,w,c
 19955  004E0A  1605               	andwf	?_ENCx24_Read,f,c
 19956  004E0C  5015               	movf	??_ETH_Init+1,w,c
 19957  004E0E  1606               	andwf	?_ENCx24_Read+1,f,c
 19958  004E10  0E11               	movlw	17
 19959  004E12  1806               	xorwf	?_ENCx24_Read+1,w,c
 19960  004E14  1005               	iorwf	?_ENCx24_Read,w,c
 19961  004E16  E1EA               	bnz	l10202
 19962                           
 19963                           ;encX24J600_driver.c: 150: }
 19964                           ;encX24J600_driver.c: 163: ENCx24_Write(XJ600_ERXFCONL, 0x0059);
 19965  004E18  6A06               	clrf	ENCx24_Write@data+1,c
 19966  004E1A  0E59               	movlw	89
 19967  004E1C  6E05               	movwf	ENCx24_Write@data,c
 19968  004E1E  0E34               	movlw	52
 19969  004E20  EC29  F02F         	call	_ENCx24_Write
 19970                           
 19971                           ;encX24J600_driver.c: 173: ENCx24_Write(XJ600_EIEL,0x884B);
 19972  004E24  0E88               	movlw	136
 19973  004E26  6E06               	movwf	ENCx24_Write@data+1,c
 19974  004E28  0E4B               	movlw	75
 19975  004E2A  6E05               	movwf	ENCx24_Write@data,c
 19976  004E2C  0E72               	movlw	114
 19977  004E2E  EC29  F02F         	call	_ENCx24_Write
 19978                           
 19979                           ;encX24J600_driver.c: 176: ENCx24_BFS(XJ600_ECON1L,0x0001);
 19980  004E32  D817               	call	PL450	;call to abstracted procedure
 19981  004E34  EC8A  F02F         	call	_ENCx24_BFS
 19982                           
 19983                           ;encX24J600_driver.c: 180: SPI_ExchangeByte(b0sel_inst);
 19984  004E38  0EC0               	movlw	192
 19985  004E3A  ECF3  F032         	call	_SPI_ExchangeByte
 19986                           
 19987                           ;encX24J600_driver.c: 182: ETH_GetMAC((uint8_t *)&ethMAC);
 19988  004E3E  0EB2               	movlw	low _ethMAC
 19989  004E40  6E08               	movwf	ETH_GetMAC@macAddr,c
 19990  004E42  0E02               	movlw	high _ethMAC
 19991  004E44  6E09               	movwf	ETH_GetMAC@macAddr+1,c
 19992  004E46  ECFC  F02C         	call	_ETH_GetMAC	;wreg free
 19993                           
 19994                           ;encX24J600_driver.c: 185: ETH_CheckLinkUp();
 19995  004E4A  EF77  F030         	goto	_ETH_CheckLinkUp	;wreg free
 19996  004E4E                     __end_of_ETH_Init:
 19997                           	opt stack 0
 19998  004E4E                     PL404:
 19999                           	opt stack 22
 20000  004E4E  0E5F               	movlw	95
 20001  004E50  6E06               	movwf	ENCx24_Write@data+1,c
 20002  004E52  0EFE               	movlw	254
 20003  004E54  6E05               	movwf	ENCx24_Write@data,c
 20004  004E56  0C06               	retlw	6
 20005  004E58                     __end_ofPL404:
 20006                           	opt stack 0
 20007  004E58                     PL440:
 20008                           	opt stack 22
 20009  004E58  0E16               	movlw	22
 20010  004E5A  0101               	movlb	1	; () banked
 20011  004E5C  6FA7               	movwf	(_nextPacketPointer+1)& (0+255),b
 20012  004E5E  6BA6               	clrf	_nextPacketPointer& (0+255),b
 20013  004E60  0C16               	retlw	22
 20014  004E62                     __end_ofPL440:
 20015                           	opt stack 0
 20016  004E62                     PL450:
 20017                           	opt stack 22
 20018  004E62  6A06               	clrf	ENCx24_BFS@bitMask+1,c
 20019  004E64  0E01               	movlw	1
 20020  004E66  6E05               	movwf	ENCx24_BFS@bitMask,c
 20021  004E68  0CFE               	retlw	254
 20022  004E6A                     __end_ofPL450:
 20023                           	opt stack 0
 20024  004E6A                     PL488:
 20025                           	opt stack 22
 20026  004E6A  6E06               	movwf	ENCx24_Write@data+1,c
 20027  004E6C  6A05               	clrf	ENCx24_Write@data,c
 20028  004E6E  0C04               	retlw	4
 20029  004E70                     __end_ofPL488:
 20030                           	opt stack 0
 20031                           tosu	equ	0xFFF
 20032                           tosh	equ	0xFFE
 20033                           tosl	equ	0xFFD
 20034                           pclath	equ	0xFFA
 20035                           tblptru	equ	0xFF8
 20036                           tblptrh	equ	0xFF7
 20037                           tblptrl	equ	0xFF6
 20038                           tablat	equ	0xFF5
 20039                           prodh	equ	0xFF4
 20040                           prodl	equ	0xFF3
 20041                           intcon	equ	0xFF2
 20042                           intcon2	equ	0xFF1
 20043                           indf0	equ	0xFEF
 20044                           postinc0	equ	0xFEE
 20045                           fsr0h	equ	0xFEA
 20046                           fsr0l	equ	0xFE9
 20047                           wreg	equ	0xFE8
 20048                           postinc1	equ	0xFE6
 20049                           plusw1	equ	0xFE3
 20050                           fsr1h	equ	0xFE2
 20051                           fsr1l	equ	0xFE1
 20052                           bsr	equ	0xFE0
 20053                           indf2	equ	0xFDF
 20054                           postinc2	equ	0xFDE
 20055                           postdec2	equ	0xFDD
 20056                           plusw2	equ	0xFDB
 20057                           fsr2h	equ	0xFDA
 20058                           fsr2l	equ	0xFD9
 20059                           status	equ	0xFD8
 20060                           
 20061 ;; *************** function _ETH_SendSystemReset *****************
 20062 ;; Defined at:
 20063 ;;		line 67 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 20064 ;; Parameters:    Size  Location     Type
 20065 ;;		None
 20066 ;; Auto vars:     Size  Location     Type
 20067 ;;		None
 20068 ;; Return value:  Size  Location     Type
 20069 ;;		None               void
 20070 ;; Registers used:
 20071 ;;		wreg, status,2, status,0, cstack
 20072 ;; Tracked objects:
 20073 ;;		On entry : F/1
 20074 ;;		On exit  : 0/0
 20075 ;;		Unchanged: 0/0
 20076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20080 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20081 ;;Total ram usage:        2 bytes
 20082 ;; Hardware stack levels used:    1
 20083 ;; Hardware stack levels required when called:    6
 20084 ;; This function calls:
 20085 ;;		_ENCx24_BFS
 20086 ;;		_ENCx24_Read
 20087 ;;		_ENCx24_Write
 20088 ;; This function is called by:
 20089 ;;		_ETH_Init
 20090 ;; This function uses a non-reentrant model
 20091 ;;
 20092                           
 20093                           	psect	text76
 20094  0058C0                     __ptext76:
 20095                           	opt stack 0
 20096  0058C0                     _ETH_SendSystemReset:
 20097                           	opt stack 22
 20098  0058C0                     l9854:
 20099                           
 20100                           ;encX24J600_driver.c: 73: {
 20101                           ;encX24J600_driver.c: 74: ENCx24_Write( XJ600_EUDASTL , 0x1234 );
 20102  0058C0  0E12               	movlw	18
 20103  0058C2  6E06               	movwf	ENCx24_Write@data+1,c
 20104  0058C4  0E34               	movlw	52
 20105  0058C6  6E05               	movwf	ENCx24_Write@data,c
 20106  0058C8  0EF6               	movlw	246
 20107  0058CA  EC29  F02F         	call	_ENCx24_Write
 20108                           
 20109                           ;encX24J600_driver.c: 75: } while(0x1234 != ENCx24_Read(XJ600_EUDASTL));
 20110  0058CE  0EF6               	movlw	246
 20111  0058D0  EC04  F02F         	call	_ENCx24_Read
 20112  0058D4  0E34               	movlw	52
 20113  0058D6  1805               	xorwf	?_ENCx24_Read,w,c
 20114  0058D8  E1F3               	bnz	l9854
 20115  0058DA  0E12               	movlw	18
 20116  0058DC  1806               	xorwf	?_ENCx24_Read+1,w,c
 20117  0058DE  E1F0               	bnz	l9854
 20118                           
 20119                           ;encX24J600_driver.c: 78: ENCx24_BFS(XJ600_ECON2L, 0x0010);
 20120  0058E0  6A06               	clrf	ENCx24_BFS@bitMask+1,c
 20121  0058E2  0E10               	movlw	16
 20122  0058E4  6E05               	movwf	ENCx24_BFS@bitMask,c
 20123  0058E6  0E6E               	movlw	110
 20124  0058E8  EC8A  F02F         	call	_ENCx24_BFS
 20125  0058EC                     l9858:
 20126  0058EC  6A0B               	clrf	??_ETH_SendSystemReset& (0+255),c
 20127  0058EE  0E1A               	movlw	26
 20128  0058F0  6E0C               	movwf	(??_ETH_SendSystemReset+1)& (0+255),c
 20129  0058F2  0EFA               	movlw	250
 20130  0058F4  EC04  F02F         	call	_ENCx24_Read
 20131  0058F8  500B               	movf	??_ETH_SendSystemReset,w,c
 20132  0058FA  1605               	andwf	?_ENCx24_Read,f,c
 20133  0058FC  500C               	movf	??_ETH_SendSystemReset+1,w,c
 20134  0058FE  1606               	andwf	?_ENCx24_Read+1,f,c
 20135  005900  0E1A               	movlw	26
 20136  005902  1806               	xorwf	?_ENCx24_Read+1,w,c
 20137  005904  1005               	iorwf	?_ENCx24_Read,w,c
 20138  005906  E1F2               	bnz	l9858
 20139                           
 20140                           ;encX24J600_driver.c: 81: _delay((unsigned long)((1)*(41666667UL/4000.0)));
 20141  005908  D810               	call	PL496	;call to abstracted procedure
 20142  00590A                     u16057:
 20143  00590A  2EE8               	decfsz	wreg,f,c
 20144  00590C  D7FE               	goto	u16057
 20145  00590E  2E0B               	decfsz	??_ETH_SendSystemReset& (0+255),f,c
 20146  005910  D7FC               	goto	u16057
 20147                           
 20148                           ;encX24J600_driver.c: 83: }while(0x0 != ENCx24_Read(XJ600_EUDASTL));
 20149  005912  0EF6               	movlw	246
 20150  005914  EC04  F02F         	call	_ENCx24_Read
 20151  005918  5005               	movf	?_ENCx24_Read,w,c
 20152  00591A  1006               	iorwf	?_ENCx24_Read+1,w,c
 20153  00591C  E1D1               	bnz	l9854
 20154                           
 20155                           ;encX24J600_driver.c: 85: _delay((unsigned long)((1)*(41666667UL/4000.0)));
 20156  00591E  D805               	call	PL496	;call to abstracted procedure
 20157  005920                     u16067:
 20158  005920  2EE8               	decfsz	wreg,f,c
 20159  005922  D7FE               	goto	u16067
 20160  005924  2E0B               	decfsz	??_ETH_SendSystemReset& (0+255),f,c
 20161  005926  D7FC               	goto	u16067
 20162  005928  0012               	return		;funcret
 20163  00592A                     __end_of_ETH_SendSystemReset:
 20164                           	opt stack 0
 20165  00592A                     PL496:
 20166                           	opt stack 22
 20167  00592A  0E0E               	movlw	14
 20168  00592C  6E0B               	movwf	??_ETH_SendSystemReset& (0+255),c
 20169  00592E  0C86               	retlw	134
 20170  005930                     __end_ofPL496:
 20171                           	opt stack 0
 20172                           tosu	equ	0xFFF
 20173                           tosh	equ	0xFFE
 20174                           tosl	equ	0xFFD
 20175                           pclath	equ	0xFFA
 20176                           tblptru	equ	0xFF8
 20177                           tblptrh	equ	0xFF7
 20178                           tblptrl	equ	0xFF6
 20179                           tablat	equ	0xFF5
 20180                           prodh	equ	0xFF4
 20181                           prodl	equ	0xFF3
 20182                           intcon	equ	0xFF2
 20183                           intcon2	equ	0xFF1
 20184                           indf0	equ	0xFEF
 20185                           postinc0	equ	0xFEE
 20186                           fsr0h	equ	0xFEA
 20187                           fsr0l	equ	0xFE9
 20188                           wreg	equ	0xFE8
 20189                           postinc1	equ	0xFE6
 20190                           plusw1	equ	0xFE3
 20191                           fsr1h	equ	0xFE2
 20192                           fsr1l	equ	0xFE1
 20193                           bsr	equ	0xFE0
 20194                           indf2	equ	0xFDF
 20195                           postinc2	equ	0xFDE
 20196                           postdec2	equ	0xFDD
 20197                           plusw2	equ	0xFDB
 20198                           fsr2h	equ	0xFDA
 20199                           fsr2l	equ	0xFD9
 20200                           status	equ	0xFD8
 20201                           
 20202 ;; *************** function _ETH_CheckLinkUp *****************
 20203 ;; Defined at:
 20204 ;;		line 198 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 20205 ;; Parameters:    Size  Location     Type
 20206 ;;		None
 20207 ;; Auto vars:     Size  Location     Type
 20208 ;;  value           4   14[COMRAM] unsigned long 
 20209 ;;  ret             1   18[COMRAM] unsigned char 
 20210 ;; Return value:  Size  Location     Type
 20211 ;;                  1    wreg      unsigned char 
 20212 ;; Registers used:
 20213 ;;		wreg, status,2, status,0, cstack
 20214 ;; Tracked objects:
 20215 ;;		On entry : 0/2
 20216 ;;		On exit  : 0/0
 20217 ;;		Unchanged: 0/0
 20218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20220 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20222 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20223 ;;Total ram usage:        5 bytes
 20224 ;; Hardware stack levels used:    1
 20225 ;; Hardware stack levels required when called:    7
 20226 ;; This function calls:
 20227 ;;		_ETH_readLinkStatus
 20228 ;; This function is called by:
 20229 ;;		_ETH_Init
 20230 ;;		_Network_WaitForLink
 20231 ;; This function uses a non-reentrant model
 20232 ;;
 20233                           
 20234                           	psect	text77
 20235  0060EE                     __ptext77:
 20236                           	opt stack 0
 20237  0060EE                     _ETH_CheckLinkUp:
 20238                           	opt stack 22
 20239                           
 20240                           ;encX24J600_driver.c: 200: uint32_t value;
 20241                           ;encX24J600_driver.c: 201: bool ret = 0;
 20242                           
 20243                           ;incstack = 0
 20244  0060EE  6A13               	clrf	ETH_CheckLinkUp@ret,c
 20245  0060F0                     i9L__ptext78:
 20246                           	opt stack 0
 20247  0060F0                     i9L_ETH_readLinkStatus:
 20248                           	opt stack 0
 20249  0060F0                     i9Ll9542:
 20250                           	opt stack 22
 20251                           
 20252                           ;encX24J600_driver.c: 195: return (ENCx24_Read(XJ600_ESTATL));
 20253  0060F0  0EFA               	movlw	250
 20254  0060F2  EC04  F02F         	call	_ENCx24_Read
 20255  0060F6  C005  F00B         	movff	?_ENCx24_Read,?_ETH_readLinkStatus
 20256  0060FA  C006  F00C         	movff	?_ENCx24_Read+1,?_ETH_readLinkStatus+1
 20257  0060FE  6A0D               	clrf	?_ETH_readLinkStatus+2,c
 20258  006100  6A0E               	clrf	?_ETH_readLinkStatus+3,c
 20259  006102                     i9Ll436:
 20260                           	opt stack 22
 20261  006102  C00B  F00F         	movff	?_ETH_readLinkStatus,ETH_CheckLinkUp@value
 20262  006106  C00C  F010         	movff	?_ETH_readLinkStatus+1,ETH_CheckLinkUp@value+1
 20263  00610A  C00D  F011         	movff	?_ETH_readLinkStatus+2,ETH_CheckLinkUp@value+2
 20264  00610E  C00E  F012         	movff	?_ETH_readLinkStatus+3,ETH_CheckLinkUp@value+3
 20265                           
 20266                           ;encX24J600_driver.c: 204: if(value & 0x0100)
 20267  006112  A010               	btfss	ETH_CheckLinkUp@value+1,0,c
 20268  006114  D004               	goto	l439
 20269                           
 20270                           ;encX24J600_driver.c: 205: {
 20271                           ;encX24J600_driver.c: 206: ethData.up = 1;
 20272  006116  0101               	movlb	1	; () banked
 20273  006118  8583               	bsf	_ethData& (0+255),2,b	;volatile
 20274                           
 20275                           ; BSR set to: 1
 20276                           ;encX24J600_driver.c: 207: ret = 1;
 20277  00611A  0E01               	movlw	1
 20278  00611C  6E13               	movwf	ETH_CheckLinkUp@ret,c
 20279  00611E                     l439:
 20280                           
 20281                           ;encX24J600_driver.c: 208: }
 20282                           ;encX24J600_driver.c: 209: return ret;
 20283  00611E  5013               	movf	ETH_CheckLinkUp@ret,w,c
 20284  006120  0012               	return		;funcret
 20285  006122                     __end_of_ETH_CheckLinkUp:
 20286                           	opt stack 0
 20287                           tosu	equ	0xFFF
 20288                           tosh	equ	0xFFE
 20289                           tosl	equ	0xFFD
 20290                           pclath	equ	0xFFA
 20291                           tblptru	equ	0xFF8
 20292                           tblptrh	equ	0xFF7
 20293                           tblptrl	equ	0xFF6
 20294                           tablat	equ	0xFF5
 20295                           prodh	equ	0xFF4
 20296                           prodl	equ	0xFF3
 20297                           intcon	equ	0xFF2
 20298                           intcon2	equ	0xFF1
 20299                           indf0	equ	0xFEF
 20300                           postinc0	equ	0xFEE
 20301                           fsr0h	equ	0xFEA
 20302                           fsr0l	equ	0xFE9
 20303                           wreg	equ	0xFE8
 20304                           postinc1	equ	0xFE6
 20305                           plusw1	equ	0xFE3
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           bsr	equ	0xFE0
 20309                           indf2	equ	0xFDF
 20310                           postinc2	equ	0xFDE
 20311                           postdec2	equ	0xFDD
 20312                           plusw2	equ	0xFDB
 20313                           fsr2h	equ	0xFDA
 20314                           fsr2l	equ	0xFD9
 20315                           status	equ	0xFD8
 20316                           
 20317 ;; *************** function _ETH_readLinkStatus *****************
 20318 ;; Defined at:
 20319 ;;		line 193 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 20320 ;; Parameters:    Size  Location     Type
 20321 ;;		None
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;		None
 20324 ;; Return value:  Size  Location     Type
 20325 ;;                  4   10[COMRAM] unsigned long 
 20326 ;; Registers used:
 20327 ;;		wreg, status,2, status,0, cstack
 20328 ;; Tracked objects:
 20329 ;;		On entry : 0/2
 20330 ;;		On exit  : 0/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20333 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;Total ram usage:        4 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; Hardware stack levels required when called:    6
 20340 ;; This function calls:
 20341 ;;		_ENCx24_Read
 20342 ;; This function is called by:
 20343 ;;		_ETH_CheckLinkUp
 20344 ;; This function uses a non-reentrant model
 20345 ;;
 20346                           
 20347                           	psect	text78
 20348  000000                     __ptext78:
 20349                           	opt stack 0
 20350  000000                     _ETH_readLinkStatus:
 20351                           	opt stack 0
 20352  000000                     __end_of_ETH_readLinkStatus:
 20353                           	opt stack 0
 20354                           tosu	equ	0xFFF
 20355                           tosh	equ	0xFFE
 20356                           tosl	equ	0xFFD
 20357                           pclath	equ	0xFFA
 20358                           tblptru	equ	0xFF8
 20359                           tblptrh	equ	0xFF7
 20360                           tblptrl	equ	0xFF6
 20361                           tablat	equ	0xFF5
 20362                           prodh	equ	0xFF4
 20363                           prodl	equ	0xFF3
 20364                           intcon	equ	0xFF2
 20365                           intcon2	equ	0xFF1
 20366                           indf0	equ	0xFEF
 20367                           postinc0	equ	0xFEE
 20368                           fsr0h	equ	0xFEA
 20369                           fsr0l	equ	0xFE9
 20370                           wreg	equ	0xFE8
 20371                           postinc1	equ	0xFE6
 20372                           plusw1	equ	0xFE3
 20373                           fsr1h	equ	0xFE2
 20374                           fsr1l	equ	0xFE1
 20375                           bsr	equ	0xFE0
 20376                           indf2	equ	0xFDF
 20377                           postinc2	equ	0xFDE
 20378                           postdec2	equ	0xFDD
 20379                           plusw2	equ	0xFDB
 20380                           fsr2h	equ	0xFDA
 20381                           fsr2l	equ	0xFD9
 20382                           status	equ	0xFD8
 20383                           
 20384 ;; *************** function _ENCx24_PhyRead *****************
 20385 ;; Defined at:
 20386 ;;		line 203 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 20387 ;; Parameters:    Size  Location     Type
 20388 ;;  a               1    wreg     enum E6676
 20389 ;; Auto vars:     Size  Location     Type
 20390 ;;  a               1   12[COMRAM] enum E6676
 20391 ;; Return value:  Size  Location     Type
 20392 ;;                  2   10[COMRAM] unsigned int 
 20393 ;; Registers used:
 20394 ;;		wreg, status,2, status,0, cstack
 20395 ;; Tracked objects:
 20396 ;;		On entry : 0/1
 20397 ;;		On exit  : 0/0
 20398 ;;		Unchanged: 0/0
 20399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20403 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20404 ;;Total ram usage:        3 bytes
 20405 ;; Hardware stack levels used:    1
 20406 ;; Hardware stack levels required when called:    6
 20407 ;; This function calls:
 20408 ;;		_ENCx24_BFC
 20409 ;;		_ENCx24_BFS
 20410 ;;		_ENCx24_Read
 20411 ;;		_ENCx24_Write
 20412 ;; This function is called by:
 20413 ;;		_ETH_Init
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text79
 20418  005ED4                     __ptext79:
 20419                           	opt stack 0
 20420  005ED4                     _ENCx24_PhyRead:
 20421                           	opt stack 22
 20422                           
 20423                           ;incstack = 0
 20424                           ;ENCx24_PhyRead@a stored from wreg
 20425  005ED4  6E0D               	movwf	ENCx24_PhyRead@a,c
 20426                           
 20427                           ;encX24j600_spi.c: 205: ENCx24_Write(XJ600_MIREGADRL,0x0100|a);
 20428  005ED6  0E00               	movlw	0
 20429  005ED8  100D               	iorwf	ENCx24_PhyRead@a,w,c
 20430  005EDA  ECD3  F030         	call	PL428	;call to abstracted procedure
 20431  005EDE  EC29  F02F         	call	_ENCx24_Write
 20432                           
 20433                           ;encX24j600_spi.c: 206: ENCx24_BFS(XJ600_MICMDL,0x0001);
 20434  005EE2  6A06               	clrf	ENCx24_BFS@bitMask+1,c
 20435  005EE4  0E01               	movlw	1
 20436  005EE6  6E05               	movwf	ENCx24_BFS@bitMask,c
 20437  005EE8  0E52               	movlw	82
 20438  005EEA  EC8A  F02F         	call	_ENCx24_BFS
 20439  005EEE                     l9868:
 20440  005EEE  0E6A               	movlw	106
 20441  005EF0  EC04  F02F         	call	_ENCx24_Read
 20442  005EF4  B005               	btfsc	?_ENCx24_Read,0,c
 20443  005EF6  D7FB               	goto	l9868
 20444                           
 20445                           ;encX24j600_spi.c: 208: ENCx24_BFC(XJ600_MICMDL,0x0001);
 20446  005EF8  6A06               	clrf	ENCx24_BFC@bitMask+1,c
 20447  005EFA  0E01               	movlw	1
 20448  005EFC  6E05               	movwf	ENCx24_BFC@bitMask,c
 20449  005EFE  0E52               	movlw	82
 20450  005F00  ECAA  F02F         	call	_ENCx24_BFC
 20451                           
 20452                           ;encX24j600_spi.c: 209: return ENCx24_Read(XJ600_MIRDL);
 20453  005F04  0E68               	movlw	104
 20454  005F06  EC04  F02F         	call	_ENCx24_Read
 20455  005F0A  C005  F00B         	movff	?_ENCx24_Read,?_ENCx24_PhyRead
 20456  005F0E  C006  F00C         	movff	?_ENCx24_Read+1,?_ENCx24_PhyRead+1
 20457  005F12  0012               	return		;funcret
 20458  005F14                     __end_of_ENCx24_PhyRead:
 20459                           	opt stack 0
 20460                           tosu	equ	0xFFF
 20461                           tosh	equ	0xFFE
 20462                           tosl	equ	0xFFD
 20463                           pclath	equ	0xFFA
 20464                           tblptru	equ	0xFF8
 20465                           tblptrh	equ	0xFF7
 20466                           tblptrl	equ	0xFF6
 20467                           tablat	equ	0xFF5
 20468                           prodh	equ	0xFF4
 20469                           prodl	equ	0xFF3
 20470                           intcon	equ	0xFF2
 20471                           intcon2	equ	0xFF1
 20472                           indf0	equ	0xFEF
 20473                           postinc0	equ	0xFEE
 20474                           fsr0h	equ	0xFEA
 20475                           fsr0l	equ	0xFE9
 20476                           wreg	equ	0xFE8
 20477                           postinc1	equ	0xFE6
 20478                           plusw1	equ	0xFE3
 20479                           fsr1h	equ	0xFE2
 20480                           fsr1l	equ	0xFE1
 20481                           bsr	equ	0xFE0
 20482                           indf2	equ	0xFDF
 20483                           postinc2	equ	0xFDE
 20484                           postdec2	equ	0xFDD
 20485                           plusw2	equ	0xFDB
 20486                           fsr2h	equ	0xFDA
 20487                           fsr2l	equ	0xFD9
 20488                           status	equ	0xFD8
 20489                           
 20490 ;; *************** function _ENCx24_PHYWrite *****************
 20491 ;; Defined at:
 20492 ;;		line 217 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 20493 ;; Parameters:    Size  Location     Type
 20494 ;;  a               1    wreg     enum E6676
 20495 ;;  data            2   10[COMRAM] unsigned int 
 20496 ;; Auto vars:     Size  Location     Type
 20497 ;;  a               1   12[COMRAM] enum E6676
 20498 ;; Return value:  Size  Location     Type
 20499 ;;		None               void
 20500 ;; Registers used:
 20501 ;;		wreg, status,2, status,0, cstack
 20502 ;; Tracked objects:
 20503 ;;		On entry : 0/1
 20504 ;;		On exit  : 0/0
 20505 ;;		Unchanged: 0/0
 20506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20510 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20511 ;;Total ram usage:        3 bytes
 20512 ;; Hardware stack levels used:    1
 20513 ;; Hardware stack levels required when called:    6
 20514 ;; This function calls:
 20515 ;;		_ENCx24_Read
 20516 ;;		_ENCx24_Write
 20517 ;; This function is called by:
 20518 ;;		_ETH_Init
 20519 ;; This function uses a non-reentrant model
 20520 ;;
 20521                           
 20522                           	psect	text80
 20523  006180                     __ptext80:
 20524                           	opt stack 0
 20525  006180                     _ENCx24_PHYWrite:
 20526                           	opt stack 22
 20527                           
 20528                           ;incstack = 0
 20529                           ;ENCx24_PHYWrite@a stored from wreg
 20530  006180  6E0D               	movwf	ENCx24_PHYWrite@a,c
 20531                           
 20532                           ;encX24j600_spi.c: 219: ENCx24_Write(XJ600_MIREGADRL, 0x0100|a);
 20533  006182  0E00               	movlw	0
 20534  006184  100D               	iorwf	ENCx24_PHYWrite@a,w,c
 20535  006186  D80F               	call	PL428	;call to abstracted procedure
 20536  006188  EC29  F02F         	call	_ENCx24_Write
 20537                           
 20538                           ;encX24j600_spi.c: 220: ENCx24_Write(XJ600_MIWRL, data);
 20539  00618C  C00B  F005         	movff	ENCx24_PHYWrite@data,ENCx24_Write@data
 20540  006190  C00C  F006         	movff	ENCx24_PHYWrite@data+1,ENCx24_Write@data+1
 20541  006194  0E66               	movlw	102
 20542  006196  EC29  F02F         	call	_ENCx24_Write
 20543  00619A                     l9876:
 20544  00619A  0E6A               	movlw	106
 20545  00619C  EC04  F02F         	call	_ENCx24_Read
 20546  0061A0  A005               	btfss	?_ENCx24_Read,0,c
 20547  0061A2  0012               	return		;funcret
 20548  0061A4  D7FA               	goto	l9876
 20549  0061A6                     __end_of_ENCx24_PHYWrite:
 20550                           	opt stack 0
 20551  0061A6                     PL428:
 20552                           	opt stack 22
 20553  0061A6  6E05               	movwf	ENCx24_Write@data,c
 20554  0061A8  0E01               	movlw	1
 20555  0061AA  6E06               	movwf	ENCx24_Write@data+1,c
 20556  0061AC  0C54               	retlw	84
 20557  0061AE                     __end_ofPL428:
 20558                           	opt stack 0
 20559                           tosu	equ	0xFFF
 20560                           tosh	equ	0xFFE
 20561                           tosl	equ	0xFFD
 20562                           pclath	equ	0xFFA
 20563                           tblptru	equ	0xFF8
 20564                           tblptrh	equ	0xFF7
 20565                           tblptrl	equ	0xFF6
 20566                           tablat	equ	0xFF5
 20567                           prodh	equ	0xFF4
 20568                           prodl	equ	0xFF3
 20569                           intcon	equ	0xFF2
 20570                           intcon2	equ	0xFF1
 20571                           indf0	equ	0xFEF
 20572                           postinc0	equ	0xFEE
 20573                           fsr0h	equ	0xFEA
 20574                           fsr0l	equ	0xFE9
 20575                           wreg	equ	0xFE8
 20576                           postinc1	equ	0xFE6
 20577                           plusw1	equ	0xFE3
 20578                           fsr1h	equ	0xFE2
 20579                           fsr1l	equ	0xFE1
 20580                           bsr	equ	0xFE0
 20581                           indf2	equ	0xFDF
 20582                           postinc2	equ	0xFDE
 20583                           postdec2	equ	0xFDD
 20584                           plusw2	equ	0xFDB
 20585                           fsr2h	equ	0xFDA
 20586                           fsr2l	equ	0xFD9
 20587                           status	equ	0xFD8
 20588                           
 20589 ;; *************** function _ARPV4_Init *****************
 20590 ;; Defined at:
 20591 ;;		line 86 in file "../../TCPIP Library/source/arpv4.c"
 20592 ;; Parameters:    Size  Location     Type
 20593 ;;		None
 20594 ;; Auto vars:     Size  Location     Type
 20595 ;;  x               1    1[COMRAM] unsigned char 
 20596 ;; Return value:  Size  Location     Type
 20597 ;;		None               void
 20598 ;; Registers used:
 20599 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20600 ;; Tracked objects:
 20601 ;;		On entry : 0/2
 20602 ;;		On exit  : 0/0
 20603 ;;		Unchanged: 0/0
 20604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20609 ;;Total ram usage:        1 bytes
 20610 ;; Hardware stack levels used:    1
 20611 ;; Hardware stack levels required when called:    3
 20612 ;; This function calls:
 20613 ;;		Nothing
 20614 ;; This function is called by:
 20615 ;;		_Network_Init
 20616 ;; This function uses a non-reentrant model
 20617 ;;
 20618                           
 20619                           	psect	text81
 20620  00647E                     __ptext81:
 20621                           	opt stack 0
 20622  00647E                     _ARPV4_Init:
 20623                           	opt stack 26
 20624                           
 20625                           ;arpv4.c: 88: for(uint8_t x= 0 ; x < sizeof(arpMap); x++)
 20626                           
 20627                           ;incstack = 0
 20628  00647E  6A02               	clrf	ARPV4_Init@x,c
 20629  006480                     l10264:
 20630                           
 20631                           ;arpv4.c: 89: ((char *)arpMap)[x] = 0;
 20632  006480  0E2E               	movlw	low _arpMap
 20633  006482  2402               	addwf	ARPV4_Init@x,w,c
 20634  006484  6ED9               	movwf	fsr2l,c
 20635  006486  6ADA               	clrf	fsr2h,c
 20636  006488  0E02               	movlw	high _arpMap
 20637  00648A  22DA               	addwfc	fsr2h,f,c
 20638  00648C  6ADF               	clrf	indf2,c
 20639  00648E  2A02               	incf	ARPV4_Init@x,f,c
 20640  006490  0E67               	movlw	103
 20641  006492  6402               	cpfsgt	ARPV4_Init@x,c
 20642  006494  D7F5               	goto	l10264
 20643  006496  0C67               	retlw	103
 20644  006498                     __end_of_ARPV4_Init:
 20645                           	opt stack 0
 20646                           tosu	equ	0xFFF
 20647                           tosh	equ	0xFFE
 20648                           tosl	equ	0xFFD
 20649                           pclath	equ	0xFFA
 20650                           tblptru	equ	0xFF8
 20651                           tblptrh	equ	0xFF7
 20652                           tblptrl	equ	0xFF6
 20653                           tablat	equ	0xFF5
 20654                           prodh	equ	0xFF4
 20655                           prodl	equ	0xFF3
 20656                           intcon	equ	0xFF2
 20657                           intcon2	equ	0xFF1
 20658                           indf0	equ	0xFEF
 20659                           postinc0	equ	0xFEE
 20660                           fsr0h	equ	0xFEA
 20661                           fsr0l	equ	0xFE9
 20662                           wreg	equ	0xFE8
 20663                           postinc1	equ	0xFE6
 20664                           plusw1	equ	0xFE3
 20665                           fsr1h	equ	0xFE2
 20666                           fsr1l	equ	0xFE1
 20667                           bsr	equ	0xFE0
 20668                           indf2	equ	0xFDF
 20669                           postinc2	equ	0xFDE
 20670                           postdec2	equ	0xFDD
 20671                           plusw2	equ	0xFDB
 20672                           fsr2h	equ	0xFDA
 20673                           fsr2l	equ	0xFD9
 20674                           status	equ	0xFD8
 20675                           
 20676 ;; *************** function _IPV4_GetMyIP *****************
 20677 ;; Defined at:
 20678 ;;		line 288 in file "../../TCPIP Library/source/ipv4.c"
 20679 ;; Parameters:    Size  Location     Type
 20680 ;;		None
 20681 ;; Auto vars:     Size  Location     Type
 20682 ;;		None
 20683 ;; Return value:  Size  Location     Type
 20684 ;;                  4    1[COMRAM] unsigned long 
 20685 ;; Registers used:
 20686 ;;		None
 20687 ;; Tracked objects:
 20688 ;;		On entry : 0/0
 20689 ;;		On exit  : 0/0
 20690 ;;		Unchanged: 0/0
 20691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;Total ram usage:        4 bytes
 20697 ;; Hardware stack levels used:    1
 20698 ;; Hardware stack levels required when called:    3
 20699 ;; This function calls:
 20700 ;;		Nothing
 20701 ;; This function is called by:
 20702 ;;		_main
 20703 ;; This function uses a non-reentrant model
 20704 ;;
 20705                           
 20706                           	psect	text82
 20707  00657C                     __ptext82:
 20708                           	opt stack 0
 20709  00657C                     _IPV4_GetMyIP:
 20710                           	opt stack 27
 20711                           
 20712                           ;ipv4.c: 290: return(ipv4Address);
 20713                           
 20714                           ;incstack = 0
 20715  00657C  C192  F002         	movff	_ipv4Address,?_IPV4_GetMyIP
 20716  006580  C193  F003         	movff	_ipv4Address+1,?_IPV4_GetMyIP+1
 20717  006584  C194  F004         	movff	_ipv4Address+2,?_IPV4_GetMyIP+2
 20718  006588  C195  F005         	movff	_ipv4Address+3,?_IPV4_GetMyIP+3
 20719  00658C  0012               	return		;funcret
 20720  00658E                     __end_of_IPV4_GetMyIP:
 20721                           	opt stack 0
 20722                           tosu	equ	0xFFF
 20723                           tosh	equ	0xFFE
 20724                           tosl	equ	0xFFD
 20725                           pclath	equ	0xFFA
 20726                           tblptru	equ	0xFF8
 20727                           tblptrh	equ	0xFF7
 20728                           tblptrl	equ	0xFF6
 20729                           tablat	equ	0xFF5
 20730                           prodh	equ	0xFF4
 20731                           prodl	equ	0xFF3
 20732                           intcon	equ	0xFF2
 20733                           intcon2	equ	0xFF1
 20734                           indf0	equ	0xFEF
 20735                           postinc0	equ	0xFEE
 20736                           fsr0h	equ	0xFEA
 20737                           fsr0l	equ	0xFE9
 20738                           wreg	equ	0xFE8
 20739                           postinc1	equ	0xFE6
 20740                           plusw1	equ	0xFE3
 20741                           fsr1h	equ	0xFE2
 20742                           fsr1l	equ	0xFE1
 20743                           bsr	equ	0xFE0
 20744                           indf2	equ	0xFDF
 20745                           postinc2	equ	0xFDE
 20746                           postdec2	equ	0xFDD
 20747                           plusw2	equ	0xFDB
 20748                           fsr2h	equ	0xFDA
 20749                           fsr2l	equ	0xFD9
 20750                           status	equ	0xFD8
 20751                           
 20752 ;; *************** function _DEMO_UDP_Send *****************
 20753 ;; Defined at:
 20754 ;;		line 379 in file "udp_demo.c"
 20755 ;; Parameters:    Size  Location     Type
 20756 ;;		None
 20757 ;; Auto vars:     Size  Location     Type
 20758 ;;  pot_adcResul    2   16[BANK0 ] unsigned int 
 20759 ;;  started         1   15[BANK0 ] unsigned char 
 20760 ;; Return value:  Size  Location     Type
 20761 ;;		None               void
 20762 ;; Registers used:
 20763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20764 ;; Tracked objects:
 20765 ;;		On entry : 0/1
 20766 ;;		On exit  : E/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20770 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20771 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20772 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20773 ;;Total ram usage:        7 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; Hardware stack levels required when called:   10
 20776 ;; This function calls:
 20777 ;;		_ADC_GetConversion
 20778 ;;		_DEMO_UDP_ClaimIPCheck
 20779 ;;		_UDP_Send
 20780 ;;		_UDP_Start
 20781 ;;		_UDP_Write32
 20782 ;;		_UDP_Write8
 20783 ;; This function is called by:
 20784 ;;		_main
 20785 ;; This function uses a non-reentrant model
 20786 ;;
 20787                           
 20788                           	psect	text83
 20789  005086                     __ptext83:
 20790                           	opt stack 0
 20791  005086                     _DEMO_UDP_Send:
 20792                           	opt stack 20
 20793                           
 20794                           ;udp_demo.c: 382: adc_result_t pot_adcResult;
 20795                           ;udp_demo.c: 384: if(!DEMO_UDP_ClaimIPCheck())
 20796                           
 20797                           ;incstack = 0
 20798  005086  EC59  F032         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
 20799  00508A  E20F               	bc	l10506
 20800                           
 20801                           ; BSR set to: 1
 20802                           ;udp_demo.c: 385: {
 20803                           ;udp_demo.c: 386: started = UDP_Start(0xFFFFFFFF,65533,65531);
 20804  00508C  D86F               	call	PL408	;call to abstracted procedure
 20805  00508E  D867               	call	PL362	;call to abstracted procedure
 20806  005090  ECFA  F02D         	call	_UDP_Start	;wreg free
 20807  005094  0100               	movlb	0	; () banked
 20808  005096  6F6F               	movwf	DEMO_UDP_Send@started& (0+255),b
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;udp_demo.c: 387: if(started==SUCCESS)
 20812  005098  056F               	decf	DEMO_UDP_Send@started& (0+255),w,b
 20813  00509A  E107               	bnz	l10506
 20814                           
 20815                           ; BSR set to: 0
 20816                           ;udp_demo.c: 388: {
 20817                           ;udp_demo.c: 389: UDP_Write8('L');
 20818  00509C  0E4C               	movlw	76
 20819  00509E                     i10L__ptext84:
 20820                           	opt stack 0
 20821  00509E                     i10L_UDP_Write8:
 20822                           	opt stack 20
 20823                           
 20824                           ;incstack = 0
 20825                           ;UDP_Write8@data stored from wreg
 20826  00509E  6E04               	movwf	UDP_Write8@data,c
 20827  0050A0                     i10Ll8720:
 20828                           	opt stack 20
 20829                           
 20830                           ;udpv4.c: 184: ETH_Write8(data);
 20831  0050A0  5004               	movf	UDP_Write8@data,w,c
 20832  0050A2  EC4C  F032         	call	_ETH_Write8
 20833  0050A6                     i10Ll1576:
 20834                           	opt stack 20
 20835                           
 20836                           ;udp_demo.c: 390: UDP_Send();
 20837  0050A6  ECE3  F02B         	call	_UDP_Send	;wreg free
 20838  0050AA                     l10506:
 20839                           
 20840                           ;udp_demo.c: 391: }
 20841                           ;udp_demo.c: 392: }
 20842                           ;udp_demo.c: 394: if(pot_init)
 20843  0050AA  0101               	movlb	1	; () banked
 20844  0050AC  51B3               	movf	_pot_init& (0+255),w,b
 20845  0050AE  B4D8               	btfsc	status,2,c
 20846  0050B0  0012               	return	
 20847                           
 20848                           ; BSR set to: 1
 20849                           ;udp_demo.c: 395: {
 20850                           ;udp_demo.c: 396: pot_adcResult = ADC_GetConversion(channel_AN2);
 20851  0050B2  0E02               	movlw	2
 20852  0050B4  ECD7  F030         	call	_ADC_GetConversion
 20853  0050B8  C002  F070         	movff	?_ADC_GetConversion,DEMO_UDP_Send@pot_adcResult
 20854  0050BC  C003  F071         	movff	?_ADC_GetConversion+1,DEMO_UDP_Send@pot_adcResult+1
 20855                           
 20856                           ;udp_demo.c: 398: if(((pot_adcResult > (pot_initial_adcResult + 100)) || (pot_adcResult 
      +                          <(pot_initial_adcResult - 100))) && pot_adcResult > 100)
 20857  0050C0  0E64               	movlw	100
 20858  0050C2  0101               	movlb	1	; () banked
 20859  0050C4  25A8               	addwf	_pot_initial_adcResult& (0+255),w,b
 20860  0050C6  6E59               	movwf	??_DEMO_UDP_Send& (0+255),c
 20861  0050C8  0E00               	movlw	0
 20862  0050CA  21A9               	addwfc	(_pot_initial_adcResult+1)& (0+255),w,b
 20863  0050CC  6E5A               	movwf	(??_DEMO_UDP_Send+1)& (0+255),c
 20864  0050CE  0100               	movlb	0	; () banked
 20865  0050D0  5170               	movf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 20866  0050D2  5C59               	subwf	??_DEMO_UDP_Send,w,c
 20867  0050D4  5171               	movf	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 20868  0050D6  585A               	subwfb	??_DEMO_UDP_Send+1,w,c
 20869  0050D8  E311               	bnc	l10514
 20870                           
 20871                           ; BSR set to: 0
 20872  0050DA  0E9C               	movlw	156
 20873  0050DC  6E59               	movwf	??_DEMO_UDP_Send& (0+255),c
 20874  0050DE  685A               	setf	(??_DEMO_UDP_Send+1)& (0+255),c
 20875  0050E0  C1A8  F05B         	movff	_pot_initial_adcResult,??_DEMO_UDP_Send+2
 20876  0050E4  C1A9  F05C         	movff	_pot_initial_adcResult+1,??_DEMO_UDP_Send+3
 20877  0050E8  5059               	movf	??_DEMO_UDP_Send,w,c
 20878  0050EA  265B               	addwf	??_DEMO_UDP_Send+2,f,c
 20879  0050EC  505A               	movf	??_DEMO_UDP_Send+1,w,c
 20880  0050EE  225C               	addwfc	??_DEMO_UDP_Send+3,f,c
 20881  0050F0  505B               	movf	??_DEMO_UDP_Send+2,w,c
 20882  0050F2  5D70               	subwf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 20883  0050F4  505C               	movf	??_DEMO_UDP_Send+3,w,c
 20884  0050F6  5971               	subwfb	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 20885  0050F8  B0D8               	btfsc	status,0,c
 20886  0050FA  0012               	return	
 20887  0050FC                     l10514:
 20888                           
 20889                           ; BSR set to: 0
 20890  0050FC  5171               	movf	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 20891  0050FE  E104               	bnz	u15840
 20892  005100  0E65               	movlw	101
 20893  005102  5D70               	subwf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 20894  005104  A0D8               	btfss	status,0,c
 20895  005106  0012               	return	
 20896  005108                     u15840:
 20897                           
 20898                           ; BSR set to: 0
 20899                           ;udp_demo.c: 399: {
 20900                           ;udp_demo.c: 400: started = UDP_Start(claim_dest_ip,65533,65531);
 20901  005108  C18A  F067         	movff	_claim_dest_ip,UDP_Start@destIP
 20902  00510C  C18B  F068         	movff	_claim_dest_ip+1,UDP_Start@destIP+1
 20903  005110  C18C  F069         	movff	_claim_dest_ip+2,UDP_Start@destIP+2
 20904  005114  C18D  F06A         	movff	_claim_dest_ip+3,UDP_Start@destIP+3
 20905  005118  D822               	call	PL362	;call to abstracted procedure
 20906  00511A  ECFA  F02D         	call	_UDP_Start	;wreg free
 20907  00511E  0100               	movlb	0	; () banked
 20908  005120  6F6F               	movwf	DEMO_UDP_Send@started& (0+255),b
 20909                           
 20910                           ; BSR set to: 0
 20911                           ;udp_demo.c: 401: if(started==SUCCESS)
 20912  005122  056F               	decf	DEMO_UDP_Send@started& (0+255),w,b
 20913  005124  E117               	bnz	l10524
 20914                           
 20915                           ; BSR set to: 0
 20916                           ;udp_demo.c: 402: {
 20917                           ;udp_demo.c: 403: UDP_Write8('P');
 20918  005126  0E50               	movlw	80
 20919  005128                     i11L__ptext84:
 20920                           	opt stack 0
 20921  005128                     i11L_UDP_Write8:
 20922                           	opt stack 20
 20923                           
 20924                           ;incstack = 0
 20925                           ;UDP_Write8@data stored from wreg
 20926  005128  6E04               	movwf	UDP_Write8@data,c
 20927  00512A                     i11Ll8720:
 20928                           	opt stack 20
 20929                           
 20930                           ;udpv4.c: 184: ETH_Write8(data);
 20931  00512A  5004               	movf	UDP_Write8@data,w,c
 20932  00512C  EC4C  F032         	call	_ETH_Write8
 20933  005130                     i11Ll1576:
 20934                           	opt stack 20
 20935                           
 20936                           ;udp_demo.c: 404: UDP_Write32(pot_adcResult);
 20937  005130  C070  F007         	movff	DEMO_UDP_Send@pot_adcResult,UDP_Write32@data
 20938  005134  C071  F008         	movff	DEMO_UDP_Send@pot_adcResult+1,UDP_Write32@data+1
 20939  005138  6A09               	clrf	UDP_Write32@data+2,c
 20940  00513A  6A0A               	clrf	UDP_Write32@data+3,c
 20941  00513C                     i12L__ptext85:
 20942                           	opt stack 0
 20943  00513C                     i12L_UDP_Write32:
 20944                           	opt stack 0
 20945  00513C                     i12Ll10402:
 20946                           	opt stack 24
 20947                           
 20948                           ;udpv4.c: 195: ETH_Write32(data);
 20949  00513C  C007  F003         	movff	UDP_Write32@data,ETH_Write32@data
 20950  005140  C008  F004         	movff	UDP_Write32@data+1,ETH_Write32@data+1
 20951  005144  C009  F005         	movff	UDP_Write32@data+2,ETH_Write32@data+2
 20952  005148  C00A  F006         	movff	UDP_Write32@data+3,ETH_Write32@data+3
 20953  00514C  EC44  F031         	call	_ETH_Write32	;wreg free
 20954  005150                     i12Ll1582:
 20955                           	opt stack 20
 20956                           
 20957                           ;udp_demo.c: 405: UDP_Send();
 20958  005150  ECE3  F02B         	call	_UDP_Send	;wreg free
 20959  005154                     l10524:
 20960                           
 20961                           ;udp_demo.c: 406: }
 20962                           ;udp_demo.c: 407: pot_initial_adcResult = pot_adcResult;
 20963  005154  C070  F1A8         	movff	DEMO_UDP_Send@pot_adcResult,_pot_initial_adcResult
 20964  005158  C071  F1A9         	movff	DEMO_UDP_Send@pot_adcResult+1,_pot_initial_adcResult+1
 20965  00515C  0012               	return		;funcret
 20966  00515E                     __end_of_DEMO_UDP_Send:
 20967                           	opt stack 0
 20968  00515E                     PL362:
 20969                           	opt stack 20
 20970  00515E  696C               	setf	(UDP_Start@srcPort+1)& (0+255),b
 20971  005160  0EFD               	movlw	253
 20972  005162  6F6B               	movwf	UDP_Start@srcPort& (0+255),b
 20973  005164  696E               	setf	(UDP_Start@dstPort+1)& (0+255),b
 20974  005166  0EFB               	movlw	251
 20975  005168  6F6D               	movwf	UDP_Start@dstPort& (0+255),b
 20976  00516A  0CFB               	retlw	251
 20977  00516C                     __end_ofPL362:
 20978                           	opt stack 0
 20979  00516C                     PL408:
 20980                           	opt stack 15
 20981  00516C  0100               	movlb	0	; () banked
 20982  00516E  6967               	setf	UDP_Start@destIP& (0+255),b
 20983  005170  6968               	setf	(UDP_Start@destIP+1)& (0+255),b
 20984  005172  6969               	setf	(UDP_Start@destIP+2)& (0+255),b
 20985  005174  696A               	setf	(UDP_Start@destIP+3)& (0+255),b
 20986  005176  0012               	return	
 20987  005178                     __end_ofPL408:
 20988                           	opt stack 0
 20989                           tosu	equ	0xFFF
 20990                           tosh	equ	0xFFE
 20991                           tosl	equ	0xFFD
 20992                           pclath	equ	0xFFA
 20993                           tblptru	equ	0xFF8
 20994                           tblptrh	equ	0xFF7
 20995                           tblptrl	equ	0xFF6
 20996                           tablat	equ	0xFF5
 20997                           prodh	equ	0xFF4
 20998                           prodl	equ	0xFF3
 20999                           intcon	equ	0xFF2
 21000                           intcon2	equ	0xFF1
 21001                           indf0	equ	0xFEF
 21002                           postinc0	equ	0xFEE
 21003                           fsr0h	equ	0xFEA
 21004                           fsr0l	equ	0xFE9
 21005                           wreg	equ	0xFE8
 21006                           postinc1	equ	0xFE6
 21007                           plusw1	equ	0xFE3
 21008                           fsr1h	equ	0xFE2
 21009                           fsr1l	equ	0xFE1
 21010                           bsr	equ	0xFE0
 21011                           indf2	equ	0xFDF
 21012                           postinc2	equ	0xFDE
 21013                           postdec2	equ	0xFDD
 21014                           plusw2	equ	0xFDB
 21015                           fsr2h	equ	0xFDA
 21016                           fsr2l	equ	0xFD9
 21017                           status	equ	0xFD8
 21018                           
 21019 ;; *************** function _UDP_Write8 *****************
 21020 ;; Defined at:
 21021 ;;		line 182 in file "../../TCPIP Library/source/udpv4.c"
 21022 ;; Parameters:    Size  Location     Type
 21023 ;;  data            1    wreg     unsigned char 
 21024 ;; Auto vars:     Size  Location     Type
 21025 ;;  data            1    3[COMRAM] unsigned char 
 21026 ;; Return value:  Size  Location     Type
 21027 ;;		None               void
 21028 ;; Registers used:
 21029 ;;		wreg, status,2, status,0, cstack
 21030 ;; Tracked objects:
 21031 ;;		On entry : F/0
 21032 ;;		On exit  : 0/0
 21033 ;;		Unchanged: 0/0
 21034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;Total ram usage:        1 bytes
 21040 ;; Hardware stack levels used:    1
 21041 ;; Hardware stack levels required when called:    5
 21042 ;; This function calls:
 21043 ;;		_ETH_Write8
 21044 ;; This function is called by:
 21045 ;;		_DEMO_UDP_Recv
 21046 ;;		_DEMO_UDP_Send
 21047 ;; This function uses a non-reentrant model
 21048 ;;
 21049                           
 21050                           	psect	text84
 21051  000000                     __ptext84:
 21052                           	opt stack 0
 21053  000000                     _UDP_Write8:
 21054                           	opt stack 0
 21055  000000                     __end_of_UDP_Write8:
 21056                           	opt stack 0
 21057                           tosu	equ	0xFFF
 21058                           tosh	equ	0xFFE
 21059                           tosl	equ	0xFFD
 21060                           pclath	equ	0xFFA
 21061                           tblptru	equ	0xFF8
 21062                           tblptrh	equ	0xFF7
 21063                           tblptrl	equ	0xFF6
 21064                           tablat	equ	0xFF5
 21065                           prodh	equ	0xFF4
 21066                           prodl	equ	0xFF3
 21067                           intcon	equ	0xFF2
 21068                           intcon2	equ	0xFF1
 21069                           indf0	equ	0xFEF
 21070                           postinc0	equ	0xFEE
 21071                           fsr0h	equ	0xFEA
 21072                           fsr0l	equ	0xFE9
 21073                           wreg	equ	0xFE8
 21074                           postinc1	equ	0xFE6
 21075                           plusw1	equ	0xFE3
 21076                           fsr1h	equ	0xFE2
 21077                           fsr1l	equ	0xFE1
 21078                           bsr	equ	0xFE0
 21079                           indf2	equ	0xFDF
 21080                           postinc2	equ	0xFDE
 21081                           postdec2	equ	0xFDD
 21082                           plusw2	equ	0xFDB
 21083                           fsr2h	equ	0xFDA
 21084                           fsr2l	equ	0xFD9
 21085                           status	equ	0xFD8
 21086                           
 21087 ;; *************** function _UDP_Write32 *****************
 21088 ;; Defined at:
 21089 ;;		line 193 in file "../../TCPIP Library/source/udpv4.c"
 21090 ;; Parameters:    Size  Location     Type
 21091 ;;  data            4    6[COMRAM] unsigned long 
 21092 ;; Auto vars:     Size  Location     Type
 21093 ;;		None
 21094 ;; Return value:  Size  Location     Type
 21095 ;;		None               void
 21096 ;; Registers used:
 21097 ;;		wreg, status,2, status,0, cstack
 21098 ;; Tracked objects:
 21099 ;;		On entry : 0/0
 21100 ;;		On exit  : 0/0
 21101 ;;		Unchanged: 0/0
 21102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21106 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;Total ram usage:        4 bytes
 21108 ;; Hardware stack levels used:    1
 21109 ;; Hardware stack levels required when called:    5
 21110 ;; This function calls:
 21111 ;;		_ETH_Write32
 21112 ;; This function is called by:
 21113 ;;		_DEMO_UDP_Send
 21114 ;; This function uses a non-reentrant model
 21115 ;;
 21116                           
 21117                           	psect	text85
 21118  000000                     __ptext85:
 21119                           	opt stack 0
 21120  000000                     _UDP_Write32:
 21121                           	opt stack 0
 21122  000000                     __end_of_UDP_Write32:
 21123                           	opt stack 0
 21124                           tosu	equ	0xFFF
 21125                           tosh	equ	0xFFE
 21126                           tosl	equ	0xFFD
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           intcon2	equ	0xFF1
 21136                           indf0	equ	0xFEF
 21137                           postinc0	equ	0xFEE
 21138                           fsr0h	equ	0xFEA
 21139                           fsr0l	equ	0xFE9
 21140                           wreg	equ	0xFE8
 21141                           postinc1	equ	0xFE6
 21142                           plusw1	equ	0xFE3
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           bsr	equ	0xFE0
 21146                           indf2	equ	0xFDF
 21147                           postinc2	equ	0xFDE
 21148                           postdec2	equ	0xFDD
 21149                           plusw2	equ	0xFDB
 21150                           fsr2h	equ	0xFDA
 21151                           fsr2l	equ	0xFD9
 21152                           status	equ	0xFD8
 21153                           
 21154 ;; *************** function _UDP_Start *****************
 21155 ;; Defined at:
 21156 ;;		line 71 in file "../../TCPIP Library/source/udpv4.c"
 21157 ;; Parameters:    Size  Location     Type
 21158 ;;  destIP          4    7[BANK0 ] unsigned long 
 21159 ;;  srcPort         2   11[BANK0 ] unsigned int 
 21160 ;;  dstPort         2   13[BANK0 ] unsigned int 
 21161 ;; Auto vars:     Size  Location     Type
 21162 ;;  ret             1   87[COMRAM] enum E367
 21163 ;; Return value:  Size  Location     Type
 21164 ;;                  1    wreg      enum E449
 21165 ;; Registers used:
 21166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21167 ;; Tracked objects:
 21168 ;;		On entry : F/0
 21169 ;;		On exit  : 0/0
 21170 ;;		Unchanged: 0/0
 21171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21172 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21175 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21176 ;;Total ram usage:        9 bytes
 21177 ;; Hardware stack levels used:    1
 21178 ;; Hardware stack levels required when called:    9
 21179 ;; This function calls:
 21180 ;;		_ETH_ResetByteCount
 21181 ;;		_ETH_Write16
 21182 ;;		_IPv4_Start
 21183 ;; This function is called by:
 21184 ;;		_DHCP_Request
 21185 ;;		_DEMO_UDP_Recv
 21186 ;;		_DEMO_UDP_Send
 21187 ;; This function uses a non-reentrant model
 21188 ;;
 21189                           
 21190                           	psect	text86
 21191  005BF4                     __ptext86:
 21192                           	opt stack 0
 21193  005BF4                     _UDP_Start:
 21194                           	opt stack 15
 21195                           
 21196                           ; BSR set to: 0
 21197                           ;udpv4.c: 77: ret = IPv4_Start(destIP,UDP);
 21198                           
 21199                           ; BSR set to: 0
 21200                           
 21201                           ;incstack = 0
 21202  005BF4  C067  F04B         	movff	UDP_Start@destIP,IPv4_Start@destAddress
 21203  005BF8  C068  F04C         	movff	UDP_Start@destIP+1,IPv4_Start@destAddress+1
 21204  005BFC  C069  F04D         	movff	UDP_Start@destIP+2,IPv4_Start@destAddress+2
 21205  005C00  C06A  F04E         	movff	UDP_Start@destIP+3,IPv4_Start@destAddress+3
 21206  005C04  0E11               	movlw	17
 21207  005C06  6E4F               	movwf	IPv4_Start@protocol,c
 21208  005C08  EC37  F023         	call	_IPv4_Start	;wreg free
 21209  005C0C  6E58               	movwf	UDP_Start@ret,c
 21210                           
 21211                           ; BSR set to: 0
 21212                           ;udpv4.c: 78: if(ret == SUCCESS)
 21213  005C0E  0458               	decf	UDP_Start@ret,w,c
 21214  005C10  E116               	bnz	l8438
 21215                           
 21216                           ; BSR set to: 0
 21217                           ;udpv4.c: 79: {
 21218                           ;udpv4.c: 81: ETH_ResetByteCount();
 21219  005C12  ECCF  F032         	call	_ETH_ResetByteCount	;wreg free
 21220                           
 21221                           ;udpv4.c: 84: ETH_Write16(srcPort);
 21222  005C16  C06B  F003         	movff	UDP_Start@srcPort,ETH_Write16@data
 21223  005C1A  C06C  F004         	movff	UDP_Start@srcPort+1,ETH_Write16@data+1
 21224  005C1E  EC91  F031         	call	_ETH_Write16	;wreg free
 21225                           
 21226                           ;udpv4.c: 87: ETH_Write16(dstPort);
 21227  005C22  C06D  F003         	movff	UDP_Start@dstPort,ETH_Write16@data
 21228  005C26  C06E  F004         	movff	UDP_Start@dstPort+1,ETH_Write16@data+1
 21229  005C2A  EC91  F031         	call	_ETH_Write16	;wreg free
 21230                           
 21231                           ;udpv4.c: 90: ETH_Write16(0);
 21232  005C2E  6A04               	clrf	ETH_Write16@data+1,c
 21233  005C30  6A03               	clrf	ETH_Write16@data,c
 21234  005C32  EC91  F031         	call	_ETH_Write16	;wreg free
 21235                           
 21236                           ;udpv4.c: 93: ETH_Write16(0);
 21237  005C36  6A04               	clrf	ETH_Write16@data+1,c
 21238  005C38  6A03               	clrf	ETH_Write16@data,c
 21239  005C3A  EC91  F031         	call	_ETH_Write16	;wreg free
 21240  005C3E                     l8438:
 21241                           
 21242                           ;udpv4.c: 95: }
 21243                           ;udpv4.c: 96: return ret;
 21244  005C3E  5058               	movf	UDP_Start@ret,w,c
 21245  005C40  0012               	return		;funcret
 21246  005C42                     __end_of_UDP_Start:
 21247                           	opt stack 0
 21248                           tosu	equ	0xFFF
 21249                           tosh	equ	0xFFE
 21250                           tosl	equ	0xFFD
 21251                           pclath	equ	0xFFA
 21252                           tblptru	equ	0xFF8
 21253                           tblptrh	equ	0xFF7
 21254                           tblptrl	equ	0xFF6
 21255                           tablat	equ	0xFF5
 21256                           prodh	equ	0xFF4
 21257                           prodl	equ	0xFF3
 21258                           intcon	equ	0xFF2
 21259                           intcon2	equ	0xFF1
 21260                           indf0	equ	0xFEF
 21261                           postinc0	equ	0xFEE
 21262                           fsr0h	equ	0xFEA
 21263                           fsr0l	equ	0xFE9
 21264                           wreg	equ	0xFE8
 21265                           postinc1	equ	0xFE6
 21266                           plusw1	equ	0xFE3
 21267                           fsr1h	equ	0xFE2
 21268                           fsr1l	equ	0xFE1
 21269                           bsr	equ	0xFE0
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           plusw2	equ	0xFDB
 21274                           fsr2h	equ	0xFDA
 21275                           fsr2l	equ	0xFD9
 21276                           status	equ	0xFD8
 21277                           
 21278 ;; *************** function _IPv4_Start *****************
 21279 ;; Defined at:
 21280 ;;		line 213 in file "../../TCPIP Library/source/ipv4.c"
 21281 ;; Parameters:    Size  Location     Type
 21282 ;;  destAddress     4   74[COMRAM] unsigned long 
 21283 ;;  protocol        1   78[COMRAM] enum E6803
 21284 ;; Auto vars:     Size  Location     Type
 21285 ;;  targetAddres    4    0[BANK0 ] unsigned long 
 21286 ;;  macAddress      2    4[BANK0 ] PTR const struct .
 21287 ;;		 -> arpMap.macAddress(6), broadcastMAC(6), arpMap(104), NULL(0), 
 21288 ;;  ret             1    6[BANK0 ] enum E6944
 21289 ;; Return value:  Size  Location     Type
 21290 ;;                  1    wreg      enum E366
 21291 ;; Registers used:
 21292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21293 ;; Tracked objects:
 21294 ;;		On entry : 0/0
 21295 ;;		On exit  : F/0
 21296 ;;		Unchanged: 0/0
 21297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21298 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21299 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21300 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21301 ;;      Totals:        13       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21302 ;;Total ram usage:       20 bytes
 21303 ;; Hardware stack levels used:    1
 21304 ;; Hardware stack levels required when called:    8
 21305 ;; This function calls:
 21306 ;;		_ARPV4_Lookup
 21307 ;;		_ARPV4_Request
 21308 ;;		_ETH_Write16
 21309 ;;		_ETH_Write32
 21310 ;;		_ETH_Write8
 21311 ;;		_ETH_WriteStart
 21312 ;; This function is called by:
 21313 ;;		_ICMP_EchoReply
 21314 ;;		_TCP_Snd
 21315 ;;		_UDP_Start
 21316 ;; This function uses a non-reentrant model
 21317 ;;
 21318                           
 21319                           	psect	text87
 21320  00466E                     __ptext87:
 21321                           	opt stack 0
 21322  00466E                     _IPv4_Start:
 21323                           	opt stack 18
 21324                           
 21325                           ;ipv4.c: 215: error_msg ret = ERROR;
 21326                           
 21327                           ;incstack = 0
 21328  00466E  0100               	movlb	0	; () banked
 21329  004670  6B66               	clrf	IPv4_Start@ret& (0+255),b
 21330                           
 21331                           ; BSR set to: 0
 21332                           ;ipv4.c: 217: const mac48Address_t *macAddress;
 21333                           ;ipv4.c: 218: uint32_t targetAddress;
 21334                           ;ipv4.c: 221: if(((ipv4Address != 0) || (protocol == UDP))
 21335                           ;ipv4.c: 222: && (ipv4Address != 0x7F000001))
 21336  004672  0101               	movlb	1	; () banked
 21337  004674  D8BA               	call	PL446	;call to abstracted procedure
 21338  004676  E103               	bnz	l8310
 21339                           
 21340                           ; BSR set to: 1
 21341  004678  0E11               	movlw	17
 21342  00467A  184F               	xorwf	IPv4_Start@protocol,w,c
 21343  00467C  E162               	bnz	l8324
 21344  00467E                     l8310:
 21345                           
 21346                           ; BSR set to: 1
 21347  00467E  0592               	decf	_ipv4Address& (0+255),w,b
 21348  004680  E105               	bnz	u10860
 21349  004682  0E7F               	movlw	127
 21350  004684  1995               	xorwf	(_ipv4Address+3)& (0+255),w,b
 21351  004686  1193               	iorwf	(_ipv4Address+1)& (0+255),w,b
 21352  004688  1194               	iorwf	(_ipv4Address+2)& (0+255),w,b
 21353  00468A  E05B               	bz	l8324
 21354  00468C                     u10860:
 21355                           
 21356                           ; BSR set to: 1
 21357                           ;ipv4.c: 223: {
 21358                           ;ipv4.c: 224: if(destAddress != 0xFFFFFFFF)
 21359  00468C  284B               	incf	IPv4_Start@destAddress,w,c
 21360  00468E  E106               	bnz	u10870
 21361  004690  284C               	incf	IPv4_Start@destAddress+1,w,c
 21362  004692  E104               	bnz	u10870
 21363  004694  284D               	incf	IPv4_Start@destAddress+2,w,c
 21364  004696  E102               	bnz	u10870
 21365  004698  284E               	incf	IPv4_Start@destAddress+3,w,c
 21366  00469A  E056               	bz	l8328
 21367  00469C                     u10870:
 21368                           
 21369                           ; BSR set to: 1
 21370                           ;ipv4.c: 225: {
 21371                           ;ipv4.c: 226: if((ipv4SubnetMask & destAddress) == (ipv4SubnetMask & ipv4Address))
 21372  00469C  5192               	movf	_ipv4Address& (0+255),w,b
 21373  00469E  1596               	andwf	_ipv4SubnetMask& (0+255),w,b
 21374  0046A0  6E50               	movwf	??_IPv4_Start& (0+255),c
 21375  0046A2  5193               	movf	(_ipv4Address+1)& (0+255),w,b
 21376  0046A4  1597               	andwf	(_ipv4SubnetMask+1)& (0+255),w,b
 21377  0046A6  6E51               	movwf	(??_IPv4_Start+1)& (0+255),c
 21378  0046A8  5194               	movf	(_ipv4Address+2)& (0+255),w,b
 21379  0046AA  1598               	andwf	(_ipv4SubnetMask+2)& (0+255),w,b
 21380  0046AC  6E52               	movwf	(??_IPv4_Start+2)& (0+255),c
 21381  0046AE  5195               	movf	(_ipv4Address+3)& (0+255),w,b
 21382  0046B0  1599               	andwf	(_ipv4SubnetMask+3)& (0+255),w,b
 21383  0046B2  6E53               	movwf	(??_IPv4_Start+3)& (0+255),c
 21384  0046B4  504B               	movf	IPv4_Start@destAddress,w,c
 21385  0046B6  1596               	andwf	_ipv4SubnetMask& (0+255),w,b
 21386  0046B8  6E54               	movwf	(??_IPv4_Start+4)& (0+255),c
 21387  0046BA  504C               	movf	IPv4_Start@destAddress+1,w,c
 21388  0046BC  1597               	andwf	(_ipv4SubnetMask+1)& (0+255),w,b
 21389  0046BE  6E55               	movwf	(??_IPv4_Start+5)& (0+255),c
 21390  0046C0  504D               	movf	IPv4_Start@destAddress+2,w,c
 21391  0046C2  1598               	andwf	(_ipv4SubnetMask+2)& (0+255),w,b
 21392  0046C4  6E56               	movwf	(??_IPv4_Start+6)& (0+255),c
 21393  0046C6  504E               	movf	IPv4_Start@destAddress+3,w,c
 21394  0046C8  1599               	andwf	(_ipv4SubnetMask+3)& (0+255),w,b
 21395  0046CA  6E57               	movwf	(??_IPv4_Start+7)& (0+255),c
 21396  0046CC  5050               	movf	??_IPv4_Start,w,c
 21397  0046CE  1854               	xorwf	??_IPv4_Start+4,w,c
 21398  0046D0  E112               	bnz	l1043
 21399  0046D2  5051               	movf	??_IPv4_Start+1,w,c
 21400  0046D4  1855               	xorwf	??_IPv4_Start+5,w,c
 21401  0046D6  E10F               	bnz	l1043
 21402  0046D8  5052               	movf	??_IPv4_Start+2,w,c
 21403  0046DA  1856               	xorwf	??_IPv4_Start+6,w,c
 21404  0046DC  E10C               	bnz	l1043
 21405  0046DE  5053               	movf	??_IPv4_Start+3,w,c
 21406  0046E0  1857               	xorwf	??_IPv4_Start+7,w,c
 21407  0046E2  E109               	bnz	l1043
 21408                           
 21409                           ; BSR set to: 1
 21410                           ;ipv4.c: 227: {
 21411                           ;ipv4.c: 228: targetAddress = destAddress;
 21412  0046E4  C04B  F060         	movff	IPv4_Start@destAddress,IPv4_Start@targetAddress
 21413  0046E8  C04C  F061         	movff	IPv4_Start@destAddress+1,IPv4_Start@targetAddress+1
 21414  0046EC  C04D  F062         	movff	IPv4_Start@destAddress+2,IPv4_Start@targetAddress+2
 21415  0046F0  C04E  F063         	movff	IPv4_Start@destAddress+3,IPv4_Start@targetAddress+3
 21416                           
 21417                           ;ipv4.c: 229: }
 21418  0046F4  D008               	goto	l8318
 21419  0046F6                     l1043:
 21420                           
 21421                           ; BSR set to: 1
 21422                           ;ipv4.c: 230: else
 21423                           ;ipv4.c: 231: {
 21424                           ;ipv4.c: 232: targetAddress = ipv4Router;
 21425  0046F6  C226  F060         	movff	_ipv4Router,IPv4_Start@targetAddress
 21426  0046FA  C227  F061         	movff	_ipv4Router+1,IPv4_Start@targetAddress+1
 21427  0046FE  C228  F062         	movff	_ipv4Router+2,IPv4_Start@targetAddress+2
 21428  004702  C229  F063         	movff	_ipv4Router+3,IPv4_Start@targetAddress+3
 21429  004706                     l8318:
 21430                           
 21431                           ; BSR set to: 1
 21432                           ;ipv4.c: 233: }
 21433                           ;ipv4.c: 235: macAddress= ARPV4_Lookup(targetAddress);
 21434  004706  C060  F002         	movff	IPv4_Start@targetAddress,ARPV4_Lookup@ip_address
 21435  00470A  C061  F003         	movff	IPv4_Start@targetAddress+1,ARPV4_Lookup@ip_address+1
 21436  00470E  C062  F004         	movff	IPv4_Start@targetAddress+2,ARPV4_Lookup@ip_address+2
 21437  004712  C063  F005         	movff	IPv4_Start@targetAddress+3,ARPV4_Lookup@ip_address+3
 21438  004716  EC21  F02E         	call	_ARPV4_Lookup	;wreg free
 21439  00471A  C002  F064         	movff	?_ARPV4_Lookup,IPv4_Start@macAddress
 21440  00471E  C003  F065         	movff	?_ARPV4_Lookup+1,IPv4_Start@macAddress+1
 21441                           
 21442                           ; BSR set to: 1
 21443                           ;ipv4.c: 236: if(macAddress == 0)
 21444  004722  0100               	movlb	0	; () banked
 21445  004724  5164               	movf	IPv4_Start@macAddress& (0+255),w,b
 21446  004726  1165               	iorwf	(IPv4_Start@macAddress+1)& (0+255),w,b
 21447  004728  E116               	bnz	l8330
 21448                           
 21449                           ; BSR set to: 0
 21450                           ;ipv4.c: 237: {
 21451                           ;ipv4.c: 238: ret = ARPV4_Request(targetAddress);
 21452  00472A  C060  F00F         	movff	IPv4_Start@targetAddress,ARPV4_Request@destAddress
 21453  00472E  C061  F010         	movff	IPv4_Start@targetAddress+1,ARPV4_Request@destAddress+1
 21454  004732  C062  F011         	movff	IPv4_Start@targetAddress+2,ARPV4_Request@destAddress+2
 21455  004736  C063  F012         	movff	IPv4_Start@targetAddress+3,ARPV4_Request@destAddress+3
 21456  00473A  ECAF  F024         	call	_ARPV4_Request	;wreg free
 21457  00473E  0100               	movlb	0	; () banked
 21458  004740  6F66               	movwf	IPv4_Start@ret& (0+255),b
 21459  004742                     l8324:
 21460                           
 21461                           ;ipv4.c: 239: return ret;
 21462  004742  0100               	movlb	0	; () banked
 21463  004744  5166               	movf	IPv4_Start@ret& (0+255),w,b
 21464  004746  0012               	return	
 21465  004748                     l8328:
 21466                           
 21467                           ; BSR set to: 1
 21468                           ;ipv4.c: 242: else
 21469                           ;ipv4.c: 243: {
 21470                           ;ipv4.c: 244: macAddress = &broadcastMAC;
 21471  004748  0E37               	movlw	low _broadcastMAC
 21472  00474A  0100               	movlb	0	; () banked
 21473  00474C  6F64               	movwf	IPv4_Start@macAddress& (0+255),b
 21474  00474E  5164               	movf	IPv4_Start@macAddress& (0+255),w,b
 21475  004750  A4D8               	btfss	status,2,c
 21476  004752  0E10               	movlw	high __smallconst
 21477  004754  6F65               	movwf	(IPv4_Start@macAddress+1)& (0+255),b
 21478  004756                     l8330:
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;ipv4.c: 245: }
 21482                           ;ipv4.c: 246: ret = ETH_WriteStart(macAddress, 0x0800);
 21483  004756  C064  F00B         	movff	IPv4_Start@macAddress,ETH_WriteStart@destMAC
 21484  00475A  C065  F00C         	movff	IPv4_Start@macAddress+1,ETH_WriteStart@destMAC+1
 21485  00475E  0E08               	movlw	8
 21486  004760  6E0E               	movwf	ETH_WriteStart@type+1,c
 21487  004762  6A0D               	clrf	ETH_WriteStart@type,c
 21488  004764  EC7C  F02D         	call	_ETH_WriteStart	;wreg free
 21489  004768  0100               	movlb	0	; () banked
 21490  00476A  6F66               	movwf	IPv4_Start@ret& (0+255),b
 21491                           
 21492                           ; BSR set to: 0
 21493                           ;ipv4.c: 247: if(ret == SUCCESS)
 21494  00476C  0566               	decf	IPv4_Start@ret& (0+255),w,b
 21495  00476E  E1E9               	bnz	l8324
 21496                           
 21497                           ; BSR set to: 0
 21498                           ;ipv4.c: 248: {
 21499                           ;ipv4.c: 249: ETH_Write16(0x4500);
 21500  004770  0E45               	movlw	69
 21501  004772  6E04               	movwf	ETH_Write16@data+1,c
 21502  004774  6A03               	clrf	ETH_Write16@data,c
 21503  004776  EC91  F031         	call	_ETH_Write16	;wreg free
 21504                           
 21505                           ;ipv4.c: 250: ETH_Write16(0);
 21506  00477A  6A04               	clrf	ETH_Write16@data+1,c
 21507  00477C  6A03               	clrf	ETH_Write16@data,c
 21508  00477E  EC91  F031         	call	_ETH_Write16	;wreg free
 21509                           
 21510                           ;ipv4.c: 251: ETH_Write32(0xAA554000);
 21511  004782  6A03               	clrf	ETH_Write32@data,c
 21512  004784  0E40               	movlw	64
 21513  004786  6E04               	movwf	ETH_Write32@data+1,c
 21514  004788  0E55               	movlw	85
 21515  00478A  6E05               	movwf	ETH_Write32@data+2,c
 21516  00478C  0EAA               	movlw	170
 21517  00478E  6E06               	movwf	ETH_Write32@data+3,c
 21518  004790  EC44  F031         	call	_ETH_Write32	;wreg free
 21519                           
 21520                           ;ipv4.c: 252: ETH_Write8(64u);
 21521  004794  0E40               	movlw	64
 21522  004796  EC4C  F032         	call	_ETH_Write8
 21523                           
 21524                           ;ipv4.c: 253: ETH_Write8(protocol);
 21525  00479A  504F               	movf	IPv4_Start@protocol,w,c
 21526  00479C  EC4C  F032         	call	_ETH_Write8
 21527                           
 21528                           ;ipv4.c: 254: ETH_Write16(0);
 21529  0047A0  6A04               	clrf	ETH_Write16@data+1,c
 21530  0047A2  6A03               	clrf	ETH_Write16@data,c
 21531  0047A4  EC91  F031         	call	_ETH_Write16	;wreg free
 21532                           
 21533                           ;ipv4.c: 255: ETH_Write32(ipv4Address);
 21534  0047A8  EC22  F023         	call	PL236	;call to abstracted procedure
 21535  0047AC  EC44  F031         	call	_ETH_Write32	;wreg free
 21536                           
 21537                           ;ipv4.c: 256: ETH_Write32(destAddress);
 21538  0047B0  C04B  F003         	movff	IPv4_Start@destAddress,ETH_Write32@data
 21539  0047B4  C04C  F004         	movff	IPv4_Start@destAddress+1,ETH_Write32@data+1
 21540  0047B8  C04D  F005         	movff	IPv4_Start@destAddress+2,ETH_Write32@data+2
 21541  0047BC  C04E  F006         	movff	IPv4_Start@destAddress+3,ETH_Write32@data+3
 21542  0047C0  EC44  F031         	call	_ETH_Write32	;wreg free
 21543                           
 21544                           ;ipv4.c: 259: ipv4Header.srcIpAddress = ipv4Address;
 21545  0047C4  C192  F2A2         	movff	_ipv4Address,_ipv4Header+12
 21546  0047C8  C193  F2A3         	movff	_ipv4Address+1,_ipv4Header+13
 21547  0047CC  C194  F2A4         	movff	_ipv4Address+2,_ipv4Header+14
 21548  0047D0  C195  F2A5         	movff	_ipv4Address+3,_ipv4Header+15
 21549                           
 21550                           ;ipv4.c: 260: ipv4Header.dstIpAddress = destAddress;
 21551  0047D4  C04B  F2A6         	movff	IPv4_Start@destAddress,_ipv4Header+16
 21552  0047D8  C04C  F2A7         	movff	IPv4_Start@destAddress+1,_ipv4Header+17
 21553  0047DC  C04D  F2A8         	movff	IPv4_Start@destAddress+2,_ipv4Header+18
 21554  0047E0  C04E  F2A9         	movff	IPv4_Start@destAddress+3,_ipv4Header+19
 21555                           
 21556                           ;ipv4.c: 261: ipv4Header.protocol = protocol;
 21557  0047E4  C04F  F29F         	movff	IPv4_Start@protocol,_ipv4Header+9
 21558  0047E8  D7AC               	goto	l8324
 21559  0047EA                     __end_of_IPv4_Start:
 21560                           	opt stack 0
 21561  0047EA                     PL446:
 21562                           	opt stack 21
 21563  0047EA  5192               	movf	_ipv4Address& (0+255),w,b
 21564  0047EC  1193               	iorwf	(_ipv4Address+1)& (0+255),w,b
 21565  0047EE  1194               	iorwf	(_ipv4Address+2)& (0+255),w,b
 21566  0047F0  1195               	iorwf	(_ipv4Address+3)& (0+255),w,b
 21567  0047F2  0012               	return	
 21568  0047F4                     __end_ofPL446:
 21569                           	opt stack 0
 21570                           tosu	equ	0xFFF
 21571                           tosh	equ	0xFFE
 21572                           tosl	equ	0xFFD
 21573                           pclath	equ	0xFFA
 21574                           tblptru	equ	0xFF8
 21575                           tblptrh	equ	0xFF7
 21576                           tblptrl	equ	0xFF6
 21577                           tablat	equ	0xFF5
 21578                           prodh	equ	0xFF4
 21579                           prodl	equ	0xFF3
 21580                           intcon	equ	0xFF2
 21581                           intcon2	equ	0xFF1
 21582                           indf0	equ	0xFEF
 21583                           postinc0	equ	0xFEE
 21584                           fsr0h	equ	0xFEA
 21585                           fsr0l	equ	0xFE9
 21586                           wreg	equ	0xFE8
 21587                           postinc1	equ	0xFE6
 21588                           plusw1	equ	0xFE3
 21589                           fsr1h	equ	0xFE2
 21590                           fsr1l	equ	0xFE1
 21591                           bsr	equ	0xFE0
 21592                           indf2	equ	0xFDF
 21593                           postinc2	equ	0xFDE
 21594                           postdec2	equ	0xFDD
 21595                           plusw2	equ	0xFDB
 21596                           fsr2h	equ	0xFDA
 21597                           fsr2l	equ	0xFD9
 21598                           status	equ	0xFD8
 21599                           
 21600 ;; *************** function _ETH_Write8 *****************
 21601 ;; Defined at:
 21602 ;;		line 334 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 21603 ;; Parameters:    Size  Location     Type
 21604 ;;  data            1    wreg     unsigned char 
 21605 ;; Auto vars:     Size  Location     Type
 21606 ;;  data            1    2[COMRAM] unsigned char 
 21607 ;; Return value:  Size  Location     Type
 21608 ;;		None               void
 21609 ;; Registers used:
 21610 ;;		wreg, status,2, status,0, cstack
 21611 ;; Tracked objects:
 21612 ;;		On entry : 0/0
 21613 ;;		On exit  : 0/0
 21614 ;;		Unchanged: 0/0
 21615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21620 ;;Total ram usage:        1 bytes
 21621 ;; Hardware stack levels used:    1
 21622 ;; Hardware stack levels required when called:    4
 21623 ;; This function calls:
 21624 ;;		_SPI_ExchangeByte
 21625 ;; This function is called by:
 21626 ;;		_DHCP_Request
 21627 ;;		_DHCP_WriteZeros
 21628 ;;		_IPv4_Start
 21629 ;;		_UDP_Write8
 21630 ;; This function uses a non-reentrant model
 21631 ;;
 21632                           
 21633                           	psect	text88
 21634  006498                     __ptext88:
 21635                           	opt stack 0
 21636  006498                     _ETH_Write8:
 21637                           	opt stack 21
 21638                           
 21639                           ; BSR set to: 0
 21640                           ;incstack = 0
 21641                           ;ETH_Write8@data stored from wreg
 21642  006498  6E03               	movwf	ETH_Write8@data,c
 21643                           
 21644                           ;encX24j600_spi.c: 336: do{LATB3 = 0;} while(0);
 21645  00649A  968A               	bcf	3978,3,c	;volatile
 21646                           
 21647                           ;encX24j600_spi.c: 337: TXPacketSize += 1;
 21648  00649C  0101               	movlb	1	; () banked
 21649  00649E  4B9E               	infsnz	_TXPacketSize& (0+255),f,b
 21650  0064A0  2B9F               	incf	(_TXPacketSize+1)& (0+255),f,b
 21651                           
 21652                           ; BSR set to: 1
 21653                           ;encX24j600_spi.c: 338: SPI_ExchangeByte(wgpdata_inst);
 21654  0064A2  0E2A               	movlw	42
 21655  0064A4  ECF3  F032         	call	_SPI_ExchangeByte
 21656                           
 21657                           ;encX24j600_spi.c: 339: SPI_ExchangeByte(data);
 21658  0064A8  5003               	movf	ETH_Write8@data,w,c
 21659  0064AA  ECF3  F032         	call	_SPI_ExchangeByte
 21660  0064AE  868A               	bsf	3978,3,c	;volatile
 21661  0064B0  0012               	return		;funcret
 21662  0064B2                     __end_of_ETH_Write8:
 21663                           	opt stack 0
 21664                           tosu	equ	0xFFF
 21665                           tosh	equ	0xFFE
 21666                           tosl	equ	0xFFD
 21667                           pclath	equ	0xFFA
 21668                           tblptru	equ	0xFF8
 21669                           tblptrh	equ	0xFF7
 21670                           tblptrl	equ	0xFF6
 21671                           tablat	equ	0xFF5
 21672                           prodh	equ	0xFF4
 21673                           prodl	equ	0xFF3
 21674                           intcon	equ	0xFF2
 21675                           intcon2	equ	0xFF1
 21676                           indf0	equ	0xFEF
 21677                           postinc0	equ	0xFEE
 21678                           fsr0h	equ	0xFEA
 21679                           fsr0l	equ	0xFE9
 21680                           wreg	equ	0xFE8
 21681                           postinc1	equ	0xFE6
 21682                           plusw1	equ	0xFE3
 21683                           fsr1h	equ	0xFE2
 21684                           fsr1l	equ	0xFE1
 21685                           bsr	equ	0xFE0
 21686                           indf2	equ	0xFDF
 21687                           postinc2	equ	0xFDE
 21688                           postdec2	equ	0xFDD
 21689                           plusw2	equ	0xFDB
 21690                           fsr2h	equ	0xFDA
 21691                           fsr2l	equ	0xFD9
 21692                           status	equ	0xFD8
 21693                           
 21694 ;; *************** function _ETH_Write32 *****************
 21695 ;; Defined at:
 21696 ;;		line 376 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 21697 ;; Parameters:    Size  Location     Type
 21698 ;;  data            4    2[COMRAM] unsigned long 
 21699 ;; Auto vars:     Size  Location     Type
 21700 ;;		None
 21701 ;; Return value:  Size  Location     Type
 21702 ;;		None               void
 21703 ;; Registers used:
 21704 ;;		wreg, status,2, status,0, cstack
 21705 ;; Tracked objects:
 21706 ;;		On entry : 0/0
 21707 ;;		On exit  : 0/0
 21708 ;;		Unchanged: 0/0
 21709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21714 ;;Total ram usage:        4 bytes
 21715 ;; Hardware stack levels used:    1
 21716 ;; Hardware stack levels required when called:    4
 21717 ;; This function calls:
 21718 ;;		_SPI_ExchangeByte
 21719 ;; This function is called by:
 21720 ;;		_DHCP_Request
 21721 ;;		_IPv4_Start
 21722 ;;		_UDP_Write32
 21723 ;; This function uses a non-reentrant model
 21724 ;;
 21725                           
 21726                           	psect	text89
 21727  006288                     __ptext89:
 21728                           	opt stack 0
 21729  006288                     _ETH_Write32:
 21730                           	opt stack 21
 21731                           
 21732                           ;incstack = 0
 21733                           ;encX24j600_spi.c: 378: do{LATB3 = 0;} while(0);
 21734  006288  968A               	bcf	3978,3,c	;volatile
 21735                           
 21736                           ;encX24j600_spi.c: 379: TXPacketSize += 4;
 21737  00628A  0E04               	movlw	4
 21738                           
 21739                           ; BSR set to: 1
 21740                           ;encX24j600_spi.c: 380: SPI_ExchangeByte(wgpdata_inst);
 21741  00628C  EC9E  F031         	call	PL406	;call to abstracted procedure
 21742  006290  ECF3  F032         	call	_SPI_ExchangeByte
 21743                           
 21744                           ;encX24j600_spi.c: 381: SPI_ExchangeByte(((uint8_t*) &data)[3]);
 21745  006294  5006               	movf	ETH_Write32@data+3,w,c
 21746  006296  ECF3  F032         	call	_SPI_ExchangeByte
 21747                           
 21748                           ;encX24j600_spi.c: 382: SPI_ExchangeByte(((uint8_t*) &data)[2]);
 21749  00629A  5005               	movf	ETH_Write32@data+2,w,c
 21750  00629C  ECF3  F032         	call	_SPI_ExchangeByte
 21751                           
 21752                           ;encX24j600_spi.c: 383: SPI_ExchangeByte(((uint8_t*) &data)[1]);
 21753  0062A0  5004               	movf	ETH_Write32@data+1,w,c
 21754  0062A2  ECF3  F032         	call	_SPI_ExchangeByte
 21755                           
 21756                           ;encX24j600_spi.c: 384: SPI_ExchangeByte(((uint8_t*) &data)[0]);
 21757  0062A6  5003               	movf	ETH_Write32@data,w,c
 21758  0062A8  ECF3  F032         	call	_SPI_ExchangeByte
 21759  0062AC  868A               	bsf	3978,3,c	;volatile
 21760  0062AE  0012               	return		;funcret
 21761  0062B0                     __end_of_ETH_Write32:
 21762                           	opt stack 0
 21763                           tosu	equ	0xFFF
 21764                           tosh	equ	0xFFE
 21765                           tosl	equ	0xFFD
 21766                           pclath	equ	0xFFA
 21767                           tblptru	equ	0xFF8
 21768                           tblptrh	equ	0xFF7
 21769                           tblptrl	equ	0xFF6
 21770                           tablat	equ	0xFF5
 21771                           prodh	equ	0xFF4
 21772                           prodl	equ	0xFF3
 21773                           intcon	equ	0xFF2
 21774                           intcon2	equ	0xFF1
 21775                           indf0	equ	0xFEF
 21776                           postinc0	equ	0xFEE
 21777                           fsr0h	equ	0xFEA
 21778                           fsr0l	equ	0xFE9
 21779                           wreg	equ	0xFE8
 21780                           postinc1	equ	0xFE6
 21781                           plusw1	equ	0xFE3
 21782                           fsr1h	equ	0xFE2
 21783                           fsr1l	equ	0xFE1
 21784                           bsr	equ	0xFE0
 21785                           indf2	equ	0xFDF
 21786                           postinc2	equ	0xFDE
 21787                           postdec2	equ	0xFDD
 21788                           plusw2	equ	0xFDB
 21789                           fsr2h	equ	0xFDA
 21790                           fsr2l	equ	0xFD9
 21791                           status	equ	0xFD8
 21792                           
 21793 ;; *************** function _ARPV4_Request *****************
 21794 ;; Defined at:
 21795 ;;		line 194 in file "../../TCPIP Library/source/arpv4.c"
 21796 ;; Parameters:    Size  Location     Type
 21797 ;;  destAddress     4   14[COMRAM] unsigned long 
 21798 ;; Auto vars:     Size  Location     Type
 21799 ;;  header         28   46[COMRAM] struct .
 21800 ;;  ret             1   45[COMRAM] enum E450
 21801 ;; Return value:  Size  Location     Type
 21802 ;;                  1    wreg      enum E450
 21803 ;; Registers used:
 21804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21805 ;; Tracked objects:
 21806 ;;		On entry : F/0
 21807 ;;		On exit  : 0/0
 21808 ;;		Unchanged: 0/0
 21809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21811 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21812 ;;      Temps:         27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21813 ;;      Totals:        60       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21814 ;;Total ram usage:       60 bytes
 21815 ;; Hardware stack levels used:    1
 21816 ;; Hardware stack levels required when called:    7
 21817 ;; This function calls:
 21818 ;;		_ETH_GetMAC
 21819 ;;		_ETH_Send
 21820 ;;		_ETH_WriteBlock
 21821 ;;		_ETH_WriteStart
 21822 ;; This function is called by:
 21823 ;;		_IPv4_Start
 21824 ;; This function uses a non-reentrant model
 21825 ;;
 21826                           
 21827                           	psect	text90
 21828  00495E                     __ptext90:
 21829                           	opt stack 0
 21830  00495E                     _ARPV4_Request:
 21831                           	opt stack 18
 21832                           
 21833                           ; BSR set to: 0
 21834                           ;arpv4.c: 200: arpHeader_t header;
 21835                           ;arpv4.c: 201: header.htype = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 &
      +                           (uint16_t)0x00FF) << 8));
 21836                           
 21837                           ; BSR set to: 0
 21838                           
 21839                           ;incstack = 0
 21840  00495E  0E01               	movlw	1
 21841  004960  6E30               	movwf	ARPV4_Request@header+1,c
 21842  004962  6A2F               	clrf	ARPV4_Request@header,c
 21843                           
 21844                           ;arpv4.c: 202: header.ptype = ((((uint16_t)0x0800 & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)0x0800 & (uint16_t)0x00FF) << 8));
 21845  004964  6A32               	clrf	ARPV4_Request@header+3,c
 21846  004966  0E08               	movlw	8
 21847  004968  6E31               	movwf	ARPV4_Request@header+2,c
 21848                           
 21849                           ;arpv4.c: 203: header.hlen = 6;
 21850  00496A  0E06               	movlw	6
 21851  00496C  6E33               	movwf	ARPV4_Request@header+4,c
 21852                           
 21853                           ;arpv4.c: 204: header.plen = 4;
 21854  00496E  0E04               	movlw	4
 21855  004970  6E34               	movwf	ARPV4_Request@header+5,c
 21856                           
 21857                           ;arpv4.c: 205: header.oper = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & 
      +                          (uint16_t)0x00FF) << 8));
 21858  004972  0E01               	movlw	1
 21859  004974  6E36               	movwf	ARPV4_Request@header+7,c
 21860  004976  6A35               	clrf	ARPV4_Request@header+6,c
 21861                           
 21862                           ; BSR set to: 0
 21863                           ;arpv4.c: 206: ETH_GetMAC((char*)&header.sha);
 21864  004978  0E37               	movlw	low (ARPV4_Request@header+8)
 21865  00497A  6E08               	movwf	ETH_GetMAC@macAddr,c
 21866  00497C  6A09               	clrf	ETH_GetMAC@macAddr+1,c
 21867  00497E  ECFC  F02C         	call	_ETH_GetMAC	;wreg free
 21868                           
 21869                           ;arpv4.c: 207: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((u
      +                          int32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x00
      +                          00ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
 21870  004982  0101               	movlb	1	; () banked
 21871  004984  5192               	movf	_ipv4Address& (0+255),w,b
 21872  004986  D880               	call	PL292	;call to abstracted procedure
 21873  004988  5193               	movf	(_ipv4Address+1)& (0+255),w,b
 21874  00498A  D872               	call	PL286	;call to abstracted procedure
 21875  00498C  5194               	movf	(_ipv4Address+2)& (0+255),w,b
 21876  00498E  D863               	call	PL262	;call to abstracted procedure
 21877  004990  5195               	movf	(_ipv4Address+3)& (0+255),w,b
 21878  004992  6E25               	movwf	(??_ARPV4_Request+18)& (0+255),c
 21879  004994  0E19               	movlw	25
 21880  004996  D001               	goto	u10780
 21881  004998                     u10785:
 21882  004998  D888               	call	PL402	;call to abstracted procedure
 21883  00499A                     u10780:
 21884  00499A  2EE8               	decfsz	wreg,f,c
 21885  00499C  D7FD               	goto	u10785
 21886  00499E  D840               	call	PL182	;call to abstracted procedure
 21887  0049A0  6E3D               	movwf	ARPV4_Request@header+14,c
 21888  0049A2  5014               	movf	??_ARPV4_Request+1,w,c
 21889  0049A4  102B               	iorwf	??_ARPV4_Request+24,w,c
 21890  0049A6  6E3E               	movwf	ARPV4_Request@header+15,c
 21891  0049A8  5015               	movf	??_ARPV4_Request+2,w,c
 21892  0049AA  102C               	iorwf	??_ARPV4_Request+25,w,c
 21893  0049AC  6E3F               	movwf	ARPV4_Request@header+16,c
 21894  0049AE  5016               	movf	??_ARPV4_Request+3,w,c
 21895  0049B0  102D               	iorwf	??_ARPV4_Request+26,w,c
 21896  0049B2  6E40               	movwf	ARPV4_Request@header+17,c
 21897                           
 21898                           ; BSR set to: 1
 21899                           ;arpv4.c: 208: header.tpa= ((((uint32_t)destAddress&(uint32_t)0xff000000) >> 24) | (((ui
      +                          nt32_t)destAddress&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)destAddress&(uint32_t)0x000
      +                          0ff00) << 8) | (((uint32_t)destAddress&(uint32_t)0x000000ff) << 24) );
 21900  0049B4  500F               	movf	ARPV4_Request@destAddress,w,c
 21901  0049B6  D868               	call	PL292	;call to abstracted procedure
 21902  0049B8  5010               	movf	ARPV4_Request@destAddress+1,w,c
 21903  0049BA  D85A               	call	PL286	;call to abstracted procedure
 21904  0049BC  5011               	movf	ARPV4_Request@destAddress+2,w,c
 21905  0049BE  D84B               	call	PL262	;call to abstracted procedure
 21906  0049C0  5012               	movf	ARPV4_Request@destAddress+3,w,c
 21907  0049C2  6E25               	movwf	(??_ARPV4_Request+18)& (0+255),c
 21908  0049C4  0E19               	movlw	25
 21909  0049C6  D001               	goto	u10790
 21910  0049C8                     u10795:
 21911  0049C8  D870               	call	PL402	;call to abstracted procedure
 21912  0049CA                     u10790:
 21913  0049CA  2EE8               	decfsz	wreg,f,c
 21914  0049CC  D7FD               	goto	u10795
 21915  0049CE  D828               	call	PL182	;call to abstracted procedure
 21916  0049D0  6E47               	movwf	ARPV4_Request@header+24,c
 21917  0049D2  5014               	movf	??_ARPV4_Request+1,w,c
 21918  0049D4  102B               	iorwf	??_ARPV4_Request+24,w,c
 21919  0049D6  6E48               	movwf	ARPV4_Request@header+25,c
 21920  0049D8  5015               	movf	??_ARPV4_Request+2,w,c
 21921  0049DA  102C               	iorwf	??_ARPV4_Request+25,w,c
 21922  0049DC  6E49               	movwf	ARPV4_Request@header+26,c
 21923  0049DE  5016               	movf	??_ARPV4_Request+3,w,c
 21924  0049E0  102D               	iorwf	??_ARPV4_Request+26,w,c
 21925  0049E2  6E4A               	movwf	ARPV4_Request@header+27,c
 21926                           
 21927                           ; BSR set to: 1
 21928                           ;arpv4.c: 209: header.tha.s.byte1 = 0;
 21929  0049E4  6A41               	clrf	ARPV4_Request@header+18,c
 21930                           
 21931                           ; BSR set to: 1
 21932                           ;arpv4.c: 210: header.tha.s.byte2 = 0;
 21933  0049E6  6A42               	clrf	ARPV4_Request@header+19,c
 21934                           
 21935                           ; BSR set to: 1
 21936                           ;arpv4.c: 211: header.tha.s.byte3 = 0;
 21937  0049E8  6A43               	clrf	ARPV4_Request@header+20,c
 21938                           
 21939                           ; BSR set to: 1
 21940                           ;arpv4.c: 212: header.tha.s.byte4 = 0;
 21941  0049EA  6A44               	clrf	ARPV4_Request@header+21,c
 21942                           
 21943                           ; BSR set to: 1
 21944                           ;arpv4.c: 213: header.tha.s.byte5 = 0;
 21945  0049EC  6A45               	clrf	ARPV4_Request@header+22,c
 21946                           
 21947                           ; BSR set to: 1
 21948                           ;arpv4.c: 214: header.tha.s.byte6 = 0;
 21949  0049EE  6A46               	clrf	ARPV4_Request@header+23,c
 21950                           
 21951                           ; BSR set to: 1
 21952                           ;arpv4.c: 216: ret = ETH_WriteStart(&broadcastMAC,0x0806);
 21953  0049F0  0E37               	movlw	low _broadcastMAC
 21954  0049F2  6E0B               	movwf	ETH_WriteStart@destMAC,c
 21955  0049F4  500B               	movf	ETH_WriteStart@destMAC,w,c
 21956  0049F6  A4D8               	btfss	status,2,c
 21957  0049F8  0E10               	movlw	high __smallconst
 21958  0049FA  6E0C               	movwf	ETH_WriteStart@destMAC+1,c
 21959  0049FC  D85C               	call	PL464	;call to abstracted procedure
 21960  0049FE  EC7C  F02D         	call	_ETH_WriteStart	;wreg free
 21961  004A02  6E2E               	movwf	ARPV4_Request@ret,c
 21962                           
 21963                           ;arpv4.c: 217: if(ret == SUCCESS)
 21964  004A04  042E               	decf	ARPV4_Request@ret,w,c
 21965  004A06  E10A               	bnz	l8260
 21966                           
 21967                           ;arpv4.c: 218: {
 21968                           ;arpv4.c: 219: ETH_WriteBlock((char*)&header,sizeof(arpHeader_t));
 21969  004A08  0E2F               	movlw	low ARPV4_Request@header
 21970  004A0A  D849               	call	PL398	;call to abstracted procedure
 21971  004A0C  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 21972                           
 21973                           ;arpv4.c: 220: ret = ETH_Send();
 21974  004A10  ECC5  F031         	call	_ETH_Send	;wreg free
 21975  004A14  6E2E               	movwf	ARPV4_Request@ret,c
 21976                           
 21977                           ; BSR set to: 1
 21978                           ;arpv4.c: 221: if(ret == SUCCESS)
 21979  004A16  042E               	decf	ARPV4_Request@ret,w,c
 21980  004A18  E101               	bnz	l8260
 21981                           
 21982                           ; BSR set to: 1
 21983                           ;arpv4.c: 222: {
 21984                           ;arpv4.c: 223: return MAC_NOT_FOUND;
 21985  004A1A  0C05               	retlw	5
 21986  004A1C                     l8260:
 21987                           
 21988                           ;arpv4.c: 224: }
 21989                           ;arpv4.c: 225: }
 21990                           ;arpv4.c: 226: return ret;
 21991  004A1C  502E               	movf	ARPV4_Request@ret,w,c
 21992  004A1E  0012               	return		;funcret
 21993  004A20                     __end_of_ARPV4_Request:
 21994                           	opt stack 0
 21995  004A20                     PL182:
 21996                           	opt stack 18
 21997  004A20  501E               	movf	??_ARPV4_Request+11,w,c
 21998  004A22  1022               	iorwf	??_ARPV4_Request+15,w,c
 21999  004A24  6E26               	movwf	(??_ARPV4_Request+19)& (0+255),c
 22000  004A26  501F               	movf	??_ARPV4_Request+12,w,c
 22001  004A28  1023               	iorwf	??_ARPV4_Request+16,w,c
 22002  004A2A  6E27               	movwf	(??_ARPV4_Request+20)& (0+255),c
 22003  004A2C  5020               	movf	??_ARPV4_Request+13,w,c
 22004  004A2E  1024               	iorwf	??_ARPV4_Request+17,w,c
 22005  004A30  6E28               	movwf	(??_ARPV4_Request+21)& (0+255),c
 22006  004A32  5021               	movf	??_ARPV4_Request+14,w,c
 22007  004A34  1025               	iorwf	??_ARPV4_Request+18,w,c
 22008  004A36  6E29               	movwf	(??_ARPV4_Request+22)& (0+255),c
 22009  004A38  5017               	movf	??_ARPV4_Request+4,w,c
 22010  004A3A  1026               	iorwf	??_ARPV4_Request+19,w,c
 22011  004A3C  6E2A               	movwf	(??_ARPV4_Request+23)& (0+255),c
 22012  004A3E  5018               	movf	??_ARPV4_Request+5,w,c
 22013  004A40  1027               	iorwf	??_ARPV4_Request+20,w,c
 22014  004A42  6E2B               	movwf	(??_ARPV4_Request+24)& (0+255),c
 22015  004A44  5019               	movf	??_ARPV4_Request+6,w,c
 22016  004A46  1028               	iorwf	??_ARPV4_Request+21,w,c
 22017  004A48  6E2C               	movwf	(??_ARPV4_Request+25)& (0+255),c
 22018  004A4A  501A               	movf	??_ARPV4_Request+7,w,c
 22019  004A4C  1029               	iorwf	??_ARPV4_Request+22,w,c
 22020  004A4E  6E2D               	movwf	(??_ARPV4_Request+26)& (0+255),c
 22021  004A50  5013               	movf	??_ARPV4_Request,w,c
 22022  004A52  102A               	iorwf	??_ARPV4_Request+23,w,c
 22023  004A54  0012               	return	
 22024  004A56                     __end_ofPL182:
 22025                           	opt stack 0
 22026  004A56                     PL262:
 22027                           	opt stack 18
 22028  004A56  6E1C               	movwf	(??_ARPV4_Request+9)& (0+255),c
 22029  004A58  6A1D               	clrf	(??_ARPV4_Request+10)& (0+255),c
 22030  004A5A  501B               	movf	??_ARPV4_Request+8,w,c
 22031  004A5C  6E1E               	movwf	(??_ARPV4_Request+11)& (0+255),c
 22032  004A5E  501C               	movf	??_ARPV4_Request+9,w,c
 22033  004A60  6E1F               	movwf	(??_ARPV4_Request+12)& (0+255),c
 22034  004A62  501D               	movf	??_ARPV4_Request+10,w,c
 22035  004A64  6E20               	movwf	(??_ARPV4_Request+13)& (0+255),c
 22036  004A66  6A21               	clrf	(??_ARPV4_Request+14)& (0+255),c
 22037  004A68  6A22               	clrf	(??_ARPV4_Request+15)& (0+255),c
 22038  004A6A  6A23               	clrf	(??_ARPV4_Request+16)& (0+255),c
 22039  004A6C  6A24               	clrf	(??_ARPV4_Request+17)& (0+255),c
 22040  004A6E  0012               	return	
 22041  004A70                     __end_ofPL262:
 22042                           	opt stack 0
 22043  004A70                     PL286:
 22044                           	opt stack 18
 22045  004A70  6E18               	movwf	(??_ARPV4_Request+5)& (0+255),c
 22046  004A72  6A19               	clrf	(??_ARPV4_Request+6)& (0+255),c
 22047  004A74  6A1A               	clrf	(??_ARPV4_Request+7)& (0+255),c
 22048  004A76  C019  F01A         	movff	??_ARPV4_Request+6,??_ARPV4_Request+7
 22049  004A7A  C018  F019         	movff	??_ARPV4_Request+5,??_ARPV4_Request+6
 22050  004A7E  C017  F018         	movff	??_ARPV4_Request+4,??_ARPV4_Request+5
 22051  004A82  6A17               	clrf	??_ARPV4_Request+4,c
 22052  004A84  6A1B               	clrf	(??_ARPV4_Request+8)& (0+255),c
 22053  004A86  0012               	return	
 22054  004A88                     __end_ofPL286:
 22055                           	opt stack 0
 22056  004A88                     PL292:
 22057                           	opt stack 18
 22058  004A88  6E13               	movwf	??_ARPV4_Request& (0+255),c
 22059  004A8A  6A14               	clrf	(??_ARPV4_Request+1)& (0+255),c
 22060  004A8C  6A15               	clrf	(??_ARPV4_Request+2)& (0+255),c
 22061  004A8E  6A16               	clrf	(??_ARPV4_Request+3)& (0+255),c
 22062  004A90  C013  F016         	movff	??_ARPV4_Request,??_ARPV4_Request+3
 22063  004A94  6A15               	clrf	??_ARPV4_Request+2,c
 22064  004A96  6A14               	clrf	??_ARPV4_Request+1,c
 22065  004A98  6A13               	clrf	??_ARPV4_Request,c
 22066  004A9A  6A17               	clrf	(??_ARPV4_Request+4)& (0+255),c
 22067  004A9C  0012               	return	
 22068  004A9E                     __end_ofPL292:
 22069                           	opt stack 0
 22070  004A9E                     PL398:
 22071                           	opt stack 21
 22072  004A9E  6E03               	movwf	ETH_WriteBlock@data,c
 22073  004AA0  6A04               	clrf	ETH_WriteBlock@data+1,c
 22074  004AA2  6A06               	clrf	ETH_WriteBlock@len+1,c
 22075  004AA4  0E1C               	movlw	28
 22076  004AA6  6E05               	movwf	ETH_WriteBlock@len,c
 22077  004AA8  0C1C               	retlw	28
 22078  004AAA                     __end_ofPL398:
 22079                           	opt stack 0
 22080  004AAA                     PL402:
 22081                           	opt stack 18
 22082  004AAA  90D8               	bcf	status,0,c
 22083  004AAC  3225               	rrcf	??_ARPV4_Request+18,f,c
 22084  004AAE  3224               	rrcf	??_ARPV4_Request+17,f,c
 22085  004AB0  3223               	rrcf	??_ARPV4_Request+16,f,c
 22086  004AB2  3222               	rrcf	??_ARPV4_Request+15,f,c
 22087  004AB4  0012               	return	
 22088  004AB6                     __end_ofPL402:
 22089                           	opt stack 0
 22090  004AB6                     PL464:
 22091                           	opt stack 21
 22092  004AB6  0E08               	movlw	8
 22093  004AB8  6E0E               	movwf	ETH_WriteStart@type+1,c
 22094  004ABA  0E06               	movlw	6
 22095  004ABC  6E0D               	movwf	ETH_WriteStart@type,c
 22096  004ABE  0C06               	retlw	6
 22097  004AC0                     __end_ofPL464:
 22098                           	opt stack 0
 22099                           tosu	equ	0xFFF
 22100                           tosh	equ	0xFFE
 22101                           tosl	equ	0xFFD
 22102                           pclath	equ	0xFFA
 22103                           tblptru	equ	0xFF8
 22104                           tblptrh	equ	0xFF7
 22105                           tblptrl	equ	0xFF6
 22106                           tablat	equ	0xFF5
 22107                           prodh	equ	0xFF4
 22108                           prodl	equ	0xFF3
 22109                           intcon	equ	0xFF2
 22110                           intcon2	equ	0xFF1
 22111                           indf0	equ	0xFEF
 22112                           postinc0	equ	0xFEE
 22113                           fsr0h	equ	0xFEA
 22114                           fsr0l	equ	0xFE9
 22115                           wreg	equ	0xFE8
 22116                           postinc1	equ	0xFE6
 22117                           plusw1	equ	0xFE3
 22118                           fsr1h	equ	0xFE2
 22119                           fsr1l	equ	0xFE1
 22120                           bsr	equ	0xFE0
 22121                           indf2	equ	0xFDF
 22122                           postinc2	equ	0xFDE
 22123                           postdec2	equ	0xFDD
 22124                           plusw2	equ	0xFDB
 22125                           fsr2h	equ	0xFDA
 22126                           fsr2l	equ	0xFD9
 22127                           status	equ	0xFD8
 22128                           
 22129 ;; *************** function _ETH_WriteStart *****************
 22130 ;; Defined at:
 22131 ;;		line 366 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 22132 ;; Parameters:    Size  Location     Type
 22133 ;;  destMAC         2   10[COMRAM] PTR const struct .
 22134 ;;		 -> arpMap.macAddress(6), broadcastMAC(6), header.sha(6), ARPV4_Packet@header(28), 
 22135 ;;		 -> arpMap(104), NULL(0), 
 22136 ;;  type            2   12[COMRAM] unsigned int 
 22137 ;; Auto vars:     Size  Location     Type
 22138 ;;		None
 22139 ;; Return value:  Size  Location     Type
 22140 ;;                  1    wreg      enum E6988
 22141 ;; Registers used:
 22142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22143 ;; Tracked objects:
 22144 ;;		On entry : E/1
 22145 ;;		On exit  : 0/0
 22146 ;;		Unchanged: 0/0
 22147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22151 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22152 ;;Total ram usage:        4 bytes
 22153 ;; Hardware stack levels used:    1
 22154 ;; Hardware stack levels required when called:    6
 22155 ;; This function calls:
 22156 ;;		_ENCx24_Read
 22157 ;;		_ENCx24_Write
 22158 ;;		_ETH_Write16
 22159 ;;		_ETH_WriteBlock
 22160 ;; This function is called by:
 22161 ;;		_ARPV4_Packet
 22162 ;;		_ARPV4_Request
 22163 ;;		_IPv4_Start
 22164 ;; This function uses a non-reentrant model
 22165 ;;
 22166                           
 22167                           	psect	text91
 22168  005AF8                     __ptext91:
 22169                           	opt stack 0
 22170  005AF8                     _ETH_WriteStart:
 22171                           	opt stack 19
 22172                           
 22173                           ;encX24J600_driver.c: 368: TXPacketSize = 0;
 22174                           
 22175                           ;incstack = 0
 22176  005AF8  0101               	movlb	1	; () banked
 22177  005AFA  6B9E               	clrf	_TXPacketSize& (0+255),b
 22178  005AFC  6B9F               	clrf	(_TXPacketSize+1)& (0+255),b
 22179                           
 22180                           ;encX24J600_driver.c: 369: if(ethData.bufferBusy)
 22181  005AFE  BB83               	btfsc	_ethData& (0+255),5,b	;volatile
 22182                           
 22183                           ; BSR set to: 1
 22184                           ;encX24J600_driver.c: 370: {
 22185                           ;encX24J600_driver.c: 371: return BUFFER_BUSY;
 22186  005B00  0C03               	retlw	3
 22187                           
 22188                           ; BSR set to: 1
 22189                           ;encX24J600_driver.c: 372: }
 22190                           ;encX24J600_driver.c: 373: if((ENCx24_Read(XJ600_ECON1L) & 0x02))
 22191  005B02  0EFE               	movlw	254
 22192  005B04  EC04  F02F         	call	_ENCx24_Read
 22193  005B08  B205               	btfsc	?_ENCx24_Read,1,c
 22194                           
 22195                           ;encX24J600_driver.c: 374: {
 22196                           ;encX24J600_driver.c: 375: return TX_LOGIC_NOT_IDLE;
 22197  005B0A  0C04               	retlw	4
 22198                           
 22199                           ;encX24J600_driver.c: 376: }
 22200                           ;encX24J600_driver.c: 378: ENCx24_Write(XJ600_EGPWRPTL, 0x0000ul);
 22201  005B0C  6A06               	clrf	ENCx24_Write@data+1,c
 22202  005B0E  6A05               	clrf	ENCx24_Write@data,c
 22203  005B10  0E88               	movlw	136
 22204  005B12  EC29  F02F         	call	_ENCx24_Write
 22205                           
 22206                           ;encX24J600_driver.c: 380: ETH_WriteBlock((char *)destMAC,6);
 22207  005B16  C00B  F003         	movff	ETH_WriteStart@destMAC,ETH_WriteBlock@data
 22208  005B1A  C00C  F004         	movff	ETH_WriteStart@destMAC+1,ETH_WriteBlock@data+1
 22209  005B1E  D812               	call	PL478	;call to abstracted procedure
 22210  005B20  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 22211                           
 22212                           ;encX24J600_driver.c: 381: ETH_WriteBlock((char *)&ethMAC,6);
 22213  005B24  0EB2               	movlw	low _ethMAC
 22214  005B26  6E03               	movwf	ETH_WriteBlock@data,c
 22215  005B28  0E02               	movlw	high _ethMAC
 22216  005B2A  6E04               	movwf	ETH_WriteBlock@data+1,c
 22217  005B2C  D80B               	call	PL478	;call to abstracted procedure
 22218  005B2E  ECA6  F02D         	call	_ETH_WriteBlock	;wreg free
 22219                           
 22220                           ;encX24J600_driver.c: 382: ETH_Write16(type);
 22221  005B32  C00D  F003         	movff	ETH_WriteStart@type,ETH_Write16@data
 22222  005B36  C00E  F004         	movff	ETH_WriteStart@type+1,ETH_Write16@data+1
 22223  005B3A  EC91  F031         	call	_ETH_Write16	;wreg free
 22224                           
 22225                           ;encX24J600_driver.c: 383: ethData.bufferBusy = 1;
 22226  005B3E  0101               	movlb	1	; () banked
 22227  005B40  8B83               	bsf	_ethData& (0+255),5,b	;volatile
 22228                           
 22229                           ; BSR set to: 1
 22230                           ;encX24J600_driver.c: 385: return SUCCESS;
 22231  005B42  0C01               	retlw	1	;funcret
 22232  005B44                     __end_of_ETH_WriteStart:
 22233                           	opt stack 0
 22234  005B44                     PL478:
 22235                           	opt stack 19
 22236  005B44  6A06               	clrf	ETH_WriteBlock@len+1,c
 22237  005B46  0E06               	movlw	6
 22238  005B48  6E05               	movwf	ETH_WriteBlock@len,c
 22239  005B4A  0C06               	retlw	6
 22240  005B4C                     __end_ofPL478:
 22241                           	opt stack 0
 22242                           tosu	equ	0xFFF
 22243                           tosh	equ	0xFFE
 22244                           tosl	equ	0xFFD
 22245                           pclath	equ	0xFFA
 22246                           tblptru	equ	0xFF8
 22247                           tblptrh	equ	0xFF7
 22248                           tblptrl	equ	0xFF6
 22249                           tablat	equ	0xFF5
 22250                           prodh	equ	0xFF4
 22251                           prodl	equ	0xFF3
 22252                           intcon	equ	0xFF2
 22253                           intcon2	equ	0xFF1
 22254                           indf0	equ	0xFEF
 22255                           postinc0	equ	0xFEE
 22256                           fsr0h	equ	0xFEA
 22257                           fsr0l	equ	0xFE9
 22258                           wreg	equ	0xFE8
 22259                           postinc1	equ	0xFE6
 22260                           plusw1	equ	0xFE3
 22261                           fsr1h	equ	0xFE2
 22262                           fsr1l	equ	0xFE1
 22263                           bsr	equ	0xFE0
 22264                           indf2	equ	0xFDF
 22265                           postinc2	equ	0xFDE
 22266                           postdec2	equ	0xFDD
 22267                           plusw2	equ	0xFDB
 22268                           fsr2h	equ	0xFDA
 22269                           fsr2l	equ	0xFD9
 22270                           status	equ	0xFD8
 22271                           
 22272 ;; *************** function _ETH_WriteBlock *****************
 22273 ;; Defined at:
 22274 ;;		line 393 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 22275 ;; Parameters:    Size  Location     Type
 22276 ;;  data            2    2[COMRAM] PTR void 
 22277 ;;		 -> arpMap.macAddress(6), ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@local_ip(4), 
 22278 ;;		 -> main@str(32), STR_5(13), STR_4(17), TCP_Snd@txHeader(20), 
 22279 ;;		 -> Network_Read@debug_str(80), dhcpName(21), DHCP_Request@ethMAC(6), broadcastMAC(6), 
 22280 ;;		 -> ARPV4_Request@header(28), header.sha(6), ARPV4_Packet@header(28), arpMap(104), 
 22281 ;;		 -> ethMAC(6), NULL(0), 
 22282 ;;  len             2    4[COMRAM] unsigned int 
 22283 ;; Auto vars:     Size  Location     Type
 22284 ;;  p               2    6[COMRAM] PTR unsigned char 
 22285 ;;		 -> arpMap.macAddress(6), ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@local_ip(4), 
 22286 ;;		 -> main@str(32), STR_5(13), STR_4(17), TCP_Snd@txHeader(20), 
 22287 ;;		 -> Network_Read@debug_str(80), dhcpName(21), DHCP_Request@ethMAC(6), broadcastMAC(6), 
 22288 ;;		 -> ARPV4_Request@header(28), header.sha(6), ARPV4_Packet@header(28), arpMap(104), 
 22289 ;;		 -> ethMAC(6), NULL(0), 
 22290 ;; Return value:  Size  Location     Type
 22291 ;;                  2    2[COMRAM] unsigned int 
 22292 ;; Registers used:
 22293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22294 ;; Tracked objects:
 22295 ;;		On entry : 0/0
 22296 ;;		On exit  : 0/0
 22297 ;;		Unchanged: 0/0
 22298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;Total ram usage:        6 bytes
 22304 ;; Hardware stack levels used:    1
 22305 ;; Hardware stack levels required when called:    4
 22306 ;; This function calls:
 22307 ;;		_SPI_ExchangeByte
 22308 ;; This function is called by:
 22309 ;;		_ETH_WriteStart
 22310 ;;		_ARPV4_Packet
 22311 ;;		_ARPV4_Request
 22312 ;;		_DHCP_Request
 22313 ;;		_TCP_Snd
 22314 ;;		_UDP_WriteBlock
 22315 ;; This function uses a non-reentrant model
 22316 ;;
 22317                           
 22318                           	psect	text92
 22319  005B4C                     __ptext92:
 22320                           	opt stack 0
 22321  005B4C                     _ETH_WriteBlock:
 22322                           	opt stack 20
 22323                           
 22324                           ;encX24j600_spi.c: 395: char *p = data;
 22325                           
 22326                           ;incstack = 0
 22327  005B4C  C003  F007         	movff	ETH_WriteBlock@data,ETH_WriteBlock@p
 22328  005B50  C004  F008         	movff	ETH_WriteBlock@data+1,ETH_WriteBlock@p+1
 22329  005B54  968A               	bcf	3978,3,c	;volatile
 22330                           
 22331                           ;encX24j600_spi.c: 398: TXPacketSize += len;
 22332  005B56  5005               	movf	ETH_WriteBlock@len,w,c
 22333  005B58  0101               	movlb	1	; () banked
 22334  005B5A  279E               	addwf	_TXPacketSize& (0+255),f,b
 22335  005B5C  5006               	movf	ETH_WriteBlock@len+1,w,c
 22336  005B5E  239F               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 22337                           
 22338                           ; BSR set to: 1
 22339                           ;encX24j600_spi.c: 399: SPI_ExchangeByte(wgpdata_inst);
 22340  005B60  0E2A               	movlw	42
 22341  005B62  ECF3  F032         	call	_SPI_ExchangeByte
 22342                           
 22343                           ;encX24j600_spi.c: 400: while(len--)
 22344  005B66  D013               	goto	l8038
 22345  005B68                     l8034:
 22346                           
 22347                           ;encX24j600_spi.c: 401: {
 22348                           ;encX24j600_spi.c: 402: SPI_ExchangeByte(*p++);
 22349  005B68  C007  FFF6         	movff	ETH_WriteBlock@p,tblptrl
 22350  005B6C  C008  FFF7         	movff	ETH_WriteBlock@p+1,tblptrh
 22351  005B70  0E00               	movlw	low (__smallconst shr (0+16))
 22352  005B72  6EF8               	movwf	tblptru,c
 22353  005B74  0E0F               	movlw	(high __ramtop+-1)
 22354  005B76  64F7               	cpfsgt	tblptrh,c
 22355  005B78  D003               	bra	u10667
 22356  005B7A  0008               	tblrd		*
 22357  005B7C  50F5               	movf	tablat,w,c
 22358  005B7E  D003               	bra	u10660
 22359  005B80                     u10667:
 22360  005B80  EC3C  F011         	call	PL114	;call to abstracted procedure
 22361  005B84  50EF               	movf	indf0,w,c
 22362  005B86                     u10660:
 22363  005B86  ECF3  F032         	call	_SPI_ExchangeByte
 22364  005B8A  4A07               	infsnz	ETH_WriteBlock@p,f,c
 22365  005B8C  2A08               	incf	ETH_WriteBlock@p+1,f,c
 22366  005B8E                     l8038:
 22367  005B8E  0605               	decf	ETH_WriteBlock@len,f,c
 22368  005B90  A0D8               	btfss	status,0,c
 22369  005B92  0606               	decf	ETH_WriteBlock@len+1,f,c
 22370  005B94  2805               	incf	ETH_WriteBlock@len,w,c
 22371  005B96  E1E8               	bnz	l8034
 22372  005B98  2806               	incf	ETH_WriteBlock@len+1,w,c
 22373  005B9A  E1E6               	bnz	l8034
 22374                           
 22375                           ;encX24j600_spi.c: 403: }
 22376                           ;encX24j600_spi.c: 404: do{LATB3 = 1;} while(0);
 22377  005B9C  868A               	bsf	3978,3,c	;volatile
 22378  005B9E  0012               	return		;funcret
 22379  005BA0                     __end_of_ETH_WriteBlock:
 22380                           	opt stack 0
 22381                           tosu	equ	0xFFF
 22382                           tosh	equ	0xFFE
 22383                           tosl	equ	0xFFD
 22384                           pclath	equ	0xFFA
 22385                           tblptru	equ	0xFF8
 22386                           tblptrh	equ	0xFF7
 22387                           tblptrl	equ	0xFF6
 22388                           tablat	equ	0xFF5
 22389                           prodh	equ	0xFF4
 22390                           prodl	equ	0xFF3
 22391                           intcon	equ	0xFF2
 22392                           intcon2	equ	0xFF1
 22393                           indf0	equ	0xFEF
 22394                           postinc0	equ	0xFEE
 22395                           fsr0h	equ	0xFEA
 22396                           fsr0l	equ	0xFE9
 22397                           wreg	equ	0xFE8
 22398                           postinc1	equ	0xFE6
 22399                           plusw1	equ	0xFE3
 22400                           fsr1h	equ	0xFE2
 22401                           fsr1l	equ	0xFE1
 22402                           bsr	equ	0xFE0
 22403                           indf2	equ	0xFDF
 22404                           postinc2	equ	0xFDE
 22405                           postdec2	equ	0xFDD
 22406                           plusw2	equ	0xFDB
 22407                           fsr2h	equ	0xFDA
 22408                           fsr2l	equ	0xFD9
 22409                           status	equ	0xFD8
 22410                           
 22411 ;; *************** function _ETH_Write16 *****************
 22412 ;; Defined at:
 22413 ;;		line 347 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 22414 ;; Parameters:    Size  Location     Type
 22415 ;;  data            2    2[COMRAM] unsigned int 
 22416 ;; Auto vars:     Size  Location     Type
 22417 ;;		None
 22418 ;; Return value:  Size  Location     Type
 22419 ;;		None               void
 22420 ;; Registers used:
 22421 ;;		wreg, status,2, status,0, cstack
 22422 ;; Tracked objects:
 22423 ;;		On entry : 0/0
 22424 ;;		On exit  : 0/0
 22425 ;;		Unchanged: 0/0
 22426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22427 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22431 ;;Total ram usage:        2 bytes
 22432 ;; Hardware stack levels used:    1
 22433 ;; Hardware stack levels required when called:    4
 22434 ;; This function calls:
 22435 ;;		_SPI_ExchangeByte
 22436 ;; This function is called by:
 22437 ;;		_ETH_WriteStart
 22438 ;;		_DHCP_Request
 22439 ;;		_ICMP_EchoReply
 22440 ;;		_IPv4_Start
 22441 ;;		_UDP_Start
 22442 ;;		_UDP_Write16
 22443 ;; This function uses a non-reentrant model
 22444 ;;
 22445                           
 22446                           	psect	text93
 22447  006322                     __ptext93:
 22448                           	opt stack 0
 22449  006322                     _ETH_Write16:
 22450                           	opt stack 20
 22451                           
 22452                           ;incstack = 0
 22453                           ;encX24j600_spi.c: 349: do{LATB3 = 0;} while(0);
 22454  006322  968A               	bcf	3978,3,c	;volatile
 22455                           
 22456                           ;encX24j600_spi.c: 350: TXPacketSize += 2;
 22457  006324  0E02               	movlw	2
 22458                           
 22459                           ; BSR set to: 1
 22460                           ;encX24j600_spi.c: 351: SPI_ExchangeByte(wgpdata_inst);
 22461  006326  D80A               	call	PL406	;call to abstracted procedure
 22462  006328  ECF3  F032         	call	_SPI_ExchangeByte
 22463                           
 22464                           ;encX24j600_spi.c: 352: SPI_ExchangeByte(((uint8_t*) &data)[1]);
 22465  00632C  5004               	movf	ETH_Write16@data+1,w,c
 22466  00632E  ECF3  F032         	call	_SPI_ExchangeByte
 22467                           
 22468                           ;encX24j600_spi.c: 353: SPI_ExchangeByte(((uint8_t*) &data)[0]);
 22469  006332  5003               	movf	ETH_Write16@data,w,c
 22470  006334  ECF3  F032         	call	_SPI_ExchangeByte
 22471  006338  868A               	bsf	3978,3,c	;volatile
 22472  00633A  0012               	return		;funcret
 22473  00633C                     __end_of_ETH_Write16:
 22474                           	opt stack 0
 22475  00633C                     PL406:
 22476                           	opt stack 21
 22477  00633C  0101               	movlb	1	; () banked
 22478  00633E  279E               	addwf	_TXPacketSize& (0+255),f,b
 22479  006340  0E00               	movlw	0
 22480  006342  239F               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 22481  006344  0C2A               	retlw	42
 22482  006346                     __end_ofPL406:
 22483                           	opt stack 0
 22484                           tosu	equ	0xFFF
 22485                           tosh	equ	0xFFE
 22486                           tosl	equ	0xFFD
 22487                           pclath	equ	0xFFA
 22488                           tblptru	equ	0xFF8
 22489                           tblptrh	equ	0xFF7
 22490                           tblptrl	equ	0xFF6
 22491                           tablat	equ	0xFF5
 22492                           prodh	equ	0xFF4
 22493                           prodl	equ	0xFF3
 22494                           intcon	equ	0xFF2
 22495                           intcon2	equ	0xFF1
 22496                           indf0	equ	0xFEF
 22497                           postinc0	equ	0xFEE
 22498                           fsr0h	equ	0xFEA
 22499                           fsr0l	equ	0xFE9
 22500                           wreg	equ	0xFE8
 22501                           postinc1	equ	0xFE6
 22502                           plusw1	equ	0xFE3
 22503                           fsr1h	equ	0xFE2
 22504                           fsr1l	equ	0xFE1
 22505                           bsr	equ	0xFE0
 22506                           indf2	equ	0xFDF
 22507                           postinc2	equ	0xFDE
 22508                           postdec2	equ	0xFDD
 22509                           plusw2	equ	0xFDB
 22510                           fsr2h	equ	0xFDA
 22511                           fsr2l	equ	0xFD9
 22512                           status	equ	0xFD8
 22513                           
 22514 ;; *************** function _ETH_GetMAC *****************
 22515 ;; Defined at:
 22516 ;;		line 456 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 22517 ;; Parameters:    Size  Location     Type
 22518 ;;  macAddr         2    7[COMRAM] PTR unsigned char 
 22519 ;;		 -> DHCP_Handler@ethMAC(6), DHCP_Request@ethMAC(6), ARPV4_Request@header(28), header.sha(6), 
 22520 ;;		 -> ARPV4_Packet@header(28), ethMAC(6), 
 22521 ;; Auto vars:     Size  Location     Type
 22522 ;;		None
 22523 ;; Return value:  Size  Location     Type
 22524 ;;		None               void
 22525 ;; Registers used:
 22526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22527 ;; Tracked objects:
 22528 ;;		On entry : 0/0
 22529 ;;		On exit  : 0/0
 22530 ;;		Unchanged: 0/0
 22531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22536 ;;Total ram usage:        2 bytes
 22537 ;; Hardware stack levels used:    1
 22538 ;; Hardware stack levels required when called:    6
 22539 ;; This function calls:
 22540 ;;		_ETH_MACRead8
 22541 ;; This function is called by:
 22542 ;;		_ETH_Init
 22543 ;;		_ARPV4_Packet
 22544 ;;		_ARPV4_Request
 22545 ;;		_DHCP_Request
 22546 ;;		_DHCP_Handler
 22547 ;; This function uses a non-reentrant model
 22548 ;;
 22549                           
 22550                           	psect	text94
 22551  0059F8                     __ptext94:
 22552                           	opt stack 0
 22553  0059F8                     _ETH_GetMAC:
 22554                           	opt stack 18
 22555                           
 22556                           ;encX24J600_driver.c: 459: *macAddr++ = ETH_MACRead8(XJ600_MAADR1L);
 22557                           
 22558                           ;incstack = 0
 22559  0059F8  0E64               	movlw	100
 22560  0059FA  EC08  F030         	call	_ETH_MACRead8
 22561  0059FE  D821               	call	PL222	;call to abstracted procedure
 22562  005A00  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22563  005A02  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22564                           
 22565                           ;encX24J600_driver.c: 460: *macAddr++ = ETH_MACRead8(XJ600_MAADR1H);
 22566  005A04  0E65               	movlw	101
 22567  005A06  EC08  F030         	call	_ETH_MACRead8
 22568  005A0A  D81B               	call	PL222	;call to abstracted procedure
 22569  005A0C  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22570  005A0E  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22571                           
 22572                           ;encX24J600_driver.c: 461: *macAddr++ = ETH_MACRead8(XJ600_MAADR2L);
 22573  005A10  0E62               	movlw	98
 22574  005A12  EC08  F030         	call	_ETH_MACRead8
 22575  005A16  D815               	call	PL222	;call to abstracted procedure
 22576  005A18  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22577  005A1A  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22578                           
 22579                           ;encX24J600_driver.c: 462: *macAddr++ = ETH_MACRead8(XJ600_MAADR2H);
 22580  005A1C  0E63               	movlw	99
 22581  005A1E  EC08  F030         	call	_ETH_MACRead8
 22582  005A22  D80F               	call	PL222	;call to abstracted procedure
 22583  005A24  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22584  005A26  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22585                           
 22586                           ;encX24J600_driver.c: 463: *macAddr++ = ETH_MACRead8(XJ600_MAADR3L);
 22587  005A28  0E60               	movlw	96
 22588  005A2A  EC08  F030         	call	_ETH_MACRead8
 22589  005A2E  D809               	call	PL222	;call to abstracted procedure
 22590  005A30  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22591  005A32  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22592                           
 22593                           ;encX24J600_driver.c: 464: *macAddr++ = ETH_MACRead8(XJ600_MAADR3H);
 22594  005A34  0E61               	movlw	97
 22595  005A36  EC08  F030         	call	_ETH_MACRead8
 22596  005A3A  D803               	call	PL222	;call to abstracted procedure
 22597  005A3C  4A08               	infsnz	ETH_GetMAC@macAddr,f,c
 22598  005A3E  2A09               	incf	ETH_GetMAC@macAddr+1,f,c
 22599  005A40  0012               	return		;funcret
 22600  005A42                     __end_of_ETH_GetMAC:
 22601                           	opt stack 0
 22602  005A42                     PL222:
 22603                           	opt stack 18
 22604  005A42  C008  FFD9         	movff	ETH_GetMAC@macAddr,fsr2l
 22605  005A46  C009  FFDA         	movff	ETH_GetMAC@macAddr+1,fsr2h
 22606  005A4A  6EDF               	movwf	indf2,c
 22607  005A4C  0012               	return	
 22608  005A4E                     __end_ofPL222:
 22609                           	opt stack 0
 22610                           tosu	equ	0xFFF
 22611                           tosh	equ	0xFFE
 22612                           tosl	equ	0xFFD
 22613                           pclath	equ	0xFFA
 22614                           tblptru	equ	0xFF8
 22615                           tblptrh	equ	0xFF7
 22616                           tblptrl	equ	0xFF6
 22617                           tablat	equ	0xFF5
 22618                           prodh	equ	0xFF4
 22619                           prodl	equ	0xFF3
 22620                           intcon	equ	0xFF2
 22621                           intcon2	equ	0xFF1
 22622                           indf0	equ	0xFEF
 22623                           postinc0	equ	0xFEE
 22624                           fsr0h	equ	0xFEA
 22625                           fsr0l	equ	0xFE9
 22626                           wreg	equ	0xFE8
 22627                           postinc1	equ	0xFE6
 22628                           plusw1	equ	0xFE3
 22629                           fsr1h	equ	0xFE2
 22630                           fsr1l	equ	0xFE1
 22631                           bsr	equ	0xFE0
 22632                           indf2	equ	0xFDF
 22633                           postinc2	equ	0xFDE
 22634                           postdec2	equ	0xFDD
 22635                           plusw2	equ	0xFDB
 22636                           fsr2h	equ	0xFDA
 22637                           fsr2l	equ	0xFD9
 22638                           status	equ	0xFD8
 22639                           
 22640 ;; *************** function _ETH_MACRead8 *****************
 22641 ;; Defined at:
 22642 ;;		line 504 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 22643 ;; Parameters:    Size  Location     Type
 22644 ;;  a               1    wreg     enum E6725
 22645 ;; Auto vars:     Size  Location     Type
 22646 ;;  a               1    6[COMRAM] enum E6725
 22647 ;;  bank            1    5[COMRAM] unsigned char 
 22648 ;;  v               1    4[COMRAM] unsigned char 
 22649 ;; Return value:  Size  Location     Type
 22650 ;;                  1    wreg      unsigned char 
 22651 ;; Registers used:
 22652 ;;		wreg, status,2, status,0, cstack
 22653 ;; Tracked objects:
 22654 ;;		On entry : 0/0
 22655 ;;		On exit  : 0/0
 22656 ;;		Unchanged: 0/0
 22657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22662 ;;Total ram usage:        3 bytes
 22663 ;; Hardware stack levels used:    1
 22664 ;; Hardware stack levels required when called:    5
 22665 ;; This function calls:
 22666 ;;		_ENCx24_BankselSPI
 22667 ;;		_SPI_ExchangeByte
 22668 ;; This function is called by:
 22669 ;;		_ETH_GetMAC
 22670 ;; This function uses a non-reentrant model
 22671 ;;
 22672                           
 22673                           	psect	text95
 22674  006010                     __ptext95:
 22675                           	opt stack 0
 22676  006010                     _ETH_MACRead8:
 22677                           	opt stack 18
 22678                           
 22679                           ;incstack = 0
 22680                           ;ETH_MACRead8@a stored from wreg
 22681  006010  6E07               	movwf	ETH_MACRead8@a,c
 22682                           
 22683                           ;encX24j600_spi.c: 506: uint8_t v;
 22684                           ;encX24j600_spi.c: 507: uint8_t bank;
 22685                           ;encX24j600_spi.c: 509: bank = a & 0xE0;
 22686  006012  5007               	movf	ETH_MACRead8@a,w,c
 22687  006014  0BE0               	andlw	224
 22688  006016  6E06               	movwf	ETH_MACRead8@bank,c
 22689                           
 22690                           ;encX24j600_spi.c: 510: if(bank != 0X80)
 22691  006018  0E80               	movlw	128
 22692  00601A  1806               	xorwf	ETH_MACRead8@bank,w,c
 22693  00601C  E009               	bz	l739
 22694                           
 22695                           ;encX24j600_spi.c: 511: {
 22696                           ;encX24j600_spi.c: 512: ENCx24_BankselSPI(a);
 22697  00601E  5007               	movf	ETH_MACRead8@a,w,c
 22698  006020  EC27  F02D         	call	_ENCx24_BankselSPI
 22699  006024  968A               	bcf	3978,3,c	;volatile
 22700                           
 22701                           ;encX24j600_spi.c: 514: SPI_ExchangeByte(rcr_inst| (a & 0x1F));
 22702  006026  5007               	movf	ETH_MACRead8@a,w,c
 22703  006028  0B1F               	andlw	31
 22704  00602A  ECF3  F032         	call	_SPI_ExchangeByte
 22705                           
 22706                           ;encX24j600_spi.c: 515: }
 22707  00602E  D007               	goto	l738
 22708  006030                     l739:
 22709  006030  968A               	bcf	3978,3,c	;volatile
 22710                           
 22711                           ;encX24j600_spi.c: 519: SPI_ExchangeByte(rcru_inst);
 22712  006032  0E20               	movlw	32
 22713  006034  ECF3  F032         	call	_SPI_ExchangeByte
 22714                           
 22715                           ;encX24j600_spi.c: 520: SPI_ExchangeByte(a);
 22716  006038  5007               	movf	ETH_MACRead8@a,w,c
 22717  00603A  ECF3  F032         	call	_SPI_ExchangeByte
 22718  00603E                     l738:
 22719                           
 22720                           ;encX24j600_spi.c: 521: }
 22721                           ;encX24j600_spi.c: 522: v = SPI_ExchangeByte(0);
 22722  00603E  0E00               	movlw	0
 22723  006040  ECF3  F032         	call	_SPI_ExchangeByte
 22724  006044  6E05               	movwf	ETH_MACRead8@v,c
 22725  006046  868A               	bsf	3978,3,c	;volatile
 22726                           
 22727                           ;encX24j600_spi.c: 525: return v;
 22728  006048  5005               	movf	ETH_MACRead8@v,w,c
 22729  00604A  0012               	return		;funcret
 22730  00604C                     __end_of_ETH_MACRead8:
 22731                           	opt stack 0
 22732                           tosu	equ	0xFFF
 22733                           tosh	equ	0xFFE
 22734                           tosl	equ	0xFFD
 22735                           pclath	equ	0xFFA
 22736                           tblptru	equ	0xFF8
 22737                           tblptrh	equ	0xFF7
 22738                           tblptrl	equ	0xFF6
 22739                           tablat	equ	0xFF5
 22740                           prodh	equ	0xFF4
 22741                           prodl	equ	0xFF3
 22742                           intcon	equ	0xFF2
 22743                           intcon2	equ	0xFF1
 22744                           indf0	equ	0xFEF
 22745                           postinc0	equ	0xFEE
 22746                           fsr0h	equ	0xFEA
 22747                           fsr0l	equ	0xFE9
 22748                           wreg	equ	0xFE8
 22749                           postinc1	equ	0xFE6
 22750                           plusw1	equ	0xFE3
 22751                           fsr1h	equ	0xFE2
 22752                           fsr1l	equ	0xFE1
 22753                           bsr	equ	0xFE0
 22754                           indf2	equ	0xFDF
 22755                           postinc2	equ	0xFDE
 22756                           postdec2	equ	0xFDD
 22757                           plusw2	equ	0xFDB
 22758                           fsr2h	equ	0xFDA
 22759                           fsr2l	equ	0xFD9
 22760                           status	equ	0xFD8
 22761                           
 22762 ;; *************** function _ARPV4_Lookup *****************
 22763 ;; Defined at:
 22764 ;;		line 234 in file "../../TCPIP Library/source/arpv4.c"
 22765 ;; Parameters:    Size  Location     Type
 22766 ;;  ip_address      4    1[COMRAM] unsigned long 
 22767 ;; Auto vars:     Size  Location     Type
 22768 ;;  entry_pointe    2    9[COMRAM] PTR struct .
 22769 ;;		 -> arpMap(104), 
 22770 ;;  x               1   11[COMRAM] unsigned char 
 22771 ;; Return value:  Size  Location     Type
 22772 ;;                  2    1[COMRAM] PTR struct .
 22773 ;; Registers used:
 22774 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22775 ;; Tracked objects:
 22776 ;;		On entry : F/1
 22777 ;;		On exit  : F/1
 22778 ;;		Unchanged: F/0
 22779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22780 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22781 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22782 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22784 ;;Total ram usage:       11 bytes
 22785 ;; Hardware stack levels used:    1
 22786 ;; Hardware stack levels required when called:    3
 22787 ;; This function calls:
 22788 ;;		Nothing
 22789 ;; This function is called by:
 22790 ;;		_IPv4_Start
 22791 ;; This function uses a non-reentrant model
 22792 ;;
 22793                           
 22794                           	psect	text96
 22795  005C42                     __ptext96:
 22796                           	opt stack 0
 22797  005C42                     _ARPV4_Lookup:
 22798                           	opt stack 22
 22799                           
 22800                           ; BSR set to: 1
 22801                           ;arpv4.c: 236: arpMap_t *entry_pointer = arpMap;
 22802                           
 22803                           ;incstack = 0
 22804  005C42  0E2E               	movlw	low _arpMap
 22805  005C44  6E0A               	movwf	ARPV4_Lookup@entry_pointer,c
 22806  005C46  0E02               	movlw	high _arpMap
 22807  005C48  6E0B               	movwf	ARPV4_Lookup@entry_pointer+1,c
 22808                           
 22809                           ; BSR set to: 1
 22810                           ;arpv4.c: 237: uint8_t x;
 22811                           ;arpv4.c: 239: for(x = 0; x < 8; x++)
 22812  005C4A  6A0C               	clrf	ARPV4_Lookup@x,c
 22813  005C4C                     l8270:
 22814                           
 22815                           ; BSR set to: 1
 22816                           ;arpv4.c: 240: {
 22817                           ;arpv4.c: 241: if(entry_pointer->ipAddress == ip_address)
 22818  005C4C  EE20 F006          	lfsr	2,6
 22819  005C50  500A               	movf	ARPV4_Lookup@entry_pointer,w,c
 22820  005C52  26D9               	addwf	fsr2l,f,c
 22821  005C54  500B               	movf	ARPV4_Lookup@entry_pointer+1,w,c
 22822  005C56  22DA               	addwfc	fsr2h,f,c
 22823  005C58  5002               	movf	ARPV4_Lookup@ip_address,w,c
 22824  005C5A  18DE               	xorwf	postinc2,w,c
 22825  005C5C  E10E               	bnz	l8276
 22826  005C5E  5003               	movf	ARPV4_Lookup@ip_address+1,w,c
 22827  005C60  18DE               	xorwf	postinc2,w,c
 22828  005C62  E10B               	bnz	l8276
 22829  005C64  5004               	movf	ARPV4_Lookup@ip_address+2,w,c
 22830  005C66  18DE               	xorwf	postinc2,w,c
 22831  005C68  E108               	bnz	l8276
 22832  005C6A  5005               	movf	ARPV4_Lookup@ip_address+3,w,c
 22833  005C6C  18DE               	xorwf	postinc2,w,c
 22834  005C6E  E105               	bnz	l8276
 22835                           
 22836                           ; BSR set to: 1
 22837                           ;arpv4.c: 242: return &entry_pointer->macAddress;
 22838  005C70  C00A  F002         	movff	ARPV4_Lookup@entry_pointer,?_ARPV4_Lookup
 22839  005C74  C00B  F003         	movff	ARPV4_Lookup@entry_pointer+1,?_ARPV4_Lookup+1
 22840  005C78  0012               	return	
 22841  005C7A                     l8276:
 22842                           
 22843                           ; BSR set to: 1
 22844                           ;arpv4.c: 243: entry_pointer ++;
 22845  005C7A  0E0D               	movlw	13
 22846  005C7C  260A               	addwf	ARPV4_Lookup@entry_pointer,f,c
 22847  005C7E  0E00               	movlw	0
 22848  005C80  220B               	addwfc	ARPV4_Lookup@entry_pointer+1,f,c
 22849                           
 22850                           ; BSR set to: 1
 22851  005C82  2A0C               	incf	ARPV4_Lookup@x,f,c
 22852                           
 22853                           ; BSR set to: 1
 22854  005C84  0E07               	movlw	7
 22855  005C86  640C               	cpfsgt	ARPV4_Lookup@x,c
 22856  005C88  D7E1               	goto	l8270
 22857                           
 22858                           ; BSR set to: 1
 22859                           ;arpv4.c: 244: }
 22860                           ;arpv4.c: 245: return 0;
 22861  005C8A  6A02               	clrf	?_ARPV4_Lookup,c
 22862  005C8C  6A03               	clrf	?_ARPV4_Lookup+1,c
 22863                           
 22864                           ; BSR set to: 1
 22865  005C8E  0012               	return		;funcret
 22866  005C90                     __end_of_ARPV4_Lookup:
 22867                           	opt stack 0
 22868                           tosu	equ	0xFFF
 22869                           tosh	equ	0xFFE
 22870                           tosl	equ	0xFFD
 22871                           pclath	equ	0xFFA
 22872                           tblptru	equ	0xFF8
 22873                           tblptrh	equ	0xFF7
 22874                           tblptrl	equ	0xFF6
 22875                           tablat	equ	0xFF5
 22876                           prodh	equ	0xFF4
 22877                           prodl	equ	0xFF3
 22878                           intcon	equ	0xFF2
 22879                           intcon2	equ	0xFF1
 22880                           indf0	equ	0xFEF
 22881                           postinc0	equ	0xFEE
 22882                           fsr0h	equ	0xFEA
 22883                           fsr0l	equ	0xFE9
 22884                           wreg	equ	0xFE8
 22885                           postinc1	equ	0xFE6
 22886                           plusw1	equ	0xFE3
 22887                           fsr1h	equ	0xFE2
 22888                           fsr1l	equ	0xFE1
 22889                           bsr	equ	0xFE0
 22890                           indf2	equ	0xFDF
 22891                           postinc2	equ	0xFDE
 22892                           postdec2	equ	0xFDD
 22893                           plusw2	equ	0xFDB
 22894                           fsr2h	equ	0xFDA
 22895                           fsr2l	equ	0xFD9
 22896                           status	equ	0xFD8
 22897                           
 22898 ;; *************** function _ETH_ResetByteCount *****************
 22899 ;; Defined at:
 22900 ;;		line 597 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 22901 ;; Parameters:    Size  Location     Type
 22902 ;;		None
 22903 ;; Auto vars:     Size  Location     Type
 22904 ;;		None
 22905 ;; Return value:  Size  Location     Type
 22906 ;;		None               void
 22907 ;; Registers used:
 22908 ;;		wreg, status,2, status,0, cstack
 22909 ;; Tracked objects:
 22910 ;;		On entry : F/0
 22911 ;;		On exit  : 0/0
 22912 ;;		Unchanged: 0/0
 22913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22918 ;;Total ram usage:        0 bytes
 22919 ;; Hardware stack levels used:    1
 22920 ;; Hardware stack levels required when called:    6
 22921 ;; This function calls:
 22922 ;;		_ENCx24_Read
 22923 ;; This function is called by:
 22924 ;;		_UDP_Start
 22925 ;; This function uses a non-reentrant model
 22926 ;;
 22927                           
 22928                           	psect	text97
 22929  00659E                     __ptext97:
 22930                           	opt stack 0
 22931  00659E                     _ETH_ResetByteCount:
 22932                           	opt stack 17
 22933                           
 22934                           ; BSR set to: 0
 22935                           ;encX24J600_driver.c: 599: ethData.saveWRPT = ENCx24_Read(XJ600_EGPWRPTL);
 22936                           
 22937                           ; BSR set to: 1
 22938                           ;incstack = 0
 22939  00659E  0E88               	movlw	136
 22940  0065A0  EC04  F02F         	call	_ENCx24_Read
 22941  0065A4  C005  F188         	movff	?_ENCx24_Read,_ethData+5	;volatile
 22942  0065A8  C006  F189         	movff	?_ENCx24_Read+1,_ethData+6	;volatile
 22943  0065AC  0012               	return		;funcret
 22944  0065AE                     __end_of_ETH_ResetByteCount:
 22945                           	opt stack 0
 22946                           tosu	equ	0xFFF
 22947                           tosh	equ	0xFFE
 22948                           tosl	equ	0xFFD
 22949                           pclath	equ	0xFFA
 22950                           tblptru	equ	0xFF8
 22951                           tblptrh	equ	0xFF7
 22952                           tblptrl	equ	0xFF6
 22953                           tablat	equ	0xFF5
 22954                           prodh	equ	0xFF4
 22955                           prodl	equ	0xFF3
 22956                           intcon	equ	0xFF2
 22957                           intcon2	equ	0xFF1
 22958                           indf0	equ	0xFEF
 22959                           postinc0	equ	0xFEE
 22960                           fsr0h	equ	0xFEA
 22961                           fsr0l	equ	0xFE9
 22962                           wreg	equ	0xFE8
 22963                           postinc1	equ	0xFE6
 22964                           plusw1	equ	0xFE3
 22965                           fsr1h	equ	0xFE2
 22966                           fsr1l	equ	0xFE1
 22967                           bsr	equ	0xFE0
 22968                           indf2	equ	0xFDF
 22969                           postinc2	equ	0xFDE
 22970                           postdec2	equ	0xFDD
 22971                           plusw2	equ	0xFDB
 22972                           fsr2h	equ	0xFDA
 22973                           fsr2l	equ	0xFD9
 22974                           status	equ	0xFD8
 22975                           
 22976 ;; *************** function _UDP_Send *****************
 22977 ;; Defined at:
 22978 ;;		line 99 in file "../../TCPIP Library/source/udpv4.c"
 22979 ;; Parameters:    Size  Location     Type
 22980 ;;		None
 22981 ;; Auto vars:     Size  Location     Type
 22982 ;;  udpLength       2   46[COMRAM] unsigned int 
 22983 ;;  cksm            2   44[COMRAM] unsigned int 
 22984 ;;  ret             1    0        enum E367
 22985 ;; Return value:  Size  Location     Type
 22986 ;;                  1    wreg      enum E449
 22987 ;; Registers used:
 22988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22989 ;; Tracked objects:
 22990 ;;		On entry : 0/0
 22991 ;;		On exit  : F/1
 22992 ;;		Unchanged: 0/0
 22993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22995 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22997 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22998 ;;Total ram usage:        9 bytes
 22999 ;; Hardware stack levels used:    1
 23000 ;; Hardware stack levels required when called:    9
 23001 ;; This function calls:
 23002 ;;		_ETH_GetByteCount
 23003 ;;		_ETH_Insert
 23004 ;;		_ETH_TxComputeChecksum
 23005 ;;		_IPV4_Send
 23006 ;; This function is called by:
 23007 ;;		_DHCP_Request
 23008 ;;		_DEMO_UDP_Recv
 23009 ;;		_DEMO_UDP_Send
 23010 ;; This function uses a non-reentrant model
 23011 ;;
 23012                           
 23013                           	psect	text98
 23014  0057C6                     __ptext98:
 23015                           	opt stack 0
 23016  0057C6                     _UDP_Send:
 23017                           	opt stack 15
 23018                           
 23019                           ;udpv4.c: 105: udpLength = ETH_GetByteCount();
 23020                           
 23021                           ;incstack = 0
 23022  0057C6  EC15  F032         	call	_ETH_GetByteCount	;wreg free
 23023  0057CA  C00B  F02F         	movff	?_ETH_GetByteCount,UDP_Send@udpLength
 23024  0057CE  C00C  F030         	movff	?_ETH_GetByteCount+1,UDP_Send@udpLength+1
 23025                           
 23026                           ; BSR set to: 1
 23027                           ;udpv4.c: 106: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)udpLength & (uint16_t)0x00FF) << 8));
 23028  0057D2  D831               	call	PL276	;call to abstracted procedure
 23029                           
 23030                           ; BSR set to: 1
 23031                           ;udpv4.c: 107: ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4He
      +                          ader_t) + (int)(((char*)&((udpHeader_t *)1)->length)-1));
 23032  0057D4  ECC9  F02C         	call	PL300	;call to abstracted procedure
 23033  0057D8  0E26               	movlw	38
 23034  0057DA  6E0D               	movwf	ETH_Insert@offset,c
 23035  0057DC  0E2F               	movlw	UDP_Send@udpLength& (0+255)
 23036  0057DE  ECD0  F02D         	call	_ETH_Insert
 23037                           
 23038                           ;udpv4.c: 108: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)udpLength & (uint16_t)0x00FF) << 8));
 23039  0057E2  D829               	call	PL276	;call to abstracted procedure
 23040                           
 23041                           ;udpv4.c: 111: cksm = udpLength + UDP;
 23042  0057E4  0E11               	movlw	17
 23043  0057E6  242F               	addwf	UDP_Send@udpLength,w,c
 23044  0057E8  6E2D               	movwf	UDP_Send@cksm,c
 23045  0057EA  0E00               	movlw	0
 23046  0057EC  2030               	addwfc	UDP_Send@udpLength+1,w,c
 23047  0057EE  6E2E               	movwf	UDP_Send@cksm+1,c
 23048                           
 23049                           ;udpv4.c: 112: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) - 8, udpLength + 8, cksm);
 23050  0057F0  EC3F  F016         	call	PL454	;call to abstracted procedure
 23051  0057F4  242F               	addwf	UDP_Send@udpLength,w,c
 23052  0057F6  6E0F               	movwf	ETH_TxComputeChecksum@length,c
 23053  0057F8  0E00               	movlw	0
 23054  0057FA  2030               	addwfc	UDP_Send@udpLength+1,w,c
 23055  0057FC  6E10               	movwf	ETH_TxComputeChecksum@length+1,c
 23056  0057FE  C02D  F011         	movff	UDP_Send@cksm,ETH_TxComputeChecksum@seed
 23057  005802  C02E  F012         	movff	UDP_Send@cksm+1,ETH_TxComputeChecksum@seed+1
 23058  005806  EC71  F029         	call	_ETH_TxComputeChecksum	;wreg free
 23059  00580A  C00D  F02D         	movff	?_ETH_TxComputeChecksum,UDP_Send@cksm
 23060  00580E  C00E  F02E         	movff	?_ETH_TxComputeChecksum+1,UDP_Send@cksm+1
 23061                           
 23062                           ;udpv4.c: 115: if (cksm == 0){
 23063  005812  502D               	movf	UDP_Send@cksm,w,c
 23064  005814  102E               	iorwf	UDP_Send@cksm+1,w,c
 23065  005816  E102               	bnz	l8466
 23066                           
 23067                           ;udpv4.c: 116: cksm = 0xffff;
 23068  005818  682D               	setf	UDP_Send@cksm,c
 23069  00581A  682E               	setf	UDP_Send@cksm+1,c
 23070  00581C                     l8466:
 23071                           
 23072                           ;udpv4.c: 117: }
 23073                           ;udpv4.c: 119: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) + (int)(((char*)&((udpHeader_t *)1)->checksum)-1));
 23074  00581C  ECC9  F02C         	call	PL300	;call to abstracted procedure
 23075  005820  0E28               	movlw	40
 23076  005822  6E0D               	movwf	ETH_Insert@offset,c
 23077  005824  0E2D               	movlw	UDP_Send@cksm& (0+255)
 23078  005826  ECD0  F02D         	call	_ETH_Insert
 23079  00582A  C02F  F01D         	movff	UDP_Send@udpLength,IPV4_Send@payloadLength
 23080  00582E  C030  F01E         	movff	UDP_Send@udpLength+1,IPV4_Send@payloadLength+1
 23081  005832  EF98  F02C         	goto	_IPV4_Send	;wreg free
 23082  005836                     __end_of_UDP_Send:
 23083                           	opt stack 0
 23084  005836                     PL276:
 23085                           	opt stack 15
 23086  005836  502F               	movf	UDP_Send@udpLength,w,c
 23087  005838  6E29               	movwf	(??_UDP_Send+1)& (0+255),c
 23088  00583A  6A28               	clrf	??_UDP_Send& (0+255),c
 23089  00583C  5030               	movf	UDP_Send@udpLength+1,w,c
 23090  00583E  6E2A               	movwf	(??_UDP_Send+2)& (0+255),c
 23091  005840  6A2B               	clrf	(??_UDP_Send+3)& (0+255),c
 23092  005842  5028               	movf	??_UDP_Send,w,c
 23093  005844  102A               	iorwf	??_UDP_Send+2,w,c
 23094  005846  6E2F               	movwf	UDP_Send@udpLength,c
 23095  005848  5029               	movf	??_UDP_Send+1,w,c
 23096  00584A  102B               	iorwf	??_UDP_Send+3,w,c
 23097  00584C  6E30               	movwf	UDP_Send@udpLength+1,c
 23098  00584E  0012               	return	
 23099  005850                     __end_ofPL276:
 23100                           	opt stack 0
 23101                           tosu	equ	0xFFF
 23102                           tosh	equ	0xFFE
 23103                           tosl	equ	0xFFD
 23104                           pclath	equ	0xFFA
 23105                           tblptru	equ	0xFF8
 23106                           tblptrh	equ	0xFF7
 23107                           tblptrl	equ	0xFF6
 23108                           tablat	equ	0xFF5
 23109                           prodh	equ	0xFF4
 23110                           prodl	equ	0xFF3
 23111                           intcon	equ	0xFF2
 23112                           intcon2	equ	0xFF1
 23113                           indf0	equ	0xFEF
 23114                           postinc0	equ	0xFEE
 23115                           fsr0h	equ	0xFEA
 23116                           fsr0l	equ	0xFE9
 23117                           wreg	equ	0xFE8
 23118                           postinc1	equ	0xFE6
 23119                           plusw1	equ	0xFE3
 23120                           fsr1h	equ	0xFE2
 23121                           fsr1l	equ	0xFE1
 23122                           bsr	equ	0xFE0
 23123                           indf2	equ	0xFDF
 23124                           postinc2	equ	0xFDE
 23125                           postdec2	equ	0xFDD
 23126                           plusw2	equ	0xFDB
 23127                           fsr2h	equ	0xFDA
 23128                           fsr2l	equ	0xFD9
 23129                           status	equ	0xFD8
 23130                           
 23131 ;; *************** function _IPV4_Send *****************
 23132 ;; Defined at:
 23133 ;;		line 267 in file "../../TCPIP Library/source/ipv4.c"
 23134 ;; Parameters:    Size  Location     Type
 23135 ;;  payloadLengt    2   28[COMRAM] unsigned int 
 23136 ;; Auto vars:     Size  Location     Type
 23137 ;;  totalLength     2   37[COMRAM] unsigned int 
 23138 ;;  cksm            2   35[COMRAM] unsigned int 
 23139 ;;  ret             1   34[COMRAM] enum E6944
 23140 ;; Return value:  Size  Location     Type
 23141 ;;                  1    wreg      enum E366
 23142 ;; Registers used:
 23143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23144 ;; Tracked objects:
 23145 ;;		On entry : 0/0
 23146 ;;		On exit  : F/1
 23147 ;;		Unchanged: 0/0
 23148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23149 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23150 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23152 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23153 ;;Total ram usage:       11 bytes
 23154 ;; Hardware stack levels used:    1
 23155 ;; Hardware stack levels required when called:    8
 23156 ;; This function calls:
 23157 ;;		_ETH_Insert
 23158 ;;		_ETH_Send
 23159 ;;		_ETH_TxComputeChecksum
 23160 ;; This function is called by:
 23161 ;;		_ICMP_EchoReply
 23162 ;;		_TCP_Snd
 23163 ;;		_UDP_Send
 23164 ;; This function uses a non-reentrant model
 23165 ;;
 23166                           
 23167                           	psect	text99
 23168  005930                     __ptext99:
 23169                           	opt stack 0
 23170  005930                     _IPV4_Send:
 23171                           	opt stack 18
 23172                           
 23173                           ;ipv4.c: 269: uint16_t totalLength;
 23174                           ;ipv4.c: 270: uint16_t cksm;
 23175                           ;ipv4.c: 271: error_msg ret;
 23176                           ;ipv4.c: 273: totalLength = 20 + payloadLength;
 23177                           
 23178                           ; BSR set to: 1
 23179                           ;incstack = 0
 23180  005930  0E14               	movlw	20
 23181  005932  241D               	addwf	IPV4_Send@payloadLength,w,c
 23182  005934  6E26               	movwf	IPV4_Send@totalLength,c
 23183  005936  0E00               	movlw	0
 23184  005938  201E               	addwfc	IPV4_Send@payloadLength+1,w,c
 23185  00593A  6E27               	movwf	IPV4_Send@totalLength+1,c
 23186                           
 23187                           ;ipv4.c: 274: totalLength = ((((uint16_t)totalLength & (uint16_t)0xFF00) >> 8) | (((uint
      +                          16_t)totalLength & (uint16_t)0x00FF) << 8));
 23188  00593C  5026               	movf	IPV4_Send@totalLength,w,c
 23189  00593E  6E20               	movwf	(??_IPV4_Send+1)& (0+255),c
 23190  005940  6A1F               	clrf	??_IPV4_Send& (0+255),c
 23191  005942  5027               	movf	IPV4_Send@totalLength+1,w,c
 23192  005944  6E21               	movwf	(??_IPV4_Send+2)& (0+255),c
 23193  005946  6A22               	clrf	(??_IPV4_Send+3)& (0+255),c
 23194  005948  501F               	movf	??_IPV4_Send,w,c
 23195  00594A  1021               	iorwf	??_IPV4_Send+2,w,c
 23196  00594C  6E26               	movwf	IPV4_Send@totalLength,c
 23197  00594E  5020               	movf	??_IPV4_Send+1,w,c
 23198  005950  1022               	iorwf	??_IPV4_Send+3,w,c
 23199  005952  6E27               	movwf	IPV4_Send@totalLength+1,c
 23200                           
 23201                           ;ipv4.c: 277: ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + (int)(((char
      +                          *)&((ipv4Header_t *)1)->length)-1));
 23202  005954  D81E               	call	PL300	;call to abstracted procedure
 23203  005956  0E10               	movlw	16
 23204  005958  6E0D               	movwf	ETH_Insert@offset,c
 23205  00595A  0E26               	movlw	IPV4_Send@totalLength& (0+255)
 23206  00595C  ECD0  F02D         	call	_ETH_Insert
 23207                           
 23208                           ;ipv4.c: 279: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t),sizeof(ipv4Header_t),
      +                          0);
 23209  005960  6A0E               	clrf	ETH_TxComputeChecksum@position+1,c
 23210  005962  0E0E               	movlw	14
 23211  005964  6E0D               	movwf	ETH_TxComputeChecksum@position,c
 23212  005966  6A10               	clrf	ETH_TxComputeChecksum@length+1,c
 23213  005968  0E14               	movlw	20
 23214  00596A  6E0F               	movwf	ETH_TxComputeChecksum@length,c
 23215  00596C  6A12               	clrf	ETH_TxComputeChecksum@seed+1,c
 23216  00596E  6A11               	clrf	ETH_TxComputeChecksum@seed,c
 23217  005970  EC71  F029         	call	_ETH_TxComputeChecksum	;wreg free
 23218  005974  C00D  F024         	movff	?_ETH_TxComputeChecksum,IPV4_Send@cksm
 23219  005978  C00E  F025         	movff	?_ETH_TxComputeChecksum+1,IPV4_Send@cksm+1
 23220                           
 23221                           ;ipv4.c: 281: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + (int)(((char*)&((ip
      +                          v4Header_t *)1)->headerCksm)-1));
 23222  00597C  D80A               	call	PL300	;call to abstracted procedure
 23223  00597E  0E18               	movlw	24
 23224  005980  6E0D               	movwf	ETH_Insert@offset,c
 23225  005982  0E24               	movlw	IPV4_Send@cksm& (0+255)
 23226  005984  ECD0  F02D         	call	_ETH_Insert
 23227                           
 23228                           ;ipv4.c: 282: ret = ETH_Send();
 23229  005988  ECC5  F031         	call	_ETH_Send	;wreg free
 23230  00598C  6E23               	movwf	IPV4_Send@ret,c
 23231                           
 23232                           ; BSR set to: 1
 23233                           ;ipv4.c: 284: return ret;
 23234  00598E  5023               	movf	IPV4_Send@ret,w,c
 23235                           
 23236                           ; BSR set to: 1
 23237  005990  0012               	return		;funcret
 23238  005992                     __end_of_IPV4_Send:
 23239                           	opt stack 0
 23240  005992                     PL300:
 23241                           	opt stack 15
 23242  005992  6A0C               	clrf	ETH_Insert@len+1,c
 23243  005994  0E02               	movlw	2
 23244  005996  6E0B               	movwf	ETH_Insert@len,c
 23245  005998  6A0E               	clrf	ETH_Insert@offset+1,c
 23246  00599A  0C02               	retlw	2
 23247  00599C                     __end_ofPL300:
 23248                           	opt stack 0
 23249                           tosu	equ	0xFFF
 23250                           tosh	equ	0xFFE
 23251                           tosl	equ	0xFFD
 23252                           pclath	equ	0xFFA
 23253                           tblptru	equ	0xFF8
 23254                           tblptrh	equ	0xFF7
 23255                           tblptrl	equ	0xFF6
 23256                           tablat	equ	0xFF5
 23257                           prodh	equ	0xFF4
 23258                           prodl	equ	0xFF3
 23259                           intcon	equ	0xFF2
 23260                           intcon2	equ	0xFF1
 23261                           indf0	equ	0xFEF
 23262                           postinc0	equ	0xFEE
 23263                           fsr0h	equ	0xFEA
 23264                           fsr0l	equ	0xFE9
 23265                           wreg	equ	0xFE8
 23266                           postinc1	equ	0xFE6
 23267                           plusw1	equ	0xFE3
 23268                           fsr1h	equ	0xFE2
 23269                           fsr1l	equ	0xFE1
 23270                           bsr	equ	0xFE0
 23271                           indf2	equ	0xFDF
 23272                           postinc2	equ	0xFDE
 23273                           postdec2	equ	0xFDD
 23274                           plusw2	equ	0xFDB
 23275                           fsr2h	equ	0xFDA
 23276                           fsr2l	equ	0xFD9
 23277                           status	equ	0xFD8
 23278                           
 23279 ;; *************** function _ETH_TxComputeChecksum *****************
 23280 ;; Defined at:
 23281 ;;		line 501 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 23282 ;; Parameters:    Size  Location     Type
 23283 ;;  position        2   12[COMRAM] unsigned int 
 23284 ;;  length          2   14[COMRAM] unsigned int 
 23285 ;;  seed            2   16[COMRAM] unsigned int 
 23286 ;; Auto vars:     Size  Location     Type
 23287 ;;  cksm            4   22[COMRAM] unsigned long 
 23288 ;;  econ1Val        2   26[COMRAM] unsigned int 
 23289 ;; Return value:  Size  Location     Type
 23290 ;;                  2   12[COMRAM] unsigned int 
 23291 ;; Registers used:
 23292 ;;		wreg, status,2, status,0, cstack
 23293 ;; Tracked objects:
 23294 ;;		On entry : 0/0
 23295 ;;		On exit  : 0/0
 23296 ;;		Unchanged: 0/0
 23297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23298 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23299 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23300 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23301 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23302 ;;Total ram usage:       16 bytes
 23303 ;; Hardware stack levels used:    1
 23304 ;; Hardware stack levels required when called:    7
 23305 ;; This function calls:
 23306 ;;		_ENCx24_BFC
 23307 ;;		_ENCx24_BFS
 23308 ;;		_ENCx24_Read
 23309 ;;		_ENCx24_Write
 23310 ;;		_waitForDMA
 23311 ;; This function is called by:
 23312 ;;		_ICMP_EchoReply
 23313 ;;		_IPV4_Send
 23314 ;;		_TCP_Snd
 23315 ;;		_UDP_Send
 23316 ;; This function uses a non-reentrant model
 23317 ;;
 23318                           
 23319                           	psect	text100
 23320  0052E2                     __ptext100:
 23321                           	opt stack 0
 23322  0052E2                     _ETH_TxComputeChecksum:
 23323                           	opt stack 0
 23324  0052E2                     i13L__ptext101:
 23325                           	opt stack 0
 23326  0052E2                     i13L_waitForDMA:
 23327                           	opt stack 0
 23328  0052E2                     i13Ll501:
 23329                           	opt stack 0
 23330  0052E2                     i13Ll8150:
 23331                           	opt stack 18
 23332                           
 23333                           ;encX24J600_driver.c: 487: {
 23334                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 23335  0052E2  0EFE               	movlw	254
 23336  0052E4  EC04  F02F         	call	_ENCx24_Read
 23337  0052E8  EC11  F029         	call	PL298	;call to abstracted procedure
 23338  0052EC                     i13Ll8152:
 23339                           	opt stack 18
 23340                           
 23341                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 23342  0052EC  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 23343  0052EE                     i13Lu10751:
 23344                           	opt stack 0
 23345  0052EE  D7F9               	goto	i13Ll501
 23346  0052F0                     i13Lu10750:
 23347                           	opt stack 0
 23348  0052F0                     i13Ll503:
 23349                           	opt stack 0
 23350                           
 23351                           ;encX24J600_driver.c: 515: ENCx24_BFC(XJ600_ECON1L, econ1Val);
 23352  0052F0  D848               	call	PL486	;call to abstracted procedure
 23353  0052F2  ECAA  F02F         	call	_ENCx24_BFC
 23354                           
 23355                           ;encX24J600_driver.c: 518: ENCx24_Write(XJ600_EDMASTL, position);
 23356  0052F6  C00D  F005         	movff	ETH_TxComputeChecksum@position,ENCx24_Write@data
 23357  0052FA  C00E  F006         	movff	ETH_TxComputeChecksum@position+1,ENCx24_Write@data+1
 23358  0052FE  0E0A               	movlw	10
 23359  005300  EC29  F02F         	call	_ENCx24_Write
 23360                           
 23361                           ;encX24J600_driver.c: 520: ENCx24_Write(XJ600_EDMALENL, length);
 23362  005304  C00F  F005         	movff	ETH_TxComputeChecksum@length,ENCx24_Write@data
 23363  005308  C010  F006         	movff	ETH_TxComputeChecksum@length+1,ENCx24_Write@data+1
 23364  00530C  0E0C               	movlw	12
 23365  00530E  EC29  F02F         	call	_ENCx24_Write
 23366                           
 23367                           ;encX24J600_driver.c: 522: econ1Val = 0x0020;
 23368  005312  6A1C               	clrf	ETH_TxComputeChecksum@econ1Val+1,c
 23369  005314  0E20               	movlw	32
 23370  005316  6E1B               	movwf	ETH_TxComputeChecksum@econ1Val,c
 23371                           
 23372                           ;encX24J600_driver.c: 524: if (seed)
 23373  005318  5011               	movf	ETH_TxComputeChecksum@seed,w,c
 23374  00531A  1012               	iorwf	ETH_TxComputeChecksum@seed+1,w,c
 23375  00531C  E016               	bz	l8176
 23376                           
 23377                           ;encX24J600_driver.c: 525: {
 23378                           ;encX24J600_driver.c: 526: econ1Val |= 0x0008;
 23379  00531E  861B               	bsf	ETH_TxComputeChecksum@econ1Val,3,c
 23380                           
 23381                           ;encX24J600_driver.c: 527: seed=~(seed);
 23382  005320  1E11               	comf	ETH_TxComputeChecksum@seed,f,c
 23383  005322  1E12               	comf	ETH_TxComputeChecksum@seed+1,f,c
 23384                           
 23385                           ;encX24J600_driver.c: 528: seed = ((((uint16_t)seed & (uint16_t)0xFF00) >> 8) | (((uint1
      +                          6_t)seed & (uint16_t)0x00FF) << 8));
 23386  005324  5011               	movf	ETH_TxComputeChecksum@seed,w,c
 23387  005326  6E14               	movwf	(??_ETH_TxComputeChecksum+1)& (0+255),c
 23388  005328  6A13               	clrf	??_ETH_TxComputeChecksum& (0+255),c
 23389  00532A  5012               	movf	ETH_TxComputeChecksum@seed+1,w,c
 23390  00532C  6E15               	movwf	(??_ETH_TxComputeChecksum+2)& (0+255),c
 23391  00532E  6A16               	clrf	(??_ETH_TxComputeChecksum+3)& (0+255),c
 23392  005330  5013               	movf	??_ETH_TxComputeChecksum,w,c
 23393  005332  1015               	iorwf	??_ETH_TxComputeChecksum+2,w,c
 23394  005334  6E11               	movwf	ETH_TxComputeChecksum@seed,c
 23395  005336  5014               	movf	??_ETH_TxComputeChecksum+1,w,c
 23396  005338  1016               	iorwf	??_ETH_TxComputeChecksum+3,w,c
 23397  00533A  6E12               	movwf	ETH_TxComputeChecksum@seed+1,c
 23398                           
 23399                           ;encX24J600_driver.c: 529: ENCx24_Write(XJ600_EDMACSL, seed);
 23400  00533C  C011  F005         	movff	ETH_TxComputeChecksum@seed,ENCx24_Write@data
 23401  005340  C012  F006         	movff	ETH_TxComputeChecksum@seed+1,ENCx24_Write@data+1
 23402  005344  0E10               	movlw	16
 23403  005346  EC29  F02F         	call	_ENCx24_Write
 23404  00534A                     l8176:
 23405                           
 23406                           ;encX24J600_driver.c: 530: }
 23407                           ;encX24J600_driver.c: 532: ENCx24_BFS(XJ600_ECON1L, econ1Val);
 23408  00534A  C01B  F005         	movff	ETH_TxComputeChecksum@econ1Val,ENCx24_BFS@bitMask
 23409  00534E  C01C  F006         	movff	ETH_TxComputeChecksum@econ1Val+1,ENCx24_BFS@bitMask+1
 23410  005352  0EFE               	movlw	254
 23411  005354  EC8A  F02F         	call	_ENCx24_BFS
 23412  005358                     i14L__ptext101:
 23413                           	opt stack 0
 23414  005358                     i14L_waitForDMA:
 23415                           	opt stack 0
 23416  005358                     i14Ll501:
 23417                           	opt stack 0
 23418  005358                     i14Ll8150:
 23419                           	opt stack 18
 23420                           
 23421                           ;encX24J600_driver.c: 487: {
 23422                           ;encX24J600_driver.c: 488: econ1_val = ENCx24_Read(XJ600_ECON1L);
 23423  005358  0EFE               	movlw	254
 23424  00535A  EC04  F02F         	call	_ENCx24_Read
 23425  00535E  EC11  F029         	call	PL298	;call to abstracted procedure
 23426  005362                     i14Ll8152:
 23427                           	opt stack 18
 23428                           
 23429                           ;encX24J600_driver.c: 489: } while ( econ1_val & 0x0020 );
 23430  005362  BA0B               	btfsc	waitForDMA@econ1_val,5,c
 23431  005364                     i14Lu10751:
 23432                           	opt stack 0
 23433  005364  D7F9               	goto	i14Ll501
 23434  005366                     i14Lu10750:
 23435                           	opt stack 0
 23436  005366                     i14Ll503:
 23437                           	opt stack 18
 23438                           
 23439                           ;encX24J600_driver.c: 535: cksm = ENCx24_Read(XJ600_EDMACSL);
 23440  005366  0E10               	movlw	16
 23441  005368  EC04  F02F         	call	_ENCx24_Read
 23442  00536C  C005  F017         	movff	?_ENCx24_Read,ETH_TxComputeChecksum@cksm
 23443  005370  C006  F018         	movff	?_ENCx24_Read+1,ETH_TxComputeChecksum@cksm+1
 23444  005374  6A19               	clrf	ETH_TxComputeChecksum@cksm+2,c
 23445  005376  6A1A               	clrf	ETH_TxComputeChecksum@cksm+3,c
 23446                           
 23447                           ;encX24J600_driver.c: 536: return cksm;
 23448  005378  C017  F00D         	movff	ETH_TxComputeChecksum@cksm,?_ETH_TxComputeChecksum
 23449  00537C  C018  F00E         	movff	ETH_TxComputeChecksum@cksm+1,?_ETH_TxComputeChecksum+1
 23450  005380  0012               	return		;funcret
 23451  005382                     __end_of_ETH_TxComputeChecksum:
 23452                           	opt stack 0
 23453  005382                     PL486:
 23454                           	opt stack 20
 23455  005382  6A06               	clrf	ENCx24_BFC@bitMask+1,c
 23456  005384  0E1C               	movlw	28
 23457  005386  6E05               	movwf	ENCx24_BFC@bitMask,c
 23458  005388  0CFE               	retlw	254
 23459  00538A                     __end_ofPL486:
 23460                           	opt stack 0
 23461                           tosu	equ	0xFFF
 23462                           tosh	equ	0xFFE
 23463                           tosl	equ	0xFFD
 23464                           pclath	equ	0xFFA
 23465                           tblptru	equ	0xFF8
 23466                           tblptrh	equ	0xFF7
 23467                           tblptrl	equ	0xFF6
 23468                           tablat	equ	0xFF5
 23469                           prodh	equ	0xFF4
 23470                           prodl	equ	0xFF3
 23471                           intcon	equ	0xFF2
 23472                           intcon2	equ	0xFF1
 23473                           indf0	equ	0xFEF
 23474                           postinc0	equ	0xFEE
 23475                           fsr0h	equ	0xFEA
 23476                           fsr0l	equ	0xFE9
 23477                           wreg	equ	0xFE8
 23478                           postinc1	equ	0xFE6
 23479                           plusw1	equ	0xFE3
 23480                           fsr1h	equ	0xFE2
 23481                           fsr1l	equ	0xFE1
 23482                           bsr	equ	0xFE0
 23483                           indf2	equ	0xFDF
 23484                           postinc2	equ	0xFDE
 23485                           postdec2	equ	0xFDD
 23486                           plusw2	equ	0xFDB
 23487                           fsr2h	equ	0xFDA
 23488                           fsr2l	equ	0xFD9
 23489                           status	equ	0xFD8
 23490                           
 23491 ;; *************** function _waitForDMA *****************
 23492 ;; Defined at:
 23493 ;;		line 483 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 23494 ;; Parameters:    Size  Location     Type
 23495 ;;		None
 23496 ;; Auto vars:     Size  Location     Type
 23497 ;;  econ1_val       2   10[COMRAM] unsigned int 
 23498 ;; Return value:  Size  Location     Type
 23499 ;;		None               void
 23500 ;; Registers used:
 23501 ;;		wreg, status,2, status,0, cstack
 23502 ;; Tracked objects:
 23503 ;;		On entry : 0/0
 23504 ;;		On exit  : 0/0
 23505 ;;		Unchanged: 0/0
 23506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23511 ;;Total ram usage:        2 bytes
 23512 ;; Hardware stack levels used:    1
 23513 ;; Hardware stack levels required when called:    6
 23514 ;; This function calls:
 23515 ;;		_ENCx24_Read
 23516 ;; This function is called by:
 23517 ;;		_ETH_Copy
 23518 ;;		_ETH_TxComputeChecksum
 23519 ;;		_ETH_RxComputeChecksum
 23520 ;; This function uses a non-reentrant model
 23521 ;;
 23522                           
 23523                           	psect	text101
 23524  000000                     __ptext101:
 23525                           	opt stack 0
 23526  000000                     _waitForDMA:
 23527                           	opt stack 0
 23528  000000                     __end_of_waitForDMA:
 23529                           	opt stack 0
 23530                           tosu	equ	0xFFF
 23531                           tosh	equ	0xFFE
 23532                           tosl	equ	0xFFD
 23533                           pclath	equ	0xFFA
 23534                           tblptru	equ	0xFF8
 23535                           tblptrh	equ	0xFF7
 23536                           tblptrl	equ	0xFF6
 23537                           tablat	equ	0xFF5
 23538                           prodh	equ	0xFF4
 23539                           prodl	equ	0xFF3
 23540                           intcon	equ	0xFF2
 23541                           intcon2	equ	0xFF1
 23542                           indf0	equ	0xFEF
 23543                           postinc0	equ	0xFEE
 23544                           fsr0h	equ	0xFEA
 23545                           fsr0l	equ	0xFE9
 23546                           wreg	equ	0xFE8
 23547                           postinc1	equ	0xFE6
 23548                           plusw1	equ	0xFE3
 23549                           fsr1h	equ	0xFE2
 23550                           fsr1l	equ	0xFE1
 23551                           bsr	equ	0xFE0
 23552                           indf2	equ	0xFDF
 23553                           postinc2	equ	0xFDE
 23554                           postdec2	equ	0xFDD
 23555                           plusw2	equ	0xFDB
 23556                           fsr2h	equ	0xFDA
 23557                           fsr2l	equ	0xFD9
 23558                           status	equ	0xFD8
 23559                           
 23560 ;; *************** function _ENCx24_BFS *****************
 23561 ;; Defined at:
 23562 ;;		line 151 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 23563 ;; Parameters:    Size  Location     Type
 23564 ;;  a               1    wreg     enum E6725
 23565 ;;  bitMask         2    4[COMRAM] unsigned int 
 23566 ;; Auto vars:     Size  Location     Type
 23567 ;;  a               1    7[COMRAM] enum E6725
 23568 ;;  bank            1    6[COMRAM] unsigned char 
 23569 ;; Return value:  Size  Location     Type
 23570 ;;		None               void
 23571 ;; Registers used:
 23572 ;;		wreg, status,2, status,0, cstack
 23573 ;; Tracked objects:
 23574 ;;		On entry : 0/0
 23575 ;;		On exit  : 0/0
 23576 ;;		Unchanged: 0/0
 23577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23581 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23582 ;;Total ram usage:        4 bytes
 23583 ;; Hardware stack levels used:    1
 23584 ;; Hardware stack levels required when called:    5
 23585 ;; This function calls:
 23586 ;;		_ENCx24_BankselSPI
 23587 ;;		_SPI_ExchangeByte
 23588 ;; This function is called by:
 23589 ;;		_ETH_SendSystemReset
 23590 ;;		_ETH_Init
 23591 ;;		_ETH_ResetReceiver
 23592 ;;		_ETH_Copy
 23593 ;;		_ETH_TxComputeChecksum
 23594 ;;		_ETH_RxComputeChecksum
 23595 ;;		_ENCx24_PhyRead
 23596 ;; This function uses a non-reentrant model
 23597 ;;
 23598                           
 23599                           	psect	text102
 23600  005F14                     __ptext102:
 23601                           	opt stack 0
 23602  005F14                     _ENCx24_BFS:
 23603                           	opt stack 19
 23604                           
 23605                           ;incstack = 0
 23606                           ;ENCx24_BFS@a stored from wreg
 23607  005F14  6E08               	movwf	ENCx24_BFS@a,c
 23608                           
 23609                           ;encX24j600_spi.c: 153: uint8_t bank;
 23610                           ;encX24j600_spi.c: 154: bank = a & 0xE0;
 23611  005F16  5008               	movf	ENCx24_BFS@a,w,c
 23612  005F18  0BE0               	andlw	224
 23613  005F1A  6E07               	movwf	ENCx24_BFS@bank,c
 23614                           
 23615                           ;encX24j600_spi.c: 155: if(bank != 0X80)
 23616  005F1C  0E80               	movlw	128
 23617  005F1E  1807               	xorwf	ENCx24_BFS@bank,w,c
 23618  005F20  E00A               	bz	l578
 23619                           
 23620                           ;encX24j600_spi.c: 156: {
 23621                           ;encX24j600_spi.c: 157: ENCx24_BankselSPI(a);
 23622  005F22  5008               	movf	ENCx24_BFS@a,w,c
 23623  005F24  EC27  F02D         	call	_ENCx24_BankselSPI
 23624  005F28  968A               	bcf	3978,3,c	;volatile
 23625                           
 23626                           ;encX24j600_spi.c: 159: SPI_ExchangeByte(bfs_inst | (a & 0x1F));
 23627  005F2A  5008               	movf	ENCx24_BFS@a,w,c
 23628  005F2C  0B1F               	andlw	31
 23629  005F2E  0980               	iorlw	128
 23630  005F30  ECF3  F032         	call	_SPI_ExchangeByte
 23631                           
 23632                           ;encX24j600_spi.c: 160: }
 23633  005F34  D007               	goto	l577
 23634  005F36                     l578:
 23635  005F36  968A               	bcf	3978,3,c	;volatile
 23636                           
 23637                           ;encX24j600_spi.c: 164: SPI_ExchangeByte(bfsu_inst);
 23638  005F38  0E24               	movlw	36
 23639  005F3A  ECF3  F032         	call	_SPI_ExchangeByte
 23640                           
 23641                           ;encX24j600_spi.c: 165: SPI_ExchangeByte(a);
 23642  005F3E  5008               	movf	ENCx24_BFS@a,w,c
 23643  005F40  ECF3  F032         	call	_SPI_ExchangeByte
 23644  005F44                     l577:
 23645                           
 23646                           ;encX24j600_spi.c: 166: }
 23647                           ;encX24j600_spi.c: 167: SPI_ExchangeByte(bitMask);
 23648  005F44  5005               	movf	ENCx24_BFS@bitMask,w,c
 23649  005F46  ECF3  F032         	call	_SPI_ExchangeByte
 23650                           
 23651                           ;encX24j600_spi.c: 168: SPI_ExchangeByte(bitMask>>8);
 23652  005F4A  5006               	movf	ENCx24_BFS@bitMask+1,w,c
 23653  005F4C  ECF3  F032         	call	_SPI_ExchangeByte
 23654  005F50  868A               	bsf	3978,3,c	;volatile
 23655  005F52  0012               	return		;funcret
 23656  005F54                     __end_of_ENCx24_BFS:
 23657                           	opt stack 0
 23658                           tosu	equ	0xFFF
 23659                           tosh	equ	0xFFE
 23660                           tosl	equ	0xFFD
 23661                           pclath	equ	0xFFA
 23662                           tblptru	equ	0xFF8
 23663                           tblptrh	equ	0xFF7
 23664                           tblptrl	equ	0xFF6
 23665                           tablat	equ	0xFF5
 23666                           prodh	equ	0xFF4
 23667                           prodl	equ	0xFF3
 23668                           intcon	equ	0xFF2
 23669                           intcon2	equ	0xFF1
 23670                           indf0	equ	0xFEF
 23671                           postinc0	equ	0xFEE
 23672                           fsr0h	equ	0xFEA
 23673                           fsr0l	equ	0xFE9
 23674                           wreg	equ	0xFE8
 23675                           postinc1	equ	0xFE6
 23676                           plusw1	equ	0xFE3
 23677                           fsr1h	equ	0xFE2
 23678                           fsr1l	equ	0xFE1
 23679                           bsr	equ	0xFE0
 23680                           indf2	equ	0xFDF
 23681                           postinc2	equ	0xFDE
 23682                           postdec2	equ	0xFDD
 23683                           plusw2	equ	0xFDB
 23684                           fsr2h	equ	0xFDA
 23685                           fsr2l	equ	0xFD9
 23686                           status	equ	0xFD8
 23687                           
 23688 ;; *************** function _ENCx24_BFC *****************
 23689 ;; Defined at:
 23690 ;;		line 177 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 23691 ;; Parameters:    Size  Location     Type
 23692 ;;  a               1    wreg     enum E6725
 23693 ;;  bitMask         2    4[COMRAM] unsigned int 
 23694 ;; Auto vars:     Size  Location     Type
 23695 ;;  a               1    7[COMRAM] enum E6725
 23696 ;;  bank            1    6[COMRAM] unsigned char 
 23697 ;; Return value:  Size  Location     Type
 23698 ;;		None               void
 23699 ;; Registers used:
 23700 ;;		wreg, status,2, status,0, cstack
 23701 ;; Tracked objects:
 23702 ;;		On entry : 0/0
 23703 ;;		On exit  : 0/0
 23704 ;;		Unchanged: 0/0
 23705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23709 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23710 ;;Total ram usage:        4 bytes
 23711 ;; Hardware stack levels used:    1
 23712 ;; Hardware stack levels required when called:    5
 23713 ;; This function calls:
 23714 ;;		_ENCx24_BankselSPI
 23715 ;;		_SPI_ExchangeByte
 23716 ;; This function is called by:
 23717 ;;		_ETH_EventHandler
 23718 ;;		_ETH_ResetReceiver
 23719 ;;		_ETH_Copy
 23720 ;;		_ETH_TxComputeChecksum
 23721 ;;		_ETH_RxComputeChecksum
 23722 ;;		_ENCx24_PhyRead
 23723 ;; This function uses a non-reentrant model
 23724 ;;
 23725                           
 23726                           	psect	text103
 23727  005F54                     __ptext103:
 23728                           	opt stack 0
 23729  005F54                     _ENCx24_BFC:
 23730                           	opt stack 19
 23731                           
 23732                           ;incstack = 0
 23733                           ;ENCx24_BFC@a stored from wreg
 23734  005F54  6E08               	movwf	ENCx24_BFC@a,c
 23735                           
 23736                           ;encX24j600_spi.c: 179: uint8_t bank;
 23737                           ;encX24j600_spi.c: 180: bank = a & 0xE0;
 23738  005F56  5008               	movf	ENCx24_BFC@a,w,c
 23739  005F58  0BE0               	andlw	224
 23740  005F5A  6E07               	movwf	ENCx24_BFC@bank,c
 23741                           
 23742                           ;encX24j600_spi.c: 181: if(bank != 0X80)
 23743  005F5C  0E80               	movlw	128
 23744  005F5E  1807               	xorwf	ENCx24_BFC@bank,w,c
 23745  005F60  E00A               	bz	l589
 23746                           
 23747                           ;encX24j600_spi.c: 182: {
 23748                           ;encX24j600_spi.c: 183: ENCx24_BankselSPI(a);
 23749  005F62  5008               	movf	ENCx24_BFC@a,w,c
 23750  005F64  EC27  F02D         	call	_ENCx24_BankselSPI
 23751  005F68  968A               	bcf	3978,3,c	;volatile
 23752                           
 23753                           ;encX24j600_spi.c: 185: SPI_ExchangeByte(bfc_inst | (a & 0x1F));
 23754  005F6A  5008               	movf	ENCx24_BFC@a,w,c
 23755  005F6C  0B1F               	andlw	31
 23756  005F6E  09A0               	iorlw	160
 23757  005F70  ECF3  F032         	call	_SPI_ExchangeByte
 23758                           
 23759                           ;encX24j600_spi.c: 186: }
 23760  005F74  D007               	goto	l588
 23761  005F76                     l589:
 23762  005F76  968A               	bcf	3978,3,c	;volatile
 23763                           
 23764                           ;encX24j600_spi.c: 190: SPI_ExchangeByte(bfcu_inst);
 23765  005F78  0E26               	movlw	38
 23766  005F7A  ECF3  F032         	call	_SPI_ExchangeByte
 23767                           
 23768                           ;encX24j600_spi.c: 191: SPI_ExchangeByte(a);
 23769  005F7E  5008               	movf	ENCx24_BFC@a,w,c
 23770  005F80  ECF3  F032         	call	_SPI_ExchangeByte
 23771  005F84                     l588:
 23772                           
 23773                           ;encX24j600_spi.c: 192: }
 23774                           ;encX24j600_spi.c: 193: SPI_ExchangeByte(bitMask);
 23775  005F84  5005               	movf	ENCx24_BFC@bitMask,w,c
 23776  005F86  ECF3  F032         	call	_SPI_ExchangeByte
 23777                           
 23778                           ;encX24j600_spi.c: 194: SPI_ExchangeByte(bitMask>>8);
 23779  005F8A  5006               	movf	ENCx24_BFC@bitMask+1,w,c
 23780  005F8C  ECF3  F032         	call	_SPI_ExchangeByte
 23781  005F90  868A               	bsf	3978,3,c	;volatile
 23782  005F92  0012               	return		;funcret
 23783  005F94                     __end_of_ENCx24_BFC:
 23784                           	opt stack 0
 23785                           tosu	equ	0xFFF
 23786                           tosh	equ	0xFFE
 23787                           tosl	equ	0xFFD
 23788                           pclath	equ	0xFFA
 23789                           tblptru	equ	0xFF8
 23790                           tblptrh	equ	0xFF7
 23791                           tblptrl	equ	0xFF6
 23792                           tablat	equ	0xFF5
 23793                           prodh	equ	0xFF4
 23794                           prodl	equ	0xFF3
 23795                           intcon	equ	0xFF2
 23796                           intcon2	equ	0xFF1
 23797                           indf0	equ	0xFEF
 23798                           postinc0	equ	0xFEE
 23799                           fsr0h	equ	0xFEA
 23800                           fsr0l	equ	0xFE9
 23801                           wreg	equ	0xFE8
 23802                           postinc1	equ	0xFE6
 23803                           plusw1	equ	0xFE3
 23804                           fsr1h	equ	0xFE2
 23805                           fsr1l	equ	0xFE1
 23806                           bsr	equ	0xFE0
 23807                           indf2	equ	0xFDF
 23808                           postinc2	equ	0xFDE
 23809                           postdec2	equ	0xFDD
 23810                           plusw2	equ	0xFDB
 23811                           fsr2h	equ	0xFDA
 23812                           fsr2l	equ	0xFD9
 23813                           status	equ	0xFD8
 23814                           
 23815 ;; *************** function _ETH_Send *****************
 23816 ;; Defined at:
 23817 ;;		line 393 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 23818 ;; Parameters:    Size  Location     Type
 23819 ;;		None
 23820 ;; Auto vars:     Size  Location     Type
 23821 ;;		None
 23822 ;; Return value:  Size  Location     Type
 23823 ;;                  1    wreg      enum E6988
 23824 ;; Registers used:
 23825 ;;		wreg, status,2, status,0, cstack
 23826 ;; Tracked objects:
 23827 ;;		On entry : 0/1
 23828 ;;		On exit  : F/1
 23829 ;;		Unchanged: 0/0
 23830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23835 ;;Total ram usage:        0 bytes
 23836 ;; Hardware stack levels used:    1
 23837 ;; Hardware stack levels required when called:    6
 23838 ;; This function calls:
 23839 ;;		_ENCx24_Write
 23840 ;;		_ETH_Set_TXRTS
 23841 ;; This function is called by:
 23842 ;;		_ARPV4_Packet
 23843 ;;		_ARPV4_Request
 23844 ;;		_IPV4_Send
 23845 ;; This function uses a non-reentrant model
 23846 ;;
 23847                           
 23848                           	psect	text104
 23849  00638A                     __ptext104:
 23850                           	opt stack 0
 23851  00638A                     _ETH_Send:
 23852                           	opt stack 18
 23853                           
 23854                           ;encX24J600_driver.c: 396: ENCx24_Write(XJ600_ETXLENL, TXPacketSize);
 23855                           
 23856                           ;incstack = 0
 23857  00638A  C19E  F005         	movff	_TXPacketSize,ENCx24_Write@data
 23858  00638E  C19F  F006         	movff	_TXPacketSize+1,ENCx24_Write@data+1
 23859  006392  0E02               	movlw	2
 23860  006394  EC29  F02F         	call	_ENCx24_Write
 23861                           
 23862                           ;encX24J600_driver.c: 397: if (!ethData.up)
 23863  006398  0101               	movlb	1	; () banked
 23864  00639A  A583               	btfss	_ethData& (0+255),2,b	;volatile
 23865                           
 23866                           ; BSR set to: 1
 23867                           ;encX24J600_driver.c: 398: {
 23868                           ;encX24J600_driver.c: 399: return LINK_NOT_FOUND;
 23869  00639C  0C02               	retlw	2
 23870                           
 23871                           ; BSR set to: 1
 23872                           ;encX24J600_driver.c: 400: }
 23873                           ;encX24J600_driver.c: 401: if(!ethData.bufferBusy)
 23874  00639E  AB83               	btfss	_ethData& (0+255),5,b	;volatile
 23875                           
 23876                           ; BSR set to: 1
 23877                           ;encX24J600_driver.c: 402: {
 23878                           ;encX24J600_driver.c: 403: return BUFFER_BUSY;
 23879  0063A0  0C03               	retlw	3
 23880                           
 23881                           ; BSR set to: 1
 23882                           ;encX24J600_driver.c: 404: }
 23883                           ;encX24J600_driver.c: 405: ETH_Set_TXRTS();
 23884  0063A2  EC0C  F033         	call	_ETH_Set_TXRTS	;wreg free
 23885                           
 23886                           ;encX24J600_driver.c: 406: ethData.bufferBusy = 0;
 23887  0063A6  0101               	movlb	1	; () banked
 23888  0063A8  9B83               	bcf	_ethData& (0+255),5,b	;volatile
 23889                           
 23890                           ; BSR set to: 1
 23891                           
 23892                           ; BSR set to: 1
 23893                           ;encX24J600_driver.c: 408: return SUCCESS;
 23894  0063AA  0C01               	retlw	1	;funcret
 23895  0063AC                     __end_of_ETH_Send:
 23896                           	opt stack 0
 23897                           tosu	equ	0xFFF
 23898                           tosh	equ	0xFFE
 23899                           tosl	equ	0xFFD
 23900                           pclath	equ	0xFFA
 23901                           tblptru	equ	0xFF8
 23902                           tblptrh	equ	0xFF7
 23903                           tblptrl	equ	0xFF6
 23904                           tablat	equ	0xFF5
 23905                           prodh	equ	0xFF4
 23906                           prodl	equ	0xFF3
 23907                           intcon	equ	0xFF2
 23908                           intcon2	equ	0xFF1
 23909                           indf0	equ	0xFEF
 23910                           postinc0	equ	0xFEE
 23911                           fsr0h	equ	0xFEA
 23912                           fsr0l	equ	0xFE9
 23913                           wreg	equ	0xFE8
 23914                           postinc1	equ	0xFE6
 23915                           plusw1	equ	0xFE3
 23916                           fsr1h	equ	0xFE2
 23917                           fsr1l	equ	0xFE1
 23918                           bsr	equ	0xFE0
 23919                           indf2	equ	0xFDF
 23920                           postinc2	equ	0xFDE
 23921                           postdec2	equ	0xFDD
 23922                           plusw2	equ	0xFDB
 23923                           fsr2h	equ	0xFDA
 23924                           fsr2l	equ	0xFD9
 23925                           status	equ	0xFD8
 23926                           
 23927 ;; *************** function _ETH_Set_TXRTS *****************
 23928 ;; Defined at:
 23929 ;;		line 435 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 23930 ;; Parameters:    Size  Location     Type
 23931 ;;		None
 23932 ;; Auto vars:     Size  Location     Type
 23933 ;;		None
 23934 ;; Return value:  Size  Location     Type
 23935 ;;		None               void
 23936 ;; Registers used:
 23937 ;;		wreg, status,2, cstack
 23938 ;; Tracked objects:
 23939 ;;		On entry : F/1
 23940 ;;		On exit  : 0/0
 23941 ;;		Unchanged: 0/0
 23942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23947 ;;Total ram usage:        0 bytes
 23948 ;; Hardware stack levels used:    1
 23949 ;; Hardware stack levels required when called:    4
 23950 ;; This function calls:
 23951 ;;		_SPI_ExchangeByte
 23952 ;; This function is called by:
 23953 ;;		_ETH_Send
 23954 ;; This function uses a non-reentrant model
 23955 ;;
 23956                           
 23957                           	psect	text105
 23958  006618                     __ptext105:
 23959                           	opt stack 0
 23960  006618                     _ETH_Set_TXRTS:
 23961                           	opt stack 19
 23962                           
 23963                           ; BSR set to: 1
 23964                           
 23965                           ; BSR set to: 1
 23966                           ;incstack = 0
 23967                           ;encX24j600_spi.c: 437: do{LATB3 = 0;} while(0);
 23968  006618  968A               	bcf	3978,3,c	;volatile
 23969                           
 23970                           ; BSR set to: 1
 23971                           ;encX24j600_spi.c: 438: SPI_ExchangeByte(settxrts_inst);
 23972  00661A  0ED4               	movlw	212
 23973  00661C  ECF3  F032         	call	_SPI_ExchangeByte
 23974  006620  868A               	bsf	3978,3,c	;volatile
 23975  006622  0012               	return		;funcret
 23976  006624                     __end_of_ETH_Set_TXRTS:
 23977                           	opt stack 0
 23978                           tosu	equ	0xFFF
 23979                           tosh	equ	0xFFE
 23980                           tosl	equ	0xFFD
 23981                           pclath	equ	0xFFA
 23982                           tblptru	equ	0xFF8
 23983                           tblptrh	equ	0xFF7
 23984                           tblptrl	equ	0xFF6
 23985                           tablat	equ	0xFF5
 23986                           prodh	equ	0xFF4
 23987                           prodl	equ	0xFF3
 23988                           intcon	equ	0xFF2
 23989                           intcon2	equ	0xFF1
 23990                           indf0	equ	0xFEF
 23991                           postinc0	equ	0xFEE
 23992                           fsr0h	equ	0xFEA
 23993                           fsr0l	equ	0xFE9
 23994                           wreg	equ	0xFE8
 23995                           postinc1	equ	0xFE6
 23996                           plusw1	equ	0xFE3
 23997                           fsr1h	equ	0xFE2
 23998                           fsr1l	equ	0xFE1
 23999                           bsr	equ	0xFE0
 24000                           indf2	equ	0xFDF
 24001                           postinc2	equ	0xFDE
 24002                           postdec2	equ	0xFDD
 24003                           plusw2	equ	0xFDB
 24004                           fsr2h	equ	0xFDA
 24005                           fsr2l	equ	0xFD9
 24006                           status	equ	0xFD8
 24007                           
 24008 ;; *************** function _ETH_Insert *****************
 24009 ;; Defined at:
 24010 ;;		line 416 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 24011 ;; Parameters:    Size  Location     Type
 24012 ;;  data            1    wreg     PTR unsigned char 
 24013 ;;		 -> UDP_Send@cksm(2), UDP_Send@udpLength(2), TCP_Snd@cksm(2), IPV4_Send@cksm(2), 
 24014 ;;		 -> IPV4_Send@totalLength(2), ICMP_EchoReply@cksm(2), 
 24015 ;;  len             2   10[COMRAM] unsigned int 
 24016 ;;  offset          2   12[COMRAM] unsigned int 
 24017 ;; Auto vars:     Size  Location     Type
 24018 ;;  data            1   16[COMRAM] PTR unsigned char 
 24019 ;;		 -> UDP_Send@cksm(2), UDP_Send@udpLength(2), TCP_Snd@cksm(2), IPV4_Send@cksm(2), 
 24020 ;;		 -> IPV4_Send@totalLength(2), ICMP_EchoReply@cksm(2), 
 24021 ;;  current_tx_p    2   14[COMRAM] unsigned int 
 24022 ;; Return value:  Size  Location     Type
 24023 ;;		None               void
 24024 ;; Registers used:
 24025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24026 ;; Tracked objects:
 24027 ;;		On entry : 0/0
 24028 ;;		On exit  : 0/0
 24029 ;;		Unchanged: 0/0
 24030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24032 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24034 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24035 ;;Total ram usage:        7 bytes
 24036 ;; Hardware stack levels used:    1
 24037 ;; Hardware stack levels required when called:    6
 24038 ;; This function calls:
 24039 ;;		_ENCx24_Read
 24040 ;;		_ENCx24_Write
 24041 ;;		_SPI_ExchangeByte
 24042 ;; This function is called by:
 24043 ;;		_ICMP_EchoReply
 24044 ;;		_IPV4_Send
 24045 ;;		_TCP_Snd
 24046 ;;		_UDP_Send
 24047 ;; This function uses a non-reentrant model
 24048 ;;
 24049                           
 24050                           	psect	text106
 24051  005BA0                     __ptext106:
 24052                           	opt stack 0
 24053  005BA0                     _ETH_Insert:
 24054                           	opt stack 19
 24055                           
 24056                           ;incstack = 0
 24057                           ;ETH_Insert@data stored from wreg
 24058  005BA0  6E11               	movwf	ETH_Insert@data,c
 24059                           
 24060                           ;encX24j600_spi.c: 420: current_tx_pointer = ENCx24_Read(XJ600_EGPWRPTL);
 24061  005BA2  0E88               	movlw	136
 24062  005BA4  EC04  F02F         	call	_ENCx24_Read
 24063  005BA8  C005  F00F         	movff	?_ENCx24_Read,ETH_Insert@current_tx_pointer
 24064  005BAC  C006  F010         	movff	?_ENCx24_Read+1,ETH_Insert@current_tx_pointer+1
 24065                           
 24066                           ;encX24j600_spi.c: 421: ENCx24_Write(XJ600_EGPWRPTL, offset);
 24067  005BB0  C00D  F005         	movff	ETH_Insert@offset,ENCx24_Write@data
 24068  005BB4  C00E  F006         	movff	ETH_Insert@offset+1,ENCx24_Write@data+1
 24069  005BB8  0E88               	movlw	136
 24070  005BBA  EC29  F02F         	call	_ENCx24_Write
 24071  005BBE  968A               	bcf	3978,3,c	;volatile
 24072                           
 24073                           ;encX24j600_spi.c: 424: SPI_ExchangeByte(wgpdata_inst);
 24074  005BC0  0E2A               	movlw	42
 24075  005BC2  ECF3  F032         	call	_SPI_ExchangeByte
 24076                           
 24077                           ;encX24j600_spi.c: 425: while(len--)
 24078  005BC6  D007               	goto	l8220
 24079  005BC8                     l8216:
 24080                           
 24081                           ;encX24j600_spi.c: 426: SPI_ExchangeByte(*data++);
 24082  005BC8  5011               	movf	ETH_Insert@data,w,c
 24083  005BCA  6ED9               	movwf	fsr2l,c
 24084  005BCC  6ADA               	clrf	fsr2h,c
 24085  005BCE  50DF               	movf	indf2,w,c
 24086  005BD0  ECF3  F032         	call	_SPI_ExchangeByte
 24087  005BD4  2A11               	incf	ETH_Insert@data,f,c
 24088  005BD6                     l8220:
 24089  005BD6  060B               	decf	ETH_Insert@len,f,c
 24090  005BD8  A0D8               	btfss	status,0,c
 24091  005BDA  060C               	decf	ETH_Insert@len+1,f,c
 24092  005BDC  280B               	incf	ETH_Insert@len,w,c
 24093  005BDE  E1F4               	bnz	l8216
 24094  005BE0  280C               	incf	ETH_Insert@len+1,w,c
 24095  005BE2  E1F2               	bnz	l8216
 24096                           
 24097                           ;encX24j600_spi.c: 427: do{LATB3 = 1;} while(0);
 24098  005BE4  868A               	bsf	3978,3,c	;volatile
 24099                           
 24100                           ;encX24j600_spi.c: 429: ENCx24_Write(XJ600_EGPWRPTL, current_tx_pointer);
 24101  005BE6  C00F  F005         	movff	ETH_Insert@current_tx_pointer,ENCx24_Write@data
 24102  005BEA  C010  F006         	movff	ETH_Insert@current_tx_pointer+1,ENCx24_Write@data+1
 24103  005BEE  0E88               	movlw	136
 24104  005BF0  EF29  F02F         	goto	_ENCx24_Write
 24105  005BF4                     __end_of_ETH_Insert:
 24106                           	opt stack 0
 24107                           tosu	equ	0xFFF
 24108                           tosh	equ	0xFFE
 24109                           tosl	equ	0xFFD
 24110                           pclath	equ	0xFFA
 24111                           tblptru	equ	0xFF8
 24112                           tblptrh	equ	0xFF7
 24113                           tblptrl	equ	0xFF6
 24114                           tablat	equ	0xFF5
 24115                           prodh	equ	0xFF4
 24116                           prodl	equ	0xFF3
 24117                           intcon	equ	0xFF2
 24118                           intcon2	equ	0xFF1
 24119                           indf0	equ	0xFEF
 24120                           postinc0	equ	0xFEE
 24121                           fsr0h	equ	0xFEA
 24122                           fsr0l	equ	0xFE9
 24123                           wreg	equ	0xFE8
 24124                           postinc1	equ	0xFE6
 24125                           plusw1	equ	0xFE3
 24126                           fsr1h	equ	0xFE2
 24127                           fsr1l	equ	0xFE1
 24128                           bsr	equ	0xFE0
 24129                           indf2	equ	0xFDF
 24130                           postinc2	equ	0xFDE
 24131                           postdec2	equ	0xFDD
 24132                           plusw2	equ	0xFDB
 24133                           fsr2h	equ	0xFDA
 24134                           fsr2l	equ	0xFD9
 24135                           status	equ	0xFD8
 24136                           
 24137 ;; *************** function _ENCx24_Write *****************
 24138 ;; Defined at:
 24139 ;;		line 124 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 24140 ;; Parameters:    Size  Location     Type
 24141 ;;  a               1    wreg     enum E6725
 24142 ;;  data            2    4[COMRAM] unsigned int 
 24143 ;; Auto vars:     Size  Location     Type
 24144 ;;  a               1    7[COMRAM] enum E6725
 24145 ;;  bank            1    6[COMRAM] unsigned char 
 24146 ;; Return value:  Size  Location     Type
 24147 ;;		None               void
 24148 ;; Registers used:
 24149 ;;		wreg, status,2, status,0, cstack
 24150 ;; Tracked objects:
 24151 ;;		On entry : 0/2
 24152 ;;		On exit  : 0/0
 24153 ;;		Unchanged: 0/0
 24154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;Total ram usage:        4 bytes
 24160 ;; Hardware stack levels used:    1
 24161 ;; Hardware stack levels required when called:    5
 24162 ;; This function calls:
 24163 ;;		_ENCx24_BankselSPI
 24164 ;;		_SPI_ExchangeByte
 24165 ;; This function is called by:
 24166 ;;		_ETH_SendSystemReset
 24167 ;;		_ETH_Init
 24168 ;;		_ETH_EventHandler
 24169 ;;		_ETH_ResetReceiver
 24170 ;;		_ETH_Dump
 24171 ;;		_ETH_Flush
 24172 ;;		_ETH_WriteStart
 24173 ;;		_ETH_Send
 24174 ;;		_ETH_Copy
 24175 ;;		_ETH_TxComputeChecksum
 24176 ;;		_ETH_RxComputeChecksum
 24177 ;;		_ENCx24_PhyRead
 24178 ;;		_ENCx24_PHYWrite
 24179 ;;		_ETH_Insert
 24180 ;; This function uses a non-reentrant model
 24181 ;;
 24182                           
 24183                           	psect	text107
 24184  005E52                     __ptext107:
 24185                           	opt stack 0
 24186  005E52                     _ENCx24_Write:
 24187                           	opt stack 19
 24188                           
 24189                           ;incstack = 0
 24190                           ;ENCx24_Write@a stored from wreg
 24191  005E52  6E08               	movwf	ENCx24_Write@a,c
 24192                           
 24193                           ;encX24j600_spi.c: 126: uint8_t bank;
 24194                           ;encX24j600_spi.c: 127: bank = a & 0xE0;
 24195  005E54  5008               	movf	ENCx24_Write@a,w,c
 24196  005E56  0BE0               	andlw	224
 24197  005E58  6E07               	movwf	ENCx24_Write@bank,c
 24198                           
 24199                           ;encX24j600_spi.c: 128: if(bank != 0X80)
 24200  005E5A  0E80               	movlw	128
 24201  005E5C  1807               	xorwf	ENCx24_Write@bank,w,c
 24202  005E5E  E00B               	bz	l567
 24203                           
 24204                           ;encX24j600_spi.c: 129: {
 24205                           ;encX24j600_spi.c: 130: ENCx24_BankselSPI(a);
 24206  005E60  5008               	movf	ENCx24_Write@a,w,c
 24207  005E62  EC27  F02D         	call	_ENCx24_BankselSPI
 24208  005E66  968A               	bcf	3978,3,c	;volatile
 24209                           
 24210                           ;encX24j600_spi.c: 132: a &= 0x1F;
 24211  005E68  0E1F               	movlw	31
 24212  005E6A  1608               	andwf	ENCx24_Write@a,f,c
 24213                           
 24214                           ;encX24j600_spi.c: 133: SPI_ExchangeByte(wcr_inst | (a));
 24215  005E6C  5008               	movf	ENCx24_Write@a,w,c
 24216  005E6E  0940               	iorlw	64
 24217  005E70  ECF3  F032         	call	_SPI_ExchangeByte
 24218                           
 24219                           ;encX24j600_spi.c: 134: }
 24220  005E74  D007               	goto	l566
 24221  005E76                     l567:
 24222  005E76  968A               	bcf	3978,3,c	;volatile
 24223                           
 24224                           ;encX24j600_spi.c: 138: SPI_ExchangeByte(wcru_inst);
 24225  005E78  0E22               	movlw	34
 24226  005E7A  ECF3  F032         	call	_SPI_ExchangeByte
 24227                           
 24228                           ;encX24j600_spi.c: 139: SPI_ExchangeByte(a);
 24229  005E7E  5008               	movf	ENCx24_Write@a,w,c
 24230  005E80  ECF3  F032         	call	_SPI_ExchangeByte
 24231  005E84                     l566:
 24232                           
 24233                           ;encX24j600_spi.c: 140: }
 24234                           ;encX24j600_spi.c: 141: SPI_ExchangeByte(((uint8_t*) &data)[0]);
 24235  005E84  5005               	movf	ENCx24_Write@data,w,c
 24236  005E86  ECF3  F032         	call	_SPI_ExchangeByte
 24237                           
 24238                           ;encX24j600_spi.c: 142: SPI_ExchangeByte(((uint8_t*) &data)[1]);
 24239  005E8A  5006               	movf	ENCx24_Write@data+1,w,c
 24240  005E8C  ECF3  F032         	call	_SPI_ExchangeByte
 24241  005E90  868A               	bsf	3978,3,c	;volatile
 24242  005E92  0012               	return		;funcret
 24243  005E94                     __end_of_ENCx24_Write:
 24244                           	opt stack 0
 24245                           tosu	equ	0xFFF
 24246                           tosh	equ	0xFFE
 24247                           tosl	equ	0xFFD
 24248                           pclath	equ	0xFFA
 24249                           tblptru	equ	0xFF8
 24250                           tblptrh	equ	0xFF7
 24251                           tblptrl	equ	0xFF6
 24252                           tablat	equ	0xFF5
 24253                           prodh	equ	0xFF4
 24254                           prodl	equ	0xFF3
 24255                           intcon	equ	0xFF2
 24256                           intcon2	equ	0xFF1
 24257                           indf0	equ	0xFEF
 24258                           postinc0	equ	0xFEE
 24259                           fsr0h	equ	0xFEA
 24260                           fsr0l	equ	0xFE9
 24261                           wreg	equ	0xFE8
 24262                           postinc1	equ	0xFE6
 24263                           plusw1	equ	0xFE3
 24264                           fsr1h	equ	0xFE2
 24265                           fsr1l	equ	0xFE1
 24266                           bsr	equ	0xFE0
 24267                           indf2	equ	0xFDF
 24268                           postinc2	equ	0xFDE
 24269                           postdec2	equ	0xFDD
 24270                           plusw2	equ	0xFDB
 24271                           fsr2h	equ	0xFDA
 24272                           fsr2l	equ	0xFD9
 24273                           status	equ	0xFD8
 24274                           
 24275 ;; *************** function _ETH_GetByteCount *****************
 24276 ;; Defined at:
 24277 ;;		line 602 in file "../../TCPIP Library/ethernet_drivers/encX24J600_driver.c"
 24278 ;; Parameters:    Size  Location     Type
 24279 ;;		None
 24280 ;; Auto vars:     Size  Location     Type
 24281 ;;  wPtr            2   12[COMRAM] unsigned int 
 24282 ;; Return value:  Size  Location     Type
 24283 ;;                  2   10[COMRAM] unsigned int 
 24284 ;; Registers used:
 24285 ;;		wreg, status,2, status,0, cstack
 24286 ;; Tracked objects:
 24287 ;;		On entry : 0/0
 24288 ;;		On exit  : F/1
 24289 ;;		Unchanged: 0/0
 24290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24294 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24295 ;;Total ram usage:        4 bytes
 24296 ;; Hardware stack levels used:    1
 24297 ;; Hardware stack levels required when called:    6
 24298 ;; This function calls:
 24299 ;;		_ENCx24_Read
 24300 ;; This function is called by:
 24301 ;;		_UDP_Send
 24302 ;; This function uses a non-reentrant model
 24303 ;;
 24304                           
 24305                           	psect	text108
 24306  00642A                     __ptext108:
 24307                           	opt stack 0
 24308  00642A                     _ETH_GetByteCount:
 24309                           	opt stack 17
 24310                           
 24311                           ;encX24J600_driver.c: 604: uint16_t wPtr;
 24312                           ;encX24J600_driver.c: 606: wPtr = ENCx24_Read(XJ600_EGPWRPTL);
 24313                           
 24314                           ;incstack = 0
 24315  00642A  0E88               	movlw	136
 24316  00642C  EC04  F02F         	call	_ENCx24_Read
 24317  006430  C005  F00D         	movff	?_ENCx24_Read,ETH_GetByteCount@wPtr
 24318  006434  C006  F00E         	movff	?_ENCx24_Read+1,ETH_GetByteCount@wPtr+1
 24319                           
 24320                           ;encX24J600_driver.c: 608: return (wPtr - ethData.saveWRPT);
 24321  006438  0101               	movlb	1	; () banked
 24322  00643A  5188               	movf	(_ethData+5)& (0+255),w,b	;volatile
 24323  00643C  5C0D               	subwf	ETH_GetByteCount@wPtr,w,c
 24324  00643E  6E0B               	movwf	?_ETH_GetByteCount,c
 24325  006440  5189               	movf	(_ethData+6)& (0+255),w,b	;volatile
 24326  006442  580E               	subwfb	ETH_GetByteCount@wPtr+1,w,c
 24327  006444  6E0C               	movwf	?_ETH_GetByteCount+1,c
 24328                           
 24329                           ; BSR set to: 1
 24330  006446  0012               	return		;funcret
 24331  006448                     __end_of_ETH_GetByteCount:
 24332                           	opt stack 0
 24333                           tosu	equ	0xFFF
 24334                           tosh	equ	0xFFE
 24335                           tosl	equ	0xFFD
 24336                           pclath	equ	0xFFA
 24337                           tblptru	equ	0xFF8
 24338                           tblptrh	equ	0xFF7
 24339                           tblptrl	equ	0xFF6
 24340                           tablat	equ	0xFF5
 24341                           prodh	equ	0xFF4
 24342                           prodl	equ	0xFF3
 24343                           intcon	equ	0xFF2
 24344                           intcon2	equ	0xFF1
 24345                           indf0	equ	0xFEF
 24346                           postinc0	equ	0xFEE
 24347                           fsr0h	equ	0xFEA
 24348                           fsr0l	equ	0xFE9
 24349                           wreg	equ	0xFE8
 24350                           postinc1	equ	0xFE6
 24351                           plusw1	equ	0xFE3
 24352                           fsr1h	equ	0xFE2
 24353                           fsr1l	equ	0xFE1
 24354                           bsr	equ	0xFE0
 24355                           indf2	equ	0xFDF
 24356                           postinc2	equ	0xFDE
 24357                           postdec2	equ	0xFDD
 24358                           plusw2	equ	0xFDB
 24359                           fsr2h	equ	0xFDA
 24360                           fsr2l	equ	0xFD9
 24361                           status	equ	0xFD8
 24362                           
 24363 ;; *************** function _ENCx24_Read *****************
 24364 ;; Defined at:
 24365 ;;		line 95 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 24366 ;; Parameters:    Size  Location     Type
 24367 ;;  a               1    wreg     enum E6725
 24368 ;; Auto vars:     Size  Location     Type
 24369 ;;  a               1    9[COMRAM] enum E6725
 24370 ;;  v               2    7[COMRAM] unsigned int 
 24371 ;;  bank            1    6[COMRAM] unsigned char 
 24372 ;; Return value:  Size  Location     Type
 24373 ;;                  2    4[COMRAM] unsigned int 
 24374 ;; Registers used:
 24375 ;;		wreg, status,2, status,0, cstack
 24376 ;; Tracked objects:
 24377 ;;		On entry : 0/2
 24378 ;;		On exit  : 0/0
 24379 ;;		Unchanged: 0/0
 24380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24381 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24384 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24385 ;;Total ram usage:        6 bytes
 24386 ;; Hardware stack levels used:    1
 24387 ;; Hardware stack levels required when called:    5
 24388 ;; This function calls:
 24389 ;;		_ENCx24_BankselSPI
 24390 ;;		_SPI_ExchangeByte
 24391 ;; This function is called by:
 24392 ;;		_ETH_SendSystemReset
 24393 ;;		_ETH_Init
 24394 ;;		_ETH_readLinkStatus
 24395 ;;		_ETH_EventHandler
 24396 ;;		_ETH_Dump
 24397 ;;		_ETH_WriteStart
 24398 ;;		_ETH_Copy
 24399 ;;		_waitForDMA
 24400 ;;		_ETH_TxComputeChecksum
 24401 ;;		_ETH_RxComputeChecksum
 24402 ;;		_ETH_SaveRDPT
 24403 ;;		_ETH_ResetByteCount
 24404 ;;		_ETH_GetByteCount
 24405 ;;		_ENCx24_PhyRead
 24406 ;;		_ENCx24_PHYWrite
 24407 ;;		_ETH_Insert
 24408 ;; This function uses a non-reentrant model
 24409 ;;
 24410                           
 24411                           	psect	text109
 24412  005E08                     __ptext109:
 24413                           	opt stack 0
 24414  005E08                     _ENCx24_Read:
 24415                           	opt stack 22
 24416                           
 24417                           ; BSR set to: 1
 24418                           ;incstack = 0
 24419                           ;ENCx24_Read@a stored from wreg
 24420  005E08  6E0A               	movwf	ENCx24_Read@a,c
 24421                           
 24422                           ;encX24j600_spi.c: 97: uint16_t v;
 24423                           ;encX24j600_spi.c: 98: uint8_t bank;
 24424                           ;encX24j600_spi.c: 100: bank = a & 0xE0;
 24425  005E0A  500A               	movf	ENCx24_Read@a,w,c
 24426  005E0C  0BE0               	andlw	224
 24427  005E0E  6E07               	movwf	ENCx24_Read@bank,c
 24428                           
 24429                           ;encX24j600_spi.c: 101: if(bank != 0X80)
 24430  005E10  0E80               	movlw	128
 24431  005E12  1807               	xorwf	ENCx24_Read@bank,w,c
 24432  005E14  E009               	bz	l556
 24433                           
 24434                           ;encX24j600_spi.c: 102: {
 24435                           ;encX24j600_spi.c: 103: ENCx24_BankselSPI(a);
 24436  005E16  500A               	movf	ENCx24_Read@a,w,c
 24437  005E18  EC27  F02D         	call	_ENCx24_BankselSPI
 24438  005E1C  968A               	bcf	3978,3,c	;volatile
 24439                           
 24440                           ;encX24j600_spi.c: 105: SPI_ExchangeByte(rcr_inst| (a & 0x1F));
 24441  005E1E  500A               	movf	ENCx24_Read@a,w,c
 24442  005E20  0B1F               	andlw	31
 24443  005E22  ECF3  F032         	call	_SPI_ExchangeByte
 24444                           
 24445                           ;encX24j600_spi.c: 106: }
 24446  005E26  D007               	goto	l555
 24447  005E28                     l556:
 24448  005E28  968A               	bcf	3978,3,c	;volatile
 24449                           
 24450                           ;encX24j600_spi.c: 110: SPI_ExchangeByte(rcru_inst);
 24451  005E2A  0E20               	movlw	32
 24452  005E2C  ECF3  F032         	call	_SPI_ExchangeByte
 24453                           
 24454                           ;encX24j600_spi.c: 111: SPI_ExchangeByte(a);
 24455  005E30  500A               	movf	ENCx24_Read@a,w,c
 24456  005E32  ECF3  F032         	call	_SPI_ExchangeByte
 24457  005E36                     l555:
 24458                           
 24459                           ;encX24j600_spi.c: 112: }
 24460                           ;encX24j600_spi.c: 113: ((uint8_t*)&v)[0] = SPI_ExchangeByte(0);
 24461  005E36  0E00               	movlw	0
 24462  005E38  ECF3  F032         	call	_SPI_ExchangeByte
 24463  005E3C  6E08               	movwf	ENCx24_Read@v,c
 24464                           
 24465                           ;encX24j600_spi.c: 114: ((uint8_t*)&v)[1] = SPI_ExchangeByte(0);
 24466  005E3E  0E00               	movlw	0
 24467  005E40  ECF3  F032         	call	_SPI_ExchangeByte
 24468  005E44  6E09               	movwf	ENCx24_Read@v+1,c
 24469  005E46  868A               	bsf	3978,3,c	;volatile
 24470                           
 24471                           ;encX24j600_spi.c: 116: return v;
 24472  005E48  C008  F005         	movff	ENCx24_Read@v,?_ENCx24_Read
 24473  005E4C  C009  F006         	movff	ENCx24_Read@v+1,?_ENCx24_Read+1
 24474  005E50  0012               	return		;funcret
 24475  005E52                     __end_of_ENCx24_Read:
 24476                           	opt stack 0
 24477                           tosu	equ	0xFFF
 24478                           tosh	equ	0xFFE
 24479                           tosl	equ	0xFFD
 24480                           pclath	equ	0xFFA
 24481                           tblptru	equ	0xFF8
 24482                           tblptrh	equ	0xFF7
 24483                           tblptrl	equ	0xFF6
 24484                           tablat	equ	0xFF5
 24485                           prodh	equ	0xFF4
 24486                           prodl	equ	0xFF3
 24487                           intcon	equ	0xFF2
 24488                           intcon2	equ	0xFF1
 24489                           indf0	equ	0xFEF
 24490                           postinc0	equ	0xFEE
 24491                           fsr0h	equ	0xFEA
 24492                           fsr0l	equ	0xFE9
 24493                           wreg	equ	0xFE8
 24494                           postinc1	equ	0xFE6
 24495                           plusw1	equ	0xFE3
 24496                           fsr1h	equ	0xFE2
 24497                           fsr1l	equ	0xFE1
 24498                           bsr	equ	0xFE0
 24499                           indf2	equ	0xFDF
 24500                           postinc2	equ	0xFDE
 24501                           postdec2	equ	0xFDD
 24502                           plusw2	equ	0xFDB
 24503                           fsr2h	equ	0xFDA
 24504                           fsr2l	equ	0xFD9
 24505                           status	equ	0xFD8
 24506                           
 24507 ;; *************** function _ENCx24_BankselSPI *****************
 24508 ;; Defined at:
 24509 ;;		line 61 in file "../../TCPIP Library/ethernet_drivers/encX24j600_spi.c"
 24510 ;; Parameters:    Size  Location     Type
 24511 ;;  a               1    wreg     enum E6725
 24512 ;; Auto vars:     Size  Location     Type
 24513 ;;  a               1    2[COMRAM] enum E6725
 24514 ;;  bank            1    3[COMRAM] unsigned char 
 24515 ;; Return value:  Size  Location     Type
 24516 ;;		None               void
 24517 ;; Registers used:
 24518 ;;		wreg, status,2, status,0, cstack
 24519 ;; Tracked objects:
 24520 ;;		On entry : 0/0
 24521 ;;		On exit  : 0/0
 24522 ;;		Unchanged: 0/0
 24523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24528 ;;Total ram usage:        2 bytes
 24529 ;; Hardware stack levels used:    1
 24530 ;; Hardware stack levels required when called:    4
 24531 ;; This function calls:
 24532 ;;		_SPI_ExchangeByte
 24533 ;; This function is called by:
 24534 ;;		_ENCx24_Read
 24535 ;;		_ENCx24_Write
 24536 ;;		_ENCx24_BFS
 24537 ;;		_ENCx24_BFC
 24538 ;;		_ETH_MACRead8
 24539 ;; This function uses a non-reentrant model
 24540 ;;
 24541                           
 24542                           	psect	text110
 24543  005A4E                     __ptext110:
 24544                           	opt stack 0
 24545  005A4E                     _ENCx24_BankselSPI:
 24546                           	opt stack 22
 24547                           
 24548                           ;incstack = 0
 24549                           ;ENCx24_BankselSPI@a stored from wreg
 24550  005A4E  6E03               	movwf	ENCx24_BankselSPI@a,c
 24551                           
 24552                           ;encX24j600_spi.c: 63: uint8_t bank;
 24553                           ;encX24j600_spi.c: 64: bank = a & 0xE0;
 24554  005A50  5003               	movf	ENCx24_BankselSPI@a,w,c
 24555  005A52  0BE0               	andlw	224
 24556  005A54  6E04               	movwf	ENCx24_BankselSPI@bank,c
 24557                           
 24558                           ;encX24j600_spi.c: 65: if( bank != last_bank && bank!=0X80)
 24559  005A56  0101               	movlb	1	; () banked
 24560  005A58  19B2               	xorwf	_last_bank& (0+255),w,b
 24561  005A5A  B4D8               	btfsc	status,2,c
 24562  005A5C  0012               	return	
 24563                           
 24564                           ; BSR set to: 1
 24565  005A5E  0E80               	movlw	128
 24566  005A60  1804               	xorwf	ENCx24_BankselSPI@bank,w,c
 24567  005A62  B4D8               	btfsc	status,2,c
 24568  005A64  0012               	return	
 24569                           
 24570                           ; BSR set to: 1
 24571                           ;encX24j600_spi.c: 66: {
 24572                           ;encX24j600_spi.c: 67: last_bank = bank;
 24573  005A66  C004  F1B2         	movff	ENCx24_BankselSPI@bank,_last_bank
 24574                           
 24575                           ; BSR set to: 1
 24576                           
 24577                           ;encX24j600_spi.c: 68: do{LATB3 = 0;} while(0);
 24578  005A6A  968A               	bcf	3978,3,c	;volatile
 24579  005A6C  D010               	goto	l7998
 24580  005A6E                     l7988:
 24581                           
 24582                           ; BSR set to: 1
 24583                           ;encX24j600_spi.c: 72: SPI_ExchangeByte(b0sel_inst);
 24584  005A6E  0EC0               	movlw	192
 24585  005A70  ECF3  F032         	call	_SPI_ExchangeByte
 24586                           
 24587                           ;encX24j600_spi.c: 73: break;
 24588  005A74  D015               	goto	l547
 24589  005A76                     l7990:
 24590                           
 24591                           ; BSR set to: 1
 24592                           ;encX24j600_spi.c: 75: SPI_ExchangeByte(b1sel_inst);
 24593  005A76  0EC2               	movlw	194
 24594  005A78  ECF3  F032         	call	_SPI_ExchangeByte
 24595                           
 24596                           ;encX24j600_spi.c: 76: break;
 24597  005A7C  D011               	goto	l547
 24598  005A7E                     l7992:
 24599                           
 24600                           ; BSR set to: 1
 24601                           ;encX24j600_spi.c: 78: SPI_ExchangeByte(b2sel_inst);
 24602  005A7E  0EC4               	movlw	196
 24603  005A80  ECF3  F032         	call	_SPI_ExchangeByte
 24604                           
 24605                           ;encX24j600_spi.c: 79: break;
 24606  005A84  D00D               	goto	l547
 24607  005A86                     l7994:
 24608                           
 24609                           ; BSR set to: 1
 24610                           ;encX24j600_spi.c: 81: SPI_ExchangeByte(b3sel_inst);
 24611  005A86  0EC6               	movlw	198
 24612  005A88  ECF3  F032         	call	_SPI_ExchangeByte
 24613                           
 24614                           ;encX24j600_spi.c: 82: break;
 24615  005A8C  D009               	goto	l547
 24616  005A8E                     l7998:
 24617                           
 24618                           ; BSR set to: 1
 24619  005A8E  5004               	movf	ENCx24_BankselSPI@bank,w,c
 24620                           
 24621                           ; Switch size 1, requested type "space"
 24622                           ; Number of cases is 5, Range of values is 0 to 224
 24623                           ; switch strategies available:
 24624                           ; Name         Instructions Cycles
 24625                           ; simple_byte           16     9 (average)
 24626                           ;	Chosen strategy is simple_byte
 24627  005A90  E0EE               	bz	l7988
 24628  005A92  0A20               	xorlw	32	; case 32
 24629  005A94  E0F0               	bz	l7990
 24630  005A96  0A60               	xorlw	96	; case 64
 24631  005A98  E0F2               	bz	l7992
 24632  005A9A  0A20               	xorlw	32	; case 96
 24633  005A9C  E0F4               	bz	l7994
 24634  005A9E  0A80               	xorlw	128	; case 224
 24635  005AA0                     l547:
 24636  005AA0  868A               	bsf	3978,3,c	;volatile
 24637  005AA2  0012               	return		;funcret
 24638  005AA4                     __end_of_ENCx24_BankselSPI:
 24639                           	opt stack 0
 24640                           tosu	equ	0xFFF
 24641                           tosh	equ	0xFFE
 24642                           tosl	equ	0xFFD
 24643                           pclath	equ	0xFFA
 24644                           tblptru	equ	0xFF8
 24645                           tblptrh	equ	0xFF7
 24646                           tblptrl	equ	0xFF6
 24647                           tablat	equ	0xFF5
 24648                           prodh	equ	0xFF4
 24649                           prodl	equ	0xFF3
 24650                           intcon	equ	0xFF2
 24651                           intcon2	equ	0xFF1
 24652                           indf0	equ	0xFEF
 24653                           postinc0	equ	0xFEE
 24654                           fsr0h	equ	0xFEA
 24655                           fsr0l	equ	0xFE9
 24656                           wreg	equ	0xFE8
 24657                           postinc1	equ	0xFE6
 24658                           plusw1	equ	0xFE3
 24659                           fsr1h	equ	0xFE2
 24660                           fsr1l	equ	0xFE1
 24661                           bsr	equ	0xFE0
 24662                           indf2	equ	0xFDF
 24663                           postinc2	equ	0xFDE
 24664                           postdec2	equ	0xFDD
 24665                           plusw2	equ	0xFDB
 24666                           fsr2h	equ	0xFDA
 24667                           fsr2l	equ	0xFD9
 24668                           status	equ	0xFD8
 24669                           
 24670 ;; *************** function _SPI_ExchangeByte *****************
 24671 ;; Defined at:
 24672 ;;		line 55 in file "../board_support_package/picdem2_net/mssp_spi_master.c"
 24673 ;; Parameters:    Size  Location     Type
 24674 ;;  v               1    wreg     unsigned char 
 24675 ;; Auto vars:     Size  Location     Type
 24676 ;;  v               1    1[COMRAM] unsigned char 
 24677 ;; Return value:  Size  Location     Type
 24678 ;;                  1    wreg      unsigned char 
 24679 ;; Registers used:
 24680 ;;		wreg, status,2
 24681 ;; Tracked objects:
 24682 ;;		On entry : 0/2
 24683 ;;		On exit  : 0/0
 24684 ;;		Unchanged: 0/0
 24685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24690 ;;Total ram usage:        1 bytes
 24691 ;; Hardware stack levels used:    1
 24692 ;; Hardware stack levels required when called:    3
 24693 ;; This function calls:
 24694 ;;		Nothing
 24695 ;; This function is called by:
 24696 ;;		_ETH_Init
 24697 ;;		_ETH_NextPacketUpdate
 24698 ;;		_ENCx24_BankselSPI
 24699 ;;		_ENCx24_Read
 24700 ;;		_ENCx24_Write
 24701 ;;		_ENCx24_BFS
 24702 ;;		_ENCx24_BFC
 24703 ;;		_ETH_Read8
 24704 ;;		_ETH_Read16
 24705 ;;		_ETH_Read32
 24706 ;;		_ETH_ReadBlock
 24707 ;;		_ETH_Write8
 24708 ;;		_ETH_Write16
 24709 ;;		_ETH_Write32
 24710 ;;		_ETH_WriteBlock
 24711 ;;		_ETH_Insert
 24712 ;;		_ETH_Set_TXRTS
 24713 ;;		_ETH_SetPktDec
 24714 ;;		_ETH_SetRXptr
 24715 ;;		_ETH_MACRead8
 24716 ;; This function uses a non-reentrant model
 24717 ;;
 24718                           
 24719                           	psect	text111
 24720  0065E6                     __ptext111:
 24721                           	opt stack 0
 24722  0065E6                     _SPI_ExchangeByte:
 24723                           	opt stack 23
 24724                           
 24725                           ;incstack = 0
 24726                           ;SPI_ExchangeByte@v stored from wreg
 24727  0065E6  6E02               	movwf	SPI_ExchangeByte@v,c
 24728                           
 24729                           ;mssp_spi_master.c: 57: SSP1BUF = v;
 24730  0065E8  C002  FFC9         	movff	SPI_ExchangeByte@v,4041	;volatile
 24731  0065EC                     l283:
 24732  0065EC  A0C7               	btfss	4039,0,c	;volatile
 24733  0065EE  D7FE               	goto	l283
 24734                           
 24735                           ;mssp_spi_master.c: 59: return SSPBUF;
 24736  0065F0  50C9               	movf	4041,w,c	;volatile
 24737  0065F2  0012               	return		;funcret
 24738  0065F4                     __end_of_SPI_ExchangeByte:
 24739                           	opt stack 0
 24740                           tosu	equ	0xFFF
 24741                           tosh	equ	0xFFE
 24742                           tosl	equ	0xFFD
 24743                           pclath	equ	0xFFA
 24744                           tblptru	equ	0xFF8
 24745                           tblptrh	equ	0xFF7
 24746                           tblptrl	equ	0xFF6
 24747                           tablat	equ	0xFF5
 24748                           prodh	equ	0xFF4
 24749                           prodl	equ	0xFF3
 24750                           intcon	equ	0xFF2
 24751                           intcon2	equ	0xFF1
 24752                           indf0	equ	0xFEF
 24753                           postinc0	equ	0xFEE
 24754                           fsr0h	equ	0xFEA
 24755                           fsr0l	equ	0xFE9
 24756                           wreg	equ	0xFE8
 24757                           postinc1	equ	0xFE6
 24758                           plusw1	equ	0xFE3
 24759                           fsr1h	equ	0xFE2
 24760                           fsr1l	equ	0xFE1
 24761                           bsr	equ	0xFE0
 24762                           indf2	equ	0xFDF
 24763                           postinc2	equ	0xFDE
 24764                           postdec2	equ	0xFDD
 24765                           plusw2	equ	0xFDB
 24766                           fsr2h	equ	0xFDA
 24767                           fsr2l	equ	0xFD9
 24768                           status	equ	0xFD8
 24769                           
 24770 ;; *************** function _DEMO_UDP_ClaimIPCheck *****************
 24771 ;; Defined at:
 24772 ;;		line 46 in file "udp_demo.c"
 24773 ;; Parameters:    Size  Location     Type
 24774 ;;		None
 24775 ;; Auto vars:     Size  Location     Type
 24776 ;;  ret             1    2[COMRAM] unsigned char 
 24777 ;; Return value:  Size  Location     Type
 24778 ;;		None               void
 24779 ;; Registers used:
 24780 ;;		wreg, status,2, status,0
 24781 ;; Tracked objects:
 24782 ;;		On entry : 0/1
 24783 ;;		On exit  : F/1
 24784 ;;		Unchanged: 0/0
 24785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24788 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24789 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24790 ;;Total ram usage:        2 bytes
 24791 ;; Hardware stack levels used:    1
 24792 ;; Hardware stack levels required when called:    3
 24793 ;; This function calls:
 24794 ;;		Nothing
 24795 ;; This function is called by:
 24796 ;;		_DEMO_UDP_Recv
 24797 ;;		_DEMO_UDP_Send
 24798 ;; This function uses a non-reentrant model
 24799 ;;
 24800                           
 24801                           	psect	text112
 24802  0064B2                     __ptext112:
 24803                           	opt stack 0
 24804  0064B2                     _DEMO_UDP_ClaimIPCheck:
 24805                           	opt stack 22
 24806                           
 24807                           ;udp_demo.c: 48: bool ret;
 24808                           ;udp_demo.c: 49: if(claim == 1)
 24809                           
 24810                           ;incstack = 0
 24811  0064B2  0101               	movlb	1	; () banked
 24812  0064B4  05B0               	decf	_claim& (0+255),w,b
 24813  0064B6  E103               	bnz	l8742
 24814                           
 24815                           ; BSR set to: 1
 24816                           ;udp_demo.c: 50: {
 24817                           ;udp_demo.c: 51: ret = 1;
 24818  0064B8  0E01               	movlw	1
 24819  0064BA  6E03               	movwf	DEMO_UDP_ClaimIPCheck@ret,c
 24820                           
 24821                           ;udp_demo.c: 52: }
 24822  0064BC  D003               	goto	l8746
 24823  0064BE                     l8742:
 24824                           
 24825                           ; BSR set to: 1
 24826                           ;udp_demo.c: 53: else if(claim == 0)
 24827  0064BE  51B0               	movf	_claim& (0+255),w,b
 24828  0064C0  E101               	bnz	l8746
 24829                           
 24830                           ; BSR set to: 1
 24831                           ;udp_demo.c: 54: {
 24832                           ;udp_demo.c: 55: ret = 0;
 24833  0064C2  6A03               	clrf	DEMO_UDP_ClaimIPCheck@ret,c
 24834  0064C4                     l8746:
 24835                           
 24836                           ; BSR set to: 1
 24837                           ;udp_demo.c: 56: }
 24838                           ;udp_demo.c: 57: return ret;
 24839  0064C4  C003  F002         	movff	DEMO_UDP_ClaimIPCheck@ret,??_DEMO_UDP_ClaimIPCheck
 24840  0064C8  3002               	rrcf	??_DEMO_UDP_ClaimIPCheck,w,c
 24841                           
 24842                           ; BSR set to: 1
 24843  0064CA  0012               	return		;funcret
 24844  0064CC                     __end_of_DEMO_UDP_ClaimIPCheck:
 24845                           	opt stack 0
 24846                           tosu	equ	0xFFF
 24847                           tosh	equ	0xFFE
 24848                           tosl	equ	0xFFD
 24849                           pclath	equ	0xFFA
 24850                           tblptru	equ	0xFF8
 24851                           tblptrh	equ	0xFF7
 24852                           tblptrl	equ	0xFF6
 24853                           tablat	equ	0xFF5
 24854                           prodh	equ	0xFF4
 24855                           prodl	equ	0xFF3
 24856                           intcon	equ	0xFF2
 24857                           intcon2	equ	0xFF1
 24858                           indf0	equ	0xFEF
 24859                           postinc0	equ	0xFEE
 24860                           fsr0h	equ	0xFEA
 24861                           fsr0l	equ	0xFE9
 24862                           wreg	equ	0xFE8
 24863                           postinc1	equ	0xFE6
 24864                           plusw1	equ	0xFE3
 24865                           fsr1h	equ	0xFE2
 24866                           fsr1l	equ	0xFE1
 24867                           bsr	equ	0xFE0
 24868                           indf2	equ	0xFDF
 24869                           postinc2	equ	0xFDE
 24870                           postdec2	equ	0xFDD
 24871                           plusw2	equ	0xFDB
 24872                           fsr2h	equ	0xFDA
 24873                           fsr2l	equ	0xFD9
 24874                           status	equ	0xFD8
 24875                           
 24876 ;; *************** function _ADC_GetConversion *****************
 24877 ;; Defined at:
 24878 ;;		line 106 in file "../board_support_package/picdem2_net/adc.c"
 24879 ;; Parameters:    Size  Location     Type
 24880 ;;  channel         1    wreg     enum E6609
 24881 ;; Auto vars:     Size  Location     Type
 24882 ;;  channel         1    4[COMRAM] enum E6609
 24883 ;; Return value:  Size  Location     Type
 24884 ;;                  2    1[COMRAM] unsigned int 
 24885 ;; Registers used:
 24886 ;;		wreg, status,2, status,0
 24887 ;; Tracked objects:
 24888 ;;		On entry : 0/1
 24889 ;;		On exit  : 0/0
 24890 ;;		Unchanged: 0/0
 24891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24894 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24895 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24896 ;;Total ram usage:        4 bytes
 24897 ;; Hardware stack levels used:    1
 24898 ;; Hardware stack levels required when called:    3
 24899 ;; This function calls:
 24900 ;;		Nothing
 24901 ;; This function is called by:
 24902 ;;		_DEMO_UDP_MeasureTemp
 24903 ;;		_DEMO_UDP_Send
 24904 ;; This function uses a non-reentrant model
 24905 ;;
 24906                           
 24907                           	psect	text113
 24908  0061AE                     __ptext113:
 24909                           	opt stack 0
 24910  0061AE                     _ADC_GetConversion:
 24911                           	opt stack 21
 24912                           
 24913                           ; BSR set to: 1
 24914                           ;incstack = 0
 24915                           ;ADC_GetConversion@channel stored from wreg
 24916  0061AE  6E05               	movwf	ADC_GetConversion@channel,c
 24917                           
 24918                           ;adc.c: 109: ADCON0bits.CHS = channel;
 24919  0061B0  C005  F004         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 24920  0061B4  4604               	rlncf	??_ADC_GetConversion,f,c
 24921  0061B6  4604               	rlncf	??_ADC_GetConversion,f,c
 24922  0061B8  50C2               	movf	4034,w,c	;volatile
 24923  0061BA  1804               	xorwf	??_ADC_GetConversion,w,c
 24924  0061BC  0BC3               	andlw	-61
 24925  0061BE  1804               	xorwf	??_ADC_GetConversion,w,c
 24926  0061C0  6EC2               	movwf	4034,c	;volatile
 24927                           
 24928                           ;adc.c: 112: ADCON0bits.ADON = 1;
 24929  0061C2  80C2               	bsf	4034,0,c	;volatile
 24930                           
 24931                           ;adc.c: 115: _delay((unsigned long)((5)*(41666667UL/4000000.0)));
 24932  0061C4  0E11               	movlw	17
 24933  0061C6                     u16077:
 24934  0061C6  2EE8               	decfsz	wreg,f,c
 24935  0061C8  D7FE               	goto	u16077
 24936  0061CA  F000               	nop	
 24937                           
 24938                           ;adc.c: 118: ADCON0bits.GO_nDONE = 1;
 24939  0061CC  82C2               	bsf	4034,1,c	;volatile
 24940  0061CE                     l33:
 24941  0061CE  B2C2               	btfsc	4034,1,c	;volatile
 24942  0061D0  D7FE               	goto	l33
 24943                           
 24944                           ;adc.c: 123: }
 24945                           ;adc.c: 127: return (ADRES);
 24946  0061D2  CFC3 F002          	movff	4035,?_ADC_GetConversion	;volatile
 24947  0061D6  CFC4 F003          	movff	4036,?_ADC_GetConversion+1	;volatile
 24948  0061DA  0012               	return		;funcret
 24949  0061DC                     __end_of_ADC_GetConversion:
 24950                           	opt stack 0
 24951                           tosu	equ	0xFFF
 24952                           tosh	equ	0xFFE
 24953                           tosl	equ	0xFFD
 24954                           pclath	equ	0xFFA
 24955                           tblptru	equ	0xFF8
 24956                           tblptrh	equ	0xFF7
 24957                           tblptrl	equ	0xFF6
 24958                           tablat	equ	0xFF5
 24959                           prodh	equ	0xFF4
 24960                           prodl	equ	0xFF3
 24961                           intcon	equ	0xFF2
 24962                           intcon2	equ	0xFF1
 24963                           indf0	equ	0xFEF
 24964                           postinc0	equ	0xFEE
 24965                           fsr0h	equ	0xFEA
 24966                           fsr0l	equ	0xFE9
 24967                           wreg	equ	0xFE8
 24968                           postinc1	equ	0xFE6
 24969                           plusw1	equ	0xFE3
 24970                           fsr1h	equ	0xFE2
 24971                           fsr1l	equ	0xFE1
 24972                           bsr	equ	0xFE0
 24973                           indf2	equ	0xFDF
 24974                           postinc2	equ	0xFDE
 24975                           postdec2	equ	0xFDD
 24976                           plusw2	equ	0xFDB
 24977                           fsr2h	equ	0xFDA
 24978                           fsr2l	equ	0xFD9
 24979                           status	equ	0xFD8
 24980                           
 24981 ;; *************** function _DEMO_UDP_IPLockTimer *****************
 24982 ;; Defined at:
 24983 ;;		line 68 in file "udp_demo.c"
 24984 ;; Parameters:    Size  Location     Type
 24985 ;;		None
 24986 ;; Auto vars:     Size  Location     Type
 24987 ;;		None
 24988 ;; Return value:  Size  Location     Type
 24989 ;;		None               void
 24990 ;; Registers used:
 24991 ;;		wreg, status,2, cstack
 24992 ;; Tracked objects:
 24993 ;;		On entry : F/1
 24994 ;;		On exit  : 0/0
 24995 ;;		Unchanged: 0/0
 24996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25001 ;;Total ram usage:        0 bytes
 25002 ;; Hardware stack levels used:    1
 25003 ;; Hardware stack levels required when called:    4
 25004 ;; This function calls:
 25005 ;;		_DEMO_UDP_SetClaimIP
 25006 ;; This function is called by:
 25007 ;;		_main
 25008 ;; This function uses a non-reentrant model
 25009 ;;
 25010                           
 25011                           	psect	text114
 25012  006540                     __ptext114:
 25013                           	opt stack 0
 25014  006540                     _DEMO_UDP_IPLockTimer:
 25015                           	opt stack 26
 25016                           
 25017                           ; BSR set to: 1
 25018                           ;udp_demo.c: 71: if(!idle_pkt_received)
 25019                           
 25020                           ;incstack = 0
 25021  006540  51B1               	movf	_idle_pkt_received& (0+255),w,b
 25022  006542  E103               	bnz	l10490
 25023                           
 25024                           ; BSR set to: 1
 25025                           ;udp_demo.c: 72: {
 25026                           ;udp_demo.c: 73: DEMO_UDP_SetClaimIP(0);
 25027  006544  0E00               	movlw	0
 25028  006546  EF21  F033         	goto	_DEMO_UDP_SetClaimIP
 25029  00654A                     l10490:
 25030                           
 25031                           ; BSR set to: 1
 25032                           ;udp_demo.c: 75: else
 25033                           ;udp_demo.c: 76: {
 25034                           ;udp_demo.c: 77: DEMO_UDP_SetClaimIP(1);
 25035  00654A  0E01               	movlw	1
 25036  00654C  EC21  F033         	call	_DEMO_UDP_SetClaimIP
 25037                           
 25038                           ;udp_demo.c: 78: idle_pkt_received = 0;
 25039  006550  0101               	movlb	1	; () banked
 25040  006552  6BB1               	clrf	_idle_pkt_received& (0+255),b
 25041  006554  0012               	return		;funcret
 25042  006556                     __end_of_DEMO_UDP_IPLockTimer:
 25043                           	opt stack 0
 25044                           tosu	equ	0xFFF
 25045                           tosh	equ	0xFFE
 25046                           tosl	equ	0xFFD
 25047                           pclath	equ	0xFFA
 25048                           tblptru	equ	0xFF8
 25049                           tblptrh	equ	0xFF7
 25050                           tblptrl	equ	0xFF6
 25051                           tablat	equ	0xFF5
 25052                           prodh	equ	0xFF4
 25053                           prodl	equ	0xFF3
 25054                           intcon	equ	0xFF2
 25055                           intcon2	equ	0xFF1
 25056                           indf0	equ	0xFEF
 25057                           postinc0	equ	0xFEE
 25058                           fsr0h	equ	0xFEA
 25059                           fsr0l	equ	0xFE9
 25060                           wreg	equ	0xFE8
 25061                           postinc1	equ	0xFE6
 25062                           plusw1	equ	0xFE3
 25063                           fsr1h	equ	0xFE2
 25064                           fsr1l	equ	0xFE1
 25065                           bsr	equ	0xFE0
 25066                           indf2	equ	0xFDF
 25067                           postinc2	equ	0xFDE
 25068                           postdec2	equ	0xFDD
 25069                           plusw2	equ	0xFDB
 25070                           fsr2h	equ	0xFDA
 25071                           fsr2l	equ	0xFD9
 25072                           status	equ	0xFD8
 25073                           
 25074 ;; *************** function _DEMO_UDP_SetClaimIP *****************
 25075 ;; Defined at:
 25076 ;;		line 61 in file "udp_demo.c"
 25077 ;; Parameters:    Size  Location     Type
 25078 ;;  claim_ip        1    wreg     unsigned char 
 25079 ;; Auto vars:     Size  Location     Type
 25080 ;;  claim_ip        1    1[COMRAM] unsigned char 
 25081 ;; Return value:  Size  Location     Type
 25082 ;;		None               void
 25083 ;; Registers used:
 25084 ;;		wreg
 25085 ;; Tracked objects:
 25086 ;;		On entry : E/1
 25087 ;;		On exit  : 0/0
 25088 ;;		Unchanged: 0/0
 25089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25094 ;;Total ram usage:        1 bytes
 25095 ;; Hardware stack levels used:    1
 25096 ;; Hardware stack levels required when called:    3
 25097 ;; This function calls:
 25098 ;;		Nothing
 25099 ;; This function is called by:
 25100 ;;		_DEMO_UDP_IPLockTimer
 25101 ;;		_DEMO_UDP_Recv
 25102 ;; This function uses a non-reentrant model
 25103 ;;
 25104                           
 25105                           	psect	text115
 25106  006642                     __ptext115:
 25107                           	opt stack 0
 25108  006642                     _DEMO_UDP_SetClaimIP:
 25109                           	opt stack 22
 25110                           
 25111                           ;incstack = 0
 25112                           ;DEMO_UDP_SetClaimIP@claim_ip stored from wreg
 25113  006642  6E02               	movwf	DEMO_UDP_SetClaimIP@claim_ip,c
 25114                           
 25115                           ;udp_demo.c: 63: claim = claim_ip;
 25116  006644  C002  F1B0         	movff	DEMO_UDP_SetClaimIP@claim_ip,_claim
 25117  006648  0012               	return		;funcret
 25118  00664A                     __end_of_DEMO_UDP_SetClaimIP:
 25119                           	opt stack 0
 25120                           tosu	equ	0xFFF
 25121                           tosh	equ	0xFFE
 25122                           tosl	equ	0xFFD
 25123                           pclath	equ	0xFFA
 25124                           tblptru	equ	0xFF8
 25125                           tblptrh	equ	0xFF7
 25126                           tblptrl	equ	0xFF6
 25127                           tablat	equ	0xFF5
 25128                           prodh	equ	0xFF4
 25129                           prodl	equ	0xFF3
 25130                           intcon	equ	0xFF2
 25131                           intcon2	equ	0xFF1
 25132                           indf0	equ	0xFEF
 25133                           postinc0	equ	0xFEE
 25134                           fsr0h	equ	0xFEA
 25135                           fsr0l	equ	0xFE9
 25136                           wreg	equ	0xFE8
 25137                           postinc1	equ	0xFE6
 25138                           plusw1	equ	0xFE3
 25139                           fsr1h	equ	0xFE2
 25140                           fsr1l	equ	0xFE1
 25141                           bsr	equ	0xFE0
 25142                           indf2	equ	0xFDF
 25143                           postinc2	equ	0xFDE
 25144                           postdec2	equ	0xFDD
 25145                           plusw2	equ	0xFDB
 25146                           fsr2h	equ	0xFDA
 25147                           fsr2l	equ	0xFD9
 25148                           status	equ	0xFD8
 25149                           
 25150 ;; *************** function _low_isr *****************
 25151 ;; Defined at:
 25152 ;;		line 61 in file "main.c"
 25153 ;; Parameters:    Size  Location     Type
 25154 ;;		None
 25155 ;; Auto vars:     Size  Location     Type
 25156 ;;		None
 25157 ;; Return value:  Size  Location     Type
 25158 ;;		None               void
 25159 ;; Registers used:
 25160 ;;		None
 25161 ;; Tracked objects:
 25162 ;;		On entry : 0/0
 25163 ;;		On exit  : 0/0
 25164 ;;		Unchanged: 0/0
 25165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25169 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25170 ;;Total ram usage:        1 bytes
 25171 ;; Hardware stack levels used:    1
 25172 ;; Hardware stack levels required when called:    2
 25173 ;; This function calls:
 25174 ;;		Nothing
 25175 ;; This function is called by:
 25176 ;;		Interrupt level 1
 25177 ;; This function uses a non-reentrant model
 25178 ;;
 25179                           
 25180                           	psect	intcodelo
 25181  000018                     __pintcodelo:
 25182                           	opt stack 0
 25183  000018                     _low_isr:
 25184                           	opt stack 15
 25185                           
 25186                           ;incstack = 0
 25187  000018  805E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 25188  00001A  CFE0 F001          	movff	bsr,??_low_isr
 25189                           
 25190                           ;main.c: 66: __nop();
 25191  00001E  F000               	nop	
 25192  000020  C001  FFE0         	movff	??_low_isr,bsr
 25193  000024  905E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 25194  000026  0010               	retfie	
 25195  000028                     __end_of_low_isr:
 25196                           	opt stack 0
 25197                           tosu	equ	0xFFF
 25198                           tosh	equ	0xFFE
 25199                           tosl	equ	0xFFD
 25200                           pclath	equ	0xFFA
 25201                           tblptru	equ	0xFF8
 25202                           tblptrh	equ	0xFF7
 25203                           tblptrl	equ	0xFF6
 25204                           tablat	equ	0xFF5
 25205                           prodh	equ	0xFF4
 25206                           prodl	equ	0xFF3
 25207                           intcon	equ	0xFF2
 25208                           intcon2	equ	0xFF1
 25209                           indf0	equ	0xFEF
 25210                           postinc0	equ	0xFEE
 25211                           fsr0h	equ	0xFEA
 25212                           fsr0l	equ	0xFE9
 25213                           wreg	equ	0xFE8
 25214                           postinc1	equ	0xFE6
 25215                           plusw1	equ	0xFE3
 25216                           fsr1h	equ	0xFE2
 25217                           fsr1l	equ	0xFE1
 25218                           bsr	equ	0xFE0
 25219                           indf2	equ	0xFDF
 25220                           postinc2	equ	0xFDE
 25221                           postdec2	equ	0xFDD
 25222                           plusw2	equ	0xFDB
 25223                           fsr2h	equ	0xFDA
 25224                           fsr2l	equ	0xFD9
 25225                           status	equ	0xFD8
 25226                           
 25227 ;; *************** function _high_isr *****************
 25228 ;; Defined at:
 25229 ;;		line 56 in file "main.c"
 25230 ;; Parameters:    Size  Location     Type
 25231 ;;		None
 25232 ;; Auto vars:     Size  Location     Type
 25233 ;;		None
 25234 ;; Return value:  Size  Location     Type
 25235 ;;		None               void
 25236 ;; Registers used:
 25237 ;;		wreg, status,2, status,0, cstack
 25238 ;; Tracked objects:
 25239 ;;		On entry : 0/0
 25240 ;;		On exit  : 0/0
 25241 ;;		Unchanged: 0/0
 25242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25247 ;;Total ram usage:        0 bytes
 25248 ;; Hardware stack levels used:    1
 25249 ;; Hardware stack levels required when called:    1
 25250 ;; This function calls:
 25251 ;;		_rtcc_handler
 25252 ;; This function is called by:
 25253 ;;		Interrupt level 2
 25254 ;; This function uses a non-reentrant model
 25255 ;;
 25256                           
 25257                           	psect	intcode
 25258  000008                     __pintcode:
 25259                           	opt stack 0
 25260  000008                     _high_isr:
 25261                           	opt stack 15
 25262                           
 25263                           ;incstack = 0
 25264  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 25265  00000A  EF25  F033         	goto	int_func
 25266                           tosu	equ	0xFFF
 25267                           tosh	equ	0xFFE
 25268                           tosl	equ	0xFFD
 25269                           pclath	equ	0xFFA
 25270                           tblptru	equ	0xFF8
 25271                           tblptrh	equ	0xFF7
 25272                           tblptrl	equ	0xFF6
 25273                           tablat	equ	0xFF5
 25274                           prodh	equ	0xFF4
 25275                           prodl	equ	0xFF3
 25276                           intcon	equ	0xFF2
 25277                           intcon2	equ	0xFF1
 25278                           indf0	equ	0xFEF
 25279                           postinc0	equ	0xFEE
 25280                           fsr0h	equ	0xFEA
 25281                           fsr0l	equ	0xFE9
 25282                           wreg	equ	0xFE8
 25283                           postinc1	equ	0xFE6
 25284                           plusw1	equ	0xFE3
 25285                           fsr1h	equ	0xFE2
 25286                           fsr1l	equ	0xFE1
 25287                           bsr	equ	0xFE0
 25288                           indf2	equ	0xFDF
 25289                           postinc2	equ	0xFDE
 25290                           postdec2	equ	0xFDD
 25291                           plusw2	equ	0xFDB
 25292                           fsr2h	equ	0xFDA
 25293                           fsr2l	equ	0xFD9
 25294                           status	equ	0xFD8
 25295                           
 25296                           	psect	intcode_body
 25297  00664A                     __pintcode_body:
 25298                           	opt stack 15
 25299  00664A                     int_func:
 25300                           	opt stack 15
 25301                           
 25302                           ;main.c: 58: rtcc_handler();
 25303  00664A  EC58  F031         	call	_rtcc_handler	;wreg free
 25304  00664E  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25305  006650  0011               	retfie		f
 25306  006652                     __end_of_high_isr:
 25307                           	opt stack 0
 25308                           tosu	equ	0xFFF
 25309                           tosh	equ	0xFFE
 25310                           tosl	equ	0xFFD
 25311                           pclath	equ	0xFFA
 25312                           tblptru	equ	0xFF8
 25313                           tblptrh	equ	0xFF7
 25314                           tblptrl	equ	0xFF6
 25315                           tablat	equ	0xFF5
 25316                           prodh	equ	0xFF4
 25317                           prodl	equ	0xFF3
 25318                           intcon	equ	0xFF2
 25319                           intcon2	equ	0xFF1
 25320                           indf0	equ	0xFEF
 25321                           postinc0	equ	0xFEE
 25322                           fsr0h	equ	0xFEA
 25323                           fsr0l	equ	0xFE9
 25324                           wreg	equ	0xFE8
 25325                           postinc1	equ	0xFE6
 25326                           plusw1	equ	0xFE3
 25327                           fsr1h	equ	0xFE2
 25328                           fsr1l	equ	0xFE1
 25329                           bsr	equ	0xFE0
 25330                           indf2	equ	0xFDF
 25331                           postinc2	equ	0xFDE
 25332                           postdec2	equ	0xFDD
 25333                           plusw2	equ	0xFDB
 25334                           fsr2h	equ	0xFDA
 25335                           fsr2l	equ	0xFD9
 25336                           status	equ	0xFD8
 25337                           
 25338 ;; *************** function _rtcc_handler *****************
 25339 ;; Defined at:
 25340 ;;		line 122 in file "../board_support_package/picdem2_net/rtcc.c"
 25341 ;; Parameters:    Size  Location     Type
 25342 ;;		None
 25343 ;; Auto vars:     Size  Location     Type
 25344 ;;		None
 25345 ;; Return value:  Size  Location     Type
 25346 ;;		None               void
 25347 ;; Registers used:
 25348 ;;		wreg, status,2, status,0
 25349 ;; Tracked objects:
 25350 ;;		On entry : 0/0
 25351 ;;		On exit  : 0/0
 25352 ;;		Unchanged: 0/0
 25353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25358 ;;Total ram usage:        0 bytes
 25359 ;; Hardware stack levels used:    1
 25360 ;; This function calls:
 25361 ;;		Nothing
 25362 ;; This function is called by:
 25363 ;;		_high_isr
 25364 ;; This function uses a non-reentrant model
 25365 ;;
 25366                           
 25367                           	psect	text118
 25368  0062B0                     __ptext118:
 25369                           	opt stack 0
 25370  0062B0                     _rtcc_handler:
 25371                           	opt stack 15
 25372                           
 25373                           ;rtcc.c: 124: if(TMR1IE && TMR1IF)
 25374                           
 25375                           ;incstack = 0
 25376  0062B0  B09D               	btfsc	3997,0,c	;volatile
 25377  0062B2  A09E               	btfss	3998,0,c	;volatile
 25378  0062B4  0012               	return	
 25379                           
 25380                           ;rtcc.c: 125: {
 25381                           ;rtcc.c: 126: TMR1IF = 0;
 25382  0062B6  909E               	bcf	3998,0,c	;volatile
 25383                           
 25384                           ;rtcc.c: 127: TMR1ON = 0;
 25385  0062B8  90CD               	bcf	4045,0,c	;volatile
 25386                           
 25387                           ;rtcc.c: 128: TMR1 = 32768UL;
 25388  0062BA  0E80               	movlw	128
 25389  0062BC  6ECF               	movwf	4047,c	;volatile
 25390  0062BE  6ACE               	clrf	4046,c	;volatile
 25391                           
 25392                           ;rtcc.c: 129: TMR1ON = 1;
 25393  0062C0  80CD               	bsf	4045,0,c	;volatile
 25394                           
 25395                           ;rtcc.c: 130: deviceTime++;
 25396  0062C2  0102               	movlb	2	; () banked
 25397  0062C4  2BF1               	incf	_deviceTime& (0+255),f,b	;volatile
 25398  0062C6  0E00               	movlw	0
 25399  0062C8  23F2               	addwfc	(_deviceTime+1)& (0+255),f,b	;volatile
 25400  0062CA  23F3               	addwfc	(_deviceTime+2)& (0+255),f,b	;volatile
 25401  0062CC  23F4               	addwfc	(_deviceTime+3)& (0+255),f,b	;volatile
 25402                           
 25403                           ; BSR set to: 2
 25404                           ;rtcc.c: 131: localTime++;
 25405  0062CE  2BF5               	incf	_localTime& (0+255),f,b	;volatile
 25406  0062D0  23F6               	addwfc	(_localTime+1)& (0+255),f,b	;volatile
 25407  0062D2  23F7               	addwfc	(_localTime+2)& (0+255),f,b	;volatile
 25408  0062D4  23F8               	addwfc	(_localTime+3)& (0+255),f,b	;volatile
 25409  0062D6  0C00               	retlw	0	;funcret
 25410  0062D8                     __end_of_rtcc_handler:
 25411                           	opt stack 0
 25412                           tosu	equ	0xFFF
 25413                           tosh	equ	0xFFE
 25414                           tosl	equ	0xFFD
 25415                           pclath	equ	0xFFA
 25416                           tblptru	equ	0xFF8
 25417                           tblptrh	equ	0xFF7
 25418                           tblptrl	equ	0xFF6
 25419                           tablat	equ	0xFF5
 25420                           prodh	equ	0xFF4
 25421                           prodl	equ	0xFF3
 25422                           intcon	equ	0xFF2
 25423                           intcon2	equ	0xFF1
 25424                           indf0	equ	0xFEF
 25425                           postinc0	equ	0xFEE
 25426                           fsr0h	equ	0xFEA
 25427                           fsr0l	equ	0xFE9
 25428                           wreg	equ	0xFE8
 25429                           postinc1	equ	0xFE6
 25430                           plusw1	equ	0xFE3
 25431                           fsr1h	equ	0xFE2
 25432                           fsr1l	equ	0xFE1
 25433                           bsr	equ	0xFE0
 25434                           indf2	equ	0xFDF
 25435                           postinc2	equ	0xFDE
 25436                           postdec2	equ	0xFDD
 25437                           plusw2	equ	0xFDB
 25438                           fsr2h	equ	0xFDA
 25439                           fsr2l	equ	0xFD9
 25440                           status	equ	0xFD8
 25441                           tosu	equ	0xFFF
 25442                           tosh	equ	0xFFE
 25443                           tosl	equ	0xFFD
 25444                           pclath	equ	0xFFA
 25445                           tblptru	equ	0xFF8
 25446                           tblptrh	equ	0xFF7
 25447                           tblptrl	equ	0xFF6
 25448                           tablat	equ	0xFF5
 25449                           prodh	equ	0xFF4
 25450                           prodl	equ	0xFF3
 25451                           intcon	equ	0xFF2
 25452                           intcon2	equ	0xFF1
 25453                           indf0	equ	0xFEF
 25454                           postinc0	equ	0xFEE
 25455                           fsr0h	equ	0xFEA
 25456                           fsr0l	equ	0xFE9
 25457                           wreg	equ	0xFE8
 25458                           postinc1	equ	0xFE6
 25459                           plusw1	equ	0xFE3
 25460                           fsr1h	equ	0xFE2
 25461                           fsr1l	equ	0xFE1
 25462                           bsr	equ	0xFE0
 25463                           indf2	equ	0xFDF
 25464                           postinc2	equ	0xFDE
 25465                           postdec2	equ	0xFDD
 25466                           plusw2	equ	0xFDB
 25467                           fsr2h	equ	0xFDA
 25468                           fsr2l	equ	0xFD9
 25469                           status	equ	0xFD8
 25470                           
 25471                           	psect	text119
 25472  000000                     __ptext119:
 25473                           	opt stack 0
 25474                           tosu	equ	0xFFF
 25475                           tosh	equ	0xFFE
 25476                           tosl	equ	0xFFD
 25477                           pclath	equ	0xFFA
 25478                           tblptru	equ	0xFF8
 25479                           tblptrh	equ	0xFF7
 25480                           tblptrl	equ	0xFF6
 25481                           tablat	equ	0xFF5
 25482                           prodh	equ	0xFF4
 25483                           prodl	equ	0xFF3
 25484                           intcon	equ	0xFF2
 25485                           intcon2	equ	0xFF1
 25486                           indf0	equ	0xFEF
 25487                           postinc0	equ	0xFEE
 25488                           fsr0h	equ	0xFEA
 25489                           fsr0l	equ	0xFE9
 25490                           wreg	equ	0xFE8
 25491                           postinc1	equ	0xFE6
 25492                           plusw1	equ	0xFE3
 25493                           fsr1h	equ	0xFE2
 25494                           fsr1l	equ	0xFE1
 25495                           bsr	equ	0xFE0
 25496                           indf2	equ	0xFDF
 25497                           postinc2	equ	0xFDE
 25498                           postdec2	equ	0xFDD
 25499                           plusw2	equ	0xFDB
 25500                           fsr2h	equ	0xFDA
 25501                           fsr2l	equ	0xFD9
 25502                           status	equ	0xFD8
 25503                           
 25504                           	psect	rparam
 25505  0000                     tosu	equ	0xFFF
 25506                           tosh	equ	0xFFE
 25507                           tosl	equ	0xFFD
 25508                           pclath	equ	0xFFA
 25509                           tblptru	equ	0xFF8
 25510                           tblptrh	equ	0xFF7
 25511                           tblptrl	equ	0xFF6
 25512                           tablat	equ	0xFF5
 25513                           prodh	equ	0xFF4
 25514                           prodl	equ	0xFF3
 25515                           intcon	equ	0xFF2
 25516                           intcon2	equ	0xFF1
 25517                           indf0	equ	0xFEF
 25518                           postinc0	equ	0xFEE
 25519                           fsr0h	equ	0xFEA
 25520                           fsr0l	equ	0xFE9
 25521                           wreg	equ	0xFE8
 25522                           postinc1	equ	0xFE6
 25523                           plusw1	equ	0xFE3
 25524                           fsr1h	equ	0xFE2
 25525                           fsr1l	equ	0xFE1
 25526                           bsr	equ	0xFE0
 25527                           indf2	equ	0xFDF
 25528                           postinc2	equ	0xFDE
 25529                           postdec2	equ	0xFDD
 25530                           plusw2	equ	0xFDB
 25531                           fsr2h	equ	0xFDA
 25532                           fsr2l	equ	0xFD9
 25533                           status	equ	0xFD8
 25534                           
 25535                           	psect	temp
 25536  00005E                     btemp:
 25537                           	opt stack 0
 25538  00005E                     	ds	1
 25539  0000                     int$flags	set	btemp
 25540                           tosu	equ	0xFFF
 25541                           tosh	equ	0xFFE
 25542                           tosl	equ	0xFFD
 25543                           pclath	equ	0xFFA
 25544                           tblptru	equ	0xFF8
 25545                           tblptrh	equ	0xFF7
 25546                           tblptrl	equ	0xFF6
 25547                           tablat	equ	0xFF5
 25548                           prodh	equ	0xFF4
 25549                           prodl	equ	0xFF3
 25550                           intcon	equ	0xFF2
 25551                           intcon2	equ	0xFF1
 25552                           indf0	equ	0xFEF
 25553                           postinc0	equ	0xFEE
 25554                           fsr0h	equ	0xFEA
 25555                           fsr0l	equ	0xFE9
 25556                           wreg	equ	0xFE8
 25557                           postinc1	equ	0xFE6
 25558                           plusw1	equ	0xFE3
 25559                           fsr1h	equ	0xFE2
 25560                           fsr1l	equ	0xFE1
 25561                           bsr	equ	0xFE0
 25562                           indf2	equ	0xFDF
 25563                           postinc2	equ	0xFDE
 25564                           postdec2	equ	0xFDD
 25565                           plusw2	equ	0xFDB
 25566                           fsr2h	equ	0xFDA
 25567                           fsr2l	equ	0xFD9
 25568                           status	equ	0xFD8
 25569                           tosu	equ	0xFFF
 25570                           tosh	equ	0xFFE
 25571                           tosl	equ	0xFFD
 25572                           pclath	equ	0xFFA
 25573                           tblptru	equ	0xFF8
 25574                           tblptrh	equ	0xFF7
 25575                           tblptrl	equ	0xFF6
 25576                           tablat	equ	0xFF5
 25577                           prodh	equ	0xFF4
 25578                           prodl	equ	0xFF3
 25579                           intcon	equ	0xFF2
 25580                           intcon2	equ	0xFF1
 25581                           indf0	equ	0xFEF
 25582                           postinc0	equ	0xFEE
 25583                           fsr0h	equ	0xFEA
 25584                           fsr0l	equ	0xFE9
 25585                           wreg	equ	0xFE8
 25586                           postinc1	equ	0xFE6
 25587                           plusw1	equ	0xFE3
 25588                           fsr1h	equ	0xFE2
 25589                           fsr1l	equ	0xFE1
 25590                           bsr	equ	0xFE0
 25591                           indf2	equ	0xFDF
 25592                           postinc2	equ	0xFDE
 25593                           postdec2	equ	0xFDD
 25594                           plusw2	equ	0xFDB
 25595                           fsr2h	equ	0xFDA
 25596                           fsr2l	equ	0xFD9
 25597                           status	equ	0xFD8


Data Sizes:
    Strings     112
    Constant    66
    Data        1
    BSS         262
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      93
    BANK0           160    159     160
    BANK1           256    131     204
    BANK2           256     53     249
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    Network_Read@debug_str.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_6(CODE[12]), STR_1(CODE[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK2[32]), Network_Read@debug_str(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK2[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_3(CODE[10]), STR_2(CODE[28]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK2[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), DEMO_UDP_Recv@str(BANK0[32]), main@str(BANK2[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), DEMO_UDP_Recv@str(BANK0[32]), main@str(BANK2[32]), 

    memcmp@s2	PTR const void  size(1) Largest target is 6
		 -> DHCP_Handler@ethMAC(BANK0[6]), 

    memcmp@s1	PTR const void  size(1) Largest target is 6
		 -> DHCP_Handler@ethPktMAC(BANK0[6]), 

    _doprnt@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_6(CODE[12]), STR_3(CODE[10]), STR_2(CODE[28]), STR_1(CODE[8]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), printf@ap(COMRAM[1]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), STR_7(CODE[7]), main@str(BANK2[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    S4655__prbuf$func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    S4655__prbuf$ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK2[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK2[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 6
		 -> sprintf@pb(COMRAM[5]), printf@pb(COMRAM[5]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), DEMO_UDP_Recv@str(BANK0[32]), main@str(BANK2[32]), 

    UDP_WriteBlock@data	PTR void  size(1) Largest target is 4
		 -> DEMO_UDP_Recv@local_ip(BANK0[4]), 

    UDP_ReadBlock@data	PTR void  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), DEMO_UDP_Recv@str(BANK0[32]), data(BANK1[2]), 
		 -> idle_packet(BANK1[2]), 

    UDP_Receive@hptr.callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    UDP_Receive@hptr	PTR const struct . size(1) Largest target is 15
		 -> UDP_CallBackTable(CODE[15]), 

    TCP_Update@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    currentTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_Snd@data	PTR unsigned char  size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_Snd@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCB_Check@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK2[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S3067$rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SYSLOG_Write@message	PTR const unsigned char  size(2) Largest target is 32
		 -> main@str(BANK2[32]), STR_5(CODE[13]), STR_4(CODE[17]), 

    sp__MAC_getAddress	PTR const struct . size(1) Largest target is 6
		 -> macAddress(CODE[6]), 

    IPv4_Start@macAddress	PTR const struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), broadcastMAC(CODE[6]), arpMap(BANK2[104]), NULL(NULL[0]), 

    IPV4_PseudoHeaderChecksum@v	PTR unsigned int  size(1) Largest target is 12
		 -> IPV4_PseudoHeaderChecksum@tmp(COMRAM[12]), 

    ICMP_EchoReply@icmpHdr	PTR struct . size(1) Largest target is 8
		 -> ICMP_Receive@icmpHdr(BANK0[8]), 

    ICMP_EchoReply@ipv4Hdr	PTR struct . size(2) Largest target is 20
		 -> ipv4Header(BANK2[20]), 

    ICMP_Receive@ipv4Hdr	PTR struct . size(2) Largest target is 20
		 -> ipv4Header(BANK2[20]), 

    S2143$callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    UDP_CallBackTable.callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    sp__ARPV4_Lookup	PTR struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), arpMap(BANK2[104]), NULL(NULL[0]), 

    ARPV4_Lookup@entry_pointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Update@entryPointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Packet@arpPtr	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Packet@entryPointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ETH_Insert@data	PTR unsigned char  size(1) Largest target is 2
		 -> UDP_Send@cksm(COMRAM[2]), UDP_Send@udpLength(COMRAM[2]), TCP_Snd@cksm(BANK0[2]), IPV4_Send@cksm(COMRAM[2]), 
		 -> IPV4_Send@totalLength(COMRAM[2]), ICMP_EchoReply@cksm(BANK0[2]), 

    ETH_WriteBlock@data	PTR void  size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@local_ip(BANK0[4]), 
		 -> main@str(BANK2[32]), STR_5(CODE[13]), STR_4(CODE[17]), TCP_Snd@txHeader(BANK0[20]), 
		 -> Network_Read@debug_str(BANK1[80]), dhcpName(CODE[21]), DHCP_Request@ethMAC(BANK0[6]), broadcastMAC(CODE[6]), 
		 -> ARPV4_Request@header(COMRAM[28]), header.sha(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), arpMap(BANK2[104]), 
		 -> ethMAC(BANK2[6]), NULL(NULL[0]), 

    ETH_WriteBlock@p	PTR unsigned char  size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@local_ip(BANK0[4]), 
		 -> main@str(BANK2[32]), STR_5(CODE[13]), STR_4(CODE[17]), TCP_Snd@txHeader(BANK0[20]), 
		 -> Network_Read@debug_str(BANK1[80]), dhcpName(CODE[21]), DHCP_Request@ethMAC(BANK0[6]), broadcastMAC(CODE[6]), 
		 -> ARPV4_Request@header(COMRAM[28]), header.sha(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), arpMap(BANK2[104]), 
		 -> ethMAC(BANK2[6]), NULL(NULL[0]), 

    ETH_ReadBlock@data	PTR void  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), 
		 -> DEMO_UDP_Recv@str(BANK0[32]), data(BANK1[2]), idle_packet(BANK1[2]), main@str(BANK2[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), udpHeader(BANK2[8]), tcpHeader(BANK1[20]), 
		 -> Network_Read@debug_str(BANK1[80]), Network_Read@header(BANK1[14]), ipv4Header(BANK2[20]), ICMP_Receive@icmpHdr(BANK0[8]), 
		 -> DHCP_Handler@ethPktMAC(BANK0[6]), ARPV4_Packet@header(COMRAM[28]), NULL(NULL[0]), 

    ETH_ReadBlock@p	PTR unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), 
		 -> DEMO_UDP_Recv@str(BANK0[32]), data(BANK1[2]), idle_packet(BANK1[2]), main@str(BANK2[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), udpHeader(BANK2[8]), tcpHeader(BANK1[20]), 
		 -> Network_Read@debug_str(BANK1[80]), Network_Read@header(BANK1[14]), ipv4Header(BANK2[20]), ICMP_Receive@icmpHdr(BANK0[8]), 
		 -> DHCP_Handler@ethPktMAC(BANK0[6]), ARPV4_Packet@header(COMRAM[28]), NULL(NULL[0]), 

    ETH_GetMAC@macAddr	PTR unsigned char  size(2) Largest target is 28
		 -> DHCP_Handler@ethMAC(BANK0[6]), DHCP_Request@ethMAC(BANK0[6]), ARPV4_Request@header(COMRAM[28]), header.sha(COMRAM[6]), 
		 -> ARPV4_Packet@header(COMRAM[28]), ethMAC(BANK2[6]), 

    ETH_WriteStart@destMAC	PTR const struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), broadcastMAC(CODE[6]), header.sha(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), 
		 -> arpMap(BANK2[104]), NULL(NULL[0]), 

    time@t	PTR long  size(2) Largest target is 4
		 -> main@t(BANK2[4]), main@now_p(BANK2[4]), main@ip_timer(BANK2[4]), Network_Manage@now(BANK1[4]), 
		 -> arpTimer(BANK2[4]), NULL(NULL[0]), 

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(BANK0[16]), DEMO_UDP_Recv@str1(BANK0[16]), DEMO_UDP_Recv@str(BANK0[32]), main@str(BANK2[32]), 


Critical Paths under _main in COMRAM

    _main->_DEMO_UDP_Send
    _initHW->_lcd_init
    _lcd_init->_lcd_write_ctrl
    _SYSLOG_Write->_printf
    _SYSLOG_Init->_printf
    _printf->__doprnt
    _Network_WaitForLink->_ETH_CheckLinkUp
    _sprintf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _UDP_Receive->_DHCP_Handler
    _ETH_Read32->_SPI_ExchangeByte
    _DEMO_UDP_Recv->_UDP_Start
    _lcd_puts->_lcd_putch
    _lcd_putch->_lcd_write_data
    _lcd_goto2->_lcd_write_ctrl
    _lcd_goto1->_lcd_write_ctrl
    _lcd_clear->_lcd_write_ctrl
    _UDP_WriteBlock->_ETH_WriteBlock
    _UDP_Write16->_ETH_Write16
    _UDP_Read8->_ETH_Read8
    _DEMO_UDP_MeasureTemp->_ADC_GetConversion
    _UDP_ReadBlock->_ETH_ReadBlock
    _TCP_ParseTCPOptions->_ETH_Dump
    _ETH_Read8->_SPI_ExchangeByte
    _ETH_Read16->_SPI_ExchangeByte
    _ETH_Dump->_ENCx24_Read
    _TCP_FiniteStateMachine->_TCP_PayloadSave
    _TCP_PayloadSave->_TCP_Snd
    _TCP_Snd->_IPv4_Start
    _ICMP_Receive->_ICMP_EchoReply
    _ICMP_EchoReply->_IPv4_Start
    _ETH_SaveRDPT->_ENCx24_Read
    _ETH_Copy->_waitForDMA
    _ETH_RxComputeChecksum->_waitForDMA
    _ETH_NextPacketUpdate->_ETH_SetRXptr
    _ETH_SetRXptr->_SPI_ExchangeByte
    _ETH_Flush->_ENCx24_Write
    _ETH_SetPktDec->_SPI_ExchangeByte
    _ARPV4_Packet->_ETH_WriteStart
    _ETH_ReadBlock->_SPI_ExchangeByte
    _ETH_EventHandler->_ENCx24_Read
    _ETH_ResetReceiver->_ENCx24_BFC
    _ETH_ResetReceiver->_ENCx24_BFS
    _ETH_ResetReceiver->_ENCx24_Write
    _DHCP_Request->_UDP_Start
    _DHCP_WriteZeros->_ETH_Write8
    _Network_Init->_ETH_Init
    _ETH_Init->_ETH_CheckLinkUp
    _ETH_SendSystemReset->_ENCx24_Read
    _ETH_CheckLinkUp->_ETH_readLinkStatus
    _ETH_readLinkStatus->_ENCx24_Read
    _ENCx24_PhyRead->_ENCx24_Read
    _ENCx24_PHYWrite->_ENCx24_Read
    _DEMO_UDP_Send->_UDP_Start
    _UDP_Write8->_ETH_Write8
    _UDP_Write32->_ETH_Write32
    _UDP_Start->_IPv4_Start
    _IPv4_Start->_ARPV4_Request
    _ETH_Write8->_SPI_ExchangeByte
    _ETH_Write32->_SPI_ExchangeByte
    _ARPV4_Request->_ETH_WriteStart
    _ETH_WriteStart->_ENCx24_Read
    _ETH_WriteBlock->_SPI_ExchangeByte
    _ETH_Write16->_SPI_ExchangeByte
    _ETH_GetMAC->_ETH_MACRead8
    _ETH_MACRead8->_ENCx24_BankselSPI
    _ETH_ResetByteCount->_ENCx24_Read
    _UDP_Send->_IPV4_Send
    _IPV4_Send->_ETH_TxComputeChecksum
    _ETH_TxComputeChecksum->_waitForDMA
    _waitForDMA->_ENCx24_Read
    _ENCx24_BFS->_ENCx24_BankselSPI
    _ENCx24_BFC->_ENCx24_BankselSPI
    _ETH_Send->_ENCx24_Write
    _ETH_Set_TXRTS->_SPI_ExchangeByte
    _ETH_Insert->_ENCx24_Read
    _ENCx24_Write->_ENCx24_BankselSPI
    _ETH_GetByteCount->_ENCx24_Read
    _ENCx24_Read->_ENCx24_BankselSPI
    _ENCx24_BankselSPI->_SPI_ExchangeByte
    _DEMO_UDP_IPLockTimer->_DEMO_UDP_SetClaimIP

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Network_Manage
    _TCP_Update->_TCP_FiniteStateMachine
    _Network_Read->_IPV4_Packet
    _IPV4_Packet->_TCP_Recv
    _UDP_Receive->_DEMO_UDP_Recv
    _DHCP_Handler->_DHCP_Request
    _TCP_Recv->_TCP_FiniteStateMachine
    _TCP_FiniteStateMachine->_TCP_PayloadSave
    _TCP_PayloadSave->_TCP_Snd
    _TCP_Snd->_IPv4_Start
    _ICMP_Receive->_ICMP_EchoReply
    _ICMP_EchoReply->_IPv4_Start
    _DHCP_Manage->_DHCP_Request
    _DHCP_Request->_UDP_Start
    _DEMO_UDP_Send->_UDP_Start
    _UDP_Start->_IPv4_Start

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Network_Manage
    _Network_Manage->_Network_Read
    _Network_Read->_IPV4_Packet

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  715084
                                            130 BANK1      1     1      0
                                              0 BANK2     53    53      0
               _DEMO_UDP_IPLockTimer
                      _DEMO_UDP_Send
                       _IPV4_GetMyIP
                       _Network_Init
                     _Network_Manage
                _Network_WaitForLink
                        _SYSLOG_Init
                       _SYSLOG_Write
                             _initHW
                          _lcd_goto1
                           _lcd_puts
                             _memset
                            _sprintf
                               _time
 ---------------------------------------------------------------------------------
 (1) _initHW                                               0     0      0     133
                     _ADC_Initialize
                           _LED_Init
                           _lcd_init
                          _rtcc_init
                           _spi_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rtcc_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             5     5      0      31
                                              2 COMRAM     1     1      0
                           _lcd_busy
                      _lcd_init_pins
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (3) _lcd_init_pins                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0     102
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSLOG_Write                                         4     2      2    4563
                                             38 COMRAM     4     2      2
                             _printf
                               _time
 ---------------------------------------------------------------------------------
 (1) _SYSLOG_Init                                          4     4      0    4262
                                             38 COMRAM     4     4      0
                             _printf
                               _time
 ---------------------------------------------------------------------------------
 (2) _printf                                              11     7      4    3437
                                             27 COMRAM    11     7      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _Network_WaitForLink                                  0     0      0     520
                    _ETH_CheckLinkUp
 ---------------------------------------------------------------------------------
 (1) _Network_Manage                                       5     5      0  612561
                                            158 BANK0      1     1      0
                                            126 BANK1      4     4      0
                       _ARPV4_Update
                        _DHCP_Manage
                   _ETH_EventHandler
                       _Network_Read
                         _TCP_Update
                               _time
 ---------------------------------------------------------------------------------
 (2) _TCP_Update                                          12    12      0  131277
                                            116 BANK0     12    12      0
             _TCP_FiniteStateMachine
 ---------------------------------------------------------------------------------
 (2) _Network_Read                                        98    98      0  402096
                                             28 BANK1     98    98      0
                       _ARPV4_Packet
                          _ETH_Flush
               _ETH_NextPacketUpdate
                      _ETH_ReadBlock
                        _IPV4_Packet
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             17     6     11    3711
                                             27 COMRAM    17     6     11
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             20    18      2    3151
                                             13 COMRAM    14    12      2
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              8 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                              1 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IPV4_Packet                                         73    73      0  374307
                                            153 BANK0      5     5      0
                                              0 BANK1     28    28      0
                           _ETH_Dump
                      _ETH_ReadBlock
              _ETH_RxComputeChecksum
                       _ICMP_Receive
          _IPV4_PseudoHeaderChecksum
                           _TCP_Recv
                        _UDP_Receive
 ---------------------------------------------------------------------------------
 (4) _UDP_Receive                                         11     9      2  151675
                                            102 BANK0     11     9      2
                   _DEMO_UDP_IdlePkt *
                      _DEMO_UDP_Recv *
                       _DHCP_Handler *
                      _ETH_ReadBlock
 ---------------------------------------------------------------------------------
 (5) _DHCP_Handler                                        36    34      2   76633
                                             88 COMRAM     4     2      2
                                             23 BANK0     32    32      0
                       _DHCP_Request
                           _ETH_Dump
                         _ETH_GetMAC
                         _ETH_Read16
                         _ETH_Read32
                          _ETH_Read8
                      _ETH_ReadBlock
                             _memcmp
 ---------------------------------------------------------------------------------
 (6) _memcmp                                               6     3      3     377
                                              1 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (6) _ETH_Read32                                           8     4      4     176
                                              2 COMRAM     8     4      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _DEMO_UDP_Recv                                       81    79      2   70294
                                             88 COMRAM     2     0      2
                                             23 BANK0     79    79      0
              _DEMO_UDP_ClaimIPCheck
               _DEMO_UDP_MeasureTemp
                _DEMO_UDP_SetClaimIP
                      _UDP_GetDestIP
                    _UDP_GetDestPort
                          _UDP_Read8
                      _UDP_ReadBlock
                           _UDP_Send
                          _UDP_Start
                        _UDP_Write16
                         _UDP_Write8
                     _UDP_WriteBlock
                          _lcd_clear
                          _lcd_goto1
                          _lcd_goto2
                           _lcd_puts
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6    1017
                                              1 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2     349
                                              3 COMRAM     2     0      2
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (2) _lcd_putch                                            1     1      0     124
                                              2 COMRAM     1     1      0
                           _lcd_busy
                     _lcd_write_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_data                                       1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _lcd_goto2                                            1     1      0      62
                                              2 COMRAM     1     1      0
                           _lcd_busy
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (1) _lcd_goto1                                            1     1      0      62
                                              2 COMRAM     1     1      0
                           _lcd_busy
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _lcd_clear                                            1     1      0      31
                                              2 COMRAM     1     1      0
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (2) _lcd_write_ctrl                                       1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _UDP_WriteBlock                                       3     1      2    2156
                                              8 COMRAM     3     1      2
                     _ETH_WriteBlock
 ---------------------------------------------------------------------------------
 (6) _UDP_Write16                                          2     0      2    1477
                                              4 COMRAM     2     0      2
                        _ETH_Write16
 ---------------------------------------------------------------------------------
 (6) _UDP_Read8                                            0     0      0      65
                          _ETH_Read8
 ---------------------------------------------------------------------------------
 (6) _UDP_GetDestPort                                      2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _UDP_GetDestIP                                        4     0      4       0
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _DEMO_UDP_MeasureTemp                                 4     2      2      65
                                              5 COMRAM     4     2      2
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (5) _DEMO_UDP_IdlePkt                                     2     0      2    2592
                                             88 COMRAM     2     0      2
                      _UDP_ReadBlock
 ---------------------------------------------------------------------------------
 (6) _UDP_ReadBlock                                        4     0      4    2592
                                             11 COMRAM     4     0      4
                      _ETH_ReadBlock
 ---------------------------------------------------------------------------------
 (4) _TCP_Recv                                            37    31      6  138685
                                            116 BANK0     37    31      6
                      _ETH_ReadBlock
             _TCP_FiniteStateMachine
                _TCP_ParseTCPOptions
 ---------------------------------------------------------------------------------
 (5) _TCP_ParseTCPOptions                                  6     6      0    5596
                                             14 COMRAM     6     6      0
                           _ETH_Dump
                         _ETH_Read16
                          _ETH_Read8
 ---------------------------------------------------------------------------------
 (6) _ETH_Read8                                            1     1      0      65
                                              2 COMRAM     1     1      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Read16                                           4     2      2     102
                                              2 COMRAM     4     2      2
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Dump                                             4     2      2    4929
                                             10 COMRAM     4     2      2
                        _ENCx24_Read
                       _ENCx24_Write
 ---------------------------------------------------------------------------------
 (3) _TCP_FiniteStateMachine                              17    17      0  130797
                                             99 BANK0     17    17      0
                          _TCB_Reset
                    _TCP_PayloadSave
                            _TCP_Snd
 ---------------------------------------------------------------------------------
 (4) _TCP_PayloadSave                                     17    15      2   65313
                                             89 COMRAM     2     0      2
                                             84 BANK0     15    15      0
                      _ETH_ReadBlock
                            _TCP_Snd
 ---------------------------------------------------------------------------------
 (4) _TCP_Snd                                             79    77      2   63138
                                             87 COMRAM     2     0      2
                                              7 BANK0     77    77      0
                         _ETH_Insert
              _ETH_TxComputeChecksum
                     _ETH_WriteBlock
                          _IPV4_Send
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (4) _TCB_Reset                                            4     2      2    1823
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _IPV4_PseudoHeaderChecksum                           24    22      2     578
                                              1 COMRAM    24    22      2
 ---------------------------------------------------------------------------------
 (4) _ICMP_Receive                                        15    13      2   68477
                                             89 COMRAM     2     0      2
                                             21 BANK0     13    13      0
                      _ETH_ReadBlock
                       _ETH_SaveRDPT
                     _ICMP_EchoReply
 ---------------------------------------------------------------------------------
 (5) _ICMP_EchoReply                                      16    14      2   65919
                                             87 COMRAM     2     0      2
                                              7 BANK0     14    14      0
                           _ETH_Copy
                         _ETH_Insert
                       _ETH_SaveRDPT
              _ETH_TxComputeChecksum
                        _ETH_Write16
                          _IPV4_Send
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (6) _ETH_SaveRDPT                                         0     0      0     449
                        _ENCx24_Read
 ---------------------------------------------------------------------------------
 (6) _ETH_Copy                                             4     2      2    6745
                                             12 COMRAM     4     2      2
                         _ENCx24_BFC
                         _ENCx24_BFS
                        _ENCx24_Read
                       _ENCx24_Write
                         _waitForDMA
 ---------------------------------------------------------------------------------
 (4) _ETH_RxComputeChecksum                               14    10      4    7551
                                             12 COMRAM    14    10      4
                         _ENCx24_BFC
                         _ENCx24_BFS
                        _ENCx24_Read
                       _ENCx24_Write
                         _waitForDMA
 ---------------------------------------------------------------------------------
 (3) _ETH_NextPacketUpdate                                 0     0      0     217
                       _ETH_SetRXptr
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (4) _ETH_SetRXptr                                         2     0      2     186
                                              2 COMRAM     2     0      2
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _ETH_Flush                                            2     2      0    3394
                                              8 COMRAM     2     2      0
                       _ENCx24_Write
                      _ETH_SetPktDec
 ---------------------------------------------------------------------------------
 (4) _ETH_SetPktDec                                        0     0      0      31
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _ARPV4_Packet                                        70    70      0   17199
                                             14 COMRAM    70    70      0
                         _ETH_GetMAC
                      _ETH_ReadBlock
                           _ETH_Send
                     _ETH_WriteBlock
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (5) _ETH_ReadBlock                                        9     5      4    1880
                                              2 COMRAM     9     5      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (2) _ETH_EventHandler                                     8     8      0   10803
                                             10 COMRAM     8     8      0
                         _ENCx24_BFC
                        _ENCx24_Read
                       _ENCx24_Write
                  _ETH_ResetReceiver
 ---------------------------------------------------------------------------------
 (3) _ETH_ResetReceiver                                    0     0      0    5562
                         _ENCx24_BFC
                         _ENCx24_BFS
                       _ENCx24_Write
 ---------------------------------------------------------------------------------
 (2) _DHCP_Manage                                          0     0      0   67359
                       _DHCP_Request
 ---------------------------------------------------------------------------------
 (6) _DHCP_Request                                        10    10      0   67359
                                             15 BANK0      8     8      0
                    _DHCP_WriteZeros
                         _ETH_GetMAC
                        _ETH_Write16
                        _ETH_Write32
                         _ETH_Write8
                     _ETH_WriteBlock
                           _UDP_Send
                          _UDP_Start
 ---------------------------------------------------------------------------------
 (7) _DHCP_WriteZeros                                      2     0      2     183
                                              3 COMRAM     2     0      2
                         _ETH_Write8
 ---------------------------------------------------------------------------------
 (2) _ARPV4_Update                                         3     3      0     105
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Network_Init                                         0     0      0   22229
                         _ARPV4_Init
                           _ETH_Init
                          _IPV4_Init
                           _TCP_Init
                               _time
 ---------------------------------------------------------------------------------
 (1) _time                                                 9     5      4     791
                                              1 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _TCP_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IPV4_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ETH_Init                                             4     4      0   21339
                                             19 COMRAM     4     4      0
                         _ENCx24_BFS
                    _ENCx24_PHYWrite
                     _ENCx24_PhyRead
                        _ENCx24_Read
                       _ENCx24_Write
                    _ETH_CheckLinkUp
                         _ETH_GetMAC
                _ETH_SendSystemReset
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _ETH_SendSystemReset                                  2     2      0    4938
                                             10 COMRAM     2     2      0
                         _ENCx24_BFS
                        _ENCx24_Read
                       _ENCx24_Write
 ---------------------------------------------------------------------------------
 (2) _ETH_CheckLinkUp                                      5     5      0     520
                                             14 COMRAM     5     5      0
                 _ETH_readLinkStatus
 ---------------------------------------------------------------------------------
 (3) _ETH_readLinkStatus                                   4     0      4     449
                                             10 COMRAM     4     0      4
                        _ENCx24_Read
 ---------------------------------------------------------------------------------
 (3) _ENCx24_PhyRead                                       3     1      2    6042
                                             10 COMRAM     3     1      2
                         _ENCx24_BFC
                         _ENCx24_BFS
                        _ENCx24_Read
                       _ENCx24_Write
 ---------------------------------------------------------------------------------
 (3) _ENCx24_PHYWrite                                      3     1      2    4017
                                             10 COMRAM     3     1      2
                        _ENCx24_Read
                       _ENCx24_Write
 ---------------------------------------------------------------------------------
 (2) _ARPV4_Init                                           1     1      0      99
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IPV4_GetMyIP                                         4     0      4       0
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _DEMO_UDP_Send                                        7     7      0   63161
                                             88 COMRAM     4     4      0
                                             15 BANK0      3     3      0
                  _ADC_GetConversion
              _DEMO_UDP_ClaimIPCheck
                           _UDP_Send
                          _UDP_Start
                        _UDP_Write32
                         _UDP_Write8
 ---------------------------------------------------------------------------------
 (6) _UDP_Write8                                           1     1      0      93
                                              3 COMRAM     1     1      0
                         _ETH_Write8
 ---------------------------------------------------------------------------------
 (2) _UDP_Write32                                          4     0      4    1635
                                              6 COMRAM     4     0      4
                        _ETH_Write32
 ---------------------------------------------------------------------------------
 (7) _UDP_Start                                            9     1      8   30211
                                             87 COMRAM     1     1      0
                                              7 BANK0      8     0      8
                 _ETH_ResetByteCount
                        _ETH_Write16
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (5) _IPv4_Start                                          20    15      5   26625
                                             74 COMRAM    13     8      5
                                              0 BANK0      7     7      0
                       _ARPV4_Lookup
                      _ARPV4_Request
                        _ETH_Write16
                        _ETH_Write32
                         _ETH_Write8
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (6) _ETH_Write8                                           1     1      0      62
                                              2 COMRAM     1     1      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Write32                                          4     0      4    1514
                                              2 COMRAM     4     0      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ARPV4_Request                                       60    56      4   14709
                                             14 COMRAM    60    56      4
                         _ETH_GetMAC
                           _ETH_Send
                     _ETH_WriteBlock
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (6) _ETH_WriteStart                                       4     0      4    7701
                                             10 COMRAM     4     0      4
                        _ENCx24_Read
                       _ENCx24_Write
                        _ETH_Write16
                     _ETH_WriteBlock
 ---------------------------------------------------------------------------------
 (7) _ETH_WriteBlock                                       6     2      4    1968
                                              2 COMRAM     6     2      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_Write16                                          2     0      2    1356
                                              2 COMRAM     2     0      2
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_GetMAC                                           2     0      2     816
                                              7 COMRAM     2     0      2
                       _ETH_MACRead8
 ---------------------------------------------------------------------------------
 (8) _ETH_MACRead8                                         3     3      0     412
                                              4 COMRAM     3     3      0
                  _ENCx24_BankselSPI
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ARPV4_Lookup                                        11     7      4     257
                                              1 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (8) _ETH_ResetByteCount                                   0     0      0     449
                        _ENCx24_Read
 ---------------------------------------------------------------------------------
 (7) _UDP_Send                                             9     9      0   30925
                                             39 COMRAM     9     9      0
                   _ETH_GetByteCount
                         _ETH_Insert
              _ETH_TxComputeChecksum
                          _IPV4_Send
 ---------------------------------------------------------------------------------
 (5) _IPV4_Send                                           11     9      2   16946
                                             28 COMRAM    11     9      2
                         _ETH_Insert
                           _ETH_Send
              _ETH_TxComputeChecksum
 ---------------------------------------------------------------------------------
 (6) _ETH_TxComputeChecksum                               16    10      6    7877
                                             12 COMRAM    16    10      6
                         _ENCx24_BFC
                         _ENCx24_BFS
                        _ENCx24_Read
                       _ENCx24_Write
                         _waitForDMA
 ---------------------------------------------------------------------------------
 (7) _waitForDMA                                           2     2      0     483
                                             10 COMRAM     2     2      0
                        _ENCx24_Read
 ---------------------------------------------------------------------------------
 (7) _ENCx24_BFS                                           4     2      2    1163
                                              4 COMRAM     4     2      2
                  _ENCx24_BankselSPI
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ENCx24_BFC                                           4     2      2    1073
                                              4 COMRAM     4     2      2
                  _ENCx24_BankselSPI
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_Send                                             0     0      0    3357
                       _ENCx24_Write
                      _ETH_Set_TXRTS
 ---------------------------------------------------------------------------------
 (8) _ETH_Set_TXRTS                                        0     0      0      31
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Insert                                           7     3      4    5235
                                             10 COMRAM     7     3      4
                        _ENCx24_Read
                       _ENCx24_Write
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ENCx24_Write                                         4     2      2    3326
                                              4 COMRAM     4     2      2
                  _ENCx24_BankselSPI
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (8) _ETH_GetByteCount                                     4     2      2     483
                                             10 COMRAM     4     2      2
                        _ENCx24_Read
 ---------------------------------------------------------------------------------
 (4) _ENCx24_Read                                          6     4      2     449
                                              4 COMRAM     6     4      2
                  _ENCx24_BankselSPI
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _ENCx24_BankselSPI                                    2     2      0     189
                                              2 COMRAM     2     2      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _SPI_ExchangeByte                                     1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _DEMO_UDP_ClaimIPCheck                                2     2      0      37
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversion                                    4     2      2      31
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DEMO_UDP_IPLockTimer                                 0     0      0      31
                _DEMO_UDP_SetClaimIP
 ---------------------------------------------------------------------------------
 (6) _DEMO_UDP_SetClaimIP                                  1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _low_isr                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _high_isr                                            0     0      0       0
                       _rtcc_handler
 ---------------------------------------------------------------------------------
 (16) _rtcc_handler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DEMO_UDP_IPLockTimer
     _DEMO_UDP_SetClaimIP
   _DEMO_UDP_Send
     _ADC_GetConversion
     _DEMO_UDP_ClaimIPCheck
     _UDP_Send
       _ETH_GetByteCount
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_Insert
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_TxComputeChecksum
         _ENCx24_BFC
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_BFS
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _waitForDMA
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
       _IPV4_Send
         _ETH_Insert
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ETH_Send
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_Set_TXRTS
             _SPI_ExchangeByte
         _ETH_TxComputeChecksum
           _ENCx24_BFC
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_BFS
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _waitForDMA
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
     _UDP_Start
       _ETH_ResetByteCount
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_Write16
         _SPI_ExchangeByte
       _IPv4_Start
         _ARPV4_Lookup
         _ARPV4_Request
           _ETH_GetMAC
             _ETH_MACRead8
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Send
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Set_TXRTS
               _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
           _ETH_WriteStart
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _ETH_WriteBlock
               _SPI_ExchangeByte
         _ETH_Write16
           _SPI_ExchangeByte
         _ETH_Write32
           _SPI_ExchangeByte
         _ETH_Write8
           _SPI_ExchangeByte
         _ETH_WriteStart
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_Write16
             _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
     _UDP_Write32
       _ETH_Write32
         _SPI_ExchangeByte
     _UDP_Write8
       _ETH_Write8
         _SPI_ExchangeByte
   _IPV4_GetMyIP
   _Network_Init
     _ARPV4_Init
     _ETH_Init
       _ENCx24_BFS
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENCx24_PHYWrite
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ENCx24_PhyRead
         _ENCx24_BFC
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_BFS
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ENCx24_Read
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENCx24_Write
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_CheckLinkUp
         _ETH_readLinkStatus
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
       _ETH_GetMAC
         _ETH_MACRead8
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_SendSystemReset
         _ENCx24_BFS
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _SPI_ExchangeByte
     _IPV4_Init
     _TCP_Init
     _time
   _Network_Manage
     _ARPV4_Update
     _DHCP_Manage
       _DHCP_Request
         _DHCP_WriteZeros
           _ETH_Write8
             _SPI_ExchangeByte
         _ETH_GetMAC
           _ETH_MACRead8
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_Write16
           _SPI_ExchangeByte
         _ETH_Write32
           _SPI_ExchangeByte
         _ETH_Write8
           _SPI_ExchangeByte
         _ETH_WriteBlock
           _SPI_ExchangeByte
         _UDP_Send
           _ETH_GetByteCount
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Insert
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_TxComputeChecksum
             _ENCx24_BFC
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_BFS
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _waitForDMA
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
           _IPV4_Send
             _ETH_Insert
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Send
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Set_TXRTS
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENCx24_BFC
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_BFS
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _waitForDMA
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
         _UDP_Start
           _ETH_ResetByteCount
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Write16
             _SPI_ExchangeByte
           _IPv4_Start
             _ARPV4_Lookup
             _ARPV4_Request
               _ETH_GetMAC
                 _ETH_MACRead8
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Send
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Set_TXRTS
                   _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _ETH_Write32
               _SPI_ExchangeByte
             _ETH_Write8
               _SPI_ExchangeByte
             _ETH_WriteStart
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
     _ETH_EventHandler
       _ENCx24_BFC
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENCx24_Read
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENCx24_Write
         _ENCx24_BankselSPI
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_ResetReceiver
         _ENCx24_BFC
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_BFS
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
     _Network_Read
       _ARPV4_Packet
         _ETH_GetMAC
           _ETH_MACRead8
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_ReadBlock
           _SPI_ExchangeByte
         _ETH_Send
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_Set_TXRTS
             _SPI_ExchangeByte
         _ETH_WriteBlock
           _SPI_ExchangeByte
         _ETH_WriteStart
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_Write16
             _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
       _ETH_Flush
         _ENCx24_Write
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ETH_SetPktDec
           _SPI_ExchangeByte
       _ETH_NextPacketUpdate
         _ETH_SetRXptr
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_ReadBlock
         _SPI_ExchangeByte
       _IPV4_Packet
         _ETH_Dump
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_ReadBlock
           _SPI_ExchangeByte
         _ETH_RxComputeChecksum
           _ENCx24_BFC
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_BFS
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Read
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENCx24_Write
             _ENCx24_BankselSPI
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _waitForDMA
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
         _ICMP_Receive
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _ETH_SaveRDPT
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ICMP_EchoReply
             _ETH_Copy
               _ENCx24_BFC
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_BFS
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _waitForDMA
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
             _ETH_Insert
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_SaveRDPT
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENCx24_BFC
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_BFS
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _waitForDMA
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _IPV4_Send
               _ETH_Insert
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Send
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Set_TXRTS
                   _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENCx24_BFC
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_BFS
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _waitForDMA
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
             _IPv4_Start
               _ARPV4_Lookup
               _ARPV4_Request
                 _ETH_GetMAC
                   _ETH_MACRead8
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Send
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Set_TXRTS
                     _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_Write32
                 _SPI_ExchangeByte
               _ETH_Write8
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
         _IPV4_PseudoHeaderChecksum
         _TCP_Recv
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _TCP_FiniteStateMachine
             _TCB_Reset
             _TCP_PayloadSave
               _ETH_ReadBlock
                 _SPI_ExchangeByte
               _TCP_Snd
                 _ETH_Insert
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENCx24_BFC
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_BFS
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _waitForDMA
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _IPV4_Send
                   _ETH_Insert
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Send
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Set_TXRTS
                       _SPI_ExchangeByte
                   _ETH_TxComputeChecksum
                     _ENCx24_BFC
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_BFS
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _waitForDMA
                       _ENCx24_Read
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                 _IPv4_Start
                   _ARPV4_Lookup
                   _ARPV4_Request
                     _ETH_GetMAC
                       _ETH_MACRead8
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                     _ETH_Send
                       _ENCx24_Write
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ETH_Set_TXRTS
                         _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
                     _ETH_WriteStart
                       _ENCx24_Read
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ENCx24_Write
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ETH_Write16
                         _SPI_ExchangeByte
                       _ETH_WriteBlock
                         _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_Write32
                     _SPI_ExchangeByte
                   _ETH_Write8
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Write16
                       _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
             _TCP_Snd
               _ETH_Insert
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENCx24_BFC
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_BFS
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _waitForDMA
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _IPV4_Send
                 _ETH_Insert
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Send
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Set_TXRTS
                     _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENCx24_BFC
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_BFS
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _waitForDMA
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
               _IPv4_Start
                 _ARPV4_Lookup
                 _ARPV4_Request
                   _ETH_GetMAC
                     _ETH_MACRead8
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_Send
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Set_TXRTS
                       _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Write16
                       _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_Write32
                   _SPI_ExchangeByte
                 _ETH_Write8
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
           _TCP_ParseTCPOptions
             _ETH_Dump
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Read16
               _SPI_ExchangeByte
             _ETH_Read8
               _SPI_ExchangeByte
         _UDP_Receive
           _DEMO_UDP_IdlePkt *
             _UDP_ReadBlock
               _ETH_ReadBlock
                 _SPI_ExchangeByte
           _DEMO_UDP_Recv *
             _DEMO_UDP_ClaimIPCheck
             _DEMO_UDP_MeasureTemp
               _ADC_GetConversion
             _DEMO_UDP_SetClaimIP
             _UDP_GetDestIP
             _UDP_GetDestPort
             _UDP_Read8
               _ETH_Read8
                 _SPI_ExchangeByte
             _UDP_ReadBlock
               _ETH_ReadBlock
                 _SPI_ExchangeByte
             _UDP_Send
               _ETH_GetByteCount
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Insert
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENCx24_BFC
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_BFS
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _waitForDMA
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
               _IPV4_Send
                 _ETH_Insert
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Send
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Set_TXRTS
                     _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENCx24_BFC
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_BFS
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _waitForDMA
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
             _UDP_Start
               _ETH_ResetByteCount
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _IPv4_Start
                 _ARPV4_Lookup
                 _ARPV4_Request
                   _ETH_GetMAC
                     _ETH_MACRead8
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_Send
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Set_TXRTS
                       _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Write16
                       _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_Write32
                   _SPI_ExchangeByte
                 _ETH_Write8
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
             _UDP_Write16
               _ETH_Write16
                 _SPI_ExchangeByte
             _UDP_Write8
               _ETH_Write8
                 _SPI_ExchangeByte
             _UDP_WriteBlock
               _ETH_WriteBlock
                 _SPI_ExchangeByte
             _lcd_clear
               _lcd_write_ctrl
             _lcd_goto1
               _lcd_busy
               _lcd_write_ctrl
             _lcd_goto2
               _lcd_busy
               _lcd_write_ctrl
             _lcd_puts
               _lcd_putch
                 _lcd_busy
                 _lcd_write_data
             _memset
           _DHCP_Handler *
             _DHCP_Request
               _DHCP_WriteZeros
                 _ETH_Write8
                   _SPI_ExchangeByte
               _ETH_GetMAC
                 _ETH_MACRead8
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_Write32
                 _SPI_ExchangeByte
               _ETH_Write8
                 _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _UDP_Send
                 _ETH_GetByteCount
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Insert
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENCx24_BFC
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_BFS
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _waitForDMA
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                 _IPV4_Send
                   _ETH_Insert
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Send
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Set_TXRTS
                       _SPI_ExchangeByte
                   _ETH_TxComputeChecksum
                     _ENCx24_BFC
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_BFS
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _waitForDMA
                       _ENCx24_Read
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
               _UDP_Start
                 _ETH_ResetByteCount
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _IPv4_Start
                   _ARPV4_Lookup
                   _ARPV4_Request
                     _ETH_GetMAC
                       _ETH_MACRead8
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                     _ETH_Send
                       _ENCx24_Write
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ETH_Set_TXRTS
                         _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
                     _ETH_WriteStart
                       _ENCx24_Read
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ENCx24_Write
                         _ENCx24_BankselSPI
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ETH_Write16
                         _SPI_ExchangeByte
                       _ETH_WriteBlock
                         _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_Write32
                     _SPI_ExchangeByte
                   _ETH_Write8
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENCx24_Read
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENCx24_Write
                       _ENCx24_BankselSPI
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ETH_Write16
                       _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
             _ETH_Dump
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_GetMAC
               _ETH_MACRead8
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Read16
               _SPI_ExchangeByte
             _ETH_Read32
               _SPI_ExchangeByte
             _ETH_Read8
               _SPI_ExchangeByte
             _ETH_ReadBlock
               _SPI_ExchangeByte
             _memcmp
           _ETH_ReadBlock *
             _SPI_ExchangeByte
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
     _TCP_Update
       _TCP_FiniteStateMachine
         _TCB_Reset
         _TCP_PayloadSave
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _TCP_Snd
             _ETH_Insert
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENCx24_BFC
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_BFS
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _waitForDMA
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
             _ETH_WriteBlock
               _SPI_ExchangeByte
             _IPV4_Send
               _ETH_Insert
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Send
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Set_TXRTS
                   _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENCx24_BFC
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_BFS
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _waitForDMA
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
             _IPv4_Start
               _ARPV4_Lookup
               _ARPV4_Request
                 _ETH_GetMAC
                   _ETH_MACRead8
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Send
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Set_TXRTS
                     _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENCx24_Read
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENCx24_Write
                     _ENCx24_BankselSPI
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_Write32
                 _SPI_ExchangeByte
               _ETH_Write8
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
         _TCP_Snd
           _ETH_Insert
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_TxComputeChecksum
             _ENCx24_BFC
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_BFS
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Read
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENCx24_Write
               _ENCx24_BankselSPI
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _waitForDMA
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
           _IPV4_Send
             _ETH_Insert
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Send
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Set_TXRTS
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENCx24_BFC
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_BFS
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _waitForDMA
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
           _IPv4_Start
             _ARPV4_Lookup
             _ARPV4_Request
               _ETH_GetMAC
                 _ETH_MACRead8
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Send
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Set_TXRTS
                   _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENCx24_Read
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENCx24_Write
                   _ENCx24_BankselSPI
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _ETH_Write32
               _SPI_ExchangeByte
             _ETH_Write8
               _SPI_ExchangeByte
             _ETH_WriteStart
               _ENCx24_Read
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENCx24_Write
                 _ENCx24_BankselSPI
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
     _time
   _Network_WaitForLink
     _ETH_CheckLinkUp
       _ETH_readLinkStatus
         _ENCx24_Read
           _ENCx24_BankselSPI
             _SPI_ExchangeByte
           _SPI_ExchangeByte
   _SYSLOG_Init
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
     _time
   _SYSLOG_Write
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
     _time
   _initHW
     _ADC_Initialize
     _LED_Init
     _lcd_init
       _lcd_busy
       _lcd_init_pins
       _lcd_write_ctrl
     _rtcc_init
     _spi_init
     _uart_init
   _lcd_goto1
     _lcd_busy
     _lcd_write_ctrl
   _lcd_puts
     _lcd_putch
       _lcd_busy
       _lcd_write_data
   _memset
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
   _time

 _low_isr (ROOT)

 _high_isr (ROOT)
   _rtcc_handler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     35      F9       9       97.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     83      CC       7       79.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5D       1       98.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2C2      29        0.0%
DATA                 0      0     2C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Sep 09 15:13:56 2015

                         __CFG_BW$16 000000                 __end_of_DHCP_Handler 402C  
                waitForDMA@econ1_val 000B                                   l33 61CE  
                                 bsr 000FE0                   UDP_WriteBlock@data 000B  
                   ??_ICMP_EchoReply 0067          ??_IPV4_PseudoHeaderChecksum 0004  
                     ??_ICMP_Receive 0075                         __CFG_CP0$OFF 000000  
                     ??_ENCx24_Write 0007                                  l501 0000  
                                l503 0016                                  l351 646C  
                                l354 6474                                  l283 65EC  
                                l436 0012                                  l454 541C  
                                l439 611E                                  l448 540C  
                                l608 614C                                  l473 5DFC  
                                l617 5D10                                  l626 59EA  
                                l547 5AA0                                  l555 5E36  
                                l635 57BC                                  l491 55F6  
                                l556 5E28                                  l566 5E84  
                                l567 5E76                                  l904 3FAC  
                                l577 5F44                                  l578 5F36  
                                l738 603E                                  l906 3FB2  
                                l739 6030                                  l588 5F84  
                                l589 5F76                                  l863 4530  
                                l864 45B4                                  l779 359C  
                                _GIE 007F97                          ?_ETH_GetMAC 0008  
               __end_of_DHCP_Request 4644                   ICMP_EchoReply@cksm 006F  
            IPv4_Start@targetAddress 0060                          ?_ETH_Read32 0003  
                        ?_ETH_Read16 0003                         UDP_Start@ret 0058  
                                prod 000FF3                 TCP_Snd@tcpDataLength 009E  
                                tosl 000FFD                                  wreg 000FE8  
                        ?_ETH_Insert 000B                         __CFG_IESO$ON 000000  
                    ??_UDP_ReadBlock 0010                         __CFG_MODE$MM 000000  
      __size_of_DEMO_UDP_IPLockTimer 0016                          ?_ETH_Write8 0001  
                     _ipv4SubnetMask 0196                                 PL110 2210  
                               PL200 3762                                 PL120 22A6  
                               PL112 2232                                 PL210 2452  
                               PL202 243A                                 PL130 2F8C  
                               PL122 22C0                                 PL114 2278  
                               PL300 5992                                 PL220 378A  
                               PL212 4470                                 PL204 2440  
                               PL140 4466                                 PL132 2316  
                               PL124 22CC                                 PL116 2282  
                               PL310 4488                                 PL302 3DA8  
                               PL230 379E                                 PL222 5A42  
                               PL214 3468                                 PL206 3A2C  
                               PL150 2356                                 PL142 2344  
                               PL134 2332                                 PL126 4944  
                               PL118 2A08                                 PL400 641E  
                               PL320 402C                                 PL312 2BD8  
                               PL304 427C                                 PL240 3034  
                               PL232 2AAE                                 PL224 4BCA  
                               PL216 3472                                 PL208 2A9C  
                               PL160 237A                                 PL152 39CC  
                               PL144 4262                                 PL136 4446  
                               PL128 22EE                                 PL410 349C  
                               PL402 4AAA                                 PL330 247C  
                               PL322 5728                                 PL314 2BEA  
                               PL306 2BCA                                 PL250 245C  
                               PL242 2AB6                                 PL234 3D78  
                               PL226 5068                                 PL218 347C  
                               PL170 23CA                                 PL162 2A74  
                               PL154 2FAC                                 PL146 234C  
                               PL138 342C                                 PL420 3072  
                               PL412 4D42                                 PL404 4E4E  
                               PL340 2490                                 PL332 2C0E  
                               PL324 3486                                 PL316 2BFC  
                               PL308 5072                                 PL260 2B16  
                               PL252 2AD2                                 PL244 3A66  
                               PL236 4644                                 PL228 2AA6  
                               PL180 23E0                                 PL172 3446  
                               PL164 2394                                 PL156 2A20  
                               PL148 36F0                                 PL430 307C  
                               PL422 2C74                                 PL414 4F74  
                               PL406 633C                                 PL350 24AE  
                               PL342 449A                                 PL334 2C18  
                               PL326 2472                                 PL318 246A  
                               PL270 2B7E                                 PL262 4A56  
                               PL254 37BA                                 PL246 3D8A  
                               PL238 3A54                                 PL190 2A82  
                               PL182 4A20                                 PL174 3D44  
                               PL166 23A2                                 PL158 2360  
                               PL440 4E58                                 PL432 3086  
                               PL424 3ACA                                 PL416 3AC0  
                               PL408 516C                                 PL360 2C38  
                               PL352 24B8                                 PL344 249A  
                               PL336 4656                                 PL328 555A  
                               PL280 2BB2                                 PL272 3A80  
                               PL264 2B30                                 PL256 2AE0  
                               PL248 447A                                 PL192 3D6C  
                               PL184 23EA                                 PL176 3D54  
                               PL168 23B0                                 PL450 4E62  
                               PL442 2530                                 PL434 3090  
                               PL426 2526                                 PL418 2C6A  
                               PL370 5D1A                                 PL362 515E  
                               PL354 24C2                                 PL346 4C02  
                               PL338 2486                                 PL290 37D4  
                               PL282 3D98                                 PL274 2B98  
                               PL266 2B4A                                 PL258 2AFC  
                               PL194 2420                                 PL186 23FC  
                               PL178 23D6                                 PL460 4C0C  
                               PL452 37DE                                 PL444 309A  
                               PL436 3DC4                                 PL428 61A6  
                               PL380 24F4                                 PL372 3DB6  
                               PL364 44A4                                 PL356 24D2  
                               PL348 24A4                                 PL292 4A88  
                               PL284 3DA0                                 PL276 5836  
                               PL268 2B64                                 PL196 2428  
                               PL188 240E                                 PL470 3AD4  
                               PL462 622A                                 PL454 2C7E  
                               PL446 47EA                                 PL438 55FA  
                               PL390 2C54                                 PL382 24FE  
                               PL374 4660                                 PL366 2C46  
                               PL358 2C28                                 PL294 3AAA  
                               PL286 4A70                                 PL278 3A9A  
                               PL198 300C                                 PL480 44B2  
                               PL472 3ADE                                 PL464 4AB6  
                               PL456 54C2                                 PL448 30A4  
                               PL392 251C                                 PL384 2508  
                               PL376 24DC                                 PL368 3064  
                               PL296 304E                                 PL288 4BEA  
                               PL490 5D6C                                 PL482 30AE  
                               PL474 3AE8                                 PL466 3DCE  
                               PL458 2C86                                 PL394 428A  
                               PL386 3492                                 PL378 24EA  
                               PL298 5222                                 PL492 2C90  
                               PL484 253A                                 PL476 522C  
                               PL468 3DD8                                 PL396 2C5E  
                               PL388 2512                                 PL494 403E  
                               PL486 5382                                 PL478 5B44  
                               PL398 4A9E                                 PL496 592A  
                               PL488 4E6A                                 PL498 54C8  
          TCP_FiniteStateMachine@ret 00CF                      ?_Network_Manage 0001  
                       __CFG_WDT$OFF 000000                                 l1043 46F6  
                               l1220 2832                                 l1116 65B0  
                               l1301 1264                                 l1222 2750  
                               l1223 277E                                 l1250 4F00  
                               l1261 4F70                                 l1249 4F06  
                               l1282 2ECE                                 l1276 2E10  
                               l1286 2F0A                                 l1278 2E92  
                               l1561 5066                                 l1651 4CA8  
                               l2276 5DB4                                 l1805 342A  
                               l1582 0014                                 l2286 6006  
                               l1567 0004                                 l1831 3D3E  
                               l1576 0008                                 l1585 0014  
                               l1826 3B2C                                 l1579 000C  
                               l1764 31E2                                 l1774 3236  
                               l1759 31B8                                 l1784 328A  
                               l1769 320C                                 l1794 32DE  
                               l1779 3260                                 l1789 32B4  
                               l8034 5B68                                 l8220 5BD6  
                               l9100 19A2                                 l8150 0000  
                               l8038 5B8E                                 l8310 467E  
                               l8216 5BC8                                 l8152 000E  
                               l9200 1FB6                                 l9016 14C6  
                               l9008 1482                                 l8330 4756  
                               l9202 1FBC                                 l9122 1BCE  
                               l9106 1ACC                                 l8260 4A1C  
                               l8324 4742                                 l9124 1BF6  
                               l9108 1AD2                                 l9028 15E2  
                               l8270 5C4C                                 l8318 4706  
                               l8422 5770                                 l8510 28C8  
                               l9222 2012                                 l9054 16A0  
                               l9038 161E                                 l8176 534A  
                               l8328 4748                                 l8416 575E  
                               l9216 1FF4                                 l9080 17DC  
                               l9304 621C                                 l8426 579E  
                               l9242 2058                                 l9218 200A  
                               l9170 1EE2                                 l9162 1E44  
                               l9138 1D8C                                 l9066 16C4  
                               l8276 5C7A                                 l8444 64FE  
                               l8524 299A                                 l9252 20A6  
                               l9244 2062                                 l9236 204A  
                               l9156 1E2C                                 l9148 1E0C  
                               l9068 16F2                                 l8540 640E  
                               l9308 6222                                 l9404 323A  
                               l9340 312C                                 l8438 5C3E  
                               l8446 6504                                 l8526 2A02  
                               l8518 2914                                 l9270 20F0  
                               l9094 1914                                 l9078 17C4  
                               l9414 3264                                 l9350 315A  
                               l9342 3134                                 l9318 30D0  
                               l9502 33DE                                 l9510 5D84  
                               l8720 0002                                 l8632 452A  
                               l9192 1F6A                                 l9184 1F1A  
                               l9096 1990                                 l8544 6418  
                               l8800 3F0C                                 l9424 328E  
                               l9512 5D8C                                 l8466 581C  
                               l9602 5D48                                 l9266 20DE  
                               l9186 1F44                                 l9098 1996  
                               l9290 218A                                 l8722 0000  
                               l8802 3F22                                 l9434 32B8  
                               l9338 3126                                 l9522 5DAA  
                               l9514 5D90                                 l9530 5FDE  
                               l9196 1F94                                 l9292 21DE  
                               l8716 0000                                 l8724 0002  
                               l8732 623E                                 l8804 3F38  
                               l9444 32E2                                 l9364 3192  
                               l9532 5FE6                                 l8742 64BE  
                               l9542 0000                                 l9622 566A  
                               l8486 2706                                 l9286 217C  
                               l9278 214C                                 l8558 5DD2  
                               l8670 5C94                                 l8830 3FB8  
                               l8822 3F96                                 l8814 3F72  
                               l9374 31BC                                 l9358 3188  
                               l9534 5FEA                                 l9616 5648  
                               l8920 4F0E                                 l8904 4EBC  
                               l9720 2EB4                                 l8736 624E  
                               l8816 3F7A                                 l9384 31E6  
                               l9640 4FA6                                 l9800 3C3A  
                               l8746 64C4                                 l8906 4EC2  
                               l9730 2F26                                 l9714 2E78  
                               l8834 3FC0                                 l8842 3FE2  
                               l8850 401C                                 l9482 3386  
                               l9394 3210                                 l9538 5FFC  
                               l9580 51E8                                 l8940 4F66  
                               l8676 5CC4                                 l8836 3FD0  
                               l8844 3FFE                                 l9476 336E  
                               l9652 4FF0                                 l7990 5A76  
                               l8694 42DA                                 l8942 4F6C  
                               l9726 2EF0                                 l8678 5CC8  
                               l8846 400C                                 l8838 3FD6  
                               l9830 3CA6                                 l9806 3C3E  
                               l9742 3B22                                 l7992 5A7E  
                               l9912 60D8                                 l8696 42FE  
                               l8952 10F0                                 l8936 4F48  
                               l9832 3CCE                                 l9840 3CFE  
                               l9824 3C98                                 l9816 3C5C  
                               l9760 3B90                                 l9736 3AF6  
                               l7994 5A86                                 l8882 4BC6  
                               l8938 4F56                                 l9690 2D56  
                               l9658 5050                                 l9818 3C6A  
                               l9754 3B52                                 l9746 3B30  
                               l9850 3D32                                 l7988 5A6E  
                               l9684 2D0C                                 l8796 3EE4  
                               l9844 3D24                                 l9828 3CA0  
                               l9748 3B34                                 l9772 3BD0  
                               l7998 5A8E                                 l9854 58C0  
                               l9950 3520                                 l9934 34D2  
                               l9598 5D3A                                 l8974 1278  
                               l8966 1256                                 l9694 2D94  
                               l9838 3CF0                                 l9758 3B8A  
                               l9766 3BAE                                 l9774 3BF2  
                               STR_1 10A4                                 l9944 3512  
                               l8976 1288                                 l8896 4EA4  
                               l9848 3D2C                                 l9792 3C1C  
                               l9784 3C12                                 l9768 3BCA  
                               STR_2 1043                                 STR_3 109A  
                               l9858 58EC                                 l8994 1356  
                               l8898 4EAC                                 l9698 2DAA  
                               l9786 3C18                                 STR_4 1070  
                               STR_5 1081                                 l9876 619A  
                               l9868 5EEE                                 l9964 3576  
                               l9980 35FA                                 STR_6 108E  
                               STR_7 10AC                                 STR_8 105F  
                               _GIEH 007F97                                 _GIEL 007F96  
                               _LATE 000F8D                                 _LATH 000F90  
                               _LATJ 000F91                                 _IPEN 007E87  
                               _RBPU 007F8F                                 _TMR1 000FCE  
                    lcd_write_data@d 0002                        ?_ETH_MACRead8 0001  
                       lcd_goto1@pos 0003                         lcd_goto2@pos 0003  
                      __CFG_FCMEN$ON 000000                    DEMO_UDP_Recv@str1 0097  
                  DEMO_UDP_Recv@str2 00A7                         __CFG_STVR$ON 000000  
             __end_of_lcd_write_data 63EC                      __end_of_TCP_Snd 2A08  
                               _data 01C8               __end_of_lcd_write_ctrl 640C  
              __end_of_DEMO_UDP_Recv 342C                      _TCP_PayloadSave 4294  
              __end_of_DEMO_UDP_Send 515E                      lcd_write_ctrl@c 0002  
                               _main 4C16                                 _time 5AA4  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               indf0 000FEF                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 005E       __size_of_DEMO_UDP_ClaimIPCheck 001A  
                        _SYSLOG_Init 6152        __end_of_DEMO_UDP_ClaimIPCheck 64CC  
                               prodl 000FF3                                 start 0028  
             ??_DEMO_UDP_MeasureTemp 0008                 UDP_WriteBlock@length 0009  
                      __CFG_FOSC2$ON 000000                         ?_IPV4_Packet 0001  
                 __size_of_ETH_Read8 0030                   __size_of_ETH_Flush 0034  
             __size_of_ETH_ReadBlock 0092                    SPI_ExchangeByte@v 0002  
                       ___param_bank 000010                __size_of_SYSLOG_Write 0026  
                 __size_of_IPV4_Init 000C                   __size_of_IPV4_Send 0062  
                   ??_ENCx24_PhyRead 000D                         ?_ETH_Write32 0003  
                       ?_ETH_Write16 0003                   ETH_Flush@newRXTail 0009  
                 ETH_Init@phcon1_val 0016                     ARPV4_Request@ret 002E  
                __size_of_ARPV4_Init 001A             __size_of_ETH_CheckLinkUp 0034  
            ?_TCP_FiniteStateMachine 0001                     __end_of_LED_Init 63CC  
                       _BAUDCON1bits 000F7E                        __CFG_WAIT$OFF 000000  
      ETH_TxComputeChecksum@econ1Val 001B                     _ETH_GetByteCount 642A  
                     __CFG_CCP2MX$ON 000000                                l10012 3802  
                              l10040 393C                                l10032 3910  
                              l10024 38B6                                l10202 4DEC  
                              l10018 381C                                l10204 4DFC  
                              l10300 56D0                                l10060 39AE  
                              l10134 63B0                                l10152 5AE6  
                              l10320 571A                                l10304 56DC  
                              l10048 3966                                l10064 39BA  
                              l10402 0000                                l10314 5702  
                              l10234 53DA                                l10242 5404  
                   __end_of_ETH_Copy 55FA                                l10148 5AC8  
                              l10308 56E4                                l10340 5282  
                              l10238 53E8                                l10342 528A  
                              l10264 6480                                l10256 5422  
                              l10514 50FC                                l10506 50AA  
                              l10338 527A                                l10346 52AE  
                              l10370 405E                                l10524 5154  
                              l10276 6268                                l10372 4068  
                              l10294 56C0                                l10390 4238  
                              l10550 4C5A                                l10472 5514  
                              l10490 654A                                l10298 56CA  
                              l10386 420E                                l10458 65B2  
                   __end_of_ETH_Dump 5E08                                l10476 5548  
                              l10548 4C4E                                l10574 4D18  
                              l10690 52D8                     __end_of_ETH_Init 4E4E  
                              l10686 52CA                                l10688 52D4  
                  _nextPacketPointer 01A6                     __end_of_ETH_Send 63AC  
                              ?_main 0001                                _ADRES 000FC3  
                              ?_time 0002               __size_of_ETH_Set_TXRTS 000C  
IPV4_PseudoHeaderChecksum@payloadLen 0002                                _CREN1 007D5C  
                              u11100 2A3A                                u11020 2564  
                              u11110 2646                                u11030 257C  
                              u11200 271A                                u11120 265A  
                              u11040 25A6                                u11105 2A30  
                              u12001 400A                                u11130 266E  
                              u11050 25BA                                u11027 2558  
                              u11300 27CE                                u11220 2738  
                              u11140 2682                                u11060 25DC  
                              u11117 263E                                u11037 2576  
                              u11310 27E0                                u11070 25F0  
                              u11207 2714                                u11127 2654  
                              u11047 25A0                                u11320 27FC  
                              u11240 2750                                u11160 26BA  
                              u11080 2604                                u13000 1990  
                              u12200 11C0                                u11137 2668  
                              u11057 25B4                                u11410 292E  
                              u11330 280E                                u11250 2766  
                              u11170 26CE                                u11090 2618  
                              u13010 19B8                                u12210 11DA  
                              u12130 10CE                                u11307 27C8  
                              u11227 2732                                u11147 267C  
                              u11067 25D4                                u11420 2962  
                              u11180 26F6                                u13100 1AA4  
                              u12300 12F0                                u12220 11F2  
                              u12140 10E8                                u11317 27DA  
                              u11077 25EA                                u13021 19C4  
                              u11430 2978                                u11350 2832  
                              u11270 277E                                u13110 1AB8  
                              u13030 19E0                                u12310 1308  
                              u12230 120C                                u12150 1128  
                              u12070 4ECC                                u11327 27F6  
                              u11247 274A                                u11167 26B4  
                              u11087 25FE                                u13007 1988  
                              u12207 11B8                                u11600 4812  
                              u11360 284A                                u11280 27A0  
                              u13200 1B74                                u13120 1ACC  
                              u12400 13F0                                u12320 1320  
                              u12240 1224                                u12160 114C  
                              u11520 5CE8                                u11417 2928  
                              u11337 2808                                u11257 2760  
                              u11177 26C8                                u11097 2612  
                              u13041 19F8                                u13017 19B0  
                              u12217 11D2                                u12137 10C8  
                              u11610 4828                                u11450 2998  
                              u11370 2892                                u11290 27B2  
                              u13210 1B8E                                u13130 1AE4  
                              u13050 1A1A                                u12410 1408  
                              u12330 133A                                u12250 123C  
                              u12170 116C                                u11530 59A8  
                              u11427 295A                                u11187 26F0  
                              u13107 1A9E                                u12307 12E8  
                              u12227 11EA                                u12147 10E2  
                              u14011 31AE                                u10660 5B86  
                              u11700 490A                                u11620 4846  
                              u11460 29B2                                u13220 1BA8  
                              u13060 1A30                                u12500 14DE  
                              u12420 1426                                u12340 1354  
                              u12260 1256                                u12180 1184  
                              u11437 2972                                u11357 282A  
                              u11277 2778                                u13117 1AB2  
                              u13037 19D8                                u12317 1300  
                              u12237 1204                                u12157 1114  
                              u14101 322C                                u10750 0016  
                              u11710 492A                                u11630 4864  
                              u11470 2A02                                u13310 1C8E  
                              u13230 1BBA                                u13150 1B00  
                              u13070 1A4E                                u12510 14F6  
                              u12430 1440                                u12350 136E  
                              u12270 12A0                                u12190 119C  
                              u10751 0014                                u11607 480A  
                              u11367 2844                                u11287 2794  
                              u13207 1B6E                                u13127 1AC6  
                              u12407 13E8                                u12327 1318  
                              u12247 121C                                u12167 1140  
                              u11720 4942                                u11640 4882  
                              u11800 4360                                u13400 1D76  
                              u13240 1BCC                                u13080 1A6C  
                              u12600 15DE                                u12440 1458  
                              u12360 1386                                u12280 12BE  
                              u11617 4820                                u11457 2990  
                              u11377 287E                                u11297 27AC  
                              u13217 1B88                                u13137 1AE0  
                              u13057 1A12                                u12521 1512  
                              u12417 1400                                u12337 1332  
                              u12257 1234                                u12177 1164  
                              u14041 31D8                                u11650 48A0  
                              u11810 4374                                u11730 42AA  
                              u13330 1CCC                                u13250 1C06  
                              u13170 1B2A                                u13090 1A88  
                              u12610 15FA                                u12530 152C  
                              u12290 12D8                                u10667 5B80  
                              u11707 4904                                u11627 483E  
                              u11467 29AA                                u13227 1BA2  
                              u13067 1A28                                u12507 14D6  
                              u12427 141E                                u12371 13A2  
                              u12347 134C                                u12267 124E  
                              u12187 117C                                u14131 3256  
                              u10780 499A                                u10860 468C  
                              u11660 48B6                                u11820 4394  
                              u13500 1E54                                u13420 1D8C  
                              u13340 1CF8                                u13180 1B3E  
                              u12620 1614                                u12540 1546  
                              u12460 147E                                u12380 13BC  
                              u11717 4922                                u11637 485C  
                              u11477 29EE                                u13317 1C8A  
                              u13261 1C1E                                u13237 1BB4  
                              u13157 1AFA                                u13077 1A46  
                              u12517 14EE                                u12437 1438  
                              u12357 1366                                u12277 1298  
                              u12197 1194                                u14221 32D4  
                              u10790 49CA                                u10870 469C  
                              u11670 48CC                                u11830 43BC  
                              u11750 42C4                                u13510 1E64  
                              u13430 1DBC                                u13350 1D12  
                              u13270 1C30                                u13190 1B5A  
                              u12710 169C                                u12550 1560  
                              u12470 149A                                u12390 13D6  
                              u11727 493A                                u11647 487A  
                              u11807 435A                                u13407 1D72  
                              u13247 1BC6                                u13087 1A64  
                              u12607 15DC                                u12447 1450  
                              u12367 137E                                u12287 12B6  
                              u14071 3202                                _LATB3 007C53  
                              u11680 48E2                                u11840 4424  
                              u13600 1F10                                u13520 1E7C  
                              u13440 1DCC                                u13360 1D2A  
                              u12720 16BA                                u12640 1634  
                              u12560 1578                                u12480 14B4  
                              u11920 3DFC                                u10785 4998  
                              u11657 4898                                u11817 436E  
                              u11737 42A4                                u13337 1CC2  
                              u13281 1C48                                u13257 1C02  
                              u13177 1B24                                u13097 1A82  
                              u12617 15F2                                u12537 1524  
                              u12297 12D0                                u14161 3280  
                              u10970 579A                                u11690 48F6  
                              u11850 443E                                u11770 42FE  
                              u13530 1E92                                u13370 1D44  
                              u13290 1C5A                                u12810 17A4  
                              u12570 1596                                u15210 39F0  
                              u10795 49C8                                u15131 35AC  
                              u15051 3504                                u11667 48AE  
                              u11827 438E                                u13507 1E50  
                              u13427 1D88                                u13347 1CEE  
                              u13187 1B38                                u12627 160C  
                              u12547 153E                                u12467 147C  
                              u12387 13B4                                u11931 3E14  
                              u14251 3326                                u11780 4322  
                              u13700 1FEA                                u13620 1F5A  
                              u13540 1EA2                                u13460 1DFE  
                              u13380 1D5C                                u12900 188A  
                              u12740 1708                                u12580 15B0  
                              u11677 48C4                                u11837 43AE  
                              u11757 42BE                                u13517 1E60  
                              u13437 1DB8                                u13357 1D0E  
                              u13277 1C2C                                u13197 1B54  
                              u12717 169A                                u12557 1558  
                              u12477 1492                                u12397 13CE  
                              u11941 3E4E                                u11790 4340  
                              u13550 1EB2                                u13470 1E22  
                              u12830 17D8                                u12670 165E  
                              u12590 15C8                                u14510 2DC6  
                              u15230 38A4                                u11687 48DA  
                              u11847 4410                                u13607 1F0A  
                              u13527 1E78                                u13447 1DC8  
                              u13367 1D20                                u12911 18A6  
                              u12751 1714                                u12727 16B2  
                              u12647 162E                                u12567 1570  
                              u12487 14AC                                u16007 63F4  
                              u14191 32AA                                u15215 39E6  
                              u15080 3714                                u13640 1F7A  
                              u13560 1EC8                                u12920 18C2  
                              u12840 17F4                                u12760 1730  
                              u14520 2DDA                                _LATH0 007C80  
                              u10977 5792                                u11697 48F0  
                              u11857 4436                                u11777 42F2  
                              u13801 20A4                                u13537 1E8C  
                              u13377 1D40                                u13297 1C56  
                              u12817 179C                                u12577 158E  
                              u16017 6402                                u11961 3ED8  
                              u15241 38B4                                _LATH1 007C81  
                              u13810 20B8                                u13730 2024  
                              u13650 1F90                                u13570 1EDE  
                              u13490 1E42                                u12930 18DC  
                              u12770 1748                                u12690 167C  
                              u14530 2E02                                u14450 2D38  
                              _LATH2 007C82                                u16027 4D58  
                              u15171 3622                                u15091 3562  
                              u11787 4316                                u13707 1FE4  
                              u13627 1F54                                u13547 1E9E  
                              u13467 1DFA                                u13387 1D52  
                              u12907 1882                                u12851 180C  
                              u12747 1700                                u12587 15A8  
                              u15180 3690                                u13900 2176  
                              u13660 1FAA                                u13580 1EF4  
                              u12940 18F4                                u12860 182E  
                              u14700 2FD0                                u14620 2EB2  
                              u16037 4D6E                                u15085 370A  
                              u11797 433A                                u13557 1EAE  
                              u13477 1E1C                                u12837 17D6  
                              u12781 1760                                u12677 1658  
                              u12597 15C0                                u14517 2DC0  
                              u13910 219C                                u13830 20D4  
                              u13750 2040                                u12950 1910  
                              u12790 1780                                u14630 2ECC  
                              u14470 2D90                                u16047 4DF2  
                              u13647 1F76                                u13567 1EC2  
                              u12927 18BA                                u12871 183A  
                              u12847 17EC                                u12767 1728  
                              u13920 21F4                                u13680 1FCE  
                              u12960 192C                                u12880 1856  
                              u14800 3BC2                                u15600 4102  
                              u16057 590A                                u15185 3686  
                              u13817 20B4                                u13737 2020  
                              u13657 1F8A                                u13577 1ED8  
                              u13497 1E3C                                u12937 18D4  
                              u12777 1740                                u12697 1676  
                              u14705 2FC6                                u14537 2DF4  
                              u14457 2D2C                                u15290 5AC6  
                              u13930 220A                                u13850 2100  
                              u13770 2072                                u12970 1946  
                              u15610 4116          __size_of_ETH_readLinkStatus 0000  
                              u16067 5920                                u13907 2170  
                              u13667 1FA4                                u13587 1EF0  
                              u12947 18EC                                u12891 186E  
                              u12867 1822                                u14627 2EAA  
                              u13860 2110                                u12980 195E  
                              u14660 2EEE                                u14580 2E76  
                              u15700 41E8                                u16077 61C6  
                              u13917 2198                                u13837 20CE  
                              u13781 2082                                u13757 203A  
                              u12957 1908                                u12797 1774  
                              u14637 2EC4                                u14477 2D84  
                              u13870 2126                                u13790 209C  
                              u12990 1976                                u14670 2F08  
                              u14590 2E90                                u15710 4202  
                              u15630 4132                                u13927 21EE  
                              u13687 1FCA                                u12967 1924  
                              u12887 184E                                u14807 3BBC  
                              u15607 40F6                                u13880 213C  
                              u15720 4232                                u13937 2204  
                              u13857 20FC                                u13777 206E  
                              u12977 193E                                u15617 4110  
                              u13890 2164                                u14690 2F26  
                              u15650 414C                                u15570 407A  
                              u13867 210C                                u12987 1956  
                              u14667 2EE6                                u14587 2E6E  
                              u15707 41E0                                u14908 3C84  
                              u14780 3B88                                u14748 3B0C  
                              u13877 2120                                u13797 2092  
                              u12997 196E                                u14677 2F00  
                              u14597 2E88                                u15717 41FA  
                              u15637 412C                                u14790 3BA6  
                              u15670 4164                                u15590 40C0  
                              u13887 2136                                u15727 4226  
                              u15840 5108               __size_of_ETH_SetPktDec 000C  
                              u14928 3D0E                                u15680 419E  
                              u13897 2160                                u14697 2F1E  
                              u15657 4146                                u15577 4074  
                              u14778 3B62                                u15690 41B4  
                 __size_of_TCB_Reset 0150                                u14787 3B82  
                              u15907 5442                                u14797 3BA0  
                              u15677 415E                                u15597 40B4  
                              u15917 544E                                u15870 4CA8  
                              u15687 4192                                u15927 545A  
                              u15697 41AE                                u15937 546C  
                    __end_of___lwdiv 5DBE                                u15947 547E  
                              u15957 54B8                                u15967 63D8  
                              u15977 63E2                                u15897 5436  
                              u15987 6630                                u15997 6352  
                    __end_of___lwmod 6010                  __size_of_ENCx24_BFC 0040  
                __size_of_ENCx24_BFS 0040                                _SPEN1 007D5F  
                              _TX1IF 007CF4                                _PORTJ 000F88  
                       main@ip_timer 02C9                      __end_of__doprnt 3D44  
                              _TRISA 000F92                                _TRISE 000F96  
                              _TRISH 000F99                                _TRISJ 000F9A  
                     __CFG_ECCPMX$ON 000000       __size_of_ETH_TxComputeChecksum 00A0  
      __end_of_ETH_TxComputeChecksum 5382                    ??_ENCx24_PHYWrite 000D  
               __size_of_DHCP_Manage 008C                     __end_of_TCP_Init 65E6  
                   __end_of_TCP_Recv 2F8C                          ?_IPv4_Start 004B  
                              _claim 01B0                      __end_of_dpowers 100B  
                   __end_of_UDP_Send 5836                    ETH_GetMAC@macAddr 0008  
                        ?_TCP_Update 0001                   __size_of_UDP_Read8 0000  
                              _putch 6464                                main@t 02C0  
                  _ETH_ResetReceiver 5E94                       ??_ETH_MACRead8 0005  
                 __size_of_UDP_Start 004E                      __end_of_low_isr 0028  
          __size_of_ETH_EventHandler 00A6            _IPV4_PseudoHeaderChecksum 5604  
                              pclath 000FFA      TCP_FiniteStateMachine@nextState 00D3  
                              tablat 000FF5                                time@t 0002  
                              plusw1 000FE3                                plusw2 000FDB  
                       _SYSLOG_Write 62D8                      ?_lcd_write_data 0001  
                 ?_ETH_ResetReceiver 0001                      ??_lcd_init_pins 0002  
                    ?_lcd_write_ctrl 0001                                status 000FD8  
                    __end_of_sprintf 6208                        ?_IPV4_GetMyIP 0002  
                        ?_UDP_Write8 0001                        ?_ETH_SaveRDPT 0001  
                       __end_ofPL110 2232                         __end_ofPL200 378A  
                       __end_ofPL120 22C0                         __end_ofPL112 2278  
                       __end_ofPL210 245C                         __end_ofPL202 2440  
                       __end_ofPL130 2FAC                         __end_ofPL122 22CC  
                       __end_ofPL114 2282                         __end_ofPL300 599C  
                       __end_ofPL220 379E                         __end_ofPL212 447A  
                       __end_ofPL204 2452                         __end_ofPL140 4470  
                       __end_ofPL132 2332                         __end_ofPL124 22EE  
                       __end_ofPL116 22A6                         __end_ofPL310 449A  
                       __end_ofPL302 3DB6                         __end_ofPL230 37BA  
                       __end_ofPL222 5A4E                         __end_ofPL214 3472  
                       __end_ofPL206 3A54                         __end_ofPL150 2360  
                       __end_ofPL142 234C                         __end_ofPL134 2344  
                       __end_ofPL126 495E                         __end_ofPL118 2A20  
                       __end_ofPL400 642A                         __end_ofPL320 403E  
                       __end_ofPL312 2BEA                         __end_ofPL304 428A  
                       __end_ofPL240 304E                         __end_ofPL232 2AB6  
                       __end_ofPL224 4BEA                         __end_ofPL216 347C  
                       __end_ofPL208 2AA6                         __end_ofPL160 2394  
                       __end_ofPL152 3A2C                         __end_ofPL144 427C  
                       __end_ofPL136 4466                         __end_ofPL128 2316  
                       __end_ofPL410 34A8                         __end_ofPL402 4AB6  
                       __end_ofPL330 2486                         __end_ofPL322 5734  
                       __end_ofPL314 2BFC                         __end_ofPL306 2BD8  
                       __end_ofPL250 246A                         __end_ofPL242 2AD2  
                       __end_ofPL234 3D8A                         __end_ofPL226 5072  
                       __end_ofPL218 3486                         __end_ofPL170 23D6  
                       __end_ofPL162 2A82                         __end_ofPL154 300C  
                       __end_ofPL146 2356                         __end_ofPL138 3446  
                       __end_ofPL420 307C                         __end_ofPL412 4D4E  
                       __end_ofPL404 4E58                         __end_ofPL340 249A  
                       __end_ofPL332 2C18                         __end_ofPL324 3492  
                       __end_ofPL316 2C0E                         __end_ofPL308 5086  
                       __end_ofPL260 2B30                         __end_ofPL252 2AE0  
                       __end_ofPL244 3A80                         __end_ofPL236 4656  
                       __end_ofPL228 2AAE                         __end_ofPL180 23EA  
                       __end_ofPL172 3468                         __end_ofPL164 23A2  
                       __end_ofPL156 2A74                         __end_ofPL148 3762  
                       __end_ofPL430 3086                         __end_ofPL422 2C7E  
                       __end_ofPL414 4F7E                         __end_ofPL406 6346  
                       __end_ofPL350 24B8                         __end_ofPL342 44A4  
                       __end_ofPL334 2C28                         __end_ofPL326 247C  
                       __end_ofPL318 2472                         __end_ofPL270 2B98  
                       __end_ofPL262 4A70                         __end_ofPL254 37D4  
                       __end_ofPL246 3D98                         __end_ofPL238 3A66  
                       __end_ofPL190 2A9C                         __end_ofPL182 4A56  
                       __end_ofPL174 3D54                         __end_ofPL166 23B0  
                       __end_ofPL158 237A                         __end_ofPL440 4E62  
                       __end_ofPL432 3090                         __end_ofPL424 3AD4  
                       __end_ofPL416 3ACA                         __end_ofPL408 5178  
                       __end_ofPL360 2C46                         __end_ofPL352 24C2  
                       __end_ofPL344 24A4                         __end_ofPL336 4660  
                       __end_ofPL328 556A                         __end_ofPL280 2BCA  
                       __end_ofPL272 3A9A                         __end_ofPL264 2B4A  
                       __end_ofPL256 2AFC                         __end_ofPL248 4488  
                       __end_ofPL192 3D78                         __end_ofPL184 23FC  
                       __end_ofPL176 3D6C                         __end_ofPL168 23CA  
         ETH_RxComputeChecksum@rxPtr 0017                         __end_ofPL450 4E6A  
                       __end_ofPL442 253A                         __end_ofPL434 309A  
                       __end_ofPL426 2530                         __end_ofPL418 2C74  
                       __end_ofPL370 5D28                         __end_ofPL362 516C  
                       __end_ofPL354 24D2                         __end_ofPL346 4C0C  
                       __end_ofPL338 2490                         __end_ofPL290 37DE  
                       __end_ofPL282 3DA0                         __end_ofPL274 2BB2  
                       __end_ofPL266 2B64                         __end_ofPL258 2B16  
                       __end_ofPL194 2428                         __end_ofPL186 240E  
                       __end_ofPL178 23E0                         __end_ofPL460 4C16  
                       __end_ofPL452 37E8                         __end_ofPL444 30A4  
                       __end_ofPL436 3DCE                         __end_ofPL428 61AE  
                       __end_ofPL380 24FE                         __end_ofPL372 3DC4  
                       __end_ofPL364 44B2                         __end_ofPL356 24DC  
                       __end_ofPL348 24AE                         __end_ofPL292 4A9E  
                       __end_ofPL284 3DA8                         __end_ofPL276 5850  
                       __end_ofPL268 2B7E                         __end_ofPL196 243A  
                       __end_ofPL188 2420                         __end_ofPL470 3ADE  
                       __end_ofPL462 6234                         __end_ofPL454 2C86  
                       __end_ofPL446 47F4                         __end_ofPL438 5604  
                       __end_ofPL390 2C5E                         __end_ofPL382 2508  
                       __end_ofPL374 466E                         __end_ofPL366 2C54  
                       __end_ofPL358 2C38                         __end_ofPL294 3AC0  
                       __end_ofPL286 4A88                         __end_ofPL278 3AAA  
                       __end_ofPL198 3034                         __end_ofPL480 44BC  
                       __end_ofPL472 3AE8                         __end_ofPL464 4AC0  
                       __end_ofPL456 54C8                         __end_ofPL448 30AE  
                       __end_ofPL392 2526                         __end_ofPL384 2512  
                       __end_ofPL376 24EA                         __end_ofPL368 3072  
                       __end_ofPL296 3064                         __end_ofPL288 4C02  
                       __end_ofPL490 5D74                         __end_ofPL482 30B8  
                       __end_ofPL474 3AF2                         __end_ofPL466 3DD8  
                       __end_ofPL458 2C90                         __end_ofPL394 4294  
                       __end_ofPL386 349C                         __end_ofPL378 24F4  
                       __end_ofPL298 522C                         __end_ofPL492 2C98  
                       __end_ofPL484 2544                         __end_ofPL476 5236  
                       __end_ofPL468 3DE2                         __end_ofPL396 2C6A  
                       __end_ofPL388 251C                         __end_ofPL494 4046  
                       __end_ofPL486 538A                         __end_ofPL478 5B4C  
                       __end_ofPL398 4AAA                         __end_ofPL496 5930  
                       __end_ofPL488 4E70                         __end_ofPL498 54CE  
                      ?_ETH_SetRXptr 0003                  __size_of_ETH_GetMAC 004A  
                     __CFG_ETHLED$ON 000000                  UDP_ReadBlock@length 000E  
      ETH_TxComputeChecksum@position 000D                  __size_of_ETH_Read16 003E  
                __size_of_ETH_Read32 005C                 __end_of_ARPV4_Packet 36F0  
                    __initialization 6084                  ??_ETH_ResetReceiver 0009  
                __size_of_ETH_Insert 0054                 __end_of_ARPV4_Lookup 5C90  
                       __end_of_main 4D42                 __end_of_ARPV4_Update 6288  
                       __end_of_time 5AF8       __end_of_TCP_FiniteStateMachine 2210  
                __size_of_ETH_Write8 001A                          ETH_Copy@len 000D  
                    _DHCP_WriteZeros 64FC                               ??_main 0182  
                             ??_time 0006                        __activetblptr 000003  
                _TCP_ParseTCPOptions 4E70                        _ETH_ReadBlock 5734  
                    TCP_Snd@txHeader 00A0                    __end_of_ETH_Read8 6152  
                  __end_of_ETH_Flush 60EE            __end_of_ETH_ResetReceiver 5ED4  
            __end_of_TCP_PayloadSave 4446                    __end_of_IPV4_Init 6618  
                     UDP_Write8@data 0004             __end_of_SPI_ExchangeByte 65F4  
                  __end_of_IPV4_Send 5992                            ??_TCP_Snd 0067  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     _DEMO_UDP_IdlePkt 6208  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                     ETH_Dump@length 000B                               ?_putch 0001  
                             _T1SYNC 007E6A                               _OSCCON 000FD3  
                     ??_IPV4_GetMyIP 0006                               _SPBRG1 000FAF  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR1CS 007E69                       ??_ETH_SaveRDPT 000B  
                             _TMR1IP 007CF8                               _TMR1ON 007E68  
                      _ETH_Set_TXRTS 6618                 __size_of_ENCx24_Read 004A  
                             _SSPBUF 000FC9                 __end_of_ICMP_Receive 5D6C  
                     ??_ETH_SetRXptr 0005                        _ETH_SetPktDec 6600  
                             _TXREG1 000FAD                               _TXSTA1 000FAC  
                   __end_of_dhcpName 1028                 ?_TCP_ParseTCPOptions 0001  
                  __end_of_TCB_Reset 4944                 __end_of_ENCx24_Write 5E94  
              __size_of_DHCP_Handler 024A                    main@no_ip_display 02C4  
                     __CFG_XINST$OFF 000000                  DEMO_UDP_Recv@length 0059  
                    __CFG_EASHFT$OFF 000000                  _ETH_SendSystemReset 58C0  
                   __end_of_lcd_busy 6638                     __end_of_lcd_init 54C2  
                     ETH_ReadBlock@p 0008                     __end_of_high_isr 6652  
                   ??_UDP_WriteBlock 000B                ICMP_EchoReply@icmpHdr 0074  
                   __end_of_lcd_puts 641E                   _ETH_ResetByteCount 659E  
               TCP_Snd@payloadLength 009B                ICMP_EchoReply@ipv4Hdr 0058  
                __size_of_IPv4_Start 017C                               _ethMAC 02B2  
                             _arpMap 022E                            ??___lwdiv 0006  
                          ??___lwmod 000D                __size_of_DHCP_Request 0188  
                  __end_of_UDP_Read8 0000                  __size_of_TCP_Update 021C  
                             _initHW 5F94                               _memcmp 5C90  
                          ??__doprnt 0010                               _memset 6234  
                ETH_SetRXptr@address 0003                    __end_of_UDP_Start 5C42  
                             clear_0 608A                               clear_1 6096  
                             _tcpMss 01AE                         __doprnt@flag 0017  
               __end_of_broadcastMAC 103D                               _printf 62FE  
             ETH_EventHandler@eirVal 0011                  ?_ETH_ResetByteCount 0001  
                       __doprnt@prec 0014                               main@ip 02ED  
                    UDP_Start@destIP 0067                 ETH_GetByteCount@wPtr 000D  
                __size_of_UDP_Write8 0000                       ?_ETH_ReadBlock 0003  
                       ?_UDP_Receive 00C6                         __mediumconst 0000  
                  ??_ETH_CheckLinkUp 000F                 ?_ETH_SendSystemReset 0001  
                          ??_low_isr 0001         __size_of_DEMO_UDP_SetClaimIP 0008  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                     __end_of_spi_init 6600  
           ADC_GetConversion@channel 0005         __size_of_Network_WaitForLink 000E  
                    _UDP_GetDestPort 6638                   ETH_CheckLinkUp@ret 0013  
                          ??_sprintf 0027                         ??_ARPV4_Init 0002  
                       ?_UDP_Write32 0007                         ?_UDP_Write16 0005  
              DHCP_WriteZeros@length 0004                         _DHCP_Handler 3DE2  
                      DHCP_Handler@v 007F                       ETH_Insert@data 0011  
                    __CFG_FOSC$HSPLL 000000                       ?_ETH_Set_TXRTS 0001  
                         __accesstop 0060              __end_of__initialization 60B0  
                     ?_ETH_SetPktDec 0001                 ??_ETH_ResetByteCount 000B  
                       ??_ENCx24_BFC 0007                         ??_ENCx24_BFS 0007  
                          ?_LED_Init 0001                ??_TCP_ParseTCPOptions 000F  
                ENCx24_PHYWrite@data 000B                            ?_ETH_Copy 000D  
                          ?_ETH_Dump 000B                            ?_ETH_Init 0001  
                          ?_ETH_Send 0001                        ___rparam_used 000001  
                       _DHCP_Request 44BC                        ?_Network_Init 0001  
                      ?_Network_Read 0001               IPV4_Send@payloadLength 001D  
              IPv4_Start@destAddress 004B              __end_of_DHCP_WriteZeros 6514  
                     __pcstackCOMRAM 0001                         __pidataBANK0 6652  
              _ETH_RxComputeChecksum 5178              __size_of_ETH_WriteBlock 0054  
               __size_of_IPV4_Packet 01E4                __end_of_ARPV4_Request 4A20  
                          LED_Init@x 0002                            ?_TCP_Init 0001  
                          ?_TCP_Recv 00D4              __size_of_ETH_WriteStart 004C  
                          ?_UDP_Send 0001                        __end_of_putch 647E  
                  UDP_ReadBlock@data 000C                 __end_of_ETH_MACRead8 604C  
               __size_of_ETH_Write16 001A                 __size_of_ETH_Write32 0028  
                 __end_of_ARPV4_Init 6498    TCP_ParseTCPOptions@tcpOptionsSize 0013  
                       _TXPacketSize 019E         __end_of_ETH_NextPacketUpdate 58C0  
                       ??_ETH_GetMAC 000A                         _dhcpServerId 0222  
                       ETH_Read8@ret 0003                         ??_ETH_Read32 0007  
                       ??_ETH_Read16 0005                     ??_Network_Manage 00FE  
                 __end_of_ENCx24_BFC 5F94                   __end_of_ENCx24_BFS 5F54  
              ??_ETH_SendSystemReset 000B                         ??_ETH_Insert 000F  
                 __size_of_lcd_clear 0022                   __size_of_lcd_goto1 000E  
                 __size_of_lcd_goto2 000E           __size_of_ETH_ResetReceiver 0040  
                       ??_ETH_Write8 0003             DHCP_Handler@optionLength 0092  
                   ?_TCP_PayloadSave 005A                           __doprnt@ap 000F  
                         __doprnt@cp 0015                           __doprnt@pb 001B  
                 __size_of_lcd_putch 001C                              ??_putch 0002  
                         __pbssBANK1 0183                           __pbssBANK2 0200  
                   _ETH_EventHandler 538A             __end_of_ETH_GetByteCount 6448  
              __size_of_ARPV4_Packet 0248                      UDP_Write32@data 0007  
                    UDP_Write16@data 0005                           ??_LED_Init 0002  
              __size_of_ARPV4_Lookup 004E                         ?_SYSLOG_Init 0001  
                         ??_ETH_Copy 000F                           ??_ETH_Dump 000D  
                         ??_ETH_Init 0014                       ??_Network_Init 0018  
                     ??_Network_Read 011C                           ??_ETH_Send 0009  
              __size_of_ARPV4_Update 002A           DEMO_UDP_Send@pot_adcResult 0070  
                 ENCx24_BankselSPI@a 0003                           _macAddress 103D  
                    TCB_Reset@tcbPtr 0002         __end_of_DEMO_UDP_IPLockTimer 6556  
                 __end_of_ETH_GetMAC 5A42                        ETH_MACRead8@a 0007  
                      ETH_MACRead8@v 0005                   __end_of_ETH_Read16 5D1A  
                 __end_of_ETH_Read32 59F8                __end_of_UDP_GetDestIP 657C  
                 __end_of_ETH_Insert 5BF4                         IPV4_Send@ret 0023  
                         ??_TCP_Init 0002                           ??_TCP_Recv 00DA  
                    _ENCx24_PHYWrite 6180                   __end_of_ETH_Write8 64B2  
                            ?_initHW 0001                           ??_UDP_Send 0028  
                            ?_memcmp 0002                           _deviceTime 02F1  
                            ?_memset 0002            ETH_EventHandler@macon2Val 000D  
                            ?_printf 001C              __size_of_ADC_Initialize 0016  
                            _T1CKPS0 007E6C                              _T1CKPS1 007E6D  
               __end_of_IPV4_GetMyIP 658E                      ??_ETH_ReadBlock 0007  
               __end_of_ETH_SaveRDPT 659E              __end_of_UDP_GetDestPort 6642  
                            _T1OSCEN 007E6B                 __end_of_ETH_SetRXptr 64FC  
                 __size_of_uart_init 0016                   __size_of_rtcc_init 0038  
                       SYSLOG_Init@t 0027                           _ipv4Header 0296  
                       _ARPV4_Packet 34A8                              _OSCTUNE 000F9B  
                       ??_IPv4_Start 0050                     ??_lcd_write_data 0002  
                            _SSP1BUF 000FC9                     ??_lcd_write_ctrl 0002  
                       _ARPV4_Lookup 5C42                              _TCP_Snd 2544  
              __end_of_UDP_ReadBlock 656A                         ??_TCP_Update 00D4  
              __size_of_ICMP_Receive 0044                         _ARPV4_Update 625E  
                          ?_lcd_busy 0001                            ?_lcd_init 0001  
                          ?_high_isr 0001                      ??_ETH_Set_TXRTS 0003  
                          ?_lcd_puts 0004                      ??_ETH_SetPktDec 0003  
              __size_of_ENCx24_Write 0042               ARPV4_Lookup@ip_address 0002  
                         _ipv4Router 0226                           _led_values 0200  
                    TCP_Update@count 00DC                         ??_UDP_Write8 0004  
               DEMO_UDP_Recv@dest_ip 00C2                   UDP_Receive@udpcksm 00C6  
                  ETH_Dump@newRXTail 000D                  SYSLOG_Write@message 0027  
                            __Hparam 0000                              __Lparam 0000  
              _DEMO_UDP_ClaimIPCheck 64B2               ?_ETH_RxComputeChecksum 000D  
                  __end_of_lcd_clear 6368                     ?_DHCP_WriteZeros 0004  
      __size_of_DEMO_UDP_MeasureTemp 0018                    __end_of_lcd_goto1 65D8  
                  __end_of_lcd_goto2 65CA                            ?_spi_init 0001  
                  __end_of_lcd_putch 6464             __end_of_DEMO_UDP_IdlePkt 622A  
                        time@gie_val 0006                 DEMO_UDP_Recv@started 00C1  
                            ___lwdiv 5D74                              ___lwmod 5FD2  
               DEMO_UDP_Recv@str_len 00BE                           _currentTCB 01A0  
                       __psmallconst 1000                   __end_of_IPv4_Start 47EA  
                            __doprnt 3AF2           __end_of_ETH_readLinkStatus 0000  
                    __size_of_initHW 003E                   __end_of_TCP_Update 4262  
                            __pcinit 6084                      __size_of_memcmp 004C  
                    __size_of_memset 002A                              __ramtop 1000  
                            __ptext0 4C16                              __ptext1 5F94  
                            __ptext2 6514                              __ptext3 65F4  
                            __ptext4 604C                              __ptext5 5430  
                            __ptext6 6624                              __ptext7 63AC  
                            __ptext8 652A                              __ptext9 62D8  
                            _ethData 0183                              _ipv4DNS 0210  
                    __size_of_printf 0024    TCP_FiniteStateMachine@notAckBytes 00D0  
                      ??_DHCP_Manage 0059                    _ENCx24_BankselSPI 5A4E  
                       _ICMP_Receive 5D28                    __end_of_hexpowers 1013  
             __size_of_DEMO_UDP_Recv 0374               __size_of_DEMO_UDP_Send 00D8  
                            _dpowers 1001                              _tcbList 01AC  
                       _ENCx24_Write 5E52               DEMO_UDP_IdlePkt@length 0059  
                 ?_ENCx24_BankselSPI 0001                   __end_of_UDP_Write8 0000  
                            _low_isr 0018                 __size_of_UDP_Receive 00EA  
              _ETH_TxComputeChecksum 52E2              __size_of_ICMP_EchoReply 010A  
                            _sprintf 61DC                    ?_SPI_ExchangeByte 0001  
                         ??_lcd_busy 0002                           ??_lcd_init 0003  
                            main@str 02CD                           ??_high_isr 0002  
                     __pintcode_body 664A                           ??_lcd_puts 0006  
               end_of_initialization 60B0                  ??_ENCx24_BankselSPI 0003  
                        TCP_Snd@data 0097                          TCP_Snd@cksm 0099  
                          _ETH_Read8 6122                            _ETH_Flush 60BA  
                            memcmp@n 0003                   ??_SPI_ExchangeByte 0002  
                          _IPV4_Init 660C                            _IPV4_Send 5930  
                 IPv4_Start@protocol 004F                 __size_of_UDP_Write32 0000  
               __size_of_UDP_Write16 0000                              memset@c 0004  
                            memset@n 0006                              memset@p 0008  
                            int_func 664A                         _broadcastMAC 1037  
                   UDP_Start@dstPort 006D                 _ETH_NextPacketUpdate 5850  
              __end_of_lcd_init_pins 662E                  ETH_ReadBlock@length 0005  
               DEMO_UDP_Send@started 006F              __end_of_ENCx24_PHYWrite 61A6  
                  __end_of_uart_init 652A                           _waitForDMA 0000  
                     ETH_Write8@data 0003                        ?_rtcc_handler 0001  
                  __end_of_rtcc_init 6084                     DHCP_Request@type 0070  
                _DEMO_UDP_SetClaimIP 6642                     UDP_Start@srcPort 006B  
              __size_of_ETH_MACRead8 003C                              printf@f 0020  
                     _ETH_WriteBlock 5B4C                  _Network_WaitForLink 65AE  
                          _TCB_Reset 47F4                              postdec2 000FDD  
                         ??_spi_init 0002                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                    _ETH_CheckLinkUp 60EE                       _ETH_WriteStart 5AF8  
                 TCP_PayloadSave@len 005A                ARPV4_Packet@mergeFlag 0031  
           DEMO_UDP_Recv@temperature 00B7            __end_of_ENCx24_BankselSPI 5AA4  
           ETH_RxComputeChecksum@len 000D                            _PORTBbits 000F81  
                          _PORTJbits 000F88                       DHCP_Handler@ip 0077  
                          _UDP_Read8 0000                     ?_UDP_GetDestPort 0002  
                          _UDP_Start 5BF4                 __end_of_Network_Init 638A  
               __end_of_Network_Read 52E2              __size_of_ENCx24_PhyRead 0040  
               ?_DEMO_UDP_SetClaimIP 0001                            _TRISAbits 000F92  
                          _TRISBbits 000F93                            _TRISCbits 000F94  
                          _TRISDbits 000F95                        _rcvPayloadLen 01AA  
               _DEMO_UDP_IPLockTimer 6540                 ?_Network_WaitForLink 0001  
                  IPV4_Packet@hdrLen 00F9                  __end_of_DHCP_Manage 5728  
                      ??_ENCx24_Read 0007                    IPV4_Packet@length 00FA  
           DEMO_UDP_ClaimIPCheck@ret 0003                    ICMP_EchoReply@ret 0073  
                         ?_ETH_Read8 0001                           ?_ETH_Flush 0001  
                         ?_IPV4_Init 0001                         _ETH_MACRead8 6010  
                         ?_IPV4_Send 001D                ?_ETH_NextPacketUpdate 0001  
                      _DEMO_UDP_Recv 30B8                        _DEMO_UDP_Send 5086  
                         main@old_ip 02BC                       ??_rtcc_handler 0002  
                   DEMO_UDP_Recv@str 0077                           lcd_putch@c 0003  
             ?_DEMO_UDP_ClaimIPCheck 0001               __end_of_ETH_WriteBlock 5BA0  
                  __size_of_LED_Init 0020                        _dhcpLeaseTime 018E  
                   ENCx24_PHYWrite@a 000D                 __size_of_SYSLOG_Init 002E  
                  __size_of_ETH_Copy 0090                    __size_of_ETH_Dump 004A  
                  __size_of_ETH_Init 0100               __end_of_ETH_WriteStart 5B44  
                  __size_of_ETH_Send 0022                           ?_TCB_Reset 0002  
              __size_of_IPV4_GetMyIP 0012                __size_of_ETH_SaveRDPT 0010  
              __size_of_ETH_SetRXptr 0018             __end_of_ETH_EventHandler 5430  
           ARPV4_Request@destAddress 000F                       TCP_Recv@length 00D8  
                  _UDP_CallBackTable 1028                       TCP_Recv@tcbPtr 00F7  
                     _ADC_Initialize 652A                    __size_of_TCP_Init 000E  
                  __size_of_TCP_Recv 02F4                       __end_of_initHW 5FD2  
                     __end_of_memcmp 5CDC                       __end_of_memset 625E  
                  __size_of_UDP_Send 0070                           ?_UDP_Read8 0001  
                     __end_of_printf 6322            ETH_RxComputeChecksum@cksm 0015  
                         ?_UDP_Start 0067                  ICMP_Receive@icmpHdr 007A  
          ETH_RxComputeChecksum@seed 000F                ??_DEMO_UDP_SetClaimIP 0002  
                ICMP_Receive@ipv4Hdr 005A                  start_initialization 6084  
                  _idle_pkt_received 01B1                ?_DEMO_UDP_IPLockTimer 0001  
              ??_Network_WaitForLink 0014               ?_ETH_TxComputeChecksum 000D  
                      ETH_Read32@ret 0007                        ETH_Read16@ret 0005  
        __end_of_TCP_ParseTCPOptions 4F74        DEMO_UDP_MeasureTemp@adcResult 0008  
        ETH_TxComputeChecksum@length 000F                       ?_DEMO_UDP_Recv 0059  
                     ?_DEMO_UDP_Send 0001          __size_of_ETH_ResetByteCount 0010  
                  ?_ETH_GetByteCount 000B                         _IPV4_GetMyIP 657C  
                       _ETH_SaveRDPT 658E             ??_TCP_FiniteStateMachine 00C3  
            __end_of_ETH_CheckLinkUp 6122                  __end_of_ENCx24_Read 5E52  
                       _ETH_SetRXptr 64E4                          ?_waitForDMA 0001  
                   ?_ENCx24_PHYWrite 000B                   ??_ETH_GetByteCount 000D  
                      ??_IPV4_Packet 0100                      ?_ETH_WriteBlock 0003  
              DHCP_Handler@ethPktMAC 0086                      ?_ETH_WriteStart 000B  
                      ??_ETH_Write32 0007                        ??_ETH_Write16 0005  
          __end_of_UDP_CallBackTable 1037                          __doprnt@idx 0013  
             __end_of_ADC_Initialize 6540                          __doprnt@val 0018  
                ARPV4_Request@header 002F                          __pdataBANK0 00FF  
                           ??_initHW 0004                             ??_memcmp 0005  
         __size_of_ENCx24_BankselSPI 0056                    ETH_ReadBlock@data 0003  
                           ??_memset 0008          __end_of_ETH_SendSystemReset 592A  
                           ??_printf 0020                ENCx24_BankselSPI@bank 0004  
                        _DHCP_Manage 569C                 IPv4_Start@macAddress 0064  
                      ETH_Insert@len 000B                      IPV4_Packet@cksm 00FC  
            __size_of_UDP_WriteBlock 0000                          __pbssCOMRAM 005D  
                      __pcstackBANK0 0060                        __pcstackBANK1 0100  
                      __pcstackBANK2 02BC                TCP_Recv@remoteAddress 00D4  
                      _claim_dest_ip 018A                       _ICMP_EchoReply 4AC0  
                           ?_TCP_Snd 0058               __size_of_ARPV4_Request 00C2  
                        ??_ETH_Read8 0003                          ??_ETH_Flush 0009  
             ??_ETH_NextPacketUpdate 0005                          ??_IPV4_Init 0002  
                      ?_SYSLOG_Write 0027                          ??_IPV4_Send 001F  
                  __size_of_lcd_busy 000A                    __size_of_lcd_init 0092  
                  ENCx24_BFC@bitMask 0005                    __size_of_high_isr 664A  
                          __doprnt@c 001A                            __doprnt@f 000E  
                  __size_of_lcd_puts 0012              ??_ETH_RxComputeChecksum 0011  
           __size_of_TCP_PayloadSave 01B2                            __pnvBANK2 02F1  
    ICMP_EchoReply@ipv4PayloadLength 0071                     ___lwdiv@dividend 0002  
                          __pintcode 0008                          ??_TCB_Reset 0004  
                   ETH_MACRead8@bank 0006                            __ptext100 52E2  
                          __ptext101 0000                            __ptext110 5A4E  
                          __ptext102 5F14                            __ptext111 65E6  
                          __ptext103 5F54                            __ptext112 64B2  
                          __ptext104 638A                            __ptext113 61AE  
                          __ptext105 6618                            __ptext114 6540  
                          __ptext106 5BA0                            __ptext115 6642  
                          __ptext107 5E52                            __ptext108 642A  
                          __ptext109 5E08                            __ptext118 62B0  
                          __ptext119 0000                   ARPV4_Packet@x_2060 0036  
                           ?___lwdiv 0002                             ?___lwmod 0009  
                      IPV4_Send@cksm 0024                      ?_ADC_Initialize 0001  
                  ?_DEMO_UDP_IdlePkt 0059                   ETH_WriteBlock@data 0003  
                           ?__doprnt 000E                __size_of_Network_Init 0022  
              __size_of_Network_Read 00AC                   ARPV4_Packet@header 0039  
                          _lcd_clear 6346                          __pintcodelo 0018  
                __end_of_IPV4_Packet 39CC                   ARPV4_Packet@arpPtr 0033  
                  __size_of_spi_init 000C                            _lcd_goto1 65CA  
                          _lcd_goto2 65BC                   ARPV4_Packet@length 002F  
                 ??_DEMO_UDP_IdlePkt 005B         IPV4_PseudoHeaderChecksum@len 0009  
                          _lcd_putch 6448         IPV4_PseudoHeaderChecksum@tmp 000E  
           ARPV4_Update@entryPointer 0002                          ??_UDP_Read8 0004  
                __end_of_ETH_Write16 633C                  __end_of_ETH_Write32 62B0  
                        __smallconst 1000                             _BAUDCON1 000F7E  
                        _clientState 00FF                          ??_UDP_Start 0058  
         ETH_EventHandler@mabbipgVal 000B               ??_DEMO_UDP_IPLockTimer 0003  
                     _ENCx24_PhyRead 5ED4                __end_of_ETH_ReadBlock 57C6  
               __end_of_rtcc_handler 62D8               __end_of_ICMP_EchoReply 4BCA  
       __end_of_DEMO_UDP_MeasureTemp 64E4                             ?_low_isr 0001  
                __size_of_waitForDMA 0000                            _last_bank 01B2  
                          _hexpowers 100B                     ___lwdiv@quotient 0007  
                          _localTime 02F5                  DHCP_Request@started 006F  
                 _ETH_readLinkStatus 0000                _pot_initial_adcResult 01A8  
                           ?_sprintf 001C               __size_of_UDP_GetDestIP 0012  
                     __size_of_putch 001A                          _ENCx24_Read 5E08  
                    ??_DEMO_UDP_Recv 005B                      ??_DEMO_UDP_Send 0059  
                     ??_SYSLOG_Write 0029                            _tcpHeader 01B4  
              __end_of_ETH_Set_TXRTS 6624        ETH_RxComputeChecksum@econ1Val 0019  
              __end_of_ETH_SetPktDec 660C              __size_of_Network_Manage 008C  
                  ENCx24_BFS@bitMask 0005                            _udpHeader 02AA  
                           _LATBbits 000F8A                             _LED_Init 63AC  
                           _LATDbits 000F8C                  ?_ETH_readLinkStatus 000B  
                        _idle_packet 01CA                             _ETH_Copy 556A  
                         TCP_Snd@ret 009D                             _ETH_Dump 5DBE  
                           _ETH_Init 4D4E                             _ETH_Send 638A  
                   ?_ETH_CheckLinkUp 0001      __size_of_TCP_FiniteStateMachine 115C  
                        _ipv4Address 0192                         _Network_Init 6368  
                       _Network_Read 5236                    _nextAvailablePort 01A4  
                   __CFG_WDTPS$32768 000000            __size_of_SPI_ExchangeByte 000E  
                          _uart_init 6514                             _SSP1CON1 000FC6  
                      ARPV4_Packet@x 0035                        SYSLOG_Write@t 0029  
                           _TCP_Init 65D8                            _rtcc_init 604C  
                           _TCP_Recv 2C98               __size_of_UDP_ReadBlock 0014  
 __size_of_IPV4_PseudoHeaderChecksum 0098                        _ARPV4_Request 495E  
                           _UDP_Send 57C6                           ?_lcd_clear 0001  
         ?_IPV4_PseudoHeaderChecksum 0002                           ?_lcd_goto1 0001  
                         ?_lcd_goto2 0001                           ?_lcd_putch 0001  
                         _ADCON0bits 000FC2               __end_of_ENCx24_PhyRead 5F14  
               ??_ETH_readLinkStatus 000F             __size_of_DHCP_WriteZeros 0018  
                      ARPV4_Lookup@x 000C          TCP_FiniteStateMachine@event 00D2  
                      ??_UDP_Receive 00C8                      ?_ICMP_EchoReply 0058  
                          main@now_p 02C5                            lcd_puts@s 0004  
                      ARPV4_Update@x 0004                   __end_of_macAddress 1043  
                      ??_UDP_Write32 000B                        ??_UDP_Write16 0007  
         IPV4_PseudoHeaderChecksum@v 0008                        TCP_Recv@count 00F6  
                   TCP_Update@tcbPtr 00DE                        ?_DHCP_Handler 0059  
                   __size_of_TCP_Snd 04C4                DEMO_UDP_Recv@destPort 00BF  
            ??_DEMO_UDP_ClaimIPCheck 0002                ETH_WriteStart@destMAC 000B  
                      TCP_Snd@tcbPtr 0058                        ?_DHCP_Request 0001  
              DEMO_UDP_Recv@local_ip 00B9              __size_of_lcd_write_data 0020  
                      IPv4_Start@ret 0066              __size_of_lcd_write_ctrl 0020  
                           __Hrparam 0000                          _IPV4_Packet 37E8  
                           __Lrparam 0000                    _ADC_GetConversion 61AE  
                         ?_uart_init 0001                          _ETH_Write32 6288  
                        _ETH_Write16 6322                     ETH_ReadBlock@len 000A  
                     ?_ARPV4_Request 000F                    ??_TCP_PayloadSave 00B4  
                      _UDP_GetDestIP 656A                           ?_rtcc_init 0001  
                 ?_ADC_GetConversion 0002                     __size_of___lwdiv 004A  
                   ENCx24_Write@bank 0007                     __size_of___lwmod 003E  
                   ENCx24_Write@data 0005                    ?_ETH_EventHandler 0001  
                   __size_of__doprnt 0252    __end_of_IPV4_PseudoHeaderChecksum 569C  
             TCP_ParseTCPOptions@ret 0011               TCP_ParseTCPOptions@opt 0012  
                    ?_ENCx24_PhyRead 000B                          _tcbListSize 005D  
           ARPV4_Packet@entryPointer 0037              ??_ETH_TxComputeChecksum 0013  
                 DHCP_Handler@ethMAC 008C                   ??_ETH_EventHandler 000B  
                     _UDP_WriteBlock 0000               _TCP_FiniteStateMachine 10B4  
                ??_ADC_GetConversion 0004                   DHCP_Handler@length 0059  
                           _dhcpName 1013               __size_of_lcd_init_pins 000A  
                     ENCx24_BFC@bank 0007                   DHCP_Handler@option 0085  
                    ___lwdiv@divisor 0004                      ___lwdiv@counter 0006  
                    ENCx24_Read@bank 0007                     __size_of_low_isr 0010  
                           __ptext10 6152                             __ptext11 62FE  
                           __ptext20 5D74                             __ptext12 65AE  
                           _destPort 01A2                             __ptext21 37E8  
                           __ptext13 54CE                             __ptext30 6448  
                           __ptext22 4F7E                             __ptext14 4046  
                           __ptext31 63CC                             __ptext23 30B8  
                           __ptext15 5236                             __ptext40 6638  
                           __ptext32 65BC                             __ptext24 6208  
                           __ptext16 61DC                             _arpTimer 02B8  
                           __ptext41 656A                             __ptext33 65CA  
                           __ptext25 3DE2                             __ptext17 3AF2  
                           __ptext50 4294                             __ptext42 64CC  
                           __ptext34 662E                             __ptext26 5C90  
                           __ptext18 6464                             __ptext51 2544  
                           __ptext43 6556                             __ptext35 6346  
                           __ptext27 599C                             __ptext19 5FD2  
                           __ptext60 64E4                             __ptext52 47F4  
                           __ptext44 2C98                             __ptext36 63EC  
                           __ptext28 6234                             __ptext61 60BA  
                           __ptext53 5604                             __ptext45 4E70  
                           __ptext37 0000                             __ptext29 640C  
                           __ptext70 625E                             __ptext62 6600  
                           __ptext54 5D28                             __ptext46 6122  
                           __ptext38 0000                             __ptext71 6368  
                           __ptext63 34A8                             __ptext55 4AC0  
                           __ptext47 5CDC                             __ptext39 0000  
                           __ptext80 6180                             __ptext72 5AA4  
                           __ptext64 5734                             __ptext56 658E  
                           __ptext48 5DBE                             __ptext81 647E  
                           __ptext73 65D8                             __ptext65 538A  
                           __ptext57 556A                             __ptext49 10B4  
                           __ptext90 495E                             __ptext82 657C  
                           __ptext74 660C                             __ptext66 5E94  
                           __ptext58 5178                             __ptext91 5AF8  
                           __ptext83 5086                             __ptext75 4D4E  
                           __ptext67 569C                             __ptext59 5850  
                           __ptext92 5B4C                             __ptext84 0000  
                           __ptext76 58C0                             __ptext68 44BC  
                           __ptext93 6322                             __ptext85 0000  
                           __ptext77 60EE                             __ptext69 64FC  
                           __ptext94 59F8                             __ptext86 5BF4  
                           __ptext78 0000                             __ptext95 6010  
                           __ptext87 466E                             __ptext79 5ED4  
                           __ptext96 5C42                             __ptext88 6498  
                           __ptext97 659E                             __ptext89 6288  
                           __ptext98 57C6                             __ptext99 5930  
                     ??_DHCP_Handler 005B                         _SSP1CON1bits 000FC6  
                     ENCx24_BFS@bank 0007                    ETH_WriteBlock@len 0005  
                           _lcd_busy 662E                             _lcd_init 5430  
                 DHCP_Request@ethMAC 0071                             _high_isr 0008  
                         _ARPV4_Init 647E                        _UDP_ReadBlock 6556  
                       time@the_time 0007                             _lcd_puts 640C  
           __size_of_UDP_GetDestPort 000A                     __size_of_sprintf 002C  
                __end_of_UDP_Receive 5068                     ??_ETH_WriteBlock 0007  
                  _remoteIpv4Address 022A                   ETH_WriteStart@type 000D  
          ARPV4_Lookup@entry_pointer 000A                           _ENCx24_BFC 5F54  
                         _ENCx24_BFS 5F14                     ??_ETH_WriteStart 000F  
                      __size_of_main 012C                        ??_SYSLOG_Init 0027  
                     ??_DHCP_Request 0059                        __size_of_time 0054  
                    ENCx24_PhyRead@a 000D                  __end_of_UDP_Write32 0000  
                __end_of_UDP_Write16 0000            __end_of_ADC_GetConversion 61DC  
                       ??_waitForDMA 000B                Network_Read@debug_str 0120  
                  UDP_Send@udpLength 002F                 _DEMO_UDP_MeasureTemp 64CC  
       ETH_Insert@current_tx_pointer 000F                             _pot_init 01B3  
                     ?_UDP_GetDestIP 0002                             _spi_init 65F4  
                           int$flags 005E          DEMO_UDP_SetClaimIP@claim_ip 0002  
               _rxPacketStatusVector 0218                          ??_lcd_clear 0003  
                       _SSP1STATbits 000FC7          __end_of_DEMO_UDP_SetClaimIP 664A  
                        ??_lcd_goto1 0003                          ??_lcd_goto2 0003  
              __size_of_rtcc_handler 0028                 __end_of_SYSLOG_Write 62FE  
             __end_of_UDP_WriteBlock 0000            __size_of_ETH_GetByteCount 001E  
        __end_of_Network_WaitForLink 65BC                          ??_lcd_putch 0003  
           ETH_EventHandler@estatVal 000F                         ?_DHCP_Manage 0001  
                         _ETH_GetMAC 59F8                            putch@data 0002  
                Network_Manage@nowPv 021E                           _ETH_Read32 599C  
                         _ETH_Read16 5CDC            ETH_TxComputeChecksum@cksm 0017  
          ETH_TxComputeChecksum@seed 0011                             memcmp@s1 0007  
                           memcmp@s2 0002                           _ETH_Insert 5BA0  
            ETH_Copy@txBufferAddress 000F                        ?_ARPV4_Packet 0001  
                    ETH_Write32@data 0003                      ETH_Write16@data 0003  
                      ?_ARPV4_Lookup 0002                   __end_of_waitForDMA 0000  
                           memset@p1 0002                           _ETH_Write8 6498  
                  ??_DHCP_WriteZeros 0006                        ?_ARPV4_Update 0001  
              _receivedRemoteAddress 019A                       ?_UDP_ReadBlock 000C  
         __end_of_ETH_ResetByteCount 65AE                             intlevel1 0000  
                           intlevel2 0000                            sprintf@ap 0027  
                          sprintf@pb 0028                            sprintf@wh 001C  
                     _Network_Manage 54CE                     ___lwmod@dividend 0009  
                    UDP_Receive@hptr 00D0         __size_of_TCP_ParseTCPOptions 0104  
     __size_of_ETH_RxComputeChecksum 00AA                     ??_ADC_Initialize 0002  
                      _lcd_init_pins 6624        __end_of_ETH_RxComputeChecksum 5222  
                       _rtcc_handler 62B0                ?_DEMO_UDP_MeasureTemp 0006  
                    ??_ARPV4_Request 0013                          ARPV4_Init@x 0002  
                   _SPI_ExchangeByte 65E6                          ??_uart_init 0002  
                __end_of_SYSLOG_Init 6180                             printf@ap 0021  
                           printf@pb 0022                          ??_rtcc_init 0002  
           __size_of_ENCx24_PHYWrite 0026                 IPV4_Send@totalLength 0026  
                    ?_UDP_WriteBlock 0009                        ?_ICMP_Receive 005A  
                           sprintf@f 001E                 ETH_CheckLinkUp@value 000F  
                   DHCP_Handler@myip 0093                        ?_ENCx24_Write 0005  
                    ETH_WriteBlock@p 0007        IPV4_PseudoHeaderChecksum@cksm 000A  
                    ___lwmod@divisor 000B                      ARPV4_Packet@ret 0032  
                     ??_ARPV4_Packet 000F                      ___lwmod@counter 000D  
                        _UDP_Receive 4F7E                       ??_ARPV4_Lookup 0006  
       __size_of_ETH_SendSystemReset 006A           TCP_PayloadSave@buffer_size 00C1  
                     ??_ARPV4_Update 0002                           _IPv4_Start 466E  
                  Network_Manage@now 017E                           _TCP_Update 4046  
          __size_of_DEMO_UDP_IdlePkt 0022               __end_of_Network_Manage 555A  
                        ?_ARPV4_Init 0001                      DHCP_Handler@v16 0083  
                        _UDP_Write32 0000                          _UDP_Write16 0000  
                      ENCx24_Write@a 0008                         ?_ENCx24_Read 0005  
                        ENCx24_BFC@a 0008                         ENCx24_Read@a 000A  
                       ENCx24_Read@v 0008                          ENCx24_BFS@a 0008  
                 Network_Read@header 0170                          ?_ENCx24_BFC 0005  
                        ?_ENCx24_BFS 0005                           _UDP_Write8 0000  
      __size_of_ETH_NextPacketUpdate 0070                         UDP_Receive@x 00CE  
                     _lcd_write_data 63CC                       ?_lcd_init_pins 0001  
         __size_of_ADC_GetConversion 002E                       _lcd_write_ctrl 63EC  
                  ??_UDP_GetDestPort 0004                         UDP_Send@cksm 002D  
                   ETH_Insert@offset 000D                      ??_UDP_GetDestIP 0006  
