

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Wed Sep 09 15:12:50 2015

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   116                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   120                           	psect	text103,global,reloc=2,class=CODE,delta=1
   121                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   122                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   123                           	psect	pa_nodes,global,class=CODE,delta=1
   124  0000                     
   125 ;; Function _DHCP_Handler is unused but had its address taken
   126  0000                     
   127 ;; Function _DEMO_UDP_IdlePkt is unused but had its address taken
   128  0000                     
   129 ;; Function _DEMO_UDP_Recv is unused but had its address taken
   130  0000                     tosu	equ	0xFFF
   131                           tosh	equ	0xFFE
   132                           tosl	equ	0xFFD
   133                           pclath	equ	0xFFA
   134                           tblptru	equ	0xFF8
   135                           tblptrh	equ	0xFF7
   136                           tblptrl	equ	0xFF6
   137                           tablat	equ	0xFF5
   138                           prodh	equ	0xFF4
   139                           prodl	equ	0xFF3
   140                           intcon	equ	0xFF2
   141                           indf0	equ	0xFEF
   142                           postinc0	equ	0xFEE
   143                           fsr0h	equ	0xFEA
   144                           fsr0l	equ	0xFE9
   145                           wreg	equ	0xFE8
   146                           postinc1	equ	0xFE6
   147                           plusw1	equ	0xFE3
   148                           fsr1h	equ	0xFE2
   149                           fsr1l	equ	0xFE1
   150                           bsr	equ	0xFE0
   151                           indf2	equ	0xFDF
   152                           postinc2	equ	0xFDE
   153                           postdec2	equ	0xFDD
   154                           plusw2	equ	0xFDB
   155                           fsr2h	equ	0xFDA
   156                           fsr2l	equ	0xFD9
   157                           status	equ	0xFD8
   158                           
   159                           	psect	idataCOMRAM
   160  005EDE                     __pidataCOMRAM:
   161                           	opt stack 0
   162                           
   163                           ;initializer for _clientState
   164  005EDE  01                 	db	1
   165                           tosu	equ	0xFFF
   166                           tosh	equ	0xFFE
   167                           tosl	equ	0xFFD
   168                           pclath	equ	0xFFA
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           prodh	equ	0xFF4
   174                           prodl	equ	0xFF3
   175                           intcon	equ	0xFF2
   176                           indf0	equ	0xFEF
   177                           postinc0	equ	0xFEE
   178                           fsr0h	equ	0xFEA
   179                           fsr0l	equ	0xFE9
   180                           wreg	equ	0xFE8
   181                           postinc1	equ	0xFE6
   182                           plusw1	equ	0xFE3
   183                           fsr1h	equ	0xFE2
   184                           fsr1l	equ	0xFE1
   185                           bsr	equ	0xFE0
   186                           indf2	equ	0xFDF
   187                           postinc2	equ	0xFDE
   188                           postdec2	equ	0xFDD
   189                           plusw2	equ	0xFDB
   190                           fsr2h	equ	0xFDA
   191                           fsr2l	equ	0xFD9
   192                           status	equ	0xFD8
   193                           
   194                           	psect	smallconst
   195  001000                     __psmallconst:
   196                           	opt stack 0
   197  001000  00                 	db	0
   198  001001                     _dpowers:
   199                           	opt stack 0
   200  001001  0001               	dw	1
   201  001003  000A               	dw	10
   202  001005  0064               	dw	100
   203  001007  03E8               	dw	1000
   204  001009  2710               	dw	10000
   205  00100B                     __end_of_dpowers:
   206                           	opt stack 0
   207  00100B                     _hexpowers:
   208                           	opt stack 0
   209  00100B  0001               	dw	1
   210  00100D  0010               	dw	16
   211  00100F  0100               	dw	256
   212  001011  1000               	dw	4096
   213  001013                     __end_of_hexpowers:
   214                           	opt stack 0
   215  001013                     _dhcpName:
   216                           	opt stack 0
   217  001013  50                 	db	80
   218  001014  49                 	db	73
   219  001015  43                 	db	67
   220  001016  31                 	db	49
   221  001017  38                 	db	56
   222  001018  46                 	db	70
   223  001019  39                 	db	57
   224  00101A  37                 	db	55
   225  00101B  4A                 	db	74
   226  00101C  36                 	db	54
   227  00101D  30                 	db	48
   228  00101E  20                 	db	32
   229  00101F  45                 	db	69
   230  001020  54                 	db	84
   231  001021  48                 	db	72
   232  001022  45                 	db	69
   233  001023  52                 	db	82
   234  001024  4E                 	db	78
   235  001025  45                 	db	69
   236  001026  54                 	db	84
   237  001027  00                 	db	0
   238  001028                     __end_of_dhcpName:
   239                           	opt stack 0
   240  001028                     _UDP_CallBackTable:
   241                           	opt stack 0
   242  001028  FFFC               	dw	65532
   243  00102A  00                 	db	0
   244  00102B  00                 	db	0
   245  00102C  00                 	db	0
   246  00102D  FFFB               	dw	65531
   247  00102F  00                 	db	0
   248  001030  00                 	db	0
   249  001031  00                 	db	0
   250  001032  0044               	dw	68
   251  001034  00                 	db	0
   252  001035  00                 	db	0
   253  001036  00                 	db	0
   254  001037                     __end_of_UDP_CallBackTable:
   255                           	opt stack 0
   256  001037                     _broadcastMAC:
   257                           	opt stack 0
   258  001037  FF                 	db	255
   259  001038  FF                 	db	255
   260  001039  FF                 	db	255
   261  00103A  FF                 	db	255
   262  00103B  FF                 	db	255
   263  00103C  FF                 	db	255
   264  00103D                     __end_of_broadcastMAC:
   265                           	opt stack 0
   266  00103D                     _macAddress:
   267                           	opt stack 0
   268  00103D  00                 	db	0
   269  00103E  DE                 	db	222
   270  00103F  AD                 	db	173
   271  001040  00                 	db	0
   272  001041  BE                 	db	190
   273  001042  EF                 	db	239
   274  001043                     __end_of_macAddress:
   275                           	opt stack 0
   276  001043                     STR_2:
   277  001043  0D                 	db	13
   278  001044  0A                 	db	10
   279  001045  0D                 	db	13
   280  001046  0A                 	db	10
   281  001047  53                 	db	83	;'S'
   282  001048  74                 	db	116	;'t'
   283  001049  61                 	db	97	;'a'
   284  00104A  72                 	db	114	;'r'
   285  00104B  74                 	db	116	;'t'
   286  00104C  69                 	db	105	;'i'
   287  00104D  6E                 	db	110	;'n'
   288  00104E  67                 	db	103	;'g'
   289  00104F  20                 	db	32
   290  001050  53                 	db	83	;'S'
   291  001051  79                 	db	121	;'y'
   292  001052  73                 	db	115	;'s'
   293  001053  6C                 	db	108	;'l'
   294  001054  6F                 	db	111	;'o'
   295  001055  67                 	db	103	;'g'
   296  001056  20                 	db	32
   297  001057  61                 	db	97	;'a'
   298  001058  74                 	db	116	;'t'
   299  001059  20                 	db	32
   300  00105A  25                 	db	37
   301  00105B  75                 	db	117	;'u'
   302  00105C  0D                 	db	13
   303  00105D  0A                 	db	10
   304  00105E  00                 	db	0
   305  00105F                     STR_8:
   306  00105F  30                 	db	48	;'0'
   307  001060  31                 	db	49	;'1'
   308  001061  32                 	db	50	;'2'
   309  001062  33                 	db	51	;'3'
   310  001063  34                 	db	52	;'4'
   311  001064  35                 	db	53	;'5'
   312  001065  36                 	db	54	;'6'
   313  001066  37                 	db	55	;'7'
   314  001067  38                 	db	56	;'8'
   315  001068  39                 	db	57	;'9'
   316  001069  61                 	db	97	;'a'
   317  00106A  62                 	db	98	;'b'
   318  00106B  63                 	db	99	;'c'
   319  00106C  64                 	db	100	;'d'
   320  00106D  65                 	db	101	;'e'
   321  00106E  66                 	db	102	;'f'
   322  00106F  00                 	db	0
   323  001070                     STR_4:
   324  001070  57                 	db	87	;'W'
   325  001071  61                 	db	97	;'a'
   326  001072  69                 	db	105	;'i'
   327  001073  74                 	db	116	;'t'
   328  001074  69                 	db	105	;'i'
   329  001075  6E                 	db	110	;'n'
   330  001076  67                 	db	103	;'g'
   331  001077  20                 	db	32
   332  001078  66                 	db	102	;'f'
   333  001079  6F                 	db	111	;'o'
   334  00107A  72                 	db	114	;'r'
   335  00107B  20                 	db	32
   336  00107C  4C                 	db	76	;'L'
   337  00107D  69                 	db	105	;'i'
   338  00107E  6E                 	db	110	;'n'
   339  00107F  6B                 	db	107	;'k'
   340  001080  00                 	db	0
   341  001081                     STR_5:
   342  001081  4C                 	db	76	;'L'
   343  001082  69                 	db	105	;'i'
   344  001083  6E                 	db	110	;'n'
   345  001084  6B                 	db	107	;'k'
   346  001085  20                 	db	32
   347  001086  73                 	db	115	;'s'
   348  001087  74                 	db	116	;'t'
   349  001088  61                 	db	97	;'a'
   350  001089  72                 	db	114	;'r'
   351  00108A  74                 	db	116	;'t'
   352  00108B  65                 	db	101	;'e'
   353  00108C  64                 	db	100	;'d'
   354  00108D  00                 	db	0
   355  00108E                     STR_6:
   356  00108E  25                 	db	37
   357  00108F  64                 	db	100	;'d'
   358  001090  2E                 	db	46
   359  001091  25                 	db	37
   360  001092  64                 	db	100	;'d'
   361  001093  2E                 	db	46
   362  001094  25                 	db	37
   363  001095  64                 	db	100	;'d'
   364  001096  2E                 	db	46
   365  001097  25                 	db	37
   366  001098  64                 	db	100	;'d'
   367  001099  00                 	db	0
   368  00109A                     STR_3:
   369  00109A  25                 	db	37
   370  00109B  75                 	db	117	;'u'
   371  00109C  20                 	db	32
   372  00109D  3A                 	db	58	;':'
   373  00109E  20                 	db	32
   374  00109F  25                 	db	37
   375  0010A0  73                 	db	115	;'s'
   376  0010A1  0D                 	db	13
   377  0010A2  0A                 	db	10
   378  0010A3  00                 	db	0
   379  0010A4                     STR_1:
   380  0010A4  25                 	db	37
   381  0010A5  78                 	db	120	;'x'
   382  0010A6  20                 	db	32
   383  0010A7  3A                 	db	58	;':'
   384  0010A8  20                 	db	32
   385  0010A9  25                 	db	37
   386  0010AA  64                 	db	100	;'d'
   387  0010AB  00                 	db	0
   388  0010AC                     STR_7:
   389  0010AC  28                 	db	40
   390  0010AD  6E                 	db	110	;'n'
   391  0010AE  75                 	db	117	;'u'
   392  0010AF  6C                 	db	108	;'l'
   393  0010B0  6C                 	db	108	;'l'
   394  0010B1  29                 	db	41
   395  0010B2  00                 	db	0
   396                           
   397                           ; #config settings
   398  0010B3  00                 	db	0	; dummy byte at the end
   399  0000                     tosu	equ	0xFFF
   400                           tosh	equ	0xFFE
   401                           tosl	equ	0xFFD
   402                           pclath	equ	0xFFA
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           prodh	equ	0xFF4
   408                           prodl	equ	0xFF3
   409                           intcon	equ	0xFF2
   410                           indf0	equ	0xFEF
   411                           postinc0	equ	0xFEE
   412                           fsr0h	equ	0xFEA
   413                           fsr0l	equ	0xFE9
   414                           wreg	equ	0xFE8
   415                           postinc1	equ	0xFE6
   416                           plusw1	equ	0xFE3
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           bsr	equ	0xFE0
   420                           indf2	equ	0xFDF
   421                           postinc2	equ	0xFDE
   422                           postdec2	equ	0xFDD
   423                           plusw2	equ	0xFDB
   424                           fsr2h	equ	0xFDA
   425                           fsr2l	equ	0xFD9
   426                           status	equ	0xFD8
   427                           
   428                           	psect	nvBANK2
   429  0002B4                     __pnvBANK2:
   430                           	opt stack 0
   431  0002B4                     _deviceTime:
   432                           	opt stack 0
   433  0002B4                     	ds	4
   434  0002B8                     _localTime:
   435                           	opt stack 0
   436  0002B8                     	ds	4
   437  0000                     _ADRES	set	4035
   438  0000                     _TMR1	set	4046
   439  0000                     _ADCON0	set	4034
   440  0000                     _ADCON0bits	set	4034
   441  0000                     _ADCON1	set	4033
   442  0000                     _ADCON2	set	4032
   443  0000                     _ADRESH	set	4036
   444  0000                     _ADRESL	set	4035
   445  0000                     _BAUDCON1	set	3966
   446  0000                     _BAUDCON1bits	set	3966
   447  0000                     _LATDbits	set	3980
   448  0000                     _LATE	set	3981
   449  0000                     _LATH	set	3984
   450  0000                     _LATJ	set	3985
   451  0000                     _OSCCON	set	4051
   452  0000                     _OSCTUNE	set	3995
   453  0000                     _PORTBbits	set	3969
   454  0000                     _PORTJ	set	3976
   455  0000                     _PORTJbits	set	3976
   456  0000                     _SPBRG1	set	4015
   457  0000                     _SSP1BUF	set	4041
   458  0000                     _SSP1CON1	set	4038
   459  0000                     _SSP1CON1bits	set	4038
   460  0000                     _SSP1STATbits	set	4039
   461  0000                     _SSPBUF	set	4041
   462  0000                     _TRISA	set	3986
   463  0000                     _TRISAbits	set	3986
   464  0000                     _TRISB	set	3987
   465  0000                     _TRISCbits	set	3988
   466  0000                     _TRISDbits	set	3989
   467  0000                     _TRISE	set	3990
   468  0000                     _TRISH	set	3993
   469  0000                     _TRISJ	set	3994
   470  0000                     _TXREG1	set	4013
   471  0000                     _TXSTA1	set	4012
   472  0000                     _CREN1	set	32092
   473  0000                     _GIE	set	32663
   474  0000                     _GIEH	set	32663
   475  0000                     _GIEL	set	32662
   476  0000                     _IPEN	set	32391
   477  0000                     _LATD3	set	31843
   478  0000                     _LATH0	set	31872
   479  0000                     _LATH1	set	31873
   480  0000                     _LATH2	set	31874
   481  0000                     _SPEN1	set	32095
   482  0000                     _T1CKPS0	set	32364
   483  0000                     _T1CKPS1	set	32365
   484  0000                     _T1OSCEN	set	32363
   485  0000                     _T1SYNC	set	32362
   486  0000                     _TMR1CS	set	32361
   487  0000                     _TMR1IE	set	31976
   488  0000                     _TMR1IF	set	31984
   489  0000                     _TMR1IP	set	31992
   490  0000                     _TMR1ON	set	32360
   491  0000                     _TX1IF	set	31988
   492                           tosu	equ	0xFFF
   493                           tosh	equ	0xFFE
   494                           tosl	equ	0xFFD
   495                           pclath	equ	0xFFA
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           prodh	equ	0xFF4
   501                           prodl	equ	0xFF3
   502                           intcon	equ	0xFF2
   503                           indf0	equ	0xFEF
   504                           postinc0	equ	0xFEE
   505                           fsr0h	equ	0xFEA
   506                           fsr0l	equ	0xFE9
   507                           wreg	equ	0xFE8
   508                           postinc1	equ	0xFE6
   509                           plusw1	equ	0xFE3
   510                           fsr1h	equ	0xFE2
   511                           fsr1l	equ	0xFE1
   512                           bsr	equ	0xFE0
   513                           indf2	equ	0xFDF
   514                           postinc2	equ	0xFDE
   515                           postdec2	equ	0xFDD
   516                           plusw2	equ	0xFDB
   517                           fsr2h	equ	0xFDA
   518                           fsr2l	equ	0xFD9
   519                           status	equ	0xFD8
   520                           
   521                           	psect	cinit
   522  00596A                     __pcinit:
   523                           	opt stack 0
   524  00596A                     start_initialization:
   525                           	opt stack 0
   526  00596A                     __initialization:
   527                           	opt stack 0
   528                           
   529                           ; Clear objects allocated to BANK2 (180 bytes)
   530  00596A  EE02  F000         	lfsr	0,__pbssBANK2
   531  00596E  0EB4               	movlw	180
   532  005970                     clear_0:
   533  005970  6AEE               	clrf	postinc0,c
   534  005972  06E8               	decf	wreg,f,c
   535  005974  E1FD               	bnz	clear_0
   536                           
   537                           ; Clear objects allocated to BANK1 (75 bytes)
   538  005976  EE01  F0B5         	lfsr	0,__pbssBANK1
   539  00597A  0E4B               	movlw	75
   540  00597C                     clear_1:
   541  00597C  6AEE               	clrf	postinc0,c
   542  00597E  06E8               	decf	wreg,f,c
   543  005980  E1FD               	bnz	clear_1
   544                           
   545                           ; Initialize objects allocated to COMRAM (1 bytes)
   546                           ; load TBLPTR registers with __pidataCOMRAM
   547  005982  0EDE               	movlw	low __pidataCOMRAM
   548  005984  6EF6               	movwf	tblptrl,c
   549  005986  0E5E               	movlw	high __pidataCOMRAM
   550  005988  6EF7               	movwf	tblptrh,c
   551  00598A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   552  00598C  6EF8               	movwf	tblptru,c
   553  00598E  0009               	tblrd		*+	;fetch initializer
   554  005990  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   555  005994                     end_of_initialization:
   556                           	opt stack 0
   557  005994                     __end_of__initialization:
   558                           	opt stack 0
   559  005994  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   560  005996  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   561  005998  0100               	movlb	0
   562  00599A  EF51  F024         	goto	_main	;jump to C main() function
   563                           tosu	equ	0xFFF
   564                           tosh	equ	0xFFE
   565                           tosl	equ	0xFFD
   566                           pclath	equ	0xFFA
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           prodh	equ	0xFF4
   572                           prodl	equ	0xFF3
   573                           intcon	equ	0xFF2
   574                           indf0	equ	0xFEF
   575                           postinc0	equ	0xFEE
   576                           fsr0h	equ	0xFEA
   577                           fsr0l	equ	0xFE9
   578                           wreg	equ	0xFE8
   579                           postinc1	equ	0xFE6
   580                           plusw1	equ	0xFE3
   581                           fsr1h	equ	0xFE2
   582                           fsr1l	equ	0xFE1
   583                           bsr	equ	0xFE0
   584                           indf2	equ	0xFDF
   585                           postinc2	equ	0xFDE
   586                           postdec2	equ	0xFDD
   587                           plusw2	equ	0xFDB
   588                           fsr2h	equ	0xFDA
   589                           fsr2l	equ	0xFD9
   590                           status	equ	0xFD8
   591                           
   592                           	psect	dataCOMRAM
   593  00005D                     __pdataCOMRAM:
   594                           	opt stack 0
   595  00005D                     _clientState:
   596                           	opt stack 0
   597  00005D                     	ds	1
   598                           tosu	equ	0xFFF
   599                           tosh	equ	0xFFE
   600                           tosl	equ	0xFFD
   601                           pclath	equ	0xFFA
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           prodh	equ	0xFF4
   607                           prodl	equ	0xFF3
   608                           intcon	equ	0xFF2
   609                           indf0	equ	0xFEF
   610                           postinc0	equ	0xFEE
   611                           fsr0h	equ	0xFEA
   612                           fsr0l	equ	0xFE9
   613                           wreg	equ	0xFE8
   614                           postinc1	equ	0xFE6
   615                           plusw1	equ	0xFE3
   616                           fsr1h	equ	0xFE2
   617                           fsr1l	equ	0xFE1
   618                           bsr	equ	0xFE0
   619                           indf2	equ	0xFDF
   620                           postinc2	equ	0xFDE
   621                           postdec2	equ	0xFDD
   622                           plusw2	equ	0xFDB
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8
   626                           
   627                           	psect	bssBANK1
   628  0001B5                     __pbssBANK1:
   629                           	opt stack 0
   630  0001B5                     _ethData:
   631                           	opt stack 0
   632  0001B5                     	ds	7
   633  0001BC                     _claim_dest_ip:
   634                           	opt stack 0
   635  0001BC                     	ds	4
   636  0001C0                     _dhcpLeaseTime:
   637                           	opt stack 0
   638  0001C0                     	ds	4
   639  0001C4                     _ipv4Address:
   640                           	opt stack 0
   641  0001C4                     	ds	4
   642  0001C8                     _ipv4SubnetMask:
   643                           	opt stack 0
   644  0001C8                     	ds	4
   645  0001CC                     _receivedRemoteAddress:
   646                           	opt stack 0
   647  0001CC                     	ds	4
   648  0001D0                     _eth_MAC:
   649                           	opt stack 0
   650  0001D0                     	ds	3
   651  0001D3                     _TXPacketSize:
   652                           	opt stack 0
   653  0001D3                     	ds	2
   654  0001D5                     _currentTCB:
   655                           	opt stack 0
   656  0001D5                     	ds	2
   657  0001D7                     _nextAvailablePort:
   658                           	opt stack 0
   659  0001D7                     	ds	2
   660  0001D9                     _nextPacketPointer:
   661                           	opt stack 0
   662  0001D9                     	ds	2
   663  0001DB                     _pot_initial_adcResult:
   664                           	opt stack 0
   665  0001DB                     	ds	2
   666  0001DD                     _rcvPayloadLen:
   667                           	opt stack 0
   668  0001DD                     	ds	2
   669  0001DF                     _tcbList:
   670                           	opt stack 0
   671  0001DF                     	ds	2
   672  0001E1                     _tcpMss:
   673                           	opt stack 0
   674  0001E1                     	ds	2
   675  0001E3                     _claim:
   676                           	opt stack 0
   677  0001E3                     	ds	1
   678  0001E4                     _idle_pkt_received:
   679                           	opt stack 0
   680  0001E4                     	ds	1
   681  0001E5                     _lastBank:
   682                           	opt stack 0
   683  0001E5                     	ds	1
   684  0001E6                     _pot_init:
   685                           	opt stack 0
   686  0001E6                     	ds	1
   687  0001E7                     _tcbListSize:
   688                           	opt stack 0
   689  0001E7                     	ds	1
   690  0001E8                     _tcpHeader:
   691                           	opt stack 0
   692  0001E8                     	ds	20
   693  0001FC                     _data:
   694                           	opt stack 0
   695  0001FC                     	ds	2
   696  0001FE                     _idle_packet:
   697                           	opt stack 0
   698  0001FE                     	ds	2
   699                           tosu	equ	0xFFF
   700                           tosh	equ	0xFFE
   701                           tosl	equ	0xFFD
   702                           pclath	equ	0xFFA
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           prodh	equ	0xFF4
   708                           prodl	equ	0xFF3
   709                           intcon	equ	0xFF2
   710                           indf0	equ	0xFEF
   711                           postinc0	equ	0xFEE
   712                           fsr0h	equ	0xFEA
   713                           fsr0l	equ	0xFE9
   714                           wreg	equ	0xFE8
   715                           postinc1	equ	0xFE6
   716                           plusw1	equ	0xFE3
   717                           fsr1h	equ	0xFE2
   718                           fsr1l	equ	0xFE1
   719                           bsr	equ	0xFE0
   720                           indf2	equ	0xFDF
   721                           postinc2	equ	0xFDE
   722                           postdec2	equ	0xFDD
   723                           plusw2	equ	0xFDB
   724                           fsr2h	equ	0xFDA
   725                           fsr2l	equ	0xFD9
   726                           status	equ	0xFD8
   727                           
   728                           	psect	bssBANK2
   729  000200                     __pbssBANK2:
   730                           	opt stack 0
   731  000200                     _led_values:
   732                           	opt stack 0
   733  000200                     	ds	16
   734  000210                     _ipv4DNS:
   735                           	opt stack 0
   736  000210                     	ds	8
   737  000218                     Network_Manage@nowPv:
   738                           	opt stack 0
   739  000218                     	ds	4
   740  00021C                     _dhcpServerId:
   741                           	opt stack 0
   742  00021C                     	ds	4
   743  000220                     _ipv4Router:
   744                           	opt stack 0
   745  000220                     	ds	4
   746  000224                     _remoteIpv4Address:
   747                           	opt stack 0
   748  000224                     	ds	4
   749  000228                     _rxPacketStatusVector:
   750                           	opt stack 0
   751  000228                     	ds	4
   752  00022C                     _arpMap:
   753                           	opt stack 0
   754  00022C                     	ds	104
   755  000294                     _ipv4Header:
   756                           	opt stack 0
   757  000294                     	ds	20
   758  0002A8                     _udpHeader:
   759                           	opt stack 0
   760  0002A8                     	ds	8
   761  0002B0                     _arpTimer:
   762                           	opt stack 0
   763  0002B0                     	ds	4
   764                           tosu	equ	0xFFF
   765                           tosh	equ	0xFFE
   766                           tosl	equ	0xFFD
   767                           pclath	equ	0xFFA
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           prodh	equ	0xFF4
   773                           prodl	equ	0xFF3
   774                           intcon	equ	0xFF2
   775                           indf0	equ	0xFEF
   776                           postinc0	equ	0xFEE
   777                           fsr0h	equ	0xFEA
   778                           fsr0l	equ	0xFE9
   779                           wreg	equ	0xFE8
   780                           postinc1	equ	0xFE6
   781                           plusw1	equ	0xFE3
   782                           fsr1h	equ	0xFE2
   783                           fsr1l	equ	0xFE1
   784                           bsr	equ	0xFE0
   785                           indf2	equ	0xFDF
   786                           postinc2	equ	0xFDE
   787                           postdec2	equ	0xFDD
   788                           plusw2	equ	0xFDB
   789                           fsr2h	equ	0xFDA
   790                           fsr2l	equ	0xFD9
   791                           status	equ	0xFD8
   792                           
   793                           	psect	cstackBANK1
   794  000100                     __pcstackBANK1:
   795                           	opt stack 0
   796  000100                     ??_IPV4_Packet:
   797                           
   798                           ; 0 bytes @ 0x0
   799  000100                     	ds	28
   800  00011C                     Network_Read@debug_str:
   801                           	opt stack 0
   802                           
   803                           ; 80 bytes @ 0x1C
   804  00011C                     	ds	80
   805  00016C                     Network_Read@header:
   806                           	opt stack 0
   807                           
   808                           ; 14 bytes @ 0x6C
   809  00016C                     	ds	14
   810  00017A                     ??_Network_Manage:
   811                           
   812                           ; 0 bytes @ 0x7A
   813  00017A                     	ds	1
   814  00017B                     Network_Manage@now:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x7B
   818  00017B                     	ds	4
   819  00017F                     ??_main:
   820                           
   821                           ; 0 bytes @ 0x7F
   822  00017F                     	ds	1
   823  000180                     main@old_ip:
   824                           	opt stack 0
   825                           
   826                           ; 4 bytes @ 0x80
   827  000180                     	ds	4
   828  000184                     main@t:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x84
   832  000184                     	ds	4
   833  000188                     main@no_ip_display:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x88
   837  000188                     	ds	1
   838  000189                     main@now_p:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x89
   842  000189                     	ds	4
   843  00018D                     main@ip_timer:
   844                           	opt stack 0
   845                           
   846                           ; 4 bytes @ 0x8D
   847  00018D                     	ds	4
   848  000191                     main@str:
   849                           	opt stack 0
   850                           
   851                           ; 32 bytes @ 0x91
   852  000191                     	ds	32
   853  0001B1                     main@ip:
   854                           	opt stack 0
   855                           
   856                           ; 4 bytes @ 0xB1
   857  0001B1                     	ds	4
   858                           tosu	equ	0xFFF
   859                           tosh	equ	0xFFE
   860                           tosl	equ	0xFFD
   861                           pclath	equ	0xFFA
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodh	equ	0xFF4
   867                           prodl	equ	0xFF3
   868                           intcon	equ	0xFF2
   869                           indf0	equ	0xFEF
   870                           postinc0	equ	0xFEE
   871                           fsr0h	equ	0xFEA
   872                           fsr0l	equ	0xFE9
   873                           wreg	equ	0xFE8
   874                           postinc1	equ	0xFE6
   875                           plusw1	equ	0xFE3
   876                           fsr1h	equ	0xFE2
   877                           fsr1l	equ	0xFE1
   878                           bsr	equ	0xFE0
   879                           indf2	equ	0xFDF
   880                           postinc2	equ	0xFDE
   881                           postdec2	equ	0xFDD
   882                           plusw2	equ	0xFDB
   883                           fsr2h	equ	0xFDA
   884                           fsr2l	equ	0xFD9
   885                           status	equ	0xFD8
   886                           
   887                           	psect	cstackBANK0
   888  000060                     __pcstackBANK0:
   889                           	opt stack 0
   890  000060                     IPv4_Start@targetAddress:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x0
   894  000060                     	ds	4
   895  000064                     IPv4_Start@macAddress:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x4
   899  000064                     	ds	2
   900  000066                     IPv4_Start@ret:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x6
   904  000066                     	ds	1
   905  000067                     ICMP_EchoReply@ipv4Hdr:
   906                           	opt stack 0
   907  000067                     TCP_Snd@tcbPtr:
   908                           	opt stack 0
   909  000067                     UDP_Start@destIP:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x7
   913  000067                     	ds	2
   914  000069                     ??_TCP_Snd:
   915                           
   916                           ; 0 bytes @ 0x9
   917  000069                     	ds	2
   918  00006B                     ICMP_EchoReply@cksm:
   919                           	opt stack 0
   920  00006B                     UDP_Start@srcPort:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0xB
   924  00006B                     	ds	2
   925  00006D                     ICMP_EchoReply@ipv4PayloadLength:
   926                           	opt stack 0
   927  00006D                     UDP_Start@dstPort:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0xD
   931  00006D                     	ds	2
   932  00006F                     DHCP_Request@started:
   933                           	opt stack 0
   934  00006F                     ICMP_EchoReply@ret:
   935                           	opt stack 0
   936  00006F                     DEMO_UDP_Send@started:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0xF
   940  00006F                     	ds	1
   941  000070                     DHCP_Request@type:
   942                           	opt stack 0
   943  000070                     ICMP_EchoReply@icmpHdr:
   944                           	opt stack 0
   945  000070                     DEMO_UDP_Send@pot_adcResult:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x10
   949  000070                     	ds	1
   950  000071                     ICMP_Receive@ipv4Hdr:
   951                           	opt stack 0
   952  000071                     DHCP_Request@ethMAC:
   953                           	opt stack 0
   954                           
   955                           ; 6 bytes @ 0x11
   956  000071                     	ds	2
   957  000073                     ??_ICMP_Receive:
   958                           
   959                           ; 0 bytes @ 0x13
   960  000073                     	ds	5
   961  000078                     ICMP_Receive@icmpHdr:
   962                           	opt stack 0
   963                           
   964                           ; 8 bytes @ 0x18
   965  000078                     	ds	33
   966  000099                     TCP_Snd@data:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x39
   970  000099                     	ds	2
   971  00009B                     TCP_Snd@cksm:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x3B
   975  00009B                     	ds	2
   976  00009D                     TCP_Snd@payloadLength:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x3D
   980  00009D                     	ds	2
   981  00009F                     TCP_Snd@ret:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x3F
   985  00009F                     	ds	1
   986  0000A0                     TCP_Snd@tcpDataLength:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x40
   990  0000A0                     	ds	2
   991  0000A2                     TCP_Snd@txHeader:
   992                           	opt stack 0
   993                           
   994                           ; 20 bytes @ 0x42
   995  0000A2                     	ds	20
   996  0000B6                     TCP_PayloadSave@len:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x56
  1000  0000B6                     	ds	2
  1001  0000B8                     ??_TCP_PayloadSave:
  1002                           
  1003                           ; 0 bytes @ 0x58
  1004  0000B8                     	ds	12
  1005  0000C4                     ??_TCP_FiniteStateMachine:
  1006                           
  1007                           ; 0 bytes @ 0x64
  1008  0000C4                     	ds	12
  1009  0000D0                     TCP_FiniteStateMachine@ret:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x70
  1013  0000D0                     	ds	1
  1014  0000D1                     TCP_FiniteStateMachine@notAckBytes:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x71
  1018  0000D1                     	ds	2
  1019  0000D3                     TCP_FiniteStateMachine@event:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x73
  1023  0000D3                     	ds	1
  1024  0000D4                     TCP_FiniteStateMachine@nextState:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x74
  1028  0000D4                     	ds	1
  1029  0000D5                     ??_TCP_Update:
  1030  0000D5                     TCP_Recv@remoteAddress:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x75
  1034  0000D5                     	ds	4
  1035  0000D9                     TCP_Recv@length:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x79
  1039  0000D9                     	ds	2
  1040  0000DB                     ??_TCP_Recv:
  1041                           
  1042                           ; 0 bytes @ 0x7B
  1043  0000DB                     	ds	2
  1044  0000DD                     TCP_Update@count:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x7D
  1048  0000DD                     	ds	2
  1049  0000DF                     TCP_Update@tcbPtr:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x7F
  1053  0000DF                     	ds	24
  1054  0000F7                     IPV4_Packet@hdrLen:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x97
  1058  0000F7                     	ds	1
  1059  0000F8                     IPV4_Packet@length:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x98
  1063  0000F8                     	ds	2
  1064  0000FA                     IPV4_Packet@cksm:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x9A
  1068  0000FA                     	ds	2
  1069  0000FC                     ??_Network_Read:
  1070                           
  1071                           ; 0 bytes @ 0x9C
  1072  0000FC                     	ds	4
  1073                           tosu	equ	0xFFF
  1074                           tosh	equ	0xFFE
  1075                           tosl	equ	0xFFD
  1076                           pclath	equ	0xFFA
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           prodh	equ	0xFF4
  1082                           prodl	equ	0xFF3
  1083                           intcon	equ	0xFF2
  1084                           indf0	equ	0xFEF
  1085                           postinc0	equ	0xFEE
  1086                           fsr0h	equ	0xFEA
  1087                           fsr0l	equ	0xFE9
  1088                           wreg	equ	0xFE8
  1089                           postinc1	equ	0xFE6
  1090                           plusw1	equ	0xFE3
  1091                           fsr1h	equ	0xFE2
  1092                           fsr1l	equ	0xFE1
  1093                           bsr	equ	0xFE0
  1094                           indf2	equ	0xFDF
  1095                           postinc2	equ	0xFDE
  1096                           postdec2	equ	0xFDD
  1097                           plusw2	equ	0xFDB
  1098                           fsr2h	equ	0xFDA
  1099                           fsr2l	equ	0xFD9
  1100                           status	equ	0xFD8
  1101                           
  1102                           	psect	cstackCOMRAM
  1103  000001                     __pcstackCOMRAM:
  1104                           	opt stack 0
  1105  000001                     ??_low_isr:
  1106  000001                     
  1107                           ; 1 bytes @ 0x0
  1108  000001                     	ds	1
  1109  000002                     ??_DEMO_UDP_ClaimIPCheck:
  1110  000002                     ?_ADC_GetConversion:
  1111                           	opt stack 0
  1112  000002                     ?_ARPV4_Lookup:
  1113                           	opt stack 0
  1114  000002                     ?_IPV4_PseudoHeaderChecksum:
  1115                           	opt stack 0
  1116  000002                     ?___wmul:
  1117                           	opt stack 0
  1118  000002                     ?___lwdiv:
  1119                           	opt stack 0
  1120  000002                     ?_time:
  1121                           	opt stack 0
  1122  000002                     ?_IPV4_GetMyIP:
  1123                           	opt stack 0
  1124  000002                     lcd_write_ctrl@c:
  1125                           	opt stack 0
  1126  000002                     lcd_write_data@d:
  1127                           	opt stack 0
  1128  000002                     LED_Init@x:
  1129                           	opt stack 0
  1130  000002                     SPI_ExchangeByte@v:
  1131                           	opt stack 0
  1132  000002                     putch@data:
  1133                           	opt stack 0
  1134  000002                     ARPV4_Init@x:
  1135                           	opt stack 0
  1136  000002                     DEMO_UDP_SetClaimIP@claim_ip:
  1137                           	opt stack 0
  1138  000002                     time@t:
  1139                           	opt stack 0
  1140  000002                     ARPV4_Update@entryPointer:
  1141                           	opt stack 0
  1142  000002                     IPV4_PseudoHeaderChecksum@payloadLen:
  1143                           	opt stack 0
  1144  000002                     TCB_Reset@tcbPtr:
  1145                           	opt stack 0
  1146  000002                     ___wmul@multiplier:
  1147                           	opt stack 0
  1148  000002                     ___lwdiv@dividend:
  1149                           	opt stack 0
  1150  000002                     memset@p1:
  1151                           	opt stack 0
  1152  000002                     ARPV4_Lookup@ip_address:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x1
  1156  000002                     	ds	1
  1157  000003                     ??_lcd_init:
  1158  000003                     ?_ETH_Read16:
  1159                           	opt stack 0
  1160  000003                     ?_ETH_ReadBlock:
  1161                           	opt stack 0
  1162  000003                     lcd_putch@c:
  1163                           	opt stack 0
  1164  000003                     lcd_goto1@pos:
  1165                           	opt stack 0
  1166  000003                     ENC28_BankSel@r:
  1167                           	opt stack 0
  1168  000003                     ETH_Read8@b:
  1169                           	opt stack 0
  1170  000003                     ETH_Write8@data:
  1171                           	opt stack 0
  1172  000003                     DEMO_UDP_ClaimIPCheck@ret:
  1173                           	opt stack 0
  1174  000003                     ETH_ReadBlock@buffer:
  1175                           	opt stack 0
  1176  000003                     ETH_Write16@data:
  1177                           	opt stack 0
  1178  000003                     ETH_WriteBlock@data:
  1179                           	opt stack 0
  1180  000003                     ETH_Write32@data:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x2
  1184  000003                     	ds	1
  1185  000004                     ??_ADC_GetConversion:
  1186  000004                     ??_IPV4_PseudoHeaderChecksum:
  1187  000004                     ??_TCB_Reset:
  1188  000004                     ?_ETH_ComputeChecksum:
  1189                           	opt stack 0
  1190  000004                     ENC28_BankSel@a:
  1191                           	opt stack 0
  1192  000004                     ARPV4_Update@x:
  1193                           	opt stack 0
  1194  000004                     UDP_Write8@data:
  1195                           	opt stack 0
  1196  000004                     lcd_puts@s:
  1197                           	opt stack 0
  1198  000004                     ETH_ComputeChecksum@len:
  1199                           	opt stack 0
  1200  000004                     DHCP_WriteZeros@length:
  1201                           	opt stack 0
  1202  000004                     ___wmul@multiplicand:
  1203                           	opt stack 0
  1204  000004                     ___lwdiv@divisor:
  1205                           	opt stack 0
  1206  000004                     memset@c:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x3
  1210  000004                     	ds	1
  1211  000005                     ?_ENC28_Rcr16:
  1212                           	opt stack 0
  1213  000005                     ADC_GetConversion@channel:
  1214                           	opt stack 0
  1215  000005                     ENC28_Rcr8@v:
  1216                           	opt stack 0
  1217  000005                     ENC28_Wcr8@v:
  1218                           	opt stack 0
  1219  000005                     ENC28_Bfs@bits:
  1220                           	opt stack 0
  1221  000005                     ENC28_Bfc@bits:
  1222                           	opt stack 0
  1223  000005                     ENC28_Wcr16@v:
  1224                           	opt stack 0
  1225  000005                     ETH_Read16@b:
  1226                           	opt stack 0
  1227  000005                     ETH_ReadBlock@length:
  1228                           	opt stack 0
  1229  000005                     ETH_WriteBlock@length:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x4
  1233  000005                     	ds	1
  1234  000006                     time@gie_val:
  1235                           	opt stack 0
  1236  000006                     ENC28_Rcr8@a:
  1237                           	opt stack 0
  1238  000006                     ENC28_Wcr8@a:
  1239                           	opt stack 0
  1240  000006                     ENC28_Bfs@a:
  1241                           	opt stack 0
  1242  000006                     ENC28_Bfc@a:
  1243                           	opt stack 0
  1244  000006                     ETH_ComputeChecksum@seed:
  1245                           	opt stack 0
  1246  000006                     ___wmul@product:
  1247                           	opt stack 0
  1248  000006                     ___lwdiv@quotient:
  1249                           	opt stack 0
  1250  000006                     memset@n:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x5
  1254  000006                     	ds	1
  1255  000007                     ??_ETH_ReadBlock:
  1256  000007                     ENC28_Wcr16@a:
  1257                           	opt stack 0
  1258  000007                     ETH_GetMAC@macAddr:
  1259                           	opt stack 0
  1260  000007                     ENC28_Rcr16@v:
  1261                           	opt stack 0
  1262  000007                     ETH_WriteBlock@p:
  1263                           	opt stack 0
  1264  000007                     time@the_time:
  1265                           	opt stack 0
  1266  000007                     UDP_Write32@data:
  1267                           	opt stack 0
  1268                           
  1269                           ; 4 bytes @ 0x6
  1270  000007                     	ds	1
  1271  000008                     ??_ETH_ComputeChecksum:
  1272  000008                     IPV4_PseudoHeaderChecksum@v:
  1273                           	opt stack 0
  1274  000008                     ___lwdiv@counter:
  1275                           	opt stack 0
  1276  000008                     ENC28_PhyWrite@d:
  1277                           	opt stack 0
  1278  000008                     ETH_ReadBlock@p:
  1279                           	opt stack 0
  1280  000008                     ETH_WriteStart@dest_mac:
  1281                           	opt stack 0
  1282  000008                     memset@p:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x7
  1286  000008                     	ds	1
  1287  000009                     ?___lwmod:
  1288                           	opt stack 0
  1289  000009                     ENC28_Rcr16@a:
  1290                           	opt stack 0
  1291  000009                     IPV4_PseudoHeaderChecksum@len:
  1292                           	opt stack 0
  1293  000009                     ___lwmod@dividend:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x8
  1297  000009                     	ds	1
  1298  00000A                     ?_ENC28_PhyRead:
  1299                           	opt stack 0
  1300  00000A                     ?_ETH_TxComputeChecksum:
  1301                           	opt stack 0
  1302  00000A                     ?_ETH_GetByteCount:
  1303                           	opt stack 0
  1304  00000A                     ENC28_PhyWrite@a:
  1305                           	opt stack 0
  1306  00000A                     ETH_ReadBlock@readCount:
  1307                           	opt stack 0
  1308  00000A                     ETH_WriteStart@type:
  1309                           	opt stack 0
  1310  00000A                     ETH_Dump@length:
  1311                           	opt stack 0
  1312  00000A                     ETH_Insert@len:
  1313                           	opt stack 0
  1314  00000A                     ETH_Copy@len:
  1315                           	opt stack 0
  1316  00000A                     ETH_TxComputeChecksum@position:
  1317                           	opt stack 0
  1318  00000A                     ARPV4_Lookup@entry_pointer:
  1319                           	opt stack 0
  1320  00000A                     IPV4_PseudoHeaderChecksum@cksm:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x9
  1324  00000A                     	ds	1
  1325  00000B                     ENC28_PhyWrite@v:
  1326                           	opt stack 0
  1327  00000B                     ___lwmod@divisor:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0xA
  1331  00000B                     	ds	1
  1332  00000C                     ??_ENC28_PhyRead:
  1333  00000C                     ??_ETH_WriteStart:
  1334  00000C                     ??_ETH_Copy:
  1335  00000C                     ARPV4_Lookup@x:
  1336                           	opt stack 0
  1337  00000C                     ETH_Dump@newRXTail:
  1338                           	opt stack 0
  1339  00000C                     ETH_Insert@offset:
  1340                           	opt stack 0
  1341  00000C                     ETH_TxComputeChecksum@length:
  1342                           	opt stack 0
  1343  00000C                     ETH_GetByteCount@wptr:
  1344                           	opt stack 0
  1345  00000C                     UDP_Receive@udpcksm:
  1346                           	opt stack 0
  1347  00000C                     ETH_ComputeChecksum@cksm:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0xB
  1351  00000C                     	ds	1
  1352  00000D                     ENC28_PhyRead@a:
  1353                           	opt stack 0
  1354  00000D                     ___lwmod@counter:
  1355                           	opt stack 0
  1356  00000D                     ETH_Copy@tx_buffer_address:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0xC
  1360  00000D                     	ds	1
  1361  00000E                     ??_UDP_Receive:
  1362  00000E                     ??_ARPV4_Packet:
  1363  00000E                     ??_TCP_ParseTCPOptions:
  1364  00000E                     ?__doprnt:
  1365                           	opt stack 0
  1366  00000E                     __doprnt@f:
  1367                           	opt stack 0
  1368  00000E                     ETH_CheckLinkUp@phstat2:
  1369                           	opt stack 0
  1370  00000E                     ETH_Insert@current_tx_pointer:
  1371                           	opt stack 0
  1372  00000E                     ETH_TxComputeChecksum@seed:
  1373                           	opt stack 0
  1374  00000E                     ARPV4_Request@destAddress:
  1375                           	opt stack 0
  1376  00000E                     IPV4_PseudoHeaderChecksum@tmp:
  1377                           	opt stack 0
  1378                           
  1379                           ; 12 bytes @ 0xD
  1380  00000E                     	ds	1
  1381  00000F                     __doprnt@ap:
  1382                           	opt stack 0
  1383  00000F                     ETH_Copy@timer:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0xE
  1387  00000F                     	ds	1
  1388  000010                     ??_ETH_Init:
  1389  000010                     ??_ETH_TxComputeChecksum:
  1390  000010                     ??__doprnt:
  1391  000010                     ETH_Insert@data:
  1392                           	opt stack 0
  1393  000010                     TCP_ParseTCPOptions@ret:
  1394                           	opt stack 0
  1395  000010                     ETH_ComputeChecksum@v:
  1396                           	opt stack 0
  1397  000010                     ETH_EventHandler@phstat2_val:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0xF
  1401  000010                     	ds	1
  1402  000011                     TCP_ParseTCPOptions@opt:
  1403                           	opt stack 0
  1404  000011                     ETH_Copy@temp_len:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x10
  1408  000011                     	ds	1
  1409  000012                     ??_ARPV4_Request:
  1410  000012                     ?_ETH_RxComputeChecksum:
  1411                           	opt stack 0
  1412  000012                     ETH_RxComputeChecksum@len:
  1413                           	opt stack 0
  1414  000012                     TCP_ParseTCPOptions@tcpOptionsSize:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x11
  1418  000012                     	ds	1
  1419  000013                     ETH_EventHandler@eir_val:
  1420                           	opt stack 0
  1421  000013                     UDP_Receive@hptr:
  1422                           	opt stack 0
  1423  000013                     __doprnt@idx:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x12
  1427  000013                     	ds	1
  1428  000014                     __doprnt@prec:
  1429                           	opt stack 0
  1430  000014                     ETH_RxComputeChecksum@seed:
  1431                           	opt stack 0
  1432  000014                     UDP_Receive@x:
  1433                           	opt stack 0
  1434  000014                     ETH_TxComputeChecksum@cksm:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x13
  1438  000014                     	ds	1
  1439  000015                     __doprnt@cp:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x14
  1443  000015                     	ds	1
  1444  000016                     ??_ETH_RxComputeChecksum:
  1445                           
  1446                           ; 0 bytes @ 0x15
  1447  000016                     	ds	1
  1448  000017                     __doprnt@flag:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x16
  1452  000017                     	ds	1
  1453  000018                     IPV4_Send@payloadLength:
  1454                           	opt stack 0
  1455  000018                     __doprnt@val:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x17
  1459  000018                     	ds	2
  1460  00001A                     ??_IPV4_Send:
  1461  00001A                     __doprnt@c:
  1462                           	opt stack 0
  1463  00001A                     ETH_RxComputeChecksum@rxptr:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x19
  1467  00001A                     	ds	1
  1468  00001B                     __doprnt@pb:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x1A
  1472  00001B                     	ds	1
  1473  00001C                     ?_sprintf:
  1474                           	opt stack 0
  1475  00001C                     ?_printf:
  1476                           	opt stack 0
  1477  00001C                     sprintf@wh:
  1478                           	opt stack 0
  1479  00001C                     ETH_RxComputeChecksum@cksm:
  1480                           	opt stack 0
  1481                           
  1482                           ; 4 bytes @ 0x1B
  1483  00001C                     	ds	2
  1484  00001E                     IPV4_Send@ret:
  1485                           	opt stack 0
  1486  00001E                     sprintf@f:
  1487                           	opt stack 0
  1488                           
  1489                           ; 1 bytes @ 0x1D
  1490  00001E                     	ds	1
  1491  00001F                     IPV4_Send@cksm:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x1E
  1495  00001F                     	ds	1
  1496  000020                     printf@f:
  1497                           	opt stack 0
  1498                           
  1499                           ; 1 bytes @ 0x1F
  1500  000020                     	ds	1
  1501  000021                     printf@ap:
  1502                           	opt stack 0
  1503  000021                     IPV4_Send@totalLength:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x20
  1507  000021                     	ds	1
  1508  000022                     printf@pb:
  1509                           	opt stack 0
  1510                           
  1511                           ; 5 bytes @ 0x21
  1512  000022                     	ds	1
  1513  000023                     ??_UDP_Send:
  1514                           
  1515                           ; 0 bytes @ 0x22
  1516  000023                     	ds	4
  1517  000027                     sprintf@ap:
  1518                           	opt stack 0
  1519  000027                     SYSLOG_Write@message:
  1520                           	opt stack 0
  1521  000027                     SYSLOG_Init@t:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x26
  1525  000027                     	ds	1
  1526  000028                     UDP_Send@cksm:
  1527                           	opt stack 0
  1528  000028                     sprintf@pb:
  1529                           	opt stack 0
  1530                           
  1531                           ; 5 bytes @ 0x27
  1532  000028                     	ds	1
  1533  000029                     SYSLOG_Write@t:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x28
  1537  000029                     	ds	1
  1538  00002A                     UDP_Send@udpLength:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x29
  1542  00002A                     	ds	3
  1543  00002D                     ARPV4_Request@ret:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x2C
  1547  00002D                     	ds	1
  1548  00002E                     ARPV4_Packet@length:
  1549                           	opt stack 0
  1550  00002E                     ARPV4_Request@header:
  1551                           	opt stack 0
  1552                           
  1553                           ; 28 bytes @ 0x2D
  1554  00002E                     	ds	2
  1555  000030                     ARPV4_Packet@mergeFlag:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x2F
  1559  000030                     	ds	1
  1560  000031                     ARPV4_Packet@ret:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x30
  1564  000031                     	ds	1
  1565  000032                     ARPV4_Packet@arpPtr:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x31
  1569  000032                     	ds	2
  1570  000034                     ARPV4_Packet@x:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x33
  1574  000034                     	ds	1
  1575  000035                     ARPV4_Packet@x_1710:
  1576                           	opt stack 0
  1577                           
  1578                           ; 1 bytes @ 0x34
  1579  000035                     	ds	1
  1580  000036                     ARPV4_Packet@entryPointer:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x35
  1584  000036                     	ds	2
  1585  000038                     ARPV4_Packet@header:
  1586                           	opt stack 0
  1587                           
  1588                           ; 28 bytes @ 0x37
  1589  000038                     	ds	18
  1590  00004A                     IPv4_Start@destAddress:
  1591                           	opt stack 0
  1592                           
  1593                           ; 4 bytes @ 0x49
  1594  00004A                     	ds	4
  1595  00004E                     IPv4_Start@protocol:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0x4D
  1599  00004E                     	ds	1
  1600  00004F                     ??_IPv4_Start:
  1601                           
  1602                           ; 0 bytes @ 0x4E
  1603  00004F                     	ds	8
  1604  000057                     ??_ICMP_EchoReply:
  1605  000057                     UDP_Start@ret:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x56
  1609  000057                     	ds	1
  1610  000058                     ??_DEMO_UDP_Send:
  1611  000058                     TCP_PayloadSave@buffer_size:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x57
  1615  000058                     	ds	2
  1616  00005A                     TCP_Recv@count:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x59
  1620  00005A                     	ds	1
  1621  00005B                     TCP_Recv@tcbPtr:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x5A
  1625  00005B                     	ds	2
  1626                           tosu	equ	0xFFF
  1627                           tosh	equ	0xFFE
  1628                           tosl	equ	0xFFD
  1629                           pclath	equ	0xFFA
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           intcon	equ	0xFF2
  1637                           indf0	equ	0xFEF
  1638                           postinc0	equ	0xFEE
  1639                           fsr0h	equ	0xFEA
  1640                           fsr0l	equ	0xFE9
  1641                           wreg	equ	0xFE8
  1642                           postinc1	equ	0xFE6
  1643                           plusw1	equ	0xFE3
  1644                           fsr1h	equ	0xFE2
  1645                           fsr1l	equ	0xFE1
  1646                           bsr	equ	0xFE0
  1647                           indf2	equ	0xFDF
  1648                           postinc2	equ	0xFDE
  1649                           postdec2	equ	0xFDD
  1650                           plusw2	equ	0xFDB
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           
  1655 ;;
  1656 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1657 ;;
  1658 ;; *************** function _main *****************
  1659 ;; Defined at:
  1660 ;;		line 70 in file "main.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;		None
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  now_p           4  137[BANK1 ] long 
  1665 ;;  str            32  145[BANK1 ] unsigned char [32]
  1666 ;;  ip              4  177[BANK1 ] unsigned long 
  1667 ;;  ip_timer        4  141[BANK1 ] long 
  1668 ;;  t               4  132[BANK1 ] long 
  1669 ;;  old_ip          4  128[BANK1 ] unsigned long 
  1670 ;;  no_ip_displa    1  136[BANK1 ] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;		None               void
  1673 ;; Registers used:
  1674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : E/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Locals:         0       0      53       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Totals:         0       0      54       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;Total ram usage:       54 bytes
  1685 ;; Hardware stack levels required when called:   16
  1686 ;; This function calls:
  1687 ;;		_DEMO_UDP_IPLockTimer
  1688 ;;		_DEMO_UDP_Send
  1689 ;;		_IPV4_GetMyIP
  1690 ;;		_Network_Init
  1691 ;;		_Network_Manage
  1692 ;;		_Network_WaitForLink
  1693 ;;		_SYSLOG_Init
  1694 ;;		_SYSLOG_Write
  1695 ;;		_initHW
  1696 ;;		_lcd_goto1
  1697 ;;		_lcd_puts
  1698 ;;		_memset
  1699 ;;		_sprintf
  1700 ;;		_time
  1701 ;; This function is called by:
  1702 ;;		Startup code after reset
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text0
  1707  0048A2                     __ptext0:
  1708                           	opt stack 0
  1709  0048A2                     _main:
  1710                           	opt stack 15
  1711                           
  1712                           ;main.c: 72: time_t t;
  1713                           ;main.c: 73: unsigned long ip, old_ip;
  1714                           ;main.c: 74: char str[32];
  1715                           ;main.c: 75: bool no_ip_display = 1;
  1716                           
  1717                           ;incstack = 0
  1718  0048A2  0E01               	movlw	1
  1719  0048A4  0101               	movlb	1	; () banked
  1720  0048A6  6F88               	movwf	main@no_ip_display& (0+255),b
  1721                           
  1722                           ; BSR set to: 1
  1723                           ;main.c: 76: time_t ip_timer;
  1724                           ;main.c: 78: initHW();
  1725  0048A8  EC7F  F02C         	call	_initHW	;wreg free
  1726                           
  1727                           ;main.c: 79: Network_Init();
  1728  0048AC  ECF2  F02D         	call	_Network_Init	;wreg free
  1729                           
  1730                           ; BSR set to: 2
  1731                           ;main.c: 80: SYSLOG_Init();
  1732  0048B0  ECCF  F02C         	call	_SYSLOG_Init	;wreg free
  1733                           
  1734                           ;main.c: 83: IPEN = 1;
  1735  0048B4  8ED0               	bsf	4048,7,c	;volatile
  1736                           
  1737                           ;main.c: 84: GIEH = 1;
  1738  0048B6  8EF2               	bsf	intcon,7,c	;volatile
  1739                           
  1740                           ;main.c: 85: GIEL = 1;
  1741  0048B8  8CF2               	bsf	intcon,6,c	;volatile
  1742                           
  1743                           ;main.c: 88: SYSLOG_Write("Waiting for Link");
  1744  0048BA  0E70               	movlw	low STR_4
  1745  0048BC  D885               	call	PL298	;call to abstracted procedure
  1746  0048BE  EC94  F02D         	call	_SYSLOG_Write	;wreg free
  1747                           
  1748                           ;main.c: 89: Network_WaitForLink();
  1749  0048C2  EC34  F02F         	call	_Network_WaitForLink	;wreg free
  1750                           
  1751                           ;main.c: 90: SYSLOG_Write("Link started");
  1752  0048C6  0E81               	movlw	low STR_5
  1753  0048C8  D87F               	call	PL298	;call to abstracted procedure
  1754  0048CA  EC94  F02D         	call	_SYSLOG_Write	;wreg free
  1755                           
  1756                           ;main.c: 92: time(&ip_timer);
  1757  0048CE  0E8D               	movlw	low main@ip_timer
  1758  0048D0  6E02               	movwf	time@t,c
  1759  0048D2  0E01               	movlw	high main@ip_timer
  1760  0048D4  6E03               	movwf	time@t+1,c
  1761  0048D6  EC85  F02A         	call	_time	;wreg free
  1762  0048DA                     l9752:
  1763                           
  1764                           ;main.c: 93: ip_timer += 1;
  1765  0048DA  0101               	movlb	1	; () banked
  1766  0048DC  2B8D               	incf	main@ip_timer& (0+255),f,b
  1767  0048DE  0E00               	movlw	0
  1768  0048E0  238E               	addwfc	(main@ip_timer+1)& (0+255),f,b
  1769  0048E2  238F               	addwfc	(main@ip_timer+2)& (0+255),f,b
  1770  0048E4  2390               	addwfc	(main@ip_timer+3)& (0+255),f,b
  1771  0048E6                     l9754:
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 96: {
  1775                           ;main.c: 97: time_t now_p;
  1776                           ;main.c: 98: time(&now_p);
  1777  0048E6  0E89               	movlw	low main@now_p
  1778  0048E8  6E02               	movwf	time@t,c
  1779  0048EA  0E01               	movlw	high main@now_p
  1780  0048EC  6E03               	movwf	time@t+1,c
  1781  0048EE  EC85  F02A         	call	_time	;wreg free
  1782                           
  1783                           ;main.c: 99: Network_Manage();
  1784  0048F2  ECDD  F027         	call	_Network_Manage	;wreg free
  1785                           
  1786                           ;main.c: 100: time(&t);
  1787  0048F6  0E84               	movlw	low main@t
  1788  0048F8  6E02               	movwf	time@t,c
  1789  0048FA  0E01               	movlw	high main@t
  1790  0048FC  6E03               	movwf	time@t+1,c
  1791  0048FE  EC85  F02A         	call	_time	;wreg free
  1792                           
  1793                           ;main.c: 102: ip = IPV4_GetMyIP();
  1794  004902  EC14  F02F         	call	_IPV4_GetMyIP	;wreg free
  1795  004906  C002  F1B1         	movff	?_IPV4_GetMyIP,main@ip
  1796  00490A  C003  F1B2         	movff	?_IPV4_GetMyIP+1,main@ip+1
  1797  00490E  C004  F1B3         	movff	?_IPV4_GetMyIP+2,main@ip+2
  1798  004912  C005  F1B4         	movff	?_IPV4_GetMyIP+3,main@ip+3
  1799                           
  1800                           ;main.c: 104: if((no_ip_display) || (old_ip != ip))
  1801  004916  0101               	movlb	1	; () banked
  1802  004918  5188               	movf	main@no_ip_display& (0+255),w,b
  1803  00491A  E10C               	bnz	l1577
  1804                           
  1805                           ; BSR set to: 1
  1806  00491C  51B1               	movf	main@ip& (0+255),w,b
  1807  00491E  1980               	xorwf	main@old_ip& (0+255),w,b
  1808  004920  E109               	bnz	u15030
  1809  004922  51B2               	movf	(main@ip+1)& (0+255),w,b
  1810  004924  1981               	xorwf	(main@old_ip+1)& (0+255),w,b
  1811  004926  E106               	bnz	u15030
  1812  004928  51B3               	movf	(main@ip+2)& (0+255),w,b
  1813  00492A  1982               	xorwf	(main@old_ip+2)& (0+255),w,b
  1814  00492C  E103               	bnz	u15030
  1815  00492E  51B4               	movf	(main@ip+3)& (0+255),w,b
  1816  004930  1983               	xorwf	(main@old_ip+3)& (0+255),w,b
  1817  004932  E038               	bz	l9778
  1818  004934                     u15030:
  1819  004934                     l1577:
  1820                           
  1821                           ; BSR set to: 1
  1822                           ;main.c: 105: {
  1823                           ;main.c: 106: old_ip = ip;
  1824  004934  C1B1  F180         	movff	main@ip,main@old_ip
  1825  004938  C1B2  F181         	movff	main@ip+1,main@old_ip+1
  1826  00493C  C1B3  F182         	movff	main@ip+2,main@old_ip+2
  1827  004940  C1B4  F183         	movff	main@ip+3,main@old_ip+3
  1828                           
  1829                           ; BSR set to: 1
  1830                           ;main.c: 107: memset(str,0,sizeof(str));
  1831  004944  0E91               	movlw	low main@str
  1832  004946  6E02               	movwf	memset@p1,c
  1833  004948  0E01               	movlw	high main@str
  1834  00494A  6E03               	movwf	memset@p1+1,c
  1835  00494C  6A05               	clrf	memset@c+1,c
  1836  00494E  6A04               	clrf	memset@c,c
  1837  004950  6A07               	clrf	memset@n+1,c
  1838  004952  0E20               	movlw	32
  1839  004954  6E06               	movwf	memset@n,c
  1840  004956  EC41  F02D         	call	_memset	;wreg free
  1841                           
  1842                           ; BSR set to: 1
  1843                           ;main.c: 108: sprintf(str,"%d.%d.%d.%d",((char*)&ip)[3],((char*)&ip)[2],((char*)&ip)[1],
      +                          ((char*)&ip)[0]);
  1844  00495A  0E91               	movlw	low main@str
  1845  00495C  6E1C               	movwf	sprintf@wh,c
  1846  00495E  0E01               	movlw	high main@str
  1847  004960  6E1D               	movwf	sprintf@wh+1,c
  1848  004962  0E8E               	movlw	low STR_6
  1849  004964  6E1E               	movwf	sprintf@f,c
  1850  004966  C1B4  F01F         	movff	main@ip+3,?_sprintf+3
  1851  00496A  6A20               	clrf	?_sprintf+4,c
  1852  00496C  C1B3  F021         	movff	main@ip+2,?_sprintf+5
  1853  004970  6A22               	clrf	?_sprintf+6,c
  1854  004972  C1B2  F023         	movff	main@ip+1,?_sprintf+7
  1855  004976  6A24               	clrf	?_sprintf+8,c
  1856  004978  C1B1  F025         	movff	main@ip,?_sprintf+9
  1857  00497C  6A26               	clrf	?_sprintf+10,c
  1858  00497E  EC2B  F02D         	call	_sprintf	;wreg free
  1859                           
  1860                           ;main.c: 109: lcd_goto1(0);
  1861  004982  0E00               	movlw	0
  1862  004984  EC2D  F02F         	call	_lcd_goto1
  1863                           
  1864                           ;main.c: 110: lcd_puts(str);
  1865  004988  0E91               	movlw	low main@str
  1866  00498A  6E04               	movwf	lcd_puts@s,c
  1867  00498C  0E01               	movlw	high main@str
  1868  00498E  6E05               	movwf	lcd_puts@s+1,c
  1869  004990  EC43  F02E         	call	_lcd_puts	;wreg free
  1870                           
  1871                           ;main.c: 111: SYSLOG_Write(str);
  1872  004994  0E91               	movlw	low main@str
  1873  004996  6E27               	movwf	SYSLOG_Write@message,c
  1874  004998  0E01               	movlw	high main@str
  1875  00499A  6E28               	movwf	SYSLOG_Write@message+1,c
  1876  00499C  EC94  F02D         	call	_SYSLOG_Write	;wreg free
  1877                           
  1878                           ;main.c: 112: no_ip_display = 0;
  1879  0049A0  0101               	movlb	1	; () banked
  1880  0049A2  6B88               	clrf	main@no_ip_display& (0+255),b
  1881  0049A4                     l9778:
  1882                           
  1883                           ; BSR set to: 1
  1884                           ;main.c: 113: }
  1885                           ;main.c: 114: if(now_p >= ip_timer)
  1886  0049A4  518D               	movf	main@ip_timer& (0+255),w,b
  1887  0049A6  5D89               	subwf	main@now_p& (0+255),w,b
  1888  0049A8  518E               	movf	(main@ip_timer+1)& (0+255),w,b
  1889  0049AA  598A               	subwfb	(main@now_p+1)& (0+255),w,b
  1890  0049AC  518F               	movf	(main@ip_timer+2)& (0+255),w,b
  1891  0049AE  598B               	subwfb	(main@now_p+2)& (0+255),w,b
  1892  0049B0  518C               	movf	(main@now_p+3)& (0+255),w,b
  1893  0049B2  0A80               	xorlw	128
  1894  0049B4  6F7F               	movwf	??_main& (0+255),b
  1895  0049B6  5190               	movf	(main@ip_timer+3)& (0+255),w,b
  1896  0049B8  0A80               	xorlw	128
  1897  0049BA  597F               	subwfb	??_main& (0+255),w,b
  1898  0049BC  E394               	bnc	l9754
  1899                           
  1900                           ; BSR set to: 1
  1901                           ;main.c: 115: {
  1902                           ;main.c: 116: DEMO_UDP_IPLockTimer();
  1903  0049BE  EC09  F02F         	call	_DEMO_UDP_IPLockTimer	;wreg free
  1904                           
  1905                           ;main.c: 117: DEMO_UDP_Send();
  1906  0049C2  ECF8  F025         	call	_DEMO_UDP_Send	;wreg free
  1907  0049C6  D789               	goto	l9752
  1908  0049C8                     __end_of_main:
  1909                           	opt stack 0
  1910  0049C8                     PL298:
  1911                           	opt stack 15
  1912  0049C8  6E27               	movwf	SYSLOG_Write@message,c
  1913  0049CA  5027               	movf	SYSLOG_Write@message,w,c
  1914  0049CC  A4D8               	btfss	status,2,c
  1915  0049CE  0E10               	movlw	high __smallconst
  1916  0049D0  6E28               	movwf	SYSLOG_Write@message+1,c
  1917  0049D2  0012               	return	
  1918  0049D4                     __end_ofPL298:
  1919                           	opt stack 0
  1920                           tosu	equ	0xFFF
  1921                           tosh	equ	0xFFE
  1922                           tosl	equ	0xFFD
  1923                           pclath	equ	0xFFA
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           intcon	equ	0xFF2
  1931                           indf0	equ	0xFEF
  1932                           postinc0	equ	0xFEE
  1933                           fsr0h	equ	0xFEA
  1934                           fsr0l	equ	0xFE9
  1935                           wreg	equ	0xFE8
  1936                           postinc1	equ	0xFE6
  1937                           plusw1	equ	0xFE3
  1938                           fsr1h	equ	0xFE2
  1939                           fsr1l	equ	0xFE1
  1940                           bsr	equ	0xFE0
  1941                           indf2	equ	0xFDF
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           plusw2	equ	0xFDB
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _memset *****************
  1950 ;; Defined at:
  1951 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  p1              2    1[COMRAM] PTR void 
  1954 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  1955 ;;  c               2    3[COMRAM] int 
  1956 ;;  n               2    5[COMRAM] unsigned int 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  p               2    7[COMRAM] PTR unsigned char 
  1959 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  2    1[COMRAM] PTR void 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1964 ;; Tracked objects:
  1965 ;;		On entry : F/1
  1966 ;;		On exit  : F/1
  1967 ;;		Unchanged: F/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1969 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;Total ram usage:        8 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    3
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;;		_DEMO_UDP_Recv
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text1
  1985  005A82                     __ptext1:
  1986                           	opt stack 0
  1987  005A82                     _memset:
  1988                           	opt stack 27
  1989                           
  1990                           ; BSR set to: 1
  1991                           
  1992                           ;incstack = 0
  1993  005A82  C002  F008         	movff	memset@p1,memset@p
  1994  005A86  C003  F009         	movff	memset@p1+1,memset@p+1
  1995  005A8A  D008               	goto	l7338
  1996  005A8C                     l7334:
  1997                           
  1998                           ; BSR set to: 1
  1999  005A8C  C008  FFD9         	movff	memset@p,fsr2l
  2000  005A90  C009  FFDA         	movff	memset@p+1,fsr2h
  2001  005A94  C004  FFDF         	movff	memset@c,indf2
  2002                           
  2003                           ; BSR set to: 1
  2004  005A98  4A08               	infsnz	memset@p,f,c
  2005  005A9A  2A09               	incf	memset@p+1,f,c
  2006  005A9C                     l7338:
  2007                           
  2008                           ; BSR set to: 1
  2009  005A9C  0606               	decf	memset@n,f,c
  2010  005A9E  A0D8               	btfss	status,0,c
  2011  005AA0  0607               	decf	memset@n+1,f,c
  2012  005AA2  2806               	incf	memset@n,w,c
  2013  005AA4  E1F3               	bnz	l7334
  2014  005AA6  2807               	incf	memset@n+1,w,c
  2015  005AA8  E1F1               	bnz	l7334
  2016                           
  2017                           ; BSR set to: 1
  2018  005AAA  0012               	return		;funcret
  2019  005AAC                     __end_of_memset:
  2020                           	opt stack 0
  2021                           tosu	equ	0xFFF
  2022                           tosh	equ	0xFFE
  2023                           tosl	equ	0xFFD
  2024                           pclath	equ	0xFFA
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           indf0	equ	0xFEF
  2033                           postinc0	equ	0xFEE
  2034                           fsr0h	equ	0xFEA
  2035                           fsr0l	equ	0xFE9
  2036                           wreg	equ	0xFE8
  2037                           postinc1	equ	0xFE6
  2038                           plusw1	equ	0xFE3
  2039                           fsr1h	equ	0xFE2
  2040                           fsr1l	equ	0xFE1
  2041                           bsr	equ	0xFE0
  2042                           indf2	equ	0xFDF
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           plusw2	equ	0xFDB
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _lcd_puts *****************
  2051 ;; Defined at:
  2052 ;;		line 86 in file "../board_support_package/picdem2_net/lcd.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  s               2    3[COMRAM] PTR const unsigned char 
  2055 ;;		 -> DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), DEMO_UDP_Recv@str(32), main@str(32), 
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;		None               void
  2060 ;; Registers used:
  2061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/1
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        2 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    5
  2074 ;; This function calls:
  2075 ;;		_lcd_putch
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;;		_DEMO_UDP_Recv
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text2
  2083  005C86                     __ptext2:
  2084                           	opt stack 0
  2085  005C86                     _lcd_puts:
  2086                           	opt stack 25
  2087                           
  2088                           ;lcd.c: 88: while(*s)
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;incstack = 0
  2092  005C86  D005               	goto	l7240
  2093  005C88                     l7236:
  2094                           
  2095                           ;lcd.c: 89: lcd_putch(*s++);
  2096  005C88  D807               	call	PL304	;call to abstracted procedure
  2097  005C8A  EC8E  F02E         	call	_lcd_putch
  2098  005C8E  4A04               	infsnz	lcd_puts@s,f,c
  2099  005C90  2A05               	incf	lcd_puts@s+1,f,c
  2100  005C92                     l7240:
  2101  005C92  D802               	call	PL304	;call to abstracted procedure
  2102  005C94  E1F9               	bnz	l7236
  2103  005C96  0012               	return		;funcret
  2104  005C98                     __end_of_lcd_puts:
  2105                           	opt stack 0
  2106  005C98                     PL304:
  2107                           	opt stack 25
  2108  005C98  C004  FFD9         	movff	lcd_puts@s,fsr2l
  2109  005C9C  C005  FFDA         	movff	lcd_puts@s+1,fsr2h
  2110  005CA0  50DF               	movf	indf2,w,c
  2111  005CA2  0012               	return	
  2112  005CA4                     __end_ofPL304:
  2113                           	opt stack 0
  2114                           tosu	equ	0xFFF
  2115                           tosh	equ	0xFFE
  2116                           tosl	equ	0xFFD
  2117                           pclath	equ	0xFFA
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           intcon	equ	0xFF2
  2125                           indf0	equ	0xFEF
  2126                           postinc0	equ	0xFEE
  2127                           fsr0h	equ	0xFEA
  2128                           fsr0l	equ	0xFE9
  2129                           wreg	equ	0xFE8
  2130                           postinc1	equ	0xFE6
  2131                           plusw1	equ	0xFE3
  2132                           fsr1h	equ	0xFE2
  2133                           fsr1l	equ	0xFE1
  2134                           bsr	equ	0xFE0
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           plusw2	equ	0xFDB
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _lcd_putch *****************
  2144 ;; Defined at:
  2145 ;;		line 76 in file "../board_support_package/picdem2_net/lcd.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  c               1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  c               1    2[COMRAM] unsigned char 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;		None               void
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/1
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;Total ram usage:        1 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    4
  2166 ;; This function calls:
  2167 ;;		_lcd_busy
  2168 ;;		_lcd_write_data
  2169 ;; This function is called by:
  2170 ;;		_lcd_puts
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text3
  2175  005D1C                     __ptext3:
  2176                           	opt stack 0
  2177  005D1C                     _lcd_putch:
  2178                           	opt stack 25
  2179                           
  2180                           ;incstack = 0
  2181                           ;lcd_putch@c stored from wreg
  2182  005D1C  6E03               	movwf	lcd_putch@c,c
  2183                           
  2184                           ;lcd.c: 78: if(c >= ' ' && c < 127)
  2185  005D1E  0E1F               	movlw	31
  2186  005D20  6403               	cpfsgt	lcd_putch@c,c
  2187  005D22  EF60  F02F         	goto	_lcd_busy
  2188  005D26  0E7F               	movlw	127
  2189  005D28  6003               	cpfslt	lcd_putch@c,c
  2190  005D2A  EF60  F02F         	goto	_lcd_busy
  2191                           
  2192                           ;lcd.c: 79: {
  2193                           ;lcd.c: 80: lcd_write_data(c);
  2194  005D2E  5003               	movf	lcd_putch@c,w,c
  2195  005D30  EC03  F02E         	call	_lcd_write_data
  2196                           
  2197                           ;lcd.c: 81: }
  2198                           ;lcd.c: 82: lcd_busy();
  2199  005D34  EF60  F02F         	goto	_lcd_busy	;wreg free
  2200  005D38                     __end_of_lcd_putch:
  2201                           	opt stack 0
  2202                           tosu	equ	0xFFF
  2203                           tosh	equ	0xFFE
  2204                           tosl	equ	0xFFD
  2205                           pclath	equ	0xFFA
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           indf0	equ	0xFEF
  2214                           postinc0	equ	0xFEE
  2215                           fsr0h	equ	0xFEA
  2216                           fsr0l	equ	0xFE9
  2217                           wreg	equ	0xFE8
  2218                           postinc1	equ	0xFE6
  2219                           plusw1	equ	0xFE3
  2220                           fsr1h	equ	0xFE2
  2221                           fsr1l	equ	0xFE1
  2222                           bsr	equ	0xFE0
  2223                           indf2	equ	0xFDF
  2224                           postinc2	equ	0xFDE
  2225                           postdec2	equ	0xFDD
  2226                           plusw2	equ	0xFDB
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _lcd_write_data *****************
  2232 ;; Defined at:
  2233 ;;		line 71 in file "../board_support_package/picdem2_net/lcd_hw.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  d               1    wreg     unsigned char 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  d               1    1[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/1
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:        1 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    3
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_lcd_putch
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text4
  2262  005C06                     __ptext4:
  2263                           	opt stack 0
  2264  005C06                     _lcd_write_data:
  2265                           	opt stack 25
  2266                           
  2267                           ;incstack = 0
  2268                           ;lcd_write_data@d stored from wreg
  2269  005C06  6E02               	movwf	lcd_write_data@d,c
  2270                           
  2271                           ;lcd_hw.c: 73: LATH1 = 0;
  2272  005C08  9290               	bcf	3984,1,c	;volatile
  2273                           
  2274                           ;lcd_hw.c: 74: LATH2 = 1;
  2275  005C0A  8490               	bsf	3984,2,c	;volatile
  2276                           
  2277                           ;lcd_hw.c: 75: LATE = d;
  2278  005C0C  C002  FF8D         	movff	lcd_write_data@d,3981	;volatile
  2279                           
  2280                           ;lcd_hw.c: 76: _delay((unsigned long)((1)*(41666667UL/4000000.0)));
  2281  005C10  0E03               	movlw	3
  2282  005C12                     u15417:
  2283  005C12  2EE8               	decfsz	wreg,f,c
  2284  005C14  D7FE               	goto	u15417
  2285  005C16  F000               	nop	
  2286                           
  2287                           ;lcd_hw.c: 77: LATH0 = 1;
  2288  005C18  8090               	bsf	3984,0,c	;volatile
  2289                           
  2290                           ;lcd_hw.c: 78: _delay((unsigned long)((1)*(41666667UL/4000000.0)));
  2291  005C1A  0E03               	movlw	3
  2292  005C1C                     u15427:
  2293  005C1C  2EE8               	decfsz	wreg,f,c
  2294  005C1E  D7FE               	goto	u15427
  2295  005C20  F000               	nop	
  2296                           
  2297                           ;lcd_hw.c: 79: LATH0 = 0;
  2298  005C22  9090               	bcf	3984,0,c	;volatile
  2299  005C24  0012               	return		;funcret
  2300  005C26                     __end_of_lcd_write_data:
  2301                           	opt stack 0
  2302                           tosu	equ	0xFFF
  2303                           tosh	equ	0xFFE
  2304                           tosl	equ	0xFFD
  2305                           pclath	equ	0xFFA
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           indf0	equ	0xFEF
  2314                           postinc0	equ	0xFEE
  2315                           fsr0h	equ	0xFEA
  2316                           fsr0l	equ	0xFE9
  2317                           wreg	equ	0xFE8
  2318                           postinc1	equ	0xFE6
  2319                           plusw1	equ	0xFE3
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           bsr	equ	0xFE0
  2323                           indf2	equ	0xFDF
  2324                           postinc2	equ	0xFDE
  2325                           postdec2	equ	0xFDD
  2326                           plusw2	equ	0xFDB
  2327                           fsr2h	equ	0xFDA
  2328                           fsr2l	equ	0xFD9
  2329                           status	equ	0xFD8
  2330                           
  2331 ;; *************** function _lcd_goto1 *****************
  2332 ;; Defined at:
  2333 ;;		line 96 in file "../board_support_package/picdem2_net/lcd.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  pos             1    wreg     unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  pos             1    2[COMRAM] unsigned char 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;		None               void
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/1
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;Total ram usage:        1 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    4
  2354 ;; This function calls:
  2355 ;;		_lcd_busy
  2356 ;;		_lcd_write_ctrl
  2357 ;; This function is called by:
  2358 ;;		_main
  2359 ;;		_DEMO_UDP_Recv
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text5
  2364  005E5A                     __ptext5:
  2365                           	opt stack 0
  2366  005E5A                     _lcd_goto1:
  2367                           	opt stack 26
  2368                           
  2369                           ;incstack = 0
  2370                           ;lcd_goto1@pos stored from wreg
  2371  005E5A  6E03               	movwf	lcd_goto1@pos,c
  2372                           
  2373                           ;lcd.c: 98: lcd_write_ctrl(0x80+pos);
  2374  005E5C  5003               	movf	lcd_goto1@pos,w,c
  2375  005E5E  0F80               	addlw	128
  2376  005E60  EC13  F02E         	call	_lcd_write_ctrl
  2377                           
  2378                           ;lcd.c: 99: lcd_busy();
  2379  005E64  EF60  F02F         	goto	_lcd_busy	;wreg free
  2380  005E68                     __end_of_lcd_goto1:
  2381                           	opt stack 0
  2382                           tosu	equ	0xFFF
  2383                           tosh	equ	0xFFE
  2384                           tosl	equ	0xFFD
  2385                           pclath	equ	0xFFA
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           indf0	equ	0xFEF
  2394                           postinc0	equ	0xFEE
  2395                           fsr0h	equ	0xFEA
  2396                           fsr0l	equ	0xFE9
  2397                           wreg	equ	0xFE8
  2398                           postinc1	equ	0xFE6
  2399                           plusw1	equ	0xFE3
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           bsr	equ	0xFE0
  2403                           indf2	equ	0xFDF
  2404                           postinc2	equ	0xFDE
  2405                           postdec2	equ	0xFDD
  2406                           plusw2	equ	0xFDB
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _initHW *****************
  2412 ;; Defined at:
  2413 ;;		line 50 in file "../board_support_package/picdem2_net/hardware.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;		None               void
  2420 ;; Registers used:
  2421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : F/1
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;Total ram usage:        0 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    5
  2434 ;; This function calls:
  2435 ;;		_ADC_Initialize
  2436 ;;		_LED_Init
  2437 ;;		_lcd_init
  2438 ;;		_rtcc_init
  2439 ;;		_spi_init
  2440 ;;		_uart_init
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text6
  2447  0058FE                     __ptext6:
  2448                           	opt stack 0
  2449  0058FE                     _initHW:
  2450                           	opt stack 25
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;hardware.c: 53: OSCCON = 0x02;
  2454                           
  2455                           ;incstack = 0
  2456  0058FE  0E02               	movlw	2
  2457  005900  6ED3               	movwf	4051,c	;volatile
  2458                           
  2459                           ;hardware.c: 56: OSCTUNE = 0x40;
  2460  005902  0E40               	movlw	64
  2461  005904  6E9B               	movwf	3995,c	;volatile
  2462                           
  2463                           ; BSR set to: 1
  2464                           ;hardware.c: 59: TRISJ = 0;
  2465  005906  6A9A               	clrf	3994,c	;volatile
  2466                           
  2467                           ; BSR set to: 1
  2468                           ;hardware.c: 60: LATJ = 0;
  2469  005908  6A91               	clrf	3985,c	;volatile
  2470                           
  2471                           ; BSR set to: 1
  2472                           ;hardware.c: 62: TRISDbits.TRISD3 = 0;
  2473  00590A  9695               	bcf	3989,3,c	;volatile
  2474                           
  2475                           ; BSR set to: 1
  2476                           ;hardware.c: 63: LATDbits.LATD3 = 1;
  2477  00590C  868C               	bsf	3980,3,c	;volatile
  2478                           
  2479                           ; BSR set to: 1
  2480                           ;hardware.c: 65: TRISCbits.TRISC3 = 0;
  2481  00590E  9694               	bcf	3988,3,c	;volatile
  2482                           
  2483                           ; BSR set to: 1
  2484                           ;hardware.c: 66: TRISCbits.TRISC4 = 1;
  2485  005910  8894               	bsf	3988,4,c	;volatile
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;hardware.c: 67: TRISCbits.TRISC5 = 0;
  2489  005912  9A94               	bcf	3988,5,c	;volatile
  2490                           
  2491                           ;hardware.c: 69: TRISA = 0b11111100;
  2492  005914  0EFC               	movlw	252
  2493  005916  6E92               	movwf	3986,c	;volatile
  2494                           
  2495                           ;hardware.c: 98: TRISB = 0x0F;
  2496  005918  0E0F               	movlw	15
  2497  00591A  6E93               	movwf	3987,c	;volatile
  2498                           
  2499                           ; BSR set to: 1
  2500                           ;hardware.c: 104: rtcc_init();
  2501  00591C  EC62  F02C         	call	_rtcc_init	;wreg free
  2502                           
  2503                           ; BSR set to: 2
  2504                           ;hardware.c: 107: spi_init();
  2505  005920  EC49  F02F         	call	_spi_init	;wreg free
  2506                           
  2507                           ; BSR set to: 2
  2508                           ;hardware.c: 110: uart_init();
  2509  005924  ECE8  F02E         	call	_uart_init	;wreg free
  2510                           
  2511                           ; BSR set to: 2
  2512                           ;hardware.c: 113: lcd_init();
  2513  005928  EC42  F027         	call	_lcd_init	;wreg free
  2514                           
  2515                           ;hardware.c: 119: ADC_Initialize();
  2516  00592C  ECF3  F02E         	call	_ADC_Initialize	;wreg free
  2517                           
  2518                           ;hardware.c: 121: LED_Init();
  2519  005930  EF23  F02E         	goto	_LED_Init	;wreg free
  2520  005934                     __end_of_initHW:
  2521                           	opt stack 0
  2522                           tosu	equ	0xFFF
  2523                           tosh	equ	0xFFE
  2524                           tosl	equ	0xFFD
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           prodh	equ	0xFF4
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           indf0	equ	0xFEF
  2534                           postinc0	equ	0xFEE
  2535                           fsr0h	equ	0xFEA
  2536                           fsr0l	equ	0xFE9
  2537                           wreg	equ	0xFE8
  2538                           postinc1	equ	0xFE6
  2539                           plusw1	equ	0xFE3
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           bsr	equ	0xFE0
  2543                           indf2	equ	0xFDF
  2544                           postinc2	equ	0xFDE
  2545                           postdec2	equ	0xFDD
  2546                           plusw2	equ	0xFDB
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _uart_init *****************
  2552 ;; Defined at:
  2553 ;;		line 55 in file "../board_support_package/picdem2_net/uart.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;		None               void
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : F/2
  2564 ;;		On exit  : F/2
  2565 ;;		Unchanged: F/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    3
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_initHW
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text7
  2582  005DD0                     __ptext7:
  2583                           	opt stack 0
  2584  005DD0                     _uart_init:
  2585                           	opt stack 26
  2586                           
  2587                           ; BSR set to: 2
  2588                           ;uart.c: 58: TRISCbits.TRISC7 = 1;
  2589                           
  2590                           ;incstack = 0
  2591  005DD0  8E94               	bsf	3988,7,c	;volatile
  2592                           
  2593                           ;uart.c: 59: TRISCbits.TRISC6 = 0;
  2594  005DD2  9C94               	bcf	3988,6,c	;volatile
  2595                           
  2596                           ;uart.c: 62: BAUDCON1 = 0x00;
  2597  005DD4  6A7E               	clrf	3966,c	;volatile
  2598                           
  2599                           ; BSR set to: 2
  2600                           ;uart.c: 69: SPBRG1 = 89;
  2601  005DD6  0E59               	movlw	89
  2602  005DD8  6EAF               	movwf	4015,c	;volatile
  2603                           
  2604                           ; BSR set to: 2
  2605                           ;uart.c: 70: BAUDCON1bits.BRG16 = 1;
  2606  005DDA  867E               	bsf	3966,3,c	;volatile
  2607                           
  2608                           ;uart.c: 71: TXSTA1 = 0x26;
  2609  005DDC  0E26               	movlw	38
  2610  005DDE  6EAC               	movwf	4012,c	;volatile
  2611                           
  2612                           ; BSR set to: 2
  2613                           ;uart.c: 73: CREN1 = 1;
  2614  005DE0  88AB               	bsf	4011,4,c	;volatile
  2615                           
  2616                           ; BSR set to: 2
  2617                           ;uart.c: 74: SPEN1 = 1;
  2618  005DE2  8EAB               	bsf	4011,7,c	;volatile
  2619                           
  2620                           ; BSR set to: 2
  2621  005DE4  0C26               	retlw	38	;funcret
  2622  005DE6                     __end_of_uart_init:
  2623                           	opt stack 0
  2624                           tosu	equ	0xFFF
  2625                           tosh	equ	0xFFE
  2626                           tosl	equ	0xFFD
  2627                           pclath	equ	0xFFA
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           intcon	equ	0xFF2
  2635                           indf0	equ	0xFEF
  2636                           postinc0	equ	0xFEE
  2637                           fsr0h	equ	0xFEA
  2638                           fsr0l	equ	0xFE9
  2639                           wreg	equ	0xFE8
  2640                           postinc1	equ	0xFE6
  2641                           plusw1	equ	0xFE3
  2642                           fsr1h	equ	0xFE2
  2643                           fsr1l	equ	0xFE1
  2644                           bsr	equ	0xFE0
  2645                           indf2	equ	0xFDF
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           plusw2	equ	0xFDB
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _spi_init *****************
  2654 ;; Defined at:
  2655 ;;		line 46 in file "../board_support_package/picdem2_net/mssp_spi_master.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;		None               void
  2662 ;; Registers used:
  2663 ;;		wreg, status,2
  2664 ;; Tracked objects:
  2665 ;;		On entry : F/2
  2666 ;;		On exit  : F/2
  2667 ;;		Unchanged: F/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;Total ram usage:        0 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    3
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_initHW
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text8
  2684  005E92                     __ptext8:
  2685                           	opt stack 0
  2686  005E92                     _spi_init:
  2687                           	opt stack 26
  2688                           
  2689                           ; BSR set to: 2
  2690                           ;mssp_spi_master.c: 48: SSP1STATbits.CKE = 1;
  2691                           
  2692                           ; BSR set to: 2
  2693                           ;incstack = 0
  2694  005E92  8CC7               	bsf	4039,6,c	;volatile
  2695                           
  2696                           ;mssp_spi_master.c: 49: SSP1STATbits.SMP = 0;
  2697  005E94  9EC7               	bcf	4039,7,c	;volatile
  2698                           
  2699                           ; BSR set to: 2
  2700                           ;mssp_spi_master.c: 51: SSP1CON1 = 0x01;
  2701  005E96  0E01               	movlw	1
  2702  005E98  6EC6               	movwf	4038,c	;volatile
  2703                           
  2704                           ; BSR set to: 2
  2705                           ;mssp_spi_master.c: 52: SSP1CON1bits.SSPEN = 1;
  2706  005E9A  8AC6               	bsf	4038,5,c	;volatile
  2707                           
  2708                           ; BSR set to: 2
  2709  005E9C  0C01               	retlw	1	;funcret
  2710  005E9E                     __end_of_spi_init:
  2711                           	opt stack 0
  2712                           tosu	equ	0xFFF
  2713                           tosh	equ	0xFFE
  2714                           tosl	equ	0xFFD
  2715                           pclath	equ	0xFFA
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           intcon	equ	0xFF2
  2723                           indf0	equ	0xFEF
  2724                           postinc0	equ	0xFEE
  2725                           fsr0h	equ	0xFEA
  2726                           fsr0l	equ	0xFE9
  2727                           wreg	equ	0xFE8
  2728                           postinc1	equ	0xFE6
  2729                           plusw1	equ	0xFE3
  2730                           fsr1h	equ	0xFE2
  2731                           fsr1l	equ	0xFE1
  2732                           bsr	equ	0xFE0
  2733                           indf2	equ	0xFDF
  2734                           postinc2	equ	0xFDE
  2735                           postdec2	equ	0xFDD
  2736                           plusw2	equ	0xFDB
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _rtcc_init *****************
  2742 ;; Defined at:
  2743 ;;		line 77 in file "../board_support_package/picdem2_net/rtcc.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;		None               void
  2750 ;; Registers used:
  2751 ;;		wreg, status,2
  2752 ;; Tracked objects:
  2753 ;;		On entry : F/1
  2754 ;;		On exit  : F/2
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    3
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_initHW
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text9
  2772  0058C4                     __ptext9:
  2773                           	opt stack 0
  2774  0058C4                     _rtcc_init:
  2775                           	opt stack 26
  2776                           
  2777                           ; BSR set to: 1
  2778                           ;rtcc.c: 79: TMR1CS = 1;
  2779                           
  2780                           ; BSR set to: 2
  2781                           ;incstack = 0
  2782  0058C4  82CD               	bsf	4045,1,c	;volatile
  2783                           
  2784                           ;rtcc.c: 80: T1OSCEN = 1;
  2785  0058C6  86CD               	bsf	4045,3,c	;volatile
  2786                           
  2787                           ;rtcc.c: 81: T1CKPS0 = 0;
  2788  0058C8  98CD               	bcf	4045,4,c	;volatile
  2789                           
  2790                           ;rtcc.c: 82: T1CKPS1 = 0;
  2791  0058CA  9ACD               	bcf	4045,5,c	;volatile
  2792                           
  2793                           ;rtcc.c: 83: T1SYNC = 1;
  2794  0058CC  84CD               	bsf	4045,2,c	;volatile
  2795                           
  2796                           ;rtcc.c: 84: TMR1ON = 1;
  2797  0058CE  80CD               	bsf	4045,0,c	;volatile
  2798                           
  2799                           ; BSR set to: 1
  2800                           ;rtcc.c: 86: TMR1 = 32768UL;
  2801  0058D0  0E80               	movlw	128
  2802  0058D2  6ECF               	movwf	4047,c	;volatile
  2803  0058D4  6ACE               	clrf	4046,c	;volatile
  2804                           
  2805                           ;rtcc.c: 87: deviceTime = 1293861600;
  2806  0058D6  0EE0               	movlw	224
  2807  0058D8  0102               	movlb	2	; () banked
  2808  0058DA  6FB4               	movwf	_deviceTime& (0+255),b	;volatile
  2809  0058DC  0EC2               	movlw	194
  2810  0058DE  6FB5               	movwf	(_deviceTime+1)& (0+255),b	;volatile
  2811  0058E0  0E1E               	movlw	30
  2812  0058E2  6FB6               	movwf	(_deviceTime+2)& (0+255),b	;volatile
  2813  0058E4  0E4D               	movlw	77
  2814  0058E6  6FB7               	movwf	(_deviceTime+3)& (0+255),b	;volatile
  2815                           
  2816                           ;rtcc.c: 88: localTime = 1293861600 + 2208988800;
  2817  0058E8  0E60               	movlw	96
  2818  0058EA  6FB8               	movwf	_localTime& (0+255),b	;volatile
  2819  0058EC  0E41               	movlw	65
  2820  0058EE  6FB9               	movwf	(_localTime+1)& (0+255),b	;volatile
  2821  0058F0  0EC9               	movlw	201
  2822  0058F2  6FBA               	movwf	(_localTime+2)& (0+255),b	;volatile
  2823  0058F4  0ED0               	movlw	208
  2824  0058F6  6FBB               	movwf	(_localTime+3)& (0+255),b	;volatile
  2825                           
  2826                           ; BSR set to: 2
  2827                           ;rtcc.c: 90: TMR1IP = 1;
  2828  0058F8  809F               	bsf	3999,0,c	;volatile
  2829                           
  2830                           ; BSR set to: 2
  2831                           ;rtcc.c: 91: TMR1IE = 1;
  2832  0058FA  809D               	bsf	3997,0,c	;volatile
  2833                           
  2834                           ; BSR set to: 2
  2835  0058FC  0CD0               	retlw	208	;funcret
  2836  0058FE                     __end_of_rtcc_init:
  2837                           	opt stack 0
  2838                           tosu	equ	0xFFF
  2839                           tosh	equ	0xFFE
  2840                           tosl	equ	0xFFD
  2841                           pclath	equ	0xFFA
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           indf0	equ	0xFEF
  2850                           postinc0	equ	0xFEE
  2851                           fsr0h	equ	0xFEA
  2852                           fsr0l	equ	0xFE9
  2853                           wreg	equ	0xFE8
  2854                           postinc1	equ	0xFE6
  2855                           plusw1	equ	0xFE3
  2856                           fsr1h	equ	0xFE2
  2857                           fsr1l	equ	0xFE1
  2858                           bsr	equ	0xFE0
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           plusw2	equ	0xFDB
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _lcd_init *****************
  2868 ;; Defined at:
  2869 ;;		line 110 in file "../board_support_package/picdem2_net/lcd.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  y               2    0        volatile int 
  2874 ;;  x               2    0        volatile int 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;		None               void
  2877 ;; Registers used:
  2878 ;;		wreg, cstack
  2879 ;; Tracked objects:
  2880 ;;		On entry : F/2
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;Total ram usage:        1 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    4
  2891 ;; This function calls:
  2892 ;;		_lcd_busy
  2893 ;;		_lcd_init_pins
  2894 ;;		_lcd_write_ctrl
  2895 ;; This function is called by:
  2896 ;;		_initHW
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text10
  2901  004E84                     __ptext10:
  2902                           	opt stack 0
  2903  004E84                     _lcd_init:
  2904                           	opt stack 25
  2905                           
  2906                           ; BSR set to: 2
  2907                           ;lcd.c: 112: volatile int x,y;
  2908                           ;lcd.c: 114: lcd_init_pins();
  2909                           
  2910                           ; BSR set to: 2
  2911                           ;incstack = 0
  2912  004E84  EC5B  F02F         	call	_lcd_init_pins	;wreg free
  2913                           
  2914                           ; BSR set to: 2
  2915                           ;lcd.c: 116: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2916  004E88  D846               	call	PL356	;call to abstracted procedure
  2917  004E8A                     u15437:
  2918  004E8A  2EE8               	decfsz	wreg,f,c
  2919  004E8C  D7FE               	goto	u15437
  2920  004E8E  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2921  004E90  D7FC               	goto	u15437
  2922  004E92  D000               	nop2	
  2923                           
  2924                           ;lcd.c: 117: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2925  004E94  D840               	call	PL356	;call to abstracted procedure
  2926  004E96                     u15447:
  2927  004E96  2EE8               	decfsz	wreg,f,c
  2928  004E98  D7FE               	goto	u15447
  2929  004E9A  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2930  004E9C  D7FC               	goto	u15447
  2931  004E9E  D000               	nop2	
  2932                           
  2933                           ;lcd.c: 118: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2934  004EA0  D83A               	call	PL356	;call to abstracted procedure
  2935  004EA2                     u15457:
  2936  004EA2  2EE8               	decfsz	wreg,f,c
  2937  004EA4  D7FE               	goto	u15457
  2938  004EA6  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2939  004EA8  D7FC               	goto	u15457
  2940  004EAA  D000               	nop2	
  2941                           
  2942                           ;lcd.c: 119: _delay((unsigned long)((10)*(41666667UL/4000.0)));
  2943  004EAC  D834               	call	PL356	;call to abstracted procedure
  2944  004EAE                     u15467:
  2945  004EAE  2EE8               	decfsz	wreg,f,c
  2946  004EB0  D7FE               	goto	u15467
  2947  004EB2  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2948  004EB4  D7FC               	goto	u15467
  2949  004EB6  D000               	nop2	
  2950                           
  2951                           ;lcd.c: 122: lcd_write_ctrl(0x03);
  2952  004EB8  0E03               	movlw	3
  2953  004EBA  EC13  F02E         	call	_lcd_write_ctrl
  2954                           
  2955                           ;lcd.c: 123: _delay((unsigned long)((4)*(41666667UL/4000.0)));
  2956  004EBE  D82E               	call	PL374	;call to abstracted procedure
  2957  004EC0                     u15477:
  2958  004EC0  2EE8               	decfsz	wreg,f,c
  2959  004EC2  D7FE               	goto	u15477
  2960  004EC4  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2961  004EC6  D7FC               	goto	u15477
  2962  004EC8  F000               	nop	
  2963                           
  2964                           ;lcd.c: 124: lcd_write_ctrl(0x03);
  2965  004ECA  0E03               	movlw	3
  2966  004ECC  EC13  F02E         	call	_lcd_write_ctrl
  2967                           
  2968                           ;lcd.c: 125: _delay((unsigned long)((4)*(41666667UL/4000.0)));
  2969  004ED0  D825               	call	PL374	;call to abstracted procedure
  2970  004ED2                     u15487:
  2971  004ED2  2EE8               	decfsz	wreg,f,c
  2972  004ED4  D7FE               	goto	u15487
  2973  004ED6  2E03               	decfsz	??_lcd_init& (0+255),f,c
  2974  004ED8  D7FC               	goto	u15487
  2975  004EDA  F000               	nop	
  2976                           
  2977                           ;lcd.c: 126: lcd_write_ctrl(0x03);
  2978  004EDC  0E03               	movlw	3
  2979  004EDE  EC13  F02E         	call	_lcd_write_ctrl
  2980                           
  2981                           ;lcd.c: 129: lcd_write_ctrl(0x38);
  2982  004EE2  0E38               	movlw	56
  2983  004EE4  EC13  F02E         	call	_lcd_write_ctrl
  2984                           
  2985                           ;lcd.c: 131: lcd_busy();
  2986  004EE8  EC60  F02F         	call	_lcd_busy	;wreg free
  2987                           
  2988                           ;lcd.c: 132: lcd_write_ctrl(0x0C);
  2989  004EEC  0E0C               	movlw	12
  2990  004EEE  EC13  F02E         	call	_lcd_write_ctrl
  2991                           
  2992                           ;lcd.c: 133: lcd_busy();
  2993  004EF2  EC60  F02F         	call	_lcd_busy	;wreg free
  2994                           
  2995                           ;lcd.c: 134: lcd_write_ctrl(0x01);
  2996  004EF6  0E01               	movlw	1
  2997  004EF8  EC13  F02E         	call	_lcd_write_ctrl
  2998                           
  2999                           ;lcd.c: 135: lcd_busy();
  3000  004EFC  EC60  F02F         	call	_lcd_busy	;wreg free
  3001                           
  3002                           ;lcd.c: 138: lcd_write_ctrl(0x01);
  3003  004F00  0E01               	movlw	1
  3004  004F02  EC13  F02E         	call	_lcd_write_ctrl
  3005                           
  3006                           ;lcd.c: 139: _delay((unsigned long)((2)*(41666667UL/4000.0)));
  3007  004F06  0E1C               	movlw	28
  3008  004F08  6E03               	movwf	??_lcd_init& (0+255),c
  3009  004F0A  0E0D               	movlw	13
  3010  004F0C                     u15497:
  3011  004F0C  2EE8               	decfsz	wreg,f,c
  3012  004F0E  D7FE               	goto	u15497
  3013  004F10  2E03               	decfsz	??_lcd_init& (0+255),f,c
  3014  004F12  D7FC               	goto	u15497
  3015  004F14  0012               	return		;funcret
  3016  004F16                     __end_of_lcd_init:
  3017                           	opt stack 0
  3018  004F16                     PL356:
  3019                           	opt stack 25
  3020  004F16  0E88               	movlw	136
  3021  004F18  6E03               	movwf	??_lcd_init& (0+255),c
  3022  004F1A  0C46               	retlw	70
  3023  004F1C                     __end_ofPL356:
  3024                           	opt stack 0
  3025  004F1C                     PL374:
  3026                           	opt stack 25
  3027  004F1C  0E37               	movlw	55
  3028  004F1E  6E03               	movwf	??_lcd_init& (0+255),c
  3029  004F20  0C1B               	retlw	27
  3030  004F22                     __end_ofPL374:
  3031                           	opt stack 0
  3032                           tosu	equ	0xFFF
  3033                           tosh	equ	0xFFE
  3034                           tosl	equ	0xFFD
  3035                           pclath	equ	0xFFA
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           intcon	equ	0xFF2
  3043                           indf0	equ	0xFEF
  3044                           postinc0	equ	0xFEE
  3045                           fsr0h	equ	0xFEA
  3046                           fsr0l	equ	0xFE9
  3047                           wreg	equ	0xFE8
  3048                           postinc1	equ	0xFE6
  3049                           plusw1	equ	0xFE3
  3050                           fsr1h	equ	0xFE2
  3051                           fsr1l	equ	0xFE1
  3052                           bsr	equ	0xFE0
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           plusw2	equ	0xFDB
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _lcd_write_ctrl *****************
  3062 ;; Defined at:
  3063 ;;		line 59 in file "../board_support_package/picdem2_net/lcd_hw.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  c               1    wreg     unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  c               1    1[COMRAM] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;		None               void
  3070 ;; Registers used:
  3071 ;;		wreg
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/1
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:        1 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    3
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_lcd_goto1
  3088 ;;		_lcd_init
  3089 ;;		_lcd_goto2
  3090 ;;		_lcd_clear
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text11
  3095  005C26                     __ptext11:
  3096                           	opt stack 0
  3097  005C26                     _lcd_write_ctrl:
  3098                           	opt stack 26
  3099                           
  3100                           ;incstack = 0
  3101                           ;lcd_write_ctrl@c stored from wreg
  3102  005C26  6E02               	movwf	lcd_write_ctrl@c,c
  3103                           
  3104                           ;lcd_hw.c: 61: LATH1 = 0;
  3105  005C28  9290               	bcf	3984,1,c	;volatile
  3106                           
  3107                           ;lcd_hw.c: 62: LATH2 = 0;
  3108  005C2A  9490               	bcf	3984,2,c	;volatile
  3109                           
  3110                           ;lcd_hw.c: 64: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  3111  005C2C  0EAD               	movlw	173
  3112  005C2E                     u15507:
  3113  005C2E  2EE8               	decfsz	wreg,f,c
  3114  005C30  D7FE               	goto	u15507
  3115  005C32  F000               	nop	
  3116                           
  3117                           ;lcd_hw.c: 65: LATE = c;
  3118  005C34  C002  FF8D         	movff	lcd_write_ctrl@c,3981	;volatile
  3119                           
  3120                           ;lcd_hw.c: 66: LATH0 = 1;
  3121  005C38  8090               	bsf	3984,0,c	;volatile
  3122                           
  3123                           ;lcd_hw.c: 67: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  3124  005C3A  0EAD               	movlw	173
  3125  005C3C                     u15517:
  3126  005C3C  2EE8               	decfsz	wreg,f,c
  3127  005C3E  D7FE               	goto	u15517
  3128  005C40  F000               	nop	
  3129                           
  3130                           ;lcd_hw.c: 68: LATH0 = 0;
  3131  005C42  9090               	bcf	3984,0,c	;volatile
  3132  005C44  0012               	return		;funcret
  3133  005C46                     __end_of_lcd_write_ctrl:
  3134                           	opt stack 0
  3135                           tosu	equ	0xFFF
  3136                           tosh	equ	0xFFE
  3137                           tosl	equ	0xFFD
  3138                           pclath	equ	0xFFA
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           indf0	equ	0xFEF
  3147                           postinc0	equ	0xFEE
  3148                           fsr0h	equ	0xFEA
  3149                           fsr0l	equ	0xFE9
  3150                           wreg	equ	0xFE8
  3151                           postinc1	equ	0xFE6
  3152                           plusw1	equ	0xFE3
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           bsr	equ	0xFE0
  3156                           indf2	equ	0xFDF
  3157                           postinc2	equ	0xFDE
  3158                           postdec2	equ	0xFDD
  3159                           plusw2	equ	0xFDB
  3160                           fsr2h	equ	0xFDA
  3161                           fsr2l	equ	0xFD9
  3162                           status	equ	0xFD8
  3163                           
  3164 ;; *************** function _lcd_init_pins *****************
  3165 ;; Defined at:
  3166 ;;		line 50 in file "../board_support_package/picdem2_net/lcd_hw.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;		None               void
  3173 ;; Registers used:
  3174 ;;		None
  3175 ;; Tracked objects:
  3176 ;;		On entry : F/2
  3177 ;;		On exit  : F/2
  3178 ;;		Unchanged: F/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    3
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_lcd_init
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text12
  3195  005EB6                     __ptext12:
  3196                           	opt stack 0
  3197  005EB6                     _lcd_init_pins:
  3198                           	opt stack 25
  3199                           
  3200                           ; BSR set to: 2
  3201                           ;lcd_hw.c: 52: TRISE = 0;
  3202                           
  3203                           ;incstack = 0
  3204  005EB6  6A96               	clrf	3990,c	;volatile
  3205                           
  3206                           ;lcd_hw.c: 53: TRISH = 0x00;
  3207  005EB8  6A99               	clrf	3993,c	;volatile
  3208                           
  3209                           ;lcd_hw.c: 54: LATE = 0;
  3210  005EBA  6A8D               	clrf	3981,c	;volatile
  3211                           
  3212                           ;lcd_hw.c: 55: LATH = 0;
  3213  005EBC  6A90               	clrf	3984,c	;volatile
  3214                           
  3215                           ; BSR set to: 2
  3216  005EBE  0012               	return		;funcret
  3217  005EC0                     __end_of_lcd_init_pins:
  3218                           	opt stack 0
  3219                           tosu	equ	0xFFF
  3220                           tosh	equ	0xFFE
  3221                           tosl	equ	0xFFD
  3222                           pclath	equ	0xFFA
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           indf0	equ	0xFEF
  3231                           postinc0	equ	0xFEE
  3232                           fsr0h	equ	0xFEA
  3233                           fsr0l	equ	0xFE9
  3234                           wreg	equ	0xFE8
  3235                           postinc1	equ	0xFE6
  3236                           plusw1	equ	0xFE3
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           bsr	equ	0xFE0
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           plusw2	equ	0xFDB
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _lcd_busy *****************
  3249 ;; Defined at:
  3250 ;;		line 82 in file "../board_support_package/picdem2_net/lcd_hw.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;		None               void
  3257 ;; Registers used:
  3258 ;;		wreg
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/1
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        0 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_lcd_putch
  3275 ;;		_lcd_goto1
  3276 ;;		_lcd_init
  3277 ;;		_lcd_goto2
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text13
  3282  005EC0                     __ptext13:
  3283                           	opt stack 0
  3284  005EC0                     _lcd_busy:
  3285                           	opt stack 25
  3286                           
  3287                           ;lcd_hw.c: 84: _delay((unsigned long)((50)*(41666667UL/4000000.0)));
  3288                           
  3289                           ; BSR set to: 2
  3290                           ;incstack = 0
  3291  005EC0  0EAD               	movlw	173
  3292  005EC2                     u15527:
  3293  005EC2  2EE8               	decfsz	wreg,f,c
  3294  005EC4  D7FE               	goto	u15527
  3295  005EC6  F000               	nop	
  3296  005EC8  0012               	return		;funcret
  3297  005ECA                     __end_of_lcd_busy:
  3298                           	opt stack 0
  3299                           tosu	equ	0xFFF
  3300                           tosh	equ	0xFFE
  3301                           tosl	equ	0xFFD
  3302                           pclath	equ	0xFFA
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           indf0	equ	0xFEF
  3311                           postinc0	equ	0xFEE
  3312                           fsr0h	equ	0xFEA
  3313                           fsr0l	equ	0xFE9
  3314                           wreg	equ	0xFE8
  3315                           postinc1	equ	0xFE6
  3316                           plusw1	equ	0xFE3
  3317                           fsr1h	equ	0xFE2
  3318                           fsr1l	equ	0xFE1
  3319                           bsr	equ	0xFE0
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           postdec2	equ	0xFDD
  3323                           plusw2	equ	0xFDB
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _LED_Init *****************
  3329 ;; Defined at:
  3330 ;;		line 55 in file "../board_support_package/picdem2_net/led_driver.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  x               1    1[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;		None               void
  3337 ;; Registers used:
  3338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/2
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:        1 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    3
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_initHW
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text14
  3359  005C46                     __ptext14:
  3360                           	opt stack 0
  3361  005C46                     _LED_Init:
  3362                           	opt stack 26
  3363                           
  3364                           ;led_driver.c: 57: uint8_t x = 0;
  3365                           
  3366                           ;incstack = 0
  3367  005C46  6A02               	clrf	LED_Init@x,c
  3368                           
  3369                           ;led_driver.c: 58: for(x = 0; x < 8; x++)
  3370  005C48  6A02               	clrf	LED_Init@x,c
  3371  005C4A                     l6938:
  3372                           
  3373                           ;led_driver.c: 59: {
  3374                           ;led_driver.c: 60: led_values[x].value = 0;
  3375  005C4A  5002               	movf	LED_Init@x,w,c
  3376  005C4C  0D02               	mullw	2
  3377  005C4E  0E00               	movlw	low _led_values
  3378  005C50  24F3               	addwf	prodl,w,c
  3379  005C52  6ED9               	movwf	fsr2l,c
  3380  005C54  0E02               	movlw	high _led_values
  3381  005C56  20F4               	addwfc	prodh,w,c
  3382  005C58  6EDA               	movwf	fsr2h,c
  3383  005C5A  6ADF               	clrf	indf2,c
  3384  005C5C  2A02               	incf	LED_Init@x,f,c
  3385  005C5E  0E07               	movlw	7
  3386  005C60  6402               	cpfsgt	LED_Init@x,c
  3387  005C62  D7F3               	goto	l6938
  3388  005C64  0C07               	retlw	7
  3389  005C66                     __end_of_LED_Init:
  3390                           	opt stack 0
  3391                           tosu	equ	0xFFF
  3392                           tosh	equ	0xFFE
  3393                           tosl	equ	0xFFD
  3394                           pclath	equ	0xFFA
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           indf0	equ	0xFEF
  3403                           postinc0	equ	0xFEE
  3404                           fsr0h	equ	0xFEA
  3405                           fsr0l	equ	0xFE9
  3406                           wreg	equ	0xFE8
  3407                           postinc1	equ	0xFE6
  3408                           plusw1	equ	0xFE3
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           bsr	equ	0xFE0
  3412                           indf2	equ	0xFDF
  3413                           postinc2	equ	0xFDE
  3414                           postdec2	equ	0xFDD
  3415                           plusw2	equ	0xFDB
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _ADC_Initialize *****************
  3421 ;; Defined at:
  3422 ;;		line 55 in file "../board_support_package/picdem2_net/adc.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, status,2
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/2
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    3
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_initHW
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text15
  3451  005DE6                     __ptext15:
  3452                           	opt stack 0
  3453  005DE6                     _ADC_Initialize:
  3454                           	opt stack 26
  3455                           
  3456                           ;adc.c: 59: TRISAbits.RA2 = 1;
  3457                           
  3458                           ;incstack = 0
  3459  005DE6  8492               	bsf	3986,2,c	;volatile
  3460                           
  3461                           ;adc.c: 60: TRISAbits.RA3 = 1;
  3462  005DE8  8692               	bsf	3986,3,c	;volatile
  3463                           
  3464                           ;adc.c: 63: ADCON0 = 0x0D;
  3465  005DEA  0E0D               	movlw	13
  3466  005DEC  6EC2               	movwf	4034,c	;volatile
  3467                           
  3468                           ;adc.c: 66: ADCON1 = 0x06;
  3469  005DEE  0E06               	movlw	6
  3470  005DF0  6EC1               	movwf	4033,c	;volatile
  3471                           
  3472                           ;adc.c: 69: ADCON2 = 0xBE;
  3473  005DF2  0EBE               	movlw	190
  3474  005DF4  6EC0               	movwf	4032,c	;volatile
  3475                           
  3476                           ;adc.c: 72: ADRESL = 0x00;
  3477  005DF6  6AC3               	clrf	4035,c	;volatile
  3478                           
  3479                           ;adc.c: 75: ADRESH = 0x00;
  3480  005DF8  6AC4               	clrf	4036,c	;volatile
  3481  005DFA  0012               	return		;funcret
  3482  005DFC                     __end_of_ADC_Initialize:
  3483                           	opt stack 0
  3484                           tosu	equ	0xFFF
  3485                           tosh	equ	0xFFE
  3486                           tosl	equ	0xFFD
  3487                           pclath	equ	0xFFA
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           indf0	equ	0xFEF
  3496                           postinc0	equ	0xFEE
  3497                           fsr0h	equ	0xFEA
  3498                           fsr0l	equ	0xFE9
  3499                           wreg	equ	0xFE8
  3500                           postinc1	equ	0xFE6
  3501                           plusw1	equ	0xFE3
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           bsr	equ	0xFE0
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           plusw2	equ	0xFDB
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _SYSLOG_Write *****************
  3514 ;; Defined at:
  3515 ;;		line 50 in file "../../TCPIP Library/source/syslog.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  message         2   38[COMRAM] PTR const unsigned char 
  3518 ;;		 -> main@str(32), STR_5(13), STR_4(17), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  t               2   40[COMRAM] unsigned int 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;		None               void
  3523 ;; Registers used:
  3524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/2
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;Total ram usage:        4 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    6
  3537 ;; This function calls:
  3538 ;;		_printf
  3539 ;;		_time
  3540 ;; This function is called by:
  3541 ;;		_main
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text16
  3546  005B28                     __ptext16:
  3547                           	opt stack 0
  3548  005B28                     _SYSLOG_Write:
  3549                           	opt stack 24
  3550                           
  3551                           ;syslog.c: 52: unsigned int t = (unsigned int) time(0);
  3552                           
  3553                           ;incstack = 0
  3554  005B28  6A02               	clrf	time@t,c
  3555  005B2A  6A03               	clrf	time@t+1,c
  3556  005B2C  EC85  F02A         	call	_time	;wreg free
  3557  005B30  C002  F029         	movff	?_time,SYSLOG_Write@t
  3558  005B34  C003  F02A         	movff	?_time+1,SYSLOG_Write@t+1
  3559                           
  3560                           ;syslog.c: 53: printf("%u : %s\r\n",t,message);
  3561  005B38  C029  F01C         	movff	SYSLOG_Write@t,?_printf
  3562  005B3C  C02A  F01D         	movff	SYSLOG_Write@t+1,?_printf+1
  3563  005B40  C027  F01E         	movff	SYSLOG_Write@message,?_printf+2
  3564  005B44  C028  F01F         	movff	SYSLOG_Write@message+1,?_printf+3
  3565  005B48  0E9A               	movlw	STR_3& (0+255)
  3566  005B4A  EFE0  F02D         	goto	_printf
  3567  005B4E                     __end_of_SYSLOG_Write:
  3568                           	opt stack 0
  3569                           tosu	equ	0xFFF
  3570                           tosh	equ	0xFFE
  3571                           tosl	equ	0xFFD
  3572                           pclath	equ	0xFFA
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           indf0	equ	0xFEF
  3581                           postinc0	equ	0xFEE
  3582                           fsr0h	equ	0xFEA
  3583                           fsr0l	equ	0xFE9
  3584                           wreg	equ	0xFE8
  3585                           postinc1	equ	0xFE6
  3586                           plusw1	equ	0xFE3
  3587                           fsr1h	equ	0xFE2
  3588                           fsr1l	equ	0xFE1
  3589                           bsr	equ	0xFE0
  3590                           indf2	equ	0xFDF
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           plusw2	equ	0xFDB
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _SYSLOG_Init *****************
  3599 ;; Defined at:
  3600 ;;		line 43 in file "../../TCPIP Library/source/syslog.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  t               4   38[COMRAM] unsigned long 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : F/2
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        4 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    6
  3621 ;; This function calls:
  3622 ;;		_printf
  3623 ;;		_time
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text17
  3630  00599E                     __ptext17:
  3631                           	opt stack 0
  3632  00599E                     _SYSLOG_Init:
  3633                           	opt stack 24
  3634                           
  3635                           ; BSR set to: 2
  3636                           ;syslog.c: 45: unsigned long t = time(0);
  3637                           
  3638                           ;incstack = 0
  3639  00599E  6A02               	clrf	time@t,c
  3640  0059A0  6A03               	clrf	time@t+1,c
  3641  0059A2  EC85  F02A         	call	_time	;wreg free
  3642  0059A6  C002  F027         	movff	?_time,SYSLOG_Init@t
  3643  0059AA  C003  F028         	movff	?_time+1,SYSLOG_Init@t+1
  3644  0059AE  C004  F029         	movff	?_time+2,SYSLOG_Init@t+2
  3645  0059B2  C005  F02A         	movff	?_time+3,SYSLOG_Init@t+3
  3646                           
  3647                           ;syslog.c: 47: printf("\r\n\r\nStarting Syslog at %u\r\n",t);
  3648  0059B6  C027  F01C         	movff	SYSLOG_Init@t,?_printf
  3649  0059BA  C028  F01D         	movff	SYSLOG_Init@t+1,?_printf+1
  3650  0059BE  C029  F01E         	movff	SYSLOG_Init@t+2,?_printf+2
  3651  0059C2  C02A  F01F         	movff	SYSLOG_Init@t+3,?_printf+3
  3652  0059C6  0E43               	movlw	STR_2& (0+255)
  3653  0059C8  EFE0  F02D         	goto	_printf
  3654  0059CC                     __end_of_SYSLOG_Init:
  3655                           	opt stack 0
  3656                           tosu	equ	0xFFF
  3657                           tosh	equ	0xFFE
  3658                           tosl	equ	0xFFD
  3659                           pclath	equ	0xFFA
  3660                           tblptru	equ	0xFF8
  3661                           tblptrh	equ	0xFF7
  3662                           tblptrl	equ	0xFF6
  3663                           tablat	equ	0xFF5
  3664                           prodh	equ	0xFF4
  3665                           prodl	equ	0xFF3
  3666                           intcon	equ	0xFF2
  3667                           indf0	equ	0xFEF
  3668                           postinc0	equ	0xFEE
  3669                           fsr0h	equ	0xFEA
  3670                           fsr0l	equ	0xFE9
  3671                           wreg	equ	0xFE8
  3672                           postinc1	equ	0xFE6
  3673                           plusw1	equ	0xFE3
  3674                           fsr1h	equ	0xFE2
  3675                           fsr1l	equ	0xFE1
  3676                           bsr	equ	0xFE0
  3677                           indf2	equ	0xFDF
  3678                           postinc2	equ	0xFDE
  3679                           postdec2	equ	0xFDD
  3680                           plusw2	equ	0xFDB
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _printf *****************
  3686 ;; Defined at:
  3687 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\printf.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  f               1    wreg     PTR const unsigned char 
  3690 ;;		 -> STR_3(10), STR_2(28), 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  f               1   31[COMRAM] PTR const unsigned char 
  3693 ;;		 -> STR_3(10), STR_2(28), 
  3694 ;;  pb              5   33[COMRAM] struct __prbuf
  3695 ;;  ap              1   32[COMRAM] PTR void [1]
  3696 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  2   27[COMRAM] int 
  3699 ;; Registers used:
  3700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/2
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:       11 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    5
  3713 ;; This function calls:
  3714 ;;		__doprnt
  3715 ;; This function is called by:
  3716 ;;		_SYSLOG_Init
  3717 ;;		_SYSLOG_Write
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text18
  3722  005BC0                     __ptext18:
  3723                           	opt stack 0
  3724  005BC0                     _printf:
  3725                           	opt stack 24
  3726                           
  3727                           ;incstack = 0
  3728                           ;printf@f stored from wreg
  3729  005BC0  6E20               	movwf	printf@f,c
  3730  005BC2  6A22               	clrf	printf@pb,c
  3731  005BC4  6A23               	clrf	printf@pb+1,c
  3732  005BC6  0E38               	movlw	low _putch
  3733  005BC8  6E24               	movwf	printf@pb+2,c
  3734  005BCA  0E5D               	movlw	high _putch
  3735  005BCC  6E25               	movwf	printf@pb+3,c
  3736  005BCE  0E00               	movlw	low (_putch shr (0+16))
  3737  005BD0  6E26               	movwf	printf@pb+4,c
  3738  005BD2  0E1C               	movlw	low ?_printf
  3739  005BD4  6E21               	movwf	printf@ap,c
  3740                           
  3741                           ;	Return value of _printf is never used
  3742  005BD6  C020  F00E         	movff	printf@f,__doprnt@f
  3743  005BDA  0E21               	movlw	low printf@ap
  3744  005BDC  6E0F               	movwf	__doprnt@ap,c
  3745  005BDE  0E22               	movlw	printf@pb& (0+255)
  3746  005BE0  EF6E  F01B         	goto	__doprnt
  3747  005BE4                     __end_of_printf:
  3748                           	opt stack 0
  3749                           tosu	equ	0xFFF
  3750                           tosh	equ	0xFFE
  3751                           tosl	equ	0xFFD
  3752                           pclath	equ	0xFFA
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon	equ	0xFF2
  3760                           indf0	equ	0xFEF
  3761                           postinc0	equ	0xFEE
  3762                           fsr0h	equ	0xFEA
  3763                           fsr0l	equ	0xFE9
  3764                           wreg	equ	0xFE8
  3765                           postinc1	equ	0xFE6
  3766                           plusw1	equ	0xFE3
  3767                           fsr1h	equ	0xFE2
  3768                           fsr1l	equ	0xFE1
  3769                           bsr	equ	0xFE0
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           plusw2	equ	0xFDB
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _Network_WaitForLink *****************
  3779 ;; Defined at:
  3780 ;;		line 76 in file "../../TCPIP Library/source/network.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;		None               void
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/2
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    8
  3801 ;; This function calls:
  3802 ;;		_ETH_CheckLinkUp
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text19
  3809  005E68                     __ptext19:
  3810                           	opt stack 0
  3811  005E68                     _Network_WaitForLink:
  3812                           	opt stack 22
  3813                           
  3814                           ;network.c: 78: while(!ETH_CheckLinkUp()) __nop();
  3815                           
  3816                           ;incstack = 0
  3817  005E68  D001               	goto	l9574
  3818  005E6A                     l1042:
  3819  005E6A  F000               	nop	
  3820  005E6C                     l9574:
  3821  005E6C  ECDC  F02E         	call	_ETH_CheckLinkUp	;wreg free
  3822  005E70  0900               	iorlw	0
  3823  005E72  E0FB               	bz	l1042
  3824  005E74  0012               	return		;funcret
  3825  005E76                     __end_of_Network_WaitForLink:
  3826                           	opt stack 0
  3827                           tosu	equ	0xFFF
  3828                           tosh	equ	0xFFE
  3829                           tosl	equ	0xFFD
  3830                           pclath	equ	0xFFA
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           indf0	equ	0xFEF
  3839                           postinc0	equ	0xFEE
  3840                           fsr0h	equ	0xFEA
  3841                           fsr0l	equ	0xFE9
  3842                           wreg	equ	0xFE8
  3843                           postinc1	equ	0xFE6
  3844                           plusw1	equ	0xFE3
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           bsr	equ	0xFE0
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           plusw2	equ	0xFDB
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _Network_Manage *****************
  3857 ;; Defined at:
  3858 ;;		line 81 in file "../../TCPIP Library/source/network.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  now             4  123[BANK1 ] long 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;		None               void
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/1
  3869 ;;		On exit  : E/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;Total ram usage:        5 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:   15
  3879 ;; This function calls:
  3880 ;;		_ARPV4_Update
  3881 ;;		_DHCP_Manage
  3882 ;;		_ETH_EventHandler
  3883 ;;		_Network_Read
  3884 ;;		_TCP_Update
  3885 ;;		_time
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text20
  3892  004FBA                     __ptext20:
  3893                           	opt stack 0
  3894  004FBA                     _Network_Manage:
  3895                           	opt stack 15
  3896                           
  3897                           ;network.c: 83: time_t now;
  3898                           ;network.c: 84: static time_t nowPv = 0;
  3899                           ;network.c: 86: ETH_EventHandler();
  3900                           
  3901                           ;incstack = 0
  3902  004FBA  ECB7  F028         	call	_ETH_EventHandler	;wreg free
  3903                           
  3904                           ;network.c: 87: Network_Read();
  3905  004FBE  ECE6  F026         	call	_Network_Read	;wreg free
  3906                           
  3907                           ;network.c: 90: time(&now);
  3908  004FC2  0E7B               	movlw	low Network_Manage@now
  3909  004FC4  6E02               	movwf	time@t,c
  3910  004FC6  0E01               	movlw	high Network_Manage@now
  3911  004FC8  6E03               	movwf	time@t+1,c
  3912  004FCA  EC85  F02A         	call	_time	;wreg free
  3913                           
  3914                           ;network.c: 91: if(now >= arpTimer)
  3915  004FCE  0102               	movlb	2	; () banked
  3916  004FD0  51B0               	movf	_arpTimer& (0+255),w,b
  3917  004FD2  0101               	movlb	1	; () banked
  3918  004FD4  5D7B               	subwf	Network_Manage@now& (0+255),w,b
  3919  004FD6  0102               	movlb	2	; () banked
  3920  004FD8  51B1               	movf	(_arpTimer+1)& (0+255),w,b
  3921  004FDA  0101               	movlb	1	; () banked
  3922  004FDC  597C               	subwfb	(Network_Manage@now+1)& (0+255),w,b
  3923  004FDE  0102               	movlb	2	; () banked
  3924  004FE0  51B2               	movf	(_arpTimer+2)& (0+255),w,b
  3925  004FE2  0101               	movlb	1	; () banked
  3926  004FE4  597D               	subwfb	(Network_Manage@now+2)& (0+255),w,b
  3927  004FE6  517E               	movf	(Network_Manage@now+3)& (0+255),w,b
  3928  004FE8  0A80               	xorlw	128
  3929  004FEA  6F7A               	movwf	??_Network_Manage& (0+255),b
  3930  004FEC  0102               	movlb	2	; () banked
  3931  004FEE  51B3               	movf	(_arpTimer+3)& (0+255),w,b
  3932  004FF0  0A80               	xorlw	128
  3933  004FF2  0101               	movlb	1	; () banked
  3934  004FF4  597A               	subwfb	??_Network_Manage& (0+255),w,b
  3935  004FF6  E303               	bnc	l9588
  3936                           
  3937                           ; BSR set to: 1
  3938                           ;network.c: 92: {
  3939                           ;network.c: 93: ARPV4_Update();
  3940  004FF8  EC56  F02D         	call	_ARPV4_Update	;wreg free
  3941                           
  3942                           ; BSR set to: 1
  3943                           ;network.c: 94: arpTimer += 10;
  3944  004FFC  D821               	call	PL226	;call to abstracted procedure
  3945  004FFE                     l9588:
  3946                           
  3947                           ;network.c: 95: }
  3948                           ;network.c: 96: if(now > nowPv)
  3949  004FFE  0101               	movlb	1	; () banked
  3950  005000  517B               	movf	Network_Manage@now& (0+255),w,b
  3951  005002  0102               	movlb	2	; () banked
  3952  005004  5D18               	subwf	Network_Manage@nowPv& (0+255),w,b
  3953  005006  0101               	movlb	1	; () banked
  3954  005008  517C               	movf	(Network_Manage@now+1)& (0+255),w,b
  3955  00500A  0102               	movlb	2	; () banked
  3956  00500C  5919               	subwfb	(Network_Manage@nowPv+1)& (0+255),w,b
  3957  00500E  0101               	movlb	1	; () banked
  3958  005010  517D               	movf	(Network_Manage@now+2)& (0+255),w,b
  3959  005012  0102               	movlb	2	; () banked
  3960  005014  591A               	subwfb	(Network_Manage@nowPv+2)& (0+255),w,b
  3961  005016  511B               	movf	(Network_Manage@nowPv+3)& (0+255),w,b
  3962  005018  0A80               	xorlw	128
  3963  00501A  0101               	movlb	1	; () banked
  3964  00501C  6F7A               	movwf	??_Network_Manage& (0+255),b
  3965  00501E  517E               	movf	(Network_Manage@now+3)& (0+255),w,b
  3966  005020  0A80               	xorlw	128
  3967  005022  597A               	subwfb	??_Network_Manage& (0+255),w,b
  3968  005024  E204               	bc	l9592
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;network.c: 97: {
  3972                           ;network.c: 98: DHCP_Manage();
  3973  005026  ECFB  F028         	call	_DHCP_Manage	;wreg free
  3974                           
  3975                           ;network.c: 100: TCP_Update();
  3976  00502A  ECE6  F01C         	call	_TCP_Update	;wreg free
  3977  00502E                     l9592:
  3978                           
  3979                           ;network.c: 101: }
  3980                           ;network.c: 102: nowPv = now;
  3981  00502E  C17B  F218         	movff	Network_Manage@now,Network_Manage@nowPv
  3982  005032  C17C  F219         	movff	Network_Manage@now+1,Network_Manage@nowPv+1
  3983  005036  C17D  F21A         	movff	Network_Manage@now+2,Network_Manage@nowPv+2
  3984  00503A  C17E  F21B         	movff	Network_Manage@now+3,Network_Manage@nowPv+3
  3985  00503E  0012               	return		;funcret
  3986  005040                     __end_of_Network_Manage:
  3987                           	opt stack 0
  3988  005040                     PL226:
  3989                           	opt stack 21
  3990  005040  0E0A               	movlw	10
  3991  005042  0102               	movlb	2	; () banked
  3992  005044  27B0               	addwf	_arpTimer& (0+255),f,b
  3993  005046  0E00               	movlw	0
  3994  005048  23B1               	addwfc	(_arpTimer+1)& (0+255),f,b
  3995  00504A  23B2               	addwfc	(_arpTimer+2)& (0+255),f,b
  3996  00504C  23B3               	addwfc	(_arpTimer+3)& (0+255),f,b
  3997  00504E  0C00               	retlw	0
  3998  005050                     __end_ofPL226:
  3999                           	opt stack 0
  4000                           tosu	equ	0xFFF
  4001                           tosh	equ	0xFFE
  4002                           tosl	equ	0xFFD
  4003                           pclath	equ	0xFFA
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           indf0	equ	0xFEF
  4012                           postinc0	equ	0xFEE
  4013                           fsr0h	equ	0xFEA
  4014                           fsr0l	equ	0xFE9
  4015                           wreg	equ	0xFE8
  4016                           postinc1	equ	0xFE6
  4017                           plusw1	equ	0xFE3
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           bsr	equ	0xFE0
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           plusw2	equ	0xFDB
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function _TCP_Update *****************
  4030 ;; Defined at:
  4031 ;;		line 1417 in file "../../TCPIP Library/source/tcpv4.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  tcbPtr          2  127[BANK0 ] PTR struct .
  4036 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
  4037 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
  4038 ;;  count           2  125[BANK0 ] int 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;		None               void
  4041 ;; Registers used:
  4042 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : E/1
  4045 ;;		On exit  : F/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;Total ram usage:       12 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:   12
  4055 ;; This function calls:
  4056 ;;		_TCP_FiniteStateMachine
  4057 ;; This function is called by:
  4058 ;;		_Network_Manage
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text21
  4063  0039CC                     __ptext21:
  4064                           	opt stack 0
  4065  0039CC                     _TCP_Update:
  4066                           	opt stack 17
  4067                           
  4068                           ;tcpv4.c: 1425: nextSequenceNumber++;
  4069                           
  4070                           ;incstack = 0
  4071  0039CC  0100               	movlb	0	; () banked
  4072  0039CE  6BDD               	clrf	TCP_Update@count& (0+255),b
  4073  0039D0  6BDE               	clrf	(TCP_Update@count+1)& (0+255),b
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;tcpv4.c: 1428: nextAvailablePort = nextAvailablePort + 1;
  4077  0039D2  0101               	movlb	1	; () banked
  4078  0039D4  4BD7               	infsnz	_nextAvailablePort& (0+255),f,b
  4079  0039D6  2BD8               	incf	(_nextAvailablePort+1)& (0+255),f,b
  4080                           
  4081                           ; BSR set to: 1
  4082                           ;tcpv4.c: 1429: if (nextAvailablePort < (1024u))
  4083  0039D8  0E04               	movlw	4
  4084  0039DA  5DD8               	subwf	(_nextAvailablePort+1)& (0+255),w,b
  4085  0039DC  E203               	bc	l9524
  4086                           
  4087                           ; BSR set to: 1
  4088                           ;tcpv4.c: 1430: {
  4089                           ;tcpv4.c: 1431: nextAvailablePort = (1024u);
  4090  0039DE  0E04               	movlw	4
  4091  0039E0  6FD8               	movwf	(_nextAvailablePort+1)& (0+255),b
  4092  0039E2  6BD7               	clrf	_nextAvailablePort& (0+255),b
  4093  0039E4                     l9524:
  4094                           
  4095                           ; BSR set to: 1
  4096                           ;tcpv4.c: 1432: }
  4097                           ;tcpv4.c: 1435: tcbPtr = tcbList;
  4098  0039E4  C1DF  F0DF         	movff	_tcbList,TCP_Update@tcbPtr
  4099  0039E8  C1E0  F0E0         	movff	_tcbList+1,TCP_Update@tcbPtr+1
  4100                           
  4101                           ;tcpv4.c: 1436: while((tcbPtr != (0)) && (count < tcbListSize))
  4102  0039EC  D0E8               	goto	l9544
  4103  0039EE                     l9526:
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;tcpv4.c: 1437: {
  4107                           ;tcpv4.c: 1438: if (tcbPtr->timeout > 0)
  4108  0039EE  0E30               	movlw	48
  4109  0039F0  D8FB               	call	PL52	;call to abstracted procedure
  4110  0039F2  64F7               	cpfsgt	tblptrh,c
  4111  0039F4  D002               	bra	u14647
  4112  0039F6  D905               	call	PL204	;call to abstracted procedure
  4113  0039F8  D003               	bra	u14640
  4114  0039FA                     u14647:
  4115  0039FA  EC3C  F011         	call	PL24	;call to abstracted procedure
  4116  0039FE  D908               	call	PL296	;call to abstracted procedure
  4117  003A00                     u14640:
  4118  003A00  0100               	movlb	0	; () banked
  4119  003A02  51D7               	movf	(??_TCP_Update+2)& (0+255),w,b
  4120  003A04  11D8               	iorwf	(??_TCP_Update+3)& (0+255),w,b
  4121  003A06  E101 D0C5          	bz	l9540
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;tcpv4.c: 1439: {
  4125                           ;tcpv4.c: 1440: ;
  4126                           ;tcpv4.c: 1441: tcbPtr->timeout = tcbPtr->timeout - 1;
  4127  003A0A  69D5               	setf	??_TCP_Update& (0+255),b
  4128  003A0C  69D6               	setf	(??_TCP_Update+1)& (0+255),b
  4129  003A0E  0E30               	movlw	48
  4130  003A10  25DF               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4131  003A12  6FD7               	movwf	(??_TCP_Update+2)& (0+255),b
  4132  003A14  0E00               	movlw	0
  4133  003A16  21E0               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4134  003A18  6FD8               	movwf	(??_TCP_Update+3)& (0+255),b
  4135  003A1A  C0D7  FFF6         	movff	??_TCP_Update+2,tblptrl
  4136  003A1E  C0D8  FFF7         	movff	??_TCP_Update+3,tblptrh
  4137  003A22  0E00               	movlw	low (__smallconst shr (0+16))
  4138  003A24  6EF8               	movwf	tblptru,c
  4139  003A26  0E0F               	movlw	(high __ramtop+-1)
  4140  003A28  64F7               	cpfsgt	tblptrh,c
  4141  003A2A  D007               	bra	u14667
  4142  003A2C  0009               	tblrd		*+
  4143  003A2E  CFF5 F0D9          	movff	tablat,??_TCP_Update+4
  4144  003A32  0009               	tblrd		*+
  4145  003A34  CFF5 F0DA          	movff	tablat,??_TCP_Update+5
  4146  003A38  D006               	bra	u14660
  4147  003A3A                     u14667:
  4148  003A3A  EC3C  F011         	call	PL24	;call to abstracted procedure
  4149  003A3E  CFEE F0D9          	movff	postinc0,??_TCP_Update+4
  4150  003A42  CFEE F0DA          	movff	postinc0,??_TCP_Update+5
  4151  003A46                     u14660:
  4152  003A46  0100               	movlb	0	; () banked
  4153  003A48  51D5               	movf	??_TCP_Update& (0+255),w,b
  4154  003A4A  27D9               	addwf	(??_TCP_Update+4)& (0+255),f,b
  4155  003A4C  51D6               	movf	(??_TCP_Update+1)& (0+255),w,b
  4156  003A4E  23DA               	addwfc	(??_TCP_Update+5)& (0+255),f,b
  4157  003A50  0E30               	movlw	48
  4158  003A52  25DF               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4159  003A54  6FDB               	movwf	(??_TCP_Update+6)& (0+255),b
  4160  003A56  0E00               	movlw	0
  4161  003A58  21E0               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4162  003A5A  6FDC               	movwf	(??_TCP_Update+7)& (0+255),b
  4163  003A5C  C0DB  FFF6         	movff	??_TCP_Update+6,tblptrl
  4164  003A60  C0DC  FFF7         	movff	??_TCP_Update+7,tblptrh
  4165  003A64  0E00               	movlw	low (__smallconst shr (0+16))
  4166  003A66  6EF8               	movwf	tblptru,c
  4167  003A68  0E0F               	movlw	(high __ramtop+-1)
  4168  003A6A  64F7               	cpfsgt	tblptrh,c
  4169  003A6C  D007               	bra	u14677
  4170  003A6E  C0D9  FFF5         	movff	??_TCP_Update+4,tablat
  4171  003A72  000D               	tblwt		*+
  4172  003A74  C0DA  FFF5         	movff	??_TCP_Update+5,tablat
  4173  003A78  000C               	tblwt		*
  4174  003A7A  D006               	bra	u14670
  4175  003A7C                     u14677:
  4176  003A7C  EC3C  F011         	call	PL24	;call to abstracted procedure
  4177  003A80  C0D9  FFEE         	movff	??_TCP_Update+4,postinc0
  4178  003A84  C0DA  FFEF         	movff	??_TCP_Update+5,indf0
  4179  003A88                     u14670:
  4180                           
  4181                           ;tcpv4.c: 1443: if (tcbPtr->timeout == 0)
  4182  003A88  0E30               	movlw	48
  4183  003A8A  0100               	movlb	0	; () banked
  4184  003A8C  D8AD               	call	PL52	;call to abstracted procedure
  4185  003A8E  64F7               	cpfsgt	tblptrh,c
  4186  003A90  D002               	bra	u14687
  4187  003A92  D8B7               	call	PL204	;call to abstracted procedure
  4188  003A94  D003               	bra	u14680
  4189  003A96                     u14687:
  4190  003A96  EC3C  F011         	call	PL24	;call to abstracted procedure
  4191  003A9A  D8BA               	call	PL296	;call to abstracted procedure
  4192  003A9C                     u14680:
  4193  003A9C  0100               	movlb	0	; () banked
  4194  003A9E  51D7               	movf	(??_TCP_Update+2)& (0+255),w,b
  4195  003AA0  11D8               	iorwf	(??_TCP_Update+3)& (0+255),w,b
  4196  003AA2  E178               	bnz	l9540
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;tcpv4.c: 1444: {
  4200                           ;tcpv4.c: 1445: if (tcbPtr->timeoutsCount > 0)
  4201  003AA4  0E34               	movlw	52
  4202  003AA6  D8A0               	call	PL52	;call to abstracted procedure
  4203  003AA8  64F7               	cpfsgt	tblptrh,c
  4204  003AAA  D003               	bra	u14707
  4205  003AAC  0008               	tblrd		*
  4206  003AAE  50F5               	movf	tablat,w,c
  4207  003AB0  D003               	bra	u14700
  4208  003AB2                     u14707:
  4209  003AB2  EC3C  F011         	call	PL24	;call to abstracted procedure
  4210  003AB6  50EF               	movf	indf0,w,c
  4211  003AB8                     u14700:
  4212  003AB8  0900               	iorlw	0
  4213  003ABA  E06C               	bz	l9540
  4214                           
  4215                           ;tcpv4.c: 1446: {
  4216                           ;tcpv4.c: 1448: if (tcbPtr->connectionEvent == NOP)
  4217  003ABC  0E2B               	movlw	43
  4218  003ABE  0100               	movlb	0	; () banked
  4219  003AC0  D893               	call	PL52	;call to abstracted procedure
  4220  003AC2  64F7               	cpfsgt	tblptrh,c
  4221  003AC4  D003               	bra	u14727
  4222  003AC6  0008               	tblrd		*
  4223  003AC8  50F5               	movf	tablat,w,c
  4224  003ACA  D003               	bra	u14720
  4225  003ACC                     u14727:
  4226  003ACC  EC3C  F011         	call	PL24	;call to abstracted procedure
  4227  003AD0  50EF               	movf	indf0,w,c
  4228  003AD2                     u14720:
  4229  003AD2  0A0D               	xorlw	13
  4230  003AD4  E15F               	bnz	l9540
  4231                           
  4232                           ;tcpv4.c: 1449: {
  4233                           ;tcpv4.c: 1450: tcbPtr->timeout = tcbPtr->timeoutReloadValue;
  4234  003AD6  0E32               	movlw	50
  4235  003AD8  0100               	movlb	0	; () banked
  4236  003ADA  D886               	call	PL52	;call to abstracted procedure
  4237  003ADC  64F7               	cpfsgt	tblptrh,c
  4238  003ADE  D002               	bra	u14747
  4239  003AE0  D890               	call	PL204	;call to abstracted procedure
  4240  003AE2  D003               	bra	u14740
  4241  003AE4                     u14747:
  4242  003AE4  EC3C  F011         	call	PL24	;call to abstracted procedure
  4243  003AE8  D893               	call	PL296	;call to abstracted procedure
  4244  003AEA                     u14740:
  4245  003AEA  0E30               	movlw	48
  4246  003AEC  0100               	movlb	0	; () banked
  4247  003AEE  25DF               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4248  003AF0  6FD9               	movwf	(??_TCP_Update+4)& (0+255),b
  4249  003AF2  0E00               	movlw	0
  4250  003AF4  21E0               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4251  003AF6  6FDA               	movwf	(??_TCP_Update+5)& (0+255),b
  4252  003AF8  C0D9  FFF6         	movff	??_TCP_Update+4,tblptrl
  4253  003AFC  C0DA  FFF7         	movff	??_TCP_Update+5,tblptrh
  4254  003B00  0E00               	movlw	low (__smallconst shr (0+16))
  4255  003B02  6EF8               	movwf	tblptru,c
  4256  003B04  0E0F               	movlw	(high __ramtop+-1)
  4257  003B06  64F7               	cpfsgt	tblptrh,c
  4258  003B08  D007               	bra	u14757
  4259  003B0A  C0D7  FFF5         	movff	??_TCP_Update+2,tablat
  4260  003B0E  000D               	tblwt		*+
  4261  003B10  C0D8  FFF5         	movff	??_TCP_Update+3,tablat
  4262  003B14  000C               	tblwt		*
  4263  003B16  D006               	bra	u14750
  4264  003B18                     u14757:
  4265  003B18  EC3C  F011         	call	PL24	;call to abstracted procedure
  4266  003B1C  C0D7  FFEE         	movff	??_TCP_Update+2,postinc0
  4267  003B20  C0D8  FFEF         	movff	??_TCP_Update+3,indf0
  4268  003B24                     u14750:
  4269                           
  4270                           ;tcpv4.c: 1451: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount - 1;
  4271  003B24  0E34               	movlw	52
  4272  003B26  0100               	movlb	0	; () banked
  4273  003B28  D85F               	call	PL52	;call to abstracted procedure
  4274  003B2A  64F7               	cpfsgt	tblptrh,c
  4275  003B2C  D003               	bra	u14767
  4276  003B2E  0008               	tblrd		*
  4277  003B30  50F5               	movf	tablat,w,c
  4278  003B32  D003               	bra	u14760
  4279  003B34                     u14767:
  4280  003B34  EC3C  F011         	call	PL24	;call to abstracted procedure
  4281  003B38  50EF               	movf	indf0,w,c
  4282  003B3A                     u14760:
  4283  003B3A  0100               	movlb	0	; () banked
  4284  003B3C  6FD7               	movwf	(??_TCP_Update+2)& (0+255),b
  4285  003B3E  07D7               	decf	(??_TCP_Update+2)& (0+255),f,b
  4286  003B40  0E34               	movlw	52
  4287  003B42  25DF               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4288  003B44  6FD8               	movwf	(??_TCP_Update+3)& (0+255),b
  4289  003B46  0E00               	movlw	0
  4290  003B48  21E0               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4291  003B4A  6FD9               	movwf	(??_TCP_Update+4)& (0+255),b
  4292  003B4C  C0D8  FFF6         	movff	??_TCP_Update+3,tblptrl
  4293  003B50  C0D9  FFF7         	movff	??_TCP_Update+4,tblptrh
  4294  003B54  0E00               	movlw	low (__smallconst shr (0+16))
  4295  003B56  6EF8               	movwf	tblptru,c
  4296  003B58  0E0F               	movlw	(high __ramtop+-1)
  4297  003B5A  64F7               	cpfsgt	tblptrh,c
  4298  003B5C  D004               	bra	u14777
  4299  003B5E  C0D7  FFF5         	movff	??_TCP_Update+2,tablat
  4300  003B62  000C               	tblwt		*
  4301  003B64  D004               	bra	u14770
  4302  003B66                     u14777:
  4303  003B66  EC3C  F011         	call	PL24	;call to abstracted procedure
  4304  003B6A  C0D7  FFEF         	movff	??_TCP_Update+2,indf0
  4305  003B6E                     u14770:
  4306                           
  4307                           ;tcpv4.c: 1452: tcbPtr->connectionEvent = TIMEOUT;
  4308  003B6E  0E2B               	movlw	43
  4309  003B70  0100               	movlb	0	; () banked
  4310  003B72  D83A               	call	PL52	;call to abstracted procedure
  4311  003B74  64F7               	cpfsgt	tblptrh,c
  4312  003B76  D004               	bra	u14787
  4313  003B78  0E0C               	movlw	12
  4314  003B7A  6EF5               	movwf	tablat,c
  4315  003B7C  000C               	tblwt		*
  4316  003B7E  D004               	bra	u14780
  4317  003B80                     u14787:
  4318  003B80  EC3C  F011         	call	PL24	;call to abstracted procedure
  4319  003B84  0E0C               	movlw	12
  4320  003B86  6EEF               	movwf	indf0,c
  4321  003B88                     u14780:
  4322                           
  4323                           ;tcpv4.c: 1453: currentTCB = tcbPtr;
  4324  003B88  C0DF  F1D5         	movff	TCP_Update@tcbPtr,_currentTCB
  4325  003B8C  C0E0  F1D6         	movff	TCP_Update@tcbPtr+1,_currentTCB+1
  4326                           
  4327                           ;tcpv4.c: 1454: TCP_FiniteStateMachine();
  4328  003B90  EC5A  F008         	call	_TCP_FiniteStateMachine	;wreg free
  4329  003B94                     l9540:
  4330                           
  4331                           ;tcpv4.c: 1455: }
  4332                           ;tcpv4.c: 1456: }
  4333                           ;tcpv4.c: 1457: }
  4334                           ;tcpv4.c: 1458: }
  4335                           ;tcpv4.c: 1459: tcbPtr = tcbPtr->nextTCB;
  4336  003B94  0E2C               	movlw	44
  4337  003B96  0100               	movlb	0	; () banked
  4338  003B98  D827               	call	PL52	;call to abstracted procedure
  4339  003B9A  64F7               	cpfsgt	tblptrh,c
  4340  003B9C  D007               	bra	u14797
  4341  003B9E  0009               	tblrd		*+
  4342  003BA0  CFF5 F0DF          	movff	tablat,TCP_Update@tcbPtr
  4343  003BA4  0009               	tblrd		*+
  4344  003BA6  CFF5 F0E0          	movff	tablat,TCP_Update@tcbPtr+1
  4345  003BAA  D006               	bra	u14790
  4346  003BAC                     u14797:
  4347  003BAC  EC3C  F011         	call	PL24	;call to abstracted procedure
  4348  003BB0  CFEE F0DF          	movff	postinc0,TCP_Update@tcbPtr
  4349  003BB4  CFEE F0E0          	movff	postinc0,TCP_Update@tcbPtr+1
  4350  003BB8                     u14790:
  4351                           
  4352                           ;tcpv4.c: 1460: count ++;
  4353  003BB8  0100               	movlb	0	; () banked
  4354  003BBA  4BDD               	infsnz	TCP_Update@count& (0+255),f,b
  4355  003BBC  2BDE               	incf	(TCP_Update@count+1)& (0+255),f,b
  4356  003BBE                     l9544:
  4357  003BBE  0100               	movlb	0	; () banked
  4358  003BC0  51DF               	movf	TCP_Update@tcbPtr& (0+255),w,b
  4359  003BC2  11E0               	iorwf	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4360  003BC4  B4D8               	btfsc	status,2,c
  4361  003BC6  0012               	return	
  4362                           
  4363                           ; BSR set to: 0
  4364  003BC8  C1E7  F0D5         	movff	_tcbListSize,??_TCP_Update
  4365  003BCC  6BD6               	clrf	(??_TCP_Update+1)& (0+255),b
  4366  003BCE  BFD5               	btfsc	??_TCP_Update& (0+255),7,b
  4367  003BD0  07D6               	decf	(??_TCP_Update+1)& (0+255),f,b
  4368  003BD2  51D5               	movf	??_TCP_Update& (0+255),w,b
  4369  003BD4  5DDD               	subwf	TCP_Update@count& (0+255),w,b
  4370  003BD6  51DE               	movf	(TCP_Update@count+1)& (0+255),w,b
  4371  003BD8  0A80               	xorlw	128
  4372  003BDA  6FD7               	movwf	(??_TCP_Update+2)& (0+255),b
  4373  003BDC  51D6               	movf	(??_TCP_Update+1)& (0+255),w,b
  4374  003BDE  0A80               	xorlw	128
  4375  003BE0  59D7               	subwfb	(??_TCP_Update+2)& (0+255),w,b
  4376  003BE2  E201 D704          	bnc	l9526
  4377                           
  4378                           ; BSR set to: 0
  4379  003BE6  0012               	return		;funcret
  4380  003BE8                     __end_of_TCP_Update:
  4381                           	opt stack 0
  4382  003BE8                     PL52:
  4383                           	opt stack 17
  4384  003BE8  25DF               	addwf	TCP_Update@tcbPtr& (0+255),w,b
  4385  003BEA  6FD5               	movwf	??_TCP_Update& (0+255),b
  4386  003BEC  0E00               	movlw	0
  4387  003BEE  21E0               	addwfc	(TCP_Update@tcbPtr+1)& (0+255),w,b
  4388  003BF0  6FD6               	movwf	(??_TCP_Update+1)& (0+255),b
  4389  003BF2  C0D5  FFF6         	movff	??_TCP_Update,tblptrl
  4390  003BF6  C0D6  FFF7         	movff	??_TCP_Update+1,tblptrh
  4391  003BFA  0E00               	movlw	low (__smallconst shr (0+16))
  4392  003BFC  6EF8               	movwf	tblptru,c
  4393  003BFE  0E0F               	movlw	(high __ramtop+-1)
  4394  003C00  0012               	return	
  4395  003C02                     __end_ofPL52:
  4396                           	opt stack 0
  4397  003C02                     PL204:
  4398                           	opt stack 17
  4399  003C02  0009               	tblrd		*+
  4400  003C04  CFF5 F0D7          	movff	tablat,??_TCP_Update+2
  4401  003C08  0009               	tblrd		*+
  4402  003C0A  CFF5 F0D8          	movff	tablat,??_TCP_Update+3
  4403  003C0E  0012               	return	
  4404  003C10                     __end_ofPL204:
  4405                           	opt stack 0
  4406  003C10                     PL296:
  4407                           	opt stack 17
  4408  003C10  CFEE F0D7          	movff	postinc0,??_TCP_Update+2
  4409  003C14  CFEE F0D8          	movff	postinc0,??_TCP_Update+3
  4410  003C18  0012               	return	
  4411  003C1A                     __end_ofPL296:
  4412                           	opt stack 0
  4413                           tosu	equ	0xFFF
  4414                           tosh	equ	0xFFE
  4415                           tosl	equ	0xFFD
  4416                           pclath	equ	0xFFA
  4417                           tblptru	equ	0xFF8
  4418                           tblptrh	equ	0xFF7
  4419                           tblptrl	equ	0xFF6
  4420                           tablat	equ	0xFF5
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           indf0	equ	0xFEF
  4425                           postinc0	equ	0xFEE
  4426                           fsr0h	equ	0xFEA
  4427                           fsr0l	equ	0xFE9
  4428                           wreg	equ	0xFE8
  4429                           postinc1	equ	0xFE6
  4430                           plusw1	equ	0xFE3
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           bsr	equ	0xFE0
  4434                           indf2	equ	0xFDF
  4435                           postinc2	equ	0xFDE
  4436                           postdec2	equ	0xFDD
  4437                           plusw2	equ	0xFDB
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _Network_Read *****************
  4443 ;; Defined at:
  4444 ;;		line 105 in file "../../TCPIP Library/source/network.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;  debug_str      80   28[BANK1 ] unsigned char [80]
  4449 ;;  header         14  108[BANK1 ] struct .
  4450 ;; Return value:  Size  Location     Type
  4451 ;;		None               void
  4452 ;; Registers used:
  4453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/1
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0      94       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       4      94       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:       98 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:   14
  4466 ;; This function calls:
  4467 ;;		_ARPV4_Packet
  4468 ;;		_ETH_Flush
  4469 ;;		_ETH_NextPacketUpdate
  4470 ;;		_ETH_ReadBlock
  4471 ;;		_IPV4_Packet
  4472 ;;		_sprintf
  4473 ;; This function is called by:
  4474 ;;		_Network_Manage
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text22
  4479  004DCC                     __ptext22:
  4480                           	opt stack 0
  4481  004DCC                     _Network_Read:
  4482                           	opt stack 15
  4483                           
  4484                           ;network.c: 107: ethernetFrame_t header;
  4485                           ;network.c: 108: char debug_str[80];
  4486                           ;network.c: 110: if(ethData.pktReady)
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;incstack = 0
  4490  004DCC  0101               	movlb	1	; () banked
  4491  004DCE  A3B5               	btfss	_ethData& (0+255),1,b	;volatile
  4492  004DD0  0012               	return	
  4493                           
  4494                           ; BSR set to: 1
  4495                           ;network.c: 111: {
  4496                           ;network.c: 112: ETH_NextPacketUpdate();
  4497  004DD2  ECBE  F029         	call	_ETH_NextPacketUpdate	;wreg free
  4498                           
  4499                           ; BSR set to: 2
  4500                           ;network.c: 113: ETH_ReadBlock((char *)&header, sizeof(header));
  4501  004DD6  0E6C               	movlw	low Network_Read@header
  4502  004DD8  6E03               	movwf	ETH_ReadBlock@buffer,c
  4503  004DDA  0E01               	movlw	high Network_Read@header
  4504  004DDC  6E04               	movwf	ETH_ReadBlock@buffer+1,c
  4505  004DDE  6A06               	clrf	ETH_ReadBlock@length+1,c
  4506  004DE0  0E0E               	movlw	14
  4507  004DE2  6E05               	movwf	ETH_ReadBlock@length,c
  4508  004DE4  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
  4509                           
  4510                           ;network.c: 114: header.id.type = ((((uint16_t)header.id.type & (uint16_t)0xFF00) >> 8) 
      +                          | (((uint16_t)header.id.type & (uint16_t)0x00FF) << 8));
  4511  004DE8  0101               	movlb	1	; () banked
  4512  004DEA  5178               	movf	(Network_Read@header+12)& (0+255),w,b
  4513  004DEC  0100               	movlb	0	; () banked
  4514  004DEE  6FFD               	movwf	(??_Network_Read+1)& (0+255),b
  4515  004DF0  6BFC               	clrf	??_Network_Read& (0+255),b
  4516  004DF2  EE21  F078         	lfsr	2,Network_Read@header+12
  4517  004DF6  CFDE F0FE          	movff	postinc2,??_Network_Read+2
  4518  004DFA  CFDD F0FF          	movff	postdec2,??_Network_Read+3
  4519  004DFE  C0FF  F0FE         	movff	??_Network_Read+3,??_Network_Read+2
  4520  004E02  6BFF               	clrf	(??_Network_Read+3)& (0+255),b
  4521  004E04  6BFF               	clrf	(??_Network_Read+3)& (0+255),b
  4522  004E06  51FC               	movf	??_Network_Read& (0+255),w,b
  4523  004E08  11FE               	iorwf	(??_Network_Read+2)& (0+255),w,b
  4524  004E0A  0101               	movlb	1	; () banked
  4525  004E0C  6F78               	movwf	(Network_Read@header+12)& (0+255),b
  4526  004E0E  0100               	movlb	0	; () banked
  4527  004E10  51FD               	movf	(??_Network_Read+1)& (0+255),w,b
  4528  004E12  11FF               	iorwf	(??_Network_Read+3)& (0+255),w,b
  4529  004E14  0101               	movlb	1	; () banked
  4530  004E16  6F79               	movwf	(Network_Read@header+13)& (0+255),b
  4531                           
  4532                           ;network.c: 115: switch (header.id.type)
  4533  004E18  D01A               	goto	l9494
  4534  004E1A                     l9486:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;network.c: 121: ;
  4538                           ;network.c: 122: ARPV4_Packet();
  4539  004E1A  EC4A  F018         	call	_ARPV4_Packet	;wreg free
  4540                           
  4541                           ;network.c: 123: break;
  4542  004E1E  EF73  F02B         	goto	_ETH_Flush
  4543  004E22                     l9488:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;network.c: 125: ;
  4547                           ;network.c: 126: IPV4_Packet();
  4548  004E22  ECE9  F019         	call	_IPV4_Packet	;wreg free
  4549                           
  4550                           ;network.c: 127: break;
  4551  004E26  EF73  F02B         	goto	_ETH_Flush
  4552  004E2A                     l9490:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;network.c: 132: sprintf(debug_str,"%x : %d",header.id.type,header.id.length);
  4556  004E2A  0E1C               	movlw	low Network_Read@debug_str
  4557  004E2C  6E1C               	movwf	sprintf@wh,c
  4558  004E2E  0E01               	movlw	high Network_Read@debug_str
  4559  004E30  6E1D               	movwf	sprintf@wh+1,c
  4560  004E32  0EA4               	movlw	low STR_1
  4561  004E34  6E1E               	movwf	sprintf@f,c
  4562  004E36  C178  F01F         	movff	Network_Read@header+12,?_sprintf+3
  4563  004E3A  C179  F020         	movff	Network_Read@header+13,?_sprintf+4
  4564  004E3E  C178  F021         	movff	Network_Read@header+12,?_sprintf+5
  4565  004E42  C179  F022         	movff	Network_Read@header+13,?_sprintf+6
  4566  004E46  EC2B  F02D         	call	_sprintf	;wreg free
  4567                           
  4568                           ;network.c: 133: ;
  4569                           ;network.c: 134: break;
  4570  004E4A  EF73  F02B         	goto	_ETH_Flush
  4571  004E4E                     l9494:
  4572                           
  4573                           ; BSR set to: 1
  4574  004E4E  EE21  F078         	lfsr	2,Network_Read@header+12
  4575  004E52  CFDE F0FC          	movff	postinc2,??_Network_Read
  4576  004E56  CFDD F0FD          	movff	postdec2,??_Network_Read+1
  4577                           
  4578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4579                           ; Switch size 1, requested type "space"
  4580                           ; Number of cases is 3, Range of values is 8 to 134
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte           10     6 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  004E5A  0100               	movlb	0	; () banked
  4586  004E5C  51FD               	movf	(??_Network_Read+1)& (0+255),w,b
  4587  004E5E  0A08               	xorlw	8	; case 8
  4588  004E60  E005               	bz	l10102
  4589  004E62  0A89               	xorlw	137	; case 129
  4590  004E64  E008               	bz	l10104
  4591  004E66  0A07               	xorlw	7	; case 134
  4592  004E68  E008               	bz	l10106
  4593  004E6A  D7DF               	goto	l9490
  4594  004E6C                     l10102:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ; Switch size 1, requested type "space"
  4598                           ; Number of cases is 2, Range of values is 0 to 6
  4599                           ; switch strategies available:
  4600                           ; Name         Instructions Cycles
  4601                           ; simple_byte            7     4 (average)
  4602                           ;	Chosen strategy is simple_byte
  4603  004E6C  51FC               	movf	??_Network_Read& (0+255),w,b
  4604  004E6E  E0D9               	bz	l9488
  4605  004E70  0A06               	xorlw	6	; case 6
  4606  004E72  E0D3               	bz	l9486
  4607  004E74  D7DA               	goto	l9490
  4608  004E76                     l10104:
  4609                           
  4610                           ; BSR set to: 0
  4611                           ; Switch size 1, requested type "space"
  4612                           ; Number of cases is 1, Range of values is 0 to 0
  4613                           ; switch strategies available:
  4614                           ; Name         Instructions Cycles
  4615                           ; simple_byte            4     3 (average)
  4616                           ;	Chosen strategy is simple_byte
  4617  004E76  51FC               	movf	??_Network_Read& (0+255),w,b
  4618  004E78  D002               	goto	L1
  4619  004E7A                     l10106:
  4620                           
  4621                           ; BSR set to: 0
  4622                           ; Switch size 1, requested type "space"
  4623                           ; Number of cases is 1, Range of values is 221 to 221
  4624                           ; switch strategies available:
  4625                           ; Name         Instructions Cycles
  4626                           ; simple_byte            4     3 (average)
  4627                           ;	Chosen strategy is simple_byte
  4628  004E7A  51FC               	movf	??_Network_Read& (0+255),w,b
  4629  004E7C  0ADD               	xorlw	221	; case 221
  4630  004E7E                     L1:
  4631  004E7E  E1D5               	bnz	l9490
  4632                           
  4633                           ;network.c: 136: ETH_Flush();
  4634  004E80  EF73  F02B         	goto	_ETH_Flush	;wreg free
  4635  004E84                     __end_of_Network_Read:
  4636                           	opt stack 0
  4637                           tosu	equ	0xFFF
  4638                           tosh	equ	0xFFE
  4639                           tosl	equ	0xFFD
  4640                           pclath	equ	0xFFA
  4641                           tblptru	equ	0xFF8
  4642                           tblptrh	equ	0xFF7
  4643                           tblptrl	equ	0xFF6
  4644                           tablat	equ	0xFF5
  4645                           prodh	equ	0xFF4
  4646                           prodl	equ	0xFF3
  4647                           intcon	equ	0xFF2
  4648                           indf0	equ	0xFEF
  4649                           postinc0	equ	0xFEE
  4650                           fsr0h	equ	0xFEA
  4651                           fsr0l	equ	0xFE9
  4652                           wreg	equ	0xFE8
  4653                           postinc1	equ	0xFE6
  4654                           plusw1	equ	0xFE3
  4655                           fsr1h	equ	0xFE2
  4656                           fsr1l	equ	0xFE1
  4657                           bsr	equ	0xFE0
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _sprintf *****************
  4667 ;; Defined at:
  4668 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\sprintf.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  wh              2   27[COMRAM] PTR unsigned char 
  4671 ;;		 -> main@str(32), Network_Read@debug_str(80), 
  4672 ;;  f               1   29[COMRAM] PTR const unsigned char 
  4673 ;;		 -> STR_6(12), STR_1(8), 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  pb              5   39[COMRAM] struct __prbuf
  4676 ;;  ap              1   38[COMRAM] PTR void [1]
  4677 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  2   27[COMRAM] int 
  4680 ;; Registers used:
  4681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/1
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4687 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;Total ram usage:       17 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    5
  4694 ;; This function calls:
  4695 ;;		__doprnt
  4696 ;; This function is called by:
  4697 ;;		_Network_Read
  4698 ;;		_main
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text23
  4703  005A56                     __ptext23:
  4704                           	opt stack 0
  4705  005A56                     _sprintf:
  4706                           	opt stack 25
  4707                           
  4708                           ;incstack = 0
  4709  005A56  C01C  F028         	movff	sprintf@wh,sprintf@pb
  4710  005A5A  C01D  F029         	movff	sprintf@wh+1,sprintf@pb+1
  4711  005A5E  6A2A               	clrf	sprintf@pb+2,c
  4712  005A60  6A2B               	clrf	sprintf@pb+3,c
  4713  005A62  6A2C               	clrf	sprintf@pb+4,c
  4714  005A64  0E1F               	movlw	low (?_sprintf+3)
  4715  005A66  6E27               	movwf	sprintf@ap,c
  4716  005A68  C01E  F00E         	movff	sprintf@f,__doprnt@f
  4717  005A6C  0E27               	movlw	low sprintf@ap
  4718  005A6E  6E0F               	movwf	__doprnt@ap,c
  4719  005A70  0E28               	movlw	sprintf@pb& (0+255)
  4720  005A72  EC6E  F01B         	call	__doprnt
  4721  005A76  C028  FFD9         	movff	sprintf@pb,fsr2l
  4722  005A7A  C029  FFDA         	movff	sprintf@pb+1,fsr2h
  4723  005A7E  6ADF               	clrf	indf2,c
  4724  005A80  0C00               	retlw	0	;funcret
  4725  005A82                     __end_of_sprintf:
  4726                           	opt stack 0
  4727                           tosu	equ	0xFFF
  4728                           tosh	equ	0xFFE
  4729                           tosl	equ	0xFFD
  4730                           pclath	equ	0xFFA
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           indf0	equ	0xFEF
  4739                           postinc0	equ	0xFEE
  4740                           fsr0h	equ	0xFEA
  4741                           fsr0l	equ	0xFE9
  4742                           wreg	equ	0xFE8
  4743                           postinc1	equ	0xFE6
  4744                           plusw1	equ	0xFE3
  4745                           fsr1h	equ	0xFE2
  4746                           fsr1l	equ	0xFE1
  4747                           bsr	equ	0xFE0
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function __doprnt *****************
  4757 ;; Defined at:
  4758 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  pb              1    wreg     PTR struct __prbuf
  4761 ;;		 -> sprintf@pb(5), printf@pb(5), 
  4762 ;;  f               1   13[COMRAM] PTR const unsigned char 
  4763 ;;		 -> STR_6(12), STR_3(10), STR_2(28), STR_1(8), 
  4764 ;;  ap              1   14[COMRAM] PTR PTR void 
  4765 ;;		 -> sprintf@ap(1), printf@ap(1), 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  pb              1   26[COMRAM] PTR struct __prbuf
  4768 ;;		 -> sprintf@pb(5), printf@pb(5), 
  4769 ;;  idx             1   18[COMRAM] unsigned char 
  4770 ;;  tmpval          4    0        struct .
  4771 ;;  val             2   23[COMRAM] unsigned int 
  4772 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4773 ;;		 -> ?_sprintf(2), ?_printf(2), STR_7(7), main@str(32), 
  4774 ;;		 -> STR_5(13), STR_4(17), Network_Read@debug_str(80), NULL(0), 
  4775 ;;  len             2    0        unsigned int 
  4776 ;;  c               1   25[COMRAM] char 
  4777 ;;  flag            1   22[COMRAM] unsigned char 
  4778 ;;  prec            1   19[COMRAM] char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  2   13[COMRAM] int 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/2
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;Total ram usage:       14 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    4
  4795 ;; This function calls:
  4796 ;;		Absolute function
  4797 ;;		___lwdiv
  4798 ;;		___lwmod
  4799 ;;		_putch
  4800 ;; This function is called by:
  4801 ;;		_printf
  4802 ;;		_sprintf
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text24
  4807  0036DC                     __ptext24:
  4808                           	opt stack 0
  4809  0036DC                     __doprnt:
  4810                           	opt stack 25
  4811                           
  4812                           ;incstack = 0
  4813                           ;__doprnt@pb stored from wreg
  4814  0036DC  6E1B               	movwf	__doprnt@pb,c
  4815                           
  4816                           ;doprnt.c: 499: signed char c;
  4817                           ;doprnt.c: 506: signed char prec;
  4818                           ;doprnt.c: 508: unsigned char flag;
  4819                           ;doprnt.c: 523: union {
  4820                           ;doprnt.c: 524: unsigned long vd;
  4821                           ;doprnt.c: 525: double integ;
  4822                           ;doprnt.c: 526: } tmpval;
  4823                           ;doprnt.c: 528: unsigned int val;
  4824                           ;doprnt.c: 529: unsigned len;
  4825                           ;doprnt.c: 530: const char * cp;
  4826                           ;doprnt.c: 536: while(c = *f++) {
  4827  0036DE  D11E               	goto	l6564
  4828  0036E0                     l6450:
  4829                           
  4830                           ;doprnt.c: 538: if(c != '%')
  4831  0036E0  0E25               	movlw	37
  4832  0036E2  181A               	xorwf	__doprnt@c,w,c
  4833  0036E4  E018               	bz	l1752
  4834                           
  4835                           ;doprnt.c: 540: {
  4836                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4837  0036E6  D937               	call	PL106	;call to abstracted procedure
  4838  0036E8  50DE               	movf	postinc2,w,c
  4839  0036EA  10DE               	iorwf	postinc2,w,c
  4840  0036EC  10DE               	iorwf	postinc2,w,c
  4841  0036EE  E00E               	bz	l6456
  4842  0036F0  D932               	call	PL106	;call to abstracted procedure
  4843  0036F2  D801               	call	u8928
  4844  0036F4  D113               	goto	l6564
  4845  0036F6                     u8928:
  4846  0036F6  0005               	push	
  4847  0036F8  6EFA               	movwf	pclath,c
  4848  0036FA  50DE               	movf	postinc2,w,c
  4849  0036FC  6EFD               	movwf	tosl,c
  4850  0036FE  50DE               	movf	postinc2,w,c
  4851  003700  6EFE               	movwf	tosh,c
  4852  003702  50DE               	movf	postinc2,w,c
  4853  003704  6EFF               	movwf	tosu,c
  4854  003706  50FA               	movf	pclath,w,c
  4855  003708  501A               	movf	__doprnt@c,w,c
  4856  00370A  0012               	return		;indir
  4857  00370C                     l6456:
  4858  00370C  D918               	call	PL88	;call to abstracted procedure
  4859  00370E  C01A  FFDF         	movff	__doprnt@c,indf2
  4860  003712  D930               	call	PL150	;call to abstracted procedure
  4861  003714  D103               	goto	l6564
  4862  003716                     l1752:
  4863                           
  4864                           ;doprnt.c: 543: }
  4865                           ;doprnt.c: 548: flag = 0;
  4866  003716  6A17               	clrf	__doprnt@flag,c
  4867                           
  4868                           ;doprnt.c: 635: switch(c = *f++) {
  4869  003718  D050               	goto	l6486
  4870  00371A                     l6460:
  4871                           
  4872                           ;doprnt.c: 721: flag |= 0x80;
  4873  00371A  8E17               	bsf	__doprnt@flag,7,c
  4874                           
  4875                           ;doprnt.c: 723: break;
  4876  00371C  D05F               	goto	l6488
  4877  00371E                     l6462:
  4878                           
  4879                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4880  00371E  D921               	call	PL134	;call to abstracted procedure
  4881  003720  CFDE F015          	movff	postinc2,__doprnt@cp
  4882  003724  CFDE F016          	movff	postinc2,__doprnt@cp+1
  4883                           
  4884                           ;doprnt.c: 740: if(!cp)
  4885  003728  5015               	movf	__doprnt@cp,w,c
  4886  00372A  1016               	iorwf	__doprnt@cp+1,w,c
  4887  00372C  E135               	bnz	l6480
  4888                           
  4889                           ;doprnt.c: 741: cp = "(null)";
  4890  00372E  0EAC               	movlw	low STR_7
  4891  003730  6E15               	movwf	__doprnt@cp,c
  4892  003732  5015               	movf	__doprnt@cp,w,c
  4893  003734  A4D8               	btfss	status,2,c
  4894  003736  0E10               	movlw	high __smallconst
  4895  003738  6E16               	movwf	__doprnt@cp+1,c
  4896  00373A  D02E               	goto	l6480
  4897  00373C                     l6468:
  4898                           
  4899                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4900  00373C  D90C               	call	PL106	;call to abstracted procedure
  4901  00373E  50DE               	movf	postinc2,w,c
  4902  003740  10DE               	iorwf	postinc2,w,c
  4903  003742  10DE               	iorwf	postinc2,w,c
  4904  003744  E01A               	bz	l6474
  4905  003746  D907               	call	PL106	;call to abstracted procedure
  4906  003748  D801               	call	u8958
  4907  00374A  D014               	goto	l6472
  4908  00374C                     u8958:
  4909  00374C  0005               	push	
  4910  00374E  6EFA               	movwf	pclath,c
  4911  003750  50DE               	movf	postinc2,w,c
  4912  003752  6EFD               	movwf	tosl,c
  4913  003754  50DE               	movf	postinc2,w,c
  4914  003756  6EFE               	movwf	tosh,c
  4915  003758  50DE               	movf	postinc2,w,c
  4916  00375A  6EFF               	movwf	tosu,c
  4917  00375C  50FA               	movf	pclath,w,c
  4918  00375E  D919               	call	PL202	;call to abstracted procedure
  4919  003760  0E0F               	movlw	(high __ramtop+-1)
  4920  003762  64F7               	cpfsgt	tblptrh,c
  4921  003764  D003               	bra	u8967
  4922  003766  0008               	tblrd		*
  4923  003768  50F5               	movf	tablat,w,c
  4924  00376A  D003               	bra	u8960
  4925  00376C                     u8967:
  4926  00376C  EC3C  F011         	call	PL24	;call to abstracted procedure
  4927  003770  50EF               	movf	indf0,w,c
  4928  003772                     u8960:
  4929  003772  0012               	return		;indir
  4930  003774                     l6472:
  4931  003774  4A15               	infsnz	__doprnt@cp,f,c
  4932  003776  2A16               	incf	__doprnt@cp+1,f,c
  4933  003778  D00F               	goto	l6480
  4934  00377A                     l6474:
  4935  00377A  D90B               	call	PL202	;call to abstracted procedure
  4936  00377C  D8E0               	call	PL88	;call to abstracted procedure
  4937  00377E  0E0F               	movlw	(high __ramtop+-1)
  4938  003780  64F7               	cpfsgt	tblptrh,c
  4939  003782  D003               	bra	u8977
  4940  003784  0008               	tblrd		*
  4941  003786  50F5               	movf	tablat,w,c
  4942  003788  D003               	bra	u8970
  4943  00378A                     u8977:
  4944  00378A  EC3C  F011         	call	PL24	;call to abstracted procedure
  4945  00378E  50EF               	movf	indf0,w,c
  4946  003790                     u8970:
  4947  003790  6EDF               	movwf	indf2,c
  4948  003792  4A15               	infsnz	__doprnt@cp,f,c
  4949  003794  2A16               	incf	__doprnt@cp+1,f,c
  4950  003796  D8EE               	call	PL150	;call to abstracted procedure
  4951  003798                     l6480:
  4952  003798  D8FC               	call	PL202	;call to abstracted procedure
  4953  00379A  0E0F               	movlw	(high __ramtop+-1)
  4954  00379C  64F7               	cpfsgt	tblptrh,c
  4955  00379E  D003               	bra	u8987
  4956  0037A0  0008               	tblrd		*
  4957  0037A2  50F5               	movf	tablat,w,c
  4958  0037A4  D003               	bra	u8980
  4959  0037A6                     u8987:
  4960  0037A6  EC3C  F011         	call	PL24	;call to abstracted procedure
  4961  0037AA  50EF               	movf	indf0,w,c
  4962  0037AC                     u8980:
  4963  0037AC  0900               	iorlw	0
  4964  0037AE  E101 D0B5          	bz	l6564
  4965  0037B2  D7C4               	goto	l6468
  4966  0037B4                     l6482:
  4967                           
  4968                           ;doprnt.c: 818: flag |= 0xC0;
  4969  0037B4  0EC0               	movlw	192
  4970  0037B6  1217               	iorwf	__doprnt@flag,f,c
  4971                           
  4972                           ;doprnt.c: 819: break;
  4973  0037B8  D011               	goto	l6488
  4974  0037BA                     l6486:
  4975  0037BA  2A0E               	incf	__doprnt@f,f,c
  4976  0037BC  040E               	decf	__doprnt@f,w,c
  4977  0037BE  D8B7               	call	PL86	;call to abstracted procedure
  4978  0037C0  D8F6               	call	PL344	;call to abstracted procedure
  4979                           
  4980                           ; Switch size 1, requested type "space"
  4981                           ; Number of cases is 6, Range of values is 0 to 120
  4982                           ; switch strategies available:
  4983                           ; Name         Instructions Cycles
  4984                           ; simple_byte           19    10 (average)
  4985                           ;	Chosen strategy is simple_byte
  4986  0037C2  E101 D0B1          	bz	l1757
  4987  0037C6  0A64               	xorlw	100	; case 100
  4988  0037C8  E009               	bz	l6488
  4989  0037CA  0A0D               	xorlw	13	; case 105
  4990  0037CC  E007               	bz	l6488
  4991  0037CE  0A1A               	xorlw	26	; case 115
  4992  0037D0  E0A6               	bz	l6462
  4993  0037D2  0A06               	xorlw	6	; case 117
  4994  0037D4  E0EF               	bz	l6482
  4995  0037D6  0A0D               	xorlw	13	; case 120
  4996  0037D8  E0A0               	bz	l6460
  4997  0037DA  D0A0               	goto	l6564
  4998  0037DC                     l6488:
  4999                           
  5000                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5001  0037DC  C017  F010         	movff	__doprnt@flag,??__doprnt
  5002  0037E0  0EC0               	movlw	192
  5003  0037E2  1610               	andwf	??__doprnt,f,c
  5004  0037E4  E10B               	bnz	l6498
  5005                           
  5006                           ;doprnt.c: 1253: {
  5007                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5008  0037E6  D8BD               	call	PL134	;call to abstracted procedure
  5009  0037E8  D8EC               	call	PL366	;call to abstracted procedure
  5010                           
  5011                           ;doprnt.c: 1261: if((int)val < 0) {
  5012  0037EA  AE19               	btfss	__doprnt@val+1,7,c
  5013  0037EC  D02C               	goto	l6530
  5014                           
  5015                           ;doprnt.c: 1262: flag |= 0x03;
  5016  0037EE  0E03               	movlw	3
  5017  0037F0  1217               	iorwf	__doprnt@flag,f,c
  5018                           
  5019                           ;doprnt.c: 1263: val = -val;
  5020  0037F2  6C18               	negf	__doprnt@val,c
  5021  0037F4  1E19               	comf	__doprnt@val+1,f,c
  5022  0037F6  B0D8               	btfsc	status,0,c
  5023  0037F8  2A19               	incf	__doprnt@val+1,f,c
  5024  0037FA  D025               	goto	l6530
  5025  0037FC                     l6498:
  5026                           
  5027                           ;doprnt.c: 1268: else
  5028                           ;doprnt.c: 1273: {
  5029                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5030  0037FC  D8B2               	call	PL134	;call to abstracted procedure
  5031  0037FE  D8E1               	call	PL366	;call to abstracted procedure
  5032  003800  D022               	goto	l6530
  5033  003802                     l6500:
  5034                           
  5035                           ;doprnt.c: 1302: case 0xC0:
  5036                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5037  003802  0E01               	movlw	1
  5038  003804  6E1A               	movwf	__doprnt@c,c
  5039  003806                     l6506:
  5040                           
  5041                           ;doprnt.c: 1306: if(val < dpowers[c])
  5042  003806  501A               	movf	__doprnt@c,w,c
  5043  003808  D8C0               	call	PL188	;call to abstracted procedure
  5044  00380A  D891               	call	PL86	;call to abstracted procedure
  5045  00380C  0009               	tblrd		*+
  5046  00380E  50F5               	movf	tablat,w,c
  5047  003810  5C18               	subwf	__doprnt@val,w,c
  5048  003812  0009               	tblrd		*+
  5049  003814  50F5               	movf	tablat,w,c
  5050  003816  5819               	subwfb	__doprnt@val+1,w,c
  5051  003818  E31D               	bnc	l6532
  5052  00381A  2A1A               	incf	__doprnt@c,f,c
  5053  00381C  0E05               	movlw	5
  5054  00381E  181A               	xorwf	__doprnt@c,w,c
  5055  003820  E019               	bz	l6532
  5056  003822  D7F1               	goto	l6506
  5057  003824                     l6514:
  5058                           
  5059                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5060  003824  0E01               	movlw	1
  5061  003826  6E1A               	movwf	__doprnt@c,c
  5062  003828                     l6520:
  5063                           
  5064                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5065  003828  501A               	movf	__doprnt@c,w,c
  5066  00382A  D8AB               	call	PL186	;call to abstracted procedure
  5067  00382C  D880               	call	PL86	;call to abstracted procedure
  5068  00382E  0009               	tblrd		*+
  5069  003830  50F5               	movf	tablat,w,c
  5070  003832  5C18               	subwf	__doprnt@val,w,c
  5071  003834  0009               	tblrd		*+
  5072  003836  50F5               	movf	tablat,w,c
  5073  003838  5819               	subwfb	__doprnt@val+1,w,c
  5074  00383A  E30C               	bnc	l6532
  5075  00383C  2A1A               	incf	__doprnt@c,f,c
  5076  00383E  0E04               	movlw	4
  5077  003840  181A               	xorwf	__doprnt@c,w,c
  5078  003842  E008               	bz	l6532
  5079  003844  D7F1               	goto	l6520
  5080  003846                     l6530:
  5081  003846  5017               	movf	__doprnt@flag,w,c
  5082  003848  0BC0               	andlw	192
  5083                           
  5084                           ; Switch size 1, requested type "space"
  5085                           ; Number of cases is 3, Range of values is 0 to 192
  5086                           ; switch strategies available:
  5087                           ; Name         Instructions Cycles
  5088                           ; simple_byte           10     6 (average)
  5089                           ;	Chosen strategy is simple_byte
  5090  00384A  E0DB               	bz	l6500
  5091  00384C  0A80               	xorlw	128	; case 128
  5092  00384E  E0EA               	bz	l6514
  5093  003850  0A40               	xorlw	64	; case 192
  5094  003852  E0D7               	bz	l6500
  5095  003854                     l6532:
  5096                           
  5097                           ;doprnt.c: 1422: {
  5098                           ;doprnt.c: 1438: if(flag & 0x03)
  5099  003854  C017  F010         	movff	__doprnt@flag,??__doprnt
  5100  003858  0E03               	movlw	3
  5101  00385A  1610               	andwf	??__doprnt,f,c
  5102  00385C  E016               	bz	l6542
  5103                           
  5104                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5105  00385E  D87B               	call	PL106	;call to abstracted procedure
  5106  003860  50DE               	movf	postinc2,w,c
  5107  003862  10DE               	iorwf	postinc2,w,c
  5108  003864  10DE               	iorwf	postinc2,w,c
  5109  003866  E00D               	bz	l6538
  5110  003868  D876               	call	PL106	;call to abstracted procedure
  5111  00386A  D801               	call	u9088
  5112  00386C  D00E               	goto	l6542
  5113  00386E                     u9088:
  5114  00386E  0005               	push	
  5115  003870  6EFA               	movwf	pclath,c
  5116  003872  50DE               	movf	postinc2,w,c
  5117  003874  6EFD               	movwf	tosl,c
  5118  003876  50DE               	movf	postinc2,w,c
  5119  003878  6EFE               	movwf	tosh,c
  5120  00387A  50DE               	movf	postinc2,w,c
  5121  00387C  6EFF               	movwf	tosu,c
  5122  00387E  50FA               	movf	pclath,w,c
  5123  003880  0C2D               	retlw	45	;indir
  5124  003882                     l6538:
  5125  003882  D85D               	call	PL88	;call to abstracted procedure
  5126  003884  0E2D               	movlw	45
  5127  003886  6EDF               	movwf	indf2,c
  5128  003888  D875               	call	PL150	;call to abstracted procedure
  5129  00388A                     l6542:
  5130                           
  5131                           ;doprnt.c: 1469: }
  5132                           ;doprnt.c: 1472: prec = c;
  5133  00388A  C01A  F014         	movff	__doprnt@c,__doprnt@prec
  5134                           
  5135                           ;doprnt.c: 1474: while(prec--) {
  5136  00388E  D043               	goto	l6562
  5137  003890                     l6544:
  5138                           
  5139                           ;doprnt.c: 1486: case 0xC0:
  5140                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5141  003890  5014               	movf	__doprnt@prec,w,c
  5142  003892  D87B               	call	PL188	;call to abstracted procedure
  5143  003894  D84C               	call	PL86	;call to abstracted procedure
  5144  003896  D884               	call	PL272	;call to abstracted procedure
  5145  003898  D88F               	call	PL364	;call to abstracted procedure
  5146  00389A  EC99  F02B         	call	___lwdiv
  5147  00389E  C002  F009         	movff	?___lwdiv,___lwmod@dividend
  5148  0038A2  C003  F00A         	movff	?___lwdiv+1,___lwmod@dividend+1
  5149  0038A6  6A0C               	clrf	___lwmod@divisor+1,c
  5150  0038A8  0E0A               	movlw	10
  5151  0038AA  6E0B               	movwf	___lwmod@divisor,c
  5152  0038AC  EC06  F02C         	call	___lwmod	;wreg free
  5153  0038B0  5009               	movf	?___lwmod,w,c
  5154  0038B2  0F30               	addlw	48
  5155  0038B4  6E1A               	movwf	__doprnt@c,c
  5156                           
  5157                           ;doprnt.c: 1491: break;
  5158  0038B6  D018               	goto	l6554
  5159  0038B8                     l6546:
  5160                           
  5161                           ;doprnt.c: 1499: {
  5162                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5163  0038B8  D87F               	call	PL364	;call to abstracted procedure
  5164  0038BA  5014               	movf	__doprnt@prec,w,c
  5165  0038BC  D862               	call	PL186	;call to abstracted procedure
  5166  0038BE  D837               	call	PL86	;call to abstracted procedure
  5167  0038C0  D86F               	call	PL272	;call to abstracted procedure
  5168  0038C2  EC99  F02B         	call	___lwdiv	;wreg free
  5169  0038C6  5002               	movf	?___lwdiv,w,c
  5170  0038C8  0B0F               	andlw	15
  5171  0038CA  6E13               	movwf	__doprnt@idx,c
  5172                           
  5173                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5174  0038CC  5013               	movf	__doprnt@idx,w,c
  5175  0038CE  0F5F               	addlw	low STR_8
  5176  0038D0  D82E               	call	PL86	;call to abstracted procedure
  5177  0038D2  0008               	tblrd		*
  5178  0038D4  CFF5 F01A          	movff	tablat,__doprnt@c
  5179                           
  5180                           ;doprnt.c: 1508: }
  5181                           ;doprnt.c: 1510: break;
  5182  0038D8  D007               	goto	l6554
  5183  0038DA                     l6552:
  5184  0038DA  5017               	movf	__doprnt@flag,w,c
  5185  0038DC  0BC0               	andlw	192
  5186                           
  5187                           ; Switch size 1, requested type "space"
  5188                           ; Number of cases is 3, Range of values is 0 to 192
  5189                           ; switch strategies available:
  5190                           ; Name         Instructions Cycles
  5191                           ; simple_byte           10     6 (average)
  5192                           ;	Chosen strategy is simple_byte
  5193  0038DE  E0D8               	bz	l6544
  5194  0038E0  0A80               	xorlw	128	; case 128
  5195  0038E2  E0EA               	bz	l6546
  5196  0038E4  0A40               	xorlw	64	; case 192
  5197  0038E6  E0D4               	bz	l6544
  5198  0038E8                     l6554:
  5199                           
  5200                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5201  0038E8  D836               	call	PL106	;call to abstracted procedure
  5202  0038EA  50DE               	movf	postinc2,w,c
  5203  0038EC  10DE               	iorwf	postinc2,w,c
  5204  0038EE  10DE               	iorwf	postinc2,w,c
  5205  0038F0  E00E               	bz	l6558
  5206  0038F2  D831               	call	PL106	;call to abstracted procedure
  5207  0038F4  D801               	call	u9108
  5208  0038F6  D00F               	goto	l6562
  5209  0038F8                     u9108:
  5210  0038F8  0005               	push	
  5211  0038FA  6EFA               	movwf	pclath,c
  5212  0038FC  50DE               	movf	postinc2,w,c
  5213  0038FE  6EFD               	movwf	tosl,c
  5214  003900  50DE               	movf	postinc2,w,c
  5215  003902  6EFE               	movwf	tosh,c
  5216  003904  50DE               	movf	postinc2,w,c
  5217  003906  6EFF               	movwf	tosu,c
  5218  003908  50FA               	movf	pclath,w,c
  5219  00390A  501A               	movf	__doprnt@c,w,c
  5220  00390C  0012               	return		;indir
  5221  00390E                     l6558:
  5222  00390E  D817               	call	PL88	;call to abstracted procedure
  5223  003910  C01A  FFDF         	movff	__doprnt@c,indf2
  5224  003914  D82F               	call	PL150	;call to abstracted procedure
  5225  003916                     l6562:
  5226  003916  0614               	decf	__doprnt@prec,f,c
  5227  003918  2814               	incf	__doprnt@prec,w,c
  5228  00391A  E1DF               	bnz	l6552
  5229  00391C                     l6564:
  5230  00391C  2A0E               	incf	__doprnt@f,f,c
  5231  00391E  040E               	decf	__doprnt@f,w,c
  5232  003920  D806               	call	PL86	;call to abstracted procedure
  5233  003922  D845               	call	PL344	;call to abstracted procedure
  5234  003924  E001 D6DC          	bnz	l6450
  5235  003928                     l1757:
  5236                           
  5237                           ;doprnt.c: 1540: return 0;
  5238  003928  6A0E               	clrf	?__doprnt,c
  5239  00392A  6A0F               	clrf	?__doprnt+1,c
  5240  00392C  0012               	return		;funcret
  5241  00392E                     __end_of__doprnt:
  5242                           	opt stack 0
  5243  00392E                     PL86:
  5244                           	opt stack 25
  5245  00392E  6E10               	movwf	??__doprnt& (0+255),c
  5246  003930  C010  FFF6         	movff	??__doprnt,tblptrl
  5247  003934                     	if	1	;There is more than 1 active tblptr byte
  5248  003934  0E10               	movlw	high __smallconst
  5249  003936  6EF7               	movwf	tblptrh,c
  5250  003938                     	endif
  5251  003938                     	if	0	;tblptru may be non-zero
  5252  003938                     	endif
  5253  003938                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5254  003938  0E00               	movlw	low (__smallconst shr (0+16))
  5255  00393A  6EF8               	movwf	tblptru,c
  5256  00393C                     	endif
  5257  00393C  0012               	return	
  5258  00393E                     __end_ofPL86:
  5259                           	opt stack 0
  5260  00393E                     PL88:
  5261                           	opt stack 25
  5262  00393E  501B               	movf	__doprnt@pb,w,c
  5263  003940  6ED9               	movwf	fsr2l,c
  5264  003942  6ADA               	clrf	fsr2h,c
  5265  003944  CFDE F010          	movff	postinc2,??__doprnt
  5266  003948  CFDD F011          	movff	postdec2,??__doprnt+1
  5267  00394C  C010  FFD9         	movff	??__doprnt,fsr2l
  5268  003950  C011  FFDA         	movff	??__doprnt+1,fsr2h
  5269  003954  0012               	return	
  5270  003956                     __end_ofPL88:
  5271                           	opt stack 0
  5272  003956                     PL106:
  5273                           	opt stack 25
  5274  003956  501B               	movf	__doprnt@pb,w,c
  5275  003958  6ED9               	movwf	fsr2l,c
  5276  00395A  6ADA               	clrf	fsr2h,c
  5277  00395C  0E02               	movlw	2
  5278  00395E  26D9               	addwf	fsr2l,f,c
  5279  003960  0C02               	retlw	2
  5280  003962                     __end_ofPL106:
  5281                           	opt stack 0
  5282  003962                     PL134:
  5283                           	opt stack 25
  5284  003962  500F               	movf	__doprnt@ap,w,c
  5285  003964  6ED9               	movwf	fsr2l,c
  5286  003966  6ADA               	clrf	fsr2h,c
  5287  003968  0E02               	movlw	2
  5288  00396A  26DF               	addwf	indf2,f,c
  5289  00396C  5CDF               	subwf	indf2,w,c
  5290  00396E  6ED9               	movwf	fsr2l,c
  5291  003970  6ADA               	clrf	fsr2h,c
  5292  003972  0012               	return	
  5293  003974                     __end_ofPL134:
  5294                           	opt stack 0
  5295  003974                     PL150:
  5296                           	opt stack 25
  5297  003974  501B               	movf	__doprnt@pb,w,c
  5298  003976  6ED9               	movwf	fsr2l,c
  5299  003978  6ADA               	clrf	fsr2h,c
  5300  00397A  2ADE               	incf	postinc2,f,c
  5301  00397C  0E00               	movlw	0
  5302  00397E  22DD               	addwfc	postdec2,f,c
  5303  003980  0C00               	retlw	0
  5304  003982                     __end_ofPL150:
  5305                           	opt stack 0
  5306  003982                     PL186:
  5307                           	opt stack 25
  5308  003982  0D02               	mullw	2
  5309  003984  50F3               	movf	prodl,w,c
  5310  003986  0F0B               	addlw	low _hexpowers
  5311  003988  0012               	return	
  5312  00398A                     __end_ofPL186:
  5313                           	opt stack 0
  5314  00398A                     PL188:
  5315                           	opt stack 25
  5316  00398A  0D02               	mullw	2
  5317  00398C  50F3               	movf	prodl,w,c
  5318  00398E  0F01               	addlw	low _dpowers
  5319  003990  0012               	return	
  5320  003992                     __end_ofPL188:
  5321                           	opt stack 0
  5322  003992                     PL202:
  5323                           	opt stack 25
  5324  003992  C015  FFF6         	movff	__doprnt@cp,tblptrl
  5325  003996  C016  FFF7         	movff	__doprnt@cp+1,tblptrh
  5326  00399A  0E00               	movlw	low (__smallconst shr (0+16))
  5327  00399C  6EF8               	movwf	tblptru,c
  5328  00399E  0012               	return	
  5329  0039A0                     __end_ofPL202:
  5330                           	opt stack 0
  5331  0039A0                     PL272:
  5332                           	opt stack 25
  5333  0039A0  0009               	tblrd		*+
  5334  0039A2  CFF5 F004          	movff	tablat,___lwdiv@divisor
  5335  0039A6  000A               	tblrd		*-
  5336  0039A8  CFF5 F005          	movff	tablat,___lwdiv@divisor+1
  5337  0039AC  0012               	return	
  5338  0039AE                     __end_ofPL272:
  5339                           	opt stack 0
  5340  0039AE                     PL344:
  5341                           	opt stack 25
  5342  0039AE  0008               	tblrd		*
  5343  0039B0  CFF5 F01A          	movff	tablat,__doprnt@c
  5344  0039B4  501A               	movf	__doprnt@c,w,c
  5345  0039B6  0012               	return	
  5346  0039B8                     __end_ofPL344:
  5347                           	opt stack 0
  5348  0039B8                     PL364:
  5349                           	opt stack 25
  5350  0039B8  C018  F002         	movff	__doprnt@val,___lwdiv@dividend
  5351  0039BC  C019  F003         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5352  0039C0  0012               	return	
  5353  0039C2                     __end_ofPL364:
  5354                           	opt stack 0
  5355  0039C2                     PL366:
  5356                           	opt stack 25
  5357  0039C2  CFDE F018          	movff	postinc2,__doprnt@val
  5358  0039C6  CFDE F019          	movff	postinc2,__doprnt@val+1
  5359  0039CA  0012               	return	
  5360  0039CC                     __end_ofPL366:
  5361                           	opt stack 0
  5362                           tosu	equ	0xFFF
  5363                           tosh	equ	0xFFE
  5364                           tosl	equ	0xFFD
  5365                           pclath	equ	0xFFA
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           intcon	equ	0xFF2
  5373                           indf0	equ	0xFEF
  5374                           postinc0	equ	0xFEE
  5375                           fsr0h	equ	0xFEA
  5376                           fsr0l	equ	0xFE9
  5377                           wreg	equ	0xFE8
  5378                           postinc1	equ	0xFE6
  5379                           plusw1	equ	0xFE3
  5380                           fsr1h	equ	0xFE2
  5381                           fsr1l	equ	0xFE1
  5382                           bsr	equ	0xFE0
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           plusw2	equ	0xFDB
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function _putch *****************
  5392 ;; Defined at:
  5393 ;;		line 77 in file "../board_support_package/picdem2_net/uart.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  data            1    wreg     unsigned char 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  data            1    1[COMRAM] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;		None               void
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/2
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;Total ram usage:        1 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    3
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_printf
  5418 ;;		__doprnt
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text25
  5423  005D38                     __ptext25:
  5424                           	opt stack 0
  5425  005D38                     _putch:
  5426                           	opt stack 25
  5427                           
  5428                           ;incstack = 0
  5429                           ;putch@data stored from wreg
  5430  005D38  6E02               	movwf	putch@data,c
  5431                           
  5432                           ;uart.c: 79: if(data == '\n')
  5433  005D3A  0E0A               	movlw	10
  5434  005D3C  1802               	xorwf	putch@data,w,c
  5435  005D3E  E104               	bnz	l350
  5436  005D40                     l347:
  5437  005D40  A89E               	btfss	3998,4,c	;volatile
  5438  005D42  D7FE               	goto	l347
  5439                           
  5440                           ;uart.c: 83: TXREG1 = '\r';
  5441  005D44  0E0D               	movlw	13
  5442  005D46  6EAD               	movwf	4013,c	;volatile
  5443  005D48                     l350:
  5444  005D48  A89E               	btfss	3998,4,c	;volatile
  5445  005D4A  D7FE               	goto	l350
  5446                           
  5447                           ;uart.c: 87: TXREG1 = data;
  5448  005D4C  C002  FFAD         	movff	putch@data,4013	;volatile
  5449  005D50  0012               	return		;funcret
  5450  005D52                     __end_of_putch:
  5451                           	opt stack 0
  5452                           tosu	equ	0xFFF
  5453                           tosh	equ	0xFFE
  5454                           tosl	equ	0xFFD
  5455                           pclath	equ	0xFFA
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           indf0	equ	0xFEF
  5464                           postinc0	equ	0xFEE
  5465                           fsr0h	equ	0xFEA
  5466                           fsr0l	equ	0xFE9
  5467                           wreg	equ	0xFE8
  5468                           postinc1	equ	0xFE6
  5469                           plusw1	equ	0xFE3
  5470                           fsr1h	equ	0xFE2
  5471                           fsr1l	equ	0xFE1
  5472                           bsr	equ	0xFE0
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function ___lwmod *****************
  5482 ;; Defined at:
  5483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  dividend        2    8[COMRAM] unsigned int 
  5486 ;;  divisor         2   10[COMRAM] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  counter         1   12[COMRAM] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2    8[COMRAM] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/2
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;Total ram usage:        5 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    3
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		__doprnt
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text26
  5513  00580C                     __ptext26:
  5514                           	opt stack 0
  5515  00580C                     ___lwmod:
  5516                           	opt stack 25
  5517                           
  5518                           ;incstack = 0
  5519  00580C  500B               	movf	___lwmod@divisor,w,c
  5520  00580E  100C               	iorwf	___lwmod@divisor+1,w,c
  5521  005810  E017               	bz	l2212
  5522  005812  0E01               	movlw	1
  5523  005814  6E0D               	movwf	___lwmod@counter,c
  5524  005816  D004               	goto	l6246
  5525  005818                     l6244:
  5526  005818  90D8               	bcf	status,0,c
  5527  00581A  360B               	rlcf	___lwmod@divisor,f,c
  5528  00581C  360C               	rlcf	___lwmod@divisor+1,f,c
  5529  00581E  2A0D               	incf	___lwmod@counter,f,c
  5530  005820                     l6246:
  5531  005820  AE0C               	btfss	___lwmod@divisor+1,7,c
  5532  005822  D7FA               	goto	l6244
  5533  005824                     l6248:
  5534  005824  500B               	movf	___lwmod@divisor,w,c
  5535  005826  5C09               	subwf	___lwmod@dividend,w,c
  5536  005828  500C               	movf	___lwmod@divisor+1,w,c
  5537  00582A  580A               	subwfb	___lwmod@dividend+1,w,c
  5538  00582C  E304               	bnc	l6252
  5539  00582E  500B               	movf	___lwmod@divisor,w,c
  5540  005830  5E09               	subwf	___lwmod@dividend,f,c
  5541  005832  500C               	movf	___lwmod@divisor+1,w,c
  5542  005834  5A0A               	subwfb	___lwmod@dividend+1,f,c
  5543  005836                     l6252:
  5544  005836  90D8               	bcf	status,0,c
  5545  005838  320C               	rrcf	___lwmod@divisor+1,f,c
  5546  00583A  320B               	rrcf	___lwmod@divisor,f,c
  5547  00583C  2E0D               	decfsz	___lwmod@counter,f,c
  5548  00583E  D7F2               	goto	l6248
  5549  005840                     l2212:
  5550  005840  C009  F009         	movff	___lwmod@dividend,?___lwmod
  5551  005844  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  5552  005848  0012               	return		;funcret
  5553  00584A                     __end_of___lwmod:
  5554                           	opt stack 0
  5555                           tosu	equ	0xFFF
  5556                           tosh	equ	0xFFE
  5557                           tosl	equ	0xFFD
  5558                           pclath	equ	0xFFA
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           indf0	equ	0xFEF
  5567                           postinc0	equ	0xFEE
  5568                           fsr0h	equ	0xFEA
  5569                           fsr0l	equ	0xFE9
  5570                           wreg	equ	0xFE8
  5571                           postinc1	equ	0xFE6
  5572                           plusw1	equ	0xFE3
  5573                           fsr1h	equ	0xFE2
  5574                           fsr1l	equ	0xFE1
  5575                           bsr	equ	0xFE0
  5576                           indf2	equ	0xFDF
  5577                           postinc2	equ	0xFDE
  5578                           postdec2	equ	0xFDD
  5579                           plusw2	equ	0xFDB
  5580                           fsr2h	equ	0xFDA
  5581                           fsr2l	equ	0xFD9
  5582                           status	equ	0xFD8
  5583                           
  5584 ;; *************** function ___lwdiv *****************
  5585 ;; Defined at:
  5586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  dividend        2    1[COMRAM] unsigned int 
  5589 ;;  divisor         2    3[COMRAM] unsigned int 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;  quotient        2    5[COMRAM] unsigned int 
  5592 ;;  counter         1    7[COMRAM] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  2    1[COMRAM] unsigned int 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/2
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;Total ram usage:        7 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    3
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		__doprnt
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text27
  5617  005732                     __ptext27:
  5618                           	opt stack 0
  5619  005732                     ___lwdiv:
  5620                           	opt stack 25
  5621                           
  5622                           ;incstack = 0
  5623  005732  6A06               	clrf	___lwdiv@quotient,c
  5624  005734  6A07               	clrf	___lwdiv@quotient+1,c
  5625  005736  5004               	movf	___lwdiv@divisor,w,c
  5626  005738  1005               	iorwf	___lwdiv@divisor+1,w,c
  5627  00573A  E01B               	bz	l2202
  5628  00573C  0E01               	movlw	1
  5629  00573E  6E08               	movwf	___lwdiv@counter,c
  5630  005740  D004               	goto	l6226
  5631  005742                     l6224:
  5632  005742  90D8               	bcf	status,0,c
  5633  005744  3604               	rlcf	___lwdiv@divisor,f,c
  5634  005746  3605               	rlcf	___lwdiv@divisor+1,f,c
  5635  005748  2A08               	incf	___lwdiv@counter,f,c
  5636  00574A                     l6226:
  5637  00574A  AE05               	btfss	___lwdiv@divisor+1,7,c
  5638  00574C  D7FA               	goto	l6224
  5639  00574E                     l6228:
  5640  00574E  90D8               	bcf	status,0,c
  5641  005750  3606               	rlcf	___lwdiv@quotient,f,c
  5642  005752  3607               	rlcf	___lwdiv@quotient+1,f,c
  5643  005754  5004               	movf	___lwdiv@divisor,w,c
  5644  005756  5C02               	subwf	___lwdiv@dividend,w,c
  5645  005758  5005               	movf	___lwdiv@divisor+1,w,c
  5646  00575A  5803               	subwfb	___lwdiv@dividend+1,w,c
  5647  00575C  E305               	bnc	l6236
  5648  00575E  5004               	movf	___lwdiv@divisor,w,c
  5649  005760  5E02               	subwf	___lwdiv@dividend,f,c
  5650  005762  5005               	movf	___lwdiv@divisor+1,w,c
  5651  005764  5A03               	subwfb	___lwdiv@dividend+1,f,c
  5652  005766  8006               	bsf	___lwdiv@quotient,0,c
  5653  005768                     l6236:
  5654  005768  90D8               	bcf	status,0,c
  5655  00576A  3205               	rrcf	___lwdiv@divisor+1,f,c
  5656  00576C  3204               	rrcf	___lwdiv@divisor,f,c
  5657  00576E  2E08               	decfsz	___lwdiv@counter,f,c
  5658  005770  D7EE               	goto	l6228
  5659  005772                     l2202:
  5660  005772  C006  F002         	movff	___lwdiv@quotient,?___lwdiv
  5661  005776  C007  F003         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5662  00577A  0012               	return		;funcret
  5663  00577C                     __end_of___lwdiv:
  5664                           	opt stack 0
  5665                           tosu	equ	0xFFF
  5666                           tosh	equ	0xFFE
  5667                           tosl	equ	0xFFD
  5668                           pclath	equ	0xFFA
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           indf0	equ	0xFEF
  5677                           postinc0	equ	0xFEE
  5678                           fsr0h	equ	0xFEA
  5679                           fsr0l	equ	0xFE9
  5680                           wreg	equ	0xFE8
  5681                           postinc1	equ	0xFE6
  5682                           plusw1	equ	0xFE3
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           bsr	equ	0xFE0
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           plusw2	equ	0xFDB
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694 ;; *************** function _IPV4_Packet *****************
  5695 ;; Defined at:
  5696 ;;		line 115 in file "../../TCPIP Library/source/ipv4.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  msg            40    0        unsigned char [40]
  5701 ;;  cksm            2  154[BANK0 ] unsigned int 
  5702 ;;  length          2  152[BANK0 ] unsigned int 
  5703 ;;  hdrLen          1  151[BANK0 ] unsigned char 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      enum E6944
  5706 ;; Registers used:
  5707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         0       5      28       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:       33 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:   13
  5720 ;; This function calls:
  5721 ;;		_ETH_Dump
  5722 ;;		_ETH_ReadBlock
  5723 ;;		_ETH_RxComputeChecksum
  5724 ;;		_ICMP_Receive
  5725 ;;		_IPV4_PseudoHeaderChecksum
  5726 ;;		_TCP_Recv
  5727 ;;		_UDP_Receive
  5728 ;; This function is called by:
  5729 ;;		_Network_Read
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text28
  5734  0033D2                     __ptext28:
  5735                           	opt stack 0
  5736  0033D2                     _IPV4_Packet:
  5737                           	opt stack 15
  5738                           
  5739                           ;ipv4.c: 118: uint16_t length = 0;
  5740                           
  5741                           ;incstack = 0
  5742  0033D2  0100               	movlb	0	; () banked
  5743  0033D4  6BF8               	clrf	IPV4_Packet@length& (0+255),b
  5744  0033D6  6BF9               	clrf	(IPV4_Packet@length+1)& (0+255),b
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;ipv4.c: 119: char msg[40];
  5748                           ;ipv4.c: 120: uint8_t hdrLen;
  5749                           ;ipv4.c: 123: cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
  5750  0033D8  6A13               	clrf	ETH_RxComputeChecksum@len+1,c
  5751  0033DA  0E14               	movlw	20
  5752  0033DC  6E12               	movwf	ETH_RxComputeChecksum@len,c
  5753  0033DE  6A15               	clrf	ETH_RxComputeChecksum@seed+1,c
  5754  0033E0  6A14               	clrf	ETH_RxComputeChecksum@seed,c
  5755  0033E2  EC5B  F02A         	call	_ETH_RxComputeChecksum
  5756                           
  5757                           ;ipv4.c: 124: if (cksm != 0)
  5758  0033E6  D94E               	call	PL178	;call to abstracted procedure
  5759  0033E8  E001               	bz	l9320
  5760  0033EA  0012               	return	
  5761  0033EC                     l9320:
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;ipv4.c: 128: }
  5765                           ;ipv4.c: 130: ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
  5766  0033EC  0E94               	movlw	low _ipv4Header
  5767  0033EE  6E03               	movwf	ETH_ReadBlock@buffer,c
  5768  0033F0  0E02               	movlw	high _ipv4Header
  5769  0033F2  EC31  F018         	call	PL330	;call to abstracted procedure
  5770  0033F6  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
  5771                           
  5772                           ;ipv4.c: 131: if(ipv4Header.version != 4)
  5773  0033FA  0102               	movlb	2	; () banked
  5774  0033FC  3994               	swapf	_ipv4Header& (0+255),w,b
  5775  0033FE  0B0F               	andlw	15
  5776  003400  0A04               	xorlw	4
  5777  003402  E001               	bz	l9326
  5778  003404  0012               	return	
  5779  003406                     l9326:
  5780                           
  5781                           ; BSR set to: 2
  5782                           ;ipv4.c: 134: }
  5783                           ;ipv4.c: 136: ipv4Header.dstIpAddress = ((((uint32_t)ipv4Header.dstIpAddress&(uint32_t)0
      +                          xff000000) >> 24) | (((uint32_t)ipv4Header.dstIpAddress&(uint32_t)0x00ff0000) >> 8) | ((
      +                          (uint32_t)ipv4Header.dstIpAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Header.d
  5784  003406  51A4               	movf	(_ipv4Header+16)& (0+255),w,b
  5785  003408  D945               	call	PL198	;call to abstracted procedure
  5786  00340A  EE22  F0A4         	lfsr	2,_ipv4Header+16
  5787  00340E  D903               	call	PL118	;call to abstracted procedure
  5788  003410  C2A4  F108         	movff	_ipv4Header+16,??_IPV4_Packet+8
  5789  003414  C2A5  F109         	movff	_ipv4Header+17,??_IPV4_Packet+9
  5790  003418  C2A6  F10A         	movff	_ipv4Header+18,??_IPV4_Packet+10
  5791  00341C  C2A7  F10B         	movff	_ipv4Header+19,??_IPV4_Packet+11
  5792  003420  D917               	call	PL148	;call to abstracted procedure
  5793  003422  EE22  F0A4         	lfsr	2,_ipv4Header+16
  5794  003426  D8C7               	call	PL62	;call to abstracted procedure
  5795  003428  6FA4               	movwf	(_ipv4Header+16)& (0+255),b
  5796  00342A  D94E               	call	PL370	;call to abstracted procedure
  5797  00342C  6FA5               	movwf	(_ipv4Header+17)& (0+255),b
  5798  00342E  D93D               	call	PL324	;call to abstracted procedure
  5799  003430  6FA6               	movwf	(_ipv4Header+18)& (0+255),b
  5800  003432  D945               	call	PL368	;call to abstracted procedure
  5801  003434  6FA7               	movwf	(_ipv4Header+19)& (0+255),b
  5802                           
  5803                           ;ipv4.c: 137: ipv4Header.srcIpAddress = ((((uint32_t)ipv4Header.srcIpAddress&(uint32_t)0
      +                          xff000000) >> 24) | (((uint32_t)ipv4Header.srcIpAddress&(uint32_t)0x00ff0000) >> 8) | ((
      +                          (uint32_t)ipv4Header.srcIpAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)ipv4Header.s
  5804  003436  51A0               	movf	(_ipv4Header+12)& (0+255),w,b
  5805  003438  D92D               	call	PL198	;call to abstracted procedure
  5806  00343A  EE22  F0A0         	lfsr	2,_ipv4Header+12
  5807  00343E  D8EB               	call	PL118	;call to abstracted procedure
  5808  003440  C2A0  F108         	movff	_ipv4Header+12,??_IPV4_Packet+8
  5809  003444  C2A1  F109         	movff	_ipv4Header+13,??_IPV4_Packet+9
  5810  003448  C2A2  F10A         	movff	_ipv4Header+14,??_IPV4_Packet+10
  5811  00344C  C2A3  F10B         	movff	_ipv4Header+15,??_IPV4_Packet+11
  5812  003450  D8FF               	call	PL148	;call to abstracted procedure
  5813  003452  EE22  F0A0         	lfsr	2,_ipv4Header+12
  5814  003456  D8AF               	call	PL62	;call to abstracted procedure
  5815  003458  6FA0               	movwf	(_ipv4Header+12)& (0+255),b
  5816  00345A  D936               	call	PL370	;call to abstracted procedure
  5817  00345C  6FA1               	movwf	(_ipv4Header+13)& (0+255),b
  5818  00345E  D925               	call	PL324	;call to abstracted procedure
  5819  003460  6FA2               	movwf	(_ipv4Header+14)& (0+255),b
  5820  003462  D92D               	call	PL368	;call to abstracted procedure
  5821  003464  6FA3               	movwf	(_ipv4Header+15)& (0+255),b
  5822                           
  5823                           ; BSR set to: 2
  5824                           ;ipv4.c: 139: if((ipv4Header.dstIpAddress == ipv4Address) ||( ipv4Header.dstIpAddress ==
      +                           0xFFFFFFFF))
  5825  003466  0101               	movlb	1	; () banked
  5826  003468  51C4               	movf	_ipv4Address& (0+255),w,b
  5827  00346A  0102               	movlb	2	; () banked
  5828  00346C  19A4               	xorwf	(_ipv4Header+16)& (0+255),w,b
  5829  00346E  E10F               	bnz	u14400
  5830  003470  0101               	movlb	1	; () banked
  5831  003472  51C5               	movf	(_ipv4Address+1)& (0+255),w,b
  5832  003474  0102               	movlb	2	; () banked
  5833  003476  19A5               	xorwf	(_ipv4Header+17)& (0+255),w,b
  5834  003478  E10A               	bnz	u14400
  5835  00347A  0101               	movlb	1	; () banked
  5836  00347C  51C6               	movf	(_ipv4Address+2)& (0+255),w,b
  5837  00347E  0102               	movlb	2	; () banked
  5838  003480  19A6               	xorwf	(_ipv4Header+18)& (0+255),w,b
  5839  003482  E105               	bnz	u14400
  5840  003484  0101               	movlb	1	; () banked
  5841  003486  51C7               	movf	(_ipv4Address+3)& (0+255),w,b
  5842  003488  0102               	movlb	2	; () banked
  5843  00348A  19A7               	xorwf	(_ipv4Header+19)& (0+255),w,b
  5844  00348C  E009               	bz	l9332
  5845  00348E                     u14400:
  5846                           
  5847                           ; BSR set to: 2
  5848  00348E  29A4               	incf	(_ipv4Header+16)& (0+255),w,b
  5849  003490  E106               	bnz	u14411
  5850  003492  29A5               	incf	(_ipv4Header+17)& (0+255),w,b
  5851  003494  E104               	bnz	u14411
  5852  003496  29A6               	incf	(_ipv4Header+18)& (0+255),w,b
  5853  003498  E102               	bnz	u14411
  5854  00349A  29A7               	incf	(_ipv4Header+19)& (0+255),w,b
  5855  00349C  A4D8               	btfss	status,2,c
  5856  00349E                     u14411:
  5857  00349E  0012               	return	
  5858  0034A0                     l9332:
  5859                           
  5860                           ; BSR set to: 2
  5861                           ;ipv4.c: 140: {
  5862                           ;ipv4.c: 141: ipv4Header.length = ((((uint16_t)ipv4Header.length & (uint16_t)0xFF00) >> 
      +                          8) | (((uint16_t)ipv4Header.length & (uint16_t)0x00FF) << 8));
  5863  0034A0  5196               	movf	(_ipv4Header+2)& (0+255),w,b
  5864  0034A2  0101               	movlb	1	; () banked
  5865  0034A4  6F01               	movwf	(??_IPV4_Packet+1)& (0+255),b
  5866  0034A6  6B00               	clrf	??_IPV4_Packet& (0+255),b
  5867  0034A8  EE22  F096         	lfsr	2,_ipv4Header+2
  5868  0034AC  CFDE F102          	movff	postinc2,??_IPV4_Packet+2
  5869  0034B0  CFDD F103          	movff	postdec2,??_IPV4_Packet+3
  5870  0034B4  C103  F102         	movff	??_IPV4_Packet+3,??_IPV4_Packet+2
  5871  0034B8  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  5872  0034BA  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  5873  0034BC  5100               	movf	??_IPV4_Packet& (0+255),w,b
  5874  0034BE  1102               	iorwf	(??_IPV4_Packet+2)& (0+255),w,b
  5875  0034C0  0102               	movlb	2	; () banked
  5876  0034C2  6F96               	movwf	(_ipv4Header+2)& (0+255),b
  5877  0034C4  0101               	movlb	1	; () banked
  5878  0034C6  5101               	movf	(??_IPV4_Packet+1)& (0+255),w,b
  5879  0034C8  1103               	iorwf	(??_IPV4_Packet+3)& (0+255),w,b
  5880  0034CA  0102               	movlb	2	; () banked
  5881  0034CC  6F97               	movwf	(_ipv4Header+3)& (0+255),b
  5882                           
  5883                           ; BSR set to: 2
  5884                           ;ipv4.c: 143: hdrLen = (uint8_t)(ipv4Header.ihl << 2);
  5885  0034CE  D8F2               	call	PL334	;call to abstracted procedure
  5886  0034D0  90D8               	bcf	status,0,c
  5887  0034D2  3700               	rlcf	??_IPV4_Packet& (0+255),f,b
  5888  0034D4  90D8               	bcf	status,0,c
  5889  0034D6  3500               	rlcf	??_IPV4_Packet& (0+255),w,b
  5890  0034D8  0100               	movlb	0	; () banked
  5891  0034DA  6FF7               	movwf	IPV4_Packet@hdrLen& (0+255),b
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;ipv4.c: 145: if (ipv4Header.ihl > 5)
  5895  0034DC  0102               	movlb	2	; () banked
  5896  0034DE  D8EA               	call	PL334	;call to abstracted procedure
  5897  0034E0  0E05               	movlw	5
  5898  0034E2  6500               	cpfsgt	??_IPV4_Packet& (0+255),b
  5899  0034E4  D05F               	goto	l9372
  5900                           
  5901                           ; BSR set to: 1
  5902                           ;ipv4.c: 146: {
  5903                           ;ipv4.c: 148: ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
  5904  0034E6  0EEC               	movlw	236
  5905  0034E8  0100               	movlb	0	; () banked
  5906  0034EA  25F7               	addwf	IPV4_Packet@hdrLen& (0+255),w,b
  5907  0034EC  6E0A               	movwf	ETH_Dump@length,c
  5908  0034EE  6A0B               	clrf	ETH_Dump@length+1,c
  5909  0034F0  0EFF               	movlw	255
  5910  0034F2  220B               	addwfc	ETH_Dump@length+1,f,c
  5911  0034F4  EC27  F02B         	call	_ETH_Dump	;wreg free
  5912  0034F8  D055               	goto	l9372
  5913  0034FA                     l9340:
  5914                           
  5915                           ; BSR set to: 2
  5916                           ;ipv4.c: 154: {
  5917                           ;ipv4.c: 156: ;
  5918                           ;ipv4.c: 157: length = ipv4Header.length - hdrLen;
  5919  0034FA  0100               	movlb	0	; () banked
  5920  0034FC  51F7               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5921  0034FE  0102               	movlb	2	; () banked
  5922  003500  5D96               	subwf	(_ipv4Header+2)& (0+255),w,b
  5923  003502  D89D               	call	PL132	;call to abstracted procedure
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;ipv4.c: 158: cksm = ETH_RxComputeChecksum(length, 0);
  5927  003504  C0F8  F012         	movff	IPV4_Packet@length,ETH_RxComputeChecksum@len
  5928  003508  C0F9  F013         	movff	IPV4_Packet@length+1,ETH_RxComputeChecksum@len+1
  5929  00350C  6A15               	clrf	ETH_RxComputeChecksum@seed+1,c
  5930  00350E  6A14               	clrf	ETH_RxComputeChecksum@seed,c
  5931  003510  EC5B  F02A         	call	_ETH_RxComputeChecksum	;wreg free
  5932                           
  5933                           ;ipv4.c: 160: if (cksm == 0)
  5934  003514  D8B7               	call	PL178	;call to abstracted procedure
  5935  003516  A4D8               	btfss	status,2,c
  5936  003518  0012               	return	
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;ipv4.c: 161: {
  5940                           ;ipv4.c: 162: ICMP_Receive(&ipv4Header);
  5941  00351A  0E94               	movlw	low _ipv4Header
  5942  00351C  6F71               	movwf	ICMP_Receive@ipv4Hdr& (0+255),b
  5943  00351E  0E02               	movlw	high _ipv4Header
  5944  003520  6F72               	movwf	(ICMP_Receive@ipv4Hdr+1)& (0+255),b
  5945  003522  EF4D  F02B         	goto	_ICMP_Receive	;wreg free
  5946  003526                     l9348:
  5947                           
  5948                           ; BSR set to: 2
  5949                           ;ipv4.c: 174: ;
  5950                           ;ipv4.c: 175: length = ipv4Header.length - hdrLen;
  5951  003526  0100               	movlb	0	; () banked
  5952  003528  51F7               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5953  00352A  0102               	movlb	2	; () banked
  5954  00352C  5D96               	subwf	(_ipv4Header+2)& (0+255),w,b
  5955  00352E  D887               	call	PL132	;call to abstracted procedure
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;ipv4.c: 176: cksm = IPV4_PseudoHeaderChecksum(length);
  5959  003530  D8D0               	call	PL372	;call to abstracted procedure
  5960  003532  EC91  F027         	call	_IPV4_PseudoHeaderChecksum	;wreg free
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;ipv4.c: 177: cksm = ETH_RxComputeChecksum(length, cksm);
  5964  003536  D899               	call	PL176	;call to abstracted procedure
  5965  003538  EC5B  F02A         	call	_ETH_RxComputeChecksum	;wreg free
  5966  00353C  C012  F0FA         	movff	?_ETH_RxComputeChecksum,IPV4_Packet@cksm
  5967  003540  C013  F0FB         	movff	?_ETH_RxComputeChecksum+1,IPV4_Packet@cksm+1
  5968                           
  5969                           ;ipv4.c: 178: UDP_Receive(cksm);
  5970  003544  C0FA  F00C         	movff	IPV4_Packet@cksm,UDP_Receive@udpcksm
  5971  003548  C0FB  F00D         	movff	IPV4_Packet@cksm+1,UDP_Receive@udpcksm+1
  5972  00354C  EF3E  F029         	goto	_UDP_Receive	;wreg free
  5973  003550                     l9356:
  5974                           
  5975                           ; BSR set to: 2
  5976                           ;ipv4.c: 183: ;
  5977                           ;ipv4.c: 184: length = ipv4Header.length - hdrLen;
  5978  003550  0100               	movlb	0	; () banked
  5979  003552  51F7               	movf	IPV4_Packet@hdrLen& (0+255),w,b
  5980  003554  0102               	movlb	2	; () banked
  5981  003556  5D96               	subwf	(_ipv4Header+2)& (0+255),w,b
  5982  003558  D872               	call	PL132	;call to abstracted procedure
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;ipv4.c: 185: cksm = IPV4_PseudoHeaderChecksum(length);
  5986  00355A  D8BB               	call	PL372	;call to abstracted procedure
  5987  00355C  EC91  F027         	call	_IPV4_PseudoHeaderChecksum	;wreg free
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;ipv4.c: 186: cksm = ETH_RxComputeChecksum(length, cksm);
  5991  003560  D884               	call	PL176	;call to abstracted procedure
  5992  003562  EC5B  F02A         	call	_ETH_RxComputeChecksum	;wreg free
  5993                           
  5994                           ;ipv4.c: 189: if (cksm == 0)
  5995  003566  D88E               	call	PL178	;call to abstracted procedure
  5996  003568  A4D8               	btfss	status,2,c
  5997  00356A  0012               	return	
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;ipv4.c: 190: {
  6001                           ;ipv4.c: 191: remoteIpv4Address = ipv4Header.srcIpAddress;
  6002  00356C  C2A0  F224         	movff	_ipv4Header+12,_remoteIpv4Address
  6003  003570  C2A1  F225         	movff	_ipv4Header+13,_remoteIpv4Address+1
  6004  003574  C2A2  F226         	movff	_ipv4Header+14,_remoteIpv4Address+2
  6005  003578  C2A3  F227         	movff	_ipv4Header+15,_remoteIpv4Address+3
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;ipv4.c: 192: TCP_Recv(remoteIpv4Address, length);
  6009  00357C  C224  F0D5         	movff	_remoteIpv4Address,TCP_Recv@remoteAddress
  6010  003580  C225  F0D6         	movff	_remoteIpv4Address+1,TCP_Recv@remoteAddress+1
  6011  003584  C226  F0D7         	movff	_remoteIpv4Address+2,TCP_Recv@remoteAddress+2
  6012  003588  C227  F0D8         	movff	_remoteIpv4Address+3,TCP_Recv@remoteAddress+3
  6013  00358C  C0F8  F0D9         	movff	IPV4_Packet@length,TCP_Recv@length
  6014  003590  C0F9  F0DA         	movff	IPV4_Packet@length+1,TCP_Recv@length+1
  6015  003594  EF38  F016         	goto	_TCP_Recv	;wreg free
  6016  003598                     l9368:
  6017                           
  6018                           ; BSR set to: 2
  6019                           ;ipv4.c: 199: ETH_Dump(ipv4Header.length);
  6020  003598  C296  F00A         	movff	_ipv4Header+2,ETH_Dump@length
  6021  00359C  C297  F00B         	movff	_ipv4Header+3,ETH_Dump@length+1
  6022  0035A0  EF27  F02B         	goto	_ETH_Dump	;wreg free
  6023  0035A4                     l9372:
  6024  0035A4  0102               	movlb	2	; () banked
  6025  0035A6  519D               	movf	(_ipv4Header+9)& (0+255),w,b
  6026                           
  6027                           ; Switch size 1, requested type "space"
  6028                           ; Number of cases is 3, Range of values is 1 to 17
  6029                           ; switch strategies available:
  6030                           ; Name         Instructions Cycles
  6031                           ; simple_byte           10     6 (average)
  6032                           ;	Chosen strategy is simple_byte
  6033  0035A8  0A01               	xorlw	1	; case 1
  6034  0035AA  E0A7               	bz	l9340
  6035  0035AC  0A07               	xorlw	7	; case 6
  6036  0035AE  E0D0               	bz	l9356
  6037  0035B0  0A17               	xorlw	23	; case 17
  6038  0035B2  E0B9               	bz	l9348
  6039  0035B4  D7F1               	goto	l9368
  6040  0035B6                     __end_of_IPV4_Packet:
  6041                           	opt stack 0
  6042  0035B6                     PL62:
  6043                           	opt stack 15
  6044  0035B6  14DE               	andwf	postinc2,w,c
  6045  0035B8  6F10               	movwf	(??_IPV4_Packet+16)& (0+255),b
  6046  0035BA  0E00               	movlw	0
  6047  0035BC  14DE               	andwf	postinc2,w,c
  6048  0035BE  6F11               	movwf	(??_IPV4_Packet+17)& (0+255),b
  6049  0035C0  0E00               	movlw	0
  6050  0035C2  14DE               	andwf	postinc2,w,c
  6051  0035C4  6F12               	movwf	(??_IPV4_Packet+18)& (0+255),b
  6052  0035C6  0EFF               	movlw	255
  6053  0035C8  14DE               	andwf	postinc2,w,c
  6054  0035CA  6F13               	movwf	(??_IPV4_Packet+19)& (0+255),b
  6055  0035CC  0E19               	movlw	25
  6056  0035CE  D005               	goto	u14380
  6057  0035D0                     u14385:
  6058  0035D0  90D8               	bcf	status,0,c
  6059  0035D2  3313               	rrcf	(??_IPV4_Packet+19)& (0+255),f,b
  6060  0035D4  3312               	rrcf	(??_IPV4_Packet+18)& (0+255),f,b
  6061  0035D6  3311               	rrcf	(??_IPV4_Packet+17)& (0+255),f,b
  6062  0035D8  3310               	rrcf	(??_IPV4_Packet+16)& (0+255),f,b
  6063  0035DA                     u14380:
  6064  0035DA  2EE8               	decfsz	wreg,f,c
  6065  0035DC  D7F9               	goto	u14385
  6066  0035DE  510C               	movf	(??_IPV4_Packet+12)& (0+255),w,b
  6067  0035E0  1110               	iorwf	(??_IPV4_Packet+16)& (0+255),w,b
  6068  0035E2  6F14               	movwf	(??_IPV4_Packet+20)& (0+255),b
  6069  0035E4  510D               	movf	(??_IPV4_Packet+13)& (0+255),w,b
  6070  0035E6  1111               	iorwf	(??_IPV4_Packet+17)& (0+255),w,b
  6071  0035E8  6F15               	movwf	(??_IPV4_Packet+21)& (0+255),b
  6072  0035EA  510E               	movf	(??_IPV4_Packet+14)& (0+255),w,b
  6073  0035EC  1112               	iorwf	(??_IPV4_Packet+18)& (0+255),w,b
  6074  0035EE  6F16               	movwf	(??_IPV4_Packet+22)& (0+255),b
  6075  0035F0  510F               	movf	(??_IPV4_Packet+15)& (0+255),w,b
  6076  0035F2  1113               	iorwf	(??_IPV4_Packet+19)& (0+255),w,b
  6077  0035F4  6F17               	movwf	(??_IPV4_Packet+23)& (0+255),b
  6078  0035F6  5104               	movf	(??_IPV4_Packet+4)& (0+255),w,b
  6079  0035F8  1114               	iorwf	(??_IPV4_Packet+20)& (0+255),w,b
  6080  0035FA  6F18               	movwf	(??_IPV4_Packet+24)& (0+255),b
  6081  0035FC  5105               	movf	(??_IPV4_Packet+5)& (0+255),w,b
  6082  0035FE  1115               	iorwf	(??_IPV4_Packet+21)& (0+255),w,b
  6083  003600  6F19               	movwf	(??_IPV4_Packet+25)& (0+255),b
  6084  003602  5106               	movf	(??_IPV4_Packet+6)& (0+255),w,b
  6085  003604  1116               	iorwf	(??_IPV4_Packet+22)& (0+255),w,b
  6086  003606  6F1A               	movwf	(??_IPV4_Packet+26)& (0+255),b
  6087  003608  5107               	movf	(??_IPV4_Packet+7)& (0+255),w,b
  6088  00360A  1117               	iorwf	(??_IPV4_Packet+23)& (0+255),w,b
  6089  00360C  6F1B               	movwf	(??_IPV4_Packet+27)& (0+255),b
  6090  00360E  5100               	movf	??_IPV4_Packet& (0+255),w,b
  6091  003610  1118               	iorwf	(??_IPV4_Packet+24)& (0+255),w,b
  6092  003612  0102               	movlb	2	; () banked
  6093  003614  0012               	return	
  6094  003616                     __end_ofPL62:
  6095                           	opt stack 0
  6096  003616                     PL118:
  6097                           	opt stack 15
  6098  003616  0E00               	movlw	0
  6099  003618  14DE               	andwf	postinc2,w,c
  6100  00361A  6F04               	movwf	(??_IPV4_Packet+4)& (0+255),b
  6101  00361C  0EFF               	movlw	255
  6102  00361E  14DE               	andwf	postinc2,w,c
  6103  003620  6F05               	movwf	(??_IPV4_Packet+5)& (0+255),b
  6104  003622  0E00               	movlw	0
  6105  003624  14DE               	andwf	postinc2,w,c
  6106  003626  6F06               	movwf	(??_IPV4_Packet+6)& (0+255),b
  6107  003628  0E00               	movlw	0
  6108  00362A  14DE               	andwf	postinc2,w,c
  6109  00362C  6F07               	movwf	(??_IPV4_Packet+7)& (0+255),b
  6110  00362E  C106  F107         	movff	??_IPV4_Packet+6,??_IPV4_Packet+7
  6111  003632  C105  F106         	movff	??_IPV4_Packet+5,??_IPV4_Packet+6
  6112  003636  C104  F105         	movff	??_IPV4_Packet+4,??_IPV4_Packet+5
  6113  00363A  6B04               	clrf	(??_IPV4_Packet+4)& (0+255),b
  6114  00363C  0012               	return	
  6115  00363E                     __end_ofPL118:
  6116                           	opt stack 0
  6117  00363E                     PL132:
  6118                           	opt stack 15
  6119  00363E  0100               	movlb	0	; () banked
  6120  003640  6FF8               	movwf	IPV4_Packet@length& (0+255),b
  6121  003642  0102               	movlb	2	; () banked
  6122  003644  5197               	movf	(_ipv4Header+3)& (0+255),w,b
  6123  003646  A0D8               	btfss	status,0,c
  6124  003648  0597               	decf	(_ipv4Header+3)& (0+255),w,b
  6125  00364A  0100               	movlb	0	; () banked
  6126  00364C  6FF9               	movwf	(IPV4_Packet@length+1)& (0+255),b
  6127  00364E  0012               	return	
  6128  003650                     __end_ofPL132:
  6129                           	opt stack 0
  6130  003650                     PL148:
  6131                           	opt stack 15
  6132  003650  C109  F108         	movff	??_IPV4_Packet+9,??_IPV4_Packet+8
  6133  003654  C10A  F109         	movff	??_IPV4_Packet+10,??_IPV4_Packet+9
  6134  003658  C10B  F10A         	movff	??_IPV4_Packet+11,??_IPV4_Packet+10
  6135  00365C  6B0B               	clrf	(??_IPV4_Packet+11)& (0+255),b
  6136  00365E  6B0C               	clrf	(??_IPV4_Packet+12)& (0+255),b
  6137  003660  5109               	movf	(??_IPV4_Packet+9)& (0+255),w,b
  6138  003662  6F0D               	movwf	(??_IPV4_Packet+13)& (0+255),b
  6139  003664  6B0E               	clrf	(??_IPV4_Packet+14)& (0+255),b
  6140  003666  6B0F               	clrf	(??_IPV4_Packet+15)& (0+255),b
  6141  003668  0C00               	retlw	0
  6142  00366A                     __end_ofPL148:
  6143                           	opt stack 0
  6144  00366A                     PL176:
  6145                           	opt stack 15
  6146  00366A  C002  F0FA         	movff	?_IPV4_PseudoHeaderChecksum,IPV4_Packet@cksm
  6147  00366E  C003  F0FB         	movff	?_IPV4_PseudoHeaderChecksum+1,IPV4_Packet@cksm+1
  6148  003672  C0F8  F012         	movff	IPV4_Packet@length,ETH_RxComputeChecksum@len
  6149  003676  C0F9  F013         	movff	IPV4_Packet@length+1,ETH_RxComputeChecksum@len+1
  6150  00367A  C0FA  F014         	movff	IPV4_Packet@cksm,ETH_RxComputeChecksum@seed
  6151  00367E  C0FB  F015         	movff	IPV4_Packet@cksm+1,ETH_RxComputeChecksum@seed+1
  6152  003682  0012               	return	
  6153  003684                     __end_ofPL176:
  6154                           	opt stack 0
  6155  003684                     PL178:
  6156                           	opt stack 15
  6157  003684  C012  F0FA         	movff	?_ETH_RxComputeChecksum,IPV4_Packet@cksm
  6158  003688  C013  F0FB         	movff	?_ETH_RxComputeChecksum+1,IPV4_Packet@cksm+1
  6159  00368C  0100               	movlb	0	; () banked
  6160  00368E  51FA               	movf	IPV4_Packet@cksm& (0+255),w,b
  6161  003690  11FB               	iorwf	(IPV4_Packet@cksm+1)& (0+255),w,b
  6162  003692  0012               	return	
  6163  003694                     __end_ofPL178:
  6164                           	opt stack 0
  6165  003694                     PL198:
  6166                           	opt stack 15
  6167  003694  0101               	movlb	1	; () banked
  6168  003696  6F00               	movwf	??_IPV4_Packet& (0+255),b
  6169  003698  6B01               	clrf	(??_IPV4_Packet+1)& (0+255),b
  6170  00369A  6B02               	clrf	(??_IPV4_Packet+2)& (0+255),b
  6171  00369C  6B03               	clrf	(??_IPV4_Packet+3)& (0+255),b
  6172  00369E  C100  F103         	movff	??_IPV4_Packet,??_IPV4_Packet+3
  6173  0036A2  6B02               	clrf	(??_IPV4_Packet+2)& (0+255),b
  6174  0036A4  6B01               	clrf	(??_IPV4_Packet+1)& (0+255),b
  6175  0036A6  6B00               	clrf	??_IPV4_Packet& (0+255),b
  6176  0036A8  0012               	return	
  6177  0036AA                     __end_ofPL198:
  6178                           	opt stack 0
  6179  0036AA                     PL324:
  6180                           	opt stack 15
  6181  0036AA  0101               	movlb	1	; () banked
  6182  0036AC  5102               	movf	(??_IPV4_Packet+2)& (0+255),w,b
  6183  0036AE  111A               	iorwf	(??_IPV4_Packet+26)& (0+255),w,b
  6184  0036B0  0102               	movlb	2	; () banked
  6185  0036B2  0012               	return	
  6186  0036B4                     __end_ofPL324:
  6187                           	opt stack 0
  6188  0036B4                     PL334:
  6189                           	opt stack 15
  6190  0036B4  5194               	movf	_ipv4Header& (0+255),w,b
  6191  0036B6  0B0F               	andlw	15
  6192  0036B8  0101               	movlb	1	; () banked
  6193  0036BA  6F00               	movwf	??_IPV4_Packet& (0+255),b
  6194  0036BC  0012               	return	
  6195  0036BE                     __end_ofPL334:
  6196                           	opt stack 0
  6197  0036BE                     PL368:
  6198                           	opt stack 15
  6199  0036BE  0101               	movlb	1	; () banked
  6200  0036C0  5103               	movf	(??_IPV4_Packet+3)& (0+255),w,b
  6201  0036C2  111B               	iorwf	(??_IPV4_Packet+27)& (0+255),w,b
  6202  0036C4  0102               	movlb	2	; () banked
  6203  0036C6  0012               	return	
  6204  0036C8                     __end_ofPL368:
  6205                           	opt stack 0
  6206  0036C8                     PL370:
  6207                           	opt stack 15
  6208  0036C8  0101               	movlb	1	; () banked
  6209  0036CA  5101               	movf	(??_IPV4_Packet+1)& (0+255),w,b
  6210  0036CC  1119               	iorwf	(??_IPV4_Packet+25)& (0+255),w,b
  6211  0036CE  0102               	movlb	2	; () banked
  6212  0036D0  0012               	return	
  6213  0036D2                     __end_ofPL370:
  6214                           	opt stack 0
  6215  0036D2                     PL372:
  6216                           	opt stack 15
  6217  0036D2  C0F8  F002         	movff	IPV4_Packet@length,IPV4_PseudoHeaderChecksum@payloadLen
  6218  0036D6  C0F9  F003         	movff	IPV4_Packet@length+1,IPV4_PseudoHeaderChecksum@payloadLen+1
  6219  0036DA  0012               	return	
  6220  0036DC                     __end_ofPL372:
  6221                           	opt stack 0
  6222                           tosu	equ	0xFFF
  6223                           tosh	equ	0xFFE
  6224                           tosl	equ	0xFFD
  6225                           pclath	equ	0xFFA
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           intcon	equ	0xFF2
  6233                           indf0	equ	0xFEF
  6234                           postinc0	equ	0xFEE
  6235                           fsr0h	equ	0xFEA
  6236                           fsr0l	equ	0xFE9
  6237                           wreg	equ	0xFE8
  6238                           postinc1	equ	0xFE6
  6239                           plusw1	equ	0xFE3
  6240                           fsr1h	equ	0xFE2
  6241                           fsr1l	equ	0xFE1
  6242                           bsr	equ	0xFE0
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           plusw2	equ	0xFDB
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _UDP_Receive *****************
  6252 ;; Defined at:
  6253 ;;		line 126 in file "../../TCPIP Library/source/udpv4.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  udpcksm         2   11[COMRAM] unsigned int 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  x               2   19[COMRAM] unsigned int 
  6258 ;;  hptr            1   18[COMRAM] PTR const struct .
  6259 ;;		 -> UDP_CallBackTable(15), 
  6260 ;;  ret             1    0        enum E367
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      enum E6944
  6263 ;; Registers used:
  6264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : F/2
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:       10 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    5
  6277 ;; This function calls:
  6278 ;;		_ETH_ReadBlock
  6279 ;; This function is called by:
  6280 ;;		_IPV4_Packet
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text29
  6285  00527C                     __ptext29:
  6286                           	opt stack 0
  6287  00527C                     _UDP_Receive:
  6288                           	opt stack 22
  6289                           
  6290                           ;udpv4.c: 129: const udp_handler_t *hptr;
  6291                           ;udpv4.c: 130: uint16_t x;
  6292                           ;udpv4.c: 132: hptr = UDP_CallBackTable;
  6293                           
  6294                           ;incstack = 0
  6295  00527C  0E28               	movlw	low _UDP_CallBackTable
  6296  00527E  6E13               	movwf	UDP_Receive@hptr,c
  6297                           
  6298                           ;udpv4.c: 133: ETH_ReadBlock((char *)&udpHeader,sizeof(udpHeader));
  6299  005280  0EA8               	movlw	low _udpHeader
  6300  005282  6E03               	movwf	ETH_ReadBlock@buffer,c
  6301  005284  0E02               	movlw	high _udpHeader
  6302  005286  6E04               	movwf	ETH_ReadBlock@buffer+1,c
  6303  005288  EC6F  F02B         	call	PL378	;call to abstracted procedure
  6304  00528C  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
  6305                           
  6306                           ;udpv4.c: 135: if((udpHeader.checksum == 0) || (udpcksm == 0))
  6307  005290  0102               	movlb	2	; () banked
  6308  005292  51AE               	movf	(_udpHeader+6)& (0+255),w,b
  6309  005294  11AF               	iorwf	(_udpHeader+7)& (0+255),w,b
  6310  005296  E004               	bz	l9020
  6311                           
  6312                           ; BSR set to: 2
  6313  005298  500C               	movf	UDP_Receive@udpcksm,w,c
  6314  00529A  100D               	iorwf	UDP_Receive@udpcksm+1,w,c
  6315  00529C  A4D8               	btfss	status,2,c
  6316  00529E  0012               	return	
  6317  0052A0                     l9020:
  6318                           
  6319                           ; BSR set to: 2
  6320                           ;udpv4.c: 138: destPort = ((((uint16_t)udpHeader.srcPort & (uint16_t)0xFF00) >> 8) | (((
      +                          uint16_t)udpHeader.srcPort & (uint16_t)0x00FF) << 8));
  6321  0052A0  51AA               	movf	(_udpHeader+2)& (0+255),w,b
  6322  0052A2  6E0F               	movwf	(??_UDP_Receive+1)& (0+255),c
  6323  0052A4  6A0E               	clrf	??_UDP_Receive& (0+255),c
  6324  0052A6  EE22  F0AA         	lfsr	2,_udpHeader+2
  6325  0052AA  CFDE F010          	movff	postinc2,??_UDP_Receive+2
  6326  0052AE  CFDD F011          	movff	postdec2,??_UDP_Receive+3
  6327  0052B2  C011  F010         	movff	??_UDP_Receive+3,??_UDP_Receive+2
  6328  0052B6  6A11               	clrf	??_UDP_Receive+3,c
  6329  0052B8  6A11               	clrf	??_UDP_Receive+3,c
  6330  0052BA  500E               	movf	??_UDP_Receive,w,c
  6331  0052BC  1010               	iorwf	??_UDP_Receive+2,w,c
  6332  0052BE  6FAA               	movwf	(_udpHeader+2)& (0+255),b
  6333  0052C0  500F               	movf	??_UDP_Receive+1,w,c
  6334  0052C2  1011               	iorwf	??_UDP_Receive+3,w,c
  6335  0052C4  6FAB               	movwf	(_udpHeader+3)& (0+255),b
  6336                           
  6337                           ; BSR set to: 2
  6338                           ;udpv4.c: 142: for(x = 0; x < (sizeof(UDP_CallBackTable) / sizeof(*(UDP_CallBackTable)))
      +                          ;x++)
  6339                           
  6340                           ; BSR set to: 2
  6341  0052C6  6A14               	clrf	UDP_Receive@x,c
  6342  0052C8  6A15               	clrf	UDP_Receive@x+1,c
  6343  0052CA                     l9030:
  6344                           
  6345                           ; BSR set to: 2
  6346                           ;udpv4.c: 145: {
  6347                           ;udpv4.c: 146: hptr->callBack(((((uint16_t)udpHeader.length & (uint16_t)0xFF00) >> 8) | 
      +                          (((uint16_t)udpHeader.length & (uint16_t)0x00FF) << 8)) - sizeof(udpHeader));
  6348  0052CA  C013  FFF6         	movff	UDP_Receive@hptr,tblptrl
  6349  0052CE                     	if	1	;There is more than 1 active tblptr byte
  6350  0052CE  0E10               	movlw	high __smallconst
  6351  0052D0  6EF7               	movwf	tblptrh,c
  6352  0052D2                     	endif
  6353  0052D2                     	if	0	;tblptru may be non-zero
  6354  0052D2                     	endif
  6355  0052D2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6356  0052D2  0E00               	movlw	low (__smallconst shr (0+16))
  6357  0052D4  6EF8               	movwf	tblptru,c
  6358  0052D6                     	endif
  6359  0052D6  51AA               	movf	(_udpHeader+2)& (0+255),w,b
  6360  0052D8  0009               	tblrd		*+
  6361  0052DA  18F5               	xorwf	tablat,w,c
  6362  0052DC  E105               	bnz	l9034
  6363  0052DE  51AB               	movf	(_udpHeader+3)& (0+255),w,b
  6364  0052E0  0009               	tblrd		*+
  6365  0052E2  18F5               	xorwf	tablat,w,c
  6366  0052E4  E101               	bnz	l9034
  6367                           
  6368                           ; BSR set to: 2
  6369                           ;udpv4.c: 148: break;
  6370  0052E6  0012               	return	
  6371  0052E8                     l9034:
  6372                           
  6373                           ; BSR set to: 2
  6374                           ;udpv4.c: 149: }
  6375                           ;udpv4.c: 150: hptr ++;
  6376  0052E8  0E05               	movlw	5
  6377  0052EA  2613               	addwf	UDP_Receive@hptr,f,c
  6378                           
  6379                           ; BSR set to: 2
  6380  0052EC  4A14               	infsnz	UDP_Receive@x,f,c
  6381  0052EE  2A15               	incf	UDP_Receive@x+1,f,c
  6382                           
  6383                           ; BSR set to: 2
  6384  0052F0  5015               	movf	UDP_Receive@x+1,w,c
  6385  0052F2  E104               	bnz	l1487
  6386  0052F4  0E03               	movlw	3
  6387  0052F6  5C14               	subwf	UDP_Receive@x,w,c
  6388  0052F8  E3E8               	bnc	l9030
  6389  0052FA  0012               	return	
  6390  0052FC                     l1487:
  6391                           
  6392                           ; BSR set to: 2
  6393  0052FC  0012               	return		;funcret
  6394  0052FE                     __end_of_UDP_Receive:
  6395                           	opt stack 0
  6396                           tosu	equ	0xFFF
  6397                           tosh	equ	0xFFE
  6398                           tosl	equ	0xFFD
  6399                           pclath	equ	0xFFA
  6400                           tblptru	equ	0xFF8
  6401                           tblptrh	equ	0xFF7
  6402                           tblptrl	equ	0xFF6
  6403                           tablat	equ	0xFF5
  6404                           prodh	equ	0xFF4
  6405                           prodl	equ	0xFF3
  6406                           intcon	equ	0xFF2
  6407                           indf0	equ	0xFEF
  6408                           postinc0	equ	0xFEE
  6409                           fsr0h	equ	0xFEA
  6410                           fsr0l	equ	0xFE9
  6411                           wreg	equ	0xFE8
  6412                           postinc1	equ	0xFE6
  6413                           plusw1	equ	0xFE3
  6414                           fsr1h	equ	0xFE2
  6415                           fsr1l	equ	0xFE1
  6416                           bsr	equ	0xFE0
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           plusw2	equ	0xFDB
  6421                           fsr2h	equ	0xFDA
  6422                           fsr2l	equ	0xFD9
  6423                           status	equ	0xFD8
  6424                           
  6425 ;; *************** function _TCP_Recv *****************
  6426 ;; Defined at:
  6427 ;;		line 483 in file "../../TCPIP Library/source/tcpv4.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  remoteAddres    4  117[BANK0 ] unsigned long 
  6430 ;;  length          2  121[BANK0 ] unsigned int 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  tcbPtr          2   90[COMRAM] PTR struct .
  6433 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
  6434 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
  6435 ;;  count           1   89[COMRAM] char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;		None               void
  6438 ;; Registers used:
  6439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6440 ;; Tracked objects:
  6441 ;;		On entry : F/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Temps:          0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Totals:         3      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;Total ram usage:       37 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:   12
  6452 ;; This function calls:
  6453 ;;		_ETH_ReadBlock
  6454 ;;		_TCP_FiniteStateMachine
  6455 ;;		_TCP_ParseTCPOptions
  6456 ;; This function is called by:
  6457 ;;		_IPV4_Packet
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text30
  6462  002C70                     __ptext30:
  6463                           	opt stack 0
  6464  002C70                     _TCP_Recv:
  6465                           	opt stack 15
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;tcpv4.c: 485: tcpTCB_t *tcbPtr;
  6469                           ;tcpv4.c: 486: socklistsize_t count = 0;
  6470                           
  6471                           ; BSR set to: 2
  6472                           ;incstack = 0
  6473  002C70  6A5A               	clrf	TCP_Recv@count,c
  6474                           
  6475                           ;tcpv4.c: 490: receivedRemoteAddress = 0;
  6476  002C72  0101               	movlb	1	; () banked
  6477  002C74  6BCC               	clrf	_receivedRemoteAddress& (0+255),b
  6478  002C76  6BCD               	clrf	(_receivedRemoteAddress+1)& (0+255),b
  6479  002C78  6BCE               	clrf	(_receivedRemoteAddress+2)& (0+255),b
  6480  002C7A  6BCF               	clrf	(_receivedRemoteAddress+3)& (0+255),b
  6481                           
  6482                           ;tcpv4.c: 491: rcvPayloadLen = 0;
  6483  002C7C  6BDD               	clrf	_rcvPayloadLen& (0+255),b
  6484  002C7E  6BDE               	clrf	(_rcvPayloadLen+1)& (0+255),b
  6485                           
  6486                           ; BSR set to: 1
  6487                           ;tcpv4.c: 493: ETH_ReadBlock((char *)&tcpHeader,sizeof(tcpHeader_t));
  6488  002C80  0EE8               	movlw	low _tcpHeader
  6489  002C82  6E03               	movwf	ETH_ReadBlock@buffer,c
  6490  002C84  0E01               	movlw	high _tcpHeader
  6491  002C86  D9ED               	call	PL330	;call to abstracted procedure
  6492  002C88  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
  6493                           
  6494                           ;tcpv4.c: 495: currentTCB = (0);
  6495  002C8C  0101               	movlb	1	; () banked
  6496  002C8E  6BD5               	clrf	_currentTCB& (0+255),b
  6497  002C90  6BD6               	clrf	(_currentTCB+1)& (0+255),b
  6498                           
  6499                           ; BSR set to: 1
  6500                           ;tcpv4.c: 498: if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0))
  6501  002C92  51EA               	movf	(_tcpHeader+2)& (0+255),w,b
  6502  002C94  11EB               	iorwf	(_tcpHeader+3)& (0+255),w,b
  6503  002C96  B4D8               	btfsc	status,2,c
  6504  002C98  0012               	return	
  6505                           
  6506                           ; BSR set to: 1
  6507  002C9A  51E8               	movf	_tcpHeader& (0+255),w,b
  6508  002C9C  11E9               	iorwf	(_tcpHeader+1)& (0+255),w,b
  6509  002C9E  B4D8               	btfsc	status,2,c
  6510  002CA0  0012               	return	
  6511                           
  6512                           ; BSR set to: 1
  6513                           ;tcpv4.c: 499: {
  6514                           ;tcpv4.c: 500: tcpHeader.sourcePort = ((((uint16_t)tcpHeader.sourcePort & (uint16_t)0xFF
      +                          00) >> 8) | (((uint16_t)tcpHeader.sourcePort & (uint16_t)0x00FF) << 8));
  6515  002CA2  51E8               	movf	_tcpHeader& (0+255),w,b
  6516  002CA4  0100               	movlb	0	; () banked
  6517  002CA6  6FDC               	movwf	(??_TCP_Recv+1)& (0+255),b
  6518  002CA8  6BDB               	clrf	??_TCP_Recv& (0+255),b
  6519  002CAA  0101               	movlb	1	; () banked
  6520  002CAC  51E9               	movf	(_tcpHeader+1)& (0+255),w,b
  6521  002CAE  0100               	movlb	0	; () banked
  6522  002CB0  6FDD               	movwf	(??_TCP_Recv+2)& (0+255),b
  6523  002CB2  D9EB               	call	PL350	;call to abstracted procedure
  6524  002CB4  6FE8               	movwf	_tcpHeader& (0+255),b
  6525  002CB6  D9CB               	call	PL318	;call to abstracted procedure
  6526  002CB8  6FE9               	movwf	(_tcpHeader+1)& (0+255),b
  6527                           
  6528                           ; BSR set to: 1
  6529                           ;tcpv4.c: 501: tcpHeader.destPort = ((((uint16_t)tcpHeader.destPort & (uint16_t)0xFF00) 
      +                          >> 8) | (((uint16_t)tcpHeader.destPort & (uint16_t)0x00FF) << 8));
  6530  002CBA  51EA               	movf	(_tcpHeader+2)& (0+255),w,b
  6531  002CBC  0100               	movlb	0	; () banked
  6532  002CBE  6FDC               	movwf	(??_TCP_Recv+1)& (0+255),b
  6533  002CC0  6BDB               	clrf	??_TCP_Recv& (0+255),b
  6534  002CC2  EE21  F0EA         	lfsr	2,_tcpHeader+2
  6535  002CC6  CFDE F0DD          	movff	postinc2,??_TCP_Recv+2
  6536  002CCA  CFDD F0DE          	movff	postdec2,??_TCP_Recv+3
  6537  002CCE  C0DE  F0DD         	movff	??_TCP_Recv+3,??_TCP_Recv+2
  6538  002CD2  6BDE               	clrf	(??_TCP_Recv+3)& (0+255),b
  6539  002CD4  D9DA               	call	PL350	;call to abstracted procedure
  6540  002CD6  6FEA               	movwf	(_tcpHeader+2)& (0+255),b
  6541  002CD8  D9BA               	call	PL318	;call to abstracted procedure
  6542  002CDA  6FEB               	movwf	(_tcpHeader+3)& (0+255),b
  6543                           
  6544                           ; BSR set to: 1
  6545                           ;tcpv4.c: 504: tcbPtr = tcbList;
  6546  002CDC  C1DF  F05B         	movff	_tcbList,TCP_Recv@tcbPtr
  6547  002CE0  C1E0  F05C         	movff	_tcbList+1,TCP_Recv@tcbPtr+1
  6548                           
  6549                           ;tcpv4.c: 505: while((tcbPtr != (0)) && (count < tcbListSize))
  6550  002CE4  D043               	goto	l9070
  6551  002CE6                     l9060:
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;tcpv4.c: 506: {
  6555                           ;tcpv4.c: 507: if (tcpHeader.destPort == tcbPtr->localPort)
  6556  002CE6  C05B  FFF6         	movff	TCP_Recv@tcbPtr,tblptrl
  6557  002CEA  C05C  FFF7         	movff	TCP_Recv@tcbPtr+1,tblptrh
  6558  002CEE  0E00               	movlw	low (__smallconst shr (0+16))
  6559  002CF0  6EF8               	movwf	tblptru,c
  6560  002CF2  0E0F               	movlw	(high __ramtop+-1)
  6561  002CF4  64F7               	cpfsgt	tblptrh,c
  6562  002CF6  D007               	bra	u13847
  6563  002CF8  0009               	tblrd		*+
  6564  002CFA  CFF5 F0DB          	movff	tablat,??_TCP_Recv
  6565  002CFE  0009               	tblrd		*+
  6566  002D00  CFF5 F0DC          	movff	tablat,??_TCP_Recv+1
  6567  002D04  D006               	bra	u13840
  6568  002D06                     u13847:
  6569  002D06  EC3C  F011         	call	PL24	;call to abstracted procedure
  6570  002D0A  CFEE F0DB          	movff	postinc0,??_TCP_Recv
  6571  002D0E  CFEE F0DC          	movff	postinc0,??_TCP_Recv+1
  6572  002D12                     u13840:
  6573  002D12  0100               	movlb	0	; () banked
  6574  002D14  51DB               	movf	??_TCP_Recv& (0+255),w,b
  6575  002D16  0101               	movlb	1	; () banked
  6576  002D18  19EA               	xorwf	(_tcpHeader+2)& (0+255),w,b
  6577  002D1A  E10A               	bnz	l9066
  6578  002D1C  0100               	movlb	0	; () banked
  6579  002D1E  51DC               	movf	(??_TCP_Recv+1)& (0+255),w,b
  6580  002D20  0101               	movlb	1	; () banked
  6581  002D22  19EB               	xorwf	(_tcpHeader+3)& (0+255),w,b
  6582  002D24  E105               	bnz	l9066
  6583                           
  6584                           ; BSR set to: 1
  6585                           ;tcpv4.c: 508: {
  6586                           ;tcpv4.c: 509: currentTCB = tcbPtr;
  6587  002D26  C05B  F1D5         	movff	TCP_Recv@tcbPtr,_currentTCB
  6588  002D2A  C05C  F1D6         	movff	TCP_Recv@tcbPtr+1,_currentTCB+1
  6589                           
  6590                           ;tcpv4.c: 510: break;
  6591  002D2E  D02B               	goto	l9074
  6592  002D30                     l9066:
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;tcpv4.c: 512: else
  6596                           ;tcpv4.c: 513: {
  6597                           ;tcpv4.c: 514: tcbPtr = tcbPtr->nextTCB;
  6598  002D30  0E2C               	movlw	44
  6599  002D32  245B               	addwf	TCP_Recv@tcbPtr,w,c
  6600  002D34  0100               	movlb	0	; () banked
  6601  002D36  6FDB               	movwf	??_TCP_Recv& (0+255),b
  6602  002D38  0E00               	movlw	0
  6603  002D3A  205C               	addwfc	TCP_Recv@tcbPtr+1,w,c
  6604  002D3C  6FDC               	movwf	(??_TCP_Recv+1)& (0+255),b
  6605  002D3E  C0DB  FFF6         	movff	??_TCP_Recv,tblptrl
  6606  002D42  C0DC  FFF7         	movff	??_TCP_Recv+1,tblptrh
  6607  002D46  0E00               	movlw	low (__smallconst shr (0+16))
  6608  002D48  6EF8               	movwf	tblptru,c
  6609  002D4A  0E0F               	movlw	(high __ramtop+-1)
  6610  002D4C  64F7               	cpfsgt	tblptrh,c
  6611  002D4E  D007               	bra	u13867
  6612  002D50  0009               	tblrd		*+
  6613  002D52  CFF5 F05B          	movff	tablat,TCP_Recv@tcbPtr
  6614  002D56  0009               	tblrd		*+
  6615  002D58  CFF5 F05C          	movff	tablat,TCP_Recv@tcbPtr+1
  6616  002D5C  D006               	bra	u13860
  6617  002D5E                     u13867:
  6618  002D5E  EC3C  F011         	call	PL24	;call to abstracted procedure
  6619  002D62  CFEE F05B          	movff	postinc0,TCP_Recv@tcbPtr
  6620  002D66  CFEE F05C          	movff	postinc0,TCP_Recv@tcbPtr+1
  6621  002D6A                     u13860:
  6622                           
  6623                           ;tcpv4.c: 515: count ++;
  6624  002D6A  2A5A               	incf	TCP_Recv@count,f,c
  6625  002D6C                     l9070:
  6626  002D6C  505B               	movf	TCP_Recv@tcbPtr,w,c
  6627  002D6E  105C               	iorwf	TCP_Recv@tcbPtr+1,w,c
  6628  002D70  E00A               	bz	l9074
  6629  002D72  505A               	movf	TCP_Recv@count,w,c
  6630  002D74  0A80               	xorlw	128
  6631  002D76  0100               	movlb	0	; () banked
  6632  002D78  6FDB               	movwf	??_TCP_Recv& (0+255),b
  6633  002D7A  0101               	movlb	1	; () banked
  6634  002D7C  51E7               	movf	_tcbListSize& (0+255),w,b
  6635  002D7E  0A80               	xorlw	128
  6636  002D80  0100               	movlb	0	; () banked
  6637  002D82  5DDB               	subwf	??_TCP_Recv& (0+255),w,b
  6638  002D84  E3B0               	bnc	l9060
  6639  002D86                     l9074:
  6640                           
  6641                           ;tcpv4.c: 516: }
  6642                           ;tcpv4.c: 517: }
  6643                           ;tcpv4.c: 519: if (currentTCB != (0))
  6644  002D86  0101               	movlb	1	; () banked
  6645  002D88  51D5               	movf	_currentTCB& (0+255),w,b
  6646  002D8A  11D6               	iorwf	(_currentTCB+1)& (0+255),w,b
  6647  002D8C  B4D8               	btfsc	status,2,c
  6648  002D8E  0012               	return	
  6649                           
  6650                           ; BSR set to: 1
  6651                           ;tcpv4.c: 520: {
  6652                           ;tcpv4.c: 521: if((tcpHeader.sourcePort == currentTCB->destPort) ||
  6653                           ;tcpv4.c: 522: (currentTCB->destIP == 0))
  6654  002D90  0E06               	movlw	6
  6655  002D92  D8EA               	call	PL40	;call to abstracted procedure
  6656  002D94  64F7               	cpfsgt	tblptrh,c
  6657  002D96  D002               	bra	u13907
  6658  002D98  D953               	call	PL270	;call to abstracted procedure
  6659  002D9A  D003               	bra	u13900
  6660  002D9C                     u13907:
  6661  002D9C  EC3C  F011         	call	PL24	;call to abstracted procedure
  6662  002DA0  D95B               	call	PL328	;call to abstracted procedure
  6663  002DA2                     u13900:
  6664  002DA2  0101               	movlb	1	; () banked
  6665  002DA4  51E8               	movf	_tcpHeader& (0+255),w,b
  6666  002DA6  0100               	movlb	0	; () banked
  6667  002DA8  19DD               	xorwf	(??_TCP_Recv+2)& (0+255),w,b
  6668  002DAA  E105               	bnz	u13910
  6669  002DAC  0101               	movlb	1	; () banked
  6670  002DAE  51E9               	movf	(_tcpHeader+1)& (0+255),w,b
  6671  002DB0  0100               	movlb	0	; () banked
  6672  002DB2  19DE               	xorwf	(??_TCP_Recv+3)& (0+255),w,b
  6673  002DB4  E01B               	bz	l1202
  6674  002DB6                     u13910:
  6675                           
  6676                           ; BSR set to: 0
  6677  002DB6  0E02               	movlw	2
  6678  002DB8  0101               	movlb	1	; () banked
  6679  002DBA  D8D6               	call	PL40	;call to abstracted procedure
  6680  002DBC  64F7               	cpfsgt	tblptrh,c
  6681  002DBE  D008               	bra	u13927
  6682  002DC0  D93F               	call	PL270	;call to abstracted procedure
  6683  002DC2  0009               	tblrd		*+
  6684  002DC4  CFF5 F0DF          	movff	tablat,??_TCP_Recv+4
  6685  002DC8  0009               	tblrd		*+
  6686  002DCA  CFF5 F0E0          	movff	tablat,??_TCP_Recv+5
  6687  002DCE  D007               	bra	u13920
  6688  002DD0                     u13927:
  6689  002DD0  EC3C  F011         	call	PL24	;call to abstracted procedure
  6690  002DD4  D941               	call	PL328	;call to abstracted procedure
  6691  002DD6  CFEE F0DF          	movff	postinc0,??_TCP_Recv+4
  6692  002DDA  CFEE F0E0          	movff	postinc0,??_TCP_Recv+5
  6693  002DDE                     u13920:
  6694  002DDE  0100               	movlb	0	; () banked
  6695  002DE0  51DD               	movf	(??_TCP_Recv+2)& (0+255),w,b
  6696  002DE2  11DE               	iorwf	(??_TCP_Recv+3)& (0+255),w,b
  6697  002DE4  11DF               	iorwf	(??_TCP_Recv+4)& (0+255),w,b
  6698  002DE6  11E0               	iorwf	(??_TCP_Recv+5)& (0+255),w,b
  6699  002DE8  A4D8               	btfss	status,2,c
  6700  002DEA  0012               	return	
  6701  002DEC                     l1202:
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;tcpv4.c: 523: {
  6705                           ;tcpv4.c: 526: receivedRemoteAddress = remoteAddress;
  6706  002DEC  C0D5  F1CC         	movff	TCP_Recv@remoteAddress,_receivedRemoteAddress
  6707  002DF0  C0D6  F1CD         	movff	TCP_Recv@remoteAddress+1,_receivedRemoteAddress+1
  6708  002DF4  C0D7  F1CE         	movff	TCP_Recv@remoteAddress+2,_receivedRemoteAddress+2
  6709  002DF8  C0D8  F1CF         	movff	TCP_Recv@remoteAddress+3,_receivedRemoteAddress+3
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;tcpv4.c: 527: rcvPayloadLen = length - (uint16_t)(tcpHeader.dataOffset << 2);
  6713  002DFC  0101               	movlb	1	; () banked
  6714  002DFE  39F4               	swapf	(_tcpHeader+12)& (0+255),w,b
  6715  002E00  0B0F               	andlw	15
  6716  002E02  0100               	movlb	0	; () banked
  6717  002E04  6FDB               	movwf	??_TCP_Recv& (0+255),b
  6718  002E06  6BDC               	clrf	(??_TCP_Recv+1)& (0+255),b
  6719  002E08  90D8               	bcf	status,0,c
  6720  002E0A  37DB               	rlcf	??_TCP_Recv& (0+255),f,b
  6721  002E0C  37DC               	rlcf	(??_TCP_Recv+1)& (0+255),f,b
  6722  002E0E  90D8               	bcf	status,0,c
  6723  002E10  37DB               	rlcf	??_TCP_Recv& (0+255),f,b
  6724  002E12  37DC               	rlcf	(??_TCP_Recv+1)& (0+255),f,b
  6725  002E14  51DB               	movf	??_TCP_Recv& (0+255),w,b
  6726  002E16  5DD9               	subwf	TCP_Recv@length& (0+255),w,b
  6727  002E18  0101               	movlb	1	; () banked
  6728  002E1A  6FDD               	movwf	_rcvPayloadLen& (0+255),b
  6729  002E1C  0100               	movlb	0	; () banked
  6730  002E1E  51DC               	movf	(??_TCP_Recv+1)& (0+255),w,b
  6731  002E20  59DA               	subwfb	(TCP_Recv@length+1)& (0+255),w,b
  6732  002E22  0101               	movlb	1	; () banked
  6733  002E24  6FDE               	movwf	(_rcvPayloadLen+1)& (0+255),b
  6734                           
  6735                           ; BSR set to: 1
  6736                           ;tcpv4.c: 530: if (TCP_ParseTCPOptions() == 1)
  6737  002E26  ECEA  F024         	call	_TCP_ParseTCPOptions	;wreg free
  6738  002E2A  06E8               	decf	wreg,f,c
  6739  002E2C  A4D8               	btfss	status,2,c
  6740  002E2E  0012               	return	
  6741                           
  6742                           ;tcpv4.c: 531: {
  6743                           ;tcpv4.c: 534: if(tcpHeader.syn)
  6744  002E30  0101               	movlb	1	; () banked
  6745  002E32  A3F5               	btfss	(_tcpHeader+13)& (0+255),1,b
  6746  002E34  D01C               	goto	l1204
  6747                           
  6748                           ; BSR set to: 1
  6749                           ;tcpv4.c: 535: {
  6750                           ;tcpv4.c: 536: if(tcpHeader.ack)
  6751  002E36  A9F5               	btfss	(_tcpHeader+13)& (0+255),4,b
  6752  002E38  D00D               	goto	l9090
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;tcpv4.c: 537: {
  6756                           ;tcpv4.c: 538: ;
  6757                           ;tcpv4.c: 539: currentTCB->connectionEvent = RCV_SYNACK;
  6758  002E3A  0E2B               	movlw	43
  6759  002E3C  D895               	call	PL40	;call to abstracted procedure
  6760  002E3E  64F7               	cpfsgt	tblptrh,c
  6761  002E40  D004               	bra	u13977
  6762  002E42  0E05               	movlw	5
  6763  002E44  6EF5               	movwf	tablat,c
  6764  002E46  000C               	tblwt		*
  6765  002E48  D004               	bra	u13970
  6766  002E4A                     u13977:
  6767  002E4A  EC3C  F011         	call	PL24	;call to abstracted procedure
  6768  002E4E  0E05               	movlw	5
  6769  002E50  D048               	goto	L6
  6770  002E52                     u13970:
  6771                           
  6772                           ;tcpv4.c: 540: } else
  6773  002E52  D057               	goto	l9106
  6774  002E54                     l9090:
  6775                           
  6776                           ; BSR set to: 1
  6777                           ;tcpv4.c: 541: {
  6778                           ;tcpv4.c: 542: ;
  6779                           ;tcpv4.c: 543: currentTCB->connectionEvent = RCV_SYN;
  6780  002E54  0E2B               	movlw	43
  6781  002E56  D888               	call	PL40	;call to abstracted procedure
  6782  002E58  64F7               	cpfsgt	tblptrh,c
  6783  002E5A  D004               	bra	u13987
  6784  002E5C  0E03               	movlw	3
  6785  002E5E  6EF5               	movwf	tablat,c
  6786  002E60  000C               	tblwt		*
  6787  002E62  D004               	bra	u13980
  6788  002E64                     u13987:
  6789  002E64  EC3C  F011         	call	PL24	;call to abstracted procedure
  6790  002E68  0E03               	movlw	3
  6791  002E6A  D03B               	goto	L6
  6792  002E6C                     u13980:
  6793  002E6C  D04A               	goto	l9106
  6794  002E6E                     l1204:
  6795                           
  6796                           ; BSR set to: 1
  6797  002E6E  A1F5               	btfss	(_tcpHeader+13)& (0+255),0,b
  6798  002E70  D01C               	goto	l1208
  6799                           
  6800                           ; BSR set to: 1
  6801                           ;tcpv4.c: 546: {
  6802                           ;tcpv4.c: 547: if(tcpHeader.ack)
  6803  002E72  A9F5               	btfss	(_tcpHeader+13)& (0+255),4,b
  6804  002E74  D00D               	goto	l9096
  6805                           
  6806                           ; BSR set to: 1
  6807                           ;tcpv4.c: 548: {
  6808                           ;tcpv4.c: 549: ;
  6809                           ;tcpv4.c: 550: currentTCB->connectionEvent = RCV_FINACK;
  6810  002E76  0E2B               	movlw	43
  6811  002E78  D877               	call	PL40	;call to abstracted procedure
  6812  002E7A  64F7               	cpfsgt	tblptrh,c
  6813  002E7C  D004               	bra	u14017
  6814  002E7E  0E07               	movlw	7
  6815  002E80  6EF5               	movwf	tablat,c
  6816  002E82  000C               	tblwt		*
  6817  002E84  D004               	bra	u14010
  6818  002E86                     u14017:
  6819  002E86  EC3C  F011         	call	PL24	;call to abstracted procedure
  6820  002E8A  0E07               	movlw	7
  6821  002E8C  D02A               	goto	L6
  6822  002E8E                     u14010:
  6823                           
  6824                           ;tcpv4.c: 551: } else
  6825  002E8E  D039               	goto	l9106
  6826  002E90                     l9096:
  6827                           
  6828                           ; BSR set to: 1
  6829                           ;tcpv4.c: 552: {
  6830                           ;tcpv4.c: 553: ;
  6831                           ;tcpv4.c: 554: currentTCB->connectionEvent = RCV_FIN;
  6832  002E90  0E2B               	movlw	43
  6833  002E92  D86A               	call	PL40	;call to abstracted procedure
  6834  002E94  64F7               	cpfsgt	tblptrh,c
  6835  002E96  D004               	bra	u14027
  6836  002E98  0E06               	movlw	6
  6837  002E9A  6EF5               	movwf	tablat,c
  6838  002E9C  000C               	tblwt		*
  6839  002E9E  D004               	bra	u14020
  6840  002EA0                     u14027:
  6841  002EA0  EC3C  F011         	call	PL24	;call to abstracted procedure
  6842  002EA4  0E06               	movlw	6
  6843  002EA6  D01D               	goto	L6
  6844  002EA8                     u14020:
  6845  002EA8  D02C               	goto	l9106
  6846  002EAA                     l1208:
  6847                           
  6848                           ; BSR set to: 1
  6849  002EAA  A5F5               	btfss	(_tcpHeader+13)& (0+255),2,b
  6850  002EAC  D01C               	goto	l1212
  6851                           
  6852                           ; BSR set to: 1
  6853                           ;tcpv4.c: 557: {
  6854                           ;tcpv4.c: 558: if(tcpHeader.ack)
  6855  002EAE  A9F5               	btfss	(_tcpHeader+13)& (0+255),4,b
  6856  002EB0  D00D               	goto	l9102
  6857                           
  6858                           ; BSR set to: 1
  6859                           ;tcpv4.c: 559: {
  6860                           ;tcpv4.c: 560: ;
  6861                           ;tcpv4.c: 561: currentTCB->connectionEvent = RCV_RSTACK;
  6862  002EB2  0E2B               	movlw	43
  6863  002EB4  D859               	call	PL40	;call to abstracted procedure
  6864  002EB6  64F7               	cpfsgt	tblptrh,c
  6865  002EB8  D004               	bra	u14057
  6866  002EBA  0E0A               	movlw	10
  6867  002EBC  6EF5               	movwf	tablat,c
  6868  002EBE  000C               	tblwt		*
  6869  002EC0  D004               	bra	u14050
  6870  002EC2                     u14057:
  6871  002EC2  EC3C  F011         	call	PL24	;call to abstracted procedure
  6872  002EC6  0E0A               	movlw	10
  6873  002EC8  D00C               	goto	L6
  6874  002ECA                     u14050:
  6875                           
  6876                           ;tcpv4.c: 562: } else
  6877  002ECA  D01B               	goto	l9106
  6878  002ECC                     l9102:
  6879                           
  6880                           ; BSR set to: 1
  6881                           ;tcpv4.c: 563: {
  6882                           ;tcpv4.c: 564: ;
  6883                           ;tcpv4.c: 565: currentTCB->connectionEvent = RCV_RST;
  6884  002ECC  0E2B               	movlw	43
  6885  002ECE  D84C               	call	PL40	;call to abstracted procedure
  6886  002ED0  64F7               	cpfsgt	tblptrh,c
  6887  002ED2  D004               	bra	u14067
  6888  002ED4  0E09               	movlw	9
  6889  002ED6  6EF5               	movwf	tablat,c
  6890  002ED8  000C               	tblwt		*
  6891  002EDA  D004               	bra	u14060
  6892  002EDC                     u14067:
  6893  002EDC  EC3C  F011         	call	PL24	;call to abstracted procedure
  6894  002EE0  0E09               	movlw	9
  6895  002EE2                     L6:
  6896  002EE2  6EEF               	movwf	indf0,c
  6897  002EE4                     u14060:
  6898  002EE4  D00E               	goto	l9106
  6899  002EE6                     l1212:
  6900                           
  6901                           ; BSR set to: 1
  6902  002EE6  A9F5               	btfss	(_tcpHeader+13)& (0+255),4,b
  6903  002EE8  D00C               	goto	l9106
  6904                           
  6905                           ; BSR set to: 1
  6906                           ;tcpv4.c: 568: {
  6907                           ;tcpv4.c: 569: ;
  6908                           ;tcpv4.c: 570: currentTCB->connectionEvent = RCV_ACK;
  6909  002EEA  0E2B               	movlw	43
  6910  002EEC  D83D               	call	PL40	;call to abstracted procedure
  6911  002EEE  64F7               	cpfsgt	tblptrh,c
  6912  002EF0  D004               	bra	u14087
  6913  002EF2  0E04               	movlw	4
  6914  002EF4  6EF5               	movwf	tablat,c
  6915  002EF6  000C               	tblwt		*
  6916  002EF8  D004               	bra	u14080
  6917  002EFA                     u14087:
  6918  002EFA  EC3C  F011         	call	PL24	;call to abstracted procedure
  6919  002EFE  0E04               	movlw	4
  6920  002F00  6EEF               	movwf	indf0,c
  6921  002F02                     u14080:
  6922  002F02                     l9106:
  6923                           
  6924                           ;tcpv4.c: 575: }
  6925                           ;tcpv4.c: 577: tcpHeader.ackNumber = ((((uint32_t)tcpHeader.ackNumber&(uint32_t)0xff0000
      +                          00) >> 24) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)t
      +                          cpHeader.ackNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeader.ackNumber&(uint32
      +                          _
  6926  002F02  0101               	movlb	1	; () banked
  6927  002F04  51F0               	movf	(_tcpHeader+8)& (0+255),w,b
  6928  002F06  D891               	call	PL190	;call to abstracted procedure
  6929  002F08  EE21  F0F0         	lfsr	2,_tcpHeader+8
  6930  002F0C  D86D               	call	PL110	;call to abstracted procedure
  6931  002F0E  C1F0  F0E3         	movff	_tcpHeader+8,??_TCP_Recv+8
  6932  002F12  C1F1  F0E4         	movff	_tcpHeader+9,??_TCP_Recv+9
  6933  002F16  C1F2  F0E5         	movff	_tcpHeader+10,??_TCP_Recv+10
  6934  002F1A  C1F3  F0E6         	movff	_tcpHeader+11,??_TCP_Recv+11
  6935  002F1E  D878               	call	PL144	;call to abstracted procedure
  6936  002F20  EE21  F0F0         	lfsr	2,_tcpHeader+8
  6937  002F24  D831               	call	PL60	;call to abstracted procedure
  6938  002F26  6FF0               	movwf	(_tcpHeader+8)& (0+255),b
  6939  002F28  D8A6               	call	PL340	;call to abstracted procedure
  6940  002F2A  6FF1               	movwf	(_tcpHeader+9)& (0+255),b
  6941  002F2C  D8A9               	call	PL342	;call to abstracted procedure
  6942  002F2E  6FF2               	movwf	(_tcpHeader+10)& (0+255),b
  6943  002F30  D89D               	call	PL338	;call to abstracted procedure
  6944  002F32  6FF3               	movwf	(_tcpHeader+11)& (0+255),b
  6945                           
  6946                           ;tcpv4.c: 578: tcpHeader.sequenceNumber = ((((uint32_t)tcpHeader.sequenceNumber&(uint32_
      +                          t)0xff000000) >> 24) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x00ff0000) >> 8) 
      +                          | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHead
      +                          e
  6947  002F34  51EC               	movf	(_tcpHeader+4)& (0+255),w,b
  6948  002F36  D879               	call	PL190	;call to abstracted procedure
  6949  002F38  EE21  F0EC         	lfsr	2,_tcpHeader+4
  6950  002F3C  D855               	call	PL110	;call to abstracted procedure
  6951  002F3E  C1EC  F0E3         	movff	_tcpHeader+4,??_TCP_Recv+8
  6952  002F42  C1ED  F0E4         	movff	_tcpHeader+5,??_TCP_Recv+9
  6953  002F46  C1EE  F0E5         	movff	_tcpHeader+6,??_TCP_Recv+10
  6954  002F4A  C1EF  F0E6         	movff	_tcpHeader+7,??_TCP_Recv+11
  6955  002F4E  D860               	call	PL144	;call to abstracted procedure
  6956  002F50  EE21  F0EC         	lfsr	2,_tcpHeader+4
  6957  002F54  D819               	call	PL60	;call to abstracted procedure
  6958  002F56  6FEC               	movwf	(_tcpHeader+4)& (0+255),b
  6959  002F58  D88E               	call	PL340	;call to abstracted procedure
  6960  002F5A  6FED               	movwf	(_tcpHeader+5)& (0+255),b
  6961  002F5C  D891               	call	PL342	;call to abstracted procedure
  6962  002F5E  6FEE               	movwf	(_tcpHeader+6)& (0+255),b
  6963  002F60  D885               	call	PL338	;call to abstracted procedure
  6964  002F62  6FEF               	movwf	(_tcpHeader+7)& (0+255),b
  6965                           
  6966                           ; BSR set to: 1
  6967                           ;tcpv4.c: 580: TCP_FiniteStateMachine();
  6968  002F64  EF5A  F008         	goto	_TCP_FiniteStateMachine	;wreg free
  6969  002F68                     __end_of_TCP_Recv:
  6970                           	opt stack 0
  6971  002F68                     PL40:
  6972                           	opt stack 15
  6973  002F68  25D5               	addwf	_currentTCB& (0+255),w,b
  6974  002F6A  0100               	movlb	0	; () banked
  6975  002F6C  6FDB               	movwf	??_TCP_Recv& (0+255),b
  6976  002F6E  0E00               	movlw	0
  6977  002F70  0101               	movlb	1	; () banked
  6978  002F72  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
  6979  002F74  0100               	movlb	0	; () banked
  6980  002F76  6FDC               	movwf	(??_TCP_Recv+1)& (0+255),b
  6981  002F78  C0DB  FFF6         	movff	??_TCP_Recv,tblptrl
  6982  002F7C  C0DC  FFF7         	movff	??_TCP_Recv+1,tblptrh
  6983  002F80  0E00               	movlw	low (__smallconst shr (0+16))
  6984  002F82  6EF8               	movwf	tblptru,c
  6985  002F84  0E0F               	movlw	(high __ramtop+-1)
  6986  002F86  0012               	return	
  6987  002F88                     __end_ofPL40:
  6988                           	opt stack 0
  6989  002F88                     PL60:
  6990                           	opt stack 15
  6991  002F88  14DE               	andwf	postinc2,w,c
  6992  002F8A  6FEB               	movwf	(??_TCP_Recv+16)& (0+255),b
  6993  002F8C  0E00               	movlw	0
  6994  002F8E  14DE               	andwf	postinc2,w,c
  6995  002F90  6FEC               	movwf	(??_TCP_Recv+17)& (0+255),b
  6996  002F92  0E00               	movlw	0
  6997  002F94  14DE               	andwf	postinc2,w,c
  6998  002F96  6FED               	movwf	(??_TCP_Recv+18)& (0+255),b
  6999  002F98  0EFF               	movlw	255
  7000  002F9A  14DE               	andwf	postinc2,w,c
  7001  002F9C  6FEE               	movwf	(??_TCP_Recv+19)& (0+255),b
  7002  002F9E  0E19               	movlw	25
  7003  002FA0  D005               	goto	u14090
  7004  002FA2                     u14095:
  7005  002FA2  90D8               	bcf	status,0,c
  7006  002FA4  33EE               	rrcf	(??_TCP_Recv+19)& (0+255),f,b
  7007  002FA6  33ED               	rrcf	(??_TCP_Recv+18)& (0+255),f,b
  7008  002FA8  33EC               	rrcf	(??_TCP_Recv+17)& (0+255),f,b
  7009  002FAA  33EB               	rrcf	(??_TCP_Recv+16)& (0+255),f,b
  7010  002FAC                     u14090:
  7011  002FAC  2EE8               	decfsz	wreg,f,c
  7012  002FAE  D7F9               	goto	u14095
  7013  002FB0  51E7               	movf	(??_TCP_Recv+12)& (0+255),w,b
  7014  002FB2  11EB               	iorwf	(??_TCP_Recv+16)& (0+255),w,b
  7015  002FB4  6FEF               	movwf	(??_TCP_Recv+20)& (0+255),b
  7016  002FB6  51E8               	movf	(??_TCP_Recv+13)& (0+255),w,b
  7017  002FB8  11EC               	iorwf	(??_TCP_Recv+17)& (0+255),w,b
  7018  002FBA  6FF0               	movwf	(??_TCP_Recv+21)& (0+255),b
  7019  002FBC  51E9               	movf	(??_TCP_Recv+14)& (0+255),w,b
  7020  002FBE  11ED               	iorwf	(??_TCP_Recv+18)& (0+255),w,b
  7021  002FC0  6FF1               	movwf	(??_TCP_Recv+22)& (0+255),b
  7022  002FC2  51EA               	movf	(??_TCP_Recv+15)& (0+255),w,b
  7023  002FC4  11EE               	iorwf	(??_TCP_Recv+19)& (0+255),w,b
  7024  002FC6  6FF2               	movwf	(??_TCP_Recv+23)& (0+255),b
  7025  002FC8  51DF               	movf	(??_TCP_Recv+4)& (0+255),w,b
  7026  002FCA  11EF               	iorwf	(??_TCP_Recv+20)& (0+255),w,b
  7027  002FCC  6FF3               	movwf	(??_TCP_Recv+24)& (0+255),b
  7028  002FCE  51E0               	movf	(??_TCP_Recv+5)& (0+255),w,b
  7029  002FD0  11F0               	iorwf	(??_TCP_Recv+21)& (0+255),w,b
  7030  002FD2  6FF4               	movwf	(??_TCP_Recv+25)& (0+255),b
  7031  002FD4  51E1               	movf	(??_TCP_Recv+6)& (0+255),w,b
  7032  002FD6  11F1               	iorwf	(??_TCP_Recv+22)& (0+255),w,b
  7033  002FD8  6FF5               	movwf	(??_TCP_Recv+26)& (0+255),b
  7034  002FDA  51E2               	movf	(??_TCP_Recv+7)& (0+255),w,b
  7035  002FDC  11F2               	iorwf	(??_TCP_Recv+23)& (0+255),w,b
  7036  002FDE  6FF6               	movwf	(??_TCP_Recv+27)& (0+255),b
  7037  002FE0  51DB               	movf	??_TCP_Recv& (0+255),w,b
  7038  002FE2  11F3               	iorwf	(??_TCP_Recv+24)& (0+255),w,b
  7039  002FE4  0101               	movlb	1	; () banked
  7040  002FE6  0012               	return	
  7041  002FE8                     __end_ofPL60:
  7042                           	opt stack 0
  7043  002FE8                     PL110:
  7044                           	opt stack 15
  7045  002FE8  0E00               	movlw	0
  7046  002FEA  14DE               	andwf	postinc2,w,c
  7047  002FEC  6FDF               	movwf	(??_TCP_Recv+4)& (0+255),b
  7048  002FEE  0EFF               	movlw	255
  7049  002FF0  14DE               	andwf	postinc2,w,c
  7050  002FF2  6FE0               	movwf	(??_TCP_Recv+5)& (0+255),b
  7051  002FF4  0E00               	movlw	0
  7052  002FF6  14DE               	andwf	postinc2,w,c
  7053  002FF8  6FE1               	movwf	(??_TCP_Recv+6)& (0+255),b
  7054  002FFA  0E00               	movlw	0
  7055  002FFC  14DE               	andwf	postinc2,w,c
  7056  002FFE  6FE2               	movwf	(??_TCP_Recv+7)& (0+255),b
  7057  003000  C0E1  F0E2         	movff	??_TCP_Recv+6,??_TCP_Recv+7
  7058  003004  C0E0  F0E1         	movff	??_TCP_Recv+5,??_TCP_Recv+6
  7059  003008  C0DF  F0E0         	movff	??_TCP_Recv+4,??_TCP_Recv+5
  7060  00300C  6BDF               	clrf	(??_TCP_Recv+4)& (0+255),b
  7061  00300E  0012               	return	
  7062  003010                     __end_ofPL110:
  7063                           	opt stack 0
  7064  003010                     PL144:
  7065                           	opt stack 15
  7066  003010  C0E4  F0E3         	movff	??_TCP_Recv+9,??_TCP_Recv+8
  7067  003014  C0E5  F0E4         	movff	??_TCP_Recv+10,??_TCP_Recv+9
  7068  003018  C0E6  F0E5         	movff	??_TCP_Recv+11,??_TCP_Recv+10
  7069  00301C  6BE6               	clrf	(??_TCP_Recv+11)& (0+255),b
  7070  00301E  6BE7               	clrf	(??_TCP_Recv+12)& (0+255),b
  7071  003020  51E4               	movf	(??_TCP_Recv+9)& (0+255),w,b
  7072  003022  6FE8               	movwf	(??_TCP_Recv+13)& (0+255),b
  7073  003024  6BE9               	clrf	(??_TCP_Recv+14)& (0+255),b
  7074  003026  6BEA               	clrf	(??_TCP_Recv+15)& (0+255),b
  7075  003028  0C00               	retlw	0
  7076  00302A                     __end_ofPL144:
  7077                           	opt stack 0
  7078  00302A                     PL190:
  7079                           	opt stack 15
  7080  00302A  0100               	movlb	0	; () banked
  7081  00302C  6FDB               	movwf	??_TCP_Recv& (0+255),b
  7082  00302E  6BDC               	clrf	(??_TCP_Recv+1)& (0+255),b
  7083  003030  6BDD               	clrf	(??_TCP_Recv+2)& (0+255),b
  7084  003032  6BDE               	clrf	(??_TCP_Recv+3)& (0+255),b
  7085  003034  C0DB  F0DE         	movff	??_TCP_Recv,??_TCP_Recv+3
  7086  003038  6BDD               	clrf	(??_TCP_Recv+2)& (0+255),b
  7087  00303A  6BDC               	clrf	(??_TCP_Recv+1)& (0+255),b
  7088  00303C  6BDB               	clrf	??_TCP_Recv& (0+255),b
  7089  00303E  0012               	return	
  7090  003040                     __end_ofPL190:
  7091                           	opt stack 0
  7092  003040                     PL270:
  7093                           	opt stack 15
  7094  003040  0009               	tblrd		*+
  7095  003042  CFF5 F0DD          	movff	tablat,??_TCP_Recv+2
  7096  003046  0009               	tblrd		*+
  7097  003048  CFF5 F0DE          	movff	tablat,??_TCP_Recv+3
  7098  00304C  0012               	return	
  7099  00304E                     __end_ofPL270:
  7100                           	opt stack 0
  7101  00304E                     PL318:
  7102                           	opt stack 15
  7103  00304E  0100               	movlb	0	; () banked
  7104  003050  51DC               	movf	(??_TCP_Recv+1)& (0+255),w,b
  7105  003052  11DE               	iorwf	(??_TCP_Recv+3)& (0+255),w,b
  7106  003054  0101               	movlb	1	; () banked
  7107  003056  0012               	return	
  7108  003058                     __end_ofPL318:
  7109                           	opt stack 0
  7110  003058                     PL328:
  7111                           	opt stack 15
  7112  003058  CFEE F0DD          	movff	postinc0,??_TCP_Recv+2
  7113  00305C  CFEE F0DE          	movff	postinc0,??_TCP_Recv+3
  7114  003060  0012               	return	
  7115  003062                     __end_ofPL328:
  7116                           	opt stack 0
  7117  003062                     PL330:
  7118                           	opt stack 15
  7119  003062  6E04               	movwf	ETH_ReadBlock@buffer+1,c
  7120  003064  6A06               	clrf	ETH_ReadBlock@length+1,c
  7121  003066  0E14               	movlw	20
  7122  003068  6E05               	movwf	ETH_ReadBlock@length,c
  7123  00306A  0C14               	retlw	20
  7124  00306C                     __end_ofPL330:
  7125                           	opt stack 0
  7126  00306C                     PL338:
  7127                           	opt stack 15
  7128  00306C  0100               	movlb	0	; () banked
  7129  00306E  51DE               	movf	(??_TCP_Recv+3)& (0+255),w,b
  7130  003070  11F6               	iorwf	(??_TCP_Recv+27)& (0+255),w,b
  7131  003072  0101               	movlb	1	; () banked
  7132  003074  0012               	return	
  7133  003076                     __end_ofPL338:
  7134                           	opt stack 0
  7135  003076                     PL340:
  7136                           	opt stack 15
  7137  003076  0100               	movlb	0	; () banked
  7138  003078  51DC               	movf	(??_TCP_Recv+1)& (0+255),w,b
  7139  00307A  11F4               	iorwf	(??_TCP_Recv+25)& (0+255),w,b
  7140  00307C  0101               	movlb	1	; () banked
  7141  00307E  0012               	return	
  7142  003080                     __end_ofPL340:
  7143                           	opt stack 0
  7144  003080                     PL342:
  7145                           	opt stack 15
  7146  003080  0100               	movlb	0	; () banked
  7147  003082  51DD               	movf	(??_TCP_Recv+2)& (0+255),w,b
  7148  003084  11F5               	iorwf	(??_TCP_Recv+26)& (0+255),w,b
  7149  003086  0101               	movlb	1	; () banked
  7150  003088  0012               	return	
  7151  00308A                     __end_ofPL342:
  7152                           	opt stack 0
  7153  00308A                     PL350:
  7154                           	opt stack 15
  7155  00308A  6BDE               	clrf	(??_TCP_Recv+3)& (0+255),b
  7156  00308C  51DB               	movf	??_TCP_Recv& (0+255),w,b
  7157  00308E  11DD               	iorwf	(??_TCP_Recv+2)& (0+255),w,b
  7158  003090  0101               	movlb	1	; () banked
  7159  003092  0012               	return	
  7160  003094                     __end_ofPL350:
  7161                           	opt stack 0
  7162                           tosu	equ	0xFFF
  7163                           tosh	equ	0xFFE
  7164                           tosl	equ	0xFFD
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           indf0	equ	0xFEF
  7174                           postinc0	equ	0xFEE
  7175                           fsr0h	equ	0xFEA
  7176                           fsr0l	equ	0xFE9
  7177                           wreg	equ	0xFE8
  7178                           postinc1	equ	0xFE6
  7179                           plusw1	equ	0xFE3
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           bsr	equ	0xFE0
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           plusw2	equ	0xFDB
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _TCP_ParseTCPOptions *****************
  7192 ;; Defined at:
  7193 ;;		line 356 in file "../../TCPIP Library/source/tcpv4.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  tcpOptionsSi    2   17[COMRAM] unsigned int 
  7198 ;;  opt             1   16[COMRAM] unsigned char 
  7199 ;;  ret             1   15[COMRAM] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      unsigned char 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2, status,0, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : F/1
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:        6 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    7
  7216 ;; This function calls:
  7217 ;;		_ETH_Dump
  7218 ;;		_ETH_Read16
  7219 ;;		_ETH_Read8
  7220 ;; This function is called by:
  7221 ;;		_TCP_Recv
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text31
  7226  0049D4                     __ptext31:
  7227                           	opt stack 0
  7228  0049D4                     _TCP_ParseTCPOptions:
  7229                           	opt stack 19
  7230                           
  7231                           ; BSR set to: 1
  7232                           ;tcpv4.c: 358: uint8_t opt;
  7233                           ;tcpv4.c: 359: uint16_t tcpOptionsSize;
  7234                           ;tcpv4.c: 360: bool ret;
  7235                           ;tcpv4.c: 362: ret = 0;
  7236                           
  7237                           ;incstack = 0
  7238  0049D4  6A10               	clrf	TCP_ParseTCPOptions@ret,c
  7239                           
  7240                           ; BSR set to: 1
  7241                           ;tcpv4.c: 364: tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeade
      +                          r_t));
  7242  0049D6  39F4               	swapf	(_tcpHeader+12)& (0+255),w,b
  7243  0049D8  0B0F               	andlw	15
  7244  0049DA  6E0E               	movwf	??_TCP_ParseTCPOptions& (0+255),c
  7245  0049DC  6A0F               	clrf	(??_TCP_ParseTCPOptions+1)& (0+255),c
  7246  0049DE  90D8               	bcf	status,0,c
  7247  0049E0  360E               	rlcf	??_TCP_ParseTCPOptions,f,c
  7248  0049E2  360F               	rlcf	??_TCP_ParseTCPOptions+1,f,c
  7249  0049E4  90D8               	bcf	status,0,c
  7250  0049E6  360E               	rlcf	??_TCP_ParseTCPOptions,f,c
  7251  0049E8  360F               	rlcf	??_TCP_ParseTCPOptions+1,f,c
  7252  0049EA  0EEC               	movlw	236
  7253  0049EC  240E               	addwf	??_TCP_ParseTCPOptions,w,c
  7254  0049EE  6E12               	movwf	TCP_ParseTCPOptions@tcpOptionsSize,c
  7255  0049F0  0EFF               	movlw	255
  7256  0049F2  200F               	addwfc	??_TCP_ParseTCPOptions+1,w,c
  7257  0049F4  6E13               	movwf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
  7258                           
  7259                           ;tcpv4.c: 366: if (tcpOptionsSize > 0)
  7260  0049F6  1012               	iorwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
  7261  0049F8  E06C               	bz	l8584
  7262                           
  7263                           ; BSR set to: 1
  7264                           ;tcpv4.c: 367: {
  7265                           ;tcpv4.c: 370: tcpMss = 536;
  7266  0049FA  0E02               	movlw	2
  7267  0049FC  6FE2               	movwf	(_tcpMss+1)& (0+255),b
  7268  0049FE  0E18               	movlw	24
  7269  004A00  6FE1               	movwf	_tcpMss& (0+255),b
  7270                           
  7271                           ; BSR set to: 1
  7272                           ;tcpv4.c: 372: if(tcpHeader.syn)
  7273  004A02  A3F5               	btfss	(_tcpHeader+13)& (0+255),1,b
  7274  004A04  D063               	goto	l8582
  7275  004A06  D05A               	goto	l8580
  7276  004A08                     l8538:
  7277                           
  7278                           ;tcpv4.c: 376: {
  7279                           ;tcpv4.c: 377: opt = ETH_Read8();
  7280  004A08  ECFE  F02E         	call	_ETH_Read8	;wreg free
  7281  004A0C  6E11               	movwf	TCP_ParseTCPOptions@opt,c
  7282                           
  7283                           ;tcpv4.c: 378: switch (opt)
  7284  004A0E  D04F               	goto	l8578
  7285  004A10                     l8540:
  7286                           
  7287                           ;tcpv4.c: 382: if (tcpOptionsSize)
  7288  004A10  5012               	movf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
  7289  004A12  1013               	iorwf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
  7290  004A14  E005               	bz	l8546
  7291                           
  7292                           ;tcpv4.c: 383: {
  7293                           ;tcpv4.c: 385: ETH_Dump(tcpOptionsSize);
  7294  004A16  D861               	call	PL322	;call to abstracted procedure
  7295  004A18  EC27  F02B         	call	_ETH_Dump	;wreg free
  7296                           
  7297                           ; BSR set to: 2
  7298                           ;tcpv4.c: 386: tcpOptionsSize = 0;
  7299  004A1C  6A12               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
  7300  004A1E  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
  7301  004A20                     l8546:
  7302                           
  7303                           ;tcpv4.c: 387: }
  7304                           ;tcpv4.c: 388: ret = 1;
  7305  004A20  0E01               	movlw	1
  7306  004A22  6E10               	movwf	TCP_ParseTCPOptions@ret,c
  7307                           
  7308                           ;tcpv4.c: 389: break;
  7309  004A24  D04B               	goto	l8580
  7310  004A26                     l8548:
  7311                           
  7312                           ;tcpv4.c: 394: if (tcpOptionsSize >= 3)
  7313  004A26  5013               	movf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
  7314  004A28  E103               	bnz	u11870
  7315  004A2A  0E03               	movlw	3
  7316  004A2C  5C12               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
  7317  004A2E  E31E               	bnc	l1175
  7318  004A30                     u11870:
  7319                           
  7320                           ;tcpv4.c: 395: {
  7321                           ;tcpv4.c: 396: opt = ETH_Read8();
  7322  004A30  ECFE  F02E         	call	_ETH_Read8	;wreg free
  7323  004A34  6E11               	movwf	TCP_ParseTCPOptions@opt,c
  7324                           
  7325                           ;tcpv4.c: 397: if (opt == 0x04)
  7326  004A36  0E04               	movlw	4
  7327  004A38  1811               	xorwf	TCP_ParseTCPOptions@opt,w,c
  7328  004A3A  E115               	bnz	l1176
  7329                           
  7330                           ;tcpv4.c: 398: {
  7331                           ;tcpv4.c: 400: tcpMss = ETH_Read16();
  7332  004A3C  ECA7  F02D         	call	_ETH_Read16	;wreg free
  7333  004A40  C003  F1E1         	movff	?_ETH_Read16,_tcpMss
  7334  004A44  C004  F1E2         	movff	?_ETH_Read16+1,_tcpMss+1
  7335                           
  7336                           ;tcpv4.c: 402: tcpOptionsSize = tcpOptionsSize - 3;
  7337  004A48  0EFD               	movlw	253
  7338  004A4A  2612               	addwf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
  7339  004A4C  0EFF               	movlw	255
  7340  004A4E  2213               	addwfc	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
  7341                           
  7342                           ;tcpv4.c: 405: if (tcpMss > 1460u)
  7343  004A50  0EB5               	movlw	181
  7344  004A52  0101               	movlb	1	; () banked
  7345  004A54  5DE1               	subwf	_tcpMss& (0+255),w,b
  7346  004A56  0E05               	movlw	5
  7347  004A58  59E2               	subwfb	(_tcpMss+1)& (0+255),w,b
  7348  004A5A  E3E2               	bnc	l8546
  7349                           
  7350                           ; BSR set to: 1
  7351                           ;tcpv4.c: 406: {
  7352                           ;tcpv4.c: 407: tcpMss = 1460u;
  7353  004A5C  0E05               	movlw	5
  7354  004A5E  6FE2               	movwf	(_tcpMss+1)& (0+255),b
  7355  004A60  0EB4               	movlw	180
  7356  004A62  6FE1               	movwf	_tcpMss& (0+255),b
  7357  004A64  D7DD               	goto	l8546
  7358  004A66                     l1176:
  7359                           
  7360                           ;tcpv4.c: 412: {
  7361                           ;tcpv4.c: 414: ;
  7362                           ;tcpv4.c: 416: tcpOptionsSize = 0;
  7363  004A66  6A12               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
  7364  004A68  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
  7365  004A6A  D028               	goto	l8580
  7366  004A6C                     l1175:
  7367                           
  7368                           ;tcpv4.c: 419: {
  7369                           ;tcpv4.c: 421: tcpOptionsSize = 0;
  7370  004A6C  6A12               	clrf	TCP_ParseTCPOptions@tcpOptionsSize,c
  7371  004A6E  6A13               	clrf	TCP_ParseTCPOptions@tcpOptionsSize+1,c
  7372                           
  7373                           ;tcpv4.c: 422: ret = 0;
  7374  004A70  6A10               	clrf	TCP_ParseTCPOptions@ret,c
  7375  004A72  D024               	goto	l8580
  7376  004A74                     l8562:
  7377                           
  7378                           ;tcpv4.c: 426: ;
  7379                           ;tcpv4.c: 427: opt = ETH_Read8();
  7380  004A74  ECFE  F02E         	call	_ETH_Read8	;wreg free
  7381  004A78  6E11               	movwf	TCP_ParseTCPOptions@opt,c
  7382                           
  7383                           ;tcpv4.c: 428: tcpOptionsSize--;
  7384  004A7A  0612               	decf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
  7385  004A7C  A0D8               	btfss	status,0,c
  7386  004A7E  0613               	decf	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
  7387                           
  7388                           ;tcpv4.c: 430: if (opt > 1)
  7389  004A80  0E01               	movlw	1
  7390  004A82  6411               	cpfsgt	TCP_ParseTCPOptions@opt,c
  7391  004A84  D7F3               	goto	l1175
  7392                           
  7393                           ;tcpv4.c: 431: {
  7394                           ;tcpv4.c: 433: opt = opt - 2;
  7395  004A86  0EFE               	movlw	254
  7396  004A88  2611               	addwf	TCP_ParseTCPOptions@opt,f,c
  7397                           
  7398                           ;tcpv4.c: 434: if (opt <= tcpOptionsSize)
  7399  004A8A  5011               	movf	TCP_ParseTCPOptions@opt,w,c
  7400  004A8C  6E0E               	movwf	??_TCP_ParseTCPOptions& (0+255),c
  7401  004A8E  6A0F               	clrf	(??_TCP_ParseTCPOptions+1)& (0+255),c
  7402  004A90  500E               	movf	??_TCP_ParseTCPOptions,w,c
  7403  004A92  5C12               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
  7404  004A94  500F               	movf	??_TCP_ParseTCPOptions+1,w,c
  7405  004A96  5813               	subwfb	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
  7406  004A98  E3E9               	bnc	l1175
  7407                           
  7408                           ;tcpv4.c: 435: {
  7409                           ;tcpv4.c: 437: ETH_Dump(opt);
  7410  004A9A  C011  F00A         	movff	TCP_ParseTCPOptions@opt,ETH_Dump@length
  7411  004A9E  6A0B               	clrf	ETH_Dump@length+1,c
  7412  004AA0  EC27  F02B         	call	_ETH_Dump	;wreg free
  7413                           
  7414                           ; BSR set to: 2
  7415                           ;tcpv4.c: 438: tcpOptionsSize = tcpOptionsSize - opt;
  7416  004AA4  5011               	movf	TCP_ParseTCPOptions@opt,w,c
  7417  004AA6  5E12               	subwf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
  7418  004AA8  0E00               	movlw	0
  7419  004AAA  5A13               	subwfb	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
  7420  004AAC  D7B9               	goto	l8546
  7421  004AAE                     l8578:
  7422  004AAE  5011               	movf	TCP_ParseTCPOptions@opt,w,c
  7423                           
  7424                           ; Switch size 1, requested type "space"
  7425                           ; Number of cases is 3, Range of values is 0 to 2
  7426                           ; switch strategies available:
  7427                           ; Name         Instructions Cycles
  7428                           ; simple_byte           10     6 (average)
  7429                           ;	Chosen strategy is simple_byte
  7430  004AB0  E0AF               	bz	l8540
  7431  004AB2  0A01               	xorlw	1	; case 1
  7432  004AB4  E003               	bz	l8580
  7433  004AB6  0A03               	xorlw	3	; case 2
  7434  004AB8  E0B6               	bz	l8548
  7435  004ABA  D7DC               	goto	l8562
  7436  004ABC                     l8580:
  7437  004ABC  0612               	decf	TCP_ParseTCPOptions@tcpOptionsSize,f,c
  7438  004ABE  A0D8               	btfss	status,0,c
  7439  004AC0  0613               	decf	TCP_ParseTCPOptions@tcpOptionsSize+1,f,c
  7440  004AC2  2812               	incf	TCP_ParseTCPOptions@tcpOptionsSize,w,c
  7441  004AC4  E1A1               	bnz	l8538
  7442  004AC6  2813               	incf	TCP_ParseTCPOptions@tcpOptionsSize+1,w,c
  7443  004AC8  E006               	bz	l1187
  7444  004ACA  D79E               	goto	l8538
  7445  004ACC                     l8582:
  7446                           
  7447                           ; BSR set to: 1
  7448                           ;tcpv4.c: 459: {
  7449                           ;tcpv4.c: 460: ETH_Dump(tcpOptionsSize);
  7450  004ACC  D806               	call	PL322	;call to abstracted procedure
  7451  004ACE  EC27  F02B         	call	_ETH_Dump	;wreg free
  7452  004AD2                     l8584:
  7453                           
  7454                           ;tcpv4.c: 461: ret = 1;
  7455  004AD2  0E01               	movlw	1
  7456  004AD4  6E10               	movwf	TCP_ParseTCPOptions@ret,c
  7457  004AD6                     l1187:
  7458                           
  7459                           ;tcpv4.c: 466: }
  7460                           ;tcpv4.c: 468: return ret;
  7461  004AD6  5010               	movf	TCP_ParseTCPOptions@ret,w,c
  7462  004AD8  0012               	return		;funcret
  7463  004ADA                     __end_of_TCP_ParseTCPOptions:
  7464                           	opt stack 0
  7465  004ADA                     PL322:
  7466                           	opt stack 19
  7467  004ADA  C012  F00A         	movff	TCP_ParseTCPOptions@tcpOptionsSize,ETH_Dump@length
  7468  004ADE  C013  F00B         	movff	TCP_ParseTCPOptions@tcpOptionsSize+1,ETH_Dump@length+1
  7469  004AE2  0012               	return	
  7470  004AE4                     __end_ofPL322:
  7471                           	opt stack 0
  7472                           tosu	equ	0xFFF
  7473                           tosh	equ	0xFFE
  7474                           tosl	equ	0xFFD
  7475                           pclath	equ	0xFFA
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodh	equ	0xFF4
  7481                           prodl	equ	0xFF3
  7482                           intcon	equ	0xFF2
  7483                           indf0	equ	0xFEF
  7484                           postinc0	equ	0xFEE
  7485                           fsr0h	equ	0xFEA
  7486                           fsr0l	equ	0xFE9
  7487                           wreg	equ	0xFE8
  7488                           postinc1	equ	0xFE6
  7489                           plusw1	equ	0xFE3
  7490                           fsr1h	equ	0xFE2
  7491                           fsr1l	equ	0xFE1
  7492                           bsr	equ	0xFE0
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           plusw2	equ	0xFDB
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function _ETH_Read16 *****************
  7502 ;; Defined at:
  7503 ;;		line 453 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  b               2    4[COMRAM] unsigned int 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  2    2[COMRAM] unsigned int 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2, status,0, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/1
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;Total ram usage:        4 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    4
  7524 ;; This function calls:
  7525 ;;		_SPI_ExchangeByte
  7526 ;; This function is called by:
  7527 ;;		_TCP_ParseTCPOptions
  7528 ;;		_DHCP_Handler
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text32
  7533  005B4E                     __ptext32:
  7534                           	opt stack 0
  7535  005B4E                     _ETH_Read16:
  7536                           	opt stack 21
  7537                           
  7538                           ;incstack = 0
  7539                           ;enc28J60.c: 455: uint16_t b;
  7540                           ;enc28J60.c: 457: do{LATD3 = 0;} while(0);
  7541  005B4E  968C               	bcf	3980,3,c	;volatile
  7542                           
  7543                           ;enc28J60.c: 458: SPI_ExchangeByte(rbm_inst);
  7544  005B50  0E3A               	movlw	58
  7545  005B52  EC42  F02F         	call	_SPI_ExchangeByte
  7546                           
  7547                           ;enc28J60.c: 459: b = SPI_ExchangeByte(0)<< 8;
  7548  005B56  0E00               	movlw	0
  7549  005B58  EC42  F02F         	call	_SPI_ExchangeByte
  7550  005B5C  6E06               	movwf	ETH_Read16@b+1,c
  7551  005B5E  6A05               	clrf	ETH_Read16@b,c
  7552                           
  7553                           ;enc28J60.c: 460: b |= SPI_ExchangeByte(0);
  7554  005B60  0E00               	movlw	0
  7555  005B62  EC42  F02F         	call	_SPI_ExchangeByte
  7556  005B66  1205               	iorwf	ETH_Read16@b,f,c
  7557  005B68  868C               	bsf	3980,3,c	;volatile
  7558                           
  7559                           ;enc28J60.c: 463: return b;
  7560  005B6A  C005  F003         	movff	ETH_Read16@b,?_ETH_Read16
  7561  005B6E  C006  F004         	movff	ETH_Read16@b+1,?_ETH_Read16+1
  7562  005B72  0012               	return		;funcret
  7563  005B74                     __end_of_ETH_Read16:
  7564                           	opt stack 0
  7565                           tosu	equ	0xFFF
  7566                           tosh	equ	0xFFE
  7567                           tosl	equ	0xFFD
  7568                           pclath	equ	0xFFA
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           indf0	equ	0xFEF
  7577                           postinc0	equ	0xFEE
  7578                           fsr0h	equ	0xFEA
  7579                           fsr0l	equ	0xFE9
  7580                           wreg	equ	0xFE8
  7581                           postinc1	equ	0xFE6
  7582                           plusw1	equ	0xFE3
  7583                           fsr1h	equ	0xFE2
  7584                           fsr1l	equ	0xFE1
  7585                           bsr	equ	0xFE0
  7586                           indf2	equ	0xFDF
  7587                           postinc2	equ	0xFDE
  7588                           postdec2	equ	0xFDD
  7589                           plusw2	equ	0xFDB
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _ETH_Dump *****************
  7595 ;; Defined at:
  7596 ;;		line 642 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  length          2    9[COMRAM] unsigned int 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  newRXTail       2   11[COMRAM] unsigned int 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, status,2, status,0, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : F/2
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;Total ram usage:        4 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    6
  7617 ;; This function calls:
  7618 ;;		_ENC28_Rcr16
  7619 ;;		_ENC28_Wcr16
  7620 ;; This function is called by:
  7621 ;;		_IPV4_Packet
  7622 ;;		_TCP_ParseTCPOptions
  7623 ;;		_DHCP_Handler
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           	psect	text33
  7628  00564E                     __ptext33:
  7629                           	opt stack 0
  7630  00564E                     _ETH_Dump:
  7631                           	opt stack 19
  7632                           
  7633                           ;enc28J60.c: 644: uint16_t newRXTail;
  7634                           ;enc28J60.c: 646: length = (rxPacketStatusVector.byteCount <= length) ? rxPacketStatusVe
      +                          ctor.byteCount : length;
  7635                           
  7636                           ;incstack = 0
  7637  00564E  0102               	movlb	2	; () banked
  7638  005650  5128               	movf	_rxPacketStatusVector& (0+255),w,b
  7639  005652  5C0A               	subwf	ETH_Dump@length,w,c
  7640  005654  5129               	movf	(_rxPacketStatusVector+1)& (0+255),w,b
  7641  005656  580B               	subwfb	ETH_Dump@length+1,w,c
  7642  005658  E304               	bnc	l8366
  7643                           
  7644                           ; BSR set to: 2
  7645  00565A  C228  F00A         	movff	_rxPacketStatusVector,ETH_Dump@length
  7646  00565E  C229  F00B         	movff	_rxPacketStatusVector+1,ETH_Dump@length+1
  7647  005662                     l8366:
  7648                           
  7649                           ; BSR set to: 2
  7650                           ;enc28J60.c: 647: if (length) {;
  7651  005662  500A               	movf	ETH_Dump@length,w,c
  7652  005664  100B               	iorwf	ETH_Dump@length+1,w,c
  7653  005666  B4D8               	btfsc	status,2,c
  7654  005668  0012               	return	
  7655                           
  7656                           ; BSR set to: 2
  7657                           ;enc28J60.c: 648: newRXTail = ENC28_Rcr16(J60_ERDPTL);
  7658  00566A  0E00               	movlw	0
  7659  00566C  EC25  F02C         	call	_ENC28_Rcr16
  7660  005670  C005  F00C         	movff	?_ENC28_Rcr16,ETH_Dump@newRXTail
  7661  005674  C006  F00D         	movff	?_ENC28_Rcr16+1,ETH_Dump@newRXTail+1
  7662                           
  7663                           ;enc28J60.c: 649: newRXTail += length;
  7664  005678  500A               	movf	ETH_Dump@length,w,c
  7665  00567A  260C               	addwf	ETH_Dump@newRXTail,f,c
  7666  00567C  500B               	movf	ETH_Dump@length+1,w,c
  7667  00567E  220D               	addwfc	ETH_Dump@newRXTail+1,f,c
  7668                           
  7669                           ;enc28J60.c: 651: ENC28_Wcr16(J60_ERDPTL, newRXTail);
  7670  005680  C00C  F005         	movff	ETH_Dump@newRXTail,ENC28_Wcr16@v
  7671  005684  C00D  F006         	movff	ETH_Dump@newRXTail+1,ENC28_Wcr16@v+1
  7672  005688  0E00               	movlw	0
  7673  00568A  EC9A  F02C         	call	_ENC28_Wcr16
  7674                           
  7675                           ;enc28J60.c: 653: rxPacketStatusVector.byteCount -= length;
  7676  00568E  500A               	movf	ETH_Dump@length,w,c
  7677  005690  0102               	movlb	2	; () banked
  7678  005692  5F28               	subwf	_rxPacketStatusVector& (0+255),f,b
  7679  005694  500B               	movf	ETH_Dump@length+1,w,c
  7680  005696  5B29               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
  7681                           
  7682                           ; BSR set to: 2
  7683  005698  0012               	return		;funcret
  7684  00569A                     __end_of_ETH_Dump:
  7685                           	opt stack 0
  7686                           tosu	equ	0xFFF
  7687                           tosh	equ	0xFFE
  7688                           tosl	equ	0xFFD
  7689                           pclath	equ	0xFFA
  7690                           tblptru	equ	0xFF8
  7691                           tblptrh	equ	0xFF7
  7692                           tblptrl	equ	0xFF6
  7693                           tablat	equ	0xFF5
  7694                           prodh	equ	0xFF4
  7695                           prodl	equ	0xFF3
  7696                           intcon	equ	0xFF2
  7697                           indf0	equ	0xFEF
  7698                           postinc0	equ	0xFEE
  7699                           fsr0h	equ	0xFEA
  7700                           fsr0l	equ	0xFE9
  7701                           wreg	equ	0xFE8
  7702                           postinc1	equ	0xFE6
  7703                           plusw1	equ	0xFE3
  7704                           fsr1h	equ	0xFE2
  7705                           fsr1l	equ	0xFE1
  7706                           bsr	equ	0xFE0
  7707                           indf2	equ	0xFDF
  7708                           postinc2	equ	0xFDE
  7709                           postdec2	equ	0xFDD
  7710                           plusw2	equ	0xFDB
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _TCP_FiniteStateMachine *****************
  7716 ;; Defined at:
  7717 ;;		line 602 in file "../../TCPIP Library/source/tcpv4.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  notAckBytes     2  113[BANK0 ] unsigned int 
  7722 ;;  nextState       1  116[BANK0 ] enum E638
  7723 ;;  event           1  115[BANK0 ] enum E651
  7724 ;;  ret             1  112[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      unsigned char 
  7727 ;; Registers used:
  7728 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : F/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;Total ram usage:       17 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:   11
  7741 ;; This function calls:
  7742 ;;		_TCB_Reset
  7743 ;;		_TCP_PayloadSave
  7744 ;;		_TCP_Snd
  7745 ;; This function is called by:
  7746 ;;		_TCP_Recv
  7747 ;;		_TCP_Update
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text34
  7752  0010B4                     __ptext34:
  7753                           	opt stack 0
  7754  0010B4                     _TCP_FiniteStateMachine:
  7755                           	opt stack 17
  7756                           
  7757                           ;tcpv4.c: 604: uint16_t notAckBytes;
  7758                           ;tcpv4.c: 605: bool ret = 0;
  7759                           
  7760                           ; BSR set to: 2
  7761                           ;incstack = 0
  7762  0010B4  0100               	movlb	0	; () banked
  7763  0010B6  6BD0               	clrf	TCP_FiniteStateMachine@ret& (0+255),b
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;tcpv4.c: 607: tcp_fsm_states_t nextState = currentTCB->fsmState;
  7767  0010B8  0E2A               	movlw	42
  7768  0010BA  EC08  F011         	call	PL20	;call to abstracted procedure
  7769  0010BE  64F7               	cpfsgt	tblptrh,c
  7770  0010C0  D003               	bra	u11937
  7771  0010C2  0008               	tblrd		*
  7772  0010C4  50F5               	movf	tablat,w,c
  7773  0010C6  D003               	bra	u11930
  7774  0010C8                     u11937:
  7775  0010C8  EC3C  F011         	call	PL24	;call to abstracted procedure
  7776  0010CC  50EF               	movf	indf0,w,c
  7777  0010CE                     u11930:
  7778  0010CE  0100               	movlb	0	; () banked
  7779  0010D0  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
  7780                           
  7781                           ;tcpv4.c: 608: tcpEvent_t event = currentTCB->connectionEvent;
  7782  0010D2  0E2B               	movlw	43
  7783  0010D4  EC08  F011         	call	PL20	;call to abstracted procedure
  7784  0010D8  64F7               	cpfsgt	tblptrh,c
  7785  0010DA  D003               	bra	u11947
  7786  0010DC  0008               	tblrd		*
  7787  0010DE  50F5               	movf	tablat,w,c
  7788  0010E0  D003               	bra	u11940
  7789  0010E2                     u11947:
  7790  0010E2  EC3C  F011         	call	PL24	;call to abstracted procedure
  7791  0010E6  50EF               	movf	indf0,w,c
  7792  0010E8                     u11940:
  7793  0010E8  0100               	movlb	0	; () banked
  7794  0010EA  6FD3               	movwf	TCP_FiniteStateMachine@event& (0+255),b
  7795                           
  7796                           ;tcpv4.c: 610: switch (currentTCB->fsmState)
  7797  0010EC  EFC5  F010         	goto	l8932
  7798  0010F0                     l8594:
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;tcpv4.c: 616: ;
  7802                           ;tcpv4.c: 619: currentTCB->destIP = receivedRemoteAddress;
  7803  0010F0  0E02               	movlw	2
  7804  0010F2  EC08  F011         	call	PL20	;call to abstracted procedure
  7805  0010F6  64F7               	cpfsgt	tblptrh,c
  7806  0010F8  D00D               	bra	u11957
  7807  0010FA  C1CC  FFF5         	movff	_receivedRemoteAddress,tablat
  7808  0010FE  000D               	tblwt		*+
  7809  001100  C1CD  FFF5         	movff	_receivedRemoteAddress+1,tablat
  7810  001104  000D               	tblwt		*+
  7811  001106  C1CE  FFF5         	movff	_receivedRemoteAddress+2,tablat
  7812  00110A  000D               	tblwt		*+
  7813  00110C  C1CF  FFF5         	movff	_receivedRemoteAddress+3,tablat
  7814  001110  000C               	tblwt		*
  7815  001112  D00A               	bra	u11950
  7816  001114                     u11957:
  7817  001114  EC3C  F011         	call	PL24	;call to abstracted procedure
  7818  001118  C1CC  FFEE         	movff	_receivedRemoteAddress,postinc0
  7819  00111C  C1CD  FFEE         	movff	_receivedRemoteAddress+1,postinc0
  7820  001120  C1CE  FFEE         	movff	_receivedRemoteAddress+2,postinc0
  7821  001124  C1CF  FFEF         	movff	_receivedRemoteAddress+3,indf0
  7822  001128                     u11950:
  7823                           
  7824                           ;tcpv4.c: 620: currentTCB->destPort = tcpHeader.sourcePort;
  7825  001128  0E06               	movlw	6
  7826  00112A  EC08  F011         	call	PL20	;call to abstracted procedure
  7827  00112E  64F7               	cpfsgt	tblptrh,c
  7828  001130  D007               	bra	u11967
  7829  001132  C1E8  FFF5         	movff	_tcpHeader,tablat
  7830  001136  000D               	tblwt		*+
  7831  001138  C1E9  FFF5         	movff	_tcpHeader+1,tablat
  7832  00113C  000C               	tblwt		*
  7833  00113E  D006               	bra	u11960
  7834  001140                     u11967:
  7835  001140  EC3C  F011         	call	PL24	;call to abstracted procedure
  7836  001144  C1E8  FFEE         	movff	_tcpHeader,postinc0
  7837  001148  C1E9  FFEF         	movff	_tcpHeader+1,indf0
  7838  00114C                     u11960:
  7839                           
  7840                           ;tcpv4.c: 623: currentTCB->localLastAck = 0;
  7841  00114C  0E14               	movlw	20
  7842  00114E  EC08  F011         	call	PL20	;call to abstracted procedure
  7843  001152  64F7               	cpfsgt	tblptrh,c
  7844  001154  D007               	bra	u11977
  7845  001156  6AF5               	clrf	tablat,c
  7846  001158  000D               	tblwt		*+
  7847  00115A  6AF5               	clrf	tablat,c
  7848  00115C  000D               	tblwt		*+
  7849  00115E  ECAB  F011         	call	PL58	;call to abstracted procedure
  7850  001162  D004               	bra	u11970
  7851  001164                     u11977:
  7852  001164  EC3C  F011         	call	PL24	;call to abstracted procedure
  7853  001168  ECF0  F011         	call	PL92	;call to abstracted procedure
  7854  00116C                     u11970:
  7855                           
  7856                           ;tcpv4.c: 625: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
  7857  00116C  0E08               	movlw	8
  7858  00116E  EC08  F011         	call	PL20	;call to abstracted procedure
  7859  001172  64F7               	cpfsgt	tblptrh,c
  7860  001174  D003               	bra	u11987
  7861  001176  ECB0  F011         	call	PL66	;call to abstracted procedure
  7862  00117A  D004               	bra	u11980
  7863  00117C                     u11987:
  7864  00117C  EC3C  F011         	call	PL24	;call to abstracted procedure
  7865  001180  ECFE  F011         	call	PL98	;call to abstracted procedure
  7866  001184                     u11980:
  7867                           
  7868                           ;tcpv4.c: 626: currentTCB->remoteAck = currentTCB->remoteSeqno + 1;
  7869  001184  0E08               	movlw	8
  7870  001186  EC08  F011         	call	PL20	;call to abstracted procedure
  7871  00118A  64F7               	cpfsgt	tblptrh,c
  7872  00118C  D003               	bra	u11997
  7873  00118E  EC53  F011         	call	PL30	;call to abstracted procedure
  7874  001192  D004               	bra	u11990
  7875  001194                     u11997:
  7876  001194  EC3C  F011         	call	PL24	;call to abstracted procedure
  7877  001198  EC99  F011         	call	PL46	;call to abstracted procedure
  7878  00119C                     u11990:
  7879  00119C  EC8B  F011         	call	PL44	;call to abstracted procedure
  7880  0011A0  0E0C               	movlw	12
  7881  0011A2  ECA6  F011         	call	PL54	;call to abstracted procedure
  7882  0011A6  ECF0  F01E         	call	PL48	;call to abstracted procedure
  7883  0011AA  EC07  F012         	call	PL100	;call to abstracted procedure
  7884  0011AE  64F7               	cpfsgt	tblptrh,c
  7885  0011B0  D003               	bra	u12007
  7886  0011B2  ECBD  F011         	call	PL68	;call to abstracted procedure
  7887  0011B6  D004               	bra	u12000
  7888  0011B8                     u12007:
  7889  0011B8  EC3C  F011         	call	PL24	;call to abstracted procedure
  7890  0011BC  ECF5  F011         	call	PL96	;call to abstracted procedure
  7891  0011C0                     u12000:
  7892                           
  7893                           ;tcpv4.c: 629: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
  7894  0011C0  EC77  F011         	call	PL38	;call to abstracted procedure
  7895  0011C4  EC66  F011         	call	PL34	;call to abstracted procedure
  7896  0011C8  64F7               	cpfsgt	tblptrh,c
  7897  0011CA  D003               	bra	u12017
  7898  0011CC  ECCA  F011         	call	PL78	;call to abstracted procedure
  7899  0011D0  D004               	bra	u12010
  7900  0011D2                     u12017:
  7901  0011D2  EC3C  F011         	call	PL24	;call to abstracted procedure
  7902  0011D6  EC29  F012         	call	PL122	;call to abstracted procedure
  7903  0011DA                     u12010:
  7904                           
  7905                           ;tcpv4.c: 630: currentTCB->mss = tcpMss;
  7906  0011DA  0E1C               	movlw	28
  7907  0011DC  EC08  F011         	call	PL20	;call to abstracted procedure
  7908  0011E0  64F7               	cpfsgt	tblptrh,c
  7909  0011E2  D003               	bra	u12027
  7910  0011E4  EC2E  F012         	call	PL154	;call to abstracted procedure
  7911  0011E8  D004               	bra	u12020
  7912  0011EA                     u12027:
  7913  0011EA  EC3C  F011         	call	PL24	;call to abstracted procedure
  7914  0011EE  EC52  F012         	call	PL244	;call to abstracted procedure
  7915  0011F2                     u12020:
  7916                           
  7917                           ;tcpv4.c: 633: currentTCB->flags = 0x02U | 0x10U;
  7918  0011F2  0E35               	movlw	53
  7919  0011F4  EC08  F011         	call	PL20	;call to abstracted procedure
  7920  0011F8  64F7               	cpfsgt	tblptrh,c
  7921  0011FA  D004               	bra	u12037
  7922  0011FC  0E12               	movlw	18
  7923  0011FE  6EF5               	movwf	tablat,c
  7924  001200  000C               	tblwt		*
  7925  001202  D004               	bra	u12030
  7926  001204                     u12037:
  7927  001204  EC3C  F011         	call	PL24	;call to abstracted procedure
  7928  001208  0E12               	movlw	18
  7929  00120A  6EEF               	movwf	indf0,c
  7930  00120C                     u12030:
  7931                           
  7932                           ;tcpv4.c: 634: currentTCB->timeout = ((unsigned long)1*2);
  7933  00120C  0E30               	movlw	48
  7934  00120E  EC08  F011         	call	PL20	;call to abstracted procedure
  7935  001212  64F7               	cpfsgt	tblptrh,c
  7936  001214  D003               	bra	u12047
  7937  001216  ECE5  F011         	call	PL84	;call to abstracted procedure
  7938  00121A  D004               	bra	u12040
  7939  00121C                     u12047:
  7940  00121C  EC3C  F011         	call	PL24	;call to abstracted procedure
  7941  001220  EC35  F012         	call	PL214	;call to abstracted procedure
  7942  001224                     u12040:
  7943                           
  7944                           ;tcpv4.c: 635: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
  7945  001224  0E32               	movlw	50
  7946  001226  EC08  F011         	call	PL20	;call to abstracted procedure
  7947  00122A  64F7               	cpfsgt	tblptrh,c
  7948  00122C  D003               	bra	u12057
  7949  00122E  ECE5  F011         	call	PL84	;call to abstracted procedure
  7950  001232  D004               	bra	u12050
  7951  001234                     u12057:
  7952  001234  EC3C  F011         	call	PL24	;call to abstracted procedure
  7953  001238  EC35  F012         	call	PL214	;call to abstracted procedure
  7954  00123C                     u12050:
  7955                           
  7956                           ;tcpv4.c: 636: currentTCB->timeoutsCount = (3u);
  7957  00123C  0E34               	movlw	52
  7958  00123E  EC08  F011         	call	PL20	;call to abstracted procedure
  7959  001242  64F7               	cpfsgt	tblptrh,c
  7960  001244  D004               	bra	u12067
  7961  001246  0E03               	movlw	3
  7962  001248  6EF5               	movwf	tablat,c
  7963  00124A  000C               	tblwt		*
  7964  00124C  D004               	bra	u12060
  7965  00124E                     u12067:
  7966  00124E  EC3C  F011         	call	PL24	;call to abstracted procedure
  7967  001252  0E03               	movlw	3
  7968  001254  6EEF               	movwf	indf0,c
  7969  001256                     u12060:
  7970  001256                     l8608:
  7971                           
  7972                           ;tcpv4.c: 638: TCP_Snd(currentTCB);
  7973  001256  ECEB  F011         	call	PL90	;call to abstracted procedure
  7974  00125A  ECA2  F012         	call	_TCP_Snd	;wreg free
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;tcpv4.c: 639: nextState = SYN_RECEIVED;
  7978  00125E  0E03               	movlw	3
  7979  001260  EFDC  F00F         	goto	L12
  7980  001264                     l1227:
  7981                           
  7982                           ;tcpv4.c: 642: ;
  7983                           ;tcpv4.c: 643: nextState = CLOSE;
  7984  001264  0100               	movlb	0	; () banked
  7985  001266  6BD4               	clrf	TCP_FiniteStateMachine@nextState& (0+255),b
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;tcpv4.c: 644: TCB_Reset(currentTCB);
  7989  001268  C1D5  F002         	movff	_currentTCB,TCB_Reset@tcbPtr
  7990  00126C  C1D6  F003         	movff	_currentTCB+1,TCB_Reset@tcbPtr+1
  7991  001270  EC41  F022         	call	_TCB_Reset	;wreg free
  7992                           
  7993                           ;tcpv4.c: 645: break;
  7994  001274  EFEF  F010         	goto	l8934
  7995  001278                     l8616:
  7996  001278  0100               	movlb	0	; () banked
  7997  00127A  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
  7998                           
  7999                           ; Switch size 1, requested type "space"
  8000                           ; Number of cases is 2, Range of values is 0 to 3
  8001                           ; switch strategies available:
  8002                           ; Name         Instructions Cycles
  8003                           ; simple_byte            7     4 (average)
  8004                           ;	Chosen strategy is simple_byte
  8005  00127C  E0F3               	bz	l1227
  8006  00127E  0A03               	xorlw	3	; case 3
  8007  001280  E101 D736          	bz	l8594
  8008                           
  8009                           ;tcpv4.c: 650: break;
  8010  001284  EFEF  F010         	goto	l8934
  8011  001288                     l8618:
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;tcpv4.c: 655: ;
  8015                           ;tcpv4.c: 657: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
  8016  001288  0E08               	movlw	8
  8017  00128A  EC08  F011         	call	PL20	;call to abstracted procedure
  8018  00128E  64F7               	cpfsgt	tblptrh,c
  8019  001290  D003               	bra	u12077
  8020  001292  ECB0  F011         	call	PL66	;call to abstracted procedure
  8021  001296  D004               	bra	u12070
  8022  001298                     u12077:
  8023  001298  EC3C  F011         	call	PL24	;call to abstracted procedure
  8024  00129C  ECFE  F011         	call	PL98	;call to abstracted procedure
  8025  0012A0                     u12070:
  8026                           
  8027                           ;tcpv4.c: 658: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
  8028  0012A0  ECA2  F011         	call	PL50	;call to abstracted procedure
  8029  0012A4  EC19  F011         	call	PL22	;call to abstracted procedure
  8030  0012A8  64F7               	cpfsgt	tblptrh,c
  8031  0012AA  D005               	bra	u12087
  8032  0012AC  ECD1  F011         	call	PL80	;call to abstracted procedure
  8033  0012B0  ECCA  F011         	call	PL78	;call to abstracted procedure
  8034  0012B4  D004               	bra	u12080
  8035  0012B6                     u12087:
  8036  0012B6  EC3C  F011         	call	PL24	;call to abstracted procedure
  8037  0012BA  EC14  F012         	call	PL108	;call to abstracted procedure
  8038  0012BE                     u12080:
  8039                           
  8040                           ;tcpv4.c: 661: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
  8041  0012BE  EC77  F011         	call	PL38	;call to abstracted procedure
  8042  0012C2  EC66  F011         	call	PL34	;call to abstracted procedure
  8043  0012C6  64F7               	cpfsgt	tblptrh,c
  8044  0012C8  D003               	bra	u12097
  8045  0012CA  ECCA  F011         	call	PL78	;call to abstracted procedure
  8046  0012CE  D004               	bra	u12090
  8047  0012D0                     u12097:
  8048  0012D0  EC3C  F011         	call	PL24	;call to abstracted procedure
  8049  0012D4  EC29  F012         	call	PL122	;call to abstracted procedure
  8050  0012D8                     u12090:
  8051                           
  8052                           ;tcpv4.c: 662: currentTCB->mss = tcpMss;
  8053  0012D8  0E1C               	movlw	28
  8054  0012DA  EC08  F011         	call	PL20	;call to abstracted procedure
  8055  0012DE  64F7               	cpfsgt	tblptrh,c
  8056  0012E0  D003               	bra	u12107
  8057  0012E2  EC2E  F012         	call	PL154	;call to abstracted procedure
  8058  0012E6  D004               	bra	u12100
  8059  0012E8                     u12107:
  8060  0012E8  EC3C  F011         	call	PL24	;call to abstracted procedure
  8061  0012EC  EC52  F012         	call	PL244	;call to abstracted procedure
  8062  0012F0                     u12100:
  8063                           
  8064                           ;tcpv4.c: 665: currentTCB->timeout = ((unsigned long)1*2);
  8065  0012F0  0E30               	movlw	48
  8066  0012F2  EC08  F011         	call	PL20	;call to abstracted procedure
  8067  0012F6  64F7               	cpfsgt	tblptrh,c
  8068  0012F8  D003               	bra	u12117
  8069  0012FA  ECE5  F011         	call	PL84	;call to abstracted procedure
  8070  0012FE  D004               	bra	u12110
  8071  001300                     u12117:
  8072  001300  EC3C  F011         	call	PL24	;call to abstracted procedure
  8073  001304  EC35  F012         	call	PL214	;call to abstracted procedure
  8074  001308                     u12110:
  8075                           
  8076                           ;tcpv4.c: 666: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
  8077  001308  0E32               	movlw	50
  8078  00130A  EC08  F011         	call	PL20	;call to abstracted procedure
  8079  00130E  64F7               	cpfsgt	tblptrh,c
  8080  001310  D003               	bra	u12127
  8081  001312  ECE5  F011         	call	PL84	;call to abstracted procedure
  8082  001316  D004               	bra	u12120
  8083  001318                     u12127:
  8084  001318  EC3C  F011         	call	PL24	;call to abstracted procedure
  8085  00131C  EC35  F012         	call	PL214	;call to abstracted procedure
  8086  001320                     u12120:
  8087                           
  8088                           ;tcpv4.c: 667: currentTCB->timeoutsCount = (3u);
  8089  001320  0E34               	movlw	52
  8090  001322  EC08  F011         	call	PL20	;call to abstracted procedure
  8091  001326  64F7               	cpfsgt	tblptrh,c
  8092  001328  D004               	bra	u12137
  8093  00132A  0E03               	movlw	3
  8094  00132C  6EF5               	movwf	tablat,c
  8095  00132E  000C               	tblwt		*
  8096  001330  D004               	bra	u12130
  8097  001332                     u12137:
  8098  001332  EC3C  F011         	call	PL24	;call to abstracted procedure
  8099  001336  0E03               	movlw	3
  8100  001338  6EEF               	movwf	indf0,c
  8101  00133A                     u12130:
  8102                           
  8103                           ;tcpv4.c: 668: currentTCB->flags = 0x02U | 0x10U;
  8104  00133A  0E35               	movlw	53
  8105  00133C  EC08  F011         	call	PL20	;call to abstracted procedure
  8106  001340  64F7               	cpfsgt	tblptrh,c
  8107  001342  D004               	bra	u12147
  8108  001344  0E12               	movlw	18
  8109  001346  6EF5               	movwf	tablat,c
  8110  001348  000C               	tblwt		*
  8111  00134A  D004               	bra	u12140
  8112  00134C                     u12147:
  8113  00134C  EC3C  F011         	call	PL24	;call to abstracted procedure
  8114  001350  0E12               	movlw	18
  8115  001352  6EEF               	movwf	indf0,c
  8116  001354                     u12140:
  8117  001354  D780               	goto	l8608
  8118  001356                     l8636:
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;tcpv4.c: 676: ;
  8122                           ;tcpv4.c: 678: currentTCB->timeout = 0;
  8123  001356  0E30               	movlw	48
  8124  001358  EC08  F011         	call	PL20	;call to abstracted procedure
  8125  00135C  64F7               	cpfsgt	tblptrh,c
  8126  00135E  D003               	bra	u12157
  8127  001360  ECAB  F011         	call	PL58	;call to abstracted procedure
  8128  001364  D004               	bra	u12150
  8129  001366                     u12157:
  8130  001366  EC3C  F011         	call	PL24	;call to abstracted procedure
  8131  00136A  6AEE               	clrf	postinc0,c
  8132  00136C  6AEF               	clrf	indf0,c
  8133  00136E                     u12150:
  8134                           
  8135                           ;tcpv4.c: 680: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
  8136  00136E  0E10               	movlw	16
  8137  001370  EC08  F011         	call	PL20	;call to abstracted procedure
  8138  001374  64F7               	cpfsgt	tblptrh,c
  8139  001376  D003               	bra	u12167
  8140  001378  EC53  F011         	call	PL30	;call to abstracted procedure
  8141  00137C  D004               	bra	u12160
  8142  00137E                     u12167:
  8143  00137E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8144  001382  EC99  F011         	call	PL46	;call to abstracted procedure
  8145  001386                     u12160:
  8146  001386  EC8B  F011         	call	PL44	;call to abstracted procedure
  8147  00138A  EC43  F012         	call	PL236	;call to abstracted procedure
  8148  00138E  E179               	bnz	l8650
  8149  001390  EC57  F012         	call	PL246	;call to abstracted procedure
  8150  001394  E176               	bnz	l8650
  8151  001396  EC5C  F012         	call	PL248	;call to abstracted procedure
  8152  00139A  E173               	bnz	l8650
  8153  00139C  EC69  F012         	call	PL254	;call to abstracted procedure
  8154  0013A0  A4D8               	btfss	status,2,c
  8155  0013A2                     u12171:
  8156  0013A2  D06F               	goto	l8650
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;tcpv4.c: 681: {
  8160                           ;tcpv4.c: 683: currentTCB->localSeqno = currentTCB->localSeqno + 1;
  8161  0013A4  0E10               	movlw	16
  8162  0013A6  EC08  F011         	call	PL20	;call to abstracted procedure
  8163  0013AA  64F7               	cpfsgt	tblptrh,c
  8164  0013AC  D003               	bra	u12187
  8165  0013AE  EC53  F011         	call	PL30	;call to abstracted procedure
  8166  0013B2  D004               	bra	u12180
  8167  0013B4                     u12187:
  8168  0013B4  EC3C  F011         	call	PL24	;call to abstracted procedure
  8169  0013B8  EC99  F011         	call	PL46	;call to abstracted procedure
  8170  0013BC                     u12180:
  8171  0013BC  EC8B  F011         	call	PL44	;call to abstracted procedure
  8172  0013C0  EC41  F011         	call	PL26	;call to abstracted procedure
  8173  0013C4  64F7               	cpfsgt	tblptrh,c
  8174  0013C6  D003               	bra	u12197
  8175  0013C8  ECBD  F011         	call	PL68	;call to abstracted procedure
  8176  0013CC  D004               	bra	u12190
  8177  0013CE                     u12197:
  8178  0013CE  EC3C  F011         	call	PL24	;call to abstracted procedure
  8179  0013D2  ECF5  F011         	call	PL96	;call to abstracted procedure
  8180  0013D6                     u12190:
  8181                           
  8182                           ;tcpv4.c: 684: currentTCB->flags = 0x10U;
  8183  0013D6  0E35               	movlw	53
  8184  0013D8  EC08  F011         	call	PL20	;call to abstracted procedure
  8185  0013DC  64F7               	cpfsgt	tblptrh,c
  8186  0013DE  D004               	bra	u12207
  8187  0013E0  0E10               	movlw	16
  8188  0013E2  6EF5               	movwf	tablat,c
  8189  0013E4  000C               	tblwt		*
  8190  0013E6  D004               	bra	u12200
  8191  0013E8                     u12207:
  8192  0013E8  EC3C  F011         	call	PL24	;call to abstracted procedure
  8193  0013EC  0E10               	movlw	16
  8194  0013EE  6EEF               	movwf	indf0,c
  8195  0013F0                     u12200:
  8196                           
  8197                           ;tcpv4.c: 687: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
  8198  0013F0  0E08               	movlw	8
  8199  0013F2  EC08  F011         	call	PL20	;call to abstracted procedure
  8200  0013F6  64F7               	cpfsgt	tblptrh,c
  8201  0013F8  D003               	bra	u12217
  8202  0013FA  ECB0  F011         	call	PL66	;call to abstracted procedure
  8203  0013FE  D004               	bra	u12210
  8204  001400                     u12217:
  8205  001400  EC3C  F011         	call	PL24	;call to abstracted procedure
  8206  001404  ECFE  F011         	call	PL98	;call to abstracted procedure
  8207  001408                     u12210:
  8208                           
  8209                           ;tcpv4.c: 689: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
  8210  001408  ECA2  F011         	call	PL50	;call to abstracted procedure
  8211  00140C  EC19  F011         	call	PL22	;call to abstracted procedure
  8212  001410  64F7               	cpfsgt	tblptrh,c
  8213  001412  D005               	bra	u12227
  8214  001414  ECD1  F011         	call	PL80	;call to abstracted procedure
  8215  001418  ECCA  F011         	call	PL78	;call to abstracted procedure
  8216  00141C  D004               	bra	u12220
  8217  00141E                     u12227:
  8218  00141E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8219  001422  EC14  F012         	call	PL108	;call to abstracted procedure
  8220  001426                     u12220:
  8221                           
  8222                           ;tcpv4.c: 691: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
  8223  001426  EC77  F011         	call	PL38	;call to abstracted procedure
  8224  00142A  EC66  F011         	call	PL34	;call to abstracted procedure
  8225  00142E  64F7               	cpfsgt	tblptrh,c
  8226  001430  D003               	bra	u12237
  8227  001432  ECCA  F011         	call	PL78	;call to abstracted procedure
  8228  001436  D004               	bra	u12230
  8229  001438                     u12237:
  8230  001438  EC3C  F011         	call	PL24	;call to abstracted procedure
  8231  00143C  EC29  F012         	call	PL122	;call to abstracted procedure
  8232  001440                     u12230:
  8233                           
  8234                           ;tcpv4.c: 692: currentTCB->mss = tcpMss;
  8235  001440  0E1C               	movlw	28
  8236  001442  EC08  F011         	call	PL20	;call to abstracted procedure
  8237  001446  64F7               	cpfsgt	tblptrh,c
  8238  001448  D003               	bra	u12247
  8239  00144A  EC2E  F012         	call	PL154	;call to abstracted procedure
  8240  00144E  D004               	bra	u12240
  8241  001450                     u12247:
  8242  001450  EC3C  F011         	call	PL24	;call to abstracted procedure
  8243  001454  EC52  F012         	call	PL244	;call to abstracted procedure
  8244  001458                     u12240:
  8245                           
  8246                           ;tcpv4.c: 694: if(TCP_Snd(currentTCB))
  8247  001458  ECEB  F011         	call	PL90	;call to abstracted procedure
  8248  00145C  ECA2  F012         	call	_TCP_Snd	;wreg free
  8249  001460  0900               	iorlw	0
  8250  001462  E102 EFEF  F010    	bz	l8934
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;tcpv4.c: 695: {
  8254                           ;tcpv4.c: 696: nextState = ESTABLISHED;
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;tcpv4.c: 697: currentTCB->socketState = SOCKET_CONNECTED;
  8258  001468  EC1D  F012         	call	PL114	;call to abstracted procedure
  8259  00146C  EC08  F011         	call	PL20	;call to abstracted procedure
  8260  001470  64F7               	cpfsgt	tblptrh,c
  8261  001472  D004               	bra	u12267
  8262  001474  0E03               	movlw	3
  8263  001476  6EF5               	movwf	tablat,c
  8264  001478  000C               	tblwt		*
  8265  00147A  D001               	bra	u12260
  8266  00147C                     u12267:
  8267  00147C  D245               	goto	u12757
  8268  00147E                     u12260:
  8269  00147E  EFEF  F010         	goto	l8934
  8270  001482                     l8650:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;tcpv4.c: 700: else
  8274                           ;tcpv4.c: 701: {
  8275                           ;tcpv4.c: 703: currentTCB->localSeqno = tcpHeader.ackNumber;
  8276  001482  0E10               	movlw	16
  8277  001484  EC08  F011         	call	PL20	;call to abstracted procedure
  8278  001488  64F7               	cpfsgt	tblptrh,c
  8279  00148A  D003               	bra	u12277
  8280  00148C  ECD8  F011         	call	PL82	;call to abstracted procedure
  8281  001490  D004               	bra	u12270
  8282  001492                     u12277:
  8283  001492  EC3C  F011         	call	PL24	;call to abstracted procedure
  8284  001496  EC20  F012         	call	PL116	;call to abstracted procedure
  8285  00149A                     u12270:
  8286                           
  8287                           ;tcpv4.c: 704: currentTCB->flags = 0x04U | 0x10U;
  8288  00149A  0E35               	movlw	53
  8289  00149C  EC08  F011         	call	PL20	;call to abstracted procedure
  8290  0014A0  64F7               	cpfsgt	tblptrh,c
  8291  0014A2  D004               	bra	u12287
  8292  0014A4  0E14               	movlw	20
  8293  0014A6  6EF5               	movwf	tablat,c
  8294  0014A8  000C               	tblwt		*
  8295  0014AA  D004               	bra	u12280
  8296  0014AC                     u12287:
  8297  0014AC  EC3C  F011         	call	PL24	;call to abstracted procedure
  8298  0014B0  0E14               	movlw	20
  8299  0014B2  6EEF               	movwf	indf0,c
  8300  0014B4                     u12280:
  8301                           
  8302                           ;tcpv4.c: 705: if(TCP_Snd(currentTCB))
  8303  0014B4  ECEB  F011         	call	PL90	;call to abstracted procedure
  8304  0014B8  ECA2  F012         	call	_TCP_Snd	;wreg free
  8305  0014BC                     L8:
  8306  0014BC  0900               	iorlw	0
  8307  0014BE  E001 D6D1          	bnz	l1227
  8308  0014C2  EFEF  F010         	goto	l8934
  8309  0014C6                     l8658:
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;tcpv4.c: 713: ;
  8313                           ;tcpv4.c: 715: currentTCB->timeout = 0;
  8314  0014C6  0E30               	movlw	48
  8315  0014C8  EC08  F011         	call	PL20	;call to abstracted procedure
  8316  0014CC  64F7               	cpfsgt	tblptrh,c
  8317  0014CE  D003               	bra	u12307
  8318  0014D0  ECAB  F011         	call	PL58	;call to abstracted procedure
  8319  0014D4  D004               	bra	u12300
  8320  0014D6                     u12307:
  8321  0014D6  EC3C  F011         	call	PL24	;call to abstracted procedure
  8322  0014DA  6AEE               	clrf	postinc0,c
  8323  0014DC  6AEF               	clrf	indf0,c
  8324  0014DE                     u12300:
  8325                           
  8326                           ;tcpv4.c: 717: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
  8327  0014DE  0E10               	movlw	16
  8328  0014E0  EC08  F011         	call	PL20	;call to abstracted procedure
  8329  0014E4  64F7               	cpfsgt	tblptrh,c
  8330  0014E6  D003               	bra	u12317
  8331  0014E8  EC53  F011         	call	PL30	;call to abstracted procedure
  8332  0014EC  D004               	bra	u12310
  8333  0014EE                     u12317:
  8334  0014EE  EC3C  F011         	call	PL24	;call to abstracted procedure
  8335  0014F2  EC99  F011         	call	PL46	;call to abstracted procedure
  8336  0014F6                     u12310:
  8337  0014F6  EC8B  F011         	call	PL44	;call to abstracted procedure
  8338  0014FA  EC43  F012         	call	PL236	;call to abstracted procedure
  8339  0014FE  E171               	bnz	l8670
  8340  001500  EC57  F012         	call	PL246	;call to abstracted procedure
  8341  001504  E16E               	bnz	l8670
  8342  001506  EC5C  F012         	call	PL248	;call to abstracted procedure
  8343  00150A  E16B               	bnz	l8670
  8344  00150C  EC69  F012         	call	PL254	;call to abstracted procedure
  8345  001510  A4D8               	btfss	status,2,c
  8346  001512                     u12321:
  8347  001512  D067               	goto	l8670
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;tcpv4.c: 718: {
  8351                           ;tcpv4.c: 720: currentTCB->localSeqno = currentTCB->localSeqno + 1;
  8352  001514  0E10               	movlw	16
  8353  001516  EC08  F011         	call	PL20	;call to abstracted procedure
  8354  00151A  64F7               	cpfsgt	tblptrh,c
  8355  00151C  D003               	bra	u12337
  8356  00151E  EC53  F011         	call	PL30	;call to abstracted procedure
  8357  001522  D004               	bra	u12330
  8358  001524                     u12337:
  8359  001524  EC3C  F011         	call	PL24	;call to abstracted procedure
  8360  001528  EC99  F011         	call	PL46	;call to abstracted procedure
  8361  00152C                     u12330:
  8362  00152C  EC8B  F011         	call	PL44	;call to abstracted procedure
  8363  001530  EC41  F011         	call	PL26	;call to abstracted procedure
  8364  001534  64F7               	cpfsgt	tblptrh,c
  8365  001536  D003               	bra	u12347
  8366  001538  ECBD  F011         	call	PL68	;call to abstracted procedure
  8367  00153C  D004               	bra	u12340
  8368  00153E                     u12347:
  8369  00153E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8370  001542  ECF5  F011         	call	PL96	;call to abstracted procedure
  8371  001546                     u12340:
  8372                           
  8373                           ;tcpv4.c: 721: currentTCB->flags = 0x10U;
  8374  001546  0E35               	movlw	53
  8375  001548  EC08  F011         	call	PL20	;call to abstracted procedure
  8376  00154C  64F7               	cpfsgt	tblptrh,c
  8377  00154E  D004               	bra	u12357
  8378  001550  0E10               	movlw	16
  8379  001552  6EF5               	movwf	tablat,c
  8380  001554  000C               	tblwt		*
  8381  001556  D004               	bra	u12350
  8382  001558                     u12357:
  8383  001558  EC3C  F011         	call	PL24	;call to abstracted procedure
  8384  00155C  0E10               	movlw	16
  8385  00155E  6EEF               	movwf	indf0,c
  8386  001560                     u12350:
  8387                           
  8388                           ;tcpv4.c: 724: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
  8389  001560  0E08               	movlw	8
  8390  001562  EC08  F011         	call	PL20	;call to abstracted procedure
  8391  001566  64F7               	cpfsgt	tblptrh,c
  8392  001568  D003               	bra	u12367
  8393  00156A  ECB0  F011         	call	PL66	;call to abstracted procedure
  8394  00156E  D004               	bra	u12360
  8395  001570                     u12367:
  8396  001570  EC3C  F011         	call	PL24	;call to abstracted procedure
  8397  001574  ECFE  F011         	call	PL98	;call to abstracted procedure
  8398  001578                     u12360:
  8399                           
  8400                           ;tcpv4.c: 725: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
  8401  001578  ECA2  F011         	call	PL50	;call to abstracted procedure
  8402  00157C  EC19  F011         	call	PL22	;call to abstracted procedure
  8403  001580  64F7               	cpfsgt	tblptrh,c
  8404  001582  D005               	bra	u12377
  8405  001584  ECD1  F011         	call	PL80	;call to abstracted procedure
  8406  001588  ECCA  F011         	call	PL78	;call to abstracted procedure
  8407  00158C  D004               	bra	u12370
  8408  00158E                     u12377:
  8409  00158E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8410  001592  EC14  F012         	call	PL108	;call to abstracted procedure
  8411  001596                     u12370:
  8412                           
  8413                           ;tcpv4.c: 727: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xF
      +                          F00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
  8414  001596  EC77  F011         	call	PL38	;call to abstracted procedure
  8415  00159A  EC66  F011         	call	PL34	;call to abstracted procedure
  8416  00159E  64F7               	cpfsgt	tblptrh,c
  8417  0015A0  D003               	bra	u12387
  8418  0015A2  ECCA  F011         	call	PL78	;call to abstracted procedure
  8419  0015A6  D004               	bra	u12380
  8420  0015A8                     u12387:
  8421  0015A8  EC3C  F011         	call	PL24	;call to abstracted procedure
  8422  0015AC  EC29  F012         	call	PL122	;call to abstracted procedure
  8423  0015B0                     u12380:
  8424                           
  8425                           ;tcpv4.c: 728: currentTCB->mss = tcpMss;
  8426  0015B0  0E1C               	movlw	28
  8427  0015B2  EC08  F011         	call	PL20	;call to abstracted procedure
  8428  0015B6  64F7               	cpfsgt	tblptrh,c
  8429  0015B8  D003               	bra	u12397
  8430  0015BA  EC2E  F012         	call	PL154	;call to abstracted procedure
  8431  0015BE  D004               	bra	u12390
  8432  0015C0                     u12397:
  8433  0015C0  EC3C  F011         	call	PL24	;call to abstracted procedure
  8434  0015C4  EC52  F012         	call	PL244	;call to abstracted procedure
  8435  0015C8                     u12390:
  8436                           
  8437                           ;tcpv4.c: 730: nextState = ESTABLISHED;
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;tcpv4.c: 731: currentTCB->socketState = SOCKET_CONNECTED;
  8441  0015C8  EC10  F012         	call	PL104	;call to abstracted procedure
  8442  0015CC  EC08  F011         	call	PL20	;call to abstracted procedure
  8443  0015D0  64F7               	cpfsgt	tblptrh,c
  8444  0015D2  D004               	bra	u12407
  8445  0015D4  0E03               	movlw	3
  8446  0015D6  6EF5               	movwf	tablat,c
  8447  0015D8  000C               	tblwt		*
  8448  0015DA  D001               	bra	u12400
  8449  0015DC                     u12407:
  8450  0015DC  D195               	goto	u12757
  8451  0015DE                     u12400:
  8452                           
  8453                           ;tcpv4.c: 732: }
  8454  0015DE  EFEF  F010         	goto	l8934
  8455  0015E2                     l8670:
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;tcpv4.c: 733: else
  8459                           ;tcpv4.c: 734: {
  8460                           ;tcpv4.c: 736: currentTCB->localSeqno = tcpHeader.ackNumber;
  8461  0015E2  0E10               	movlw	16
  8462  0015E4  EC08  F011         	call	PL20	;call to abstracted procedure
  8463  0015E8  64F7               	cpfsgt	tblptrh,c
  8464  0015EA  D003               	bra	u12417
  8465  0015EC  ECD8  F011         	call	PL82	;call to abstracted procedure
  8466  0015F0  D004               	bra	u12410
  8467  0015F2                     u12417:
  8468  0015F2  EC3C  F011         	call	PL24	;call to abstracted procedure
  8469  0015F6  EC20  F012         	call	PL116	;call to abstracted procedure
  8470  0015FA                     u12410:
  8471                           
  8472                           ;tcpv4.c: 737: currentTCB->flags = 0x04U;
  8473  0015FA  0E35               	movlw	53
  8474  0015FC  EC08  F011         	call	PL20	;call to abstracted procedure
  8475  001600  64F7               	cpfsgt	tblptrh,c
  8476  001602  D004               	bra	u12427
  8477  001604  0E04               	movlw	4
  8478  001606  6EF5               	movwf	tablat,c
  8479  001608  000C               	tblwt		*
  8480  00160A  D004               	bra	u12420
  8481  00160C                     u12427:
  8482  00160C  EC3C  F011         	call	PL24	;call to abstracted procedure
  8483  001610  0E04               	movlw	4
  8484  001612  6EEF               	movwf	indf0,c
  8485  001614                     u12420:
  8486                           
  8487                           ;tcpv4.c: 738: if(TCP_Snd(currentTCB))
  8488  001614  ECEB  F011         	call	PL90	;call to abstracted procedure
  8489  001618  ECA2  F012         	call	_TCP_Snd	;wreg free
  8490  00161C  D74F               	goto	L8
  8491  00161E                     l8680:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;tcpv4.c: 752: ;
  8495                           ;tcpv4.c: 755: if (currentTCB->timeoutsCount)
  8496  00161E  0E34               	movlw	52
  8497  001620  EC08  F011         	call	PL20	;call to abstracted procedure
  8498  001624  64F7               	cpfsgt	tblptrh,c
  8499  001626  D003               	bra	u12447
  8500  001628  0008               	tblrd		*
  8501  00162A  50F5               	movf	tablat,w,c
  8502  00162C  D003               	bra	u12440
  8503  00162E                     u12447:
  8504  00162E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8505  001632  50EF               	movf	indf0,w,c
  8506  001634                     u12440:
  8507  001634  0900               	iorlw	0
  8508  001636  E034               	bz	l8696
  8509                           
  8510                           ;tcpv4.c: 756: {
  8511                           ;tcpv4.c: 757: if(TCP_Snd(currentTCB))
  8512  001638  ECEB  F011         	call	PL90	;call to abstracted procedure
  8513  00163C  ECA2  F012         	call	_TCP_Snd	;wreg free
  8514  001640  0900               	iorlw	0
  8515  001642  E102 EFEF  F010    	bz	l8934
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;tcpv4.c: 758: {
  8519                           ;tcpv4.c: 759: if (currentTCB->flags & 0x04U)
  8520  001648  0E35               	movlw	53
  8521  00164A  EC08  F011         	call	PL20	;call to abstracted procedure
  8522  00164E  64F7               	cpfsgt	tblptrh,c
  8523  001650  D003               	bra	u12477
  8524  001652  0008               	tblrd		*
  8525  001654  50F5               	movf	tablat,w,c
  8526  001656  D003               	bra	u12470
  8527  001658                     u12477:
  8528  001658  EC3C  F011         	call	PL24	;call to abstracted procedure
  8529  00165C  50EF               	movf	indf0,w,c
  8530  00165E                     u12470:
  8531  00165E  0100               	movlb	0	; () banked
  8532  001660  6FC6               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
  8533  001662  B5C6               	btfsc	(??_TCP_FiniteStateMachine+2)& (0+255),2,b
  8534  001664  D5FF               	goto	l1227
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;tcpv4.c: 764: if(currentTCB->flags & 0x10U)
  8538  001666  0E35               	movlw	53
  8539  001668  EC08  F011         	call	PL20	;call to abstracted procedure
  8540  00166C  64F7               	cpfsgt	tblptrh,c
  8541  00166E  D003               	bra	u12497
  8542  001670  0008               	tblrd		*
  8543  001672  50F5               	movf	tablat,w,c
  8544  001674  D003               	bra	u12490
  8545  001676                     u12497:
  8546  001676  EC3C  F011         	call	PL24	;call to abstracted procedure
  8547  00167A  50EF               	movf	indf0,w,c
  8548  00167C                     u12490:
  8549  00167C  0100               	movlb	0	; () banked
  8550  00167E  6FC6               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
  8551  001680  A9C6               	btfss	(??_TCP_FiniteStateMachine+2)& (0+255),4,b
  8552  001682  EFEF  F010         	goto	l8934
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;tcpv4.c: 765: {
  8556                           ;tcpv4.c: 766: nextState = ESTABLISHED;
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;tcpv4.c: 767: currentTCB->socketState = SOCKET_CONNECTED;
  8560  001686  EC1D  F012         	call	PL114	;call to abstracted procedure
  8561  00168A  EC08  F011         	call	PL20	;call to abstracted procedure
  8562  00168E  64F7               	cpfsgt	tblptrh,c
  8563  001690  D004               	bra	u12517
  8564  001692  0E03               	movlw	3
  8565  001694  6EF5               	movwf	tablat,c
  8566  001696  000C               	tblwt		*
  8567  001698  D001               	bra	u12510
  8568  00169A                     u12517:
  8569  00169A  D136               	goto	u12757
  8570  00169C                     u12510:
  8571  00169C  EFEF  F010         	goto	l8934
  8572  0016A0                     l8696:
  8573                           
  8574                           ;tcpv4.c: 771: {
  8575                           ;tcpv4.c: 773: currentTCB->flags = 0x04U;
  8576  0016A0  0E35               	movlw	53
  8577  0016A2  EC08  F011         	call	PL20	;call to abstracted procedure
  8578  0016A6  64F7               	cpfsgt	tblptrh,c
  8579  0016A8  D004               	bra	u12527
  8580  0016AA  0E04               	movlw	4
  8581  0016AC  6EF5               	movwf	tablat,c
  8582  0016AE  000C               	tblwt		*
  8583  0016B0  D004               	bra	u12520
  8584  0016B2                     u12527:
  8585  0016B2  EC3C  F011         	call	PL24	;call to abstracted procedure
  8586  0016B6  0E04               	movlw	4
  8587  0016B8  6EEF               	movwf	indf0,c
  8588  0016BA                     u12520:
  8589                           
  8590                           ;tcpv4.c: 774: if(TCP_Snd(currentTCB))
  8591  0016BA  ECEB  F011         	call	PL90	;call to abstracted procedure
  8592  0016BE  ECA2  F012         	call	_TCP_Snd	;wreg free
  8593  0016C2  D6FC               	goto	L8
  8594  0016C4                     l8708:
  8595  0016C4  0100               	movlb	0	; () banked
  8596  0016C6  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
  8597                           
  8598                           ; Switch size 1, requested type "space"
  8599                           ; Number of cases is 7, Range of values is 0 to 12
  8600                           ; switch strategies available:
  8601                           ; Name         Instructions Cycles
  8602                           ; simple_byte           22    12 (average)
  8603                           ;	Chosen strategy is simple_byte
  8604  0016C8  E101 D5CC          	bz	l1227
  8605  0016CC  0A03               	xorlw	3	; case 3
  8606  0016CE  E101 D5DB          	bz	l8618
  8607  0016D2  0A07               	xorlw	7	; case 4
  8608  0016D4  E101 D6F7          	bz	l8658
  8609  0016D8  0A01               	xorlw	1	; case 5
  8610  0016DA  E101 D63C          	bz	l8636
  8611  0016DE  0A0C               	xorlw	12	; case 9
  8612  0016E0  E101 D5C0          	bz	l1227
  8613  0016E4  0A03               	xorlw	3	; case 10
  8614  0016E6  E101 D5BD          	bz	l1227
  8615  0016EA  0A06               	xorlw	6	; case 12
  8616  0016EC  E098               	bz	l8680
  8617  0016EE  EFEF  F010         	goto	l8934
  8618  0016F2                     l8710:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;tcpv4.c: 796: ;
  8622                           ;tcpv4.c: 797: if (currentTCB->localPort == tcpHeader.destPort)
  8623  0016F2  EC61  F012         	call	PL252	;call to abstracted procedure
  8624  0016F6  64F7               	cpfsgt	tblptrh,c
  8625  0016F8  D003               	bra	u12547
  8626  0016FA  EC6E  F012         	call	PL260	;call to abstracted procedure
  8627  0016FE  D004               	bra	u12540
  8628  001700                     u12547:
  8629  001700  EC3C  F011         	call	PL24	;call to abstracted procedure
  8630  001704  EC93  F012         	call	PL320	;call to abstracted procedure
  8631  001708                     u12540:
  8632  001708  EC9D  F012         	call	PL346	;call to abstracted procedure
  8633  00170C  E103               	bnz	u12551
  8634  00170E  EC98  F012         	call	PL336	;call to abstracted procedure
  8635  001712  A4D8               	btfss	status,2,c
  8636  001714                     u12551:
  8637  001714  EFEF  F010         	goto	l8934
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;tcpv4.c: 798: {
  8641                           ;tcpv4.c: 800: currentTCB->timeout = 0;
  8642  001718  0E30               	movlw	48
  8643  00171A  EC08  F011         	call	PL20	;call to abstracted procedure
  8644  00171E  64F7               	cpfsgt	tblptrh,c
  8645  001720  D003               	bra	u12567
  8646  001722  ECAB  F011         	call	PL58	;call to abstracted procedure
  8647  001726  D004               	bra	u12560
  8648  001728                     u12567:
  8649  001728  EC3C  F011         	call	PL24	;call to abstracted procedure
  8650  00172C  6AEE               	clrf	postinc0,c
  8651  00172E  6AEF               	clrf	indf0,c
  8652  001730                     u12560:
  8653                           
  8654                           ;tcpv4.c: 804: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPor
      +                          t == tcpHeader.sourcePort))
  8655  001730  0E02               	movlw	2
  8656  001732  EC08  F011         	call	PL20	;call to abstracted procedure
  8657  001736  64F7               	cpfsgt	tblptrh,c
  8658  001738  D003               	bra	u12577
  8659  00173A  EC53  F011         	call	PL30	;call to abstracted procedure
  8660  00173E  D004               	bra	u12570
  8661  001740                     u12577:
  8662  001740  EC3C  F011         	call	PL24	;call to abstracted procedure
  8663  001744  EC99  F011         	call	PL46	;call to abstracted procedure
  8664  001748                     u12570:
  8665  001748  EC39  F012         	call	PL222	;call to abstracted procedure
  8666  00174C  E13B               	bnz	l8720
  8667  00174E  EC3E  F012         	call	PL228	;call to abstracted procedure
  8668  001752  E138               	bnz	l8720
  8669  001754  EC48  F012         	call	PL238	;call to abstracted procedure
  8670  001758  E135               	bnz	l8720
  8671  00175A  EC4D  F012         	call	PL242	;call to abstracted procedure
  8672  00175E  A4D8               	btfss	status,2,c
  8673  001760                     u12581:
  8674  001760  D031               	goto	l8720
  8675                           
  8676                           ; BSR set to: 0
  8677  001762  0E06               	movlw	6
  8678  001764  EC08  F011         	call	PL20	;call to abstracted procedure
  8679  001768  64F7               	cpfsgt	tblptrh,c
  8680  00176A  D004               	bra	u12597
  8681  00176C  0009               	tblrd		*+
  8682  00176E  EC60  F011         	call	PL32	;call to abstracted procedure
  8683  001772  D006               	bra	u12590
  8684  001774                     u12597:
  8685  001774  EC3C  F011         	call	PL24	;call to abstracted procedure
  8686  001778  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  8687  00177C  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  8688  001780                     u12590:
  8689  001780  EC84  F012         	call	PL286	;call to abstracted procedure
  8690  001784  E11F               	bnz	l8720
  8691  001786  EC7A  F012         	call	PL280	;call to abstracted procedure
  8692  00178A  E11C               	bnz	l8720
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;tcpv4.c: 805: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
  8696  00178C  0E10               	movlw	16
  8697  00178E  EC08  F011         	call	PL20	;call to abstracted procedure
  8698  001792  64F7               	cpfsgt	tblptrh,c
  8699  001794  D003               	bra	u12617
  8700  001796  EC53  F011         	call	PL30	;call to abstracted procedure
  8701  00179A  D004               	bra	u12610
  8702  00179C                     u12617:
  8703  00179C  EC3C  F011         	call	PL24	;call to abstracted procedure
  8704  0017A0  EC99  F011         	call	PL46	;call to abstracted procedure
  8705  0017A4                     u12610:
  8706  0017A4  EC8B  F011         	call	PL44	;call to abstracted procedure
  8707  0017A8  EC43  F012         	call	PL236	;call to abstracted procedure
  8708  0017AC  E10B               	bnz	l8720
  8709  0017AE  EC57  F012         	call	PL246	;call to abstracted procedure
  8710  0017B2  E108               	bnz	l8720
  8711  0017B4  EC5C  F012         	call	PL248	;call to abstracted procedure
  8712  0017B8  E105               	bnz	l8720
  8713  0017BA  EC69  F012         	call	PL254	;call to abstracted procedure
  8714  0017BE  E102               	bnz	l8720
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;tcpv4.c: 807: nextState = ESTABLISHED;
  8718  0017C0  0E04               	movlw	4
  8719  0017C2  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
  8720  0017C4                     l8720:
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;tcpv4.c: 808: currentTCB->socketState = SOCKET_CONNECTED;
  8724  0017C4  0E36               	movlw	54
  8725  0017C6  EC08  F011         	call	PL20	;call to abstracted procedure
  8726  0017CA  64F7               	cpfsgt	tblptrh,c
  8727  0017CC  D004               	bra	u12637
  8728  0017CE  0E03               	movlw	3
  8729  0017D0  6EF5               	movwf	tablat,c
  8730  0017D2  000C               	tblwt		*
  8731  0017D4  D001               	bra	u12630
  8732  0017D6                     u12637:
  8733  0017D6  D098               	goto	u12757
  8734  0017D8                     u12630:
  8735  0017D8  EFEF  F010         	goto	l8934
  8736  0017DC                     l8722:
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;tcpv4.c: 812: ;
  8740                           ;tcpv4.c: 816: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPor
      +                          t == tcpHeader.sourcePort))
  8741  0017DC  0E02               	movlw	2
  8742  0017DE  EC08  F011         	call	PL20	;call to abstracted procedure
  8743  0017E2  64F7               	cpfsgt	tblptrh,c
  8744  0017E4  D003               	bra	u12647
  8745  0017E6  EC53  F011         	call	PL30	;call to abstracted procedure
  8746  0017EA  D004               	bra	u12640
  8747  0017EC                     u12647:
  8748  0017EC  EC3C  F011         	call	PL24	;call to abstracted procedure
  8749  0017F0  EC99  F011         	call	PL46	;call to abstracted procedure
  8750  0017F4                     u12640:
  8751  0017F4  EC39  F012         	call	PL222	;call to abstracted procedure
  8752  0017F8  E109               	bnz	u12651
  8753  0017FA  EC3E  F012         	call	PL228	;call to abstracted procedure
  8754  0017FE  E106               	bnz	u12651
  8755  001800  EC48  F012         	call	PL238	;call to abstracted procedure
  8756  001804  E103               	bnz	u12651
  8757  001806  EC4D  F012         	call	PL242	;call to abstracted procedure
  8758  00180A  A4D8               	btfss	status,2,c
  8759  00180C                     u12651:
  8760  00180C  EFEF  F010         	goto	l8934
  8761                           
  8762                           ; BSR set to: 0
  8763  001810  0E06               	movlw	6
  8764  001812  EC08  F011         	call	PL20	;call to abstracted procedure
  8765  001816  64F7               	cpfsgt	tblptrh,c
  8766  001818  D004               	bra	u12667
  8767  00181A  0009               	tblrd		*+
  8768  00181C  EC60  F011         	call	PL32	;call to abstracted procedure
  8769  001820  D006               	bra	u12660
  8770  001822                     u12667:
  8771  001822  EC3C  F011         	call	PL24	;call to abstracted procedure
  8772  001826  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  8773  00182A  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  8774  00182E                     u12660:
  8775  00182E  EC84  F012         	call	PL286	;call to abstracted procedure
  8776  001832  E103               	bnz	u12671
  8777  001834  EC7A  F012         	call	PL280	;call to abstracted procedure
  8778  001838  A4D8               	btfss	status,2,c
  8779  00183A                     u12671:
  8780  00183A  EFEF  F010         	goto	l8934
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;tcpv4.c: 817: {
  8784                           ;tcpv4.c: 820: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
  8785  00183E  0E0C               	movlw	12
  8786  001840  EC08  F011         	call	PL20	;call to abstracted procedure
  8787  001844  64F7               	cpfsgt	tblptrh,c
  8788  001846  D003               	bra	u12687
  8789  001848  EC53  F011         	call	PL30	;call to abstracted procedure
  8790  00184C  D004               	bra	u12680
  8791  00184E                     u12687:
  8792  00184E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8793  001852  EC99  F011         	call	PL46	;call to abstracted procedure
  8794  001856                     u12680:
  8795  001856  EC89  F012         	call	PL288	;call to abstracted procedure
  8796  00185A  E109               	bnz	u12691
  8797  00185C  EC8E  F012         	call	PL292	;call to abstracted procedure
  8798  001860  E106               	bnz	u12691
  8799  001862  EC75  F012         	call	PL278	;call to abstracted procedure
  8800  001866  E103               	bnz	u12691
  8801  001868  EC7F  F012         	call	PL282	;call to abstracted procedure
  8802  00186C  A4D8               	btfss	status,2,c
  8803  00186E                     u12691:
  8804  00186E  EFEF  F010         	goto	l8934
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;tcpv4.c: 821: {
  8808                           ;tcpv4.c: 823: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
  8809  001872  0E10               	movlw	16
  8810  001874  EC08  F011         	call	PL20	;call to abstracted procedure
  8811  001878  64F7               	cpfsgt	tblptrh,c
  8812  00187A  D003               	bra	u12707
  8813  00187C  EC53  F011         	call	PL30	;call to abstracted procedure
  8814  001880  D004               	bra	u12700
  8815  001882                     u12707:
  8816  001882  EC3C  F011         	call	PL24	;call to abstracted procedure
  8817  001886  EC99  F011         	call	PL46	;call to abstracted procedure
  8818  00188A                     u12700:
  8819  00188A  EC8B  F011         	call	PL44	;call to abstracted procedure
  8820  00188E  EC43  F012         	call	PL236	;call to abstracted procedure
  8821  001892  E109               	bnz	u12711
  8822  001894  EC57  F012         	call	PL246	;call to abstracted procedure
  8823  001898  E106               	bnz	u12711
  8824  00189A  EC5C  F012         	call	PL248	;call to abstracted procedure
  8825  00189E  E103               	bnz	u12711
  8826  0018A0  EC69  F012         	call	PL254	;call to abstracted procedure
  8827  0018A4  A4D8               	btfss	status,2,c
  8828  0018A6                     u12711:
  8829  0018A6  EFEF  F010         	goto	l8934
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;tcpv4.c: 824: {
  8833                           ;tcpv4.c: 825: currentTCB->localSeqno = currentTCB->localSeqno + 1;
  8834  0018AA  0E10               	movlw	16
  8835  0018AC  EC08  F011         	call	PL20	;call to abstracted procedure
  8836  0018B0  64F7               	cpfsgt	tblptrh,c
  8837  0018B2  D003               	bra	u12727
  8838  0018B4  EC53  F011         	call	PL30	;call to abstracted procedure
  8839  0018B8  D004               	bra	u12720
  8840  0018BA                     u12727:
  8841  0018BA  EC3C  F011         	call	PL24	;call to abstracted procedure
  8842  0018BE  EC99  F011         	call	PL46	;call to abstracted procedure
  8843  0018C2                     u12720:
  8844  0018C2  EC8B  F011         	call	PL44	;call to abstracted procedure
  8845  0018C6  EC41  F011         	call	PL26	;call to abstracted procedure
  8846  0018CA  64F7               	cpfsgt	tblptrh,c
  8847  0018CC  D003               	bra	u12737
  8848  0018CE  ECBD  F011         	call	PL68	;call to abstracted procedure
  8849  0018D2  D004               	bra	u12730
  8850  0018D4                     u12737:
  8851  0018D4  EC3C  F011         	call	PL24	;call to abstracted procedure
  8852  0018D8  ECF5  F011         	call	PL96	;call to abstracted procedure
  8853  0018DC                     u12730:
  8854                           
  8855                           ;tcpv4.c: 827: currentTCB->timeout = 0;
  8856  0018DC  0E30               	movlw	48
  8857  0018DE  EC08  F011         	call	PL20	;call to abstracted procedure
  8858  0018E2  64F7               	cpfsgt	tblptrh,c
  8859  0018E4  D003               	bra	u12747
  8860  0018E6  ECAB  F011         	call	PL58	;call to abstracted procedure
  8861  0018EA  D004               	bra	u12740
  8862  0018EC                     u12747:
  8863  0018EC  EC3C  F011         	call	PL24	;call to abstracted procedure
  8864  0018F0  6AEE               	clrf	postinc0,c
  8865  0018F2  6AEF               	clrf	indf0,c
  8866  0018F4                     u12740:
  8867                           
  8868                           ;tcpv4.c: 829: nextState = ESTABLISHED;
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;tcpv4.c: 830: currentTCB->socketState = SOCKET_CONNECTED;
  8872  0018F4  EC10  F012         	call	PL104	;call to abstracted procedure
  8873  0018F8  EC08  F011         	call	PL20	;call to abstracted procedure
  8874  0018FC  64F7               	cpfsgt	tblptrh,c
  8875  0018FE  D004               	bra	u12757
  8876  001900  0E03               	movlw	3
  8877  001902  6EF5               	movwf	tablat,c
  8878  001904  000C               	tblwt		*
  8879  001906  D004               	bra	u12750
  8880  001908                     u12757:
  8881  001908  EC3C  F011         	call	PL24	;call to abstracted procedure
  8882  00190C  0E03               	movlw	3
  8883  00190E  6EEF               	movwf	indf0,c
  8884  001910                     u12750:
  8885  001910  EFEF  F010         	goto	l8934
  8886  001914                     l8736:
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;tcpv4.c: 836: ;
  8890                           ;tcpv4.c: 838: currentTCB->timeout = 0;
  8891  001914  0E30               	movlw	48
  8892  001916  EC08  F011         	call	PL20	;call to abstracted procedure
  8893  00191A  64F7               	cpfsgt	tblptrh,c
  8894  00191C  D003               	bra	u12767
  8895  00191E  ECAB  F011         	call	PL58	;call to abstracted procedure
  8896  001922  D004               	bra	u12760
  8897  001924                     u12767:
  8898  001924  EC3C  F011         	call	PL24	;call to abstracted procedure
  8899  001928  6AEE               	clrf	postinc0,c
  8900  00192A  6AEF               	clrf	indf0,c
  8901  00192C                     u12760:
  8902                           
  8903                           ;tcpv4.c: 840: currentTCB->flags = 0x01U;
  8904  00192C  0E35               	movlw	53
  8905  00192E  EC08  F011         	call	PL20	;call to abstracted procedure
  8906  001932  64F7               	cpfsgt	tblptrh,c
  8907  001934  D004               	bra	u12777
  8908  001936  0E01               	movlw	1
  8909  001938  6EF5               	movwf	tablat,c
  8910  00193A  000C               	tblwt		*
  8911  00193C  D004               	bra	u12770
  8912  00193E                     u12777:
  8913  00193E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8914  001942  0E01               	movlw	1
  8915  001944  6EEF               	movwf	indf0,c
  8916  001946                     u12770:
  8917                           
  8918                           ;tcpv4.c: 841: currentTCB->timeout = ((unsigned long)1*2);
  8919  001946  0E30               	movlw	48
  8920  001948  EC08  F011         	call	PL20	;call to abstracted procedure
  8921  00194C  64F7               	cpfsgt	tblptrh,c
  8922  00194E  D003               	bra	u12787
  8923  001950  ECE5  F011         	call	PL84	;call to abstracted procedure
  8924  001954  D004               	bra	u12780
  8925  001956                     u12787:
  8926  001956  EC3C  F011         	call	PL24	;call to abstracted procedure
  8927  00195A  EC35  F012         	call	PL214	;call to abstracted procedure
  8928  00195E                     u12780:
  8929                           
  8930                           ;tcpv4.c: 842: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
  8931  00195E  0E32               	movlw	50
  8932  001960  EC08  F011         	call	PL20	;call to abstracted procedure
  8933  001964  64F7               	cpfsgt	tblptrh,c
  8934  001966  D003               	bra	u12797
  8935  001968  ECE5  F011         	call	PL84	;call to abstracted procedure
  8936  00196C  D004               	bra	u12790
  8937  00196E                     u12797:
  8938  00196E  EC3C  F011         	call	PL24	;call to abstracted procedure
  8939  001972  EC35  F012         	call	PL214	;call to abstracted procedure
  8940  001976                     u12790:
  8941                           
  8942                           ;tcpv4.c: 843: currentTCB->timeoutsCount = (5u);
  8943  001976  0E34               	movlw	52
  8944  001978  EC08  F011         	call	PL20	;call to abstracted procedure
  8945  00197C  64F7               	cpfsgt	tblptrh,c
  8946  00197E  D004               	bra	u12807
  8947  001980  0E05               	movlw	5
  8948  001982  6EF5               	movwf	tablat,c
  8949  001984  000C               	tblwt		*
  8950  001986  D004               	bra	u12800
  8951  001988                     u12807:
  8952  001988  EC3C  F011         	call	PL24	;call to abstracted procedure
  8953  00198C  0E05               	movlw	5
  8954  00198E  6EEF               	movwf	indf0,c
  8955  001990                     u12800:
  8956  001990                     l8738:
  8957                           
  8958                           ;tcpv4.c: 845: nextState = FIN_WAIT_1;
  8959  001990  0E05               	movlw	5
  8960  001992  0100               	movlb	0	; () banked
  8961  001994  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
  8962  001996                     l8740:
  8963                           
  8964                           ;tcpv4.c: 846: TCP_Snd(currentTCB);
  8965  001996  ECEB  F011         	call	PL90	;call to abstracted procedure
  8966  00199A  ECA2  F012         	call	_TCP_Snd	;wreg free
  8967                           
  8968                           ;tcpv4.c: 847: break;
  8969  00199E  EFEF  F010         	goto	l8934
  8970  0019A2                     l8742:
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;tcpv4.c: 849: case RCV_RST:
  8974                           ;tcpv4.c: 851: ;
  8975                           ;tcpv4.c: 853: if (currentTCB->localPort == tcpHeader.destPort)
  8976  0019A2  EC61  F012         	call	PL252	;call to abstracted procedure
  8977  0019A6  64F7               	cpfsgt	tblptrh,c
  8978  0019A8  D003               	bra	u12817
  8979  0019AA  EC6E  F012         	call	PL260	;call to abstracted procedure
  8980  0019AE  D004               	bra	u12810
  8981  0019B0                     u12817:
  8982  0019B0  EC3C  F011         	call	PL24	;call to abstracted procedure
  8983  0019B4  EC93  F012         	call	PL320	;call to abstracted procedure
  8984  0019B8                     u12810:
  8985  0019B8  EC9D  F012         	call	PL346	;call to abstracted procedure
  8986  0019BC  E103               	bnz	u12821
  8987  0019BE  EC98  F012         	call	PL336	;call to abstracted procedure
  8988  0019C2  A4D8               	btfss	status,2,c
  8989  0019C4                     u12821:
  8990  0019C4  EFEF  F010         	goto	l8934
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;tcpv4.c: 854: {
  8994                           ;tcpv4.c: 855: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
  8995  0019C8  0E0C               	movlw	12
  8996  0019CA  EC08  F011         	call	PL20	;call to abstracted procedure
  8997  0019CE  64F7               	cpfsgt	tblptrh,c
  8998  0019D0  D003               	bra	u12837
  8999  0019D2  EC53  F011         	call	PL30	;call to abstracted procedure
  9000  0019D6  D004               	bra	u12830
  9001  0019D8                     u12837:
  9002  0019D8  EC3C  F011         	call	PL24	;call to abstracted procedure
  9003  0019DC  EC99  F011         	call	PL46	;call to abstracted procedure
  9004  0019E0                     u12830:
  9005  0019E0  EC89  F012         	call	PL288	;call to abstracted procedure
  9006  0019E4  E109               	bnz	u12841
  9007  0019E6  EC8E  F012         	call	PL292	;call to abstracted procedure
  9008  0019EA  E106               	bnz	u12841
  9009  0019EC  EC75  F012         	call	PL278	;call to abstracted procedure
  9010  0019F0  E103               	bnz	u12841
  9011  0019F2  EC7F  F012         	call	PL282	;call to abstracted procedure
  9012  0019F6  A4D8               	btfss	status,2,c
  9013  0019F8                     u12841:
  9014  0019F8  D3F2               	goto	l8934
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;tcpv4.c: 856: {
  9018                           ;tcpv4.c: 857: ;
  9019                           ;tcpv4.c: 858: currentTCB->destIP = 0;
  9020  0019FA  0E02               	movlw	2
  9021  0019FC  EC08  F011         	call	PL20	;call to abstracted procedure
  9022  001A00  64F7               	cpfsgt	tblptrh,c
  9023  001A02  D007               	bra	u12857
  9024  001A04  6AF5               	clrf	tablat,c
  9025  001A06  000D               	tblwt		*+
  9026  001A08  6AF5               	clrf	tablat,c
  9027  001A0A  000D               	tblwt		*+
  9028  001A0C  ECAB  F011         	call	PL58	;call to abstracted procedure
  9029  001A10  D004               	bra	u12850
  9030  001A12                     u12857:
  9031  001A12  EC3C  F011         	call	PL24	;call to abstracted procedure
  9032  001A16  ECF0  F011         	call	PL92	;call to abstracted procedure
  9033  001A1A                     u12850:
  9034                           
  9035                           ;tcpv4.c: 859: currentTCB->destPort = 0;
  9036  001A1A  0E06               	movlw	6
  9037  001A1C  DBF9               	call	PL20	;call to abstracted procedure
  9038  001A1E  64F7               	cpfsgt	tblptrh,c
  9039  001A20  D003               	bra	u12867
  9040  001A22  ECAB  F011         	call	PL58	;call to abstracted procedure
  9041  001A26  D004               	bra	u12860
  9042  001A28                     u12867:
  9043  001A28  EC3C  F011         	call	PL24	;call to abstracted procedure
  9044  001A2C  6AEE               	clrf	postinc0,c
  9045  001A2E  6AEF               	clrf	indf0,c
  9046  001A30                     u12860:
  9047                           
  9048                           ;tcpv4.c: 860: currentTCB->localSeqno = 0;
  9049  001A30  0E10               	movlw	16
  9050  001A32  DBEE               	call	PL20	;call to abstracted procedure
  9051  001A34  64F7               	cpfsgt	tblptrh,c
  9052  001A36  D007               	bra	u12877
  9053  001A38  6AF5               	clrf	tablat,c
  9054  001A3A  000D               	tblwt		*+
  9055  001A3C  6AF5               	clrf	tablat,c
  9056  001A3E  000D               	tblwt		*+
  9057  001A40  ECAB  F011         	call	PL58	;call to abstracted procedure
  9058  001A44  D004               	bra	u12870
  9059  001A46                     u12877:
  9060  001A46  EC3C  F011         	call	PL24	;call to abstracted procedure
  9061  001A4A  ECF0  F011         	call	PL92	;call to abstracted procedure
  9062  001A4E                     u12870:
  9063                           
  9064                           ;tcpv4.c: 861: currentTCB->localLastAck = 0;
  9065  001A4E  0E14               	movlw	20
  9066  001A50  DBDF               	call	PL20	;call to abstracted procedure
  9067  001A52  64F7               	cpfsgt	tblptrh,c
  9068  001A54  D007               	bra	u12887
  9069  001A56  6AF5               	clrf	tablat,c
  9070  001A58  000D               	tblwt		*+
  9071  001A5A  6AF5               	clrf	tablat,c
  9072  001A5C  000D               	tblwt		*+
  9073  001A5E  ECAB  F011         	call	PL58	;call to abstracted procedure
  9074  001A62  D004               	bra	u12880
  9075  001A64                     u12887:
  9076  001A64  EC3C  F011         	call	PL24	;call to abstracted procedure
  9077  001A68  ECF0  F011         	call	PL92	;call to abstracted procedure
  9078  001A6C                     u12880:
  9079                           
  9080                           ;tcpv4.c: 862: currentTCB->remoteSeqno = 0;
  9081  001A6C  0E08               	movlw	8
  9082  001A6E  DBD0               	call	PL20	;call to abstracted procedure
  9083  001A70  64F7               	cpfsgt	tblptrh,c
  9084  001A72  D007               	bra	u12897
  9085  001A74  6AF5               	clrf	tablat,c
  9086  001A76  000D               	tblwt		*+
  9087  001A78  6AF5               	clrf	tablat,c
  9088  001A7A  000D               	tblwt		*+
  9089  001A7C  ECAB  F011         	call	PL58	;call to abstracted procedure
  9090  001A80  D003               	bra	u12890
  9091  001A82                     u12897:
  9092  001A82  DBFA               	call	PL24	;call to abstracted procedure
  9093  001A84  ECF0  F011         	call	PL92	;call to abstracted procedure
  9094  001A88                     u12890:
  9095                           
  9096                           ;tcpv4.c: 863: currentTCB->remoteAck = 0;
  9097  001A88  0E0C               	movlw	12
  9098  001A8A  DBC2               	call	PL20	;call to abstracted procedure
  9099  001A8C  64F7               	cpfsgt	tblptrh,c
  9100  001A8E  D007               	bra	u12907
  9101  001A90  6AF5               	clrf	tablat,c
  9102  001A92  000D               	tblwt		*+
  9103  001A94  6AF5               	clrf	tablat,c
  9104  001A96  000D               	tblwt		*+
  9105  001A98  ECAB  F011         	call	PL58	;call to abstracted procedure
  9106  001A9C  D003               	bra	u12900
  9107  001A9E                     u12907:
  9108  001A9E  DBEC               	call	PL24	;call to abstracted procedure
  9109  001AA0  ECF0  F011         	call	PL92	;call to abstracted procedure
  9110  001AA4                     u12900:
  9111                           
  9112                           ;tcpv4.c: 864: currentTCB->remoteWnd = 0;
  9113  001AA4  0E18               	movlw	24
  9114  001AA6  DBB4               	call	PL20	;call to abstracted procedure
  9115  001AA8  64F7               	cpfsgt	tblptrh,c
  9116  001AAA  D003               	bra	u12917
  9117  001AAC  ECAB  F011         	call	PL58	;call to abstracted procedure
  9118  001AB0  D003               	bra	u12910
  9119  001AB2                     u12917:
  9120  001AB2  DBE2               	call	PL24	;call to abstracted procedure
  9121  001AB4  6AEE               	clrf	postinc0,c
  9122  001AB6  6AEF               	clrf	indf0,c
  9123  001AB8                     u12910:
  9124                           
  9125                           ;tcpv4.c: 865: currentTCB->mss = 0;
  9126  001AB8  0E1C               	movlw	28
  9127  001ABA  DBAA               	call	PL20	;call to abstracted procedure
  9128  001ABC  64F7               	cpfsgt	tblptrh,c
  9129  001ABE  D003               	bra	u12927
  9130  001AC0  ECAB  F011         	call	PL58	;call to abstracted procedure
  9131  001AC4  D003               	bra	u12920
  9132  001AC6                     u12927:
  9133  001AC6  DBD8               	call	PL24	;call to abstracted procedure
  9134  001AC8  6AEE               	clrf	postinc0,c
  9135  001ACA  6AEF               	clrf	indf0,c
  9136  001ACC                     u12920:
  9137  001ACC                     l8748:
  9138                           
  9139                           ;tcpv4.c: 867: nextState = LISTEN;
  9140  001ACC  0E01               	movlw	1
  9141  001ACE  0100               	movlb	0	; () banked
  9142  001AD0  D273               	goto	L12
  9143  001AD2                     l8750:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;tcpv4.c: 872: ;
  9147                           ;tcpv4.c: 873: if (currentTCB->timeoutsCount)
  9148  001AD2  0E34               	movlw	52
  9149  001AD4  DB9D               	call	PL20	;call to abstracted procedure
  9150  001AD6  64F7               	cpfsgt	tblptrh,c
  9151  001AD8  D003               	bra	u12937
  9152  001ADA  0008               	tblrd		*
  9153  001ADC  50F5               	movf	tablat,w,c
  9154  001ADE  D002               	bra	u12930
  9155  001AE0                     u12937:
  9156  001AE0  DBCB               	call	PL24	;call to abstracted procedure
  9157  001AE2  50EF               	movf	indf0,w,c
  9158  001AE4                     u12930:
  9159  001AE4  0900               	iorlw	0
  9160  001AE6  E001 D756          	bnz	l8740
  9161                           
  9162                           ;tcpv4.c: 877: else
  9163                           ;tcpv4.c: 878: {
  9164                           ;tcpv4.c: 880: currentTCB->flags = 0x04U;
  9165  001AEA  0E35               	movlw	53
  9166  001AEC  DB91               	call	PL20	;call to abstracted procedure
  9167  001AEE  64F7               	cpfsgt	tblptrh,c
  9168  001AF0  D004               	bra	u12957
  9169  001AF2  0E04               	movlw	4
  9170  001AF4  6EF5               	movwf	tablat,c
  9171  001AF6  000C               	tblwt		*
  9172  001AF8  D003               	bra	u12950
  9173  001AFA                     u12957:
  9174  001AFA  DBBE               	call	PL24	;call to abstracted procedure
  9175  001AFC  0E04               	movlw	4
  9176  001AFE  6EEF               	movwf	indf0,c
  9177  001B00                     u12950:
  9178                           
  9179                           ;tcpv4.c: 881: if(TCP_Snd(currentTCB))
  9180  001B00  ECEB  F011         	call	PL90	;call to abstracted procedure
  9181  001B04  ECA2  F012         	call	_TCP_Snd	;wreg free
  9182  001B08  0900               	iorlw	0
  9183  001B0A  E101 D368          	bz	l8934
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;tcpv4.c: 882: {
  9187                           ;tcpv4.c: 883: currentTCB->destIP = 0;
  9188  001B0E  0E02               	movlw	2
  9189  001B10  DB7F               	call	PL20	;call to abstracted procedure
  9190  001B12  64F7               	cpfsgt	tblptrh,c
  9191  001B14  D007               	bra	u12977
  9192  001B16  6AF5               	clrf	tablat,c
  9193  001B18  000D               	tblwt		*+
  9194  001B1A  6AF5               	clrf	tablat,c
  9195  001B1C  000D               	tblwt		*+
  9196  001B1E  ECAB  F011         	call	PL58	;call to abstracted procedure
  9197  001B22  D003               	bra	u12970
  9198  001B24                     u12977:
  9199  001B24  DBA9               	call	PL24	;call to abstracted procedure
  9200  001B26  ECF0  F011         	call	PL92	;call to abstracted procedure
  9201  001B2A                     u12970:
  9202                           
  9203                           ;tcpv4.c: 884: currentTCB->destPort = 0;
  9204  001B2A  0E06               	movlw	6
  9205  001B2C  DB71               	call	PL20	;call to abstracted procedure
  9206  001B2E  64F7               	cpfsgt	tblptrh,c
  9207  001B30  D003               	bra	u12987
  9208  001B32  ECAB  F011         	call	PL58	;call to abstracted procedure
  9209  001B36  D003               	bra	u12980
  9210  001B38                     u12987:
  9211  001B38  DB9F               	call	PL24	;call to abstracted procedure
  9212  001B3A  6AEE               	clrf	postinc0,c
  9213  001B3C  6AEF               	clrf	indf0,c
  9214  001B3E                     u12980:
  9215                           
  9216                           ;tcpv4.c: 885: currentTCB->localSeqno = 0;
  9217  001B3E  0E10               	movlw	16
  9218  001B40  DB67               	call	PL20	;call to abstracted procedure
  9219  001B42  64F7               	cpfsgt	tblptrh,c
  9220  001B44  D007               	bra	u12997
  9221  001B46  6AF5               	clrf	tablat,c
  9222  001B48  000D               	tblwt		*+
  9223  001B4A  6AF5               	clrf	tablat,c
  9224  001B4C  000D               	tblwt		*+
  9225  001B4E  ECAB  F011         	call	PL58	;call to abstracted procedure
  9226  001B52  D003               	bra	u12990
  9227  001B54                     u12997:
  9228  001B54  DB91               	call	PL24	;call to abstracted procedure
  9229  001B56  ECF0  F011         	call	PL92	;call to abstracted procedure
  9230  001B5A                     u12990:
  9231                           
  9232                           ;tcpv4.c: 886: currentTCB->localLastAck = 0;
  9233  001B5A  0E14               	movlw	20
  9234  001B5C  DB59               	call	PL20	;call to abstracted procedure
  9235  001B5E  64F7               	cpfsgt	tblptrh,c
  9236  001B60  D006               	bra	u13007
  9237  001B62  6AF5               	clrf	tablat,c
  9238  001B64  000D               	tblwt		*+
  9239  001B66  6AF5               	clrf	tablat,c
  9240  001B68  000D               	tblwt		*+
  9241  001B6A  DBF5               	call	PL58	;call to abstracted procedure
  9242  001B6C  D003               	bra	u13000
  9243  001B6E                     u13007:
  9244  001B6E  DB84               	call	PL24	;call to abstracted procedure
  9245  001B70  ECF0  F011         	call	PL92	;call to abstracted procedure
  9246  001B74                     u13000:
  9247                           
  9248                           ;tcpv4.c: 887: currentTCB->remoteSeqno = 0;
  9249  001B74  0E08               	movlw	8
  9250  001B76  DB4C               	call	PL20	;call to abstracted procedure
  9251  001B78  64F7               	cpfsgt	tblptrh,c
  9252  001B7A  D006               	bra	u13017
  9253  001B7C  6AF5               	clrf	tablat,c
  9254  001B7E  000D               	tblwt		*+
  9255  001B80  6AF5               	clrf	tablat,c
  9256  001B82  000D               	tblwt		*+
  9257  001B84  DBE8               	call	PL58	;call to abstracted procedure
  9258  001B86  D003               	bra	u13010
  9259  001B88                     u13017:
  9260  001B88  DB77               	call	PL24	;call to abstracted procedure
  9261  001B8A  ECF0  F011         	call	PL92	;call to abstracted procedure
  9262  001B8E                     u13010:
  9263                           
  9264                           ;tcpv4.c: 888: currentTCB->remoteAck = 0;
  9265  001B8E  0E0C               	movlw	12
  9266  001B90  DB3F               	call	PL20	;call to abstracted procedure
  9267  001B92  64F7               	cpfsgt	tblptrh,c
  9268  001B94  D006               	bra	u13027
  9269  001B96  6AF5               	clrf	tablat,c
  9270  001B98  000D               	tblwt		*+
  9271  001B9A  6AF5               	clrf	tablat,c
  9272  001B9C  000D               	tblwt		*+
  9273  001B9E  DBDB               	call	PL58	;call to abstracted procedure
  9274  001BA0  D003               	bra	u13020
  9275  001BA2                     u13027:
  9276  001BA2  DB6A               	call	PL24	;call to abstracted procedure
  9277  001BA4  ECF0  F011         	call	PL92	;call to abstracted procedure
  9278  001BA8                     u13020:
  9279                           
  9280                           ;tcpv4.c: 889: currentTCB->remoteWnd = 0;
  9281  001BA8  0E18               	movlw	24
  9282  001BAA  DB32               	call	PL20	;call to abstracted procedure
  9283  001BAC  64F7               	cpfsgt	tblptrh,c
  9284  001BAE  D002               	bra	u13037
  9285  001BB0  DBD2               	call	PL58	;call to abstracted procedure
  9286  001BB2  D003               	bra	u13030
  9287  001BB4                     u13037:
  9288  001BB4  DB61               	call	PL24	;call to abstracted procedure
  9289  001BB6  6AEE               	clrf	postinc0,c
  9290  001BB8  6AEF               	clrf	indf0,c
  9291  001BBA                     u13030:
  9292                           
  9293                           ;tcpv4.c: 890: currentTCB->mss = 0;
  9294  001BBA  0E1C               	movlw	28
  9295  001BBC  DB29               	call	PL20	;call to abstracted procedure
  9296  001BBE  64F7               	cpfsgt	tblptrh,c
  9297  001BC0  D002               	bra	u13047
  9298  001BC2  DBC9               	call	PL58	;call to abstracted procedure
  9299  001BC4  D003               	bra	u13040
  9300  001BC6                     u13047:
  9301  001BC6  DB58               	call	PL24	;call to abstracted procedure
  9302  001BC8  6AEE               	clrf	postinc0,c
  9303  001BCA  6AEF               	clrf	indf0,c
  9304  001BCC                     u13040:
  9305  001BCC  D77F               	goto	l8748
  9306  001BCE                     l8764:
  9307  001BCE  0100               	movlb	0	; () banked
  9308  001BD0  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
  9309                           
  9310                           ; Switch size 1, requested type "space"
  9311                           ; Number of cases is 6, Range of values is 0 to 12
  9312                           ; switch strategies available:
  9313                           ; Name         Instructions Cycles
  9314                           ; simple_byte           19    10 (average)
  9315                           ;	Chosen strategy is simple_byte
  9316  001BD2  E101 D69F          	bz	l8736
  9317  001BD6  0A04               	xorlw	4	; case 4
  9318  001BD8  E101 D600          	bz	l8722
  9319  001BDC  0A01               	xorlw	1	; case 5
  9320  001BDE  E101 D588          	bz	l8710
  9321  001BE2  0A0C               	xorlw	12	; case 9
  9322  001BE4  E101 D6DD          	bz	l8742
  9323  001BE8  0A03               	xorlw	3	; case 10
  9324  001BEA  E101 D6DA          	bz	l8742
  9325  001BEE  0A06               	xorlw	6	; case 12
  9326  001BF0  E101 D76F          	bz	l8750
  9327  001BF4  D2F4               	goto	l8934
  9328  001BF6                     l8766:
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;tcpv4.c: 904: ;
  9332                           ;tcpv4.c: 905: if (currentTCB->destIP == receivedRemoteAddress)
  9333  001BF6  0E02               	movlw	2
  9334  001BF8  DB0B               	call	PL20	;call to abstracted procedure
  9335  001BFA  64F7               	cpfsgt	tblptrh,c
  9336  001BFC  D002               	bra	u13057
  9337  001BFE  DB53               	call	PL30	;call to abstracted procedure
  9338  001C00  D002               	bra	u13050
  9339  001C02                     u13057:
  9340  001C02  DB3A               	call	PL24	;call to abstracted procedure
  9341  001C04  DB96               	call	PL46	;call to abstracted procedure
  9342  001C06                     u13050:
  9343  001C06  EC39  F012         	call	PL222	;call to abstracted procedure
  9344  001C0A  E109               	bnz	u13061
  9345  001C0C  EC3E  F012         	call	PL228	;call to abstracted procedure
  9346  001C10  E106               	bnz	u13061
  9347  001C12  EC48  F012         	call	PL238	;call to abstracted procedure
  9348  001C16  E103               	bnz	u13061
  9349  001C18  EC4D  F012         	call	PL242	;call to abstracted procedure
  9350  001C1C  A4D8               	btfss	status,2,c
  9351  001C1E                     u13061:
  9352  001C1E  D2DF               	goto	l8934
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;tcpv4.c: 906: {
  9356                           ;tcpv4.c: 910: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
  9357  001C20  0E0C               	movlw	12
  9358  001C22  DAF6               	call	PL20	;call to abstracted procedure
  9359  001C24  64F7               	cpfsgt	tblptrh,c
  9360  001C26  D002               	bra	u13077
  9361  001C28  DB3E               	call	PL30	;call to abstracted procedure
  9362  001C2A  D002               	bra	u13070
  9363  001C2C                     u13077:
  9364  001C2C  DB25               	call	PL24	;call to abstracted procedure
  9365  001C2E  DB81               	call	PL46	;call to abstracted procedure
  9366  001C30                     u13070:
  9367  001C30  EC89  F012         	call	PL288	;call to abstracted procedure
  9368  001C34  E109               	bnz	u13081
  9369  001C36  EC8E  F012         	call	PL292	;call to abstracted procedure
  9370  001C3A  E106               	bnz	u13081
  9371  001C3C  EC75  F012         	call	PL278	;call to abstracted procedure
  9372  001C40  E103               	bnz	u13081
  9373  001C42  EC7F  F012         	call	PL282	;call to abstracted procedure
  9374  001C46  A4D8               	btfss	status,2,c
  9375  001C48                     u13081:
  9376  001C48  D2CA               	goto	l8934
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;tcpv4.c: 911: {
  9380                           ;tcpv4.c: 915: if (currentTCB->localLastAck < tcpHeader.ackNumber)
  9381  001C4A  0E14               	movlw	20
  9382  001C4C  DAE1               	call	PL20	;call to abstracted procedure
  9383  001C4E  64F7               	cpfsgt	tblptrh,c
  9384  001C50  D002               	bra	u13097
  9385  001C52  DB29               	call	PL30	;call to abstracted procedure
  9386  001C54  D002               	bra	u13090
  9387  001C56                     u13097:
  9388  001C56  DB10               	call	PL24	;call to abstracted procedure
  9389  001C58  DB6C               	call	PL46	;call to abstracted procedure
  9390  001C5A                     u13090:
  9391  001C5A  0101               	movlb	1	; () banked
  9392  001C5C  51F0               	movf	(_tcpHeader+8)& (0+255),w,b
  9393  001C5E  0100               	movlb	0	; () banked
  9394  001C60  5DC6               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
  9395  001C62  0101               	movlb	1	; () banked
  9396  001C64  51F1               	movf	(_tcpHeader+9)& (0+255),w,b
  9397  001C66  0100               	movlb	0	; () banked
  9398  001C68  59C7               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
  9399  001C6A  0101               	movlb	1	; () banked
  9400  001C6C  51F2               	movf	(_tcpHeader+10)& (0+255),w,b
  9401  001C6E  0100               	movlb	0	; () banked
  9402  001C70  59C8               	subwfb	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
  9403  001C72  0101               	movlb	1	; () banked
  9404  001C74  51F3               	movf	(_tcpHeader+11)& (0+255),w,b
  9405  001C76  0100               	movlb	0	; () banked
  9406  001C78  59C9               	subwfb	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
  9407  001C7A  E301 D2B0          	bc	l8934
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;tcpv4.c: 916: {
  9411                           ;tcpv4.c: 918: if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber)
  9412  001C7E  0E10               	movlw	16
  9413  001C80  DAC7               	call	PL20	;call to abstracted procedure
  9414  001C82  64F7               	cpfsgt	tblptrh,c
  9415  001C84  D002               	bra	u13117
  9416  001C86  DB0F               	call	PL30	;call to abstracted procedure
  9417  001C88  D002               	bra	u13110
  9418  001C8A                     u13117:
  9419  001C8A  DAF6               	call	PL24	;call to abstracted procedure
  9420  001C8C  DB52               	call	PL46	;call to abstracted procedure
  9421  001C8E                     u13110:
  9422  001C8E  DB43               	call	PL44	;call to abstracted procedure
  9423  001C90  0101               	movlb	1	; () banked
  9424  001C92  51F0               	movf	(_tcpHeader+8)& (0+255),w,b
  9425  001C94  0100               	movlb	0	; () banked
  9426  001C96  5DCA               	subwf	(??_TCP_FiniteStateMachine+6)& (0+255),w,b
  9427  001C98  0101               	movlb	1	; () banked
  9428  001C9A  51F1               	movf	(_tcpHeader+9)& (0+255),w,b
  9429  001C9C  0100               	movlb	0	; () banked
  9430  001C9E  59CB               	subwfb	(??_TCP_FiniteStateMachine+7)& (0+255),w,b
  9431  001CA0  0101               	movlb	1	; () banked
  9432  001CA2  51F2               	movf	(_tcpHeader+10)& (0+255),w,b
  9433  001CA4  0100               	movlb	0	; () banked
  9434  001CA6  59CC               	subwfb	(??_TCP_FiniteStateMachine+8)& (0+255),w,b
  9435  001CA8  0101               	movlb	1	; () banked
  9436  001CAA  51F3               	movf	(_tcpHeader+11)& (0+255),w,b
  9437  001CAC  0100               	movlb	0	; () banked
  9438  001CAE  59CD               	subwfb	(??_TCP_FiniteStateMachine+9)& (0+255),w,b
  9439  001CB0  E201 D0AC          	bnc	l8790
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;tcpv4.c: 919: {
  9443                           ;tcpv4.c: 920: notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
  9444  001CB4  0E10               	movlw	16
  9445  001CB6  DAAC               	call	PL20	;call to abstracted procedure
  9446  001CB8  64F7               	cpfsgt	tblptrh,c
  9447  001CBA  D003               	bra	u13137
  9448  001CBC  0009               	tblrd		*+
  9449  001CBE  DB00               	call	PL32	;call to abstracted procedure
  9450  001CC0  D005               	bra	u13130
  9451  001CC2                     u13137:
  9452  001CC2  DADA               	call	PL24	;call to abstracted procedure
  9453  001CC4  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  9454  001CC8  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  9455  001CCC                     u13130:
  9456  001CCC  0101               	movlb	1	; () banked
  9457  001CCE  51F0               	movf	(_tcpHeader+8)& (0+255),w,b
  9458  001CD0  0100               	movlb	0	; () banked
  9459  001CD2  5DC6               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
  9460  001CD4  6FD1               	movwf	TCP_FiniteStateMachine@notAckBytes& (0+255),b
  9461  001CD6  0101               	movlb	1	; () banked
  9462  001CD8  51F1               	movf	(_tcpHeader+9)& (0+255),w,b
  9463  001CDA  0100               	movlb	0	; () banked
  9464  001CDC  59C7               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
  9465  001CDE  6FD2               	movwf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),b
  9466                           
  9467                           ;tcpv4.c: 923: currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
  9468  001CE0  0E25               	movlw	37
  9469  001CE2  DA96               	call	PL20	;call to abstracted procedure
  9470  001CE4  64F7               	cpfsgt	tblptrh,c
  9471  001CE6  D003               	bra	u13147
  9472  001CE8  0009               	tblrd		*+
  9473  001CEA  DAEA               	call	PL32	;call to abstracted procedure
  9474  001CEC  D005               	bra	u13140
  9475  001CEE                     u13147:
  9476  001CEE  DAC4               	call	PL24	;call to abstracted procedure
  9477  001CF0  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  9478  001CF4  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  9479  001CF8                     u13140:
  9480  001CF8  0100               	movlb	0	; () banked
  9481  001CFA  51D1               	movf	TCP_FiniteStateMachine@notAckBytes& (0+255),w,b
  9482  001CFC  5FC6               	subwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
  9483  001CFE  51D2               	movf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),w,b
  9484  001D00  5BC7               	subwfb	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
  9485  001D02  0E25               	movlw	37
  9486  001D04  DAE3               	call	PL34	;call to abstracted procedure
  9487  001D06  64F7               	cpfsgt	tblptrh,c
  9488  001D08  D002               	bra	u13157
  9489  001D0A  DB44               	call	PL78	;call to abstracted procedure
  9490  001D0C  D002               	bra	u13150
  9491  001D0E                     u13157:
  9492  001D0E  DAB4               	call	PL24	;call to abstracted procedure
  9493  001D10  DBA0               	call	PL122	;call to abstracted procedure
  9494  001D12                     u13150:
  9495                           
  9496                           ;tcpv4.c: 924: currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
  9497  001D12  0E27               	movlw	39
  9498  001D14  DA7D               	call	PL20	;call to abstracted procedure
  9499  001D16  64F7               	cpfsgt	tblptrh,c
  9500  001D18  D003               	bra	u13167
  9501  001D1A  0009               	tblrd		*+
  9502  001D1C  DAD1               	call	PL32	;call to abstracted procedure
  9503  001D1E  D005               	bra	u13160
  9504  001D20                     u13167:
  9505  001D20  DAAB               	call	PL24	;call to abstracted procedure
  9506  001D22  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  9507  001D26  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  9508  001D2A                     u13160:
  9509  001D2A  0100               	movlb	0	; () banked
  9510  001D2C  51D1               	movf	TCP_FiniteStateMachine@notAckBytes& (0+255),w,b
  9511  001D2E  27C6               	addwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
  9512  001D30  51D2               	movf	(TCP_FiniteStateMachine@notAckBytes+1)& (0+255),w,b
  9513  001D32  23C7               	addwfc	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
  9514  001D34  0E27               	movlw	39
  9515  001D36  DACA               	call	PL34	;call to abstracted procedure
  9516  001D38  64F7               	cpfsgt	tblptrh,c
  9517  001D3A  D002               	bra	u13177
  9518  001D3C  DB2B               	call	PL78	;call to abstracted procedure
  9519  001D3E  D002               	bra	u13170
  9520  001D40                     u13177:
  9521  001D40  DA9B               	call	PL24	;call to abstracted procedure
  9522  001D42  DB87               	call	PL122	;call to abstracted procedure
  9523  001D44                     u13170:
  9524                           
  9525                           ;tcpv4.c: 927: if(currentTCB->bytesToSend == 0)
  9526  001D44  0E27               	movlw	39
  9527  001D46  DA64               	call	PL20	;call to abstracted procedure
  9528  001D48  64F7               	cpfsgt	tblptrh,c
  9529  001D4A  D003               	bra	u13187
  9530  001D4C  0009               	tblrd		*+
  9531  001D4E  DAB8               	call	PL32	;call to abstracted procedure
  9532  001D50  D005               	bra	u13180
  9533  001D52                     u13187:
  9534  001D52  DA92               	call	PL24	;call to abstracted procedure
  9535  001D54  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
  9536  001D58  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
  9537  001D5C                     u13180:
  9538  001D5C  0100               	movlb	0	; () banked
  9539  001D5E  51C6               	movf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
  9540  001D60  11C7               	iorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
  9541  001D62  E114               	bnz	l8780
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;tcpv4.c: 928: {
  9545                           ;tcpv4.c: 929: if (currentTCB->txBufState == TX_BUFF_IN_USE)
  9546  001D64  0E29               	movlw	41
  9547  001D66  DA54               	call	PL20	;call to abstracted procedure
  9548  001D68  64F7               	cpfsgt	tblptrh,c
  9549  001D6A  D003               	bra	u13207
  9550  001D6C  0008               	tblrd		*
  9551  001D6E  50F5               	movf	tablat,w,c
  9552  001D70  D002               	bra	u13200
  9553  001D72                     u13207:
  9554  001D72  DA82               	call	PL24	;call to abstracted procedure
  9555  001D74  50EF               	movf	indf0,w,c
  9556  001D76                     u13200:
  9557  001D76  0A02               	xorlw	2
  9558  001D78  E109               	bnz	l8780
  9559                           
  9560                           ;tcpv4.c: 930: {
  9561                           ;tcpv4.c: 931: currentTCB->txBufState = NO_BUFF;
  9562  001D7A  0E29               	movlw	41
  9563  001D7C  DA49               	call	PL20	;call to abstracted procedure
  9564  001D7E  64F7               	cpfsgt	tblptrh,c
  9565  001D80  D003               	bra	u13227
  9566  001D82  6AF5               	clrf	tablat,c
  9567  001D84  000C               	tblwt		*
  9568  001D86  D002               	bra	u13220
  9569  001D88                     u13227:
  9570  001D88  DA77               	call	PL24	;call to abstracted procedure
  9571  001D8A  6AEF               	clrf	indf0,c
  9572  001D8C                     u13220:
  9573  001D8C                     l8780:
  9574                           
  9575                           ;tcpv4.c: 932: }
  9576                           ;tcpv4.c: 933: }
  9577                           ;tcpv4.c: 935: currentTCB->localLastAck = tcpHeader.ackNumber - 1;
  9578  001D8C  EE21  F0F0         	lfsr	2,_tcpHeader+8
  9579  001D90  0EFF               	movlw	255
  9580  001D92  24DE               	addwf	postinc2,w,c
  9581  001D94  0100               	movlb	0	; () banked
  9582  001D96  6FC4               	movwf	??_TCP_FiniteStateMachine& (0+255),b
  9583  001D98  0EFF               	movlw	255
  9584  001D9A  20DE               	addwfc	postinc2,w,c
  9585  001D9C  6FC5               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
  9586  001D9E  0EFF               	movlw	255
  9587  001DA0  20DE               	addwfc	postinc2,w,c
  9588  001DA2  6FC6               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
  9589  001DA4  0EFF               	movlw	255
  9590  001DA6  20DE               	addwfc	postinc2,w,c
  9591  001DA8  6FC7               	movwf	(??_TCP_FiniteStateMachine+3)& (0+255),b
  9592  001DAA  0E14               	movlw	20
  9593  001DAC  DA8F               	call	PL34	;call to abstracted procedure
  9594  001DAE  64F7               	cpfsgt	tblptrh,c
  9595  001DB0  D003               	bra	u13237
  9596  001DB2  DAF7               	call	PL80	;call to abstracted procedure
  9597  001DB4  DAEF               	call	PL78	;call to abstracted procedure
  9598  001DB6  D002               	bra	u13230
  9599  001DB8                     u13237:
  9600  001DB8  DA5F               	call	PL24	;call to abstracted procedure
  9601  001DBA  DB36               	call	PL108	;call to abstracted procedure
  9602  001DBC                     u13230:
  9603                           
  9604                           ;tcpv4.c: 936: currentTCB->localSeqno = tcpHeader.ackNumber;
  9605  001DBC  0E10               	movlw	16
  9606  001DBE  DA28               	call	PL20	;call to abstracted procedure
  9607  001DC0  64F7               	cpfsgt	tblptrh,c
  9608  001DC2  D002               	bra	u13247
  9609  001DC4  DAF5               	call	PL82	;call to abstracted procedure
  9610  001DC6  D002               	bra	u13240
  9611  001DC8                     u13247:
  9612  001DC8  DA57               	call	PL24	;call to abstracted procedure
  9613  001DCA  DB3A               	call	PL116	;call to abstracted procedure
  9614  001DCC                     u13240:
  9615                           
  9616                           ;tcpv4.c: 939: if(rcvPayloadLen > 0)
  9617  001DCC  0101               	movlb	1	; () banked
  9618  001DCE  51DD               	movf	_rcvPayloadLen& (0+255),w,b
  9619  001DD0  11DE               	iorwf	(_rcvPayloadLen+1)& (0+255),w,b
  9620  001DD2  E101 D204          	bz	l8934
  9621                           
  9622                           ; BSR set to: 1
  9623                           ;tcpv4.c: 940: {
  9624                           ;tcpv4.c: 941: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
  9625  001DD6  0E08               	movlw	8
  9626  001DD8  25D5               	addwf	_currentTCB& (0+255),w,b
  9627  001DDA  0100               	movlb	0	; () banked
  9628  001DDC  6FC4               	movwf	??_TCP_FiniteStateMachine& (0+255),b
  9629  001DDE  ECF0  F01E         	call	PL48	;call to abstracted procedure
  9630  001DE2  6FC5               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
  9631  001DE4  C0C4  FFF6         	movff	??_TCP_FiniteStateMachine,tblptrl
  9632  001DE8  C0C5  FFF7         	movff	??_TCP_FiniteStateMachine+1,tblptrh
  9633  001DEC  0E00               	movlw	low (__smallconst shr (0+16))
  9634  001DEE  6EF8               	movwf	tblptru,c
  9635  001DF0  0E0F               	movlw	(high __ramtop+-1)
  9636  001DF2  64F7               	cpfsgt	tblptrh,c
  9637  001DF4  D002               	bra	u13267
  9638  001DF6  DAB4               	call	PL66	;call to abstracted procedure
  9639  001DF8  D002               	bra	u13260
  9640  001DFA                     u13267:
  9641  001DFA  DA3E               	call	PL24	;call to abstracted procedure
  9642  001DFC  DAFF               	call	PL98	;call to abstracted procedure
  9643  001DFE                     u13260:
  9644                           
  9645                           ;tcpv4.c: 944: TCP_PayloadSave(rcvPayloadLen);
  9646  001DFE  C1DD  F0B6         	movff	_rcvPayloadLen,TCP_PayloadSave@len
  9647  001E02  C1DE  F0B7         	movff	_rcvPayloadLen+1,TCP_PayloadSave@len+1
  9648  001E06  EC0D  F01E         	call	_TCP_PayloadSave	;wreg free
  9649  001E0A  D1E9               	goto	l8934
  9650  001E0C                     l8790:
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;tcpv4.c: 947: {
  9654                           ;tcpv4.c: 951: currentTCB->flags = 0x04U | 0x10U;
  9655  001E0C  0E35               	movlw	53
  9656  001E0E  DA00               	call	PL20	;call to abstracted procedure
  9657  001E10  64F7               	cpfsgt	tblptrh,c
  9658  001E12  D004               	bra	u13277
  9659  001E14  0E14               	movlw	20
  9660  001E16  6EF5               	movwf	tablat,c
  9661  001E18  000C               	tblwt		*
  9662  001E1A  D003               	bra	u13270
  9663  001E1C                     u13277:
  9664  001E1C  DA2D               	call	PL24	;call to abstracted procedure
  9665  001E1E  0E14               	movlw	20
  9666  001E20  6EEF               	movwf	indf0,c
  9667  001E22                     u13270:
  9668                           
  9669                           ;tcpv4.c: 952: if (TCP_Snd(currentTCB))
  9670  001E22  DAD9               	call	PL90	;call to abstracted procedure
  9671  001E24  ECA2  F012         	call	_TCP_Snd	;wreg free
  9672  001E28  EF5E  F00A         	goto	L8
  9673  001E2C                     l8798:
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;tcpv4.c: 963: ;
  9677                           ;tcpv4.c: 964: currentTCB->flags = 0x01U;
  9678  001E2C  0E35               	movlw	53
  9679  001E2E  D9F0               	call	PL20	;call to abstracted procedure
  9680  001E30  64F7               	cpfsgt	tblptrh,c
  9681  001E32  D004               	bra	u13297
  9682  001E34  0E01               	movlw	1
  9683  001E36  6EF5               	movwf	tablat,c
  9684  001E38  000C               	tblwt		*
  9685  001E3A  D003               	bra	u13290
  9686  001E3C                     u13297:
  9687  001E3C  DA1D               	call	PL24	;call to abstracted procedure
  9688  001E3E  0E01               	movlw	1
  9689  001E40  6EEF               	movwf	indf0,c
  9690  001E42                     u13290:
  9691  001E42  D5A6               	goto	l8738
  9692  001E44                     l8804:
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;tcpv4.c: 971: ;
  9696                           ;tcpv4.c: 974: currentTCB->localSeqno = tcpHeader.ackNumber;
  9697  001E44  0E10               	movlw	16
  9698  001E46  D9E4               	call	PL20	;call to abstracted procedure
  9699  001E48  64F7               	cpfsgt	tblptrh,c
  9700  001E4A  D002               	bra	u13307
  9701  001E4C  DAB1               	call	PL82	;call to abstracted procedure
  9702  001E4E  D002               	bra	u13300
  9703  001E50                     u13307:
  9704  001E50  DA13               	call	PL24	;call to abstracted procedure
  9705  001E52  DAF6               	call	PL116	;call to abstracted procedure
  9706  001E54                     u13300:
  9707                           
  9708                           ;tcpv4.c: 975: currentTCB->remoteAck = currentTCB->remoteAck + 1;
  9709  001E54  0E0C               	movlw	12
  9710  001E56  D9DC               	call	PL20	;call to abstracted procedure
  9711  001E58  64F7               	cpfsgt	tblptrh,c
  9712  001E5A  D002               	bra	u13317
  9713  001E5C  DA24               	call	PL30	;call to abstracted procedure
  9714  001E5E  D002               	bra	u13310
  9715  001E60                     u13317:
  9716  001E60  DA0B               	call	PL24	;call to abstracted procedure
  9717  001E62  DA67               	call	PL46	;call to abstracted procedure
  9718  001E64                     u13310:
  9719  001E64  DA58               	call	PL44	;call to abstracted procedure
  9720  001E66  0E0C               	movlw	12
  9721  001E68  DA71               	call	PL54	;call to abstracted procedure
  9722  001E6A  ECF0  F01E         	call	PL48	;call to abstracted procedure
  9723  001E6E  DACF               	call	PL100	;call to abstracted procedure
  9724  001E70  64F7               	cpfsgt	tblptrh,c
  9725  001E72  D002               	bra	u13327
  9726  001E74  DA82               	call	PL68	;call to abstracted procedure
  9727  001E76  D002               	bra	u13320
  9728  001E78                     u13327:
  9729  001E78  D9FF               	call	PL24	;call to abstracted procedure
  9730  001E7A  DAB7               	call	PL96	;call to abstracted procedure
  9731  001E7C                     u13320:
  9732                           
  9733                           ;tcpv4.c: 977: currentTCB->socketState = SOCKET_CLOSING;
  9734  001E7C  0E36               	movlw	54
  9735  001E7E  D9C8               	call	PL20	;call to abstracted procedure
  9736  001E80  64F7               	cpfsgt	tblptrh,c
  9737  001E82  D004               	bra	u13337
  9738  001E84  0E04               	movlw	4
  9739  001E86  6EF5               	movwf	tablat,c
  9740  001E88  000C               	tblwt		*
  9741  001E8A  D003               	bra	u13330
  9742  001E8C                     u13337:
  9743  001E8C  D9F5               	call	PL24	;call to abstracted procedure
  9744  001E8E  0E04               	movlw	4
  9745  001E90  6EEF               	movwf	indf0,c
  9746  001E92                     u13330:
  9747                           
  9748                           ;tcpv4.c: 978: currentTCB->timeout = ((unsigned long)1*2);
  9749  001E92  0E30               	movlw	48
  9750  001E94  D9BD               	call	PL20	;call to abstracted procedure
  9751  001E96  64F7               	cpfsgt	tblptrh,c
  9752  001E98  D002               	bra	u13347
  9753  001E9A  DA97               	call	PL84	;call to abstracted procedure
  9754  001E9C  D002               	bra	u13340
  9755  001E9E                     u13347:
  9756  001E9E  D9EC               	call	PL24	;call to abstracted procedure
  9757  001EA0  DAE4               	call	PL214	;call to abstracted procedure
  9758  001EA2                     u13340:
  9759                           
  9760                           ;tcpv4.c: 979: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
  9761  001EA2  0E32               	movlw	50
  9762  001EA4  D9B5               	call	PL20	;call to abstracted procedure
  9763  001EA6  64F7               	cpfsgt	tblptrh,c
  9764  001EA8  D002               	bra	u13357
  9765  001EAA  DA8F               	call	PL84	;call to abstracted procedure
  9766  001EAC  D002               	bra	u13350
  9767  001EAE                     u13357:
  9768  001EAE  D9E4               	call	PL24	;call to abstracted procedure
  9769  001EB0  DADC               	call	PL214	;call to abstracted procedure
  9770  001EB2                     u13350:
  9771                           
  9772                           ;tcpv4.c: 980: currentTCB->timeoutsCount = (5u);
  9773  001EB2  0E34               	movlw	52
  9774  001EB4  D9AD               	call	PL20	;call to abstracted procedure
  9775  001EB6  64F7               	cpfsgt	tblptrh,c
  9776  001EB8  D004               	bra	u13367
  9777  001EBA  0E05               	movlw	5
  9778  001EBC  6EF5               	movwf	tablat,c
  9779  001EBE  000C               	tblwt		*
  9780  001EC0  D003               	bra	u13360
  9781  001EC2                     u13367:
  9782  001EC2  D9DA               	call	PL24	;call to abstracted procedure
  9783  001EC4  0E05               	movlw	5
  9784  001EC6  6EEF               	movwf	indf0,c
  9785  001EC8                     u13360:
  9786                           
  9787                           ;tcpv4.c: 982: currentTCB->flags = 0x01U | 0x10U;
  9788  001EC8  0E35               	movlw	53
  9789  001ECA  D9A2               	call	PL20	;call to abstracted procedure
  9790  001ECC  64F7               	cpfsgt	tblptrh,c
  9791  001ECE  D004               	bra	u13377
  9792  001ED0  0E11               	movlw	17
  9793  001ED2  6EF5               	movwf	tablat,c
  9794  001ED4  000C               	tblwt		*
  9795  001ED6  D003               	bra	u13370
  9796  001ED8                     u13377:
  9797  001ED8  D9CF               	call	PL24	;call to abstracted procedure
  9798  001EDA  0E11               	movlw	17
  9799  001EDC  6EEF               	movwf	indf0,c
  9800  001EDE                     u13370:
  9801                           
  9802                           ;tcpv4.c: 984: nextState = LAST_ACK;
  9803  001EDE  0E09               	movlw	9
  9804  001EE0  D558               	goto	L10
  9805  001EE2                     l8812:
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;tcpv4.c: 993: ;
  9809                           ;tcpv4.c: 994: if (currentTCB->timeoutsCount)
  9810  001EE2  0E34               	movlw	52
  9811  001EE4  D995               	call	PL20	;call to abstracted procedure
  9812  001EE6  64F7               	cpfsgt	tblptrh,c
  9813  001EE8  D003               	bra	u13387
  9814  001EEA  0008               	tblrd		*
  9815  001EEC  50F5               	movf	tablat,w,c
  9816  001EEE  D002               	bra	u13380
  9817  001EF0                     u13387:
  9818  001EF0  D9C3               	call	PL24	;call to abstracted procedure
  9819  001EF2  50EF               	movf	indf0,w,c
  9820  001EF4                     u13380:
  9821  001EF4  0900               	iorlw	0
  9822  001EF6  E001 D54E          	bnz	l8740
  9823                           
  9824                           ;tcpv4.c: 998: {
  9825                           ;tcpv4.c: 1000: currentTCB->flags = 0x04U;
  9826  001EFA  0E35               	movlw	53
  9827  001EFC  D989               	call	PL20	;call to abstracted procedure
  9828  001EFE  64F7               	cpfsgt	tblptrh,c
  9829  001F00  D004               	bra	u13407
  9830  001F02  0E04               	movlw	4
  9831  001F04  6EF5               	movwf	tablat,c
  9832  001F06  000C               	tblwt		*
  9833  001F08  D003               	bra	u13400
  9834  001F0A                     u13407:
  9835  001F0A  D9B6               	call	PL24	;call to abstracted procedure
  9836  001F0C  0E04               	movlw	4
  9837  001F0E  6EEF               	movwf	indf0,c
  9838  001F10                     u13400:
  9839                           
  9840                           ;tcpv4.c: 1001: if(TCP_Snd(currentTCB))
  9841  001F10  DA62               	call	PL90	;call to abstracted procedure
  9842  001F12  ECA2  F012         	call	_TCP_Snd	;wreg free
  9843  001F16  EF5E  F00A         	goto	L8
  9844  001F1A                     l8826:
  9845  001F1A  0100               	movlb	0	; () banked
  9846  001F1C  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
  9847                           
  9848                           ; Switch size 1, requested type "space"
  9849                           ; Number of cases is 7, Range of values is 0 to 12
  9850                           ; switch strategies available:
  9851                           ; Name         Instructions Cycles
  9852                           ; simple_byte           22    12 (average)
  9853                           ;	Chosen strategy is simple_byte
  9854  001F1E  E086               	bz	l8798
  9855  001F20  0A04               	xorlw	4	; case 4
  9856  001F22  E101 D668          	bz	l8766
  9857  001F26  0A02               	xorlw	2	; case 6
  9858  001F28  E08D               	bz	l8804
  9859  001F2A  0A01               	xorlw	1	; case 7
  9860  001F2C  E08B               	bz	l8804
  9861  001F2E  0A0E               	xorlw	14	; case 9
  9862  001F30  E102 EF32  F009    	bz	l1227
  9863  001F36  0A03               	xorlw	3	; case 10
  9864  001F38  E102 EF32  F009    	bz	l1227
  9865  001F3E  0A06               	xorlw	6	; case 12
  9866  001F40  E0D0               	bz	l8812
  9867  001F42  D14D               	goto	l8934
  9868  001F44                     l8828:
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;tcpv4.c: 1016: ;
  9872                           ;tcpv4.c: 1017: currentTCB->flags = 0x10U;
  9873  001F44  0E35               	movlw	53
  9874  001F46  D964               	call	PL20	;call to abstracted procedure
  9875  001F48  64F7               	cpfsgt	tblptrh,c
  9876  001F4A  D004               	bra	u13427
  9877  001F4C  0E10               	movlw	16
  9878  001F4E  6EF5               	movwf	tablat,c
  9879  001F50  000C               	tblwt		*
  9880  001F52  D003               	bra	u13420
  9881  001F54                     u13427:
  9882  001F54  D991               	call	PL24	;call to abstracted procedure
  9883  001F56  0E10               	movlw	16
  9884  001F58  6EEF               	movwf	indf0,c
  9885  001F5A                     u13420:
  9886                           
  9887                           ;tcpv4.c: 1018: if(TCP_Snd(currentTCB))
  9888  001F5A  DA3D               	call	PL90	;call to abstracted procedure
  9889  001F5C  ECA2  F012         	call	_TCP_Snd	;wreg free
  9890  001F60  0900               	iorlw	0
  9891  001F62  E101 D13C          	bz	l8934
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;tcpv4.c: 1019: {
  9895                           ;tcpv4.c: 1020: nextState = CLOSING;
  9896  001F66  0E08               	movlw	8
  9897  001F68  D027               	goto	L12
  9898  001F6A                     l8834:
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;tcpv4.c: 1024: ;
  9902                           ;tcpv4.c: 1026: currentTCB->timeout = ((unsigned long)1*2);
  9903  001F6A  0E30               	movlw	48
  9904  001F6C  D951               	call	PL20	;call to abstracted procedure
  9905  001F6E  64F7               	cpfsgt	tblptrh,c
  9906  001F70  D002               	bra	u13447
  9907  001F72  DA2B               	call	PL84	;call to abstracted procedure
  9908  001F74  D002               	bra	u13440
  9909  001F76                     u13447:
  9910  001F76  D980               	call	PL24	;call to abstracted procedure
  9911  001F78  DA78               	call	PL214	;call to abstracted procedure
  9912  001F7A                     u13440:
  9913                           
  9914                           ;tcpv4.c: 1027: currentTCB->timeoutsCount = 1;
  9915  001F7A  0E34               	movlw	52
  9916  001F7C  D949               	call	PL20	;call to abstracted procedure
  9917  001F7E  64F7               	cpfsgt	tblptrh,c
  9918  001F80  D004               	bra	u13457
  9919  001F82  0E01               	movlw	1
  9920  001F84  6EF5               	movwf	tablat,c
  9921  001F86  000C               	tblwt		*
  9922  001F88  D003               	bra	u13450
  9923  001F8A                     u13457:
  9924  001F8A  D976               	call	PL24	;call to abstracted procedure
  9925  001F8C  0E01               	movlw	1
  9926  001F8E  6EEF               	movwf	indf0,c
  9927  001F90                     u13450:
  9928                           
  9929                           ;tcpv4.c: 1028: nextState = FIN_WAIT_2;
  9930  001F90  0E06               	movlw	6
  9931  001F92  D59D               	goto	L16
  9932  001F94                     l8838:
  9933                           
  9934                           ; BSR set to: 0
  9935                           ;tcpv4.c: 1031: ;
  9936                           ;tcpv4.c: 1032: currentTCB->flags = 0x10U;
  9937  001F94  0E35               	movlw	53
  9938  001F96  D93C               	call	PL20	;call to abstracted procedure
  9939  001F98  64F7               	cpfsgt	tblptrh,c
  9940  001F9A  D004               	bra	u13467
  9941  001F9C  0E10               	movlw	16
  9942  001F9E  6EF5               	movwf	tablat,c
  9943  001FA0  000C               	tblwt		*
  9944  001FA2  D003               	bra	u13460
  9945  001FA4                     u13467:
  9946  001FA4  D969               	call	PL24	;call to abstracted procedure
  9947  001FA6  0E10               	movlw	16
  9948  001FA8  6EEF               	movwf	indf0,c
  9949  001FAA                     u13460:
  9950                           
  9951                           ;tcpv4.c: 1033: if(TCP_Snd(currentTCB))
  9952  001FAA  DA15               	call	PL90	;call to abstracted procedure
  9953  001FAC  ECA2  F012         	call	_TCP_Snd	;wreg free
  9954  001FB0  0900               	iorlw	0
  9955  001FB2  E101 D114          	bz	l8934
  9956  001FB6                     l8842:
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;tcpv4.c: 1034: {
  9960                           ;tcpv4.c: 1035: nextState = TIME_WAIT;
  9961  001FB6  0E0A               	movlw	10
  9962  001FB8                     L12:
  9963  001FB8  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
  9964  001FBA  D111               	goto	l8934
  9965  001FBC                     l8844:
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;tcpv4.c: 1039: ;
  9969                           ;tcpv4.c: 1040: if (currentTCB->timeoutsCount)
  9970  001FBC  0E34               	movlw	52
  9971  001FBE  D928               	call	PL20	;call to abstracted procedure
  9972  001FC0  64F7               	cpfsgt	tblptrh,c
  9973  001FC2  D003               	bra	u13487
  9974  001FC4  0008               	tblrd		*
  9975  001FC6  50F5               	movf	tablat,w,c
  9976  001FC8  D002               	bra	u13480
  9977  001FCA                     u13487:
  9978  001FCA  D956               	call	PL24	;call to abstracted procedure
  9979  001FCC  50EF               	movf	indf0,w,c
  9980  001FCE                     u13480:
  9981  001FCE  0900               	iorlw	0
  9982  001FD0  E001 D4E1          	bnz	l8740
  9983                           
  9984                           ;tcpv4.c: 1044: {
  9985                           ;tcpv4.c: 1046: currentTCB->flags = 0x04U;
  9986  001FD4  0E35               	movlw	53
  9987  001FD6  D91C               	call	PL20	;call to abstracted procedure
  9988  001FD8  64F7               	cpfsgt	tblptrh,c
  9989  001FDA  D004               	bra	u13507
  9990  001FDC  0E04               	movlw	4
  9991  001FDE  6EF5               	movwf	tablat,c
  9992  001FE0  000C               	tblwt		*
  9993  001FE2  D003               	bra	u13500
  9994  001FE4                     u13507:
  9995  001FE4  D949               	call	PL24	;call to abstracted procedure
  9996  001FE6  0E04               	movlw	4
  9997  001FE8  6EEF               	movwf	indf0,c
  9998  001FEA                     u13500:
  9999                           
 10000                           ;tcpv4.c: 1047: if(TCP_Snd(currentTCB))
 10001  001FEA  D9F5               	call	PL90	;call to abstracted procedure
 10002  001FEC  ECA2  F012         	call	_TCP_Snd	;wreg free
 10003  001FF0  EF5E  F00A         	goto	L8
 10004  001FF4                     l8858:
 10005  001FF4  0100               	movlb	0	; () banked
 10006  001FF6  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 10007                           
 10008                           ; Switch size 1, requested type "space"
 10009                           ; Number of cases is 4, Range of values is 4 to 12
 10010                           ; switch strategies available:
 10011                           ; Name         Instructions Cycles
 10012                           ; simple_byte           13     7 (average)
 10013                           ;	Chosen strategy is simple_byte
 10014  001FF8  0A04               	xorlw	4	; case 4
 10015  001FFA  E0B7               	bz	l8834
 10016  001FFC  0A02               	xorlw	2	; case 6
 10017  001FFE  E0A2               	bz	l8828
 10018  002000  0A01               	xorlw	1	; case 7
 10019  002002  E0C8               	bz	l8838
 10020  002004  0A0B               	xorlw	11	; case 12
 10021  002006  E0DA               	bz	l8844
 10022  002008  D0EA               	goto	l8934
 10023  00200A                     l8860:
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;tcpv4.c: 1062: ;
 10027                           ;tcpv4.c: 1063: if(TCP_Snd(currentTCB))
 10028  00200A  D9E5               	call	PL90	;call to abstracted procedure
 10029  00200C  ECA2  F012         	call	_TCP_Snd	;wreg free
 10030  002010  D7CF               	goto	L13
 10031  002012                     l8864:
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;tcpv4.c: 1069: ;
 10035                           ;tcpv4.c: 1070: if (currentTCB->timeoutsCount)
 10036  002012  0E34               	movlw	52
 10037  002014  D8FD               	call	PL20	;call to abstracted procedure
 10038  002016  64F7               	cpfsgt	tblptrh,c
 10039  002018  D003               	bra	u13537
 10040  00201A  0008               	tblrd		*
 10041  00201C  50F5               	movf	tablat,w,c
 10042  00201E  D002               	bra	u13530
 10043  002020                     u13537:
 10044  002020  D92B               	call	PL24	;call to abstracted procedure
 10045  002022  50EF               	movf	indf0,w,c
 10046  002024                     u13530:
 10047  002024  0900               	iorlw	0
 10048  002026  E001 D4B6          	bnz	l8740
 10049                           
 10050                           ;tcpv4.c: 1074: {
 10051                           ;tcpv4.c: 1076: currentTCB->flags = 0x04U;
 10052  00202A  0E35               	movlw	53
 10053  00202C  D8F1               	call	PL20	;call to abstracted procedure
 10054  00202E  64F7               	cpfsgt	tblptrh,c
 10055  002030  D004               	bra	u13557
 10056  002032  0E04               	movlw	4
 10057  002034  6EF5               	movwf	tablat,c
 10058  002036  000C               	tblwt		*
 10059  002038  D003               	bra	u13550
 10060  00203A                     u13557:
 10061  00203A  D91E               	call	PL24	;call to abstracted procedure
 10062  00203C  0E04               	movlw	4
 10063  00203E  6EEF               	movwf	indf0,c
 10064  002040                     u13550:
 10065                           
 10066                           ;tcpv4.c: 1077: if(TCP_Snd(currentTCB))
 10067  002040  D9CA               	call	PL90	;call to abstracted procedure
 10068  002042  ECA2  F012         	call	_TCP_Snd	;wreg free
 10069  002046  EF5E  F00A         	goto	L8
 10070  00204A                     l8878:
 10071  00204A  0100               	movlb	0	; () banked
 10072  00204C  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 10073                           
 10074                           ; Switch size 1, requested type "space"
 10075                           ; Number of cases is 2, Range of values is 6 to 12
 10076                           ; switch strategies available:
 10077                           ; Name         Instructions Cycles
 10078                           ; simple_byte            7     4 (average)
 10079                           ;	Chosen strategy is simple_byte
 10080  00204E  0A06               	xorlw	6	; case 6
 10081  002050  E0DC               	bz	l8860
 10082  002052  0A0A               	xorlw	10	; case 12
 10083  002054  E0DE               	bz	l8864
 10084  002056  D0C3               	goto	l8934
 10085  002058                     l8884:
 10086  002058  0100               	movlb	0	; () banked
 10087  00205A  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 10088                           
 10089                           ; Switch size 1, requested type "space"
 10090                           ; Number of cases is 1, Range of values is 4 to 4
 10091                           ; switch strategies available:
 10092                           ; Name         Instructions Cycles
 10093                           ; simple_byte            4     3 (average)
 10094                           ;	Chosen strategy is simple_byte
 10095  00205C  0A04               	xorlw	4	; case 4
 10096  00205E  E0AB               	bz	l8842
 10097  002060  D0BE               	goto	l8934
 10098  002062                     l8886:
 10099                           
 10100                           ; BSR set to: 0
 10101                           ;tcpv4.c: 1107: case RCV_ACK:
 10102                           ;tcpv4.c: 1108: if ((currentTCB->destIP == receivedRemoteAddress) &&
 10103                           ;tcpv4.c: 1109: (currentTCB->destPort == tcpHeader.sourcePort))
 10104  002062  0E02               	movlw	2
 10105  002064  D8D5               	call	PL20	;call to abstracted procedure
 10106  002066  64F7               	cpfsgt	tblptrh,c
 10107  002068  D002               	bra	u13577
 10108  00206A  D91D               	call	PL30	;call to abstracted procedure
 10109  00206C  D002               	bra	u13570
 10110  00206E                     u13577:
 10111  00206E  D904               	call	PL24	;call to abstracted procedure
 10112  002070  D960               	call	PL46	;call to abstracted procedure
 10113  002072                     u13570:
 10114  002072  D9FF               	call	PL222	;call to abstracted procedure
 10115  002074  E106               	bnz	u13581
 10116  002076  DA02               	call	PL228	;call to abstracted procedure
 10117  002078  E104               	bnz	u13581
 10118  00207A  DA0A               	call	PL238	;call to abstracted procedure
 10119  00207C  E102               	bnz	u13581
 10120  00207E  DA0D               	call	PL242	;call to abstracted procedure
 10121  002080  A4D8               	btfss	status,2,c
 10122  002082                     u13581:
 10123  002082  D0AD               	goto	l8934
 10124                           
 10125                           ; BSR set to: 0
 10126  002084  0E06               	movlw	6
 10127  002086  D8C4               	call	PL20	;call to abstracted procedure
 10128  002088  64F7               	cpfsgt	tblptrh,c
 10129  00208A  D003               	bra	u13597
 10130  00208C  0009               	tblrd		*+
 10131  00208E  D918               	call	PL32	;call to abstracted procedure
 10132  002090  D005               	bra	u13590
 10133  002092                     u13597:
 10134  002092  D8F2               	call	PL24	;call to abstracted procedure
 10135  002094  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
 10136  002098  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
 10137  00209C                     u13590:
 10138  00209C  DA35               	call	PL286	;call to abstracted procedure
 10139  00209E  E102               	bnz	u13601
 10140  0020A0  DA29               	call	PL280	;call to abstracted procedure
 10141  0020A2  D09A               	goto	L14
 10142  0020A4                     u13601:
 10143  0020A4  D09C               	goto	l8934
 10144  0020A6                     l8894:
 10145                           
 10146                           ; BSR set to: 0
 10147                           ;tcpv4.c: 1117: if (currentTCB->timeoutsCount)
 10148  0020A6  0E34               	movlw	52
 10149  0020A8  D8B3               	call	PL20	;call to abstracted procedure
 10150  0020AA  64F7               	cpfsgt	tblptrh,c
 10151  0020AC  D003               	bra	u13617
 10152  0020AE  0008               	tblrd		*
 10153  0020B0  50F5               	movf	tablat,w,c
 10154  0020B2  D002               	bra	u13610
 10155  0020B4                     u13617:
 10156  0020B4  D8E1               	call	PL24	;call to abstracted procedure
 10157  0020B6  50EF               	movf	indf0,w,c
 10158  0020B8                     u13610:
 10159  0020B8  0900               	iorlw	0
 10160  0020BA  E001 D46C          	bnz	l8740
 10161                           
 10162                           ;tcpv4.c: 1121: {
 10163                           ;tcpv4.c: 1123: currentTCB->flags = 0x04U;
 10164  0020BE  0E35               	movlw	53
 10165  0020C0  D8A7               	call	PL20	;call to abstracted procedure
 10166  0020C2  64F7               	cpfsgt	tblptrh,c
 10167  0020C4  D004               	bra	u13637
 10168  0020C6  0E04               	movlw	4
 10169  0020C8  6EF5               	movwf	tablat,c
 10170  0020CA  000C               	tblwt		*
 10171  0020CC  D003               	bra	u13630
 10172  0020CE                     u13637:
 10173  0020CE  D8D4               	call	PL24	;call to abstracted procedure
 10174  0020D0  0E04               	movlw	4
 10175  0020D2  6EEF               	movwf	indf0,c
 10176  0020D4                     u13630:
 10177                           
 10178                           ;tcpv4.c: 1124: if(TCP_Snd(currentTCB))
 10179  0020D4  D980               	call	PL90	;call to abstracted procedure
 10180  0020D6  ECA2  F012         	call	_TCP_Snd	;wreg free
 10181  0020DA  EF5E  F00A         	goto	L8
 10182  0020DE                     l8908:
 10183  0020DE  0100               	movlb	0	; () banked
 10184  0020E0  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 10185                           
 10186                           ; Switch size 1, requested type "space"
 10187                           ; Number of cases is 3, Range of values is 4 to 12
 10188                           ; switch strategies available:
 10189                           ; Name         Instructions Cycles
 10190                           ; simple_byte           10     6 (average)
 10191                           ;	Chosen strategy is simple_byte
 10192  0020E2  0A04               	xorlw	4	; case 4
 10193  0020E4  E0BE               	bz	l8886
 10194  0020E6  0A03               	xorlw	3	; case 7
 10195  0020E8  E0BC               	bz	l8886
 10196  0020EA  0A0B               	xorlw	11	; case 12
 10197  0020EC  E0DC               	bz	l8894
 10198  0020EE  D077               	goto	l8934
 10199  0020F0                     l8912:
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;tcpv4.c: 1143: ;
 10203                           ;tcpv4.c: 1145: currentTCB->timeout = ((unsigned long)1*2);
 10204  0020F0  0E30               	movlw	48
 10205  0020F2  D88E               	call	PL20	;call to abstracted procedure
 10206  0020F4  64F7               	cpfsgt	tblptrh,c
 10207  0020F6  D002               	bra	u13657
 10208  0020F8  D968               	call	PL84	;call to abstracted procedure
 10209  0020FA  D002               	bra	u13650
 10210  0020FC                     u13657:
 10211  0020FC  D8BD               	call	PL24	;call to abstracted procedure
 10212  0020FE  D9B5               	call	PL214	;call to abstracted procedure
 10213  002100                     u13650:
 10214                           
 10215                           ;tcpv4.c: 1146: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
 10216  002100  0E32               	movlw	50
 10217  002102  D886               	call	PL20	;call to abstracted procedure
 10218  002104  64F7               	cpfsgt	tblptrh,c
 10219  002106  D002               	bra	u13667
 10220  002108  D960               	call	PL84	;call to abstracted procedure
 10221  00210A  D002               	bra	u13660
 10222  00210C                     u13667:
 10223  00210C  D8B5               	call	PL24	;call to abstracted procedure
 10224  00210E  D9AD               	call	PL214	;call to abstracted procedure
 10225  002110                     u13660:
 10226                           
 10227                           ;tcpv4.c: 1147: currentTCB->timeoutsCount = (3u);
 10228  002110  0E34               	movlw	52
 10229  002112  D87E               	call	PL20	;call to abstracted procedure
 10230  002114  64F7               	cpfsgt	tblptrh,c
 10231  002116  D004               	bra	u13677
 10232  002118  0E03               	movlw	3
 10233  00211A  6EF5               	movwf	tablat,c
 10234  00211C  000C               	tblwt		*
 10235  00211E  D003               	bra	u13670
 10236  002120                     u13677:
 10237  002120  D8AB               	call	PL24	;call to abstracted procedure
 10238  002122  0E03               	movlw	3
 10239  002124  6EEF               	movwf	indf0,c
 10240  002126                     u13670:
 10241                           
 10242                           ;tcpv4.c: 1148: currentTCB->flags = 0x02U;
 10243  002126  0E35               	movlw	53
 10244  002128  D873               	call	PL20	;call to abstracted procedure
 10245  00212A  64F7               	cpfsgt	tblptrh,c
 10246  00212C  D004               	bra	u13687
 10247  00212E  0E02               	movlw	2
 10248  002130  6EF5               	movwf	tablat,c
 10249  002132  000C               	tblwt		*
 10250  002134  D003               	bra	u13680
 10251  002136                     u13687:
 10252  002136  D8A0               	call	PL24	;call to abstracted procedure
 10253  002138  0E02               	movlw	2
 10254  00213A  6EEF               	movwf	indf0,c
 10255  00213C                     u13680:
 10256                           
 10257                           ;tcpv4.c: 1149: TCP_Snd(currentTCB);
 10258  00213C  D94C               	call	PL90	;call to abstracted procedure
 10259  00213E  ECA2  F012         	call	_TCP_Snd	;wreg free
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;tcpv4.c: 1150: nextState = SYN_SENT;
 10263  002142  0E02               	movlw	2
 10264  002144  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;tcpv4.c: 1151: ret = 1;
 10268  002146  0E01               	movlw	1
 10269  002148  6FD0               	movwf	TCP_FiniteStateMachine@ret& (0+255),b
 10270                           
 10271                           ;tcpv4.c: 1152: break;
 10272  00214A  D049               	goto	l8934
 10273  00214C                     l8920:
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;tcpv4.c: 1154: ;
 10277                           ;tcpv4.c: 1155: currentTCB->destIP = 0;
 10278  00214C  0E02               	movlw	2
 10279  00214E  D860               	call	PL20	;call to abstracted procedure
 10280  002150  64F7               	cpfsgt	tblptrh,c
 10281  002152  D006               	bra	u13697
 10282  002154  6AF5               	clrf	tablat,c
 10283  002156  000D               	tblwt		*+
 10284  002158  6AF5               	clrf	tablat,c
 10285  00215A  000D               	tblwt		*+
 10286  00215C  D8FC               	call	PL58	;call to abstracted procedure
 10287  00215E  D002               	bra	u13690
 10288  002160                     u13697:
 10289  002160  D88B               	call	PL24	;call to abstracted procedure
 10290  002162  D93E               	call	PL92	;call to abstracted procedure
 10291  002164                     u13690:
 10292                           
 10293                           ;tcpv4.c: 1156: currentTCB->destPort = 0;
 10294  002164  0E06               	movlw	6
 10295  002166  D854               	call	PL20	;call to abstracted procedure
 10296  002168  64F7               	cpfsgt	tblptrh,c
 10297  00216A  D002               	bra	u13707
 10298  00216C  D8F4               	call	PL58	;call to abstracted procedure
 10299  00216E  D003               	bra	u13700
 10300  002170                     u13707:
 10301  002170  D883               	call	PL24	;call to abstracted procedure
 10302  002172  6AEE               	clrf	postinc0,c
 10303  002174  6AEF               	clrf	indf0,c
 10304  002176                     u13700:
 10305                           
 10306                           ;tcpv4.c: 1157: nextState = LISTEN;
 10307  002176  0E01               	movlw	1
 10308  002178  0100               	movlb	0	; () banked
 10309  00217A  D7E4               	goto	L15
 10310  00217C                     l8928:
 10311  00217C  0100               	movlb	0	; () banked
 10312  00217E  51D3               	movf	TCP_FiniteStateMachine@event& (0+255),w,b
 10313                           
 10314                           ; Switch size 1, requested type "space"
 10315                           ; Number of cases is 2, Range of values is 1 to 2
 10316                           ; switch strategies available:
 10317                           ; Name         Instructions Cycles
 10318                           ; simple_byte            7     4 (average)
 10319                           ;	Chosen strategy is simple_byte
 10320  002180  0A01               	xorlw	1	; case 1
 10321  002182  E0B6               	bz	l8912
 10322  002184  0A03               	xorlw	3	; case 2
 10323  002186  E0E2               	bz	l8920
 10324  002188  D02A               	goto	l8934
 10325  00218A                     l8932:
 10326                           
 10327                           ; BSR set to: 0
 10328  00218A  0E2A               	movlw	42
 10329  00218C  D841               	call	PL20	;call to abstracted procedure
 10330  00218E  64F7               	cpfsgt	tblptrh,c
 10331  002190  D003               	bra	u13717
 10332  002192  0008               	tblrd		*
 10333  002194  50F5               	movf	tablat,w,c
 10334  002196  D002               	bra	u13710
 10335  002198                     u13717:
 10336  002198  D86F               	call	PL24	;call to abstracted procedure
 10337  00219A  50EF               	movf	indf0,w,c
 10338  00219C                     u13710:
 10339                           
 10340                           ; Switch size 1, requested type "space"
 10341                           ; Number of cases is 11, Range of values is 0 to 10
 10342                           ; switch strategies available:
 10343                           ; Name         Instructions Cycles
 10344                           ; simple_byte           34    18 (average)
 10345                           ;	Chosen strategy is simple_byte
 10346  00219C  0A00               	xorlw	0	; case 0
 10347  00219E  E0EE               	bz	l8928
 10348  0021A0  0A01               	xorlw	1	; case 1
 10349  0021A2  E102 EF3C  F009    	bz	l8616
 10350  0021A8  0A03               	xorlw	3	; case 2
 10351  0021AA  E102 EF62  F00B    	bz	l8708
 10352  0021B0  0A01               	xorlw	1	; case 3
 10353  0021B2  E101 D50C          	bz	l8764
 10354  0021B6  0A07               	xorlw	7	; case 4
 10355  0021B8  E101 D6AF          	bz	l8826
 10356  0021BC  0A01               	xorlw	1	; case 5
 10357  0021BE  E101 D719          	bz	l8858
 10358  0021C2  0A03               	xorlw	3	; case 6
 10359  0021C4  E101 D741          	bz	l8878
 10360  0021C8  0A01               	xorlw	1	; case 7
 10361  0021CA  E009               	bz	l8934
 10362  0021CC  0A0F               	xorlw	15	; case 8
 10363  0021CE  E101 D743          	bz	l8884
 10364  0021D2  0A01               	xorlw	1	; case 9
 10365  0021D4  E084               	bz	l8908
 10366  0021D6  0A03               	xorlw	3	; case 10
 10367  0021D8                     L14:
 10368  0021D8  E102 EF32  F009    	bz	l1227
 10369  0021DE                     l8934:
 10370                           
 10371                           ;tcpv4.c: 1167: currentTCB->connectionEvent = NOP;
 10372  0021DE  0E2B               	movlw	43
 10373  0021E0  D817               	call	PL20	;call to abstracted procedure
 10374  0021E2  64F7               	cpfsgt	tblptrh,c
 10375  0021E4  D004               	bra	u13727
 10376  0021E6  0E0D               	movlw	13
 10377  0021E8  6EF5               	movwf	tablat,c
 10378  0021EA  000C               	tblwt		*
 10379  0021EC  D003               	bra	u13720
 10380  0021EE                     u13727:
 10381  0021EE  D844               	call	PL24	;call to abstracted procedure
 10382  0021F0  0E0D               	movlw	13
 10383  0021F2  6EEF               	movwf	indf0,c
 10384  0021F4                     u13720:
 10385                           
 10386                           ;tcpv4.c: 1168: currentTCB->fsmState = nextState;
 10387  0021F4  0E2A               	movlw	42
 10388  0021F6  D80C               	call	PL20	;call to abstracted procedure
 10389  0021F8  64F7               	cpfsgt	tblptrh,c
 10390  0021FA  D004               	bra	u13737
 10391  0021FC  C0D4  FFF5         	movff	TCP_FiniteStateMachine@nextState,tablat
 10392  002200  000C               	tblwt		*
 10393  002202  D003               	bra	u13730
 10394  002204                     u13737:
 10395  002204  D839               	call	PL24	;call to abstracted procedure
 10396  002206  C0D4  FFEF         	movff	TCP_FiniteStateMachine@nextState,indf0
 10397  00220A                     u13730:
 10398                           
 10399                           ;tcpv4.c: 1169: return ret;
 10400  00220A  0100               	movlb	0	; () banked
 10401  00220C  51D0               	movf	TCP_FiniteStateMachine@ret& (0+255),w,b
 10402                           
 10403                           ; BSR set to: 0
 10404  00220E  0012               	return		;funcret
 10405  002210                     __end_of_TCP_FiniteStateMachine:
 10406                           	opt stack 0
 10407  002210                     PL20:
 10408                           	opt stack 17
 10409  002210  0101               	movlb	1	; () banked
 10410  002212  25D5               	addwf	_currentTCB& (0+255),w,b
 10411  002214  0100               	movlb	0	; () banked
 10412  002216  6FC4               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 10413  002218  0E00               	movlw	0
 10414  00221A  0101               	movlb	1	; () banked
 10415  00221C  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 10416  00221E  0100               	movlb	0	; () banked
 10417  002220  6FC5               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 10418  002222  C0C4  FFF6         	movff	??_TCP_FiniteStateMachine,tblptrl
 10419  002226  C0C5  FFF7         	movff	??_TCP_FiniteStateMachine+1,tblptrh
 10420  00222A  0E00               	movlw	low (__smallconst shr (0+16))
 10421  00222C  6EF8               	movwf	tblptru,c
 10422  00222E  0E0F               	movlw	(high __ramtop+-1)
 10423  002230  0012               	return	
 10424  002232                     __end_ofPL20:
 10425                           	opt stack 0
 10426  002232                     PL22:
 10427                           	opt stack 17
 10428  002232  0100               	movlb	0	; () banked
 10429  002234  6FC4               	movwf	??_TCP_FiniteStateMachine& (0+255),b
 10430  002236  0E00               	movlw	0
 10431  002238  0101               	movlb	1	; () banked
 10432  00223A  21ED               	addwfc	(_tcpHeader+5)& (0+255),w,b
 10433  00223C  0100               	movlb	0	; () banked
 10434  00223E  6FC5               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 10435  002240  0E00               	movlw	0
 10436  002242  0101               	movlb	1	; () banked
 10437  002244  21EE               	addwfc	(_tcpHeader+6)& (0+255),w,b
 10438  002246  0100               	movlb	0	; () banked
 10439  002248  6FC6               	movwf	(??_TCP_FiniteStateMachine+2)& (0+255),b
 10440  00224A  0E00               	movlw	0
 10441  00224C  0101               	movlb	1	; () banked
 10442  00224E  21EF               	addwfc	(_tcpHeader+7)& (0+255),w,b
 10443  002250  0100               	movlb	0	; () banked
 10444  002252  6FC7               	movwf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 10445  002254  0E0C               	movlw	12
 10446  002256  0101               	movlb	1	; () banked
 10447  002258  25D5               	addwf	_currentTCB& (0+255),w,b
 10448  00225A  0100               	movlb	0	; () banked
 10449  00225C  6FC8               	movwf	(??_TCP_FiniteStateMachine+4)& (0+255),b
 10450  00225E  0E00               	movlw	0
 10451  002260  0101               	movlb	1	; () banked
 10452  002262  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 10453  002264  0100               	movlb	0	; () banked
 10454  002266  6FC9               	movwf	(??_TCP_FiniteStateMachine+5)& (0+255),b
 10455  002268  C0C8  FFF6         	movff	??_TCP_FiniteStateMachine+4,tblptrl
 10456  00226C  C0C9  FFF7         	movff	??_TCP_FiniteStateMachine+5,tblptrh
 10457  002270  0E00               	movlw	low (__smallconst shr (0+16))
 10458  002272  6EF8               	movwf	tblptru,c
 10459  002274  0E0F               	movlw	(high __ramtop+-1)
 10460  002276  0012               	return	
 10461  002278                     __end_ofPL22:
 10462                           	opt stack 0
 10463  002278                     PL24:
 10464                           	opt stack 22
 10465  002278  CFF6 FFE9          	movff	tblptrl,fsr0l
 10466  00227C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10467  002280  0012               	return	
 10468  002282                     __end_ofPL24:
 10469                           	opt stack 0
 10470  002282                     PL26:
 10471                           	opt stack 17
 10472  002282  0E10               	movlw	16
 10473  002284  0101               	movlb	1	; () banked
 10474  002286  25D5               	addwf	_currentTCB& (0+255),w,b
 10475  002288  0100               	movlb	0	; () banked
 10476  00228A  6FCE               	movwf	(??_TCP_FiniteStateMachine+10)& (0+255),b
 10477  00228C  0E00               	movlw	0
 10478  00228E  0101               	movlb	1	; () banked
 10479  002290  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 10480  002292  0100               	movlb	0	; () banked
 10481  002294  6FCF               	movwf	(??_TCP_FiniteStateMachine+11)& (0+255),b
 10482  002296  C0CE  FFF6         	movff	??_TCP_FiniteStateMachine+10,tblptrl
 10483  00229A  C0CF  FFF7         	movff	??_TCP_FiniteStateMachine+11,tblptrh
 10484  00229E  0E00               	movlw	low (__smallconst shr (0+16))
 10485  0022A0  6EF8               	movwf	tblptru,c
 10486  0022A2  0E0F               	movlw	(high __ramtop+-1)
 10487  0022A4  0012               	return	
 10488  0022A6                     __end_ofPL26:
 10489                           	opt stack 0
 10490  0022A6                     PL30:
 10491                           	opt stack 17
 10492  0022A6  0009               	tblrd		*+
 10493  0022A8  CFF5 F0C6          	movff	tablat,??_TCP_FiniteStateMachine+2
 10494  0022AC  0009               	tblrd		*+
 10495  0022AE  CFF5 F0C7          	movff	tablat,??_TCP_FiniteStateMachine+3
 10496  0022B2  0009               	tblrd		*+
 10497  0022B4  CFF5 F0C8          	movff	tablat,??_TCP_FiniteStateMachine+4
 10498  0022B8  0009               	tblrd		*+
 10499  0022BA  CFF5 F0C9          	movff	tablat,??_TCP_FiniteStateMachine+5
 10500  0022BE  0012               	return	
 10501  0022C0                     __end_ofPL30:
 10502                           	opt stack 0
 10503  0022C0                     PL32:
 10504                           	opt stack 17
 10505  0022C0  CFF5 F0C6          	movff	tablat,??_TCP_FiniteStateMachine+2
 10506  0022C4  0009               	tblrd		*+
 10507  0022C6  CFF5 F0C7          	movff	tablat,??_TCP_FiniteStateMachine+3
 10508  0022CA  0012               	return	
 10509  0022CC                     __end_ofPL32:
 10510                           	opt stack 0
 10511  0022CC                     PL34:
 10512                           	opt stack 17
 10513  0022CC  0101               	movlb	1	; () banked
 10514  0022CE  25D5               	addwf	_currentTCB& (0+255),w,b
 10515  0022D0  0100               	movlb	0	; () banked
 10516  0022D2  6FC8               	movwf	(??_TCP_FiniteStateMachine+4)& (0+255),b
 10517  0022D4  0E00               	movlw	0
 10518  0022D6  0101               	movlb	1	; () banked
 10519  0022D8  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 10520  0022DA  0100               	movlb	0	; () banked
 10521  0022DC  6FC9               	movwf	(??_TCP_FiniteStateMachine+5)& (0+255),b
 10522  0022DE  C0C8  FFF6         	movff	??_TCP_FiniteStateMachine+4,tblptrl
 10523  0022E2  C0C9  FFF7         	movff	??_TCP_FiniteStateMachine+5,tblptrh
 10524  0022E6  0E00               	movlw	low (__smallconst shr (0+16))
 10525  0022E8  6EF8               	movwf	tblptru,c
 10526  0022EA  0E0F               	movlw	(high __ramtop+-1)
 10527  0022EC  0012               	return	
 10528  0022EE                     __end_ofPL34:
 10529                           	opt stack 0
 10530  0022EE                     PL38:
 10531                           	opt stack 17
 10532  0022EE  0101               	movlb	1	; () banked
 10533  0022F0  51F6               	movf	(_tcpHeader+14)& (0+255),w,b
 10534  0022F2  0100               	movlb	0	; () banked
 10535  0022F4  6FC5               	movwf	(??_TCP_FiniteStateMachine+1)& (0+255),b
 10536  0022F6  6BC4               	clrf	??_TCP_FiniteStateMachine& (0+255),b
 10537  0022F8  EE21  F0F6         	lfsr	2,_tcpHeader+14
 10538  0022FC  CFDE F0C6          	movff	postinc2,??_TCP_FiniteStateMachine+2
 10539  002300  CFDD F0C7          	movff	postdec2,??_TCP_FiniteStateMachine+3
 10540  002304  C0C7  F0C6         	movff	??_TCP_FiniteStateMachine+3,??_TCP_FiniteStateMachine+2
 10541  002308  6BC7               	clrf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 10542  00230A  6BC7               	clrf	(??_TCP_FiniteStateMachine+3)& (0+255),b
 10543  00230C  51C4               	movf	??_TCP_FiniteStateMachine& (0+255),w,b
 10544  00230E  13C6               	iorwf	(??_TCP_FiniteStateMachine+2)& (0+255),f,b
 10545  002310  51C5               	movf	(??_TCP_FiniteStateMachine+1)& (0+255),w,b
 10546  002312  13C7               	iorwf	(??_TCP_FiniteStateMachine+3)& (0+255),f,b
 10547  002314  0C18               	retlw	24
 10548  002316                     __end_ofPL38:
 10549                           	opt stack 0
 10550  002316                     PL44:
 10551                           	opt stack 17
 10552  002316  0E01               	movlw	1
 10553  002318  0100               	movlb	0	; () banked
 10554  00231A  25C6               	addwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 10555  00231C  6FCA               	movwf	(??_TCP_FiniteStateMachine+6)& (0+255),b
 10556  00231E  0E00               	movlw	0
 10557  002320  21C7               	addwfc	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 10558  002322  6FCB               	movwf	(??_TCP_FiniteStateMachine+7)& (0+255),b
 10559  002324  0E00               	movlw	0
 10560  002326  21C8               	addwfc	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 10561  002328  6FCC               	movwf	(??_TCP_FiniteStateMachine+8)& (0+255),b
 10562  00232A  0E00               	movlw	0
 10563  00232C  21C9               	addwfc	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 10564  00232E  6FCD               	movwf	(??_TCP_FiniteStateMachine+9)& (0+255),b
 10565  002330  0012               	return	
 10566  002332                     __end_ofPL44:
 10567                           	opt stack 0
 10568  002332                     PL46:
 10569                           	opt stack 17
 10570  002332  CFEE F0C6          	movff	postinc0,??_TCP_FiniteStateMachine+2
 10571  002336  CFEE F0C7          	movff	postinc0,??_TCP_FiniteStateMachine+3
 10572  00233A  CFEE F0C8          	movff	postinc0,??_TCP_FiniteStateMachine+4
 10573  00233E  CFEE F0C9          	movff	postinc0,??_TCP_FiniteStateMachine+5
 10574  002342  0012               	return	
 10575  002344                     __end_ofPL46:
 10576                           	opt stack 0
 10577  002344                     PL50:
 10578                           	opt stack 17
 10579  002344  0E01               	movlw	1
 10580  002346  0101               	movlb	1	; () banked
 10581  002348  25EC               	addwf	(_tcpHeader+4)& (0+255),w,b
 10582  00234A  0012               	return	
 10583  00234C                     __end_ofPL50:
 10584                           	opt stack 0
 10585  00234C                     PL54:
 10586                           	opt stack 17
 10587  00234C  0101               	movlb	1	; () banked
 10588  00234E  25D5               	addwf	_currentTCB& (0+255),w,b
 10589  002350  0100               	movlb	0	; () banked
 10590  002352  6FCE               	movwf	(??_TCP_FiniteStateMachine+10)& (0+255),b
 10591  002354  0012               	return	
 10592  002356                     __end_ofPL54:
 10593                           	opt stack 0
 10594  002356                     PL58:
 10595                           	opt stack 17
 10596  002356  6AF5               	clrf	tablat,c
 10597  002358  000D               	tblwt		*+
 10598  00235A  6AF5               	clrf	tablat,c
 10599  00235C  000C               	tblwt		*
 10600  00235E  0012               	return	
 10601  002360                     __end_ofPL58:
 10602                           	opt stack 0
 10603  002360                     PL66:
 10604                           	opt stack 17
 10605  002360  C1EC  FFF5         	movff	_tcpHeader+4,tablat
 10606  002364  000D               	tblwt		*+
 10607  002366  C1ED  FFF5         	movff	_tcpHeader+5,tablat
 10608  00236A  000D               	tblwt		*+
 10609  00236C  C1EE  FFF5         	movff	_tcpHeader+6,tablat
 10610  002370  000D               	tblwt		*+
 10611  002372  C1EF  FFF5         	movff	_tcpHeader+7,tablat
 10612  002376  000C               	tblwt		*
 10613  002378  0012               	return	
 10614  00237A                     __end_ofPL66:
 10615                           	opt stack 0
 10616  00237A                     PL68:
 10617                           	opt stack 17
 10618  00237A  C0CA  FFF5         	movff	??_TCP_FiniteStateMachine+6,tablat
 10619  00237E  000D               	tblwt		*+
 10620  002380  C0CB  FFF5         	movff	??_TCP_FiniteStateMachine+7,tablat
 10621  002384  000D               	tblwt		*+
 10622  002386  C0CC  FFF5         	movff	??_TCP_FiniteStateMachine+8,tablat
 10623  00238A  000D               	tblwt		*+
 10624  00238C  C0CD  FFF5         	movff	??_TCP_FiniteStateMachine+9,tablat
 10625  002390  000C               	tblwt		*
 10626  002392  0012               	return	
 10627  002394                     __end_ofPL68:
 10628                           	opt stack 0
 10629  002394                     PL78:
 10630                           	opt stack 17
 10631  002394  C0C6  FFF5         	movff	??_TCP_FiniteStateMachine+2,tablat
 10632  002398  000D               	tblwt		*+
 10633  00239A  C0C7  FFF5         	movff	??_TCP_FiniteStateMachine+3,tablat
 10634  00239E  000C               	tblwt		*
 10635  0023A0  0012               	return	
 10636  0023A2                     __end_ofPL78:
 10637                           	opt stack 0
 10638  0023A2                     PL80:
 10639                           	opt stack 17
 10640  0023A2  C0C4  FFF5         	movff	??_TCP_FiniteStateMachine,tablat
 10641  0023A6  000D               	tblwt		*+
 10642  0023A8  C0C5  FFF5         	movff	??_TCP_FiniteStateMachine+1,tablat
 10643  0023AC  000D               	tblwt		*+
 10644  0023AE  0012               	return	
 10645  0023B0                     __end_ofPL80:
 10646                           	opt stack 0
 10647  0023B0                     PL82:
 10648                           	opt stack 17
 10649  0023B0  C1F0  FFF5         	movff	_tcpHeader+8,tablat
 10650  0023B4  000D               	tblwt		*+
 10651  0023B6  C1F1  FFF5         	movff	_tcpHeader+9,tablat
 10652  0023BA  000D               	tblwt		*+
 10653  0023BC  C1F2  FFF5         	movff	_tcpHeader+10,tablat
 10654  0023C0  000D               	tblwt		*+
 10655  0023C2  C1F3  FFF5         	movff	_tcpHeader+11,tablat
 10656  0023C6  000C               	tblwt		*
 10657  0023C8  0012               	return	
 10658  0023CA                     __end_ofPL82:
 10659                           	opt stack 0
 10660  0023CA                     PL84:
 10661                           	opt stack 17
 10662  0023CA  0E02               	movlw	2
 10663  0023CC  6EF5               	movwf	tablat,c
 10664  0023CE  000D               	tblwt		*+
 10665  0023D0  6AF5               	clrf	tablat,c
 10666  0023D2  000C               	tblwt		*
 10667  0023D4  0C02               	retlw	2
 10668  0023D6                     __end_ofPL84:
 10669                           	opt stack 0
 10670  0023D6                     PL90:
 10671                           	opt stack 17
 10672  0023D6  C1D5  F067         	movff	_currentTCB,TCP_Snd@tcbPtr
 10673  0023DA  C1D6  F068         	movff	_currentTCB+1,TCP_Snd@tcbPtr+1
 10674  0023DE  0012               	return	
 10675  0023E0                     __end_ofPL90:
 10676                           	opt stack 0
 10677  0023E0                     PL92:
 10678                           	opt stack 17
 10679  0023E0  6AEE               	clrf	postinc0,c
 10680  0023E2  6AEE               	clrf	postinc0,c
 10681  0023E4  6AEE               	clrf	postinc0,c
 10682  0023E6  6AEF               	clrf	indf0,c
 10683  0023E8  0012               	return	
 10684  0023EA                     __end_ofPL92:
 10685                           	opt stack 0
 10686  0023EA                     PL96:
 10687                           	opt stack 17
 10688  0023EA  C0CA  FFEE         	movff	??_TCP_FiniteStateMachine+6,postinc0
 10689  0023EE  C0CB  FFEE         	movff	??_TCP_FiniteStateMachine+7,postinc0
 10690  0023F2  C0CC  FFEE         	movff	??_TCP_FiniteStateMachine+8,postinc0
 10691  0023F6  C0CD  FFEF         	movff	??_TCP_FiniteStateMachine+9,indf0
 10692  0023FA  0012               	return	
 10693  0023FC                     __end_ofPL96:
 10694                           	opt stack 0
 10695  0023FC                     PL98:
 10696                           	opt stack 17
 10697  0023FC  C1EC  FFEE         	movff	_tcpHeader+4,postinc0
 10698  002400  C1ED  FFEE         	movff	_tcpHeader+5,postinc0
 10699  002404  C1EE  FFEE         	movff	_tcpHeader+6,postinc0
 10700  002408  C1EF  FFEF         	movff	_tcpHeader+7,indf0
 10701  00240C  0012               	return	
 10702  00240E                     __end_ofPL98:
 10703                           	opt stack 0
 10704  00240E                     PL100:
 10705                           	opt stack 17
 10706  00240E  6FCF               	movwf	(??_TCP_FiniteStateMachine+11)& (0+255),b
 10707  002410  C0CE  FFF6         	movff	??_TCP_FiniteStateMachine+10,tblptrl
 10708  002414  C0CF  FFF7         	movff	??_TCP_FiniteStateMachine+11,tblptrh
 10709  002418  0E00               	movlw	low (__smallconst shr (0+16))
 10710  00241A  6EF8               	movwf	tblptru,c
 10711  00241C  0E0F               	movlw	(high __ramtop+-1)
 10712  00241E  0012               	return	
 10713  002420                     __end_ofPL100:
 10714                           	opt stack 0
 10715  002420                     PL104:
 10716                           	opt stack 17
 10717  002420  0E04               	movlw	4
 10718  002422  0100               	movlb	0	; () banked
 10719  002424  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 10720  002426  0C36               	retlw	54
 10721  002428                     __end_ofPL104:
 10722                           	opt stack 0
 10723  002428                     PL108:
 10724                           	opt stack 17
 10725  002428  C0C4  FFEE         	movff	??_TCP_FiniteStateMachine,postinc0
 10726  00242C  C0C5  FFEE         	movff	??_TCP_FiniteStateMachine+1,postinc0
 10727  002430  C0C6  FFEE         	movff	??_TCP_FiniteStateMachine+2,postinc0
 10728  002434  C0C7  FFEF         	movff	??_TCP_FiniteStateMachine+3,indf0
 10729  002438  0012               	return	
 10730  00243A                     __end_ofPL108:
 10731                           	opt stack 0
 10732  00243A                     PL114:
 10733                           	opt stack 17
 10734  00243A  0E04               	movlw	4
 10735  00243C  6FD4               	movwf	TCP_FiniteStateMachine@nextState& (0+255),b
 10736  00243E  0C36               	retlw	54
 10737  002440                     __end_ofPL114:
 10738                           	opt stack 0
 10739  002440                     PL116:
 10740                           	opt stack 17
 10741  002440  C1F0  FFEE         	movff	_tcpHeader+8,postinc0
 10742  002444  C1F1  FFEE         	movff	_tcpHeader+9,postinc0
 10743  002448  C1F2  FFEE         	movff	_tcpHeader+10,postinc0
 10744  00244C  C1F3  FFEF         	movff	_tcpHeader+11,indf0
 10745  002450  0012               	return	
 10746  002452                     __end_ofPL116:
 10747                           	opt stack 0
 10748  002452                     PL122:
 10749                           	opt stack 17
 10750  002452  C0C6  FFEE         	movff	??_TCP_FiniteStateMachine+2,postinc0
 10751  002456  C0C7  FFEF         	movff	??_TCP_FiniteStateMachine+3,indf0
 10752  00245A  0012               	return	
 10753  00245C                     __end_ofPL122:
 10754                           	opt stack 0
 10755  00245C                     PL154:
 10756                           	opt stack 17
 10757  00245C  C1E1  FFF5         	movff	_tcpMss,tablat
 10758  002460  000D               	tblwt		*+
 10759  002462  C1E2  FFF5         	movff	_tcpMss+1,tablat
 10760  002466  000C               	tblwt		*
 10761  002468  0012               	return	
 10762  00246A                     __end_ofPL154:
 10763                           	opt stack 0
 10764  00246A                     PL214:
 10765                           	opt stack 17
 10766  00246A  0E02               	movlw	2
 10767  00246C  6EEE               	movwf	postinc0,c
 10768  00246E  6AEF               	clrf	indf0,c
 10769  002470  0C02               	retlw	2
 10770  002472                     __end_ofPL214:
 10771                           	opt stack 0
 10772  002472                     PL222:
 10773                           	opt stack 17
 10774  002472  0101               	movlb	1	; () banked
 10775  002474  51CC               	movf	_receivedRemoteAddress& (0+255),w,b
 10776  002476  0100               	movlb	0	; () banked
 10777  002478  19C6               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 10778  00247A  0012               	return	
 10779  00247C                     __end_ofPL222:
 10780                           	opt stack 0
 10781  00247C                     PL228:
 10782                           	opt stack 17
 10783  00247C  0101               	movlb	1	; () banked
 10784  00247E  51CD               	movf	(_receivedRemoteAddress+1)& (0+255),w,b
 10785  002480  0100               	movlb	0	; () banked
 10786  002482  19C7               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 10787  002484  0012               	return	
 10788  002486                     __end_ofPL228:
 10789                           	opt stack 0
 10790  002486                     PL236:
 10791                           	opt stack 17
 10792  002486  0101               	movlb	1	; () banked
 10793  002488  51F0               	movf	(_tcpHeader+8)& (0+255),w,b
 10794  00248A  0100               	movlb	0	; () banked
 10795  00248C  19CA               	xorwf	(??_TCP_FiniteStateMachine+6)& (0+255),w,b
 10796  00248E  0012               	return	
 10797  002490                     __end_ofPL236:
 10798                           	opt stack 0
 10799  002490                     PL238:
 10800                           	opt stack 17
 10801  002490  0101               	movlb	1	; () banked
 10802  002492  51CE               	movf	(_receivedRemoteAddress+2)& (0+255),w,b
 10803  002494  0100               	movlb	0	; () banked
 10804  002496  19C8               	xorwf	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 10805  002498  0012               	return	
 10806  00249A                     __end_ofPL238:
 10807                           	opt stack 0
 10808  00249A                     PL242:
 10809                           	opt stack 17
 10810  00249A  0101               	movlb	1	; () banked
 10811  00249C  51CF               	movf	(_receivedRemoteAddress+3)& (0+255),w,b
 10812  00249E  0100               	movlb	0	; () banked
 10813  0024A0  19C9               	xorwf	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 10814  0024A2  0012               	return	
 10815  0024A4                     __end_ofPL242:
 10816                           	opt stack 0
 10817  0024A4                     PL244:
 10818                           	opt stack 17
 10819  0024A4  C1E1  FFEE         	movff	_tcpMss,postinc0
 10820  0024A8  C1E2  FFEF         	movff	_tcpMss+1,indf0
 10821  0024AC  0012               	return	
 10822  0024AE                     __end_ofPL244:
 10823                           	opt stack 0
 10824  0024AE                     PL246:
 10825                           	opt stack 17
 10826  0024AE  0101               	movlb	1	; () banked
 10827  0024B0  51F1               	movf	(_tcpHeader+9)& (0+255),w,b
 10828  0024B2  0100               	movlb	0	; () banked
 10829  0024B4  19CB               	xorwf	(??_TCP_FiniteStateMachine+7)& (0+255),w,b
 10830  0024B6  0012               	return	
 10831  0024B8                     __end_ofPL246:
 10832                           	opt stack 0
 10833  0024B8                     PL248:
 10834                           	opt stack 17
 10835  0024B8  0101               	movlb	1	; () banked
 10836  0024BA  51F2               	movf	(_tcpHeader+10)& (0+255),w,b
 10837  0024BC  0100               	movlb	0	; () banked
 10838  0024BE  19CC               	xorwf	(??_TCP_FiniteStateMachine+8)& (0+255),w,b
 10839  0024C0  0012               	return	
 10840  0024C2                     __end_ofPL248:
 10841                           	opt stack 0
 10842  0024C2                     PL252:
 10843                           	opt stack 17
 10844  0024C2  C1D5  FFF6         	movff	_currentTCB,tblptrl
 10845  0024C6  C1D6  FFF7         	movff	_currentTCB+1,tblptrh
 10846  0024CA  0E00               	movlw	low (__smallconst shr (0+16))
 10847  0024CC  6EF8               	movwf	tblptru,c
 10848  0024CE  0E0F               	movlw	(high __ramtop+-1)
 10849  0024D0  0012               	return	
 10850  0024D2                     __end_ofPL252:
 10851                           	opt stack 0
 10852  0024D2                     PL254:
 10853                           	opt stack 17
 10854  0024D2  0101               	movlb	1	; () banked
 10855  0024D4  51F3               	movf	(_tcpHeader+11)& (0+255),w,b
 10856  0024D6  0100               	movlb	0	; () banked
 10857  0024D8  19CD               	xorwf	(??_TCP_FiniteStateMachine+9)& (0+255),w,b
 10858  0024DA  0012               	return	
 10859  0024DC                     __end_ofPL254:
 10860                           	opt stack 0
 10861  0024DC                     PL260:
 10862                           	opt stack 17
 10863  0024DC  0009               	tblrd		*+
 10864  0024DE  CFF5 F0C4          	movff	tablat,??_TCP_FiniteStateMachine
 10865  0024E2  0009               	tblrd		*+
 10866  0024E4  CFF5 F0C5          	movff	tablat,??_TCP_FiniteStateMachine+1
 10867  0024E8  0012               	return	
 10868  0024EA                     __end_ofPL260:
 10869                           	opt stack 0
 10870  0024EA                     PL278:
 10871                           	opt stack 17
 10872  0024EA  0101               	movlb	1	; () banked
 10873  0024EC  51EE               	movf	(_tcpHeader+6)& (0+255),w,b
 10874  0024EE  0100               	movlb	0	; () banked
 10875  0024F0  19C8               	xorwf	(??_TCP_FiniteStateMachine+4)& (0+255),w,b
 10876  0024F2  0012               	return	
 10877  0024F4                     __end_ofPL278:
 10878                           	opt stack 0
 10879  0024F4                     PL280:
 10880                           	opt stack 17
 10881  0024F4  0101               	movlb	1	; () banked
 10882  0024F6  51E9               	movf	(_tcpHeader+1)& (0+255),w,b
 10883  0024F8  0100               	movlb	0	; () banked
 10884  0024FA  19C7               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 10885  0024FC  0012               	return	
 10886  0024FE                     __end_ofPL280:
 10887                           	opt stack 0
 10888  0024FE                     PL282:
 10889                           	opt stack 17
 10890  0024FE  0101               	movlb	1	; () banked
 10891  002500  51EF               	movf	(_tcpHeader+7)& (0+255),w,b
 10892  002502  0100               	movlb	0	; () banked
 10893  002504  19C9               	xorwf	(??_TCP_FiniteStateMachine+5)& (0+255),w,b
 10894  002506  0012               	return	
 10895  002508                     __end_ofPL282:
 10896                           	opt stack 0
 10897  002508                     PL286:
 10898                           	opt stack 17
 10899  002508  0101               	movlb	1	; () banked
 10900  00250A  51E8               	movf	_tcpHeader& (0+255),w,b
 10901  00250C  0100               	movlb	0	; () banked
 10902  00250E  19C6               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 10903  002510  0012               	return	
 10904  002512                     __end_ofPL286:
 10905                           	opt stack 0
 10906  002512                     PL288:
 10907                           	opt stack 17
 10908  002512  0101               	movlb	1	; () banked
 10909  002514  51EC               	movf	(_tcpHeader+4)& (0+255),w,b
 10910  002516  0100               	movlb	0	; () banked
 10911  002518  19C6               	xorwf	(??_TCP_FiniteStateMachine+2)& (0+255),w,b
 10912  00251A  0012               	return	
 10913  00251C                     __end_ofPL288:
 10914                           	opt stack 0
 10915  00251C                     PL292:
 10916                           	opt stack 17
 10917  00251C  0101               	movlb	1	; () banked
 10918  00251E  51ED               	movf	(_tcpHeader+5)& (0+255),w,b
 10919  002520  0100               	movlb	0	; () banked
 10920  002522  19C7               	xorwf	(??_TCP_FiniteStateMachine+3)& (0+255),w,b
 10921  002524  0012               	return	
 10922  002526                     __end_ofPL292:
 10923                           	opt stack 0
 10924  002526                     PL320:
 10925                           	opt stack 17
 10926  002526  CFEE F0C4          	movff	postinc0,??_TCP_FiniteStateMachine
 10927  00252A  CFEE F0C5          	movff	postinc0,??_TCP_FiniteStateMachine+1
 10928  00252E  0012               	return	
 10929  002530                     __end_ofPL320:
 10930                           	opt stack 0
 10931  002530                     PL336:
 10932                           	opt stack 17
 10933  002530  0101               	movlb	1	; () banked
 10934  002532  51EB               	movf	(_tcpHeader+3)& (0+255),w,b
 10935  002534  0100               	movlb	0	; () banked
 10936  002536  19C5               	xorwf	(??_TCP_FiniteStateMachine+1)& (0+255),w,b
 10937  002538  0012               	return	
 10938  00253A                     __end_ofPL336:
 10939                           	opt stack 0
 10940  00253A                     PL346:
 10941                           	opt stack 17
 10942  00253A  0101               	movlb	1	; () banked
 10943  00253C  51EA               	movf	(_tcpHeader+2)& (0+255),w,b
 10944  00253E  0100               	movlb	0	; () banked
 10945  002540  19C4               	xorwf	??_TCP_FiniteStateMachine& (0+255),w,b
 10946  002542  0012               	return	
 10947  002544                     __end_ofPL346:
 10948                           	opt stack 0
 10949                           tosu	equ	0xFFF
 10950                           tosh	equ	0xFFE
 10951                           tosl	equ	0xFFD
 10952                           pclath	equ	0xFFA
 10953                           tblptru	equ	0xFF8
 10954                           tblptrh	equ	0xFF7
 10955                           tblptrl	equ	0xFF6
 10956                           tablat	equ	0xFF5
 10957                           prodh	equ	0xFF4
 10958                           prodl	equ	0xFF3
 10959                           intcon	equ	0xFF2
 10960                           indf0	equ	0xFEF
 10961                           postinc0	equ	0xFEE
 10962                           fsr0h	equ	0xFEA
 10963                           fsr0l	equ	0xFE9
 10964                           wreg	equ	0xFE8
 10965                           postinc1	equ	0xFE6
 10966                           plusw1	equ	0xFE3
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           bsr	equ	0xFE0
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           plusw2	equ	0xFDB
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function _TCP_PayloadSave *****************
 10979 ;; Defined at:
 10980 ;;		line 310 in file "../../TCPIP Library/source/tcpv4.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  len             2   86[BANK0 ] unsigned int 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  buffer_size     2   87[COMRAM] unsigned int 
 10985 ;;  ret             1    0        unsigned char 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      unsigned char 
 10988 ;; Registers used:
 10989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/1
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10995 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Totals:         3      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;Total ram usage:       17 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:   10
 11002 ;; This function calls:
 11003 ;;		_ETH_ReadBlock
 11004 ;;		_TCP_Snd
 11005 ;; This function is called by:
 11006 ;;		_TCP_FiniteStateMachine
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text35
 11011  003C1A                     __ptext35:
 11012                           	opt stack 0
 11013  003C1A                     _TCP_PayloadSave:
 11014                           	opt stack 17
 11015                           
 11016                           ;tcpv4.c: 313: uint16_t buffer_size;
 11017                           ;tcpv4.c: 316: if (currentTCB->rxBufState == RX_BUFF_IN_USE)
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;incstack = 0
 11021  003C1A  0E22               	movlw	34
 11022  003C1C  D8D0               	call	PL42	;call to abstracted procedure
 11023  003C1E  64F7               	cpfsgt	tblptrh,c
 11024  003C20  D003               	bra	u11667
 11025  003C22  0008               	tblrd		*
 11026  003C24  50F5               	movf	tablat,w,c
 11027  003C26  D003               	bra	u11660
 11028  003C28                     u11667:
 11029  003C28  EC3C  F011         	call	PL24	;call to abstracted procedure
 11030  003C2C  50EF               	movf	indf0,w,c
 11031  003C2E                     u11660:
 11032  003C2E  06E8               	decf	wreg,f,c
 11033  003C30  A4D8               	btfss	status,2,c
 11034  003C32  0012               	return	
 11035                           
 11036                           ;tcpv4.c: 317: {
 11037                           ;tcpv4.c: 319: if (currentTCB->localWnd >= len)
 11038  003C34  0E1A               	movlw	26
 11039  003C36  D8C3               	call	PL42	;call to abstracted procedure
 11040  003C38  64F7               	cpfsgt	tblptrh,c
 11041  003C3A  D002               	bra	u11687
 11042  003C3C  D8DB               	call	PL152	;call to abstracted procedure
 11043  003C3E  D003               	bra	u11680
 11044  003C40                     u11687:
 11045  003C40  EC3C  F011         	call	PL24	;call to abstracted procedure
 11046  003C44  D8E7               	call	PL240	;call to abstracted procedure
 11047  003C46                     u11680:
 11048  003C46  0100               	movlb	0	; () banked
 11049  003C48  51B6               	movf	TCP_PayloadSave@len& (0+255),w,b
 11050  003C4A  5DBA               	subwf	(??_TCP_PayloadSave+2)& (0+255),w,b
 11051  003C4C  51B7               	movf	(TCP_PayloadSave@len+1)& (0+255),w,b
 11052  003C4E  59BB               	subwfb	(??_TCP_PayloadSave+3)& (0+255),w,b
 11053  003C50  E305               	bnc	l8432
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;tcpv4.c: 320: {
 11057                           ;tcpv4.c: 321: buffer_size = len;
 11058  003C52  C0B6  F058         	movff	TCP_PayloadSave@len,TCP_PayloadSave@buffer_size
 11059  003C56  C0B7  F059         	movff	TCP_PayloadSave@len+1,TCP_PayloadSave@buffer_size+1
 11060                           
 11061                           ;tcpv4.c: 322: }else
 11062  003C5A  D011               	goto	l8434
 11063  003C5C                     l8432:
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;tcpv4.c: 323: {
 11067                           ;tcpv4.c: 324: buffer_size = currentTCB->localWnd;
 11068  003C5C  0E1A               	movlw	26
 11069  003C5E  D8AF               	call	PL42	;call to abstracted procedure
 11070  003C60  64F7               	cpfsgt	tblptrh,c
 11071  003C62  D007               	bra	u11707
 11072  003C64  0009               	tblrd		*+
 11073  003C66  CFF5 F058          	movff	tablat,TCP_PayloadSave@buffer_size
 11074  003C6A  0009               	tblrd		*+
 11075  003C6C  CFF5 F059          	movff	tablat,TCP_PayloadSave@buffer_size+1
 11076  003C70  D006               	bra	u11700
 11077  003C72                     u11707:
 11078  003C72  EC3C  F011         	call	PL24	;call to abstracted procedure
 11079  003C76  CFEE F058          	movff	postinc0,TCP_PayloadSave@buffer_size
 11080  003C7A  CFEE F059          	movff	postinc0,TCP_PayloadSave@buffer_size+1
 11081  003C7E                     u11700:
 11082  003C7E                     l8434:
 11083                           
 11084                           ;tcpv4.c: 325: }
 11085                           ;tcpv4.c: 327: ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
 11086  003C7E  0E20               	movlw	32
 11087  003C80  D89E               	call	PL42	;call to abstracted procedure
 11088  003C82  64F7               	cpfsgt	tblptrh,c
 11089  003C84  D007               	bra	u11717
 11090  003C86  0009               	tblrd		*+
 11091  003C88  CFF5 F003          	movff	tablat,ETH_ReadBlock@buffer
 11092  003C8C  0009               	tblrd		*+
 11093  003C8E  CFF5 F004          	movff	tablat,ETH_ReadBlock@buffer+1
 11094  003C92  D006               	bra	u11710
 11095  003C94                     u11717:
 11096  003C94  EC3C  F011         	call	PL24	;call to abstracted procedure
 11097  003C98  CFEE F003          	movff	postinc0,ETH_ReadBlock@buffer
 11098  003C9C  CFEE F004          	movff	postinc0,ETH_ReadBlock@buffer+1
 11099  003CA0                     u11710:
 11100  003CA0  C058  F005         	movff	TCP_PayloadSave@buffer_size,ETH_ReadBlock@length
 11101  003CA4  C059  F006         	movff	TCP_PayloadSave@buffer_size+1,ETH_ReadBlock@length+1
 11102  003CA8  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
 11103                           
 11104                           ;tcpv4.c: 328: currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
 11105  003CAC  0E20               	movlw	32
 11106  003CAE  D887               	call	PL42	;call to abstracted procedure
 11107  003CB0  64F7               	cpfsgt	tblptrh,c
 11108  003CB2  D002               	bra	u11727
 11109  003CB4  D89F               	call	PL152	;call to abstracted procedure
 11110  003CB6  D003               	bra	u11720
 11111  003CB8                     u11727:
 11112  003CB8  EC3C  F011         	call	PL24	;call to abstracted procedure
 11113  003CBC  D8AB               	call	PL240	;call to abstracted procedure
 11114  003CBE                     u11720:
 11115  003CBE  5058               	movf	TCP_PayloadSave@buffer_size,w,c
 11116  003CC0  0100               	movlb	0	; () banked
 11117  003CC2  27BA               	addwf	(??_TCP_PayloadSave+2)& (0+255),f,b
 11118  003CC4  5059               	movf	TCP_PayloadSave@buffer_size+1,w,c
 11119  003CC6  23BB               	addwfc	(??_TCP_PayloadSave+3)& (0+255),f,b
 11120  003CC8  0E20               	movlw	32
 11121  003CCA  D88F               	call	PL124	;call to abstracted procedure
 11122  003CCC  D889               	call	PL48	;call to abstracted procedure
 11123  003CCE  D899               	call	PL206	;call to abstracted procedure
 11124  003CD0  64F7               	cpfsgt	tblptrh,c
 11125  003CD2  D002               	bra	u11737
 11126  003CD4  D8A4               	call	PL266	;call to abstracted procedure
 11127  003CD6  D003               	bra	u11730
 11128  003CD8                     u11737:
 11129  003CD8  EC3C  F011         	call	PL24	;call to abstracted procedure
 11130  003CDC  D8A7               	call	PL316	;call to abstracted procedure
 11131  003CDE                     u11730:
 11132                           
 11133                           ;tcpv4.c: 331: currentTCB->localWnd = currentTCB->localWnd - buffer_size;
 11134  003CDE  0E1A               	movlw	26
 11135  003CE0  D86E               	call	PL42	;call to abstracted procedure
 11136  003CE2  64F7               	cpfsgt	tblptrh,c
 11137  003CE4  D002               	bra	u11747
 11138  003CE6  D886               	call	PL152	;call to abstracted procedure
 11139  003CE8  D003               	bra	u11740
 11140  003CEA                     u11747:
 11141  003CEA  EC3C  F011         	call	PL24	;call to abstracted procedure
 11142  003CEE  D892               	call	PL240	;call to abstracted procedure
 11143  003CF0                     u11740:
 11144  003CF0  5058               	movf	TCP_PayloadSave@buffer_size,w,c
 11145  003CF2  0100               	movlb	0	; () banked
 11146  003CF4  5FBA               	subwf	(??_TCP_PayloadSave+2)& (0+255),f,b
 11147  003CF6  5059               	movf	TCP_PayloadSave@buffer_size+1,w,c
 11148  003CF8  5BBB               	subwfb	(??_TCP_PayloadSave+3)& (0+255),f,b
 11149  003CFA  0E1A               	movlw	26
 11150  003CFC  D876               	call	PL124	;call to abstracted procedure
 11151  003CFE  D870               	call	PL48	;call to abstracted procedure
 11152  003D00  D880               	call	PL206	;call to abstracted procedure
 11153  003D02  64F7               	cpfsgt	tblptrh,c
 11154  003D04  D002               	bra	u11757
 11155  003D06  D88B               	call	PL266	;call to abstracted procedure
 11156  003D08  D003               	bra	u11750
 11157  003D0A                     u11757:
 11158  003D0A  EC3C  F011         	call	PL24	;call to abstracted procedure
 11159  003D0E  D88E               	call	PL316	;call to abstracted procedure
 11160  003D10                     u11750:
 11161                           
 11162                           ;tcpv4.c: 332: currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
 11163  003D10  0E08               	movlw	8
 11164  003D12  D855               	call	PL42	;call to abstracted procedure
 11165  003D14  64F7               	cpfsgt	tblptrh,c
 11166  003D16  D008               	bra	u11767
 11167  003D18  D86D               	call	PL152	;call to abstracted procedure
 11168  003D1A  0009               	tblrd		*+
 11169  003D1C  CFF5 F0BC          	movff	tablat,??_TCP_PayloadSave+4
 11170  003D20  0009               	tblrd		*+
 11171  003D22  CFF5 F0BD          	movff	tablat,??_TCP_PayloadSave+5
 11172  003D26  D007               	bra	u11760
 11173  003D28                     u11767:
 11174  003D28  EC3C  F011         	call	PL24	;call to abstracted procedure
 11175  003D2C  D873               	call	PL240	;call to abstracted procedure
 11176  003D2E  CFEE F0BC          	movff	postinc0,??_TCP_PayloadSave+4
 11177  003D32  CFEE F0BD          	movff	postinc0,??_TCP_PayloadSave+5
 11178  003D36                     u11760:
 11179  003D36  5058               	movf	TCP_PayloadSave@buffer_size,w,c
 11180  003D38  0100               	movlb	0	; () banked
 11181  003D3A  25BA               	addwf	(??_TCP_PayloadSave+2)& (0+255),w,b
 11182  003D3C  6FBE               	movwf	(??_TCP_PayloadSave+6)& (0+255),b
 11183  003D3E  5059               	movf	TCP_PayloadSave@buffer_size+1,w,c
 11184  003D40  21BB               	addwfc	(??_TCP_PayloadSave+3)& (0+255),w,b
 11185  003D42  6FBF               	movwf	(??_TCP_PayloadSave+7)& (0+255),b
 11186  003D44  0E00               	movlw	0
 11187  003D46  21BC               	addwfc	(??_TCP_PayloadSave+4)& (0+255),w,b
 11188  003D48  6FC0               	movwf	(??_TCP_PayloadSave+8)& (0+255),b
 11189  003D4A  0E00               	movlw	0
 11190  003D4C  21BD               	addwfc	(??_TCP_PayloadSave+5)& (0+255),w,b
 11191  003D4E  6FC1               	movwf	(??_TCP_PayloadSave+9)& (0+255),b
 11192  003D50  0E0C               	movlw	12
 11193  003D52  0101               	movlb	1	; () banked
 11194  003D54  25D5               	addwf	_currentTCB& (0+255),w,b
 11195  003D56  0100               	movlb	0	; () banked
 11196  003D58  6FC2               	movwf	(??_TCP_PayloadSave+10)& (0+255),b
 11197  003D5A  D842               	call	PL48	;call to abstracted procedure
 11198  003D5C  6FC3               	movwf	(??_TCP_PayloadSave+11)& (0+255),b
 11199  003D5E  C0C2  FFF6         	movff	??_TCP_PayloadSave+10,tblptrl
 11200  003D62  C0C3  FFF7         	movff	??_TCP_PayloadSave+11,tblptrh
 11201  003D66  0E00               	movlw	low (__smallconst shr (0+16))
 11202  003D68  6EF8               	movwf	tblptru,c
 11203  003D6A  0E0F               	movlw	(high __ramtop+-1)
 11204  003D6C  64F7               	cpfsgt	tblptrh,c
 11205  003D6E  D00D               	bra	u11777
 11206  003D70  C0BE  FFF5         	movff	??_TCP_PayloadSave+6,tablat
 11207  003D74  000D               	tblwt		*+
 11208  003D76  C0BF  FFF5         	movff	??_TCP_PayloadSave+7,tablat
 11209  003D7A  000D               	tblwt		*+
 11210  003D7C  C0C0  FFF5         	movff	??_TCP_PayloadSave+8,tablat
 11211  003D80  000D               	tblwt		*+
 11212  003D82  C0C1  FFF5         	movff	??_TCP_PayloadSave+9,tablat
 11213  003D86  000C               	tblwt		*
 11214  003D88  D00A               	bra	u11770
 11215  003D8A                     u11777:
 11216  003D8A  EC3C  F011         	call	PL24	;call to abstracted procedure
 11217  003D8E  C0BE  FFEE         	movff	??_TCP_PayloadSave+6,postinc0
 11218  003D92  C0BF  FFEE         	movff	??_TCP_PayloadSave+7,postinc0
 11219  003D96  C0C0  FFEE         	movff	??_TCP_PayloadSave+8,postinc0
 11220  003D9A  C0C1  FFEF         	movff	??_TCP_PayloadSave+9,indf0
 11221  003D9E                     u11770:
 11222                           
 11223                           ;tcpv4.c: 335: currentTCB->flags = 0x10U;
 11224  003D9E  0E35               	movlw	53
 11225  003DA0  D80E               	call	PL42	;call to abstracted procedure
 11226  003DA2  64F7               	cpfsgt	tblptrh,c
 11227  003DA4  D004               	bra	u11787
 11228  003DA6  0E10               	movlw	16
 11229  003DA8  6EF5               	movwf	tablat,c
 11230  003DAA  000C               	tblwt		*
 11231  003DAC  D004               	bra	u11780
 11232  003DAE                     u11787:
 11233  003DAE  EC3C  F011         	call	PL24	;call to abstracted procedure
 11234  003DB2  0E10               	movlw	16
 11235  003DB4  6EEF               	movwf	indf0,c
 11236  003DB6                     u11780:
 11237                           
 11238                           ;tcpv4.c: 336: TCP_Snd(currentTCB);
 11239  003DB6  ECEB  F011         	call	PL90	;call to abstracted procedure
 11240  003DBA  EFA2  F012         	goto	_TCP_Snd	;wreg free
 11241  003DBE                     __end_of_TCP_PayloadSave:
 11242                           	opt stack 0
 11243  003DBE                     PL42:
 11244                           	opt stack 17
 11245  003DBE  0101               	movlb	1	; () banked
 11246  003DC0  25D5               	addwf	_currentTCB& (0+255),w,b
 11247  003DC2  0100               	movlb	0	; () banked
 11248  003DC4  6FB8               	movwf	??_TCP_PayloadSave& (0+255),b
 11249  003DC6  0E00               	movlw	0
 11250  003DC8  0101               	movlb	1	; () banked
 11251  003DCA  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 11252  003DCC  0100               	movlb	0	; () banked
 11253  003DCE  6FB9               	movwf	(??_TCP_PayloadSave+1)& (0+255),b
 11254  003DD0  C0B8  FFF6         	movff	??_TCP_PayloadSave,tblptrl
 11255  003DD4  C0B9  FFF7         	movff	??_TCP_PayloadSave+1,tblptrh
 11256  003DD8  0E00               	movlw	low (__smallconst shr (0+16))
 11257  003DDA  6EF8               	movwf	tblptru,c
 11258  003DDC  0E0F               	movlw	(high __ramtop+-1)
 11259  003DDE  0012               	return	
 11260  003DE0                     __end_ofPL42:
 11261                           	opt stack 0
 11262  003DE0                     PL48:
 11263                           	opt stack 17
 11264  003DE0  0E00               	movlw	0
 11265  003DE2  0101               	movlb	1	; () banked
 11266  003DE4  21D6               	addwfc	(_currentTCB+1)& (0+255),w,b
 11267  003DE6  0100               	movlb	0	; () banked
 11268  003DE8  0012               	return	
 11269  003DEA                     __end_ofPL48:
 11270                           	opt stack 0
 11271  003DEA                     PL124:
 11272                           	opt stack 17
 11273  003DEA  0101               	movlb	1	; () banked
 11274  003DEC  25D5               	addwf	_currentTCB& (0+255),w,b
 11275  003DEE  0100               	movlb	0	; () banked
 11276  003DF0  6FBC               	movwf	(??_TCP_PayloadSave+4)& (0+255),b
 11277  003DF2  0012               	return	
 11278  003DF4                     __end_ofPL124:
 11279                           	opt stack 0
 11280  003DF4                     PL152:
 11281                           	opt stack 17
 11282  003DF4  0009               	tblrd		*+
 11283  003DF6  CFF5 F0BA          	movff	tablat,??_TCP_PayloadSave+2
 11284  003DFA  0009               	tblrd		*+
 11285  003DFC  CFF5 F0BB          	movff	tablat,??_TCP_PayloadSave+3
 11286  003E00  0012               	return	
 11287  003E02                     __end_ofPL152:
 11288                           	opt stack 0
 11289  003E02                     PL206:
 11290                           	opt stack 17
 11291  003E02  6FBD               	movwf	(??_TCP_PayloadSave+5)& (0+255),b
 11292  003E04  C0BC  FFF6         	movff	??_TCP_PayloadSave+4,tblptrl
 11293  003E08  C0BD  FFF7         	movff	??_TCP_PayloadSave+5,tblptrh
 11294  003E0C  0E00               	movlw	low (__smallconst shr (0+16))
 11295  003E0E  6EF8               	movwf	tblptru,c
 11296  003E10  0E0F               	movlw	(high __ramtop+-1)
 11297  003E12  0012               	return	
 11298  003E14                     __end_ofPL206:
 11299                           	opt stack 0
 11300  003E14                     PL240:
 11301                           	opt stack 17
 11302  003E14  CFEE F0BA          	movff	postinc0,??_TCP_PayloadSave+2
 11303  003E18  CFEE F0BB          	movff	postinc0,??_TCP_PayloadSave+3
 11304  003E1C  0012               	return	
 11305  003E1E                     __end_ofPL240:
 11306                           	opt stack 0
 11307  003E1E                     PL266:
 11308                           	opt stack 17
 11309  003E1E  C0BA  FFF5         	movff	??_TCP_PayloadSave+2,tablat
 11310  003E22  000D               	tblwt		*+
 11311  003E24  C0BB  FFF5         	movff	??_TCP_PayloadSave+3,tablat
 11312  003E28  000C               	tblwt		*
 11313  003E2A  0012               	return	
 11314  003E2C                     __end_ofPL266:
 11315                           	opt stack 0
 11316  003E2C                     PL316:
 11317                           	opt stack 17
 11318  003E2C  C0BA  FFEE         	movff	??_TCP_PayloadSave+2,postinc0
 11319  003E30  C0BB  FFEF         	movff	??_TCP_PayloadSave+3,indf0
 11320  003E34  0012               	return	
 11321  003E36                     __end_ofPL316:
 11322                           	opt stack 0
 11323                           tosu	equ	0xFFF
 11324                           tosh	equ	0xFFE
 11325                           tosl	equ	0xFFD
 11326                           pclath	equ	0xFFA
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           indf0	equ	0xFEF
 11335                           postinc0	equ	0xFEE
 11336                           fsr0h	equ	0xFEA
 11337                           fsr0l	equ	0xFE9
 11338                           wreg	equ	0xFE8
 11339                           postinc1	equ	0xFE6
 11340                           plusw1	equ	0xFE3
 11341                           fsr1h	equ	0xFE2
 11342                           fsr1l	equ	0xFE1
 11343                           bsr	equ	0xFE0
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           plusw2	equ	0xFDB
 11348                           fsr2h	equ	0xFDA
 11349                           fsr2l	equ	0xFD9
 11350                           status	equ	0xFD8
 11351                           
 11352 ;; *************** function _TCP_Snd *****************
 11353 ;; Defined at:
 11354 ;;		line 200 in file "../../TCPIP Library/source/tcpv4.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;  tcbPtr          2    7[BANK0 ] PTR struct .
 11357 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 11358 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  txHeader       20   66[BANK0 ] struct .
 11361 ;;  tcpDataLengt    2   64[BANK0 ] unsigned int 
 11362 ;;  payloadLengt    2   61[BANK0 ] unsigned int 
 11363 ;;  cksm            2   59[BANK0 ] unsigned int 
 11364 ;;  data            2   57[BANK0 ] PTR unsigned char 
 11365 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 11366 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 11367 ;;  ret             1   63[BANK0 ] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      unsigned char 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : F/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Temps:          0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Totals:         0      79       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;Total ram usage:       79 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    9
 11384 ;; This function calls:
 11385 ;;		_ETH_Insert
 11386 ;;		_ETH_TxComputeChecksum
 11387 ;;		_ETH_WriteBlock
 11388 ;;		_IPV4_Send
 11389 ;;		_IPv4_Start
 11390 ;; This function is called by:
 11391 ;;		_TCP_PayloadSave
 11392 ;;		_TCP_FiniteStateMachine
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text36
 11397  002544                     __ptext36:
 11398                           	opt stack 0
 11399  002544                     _TCP_Snd:
 11400                           	opt stack 0
 11401                           
 11402                           ;tcpv4.c: 203: tcpHeader_t txHeader;
 11403                           ;tcpv4.c: 204: uint16_t payloadLength;
 11404                           ;tcpv4.c: 205: uint16_t cksm;
 11405                           ;tcpv4.c: 206: uint16_t tcpDataLength;
 11406                           ;tcpv4.c: 207: uint8_t *data;
 11407                           ;tcpv4.c: 209: txHeader.sourcePort = ((((uint16_t)tcbPtr->localPort & (uint16_t)0xFF00) 
      +                          >> 8) | (((uint16_t)tcbPtr->localPort & (uint16_t)0x00FF) << 8));
 11408                           
 11409                           ;incstack = 0
 11410  002544  DB5D               	call	PL256	;call to abstracted procedure
 11411  002546  64F7               	cpfsgt	tblptrh,c
 11412  002548  D007               	bra	u10987
 11413  00254A  0009               	tblrd		*+
 11414  00254C  CFF5 F069          	movff	tablat,??_TCP_Snd
 11415  002550  0009               	tblrd		*+
 11416  002552  CFF5 F06A          	movff	tablat,??_TCP_Snd+1
 11417  002556  D006               	bra	u10980
 11418  002558                     u10987:
 11419  002558  EC3C  F011         	call	PL24	;call to abstracted procedure
 11420  00255C  CFEE F069          	movff	postinc0,??_TCP_Snd
 11421  002560  CFEE F06A          	movff	postinc0,??_TCP_Snd+1
 11422  002564                     u10980:
 11423  002564  0100               	movlb	0	; () banked
 11424  002566  5169               	movf	??_TCP_Snd& (0+255),w,b
 11425  002568  6F6C               	movwf	(??_TCP_Snd+3)& (0+255),b
 11426  00256A  6B6B               	clrf	(??_TCP_Snd+2)& (0+255),b
 11427  00256C  DB49               	call	PL256	;call to abstracted procedure
 11428  00256E  64F7               	cpfsgt	tblptrh,c
 11429  002570  D002               	bra	u10997
 11430  002572  DA8D               	call	PL138	;call to abstracted procedure
 11431  002574  D003               	bra	u10990
 11432  002576                     u10997:
 11433  002576  EC3C  F011         	call	PL24	;call to abstracted procedure
 11434  00257A  DB35               	call	PL230	;call to abstracted procedure
 11435  00257C                     u10990:
 11436  00257C  C06E  F06D         	movff	??_TCP_Snd+5,??_TCP_Snd+4
 11437  002580  0100               	movlb	0	; () banked
 11438  002582  6B6E               	clrf	(??_TCP_Snd+5)& (0+255),b
 11439  002584  6B6E               	clrf	(??_TCP_Snd+5)& (0+255),b
 11440  002586  516B               	movf	(??_TCP_Snd+2)& (0+255),w,b
 11441  002588  116D               	iorwf	(??_TCP_Snd+4)& (0+255),w,b
 11442  00258A  6FA2               	movwf	TCP_Snd@txHeader& (0+255),b
 11443  00258C  516C               	movf	(??_TCP_Snd+3)& (0+255),w,b
 11444  00258E  116E               	iorwf	(??_TCP_Snd+5)& (0+255),w,b
 11445  002590  6FA3               	movwf	(TCP_Snd@txHeader+1)& (0+255),b
 11446                           
 11447                           ;tcpv4.c: 210: txHeader.destPort = ((((uint16_t)tcbPtr->destPort & (uint16_t)0xFF00) >> 
      +                          8) | (((uint16_t)tcbPtr->destPort & (uint16_t)0x00FF) << 8));
 11448  002592  0E06               	movlw	6
 11449  002594  DA2C               	call	PL28	;call to abstracted procedure
 11450  002596  64F7               	cpfsgt	tblptrh,c
 11451  002598  D002               	bra	u11007
 11452  00259A  DA60               	call	PL72	;call to abstracted procedure
 11453  00259C  D003               	bra	u11000
 11454  00259E                     u11007:
 11455  00259E  EC3C  F011         	call	PL24	;call to abstracted procedure
 11456  0025A2  DA70               	call	PL120	;call to abstracted procedure
 11457  0025A4                     u11000:
 11458  0025A4  DB4E               	call	PL326	;call to abstracted procedure
 11459  0025A6  0E06               	movlw	6
 11460  0025A8  DAA2               	call	PL162	;call to abstracted procedure
 11461  0025AA  64F7               	cpfsgt	tblptrh,c
 11462  0025AC  D002               	bra	u11017
 11463  0025AE  DB37               	call	PL268	;call to abstracted procedure
 11464  0025B0  D003               	bra	u11010
 11465  0025B2                     u11017:
 11466  0025B2  EC3C  F011         	call	PL24	;call to abstracted procedure
 11467  0025B6  DB4A               	call	PL332	;call to abstracted procedure
 11468  0025B8                     u11010:
 11469  0025B8  DB1B               	call	PL232	;call to abstracted procedure
 11470  0025BA  6FA4               	movwf	(TCP_Snd@txHeader+2)& (0+255),b
 11471  0025BC  516E               	movf	(??_TCP_Snd+5)& (0+255),w,b
 11472  0025BE  1172               	iorwf	(??_TCP_Snd+9)& (0+255),w,b
 11473  0025C0  6FA5               	movwf	(TCP_Snd@txHeader+3)& (0+255),b
 11474                           
 11475                           ;tcpv4.c: 212: txHeader.sequenceNumber = ((((uint32_t)tcbPtr->localSeqno&(uint32_t)0xff0
      +                          00000) >> 24) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x00ff0000) >> 8) | (((uint32_t
      +                          )tcbPtr->localSeqno&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->localSeqno&(uint32
      +                          _
 11476  0025C2  0E10               	movlw	16
 11477  0025C4  DA14               	call	PL28	;call to abstracted procedure
 11478  0025C6  64F7               	cpfsgt	tblptrh,c
 11479  0025C8  D003               	bra	u11027
 11480  0025CA  DA48               	call	PL72	;call to abstracted procedure
 11481  0025CC  DA60               	call	PL138	;call to abstracted procedure
 11482  0025CE  D004               	bra	u11020
 11483  0025D0                     u11027:
 11484  0025D0  EC3C  F011         	call	PL24	;call to abstracted procedure
 11485  0025D4  DA57               	call	PL120	;call to abstracted procedure
 11486  0025D6  DB07               	call	PL230	;call to abstracted procedure
 11487  0025D8                     u11020:
 11488  0025D8  DAD8               	call	PL184	;call to abstracted procedure
 11489  0025DA  0E10               	movlw	16
 11490  0025DC  DA46               	call	PL102	;call to abstracted procedure
 11491  0025DE  64F7               	cpfsgt	tblptrh,c
 11492  0025E0  D002               	bra	u11037
 11493  0025E2  DA9F               	call	PL168	;call to abstracted procedure
 11494  0025E4  D003               	bra	u11030
 11495  0025E6                     u11037:
 11496  0025E6  EC3C  F011         	call	PL24	;call to abstracted procedure
 11497  0025EA  DAE2               	call	PL208	;call to abstracted procedure
 11498  0025EC                     u11030:
 11499  0025EC  DA57               	call	PL142	;call to abstracted procedure
 11500  0025EE  0E10               	movlw	16
 11501  0025F0  DA8B               	call	PL164	;call to abstracted procedure
 11502  0025F2  64F7               	cpfsgt	tblptrh,c
 11503  0025F4  D002               	bra	u11047
 11504  0025F6  DAA2               	call	PL170	;call to abstracted procedure
 11505  0025F8  D003               	bra	u11040
 11506  0025FA                     u11047:
 11507  0025FA  EC3C  F011         	call	PL24	;call to abstracted procedure
 11508  0025FE  DAE1               	call	PL210	;call to abstracted procedure
 11509  002600                     u11040:
 11510  002600  DA5B               	call	PL146	;call to abstracted procedure
 11511  002602  0E10               	movlw	16
 11512  002604  DAB5               	call	PL174	;call to abstracted procedure
 11513  002606  64F7               	cpfsgt	tblptrh,c
 11514  002608  D002               	bra	u11057
 11515  00260A  DAA5               	call	PL172	;call to abstracted procedure
 11516  00260C  D003               	bra	u11050
 11517  00260E                     u11057:
 11518  00260E  EC3C  F011         	call	PL24	;call to abstracted procedure
 11519  002612  DAE0               	call	PL212	;call to abstracted procedure
 11520  002614                     u11050:
 11521  002614  D9F9               	call	PL64	;call to abstracted procedure
 11522  002616  6FA6               	movwf	(TCP_Snd@txHeader+4)& (0+255),b
 11523  002618  5170               	movf	(??_TCP_Snd+7)& (0+255),w,b
 11524  00261A  1196               	iorwf	(??_TCP_Snd+45)& (0+255),w,b
 11525  00261C  6FA7               	movwf	(TCP_Snd@txHeader+5)& (0+255),b
 11526  00261E  5171               	movf	(??_TCP_Snd+8)& (0+255),w,b
 11527  002620  1197               	iorwf	(??_TCP_Snd+46)& (0+255),w,b
 11528  002622  6FA8               	movwf	(TCP_Snd@txHeader+6)& (0+255),b
 11529  002624  5172               	movf	(??_TCP_Snd+9)& (0+255),w,b
 11530  002626  1198               	iorwf	(??_TCP_Snd+47)& (0+255),w,b
 11531  002628  6FA9               	movwf	(TCP_Snd@txHeader+7)& (0+255),b
 11532                           
 11533                           ;tcpv4.c: 214: txHeader.ackNumber = ((((uint32_t)tcbPtr->remoteAck&(uint32_t)0xff000000)
      +                           >> 24) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr
      +                          ->remoteAck&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x0000
      +                          0
 11534  00262A  0E0C               	movlw	12
 11535  00262C  D9E0               	call	PL28	;call to abstracted procedure
 11536  00262E  64F7               	cpfsgt	tblptrh,c
 11537  002630  D003               	bra	u11077
 11538  002632  DA14               	call	PL72	;call to abstracted procedure
 11539  002634  DA2C               	call	PL138	;call to abstracted procedure
 11540  002636  D004               	bra	u11070
 11541  002638                     u11077:
 11542  002638  EC3C  F011         	call	PL24	;call to abstracted procedure
 11543  00263C  DA23               	call	PL120	;call to abstracted procedure
 11544  00263E  DAD3               	call	PL230	;call to abstracted procedure
 11545  002640                     u11070:
 11546  002640  DAA4               	call	PL184	;call to abstracted procedure
 11547  002642  0E0C               	movlw	12
 11548  002644  DA12               	call	PL102	;call to abstracted procedure
 11549  002646  64F7               	cpfsgt	tblptrh,c
 11550  002648  D002               	bra	u11087
 11551  00264A  DA6B               	call	PL168	;call to abstracted procedure
 11552  00264C  D003               	bra	u11080
 11553  00264E                     u11087:
 11554  00264E  EC3C  F011         	call	PL24	;call to abstracted procedure
 11555  002652  DAAE               	call	PL208	;call to abstracted procedure
 11556  002654                     u11080:
 11557  002654  DA23               	call	PL142	;call to abstracted procedure
 11558  002656  0E0C               	movlw	12
 11559  002658  DA57               	call	PL164	;call to abstracted procedure
 11560  00265A  64F7               	cpfsgt	tblptrh,c
 11561  00265C  D002               	bra	u11097
 11562  00265E  DA6E               	call	PL170	;call to abstracted procedure
 11563  002660  D003               	bra	u11090
 11564  002662                     u11097:
 11565  002662  EC3C  F011         	call	PL24	;call to abstracted procedure
 11566  002666  DAAD               	call	PL210	;call to abstracted procedure
 11567  002668                     u11090:
 11568  002668  DA27               	call	PL146	;call to abstracted procedure
 11569  00266A  0E0C               	movlw	12
 11570  00266C  DA81               	call	PL174	;call to abstracted procedure
 11571  00266E  64F7               	cpfsgt	tblptrh,c
 11572  002670  D002               	bra	u11107
 11573  002672  DA71               	call	PL172	;call to abstracted procedure
 11574  002674  D003               	bra	u11100
 11575  002676                     u11107:
 11576  002676  EC3C  F011         	call	PL24	;call to abstracted procedure
 11577  00267A  DAAC               	call	PL212	;call to abstracted procedure
 11578  00267C                     u11100:
 11579  00267C  D9C5               	call	PL64	;call to abstracted procedure
 11580  00267E  6FAA               	movwf	(TCP_Snd@txHeader+8)& (0+255),b
 11581  002680  5170               	movf	(??_TCP_Snd+7)& (0+255),w,b
 11582  002682  1196               	iorwf	(??_TCP_Snd+45)& (0+255),w,b
 11583  002684  6FAB               	movwf	(TCP_Snd@txHeader+9)& (0+255),b
 11584  002686  5171               	movf	(??_TCP_Snd+8)& (0+255),w,b
 11585  002688  1197               	iorwf	(??_TCP_Snd+46)& (0+255),w,b
 11586  00268A  6FAC               	movwf	(TCP_Snd@txHeader+10)& (0+255),b
 11587  00268C  5172               	movf	(??_TCP_Snd+9)& (0+255),w,b
 11588  00268E  1198               	iorwf	(??_TCP_Snd+47)& (0+255),w,b
 11589  002690  6FAD               	movwf	(TCP_Snd@txHeader+11)& (0+255),b
 11590                           
 11591                           ; BSR set to: 0
 11592                           ;tcpv4.c: 216: txHeader.ns = 0;
 11593  002692  91AE               	bcf	(TCP_Snd@txHeader+12)& (0+255),0,b
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;tcpv4.c: 217: txHeader.reserved = 0;
 11597  002694  0EF1               	movlw	-15
 11598  002696  17AE               	andwf	(TCP_Snd@txHeader+12)& (0+255),f,b
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;tcpv4.c: 218: txHeader.dataOffset = 5;
 11602  002698  51AE               	movf	(TCP_Snd@txHeader+12)& (0+255),w,b
 11603  00269A  0B0F               	andlw	-241
 11604  00269C  0950               	iorlw	80
 11605  00269E  6FAE               	movwf	(TCP_Snd@txHeader+12)& (0+255),b
 11606                           
 11607                           ;tcpv4.c: 219: txHeader.windowSize = ((((uint16_t)tcbPtr->localWnd & (uint16_t)0xFF00) >
      +                          > 8) | (((uint16_t)tcbPtr->localWnd & (uint16_t)0x00FF) << 8));
 11608  0026A0  0E1A               	movlw	26
 11609  0026A2  D9A5               	call	PL28	;call to abstracted procedure
 11610  0026A4  64F7               	cpfsgt	tblptrh,c
 11611  0026A6  D002               	bra	u11127
 11612  0026A8  D9D9               	call	PL72	;call to abstracted procedure
 11613  0026AA  D003               	bra	u11120
 11614  0026AC                     u11127:
 11615  0026AC  EC3C  F011         	call	PL24	;call to abstracted procedure
 11616  0026B0  D9E9               	call	PL120	;call to abstracted procedure
 11617  0026B2                     u11120:
 11618  0026B2  DAC7               	call	PL326	;call to abstracted procedure
 11619  0026B4  0E1A               	movlw	26
 11620  0026B6  DA1B               	call	PL162	;call to abstracted procedure
 11621  0026B8  64F7               	cpfsgt	tblptrh,c
 11622  0026BA  D002               	bra	u11137
 11623  0026BC  DAB0               	call	PL268	;call to abstracted procedure
 11624  0026BE  D003               	bra	u11130
 11625  0026C0                     u11137:
 11626  0026C0  EC3C  F011         	call	PL24	;call to abstracted procedure
 11627  0026C4  DAC3               	call	PL332	;call to abstracted procedure
 11628  0026C6                     u11130:
 11629  0026C6  DA94               	call	PL232	;call to abstracted procedure
 11630  0026C8  6FB0               	movwf	(TCP_Snd@txHeader+14)& (0+255),b
 11631  0026CA  516E               	movf	(??_TCP_Snd+5)& (0+255),w,b
 11632  0026CC  1172               	iorwf	(??_TCP_Snd+9)& (0+255),w,b
 11633  0026CE  6FB1               	movwf	(TCP_Snd@txHeader+15)& (0+255),b
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;tcpv4.c: 220: txHeader.checksum = 0;
 11637  0026D0  6BB2               	clrf	(TCP_Snd@txHeader+16)& (0+255),b
 11638  0026D2  6BB3               	clrf	(TCP_Snd@txHeader+17)& (0+255),b
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;tcpv4.c: 221: txHeader.urgentPtr = 0;
 11642  0026D4  6BB4               	clrf	(TCP_Snd@txHeader+18)& (0+255),b
 11643  0026D6  6BB5               	clrf	(TCP_Snd@txHeader+19)& (0+255),b
 11644                           
 11645                           ;tcpv4.c: 223: if ((tcbPtr->flags) & (0x02U | 0x04U))
 11646  0026D8  0E35               	movlw	53
 11647  0026DA  D989               	call	PL28	;call to abstracted procedure
 11648  0026DC  64F7               	cpfsgt	tblptrh,c
 11649  0026DE  D003               	bra	u11147
 11650  0026E0  0008               	tblrd		*
 11651  0026E2  50F5               	movf	tablat,w,c
 11652  0026E4  D003               	bra	u11140
 11653  0026E6                     u11147:
 11654  0026E6  EC3C  F011         	call	PL24	;call to abstracted procedure
 11655  0026EA  50EF               	movf	indf0,w,c
 11656  0026EC                     u11140:
 11657  0026EC  0100               	movlb	0	; () banked
 11658  0026EE  6F6B               	movwf	(??_TCP_Snd+2)& (0+255),b
 11659  0026F0  0E06               	movlw	6
 11660  0026F2  176B               	andwf	(??_TCP_Snd+2)& (0+255),f,b
 11661  0026F4  E003               	bz	l8300
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;tcpv4.c: 224: {
 11665                           ;tcpv4.c: 225: tcpDataLength = 0;
 11666  0026F6  6BA0               	clrf	TCP_Snd@tcpDataLength& (0+255),b
 11667  0026F8  6BA1               	clrf	(TCP_Snd@tcpDataLength+1)& (0+255),b
 11668                           
 11669                           ;tcpv4.c: 226: } else
 11670  0026FA  D094               	goto	l1146
 11671  0026FC                     l8300:
 11672                           
 11673                           ; BSR set to: 0
 11674                           ;tcpv4.c: 227: {
 11675                           ;tcpv4.c: 228: tcpDataLength = tcbPtr->bytesToSend;
 11676  0026FC  0E27               	movlw	39
 11677  0026FE  D977               	call	PL28	;call to abstracted procedure
 11678  002700  64F7               	cpfsgt	tblptrh,c
 11679  002702  D002               	bra	u11167
 11680  002704  DA4E               	call	PL200	;call to abstracted procedure
 11681  002706  D003               	bra	u11160
 11682  002708                     u11167:
 11683  002708  EC3C  F011         	call	PL24	;call to abstracted procedure
 11684  00270C  DA8F               	call	PL290	;call to abstracted procedure
 11685  00270E                     u11160:
 11686                           
 11687                           ;tcpv4.c: 230: if (tcpDataLength != 0)
 11688  00270E  0100               	movlb	0	; () banked
 11689  002710  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 11690  002712  11A1               	iorwf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 11691  002714  E101 D086          	bz	l1146
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;tcpv4.c: 231: {
 11695                           ;tcpv4.c: 232: if(tcpDataLength > tcbPtr->remoteWnd)
 11696  002718  0E18               	movlw	24
 11697  00271A  D969               	call	PL28	;call to abstracted procedure
 11698  00271C  64F7               	cpfsgt	tblptrh,c
 11699  00271E  D002               	bra	u11187
 11700  002720  D99D               	call	PL72	;call to abstracted procedure
 11701  002722  D003               	bra	u11180
 11702  002724                     u11187:
 11703  002724  EC3C  F011         	call	PL24	;call to abstracted procedure
 11704  002728  D9AD               	call	PL120	;call to abstracted procedure
 11705  00272A                     u11180:
 11706  00272A  DA85               	call	PL302	;call to abstracted procedure
 11707  00272C  E209               	bc	l1148
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;tcpv4.c: 233: {
 11711                           ;tcpv4.c: 234: tcpDataLength = tcbPtr->remoteWnd;
 11712  00272E  0E18               	movlw	24
 11713  002730  D95E               	call	PL28	;call to abstracted procedure
 11714  002732  64F7               	cpfsgt	tblptrh,c
 11715  002734  D002               	bra	u11207
 11716  002736  DA35               	call	PL200	;call to abstracted procedure
 11717  002738  D003               	bra	u11200
 11718  00273A                     u11207:
 11719  00273A  EC3C  F011         	call	PL24	;call to abstracted procedure
 11720  00273E  DA76               	call	PL290	;call to abstracted procedure
 11721  002740                     u11200:
 11722  002740                     l1148:
 11723                           
 11724                           ;tcpv4.c: 235: }
 11725                           ;tcpv4.c: 237: if(tcpDataLength > tcbPtr->mss)
 11726  002740  0E1C               	movlw	28
 11727  002742  0100               	movlb	0	; () banked
 11728  002744  D954               	call	PL28	;call to abstracted procedure
 11729  002746  64F7               	cpfsgt	tblptrh,c
 11730  002748  D002               	bra	u11217
 11731  00274A  D988               	call	PL72	;call to abstracted procedure
 11732  00274C  D003               	bra	u11210
 11733  00274E                     u11217:
 11734  00274E  EC3C  F011         	call	PL24	;call to abstracted procedure
 11735  002752  D998               	call	PL120	;call to abstracted procedure
 11736  002754                     u11210:
 11737  002754  DA70               	call	PL302	;call to abstracted procedure
 11738  002756  E209               	bc	l1149
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;tcpv4.c: 238: {
 11742                           ;tcpv4.c: 239: tcpDataLength = tcbPtr->mss;
 11743  002758  0E1C               	movlw	28
 11744  00275A  D949               	call	PL28	;call to abstracted procedure
 11745  00275C  64F7               	cpfsgt	tblptrh,c
 11746  00275E  D002               	bra	u11237
 11747  002760  DA20               	call	PL200	;call to abstracted procedure
 11748  002762  D003               	bra	u11230
 11749  002764                     u11237:
 11750  002764  EC3C  F011         	call	PL24	;call to abstracted procedure
 11751  002768  DA61               	call	PL290	;call to abstracted procedure
 11752  00276A                     u11230:
 11753  00276A                     l1149:
 11754                           
 11755                           ;tcpv4.c: 240: }
 11756                           ;tcpv4.c: 241: data = tcbPtr->txBufferPtr;
 11757  00276A  0E25               	movlw	37
 11758  00276C  0100               	movlb	0	; () banked
 11759  00276E  D93F               	call	PL28	;call to abstracted procedure
 11760  002770  64F7               	cpfsgt	tblptrh,c
 11761  002772  D007               	bra	u11247
 11762  002774  0009               	tblrd		*+
 11763  002776  CFF5 F099          	movff	tablat,TCP_Snd@data
 11764  00277A  0009               	tblrd		*+
 11765  00277C  CFF5 F09A          	movff	tablat,TCP_Snd@data+1
 11766  002780  D006               	bra	u11240
 11767  002782                     u11247:
 11768  002782  EC3C  F011         	call	PL24	;call to abstracted procedure
 11769  002786  CFEE F099          	movff	postinc0,TCP_Snd@data
 11770  00278A  CFEE F09A          	movff	postinc0,TCP_Snd@data+1
 11771  00278E                     u11240:
 11772                           
 11773                           ;tcpv4.c: 244: tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
 11774  00278E  0E25               	movlw	37
 11775  002790  0100               	movlb	0	; () banked
 11776  002792  D92D               	call	PL28	;call to abstracted procedure
 11777  002794  64F7               	cpfsgt	tblptrh,c
 11778  002796  D002               	bra	u11257
 11779  002798  D961               	call	PL72	;call to abstracted procedure
 11780  00279A  D003               	bra	u11250
 11781  00279C                     u11257:
 11782  00279C  EC3C  F011         	call	PL24	;call to abstracted procedure
 11783  0027A0  D971               	call	PL120	;call to abstracted procedure
 11784  0027A2                     u11250:
 11785  0027A2  0100               	movlb	0	; () banked
 11786  0027A4  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 11787  0027A6  276B               	addwf	(??_TCP_Snd+2)& (0+255),f,b
 11788  0027A8  51A1               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 11789  0027AA  236C               	addwfc	(??_TCP_Snd+3)& (0+255),f,b
 11790  0027AC  0E25               	movlw	37
 11791  0027AE  D992               	call	PL158	;call to abstracted procedure
 11792  0027B0  64F7               	cpfsgt	tblptrh,c
 11793  0027B2  D002               	bra	u11267
 11794  0027B4  DA2D               	call	PL262	;call to abstracted procedure
 11795  0027B6  D003               	bra	u11260
 11796  0027B8                     u11267:
 11797  0027B8  EC3C  F011         	call	PL24	;call to abstracted procedure
 11798  0027BC  DA50               	call	PL358	;call to abstracted procedure
 11799  0027BE                     u11260:
 11800                           
 11801                           ;tcpv4.c: 245: tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
 11802  0027BE  0E27               	movlw	39
 11803  0027C0  0100               	movlb	0	; () banked
 11804  0027C2  D915               	call	PL28	;call to abstracted procedure
 11805  0027C4  64F7               	cpfsgt	tblptrh,c
 11806  0027C6  D002               	bra	u11277
 11807  0027C8  D949               	call	PL72	;call to abstracted procedure
 11808  0027CA  D003               	bra	u11270
 11809  0027CC                     u11277:
 11810  0027CC  EC3C  F011         	call	PL24	;call to abstracted procedure
 11811  0027D0  D959               	call	PL120	;call to abstracted procedure
 11812  0027D2                     u11270:
 11813  0027D2  0100               	movlb	0	; () banked
 11814  0027D4  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 11815  0027D6  5F6B               	subwf	(??_TCP_Snd+2)& (0+255),f,b
 11816  0027D8  51A1               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 11817  0027DA  5B6C               	subwfb	(??_TCP_Snd+3)& (0+255),f,b
 11818  0027DC  0E27               	movlw	39
 11819  0027DE  D97A               	call	PL158	;call to abstracted procedure
 11820  0027E0  64F7               	cpfsgt	tblptrh,c
 11821  0027E2  D002               	bra	u11287
 11822  0027E4  DA15               	call	PL262	;call to abstracted procedure
 11823  0027E6  D003               	bra	u11280
 11824  0027E8                     u11287:
 11825  0027E8  EC3C  F011         	call	PL24	;call to abstracted procedure
 11826  0027EC  DA38               	call	PL358	;call to abstracted procedure
 11827  0027EE                     u11280:
 11828                           
 11829                           ;tcpv4.c: 247: if (tcbPtr->bytesToSend == 0)
 11830  0027EE  0E27               	movlw	39
 11831  0027F0  0100               	movlb	0	; () banked
 11832  0027F2  D8FD               	call	PL28	;call to abstracted procedure
 11833  0027F4  64F7               	cpfsgt	tblptrh,c
 11834  0027F6  D002               	bra	u11297
 11835  0027F8  D931               	call	PL72	;call to abstracted procedure
 11836  0027FA  D003               	bra	u11290
 11837  0027FC                     u11297:
 11838  0027FC  EC3C  F011         	call	PL24	;call to abstracted procedure
 11839  002800  D941               	call	PL120	;call to abstracted procedure
 11840  002802                     u11290:
 11841  002802  0100               	movlb	0	; () banked
 11842  002804  516B               	movf	(??_TCP_Snd+2)& (0+255),w,b
 11843  002806  116C               	iorwf	(??_TCP_Snd+3)& (0+255),w,b
 11844  002808  E10D               	bnz	l1146
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;tcpv4.c: 248: {
 11848                           ;tcpv4.c: 249: tcbPtr->flags |= 0x08U;
 11849  00280A  0E35               	movlw	53
 11850  00280C  D8F0               	call	PL28	;call to abstracted procedure
 11851  00280E  64F7               	cpfsgt	tblptrh,c
 11852  002810  D005               	bra	u11317
 11853  002812  0E08               	movlw	8
 11854  002814  0008               	tblrd		*
 11855  002816  12F5               	iorwf	tablat,f,c
 11856  002818  000C               	tblwt		*
 11857  00281A  D004               	bra	u11310
 11858  00281C                     u11317:
 11859  00281C  EC3C  F011         	call	PL24	;call to abstracted procedure
 11860  002820  0E08               	movlw	8
 11861  002822  12EF               	iorwf	indf0,f,c
 11862  002824                     u11310:
 11863  002824                     l1146:
 11864                           
 11865                           ;tcpv4.c: 250: }
 11866                           ;tcpv4.c: 251: }
 11867                           ;tcpv4.c: 252: }
 11868                           ;tcpv4.c: 254: txHeader.flags = tcbPtr->flags;
 11869  002824  0E35               	movlw	53
 11870  002826  0100               	movlb	0	; () banked
 11871  002828  D8E2               	call	PL28	;call to abstracted procedure
 11872  00282A  64F7               	cpfsgt	tblptrh,c
 11873  00282C  D003               	bra	u11327
 11874  00282E  0008               	tblrd		*
 11875  002830  50F5               	movf	tablat,w,c
 11876  002832  D003               	bra	u11320
 11877  002834                     u11327:
 11878  002834  EC3C  F011         	call	PL24	;call to abstracted procedure
 11879  002838  50EF               	movf	indf0,w,c
 11880  00283A                     u11320:
 11881  00283A  0100               	movlb	0	; () banked
 11882  00283C  6FAF               	movwf	(TCP_Snd@txHeader+13)& (0+255),b
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;tcpv4.c: 255: payloadLength = sizeof(tcpHeader_t) + tcpDataLength;
 11886  00283E  0E14               	movlw	20
 11887  002840  25A0               	addwf	TCP_Snd@tcpDataLength& (0+255),w,b
 11888  002842  6F9D               	movwf	TCP_Snd@payloadLength& (0+255),b
 11889  002844  0E00               	movlw	0
 11890  002846  21A1               	addwfc	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 11891  002848  6F9E               	movwf	(TCP_Snd@payloadLength+1)& (0+255),b
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;tcpv4.c: 257: ret = IPv4_Start(tcbPtr->destIP, TCP);
 11895  00284A  0E02               	movlw	2
 11896  00284C  D8D0               	call	PL28	;call to abstracted procedure
 11897  00284E  64F7               	cpfsgt	tblptrh,c
 11898  002850  D00D               	bra	u11337
 11899  002852  0009               	tblrd		*+
 11900  002854  CFF5 F04A          	movff	tablat,IPv4_Start@destAddress
 11901  002858  0009               	tblrd		*+
 11902  00285A  CFF5 F04B          	movff	tablat,IPv4_Start@destAddress+1
 11903  00285E  0009               	tblrd		*+
 11904  002860  CFF5 F04C          	movff	tablat,IPv4_Start@destAddress+2
 11905  002864  0009               	tblrd		*+
 11906  002866  CFF5 F04D          	movff	tablat,IPv4_Start@destAddress+3
 11907  00286A  D00A               	bra	u11330
 11908  00286C                     u11337:
 11909  00286C  EC3C  F011         	call	PL24	;call to abstracted procedure
 11910  002870  CFEE F04A          	movff	postinc0,IPv4_Start@destAddress
 11911  002874  CFEE F04B          	movff	postinc0,IPv4_Start@destAddress+1
 11912  002878  CFEE F04C          	movff	postinc0,IPv4_Start@destAddress+2
 11913  00287C  CFEE F04D          	movff	postinc0,IPv4_Start@destAddress+3
 11914  002880                     u11330:
 11915  002880  0E06               	movlw	6
 11916  002882  6E4E               	movwf	IPv4_Start@protocol,c
 11917  002884  ECC5  F020         	call	_IPv4_Start	;wreg free
 11918  002888  6F9F               	movwf	TCP_Snd@ret& (0+255),b
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;tcpv4.c: 258: if (ret)
 11922  00288A  519F               	movf	TCP_Snd@ret& (0+255),w,b
 11923  00288C  E03A               	bz	l8332
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;tcpv4.c: 259: {
 11927                           ;tcpv4.c: 260: ETH_WriteBlock((uint8_t *) &txHeader, sizeof(tcpHeader_t));
 11928  00288E  0EA2               	movlw	low TCP_Snd@txHeader
 11929  002890  6E03               	movwf	ETH_WriteBlock@data,c
 11930  002892  6A04               	clrf	ETH_WriteBlock@data+1,c
 11931  002894  D9E9               	call	PL380	;call to abstracted procedure
 11932  002896  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 11933                           
 11934                           ;tcpv4.c: 262: if (tcpDataLength > 0)
 11935  00289A  0100               	movlb	0	; () banked
 11936  00289C  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 11937  00289E  11A1               	iorwf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 11938  0028A0  E00A               	bz	l8324
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;tcpv4.c: 263: {
 11942                           ;tcpv4.c: 264: ETH_WriteBlock( data, tcpDataLength);
 11943  0028A2  C099  F003         	movff	TCP_Snd@data,ETH_WriteBlock@data
 11944  0028A6  C09A  F004         	movff	TCP_Snd@data+1,ETH_WriteBlock@data+1
 11945  0028AA  C0A0  F005         	movff	TCP_Snd@tcpDataLength,ETH_WriteBlock@length
 11946  0028AE  C0A1  F006         	movff	TCP_Snd@tcpDataLength+1,ETH_WriteBlock@length+1
 11947  0028B2  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 11948  0028B6                     l8324:
 11949                           
 11950                           ;tcpv4.c: 265: }
 11951                           ;tcpv4.c: 267: cksm = payloadLength + TCP;
 11952  0028B6  0E06               	movlw	6
 11953  0028B8  0100               	movlb	0	; () banked
 11954  0028BA  259D               	addwf	TCP_Snd@payloadLength& (0+255),w,b
 11955  0028BC  6F9B               	movwf	TCP_Snd@cksm& (0+255),b
 11956  0028BE  0E00               	movlw	0
 11957  0028C0  219E               	addwfc	(TCP_Snd@payloadLength+1)& (0+255),w,b
 11958  0028C2  6F9C               	movwf	(TCP_Snd@cksm+1)& (0+255),b
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;tcpv4.c: 269: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) - 8, payloadLength + 8, cksm);
 11962  0028C4  D9C8               	call	PL354	;call to abstracted procedure
 11963  0028C6  259D               	addwf	TCP_Snd@payloadLength& (0+255),w,b
 11964  0028C8  6E0C               	movwf	ETH_TxComputeChecksum@length,c
 11965  0028CA  0E00               	movlw	0
 11966  0028CC  219E               	addwfc	(TCP_Snd@payloadLength+1)& (0+255),w,b
 11967  0028CE  6E0D               	movwf	ETH_TxComputeChecksum@length+1,c
 11968  0028D0  C09B  F00E         	movff	TCP_Snd@cksm,ETH_TxComputeChecksum@seed
 11969  0028D4  C09C  F00F         	movff	TCP_Snd@cksm+1,ETH_TxComputeChecksum@seed+1
 11970  0028D8  EC71  F026         	call	_ETH_TxComputeChecksum	;wreg free
 11971  0028DC  C00A  F09B         	movff	?_ETH_TxComputeChecksum,TCP_Snd@cksm
 11972  0028E0  C00B  F09C         	movff	?_ETH_TxComputeChecksum+1,TCP_Snd@cksm+1
 11973                           
 11974                           ;tcpv4.c: 270: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) + (int)(((char*)&((tcpHeader_t *)1)->checksum)-1));
 11975  0028E4  EC28  F02A         	call	PL192	;call to abstracted procedure
 11976  0028E8  0E32               	movlw	50
 11977  0028EA  6E0C               	movwf	ETH_Insert@offset,c
 11978  0028EC  0E9B               	movlw	TCP_Snd@cksm& (0+255)
 11979  0028EE  EC2D  F02A         	call	_ETH_Insert
 11980                           
 11981                           ;tcpv4.c: 272: ret = IPV4_Send(payloadLength);
 11982  0028F2  C09D  F018         	movff	TCP_Snd@payloadLength,IPV4_Send@payloadLength
 11983  0028F6  C09E  F019         	movff	TCP_Snd@payloadLength+1,IPV4_Send@payloadLength+1
 11984  0028FA  ECF7  F029         	call	_IPV4_Send	;wreg free
 11985  0028FE  0100               	movlb	0	; () banked
 11986  002900  6F9F               	movwf	TCP_Snd@ret& (0+255),b
 11987  002902                     l8332:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;tcpv4.c: 273: }
 11991                           ;tcpv4.c: 277: if (ret == 0)
 11992  002902  519F               	movf	TCP_Snd@ret& (0+255),w,b
 11993  002904  E13E               	bnz	l8338
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;tcpv4.c: 278: {
 11997                           ;tcpv4.c: 281: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
 11998  002906  0E34               	movlw	52
 11999  002908  D872               	call	PL28	;call to abstracted procedure
 12000  00290A  64F7               	cpfsgt	tblptrh,c
 12001  00290C  D003               	bra	u11377
 12002  00290E  0008               	tblrd		*
 12003  002910  50F5               	movf	tablat,w,c
 12004  002912  D003               	bra	u11370
 12005  002914                     u11377:
 12006  002914  EC3C  F011         	call	PL24	;call to abstracted procedure
 12007  002918  50EF               	movf	indf0,w,c
 12008  00291A                     u11370:
 12009  00291A  0100               	movlb	0	; () banked
 12010  00291C  6F6B               	movwf	(??_TCP_Snd+2)& (0+255),b
 12011  00291E  2B6B               	incf	(??_TCP_Snd+2)& (0+255),f,b
 12012  002920  0E34               	movlw	52
 12013  002922  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12014  002924  6F6C               	movwf	(??_TCP_Snd+3)& (0+255),b
 12015  002926  0E00               	movlw	0
 12016  002928  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12017  00292A  6F6D               	movwf	(??_TCP_Snd+4)& (0+255),b
 12018  00292C  C06C  FFF6         	movff	??_TCP_Snd+3,tblptrl
 12019  002930  C06D  FFF7         	movff	??_TCP_Snd+4,tblptrh
 12020  002934  0E00               	movlw	low (__smallconst shr (0+16))
 12021  002936  6EF8               	movwf	tblptru,c
 12022  002938  0E0F               	movlw	(high __ramtop+-1)
 12023  00293A  64F7               	cpfsgt	tblptrh,c
 12024  00293C  D004               	bra	u11387
 12025  00293E  C06B  FFF5         	movff	??_TCP_Snd+2,tablat
 12026  002942  000C               	tblwt		*
 12027  002944  D004               	bra	u11380
 12028  002946                     u11387:
 12029  002946  EC3C  F011         	call	PL24	;call to abstracted procedure
 12030  00294A  C06B  FFEF         	movff	??_TCP_Snd+2,indf0
 12031  00294E                     u11380:
 12032                           
 12033                           ;tcpv4.c: 283: if (tcbPtr->timeout == 0)
 12034  00294E  0E30               	movlw	48
 12035  002950  0100               	movlb	0	; () banked
 12036  002952  D84D               	call	PL28	;call to abstracted procedure
 12037  002954  64F7               	cpfsgt	tblptrh,c
 12038  002956  D002               	bra	u11397
 12039  002958  D881               	call	PL72	;call to abstracted procedure
 12040  00295A  D003               	bra	u11390
 12041  00295C                     u11397:
 12042  00295C  EC3C  F011         	call	PL24	;call to abstracted procedure
 12043  002960  D891               	call	PL120	;call to abstracted procedure
 12044  002962                     u11390:
 12045  002962  0100               	movlb	0	; () banked
 12046  002964  516B               	movf	(??_TCP_Snd+2)& (0+255),w,b
 12047  002966  116C               	iorwf	(??_TCP_Snd+3)& (0+255),w,b
 12048  002968  E13F               	bnz	l8340
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;tcpv4.c: 284: {
 12052                           ;tcpv4.c: 285: tcbPtr->timeout = ((unsigned long)1*2);
 12053  00296A  0E30               	movlw	48
 12054  00296C  D840               	call	PL28	;call to abstracted procedure
 12055  00296E  64F7               	cpfsgt	tblptrh,c
 12056  002970  D003               	bra	u11417
 12057  002972  ECE5  F011         	call	PL84	;call to abstracted procedure
 12058  002976  D004               	bra	u11410
 12059  002978                     u11417:
 12060  002978  EC3C  F011         	call	PL24	;call to abstracted procedure
 12061  00297C  EC35  F012         	call	PL214	;call to abstracted procedure
 12062  002980                     u11410:
 12063  002980  D033               	goto	l8340
 12064  002982                     l8338:
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;tcpv4.c: 288: else
 12068                           ;tcpv4.c: 289: {
 12069                           ;tcpv4.c: 291: tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
 12070  002982  0E10               	movlw	16
 12071  002984  D834               	call	PL28	;call to abstracted procedure
 12072  002986  64F7               	cpfsgt	tblptrh,c
 12073  002988  D003               	bra	u11427
 12074  00298A  D868               	call	PL72	;call to abstracted procedure
 12075  00298C  D880               	call	PL138	;call to abstracted procedure
 12076  00298E  D004               	bra	u11420
 12077  002990                     u11427:
 12078  002990  EC3C  F011         	call	PL24	;call to abstracted procedure
 12079  002994  D877               	call	PL120	;call to abstracted procedure
 12080  002996  D927               	call	PL230	;call to abstracted procedure
 12081  002998                     u11420:
 12082  002998  0100               	movlb	0	; () banked
 12083  00299A  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 12084  00299C  256B               	addwf	(??_TCP_Snd+2)& (0+255),w,b
 12085  00299E  6F6F               	movwf	(??_TCP_Snd+6)& (0+255),b
 12086  0029A0  51A1               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 12087  0029A2  216C               	addwfc	(??_TCP_Snd+3)& (0+255),w,b
 12088  0029A4  6F70               	movwf	(??_TCP_Snd+7)& (0+255),b
 12089  0029A6  0E00               	movlw	0
 12090  0029A8  216D               	addwfc	(??_TCP_Snd+4)& (0+255),w,b
 12091  0029AA  6F71               	movwf	(??_TCP_Snd+8)& (0+255),b
 12092  0029AC  0E00               	movlw	0
 12093  0029AE  216E               	addwfc	(??_TCP_Snd+5)& (0+255),w,b
 12094  0029B0  6F72               	movwf	(??_TCP_Snd+9)& (0+255),b
 12095  0029B2  0E10               	movlw	16
 12096  0029B4  D85A               	call	PL102	;call to abstracted procedure
 12097  0029B6  64F7               	cpfsgt	tblptrh,c
 12098  0029B8  D00D               	bra	u11437
 12099  0029BA  C06F  FFF5         	movff	??_TCP_Snd+6,tablat
 12100  0029BE  000D               	tblwt		*+
 12101  0029C0  C070  FFF5         	movff	??_TCP_Snd+7,tablat
 12102  0029C4  000D               	tblwt		*+
 12103  0029C6  C071  FFF5         	movff	??_TCP_Snd+8,tablat
 12104  0029CA  000D               	tblwt		*+
 12105  0029CC  C072  FFF5         	movff	??_TCP_Snd+9,tablat
 12106  0029D0  000C               	tblwt		*
 12107  0029D2  D00A               	bra	u11430
 12108  0029D4                     u11437:
 12109  0029D4  EC3C  F011         	call	PL24	;call to abstracted procedure
 12110  0029D8  C06F  FFEE         	movff	??_TCP_Snd+6,postinc0
 12111  0029DC  C070  FFEE         	movff	??_TCP_Snd+7,postinc0
 12112  0029E0  C071  FFEE         	movff	??_TCP_Snd+8,postinc0
 12113  0029E4  C072  FFEF         	movff	??_TCP_Snd+9,indf0
 12114  0029E8                     u11430:
 12115  0029E8                     l8340:
 12116                           
 12117                           ;tcpv4.c: 293: }
 12118                           ;tcpv4.c: 295: return ret;
 12119  0029E8  0100               	movlb	0	; () banked
 12120  0029EA  519F               	movf	TCP_Snd@ret& (0+255),w,b
 12121                           
 12122                           ; BSR set to: 0
 12123  0029EC  0012               	return		;funcret
 12124  0029EE                     __end_of_TCP_Snd:
 12125                           	opt stack 0
 12126  0029EE                     PL28:
 12127                           	opt stack 18
 12128  0029EE  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12129  0029F0  6F69               	movwf	??_TCP_Snd& (0+255),b
 12130  0029F2  0E00               	movlw	0
 12131  0029F4  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12132  0029F6  6F6A               	movwf	(??_TCP_Snd+1)& (0+255),b
 12133  0029F8  C069  FFF6         	movff	??_TCP_Snd,tblptrl
 12134  0029FC  C06A  FFF7         	movff	??_TCP_Snd+1,tblptrh
 12135  002A00  0E00               	movlw	low (__smallconst shr (0+16))
 12136  002A02  6EF8               	movwf	tblptru,c
 12137  002A04  0E0F               	movlw	(high __ramtop+-1)
 12138  002A06  0012               	return	
 12139  002A08                     __end_ofPL28:
 12140                           	opt stack 0
 12141  002A08                     PL64:
 12142                           	opt stack 18
 12143  002A08  0100               	movlb	0	; () banked
 12144  002A0A  6B8D               	clrf	(??_TCP_Snd+36)& (0+255),b
 12145  002A0C  6B8E               	clrf	(??_TCP_Snd+37)& (0+255),b
 12146  002A0E  6B8F               	clrf	(??_TCP_Snd+38)& (0+255),b
 12147  002A10  518C               	movf	(??_TCP_Snd+35)& (0+255),w,b
 12148  002A12  6F90               	movwf	(??_TCP_Snd+39)& (0+255),b
 12149  002A14  0E19               	movlw	25
 12150  002A16  D005               	goto	u11060
 12151  002A18                     u11065:
 12152  002A18  90D8               	bcf	status,0,c
 12153  002A1A  3390               	rrcf	(??_TCP_Snd+39)& (0+255),f,b
 12154  002A1C  338F               	rrcf	(??_TCP_Snd+38)& (0+255),f,b
 12155  002A1E  338E               	rrcf	(??_TCP_Snd+37)& (0+255),f,b
 12156  002A20  338D               	rrcf	(??_TCP_Snd+36)& (0+255),f,b
 12157  002A22                     u11060:
 12158  002A22  2EE8               	decfsz	wreg,f,c
 12159  002A24  D7F9               	goto	u11065
 12160  002A26  5183               	movf	(??_TCP_Snd+26)& (0+255),w,b
 12161  002A28  118D               	iorwf	(??_TCP_Snd+36)& (0+255),w,b
 12162  002A2A  6F91               	movwf	(??_TCP_Snd+40)& (0+255),b
 12163  002A2C  5184               	movf	(??_TCP_Snd+27)& (0+255),w,b
 12164  002A2E  118E               	iorwf	(??_TCP_Snd+37)& (0+255),w,b
 12165  002A30  6F92               	movwf	(??_TCP_Snd+41)& (0+255),b
 12166  002A32  5185               	movf	(??_TCP_Snd+28)& (0+255),w,b
 12167  002A34  118F               	iorwf	(??_TCP_Snd+38)& (0+255),w,b
 12168  002A36  6F93               	movwf	(??_TCP_Snd+42)& (0+255),b
 12169  002A38  5186               	movf	(??_TCP_Snd+29)& (0+255),w,b
 12170  002A3A  1190               	iorwf	(??_TCP_Snd+39)& (0+255),w,b
 12171  002A3C  6F94               	movwf	(??_TCP_Snd+43)& (0+255),b
 12172  002A3E  5179               	movf	(??_TCP_Snd+16)& (0+255),w,b
 12173  002A40  1191               	iorwf	(??_TCP_Snd+40)& (0+255),w,b
 12174  002A42  6F95               	movwf	(??_TCP_Snd+44)& (0+255),b
 12175  002A44  517A               	movf	(??_TCP_Snd+17)& (0+255),w,b
 12176  002A46  1192               	iorwf	(??_TCP_Snd+41)& (0+255),w,b
 12177  002A48  6F96               	movwf	(??_TCP_Snd+45)& (0+255),b
 12178  002A4A  517B               	movf	(??_TCP_Snd+18)& (0+255),w,b
 12179  002A4C  1193               	iorwf	(??_TCP_Snd+42)& (0+255),w,b
 12180  002A4E  6F97               	movwf	(??_TCP_Snd+46)& (0+255),b
 12181  002A50  517C               	movf	(??_TCP_Snd+19)& (0+255),w,b
 12182  002A52  1194               	iorwf	(??_TCP_Snd+43)& (0+255),w,b
 12183  002A54  6F98               	movwf	(??_TCP_Snd+47)& (0+255),b
 12184  002A56  516F               	movf	(??_TCP_Snd+6)& (0+255),w,b
 12185  002A58  1195               	iorwf	(??_TCP_Snd+44)& (0+255),w,b
 12186  002A5A  0012               	return	
 12187  002A5C                     __end_ofPL64:
 12188                           	opt stack 0
 12189  002A5C                     PL72:
 12190                           	opt stack 18
 12191  002A5C  0009               	tblrd		*+
 12192  002A5E  CFF5 F06B          	movff	tablat,??_TCP_Snd+2
 12193  002A62  0009               	tblrd		*+
 12194  002A64  CFF5 F06C          	movff	tablat,??_TCP_Snd+3
 12195  002A68  0012               	return	
 12196  002A6A                     __end_ofPL72:
 12197                           	opt stack 0
 12198  002A6A                     PL102:
 12199                           	opt stack 18
 12200  002A6A  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12201  002A6C  6F73               	movwf	(??_TCP_Snd+10)& (0+255),b
 12202  002A6E  0E00               	movlw	0
 12203  002A70  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12204  002A72  6F74               	movwf	(??_TCP_Snd+11)& (0+255),b
 12205  002A74  C073  FFF6         	movff	??_TCP_Snd+10,tblptrl
 12206  002A78  C074  FFF7         	movff	??_TCP_Snd+11,tblptrh
 12207  002A7C  0E00               	movlw	low (__smallconst shr (0+16))
 12208  002A7E  6EF8               	movwf	tblptru,c
 12209  002A80  0E0F               	movlw	(high __ramtop+-1)
 12210  002A82  0012               	return	
 12211  002A84                     __end_ofPL102:
 12212                           	opt stack 0
 12213  002A84                     PL120:
 12214                           	opt stack 18
 12215  002A84  CFEE F06B          	movff	postinc0,??_TCP_Snd+2
 12216  002A88  CFEE F06C          	movff	postinc0,??_TCP_Snd+3
 12217  002A8C  0012               	return	
 12218  002A8E                     __end_ofPL120:
 12219                           	opt stack 0
 12220  002A8E                     PL138:
 12221                           	opt stack 18
 12222  002A8E  0009               	tblrd		*+
 12223  002A90  CFF5 F06D          	movff	tablat,??_TCP_Snd+4
 12224  002A94  0009               	tblrd		*+
 12225  002A96  CFF5 F06E          	movff	tablat,??_TCP_Snd+5
 12226  002A9A  0012               	return	
 12227  002A9C                     __end_ofPL138:
 12228                           	opt stack 0
 12229  002A9C                     PL142:
 12230                           	opt stack 18
 12231  002A9C  0100               	movlb	0	; () banked
 12232  002A9E  6B79               	clrf	(??_TCP_Snd+16)& (0+255),b
 12233  002AA0  5176               	movf	(??_TCP_Snd+13)& (0+255),w,b
 12234  002AA2  6F7A               	movwf	(??_TCP_Snd+17)& (0+255),b
 12235  002AA4  6B7B               	clrf	(??_TCP_Snd+18)& (0+255),b
 12236  002AA6  6B7C               	clrf	(??_TCP_Snd+19)& (0+255),b
 12237  002AA8  C07B  F07C         	movff	??_TCP_Snd+18,??_TCP_Snd+19
 12238  002AAC  C07A  F07B         	movff	??_TCP_Snd+17,??_TCP_Snd+18
 12239  002AB0  C079  F07A         	movff	??_TCP_Snd+16,??_TCP_Snd+17
 12240  002AB4  6B79               	clrf	(??_TCP_Snd+16)& (0+255),b
 12241  002AB6  0012               	return	
 12242  002AB8                     __end_ofPL142:
 12243                           	opt stack 0
 12244  002AB8                     PL146:
 12245                           	opt stack 18
 12246  002AB8  C080  F07F         	movff	??_TCP_Snd+23,??_TCP_Snd+22
 12247  002ABC  C081  F080         	movff	??_TCP_Snd+24,??_TCP_Snd+23
 12248  002AC0  C082  F081         	movff	??_TCP_Snd+25,??_TCP_Snd+24
 12249  002AC4  0100               	movlb	0	; () banked
 12250  002AC6  6B82               	clrf	(??_TCP_Snd+25)& (0+255),b
 12251  002AC8  6B83               	clrf	(??_TCP_Snd+26)& (0+255),b
 12252  002ACA  5180               	movf	(??_TCP_Snd+23)& (0+255),w,b
 12253  002ACC  6F84               	movwf	(??_TCP_Snd+27)& (0+255),b
 12254  002ACE  6B85               	clrf	(??_TCP_Snd+28)& (0+255),b
 12255  002AD0  6B86               	clrf	(??_TCP_Snd+29)& (0+255),b
 12256  002AD2  0012               	return	
 12257  002AD4                     __end_ofPL146:
 12258                           	opt stack 0
 12259  002AD4                     PL158:
 12260                           	opt stack 18
 12261  002AD4  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12262  002AD6  6F6D               	movwf	(??_TCP_Snd+4)& (0+255),b
 12263  002AD8  0E00               	movlw	0
 12264  002ADA  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12265  002ADC  6F6E               	movwf	(??_TCP_Snd+5)& (0+255),b
 12266  002ADE  C06D  FFF6         	movff	??_TCP_Snd+4,tblptrl
 12267  002AE2  C06E  FFF7         	movff	??_TCP_Snd+5,tblptrh
 12268  002AE6  0E00               	movlw	low (__smallconst shr (0+16))
 12269  002AE8  6EF8               	movwf	tblptru,c
 12270  002AEA  0E0F               	movlw	(high __ramtop+-1)
 12271  002AEC  0012               	return	
 12272  002AEE                     __end_ofPL158:
 12273                           	opt stack 0
 12274  002AEE                     PL162:
 12275                           	opt stack 18
 12276  002AEE  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12277  002AF0  6F6F               	movwf	(??_TCP_Snd+6)& (0+255),b
 12278  002AF2  0E00               	movlw	0
 12279  002AF4  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12280  002AF6  6F70               	movwf	(??_TCP_Snd+7)& (0+255),b
 12281  002AF8  C06F  FFF6         	movff	??_TCP_Snd+6,tblptrl
 12282  002AFC  C070  FFF7         	movff	??_TCP_Snd+7,tblptrh
 12283  002B00  0E00               	movlw	low (__smallconst shr (0+16))
 12284  002B02  6EF8               	movwf	tblptru,c
 12285  002B04  0E0F               	movlw	(high __ramtop+-1)
 12286  002B06  0012               	return	
 12287  002B08                     __end_ofPL162:
 12288                           	opt stack 0
 12289  002B08                     PL164:
 12290                           	opt stack 18
 12291  002B08  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12292  002B0A  6F7D               	movwf	(??_TCP_Snd+20)& (0+255),b
 12293  002B0C  0E00               	movlw	0
 12294  002B0E  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12295  002B10  6F7E               	movwf	(??_TCP_Snd+21)& (0+255),b
 12296  002B12  C07D  FFF6         	movff	??_TCP_Snd+20,tblptrl
 12297  002B16  C07E  FFF7         	movff	??_TCP_Snd+21,tblptrh
 12298  002B1A  0E00               	movlw	low (__smallconst shr (0+16))
 12299  002B1C  6EF8               	movwf	tblptru,c
 12300  002B1E  0E0F               	movlw	(high __ramtop+-1)
 12301  002B20  0012               	return	
 12302  002B22                     __end_ofPL164:
 12303                           	opt stack 0
 12304  002B22                     PL168:
 12305                           	opt stack 18
 12306  002B22  0009               	tblrd		*+
 12307  002B24  CFF5 F075          	movff	tablat,??_TCP_Snd+12
 12308  002B28  0009               	tblrd		*+
 12309  002B2A  CFF5 F076          	movff	tablat,??_TCP_Snd+13
 12310  002B2E  0009               	tblrd		*+
 12311  002B30  CFF5 F077          	movff	tablat,??_TCP_Snd+14
 12312  002B34  0009               	tblrd		*+
 12313  002B36  CFF5 F078          	movff	tablat,??_TCP_Snd+15
 12314  002B3A  0012               	return	
 12315  002B3C                     __end_ofPL168:
 12316                           	opt stack 0
 12317  002B3C                     PL170:
 12318                           	opt stack 18
 12319  002B3C  0009               	tblrd		*+
 12320  002B3E  CFF5 F07F          	movff	tablat,??_TCP_Snd+22
 12321  002B42  0009               	tblrd		*+
 12322  002B44  CFF5 F080          	movff	tablat,??_TCP_Snd+23
 12323  002B48  0009               	tblrd		*+
 12324  002B4A  CFF5 F081          	movff	tablat,??_TCP_Snd+24
 12325  002B4E  0009               	tblrd		*+
 12326  002B50  CFF5 F082          	movff	tablat,??_TCP_Snd+25
 12327  002B54  0012               	return	
 12328  002B56                     __end_ofPL170:
 12329                           	opt stack 0
 12330  002B56                     PL172:
 12331                           	opt stack 18
 12332  002B56  0009               	tblrd		*+
 12333  002B58  CFF5 F089          	movff	tablat,??_TCP_Snd+32
 12334  002B5C  0009               	tblrd		*+
 12335  002B5E  CFF5 F08A          	movff	tablat,??_TCP_Snd+33
 12336  002B62  0009               	tblrd		*+
 12337  002B64  CFF5 F08B          	movff	tablat,??_TCP_Snd+34
 12338  002B68  0009               	tblrd		*+
 12339  002B6A  CFF5 F08C          	movff	tablat,??_TCP_Snd+35
 12340  002B6E  0012               	return	
 12341  002B70                     __end_ofPL172:
 12342                           	opt stack 0
 12343  002B70                     PL174:
 12344                           	opt stack 18
 12345  002B70  2567               	addwf	TCP_Snd@tcbPtr& (0+255),w,b
 12346  002B72  6F87               	movwf	(??_TCP_Snd+30)& (0+255),b
 12347  002B74  0E00               	movlw	0
 12348  002B76  2168               	addwfc	(TCP_Snd@tcbPtr+1)& (0+255),w,b
 12349  002B78  6F88               	movwf	(??_TCP_Snd+31)& (0+255),b
 12350  002B7A  C087  FFF6         	movff	??_TCP_Snd+30,tblptrl
 12351  002B7E  C088  FFF7         	movff	??_TCP_Snd+31,tblptrh
 12352  002B82  0E00               	movlw	low (__smallconst shr (0+16))
 12353  002B84  6EF8               	movwf	tblptru,c
 12354  002B86  0E0F               	movlw	(high __ramtop+-1)
 12355  002B88  0012               	return	
 12356  002B8A                     __end_ofPL174:
 12357                           	opt stack 0
 12358  002B8A                     PL184:
 12359                           	opt stack 18
 12360  002B8A  0100               	movlb	0	; () banked
 12361  002B8C  516B               	movf	(??_TCP_Snd+2)& (0+255),w,b
 12362  002B8E  6F6F               	movwf	(??_TCP_Snd+6)& (0+255),b
 12363  002B90  6B70               	clrf	(??_TCP_Snd+7)& (0+255),b
 12364  002B92  6B71               	clrf	(??_TCP_Snd+8)& (0+255),b
 12365  002B94  6B72               	clrf	(??_TCP_Snd+9)& (0+255),b
 12366  002B96  C06F  F072         	movff	??_TCP_Snd+6,??_TCP_Snd+9
 12367  002B9A  6B71               	clrf	(??_TCP_Snd+8)& (0+255),b
 12368  002B9C  6B70               	clrf	(??_TCP_Snd+7)& (0+255),b
 12369  002B9E  6B6F               	clrf	(??_TCP_Snd+6)& (0+255),b
 12370  002BA0  0012               	return	
 12371  002BA2                     __end_ofPL184:
 12372                           	opt stack 0
 12373  002BA2                     PL200:
 12374                           	opt stack 18
 12375  002BA2  0009               	tblrd		*+
 12376  002BA4  CFF5 F0A0          	movff	tablat,TCP_Snd@tcpDataLength
 12377  002BA8  0009               	tblrd		*+
 12378  002BAA  CFF5 F0A1          	movff	tablat,TCP_Snd@tcpDataLength+1
 12379  002BAE  0012               	return	
 12380  002BB0                     __end_ofPL200:
 12381                           	opt stack 0
 12382  002BB0                     PL208:
 12383                           	opt stack 18
 12384  002BB0  CFEE F075          	movff	postinc0,??_TCP_Snd+12
 12385  002BB4  CFEE F076          	movff	postinc0,??_TCP_Snd+13
 12386  002BB8  CFEE F077          	movff	postinc0,??_TCP_Snd+14
 12387  002BBC  CFEE F078          	movff	postinc0,??_TCP_Snd+15
 12388  002BC0  0012               	return	
 12389  002BC2                     __end_ofPL208:
 12390                           	opt stack 0
 12391  002BC2                     PL210:
 12392                           	opt stack 18
 12393  002BC2  CFEE F07F          	movff	postinc0,??_TCP_Snd+22
 12394  002BC6  CFEE F080          	movff	postinc0,??_TCP_Snd+23
 12395  002BCA  CFEE F081          	movff	postinc0,??_TCP_Snd+24
 12396  002BCE  CFEE F082          	movff	postinc0,??_TCP_Snd+25
 12397  002BD2  0012               	return	
 12398  002BD4                     __end_ofPL210:
 12399                           	opt stack 0
 12400  002BD4                     PL212:
 12401                           	opt stack 18
 12402  002BD4  CFEE F089          	movff	postinc0,??_TCP_Snd+32
 12403  002BD8  CFEE F08A          	movff	postinc0,??_TCP_Snd+33
 12404  002BDC  CFEE F08B          	movff	postinc0,??_TCP_Snd+34
 12405  002BE0  CFEE F08C          	movff	postinc0,??_TCP_Snd+35
 12406  002BE4  0012               	return	
 12407  002BE6                     __end_ofPL212:
 12408                           	opt stack 0
 12409  002BE6                     PL230:
 12410                           	opt stack 18
 12411  002BE6  CFEE F06D          	movff	postinc0,??_TCP_Snd+4
 12412  002BEA  CFEE F06E          	movff	postinc0,??_TCP_Snd+5
 12413  002BEE  0012               	return	
 12414  002BF0                     __end_ofPL230:
 12415                           	opt stack 0
 12416  002BF0                     PL232:
 12417                           	opt stack 18
 12418  002BF0  C072  F071         	movff	??_TCP_Snd+9,??_TCP_Snd+8
 12419  002BF4  0100               	movlb	0	; () banked
 12420  002BF6  6B72               	clrf	(??_TCP_Snd+9)& (0+255),b
 12421  002BF8  6B72               	clrf	(??_TCP_Snd+9)& (0+255),b
 12422  002BFA  516D               	movf	(??_TCP_Snd+4)& (0+255),w,b
 12423  002BFC  1171               	iorwf	(??_TCP_Snd+8)& (0+255),w,b
 12424  002BFE  0012               	return	
 12425  002C00                     __end_ofPL232:
 12426                           	opt stack 0
 12427  002C00                     PL256:
 12428                           	opt stack 18
 12429  002C00  C067  FFF6         	movff	TCP_Snd@tcbPtr,tblptrl
 12430  002C04  C068  FFF7         	movff	TCP_Snd@tcbPtr+1,tblptrh
 12431  002C08  0E00               	movlw	low (__smallconst shr (0+16))
 12432  002C0A  6EF8               	movwf	tblptru,c
 12433  002C0C  0E0F               	movlw	(high __ramtop+-1)
 12434  002C0E  0012               	return	
 12435  002C10                     __end_ofPL256:
 12436                           	opt stack 0
 12437  002C10                     PL262:
 12438                           	opt stack 18
 12439  002C10  C06B  FFF5         	movff	??_TCP_Snd+2,tablat
 12440  002C14  000D               	tblwt		*+
 12441  002C16  C06C  FFF5         	movff	??_TCP_Snd+3,tablat
 12442  002C1A  000C               	tblwt		*
 12443  002C1C  0012               	return	
 12444  002C1E                     __end_ofPL262:
 12445                           	opt stack 0
 12446  002C1E                     PL268:
 12447                           	opt stack 18
 12448  002C1E  0009               	tblrd		*+
 12449  002C20  CFF5 F071          	movff	tablat,??_TCP_Snd+8
 12450  002C24  0009               	tblrd		*+
 12451  002C26  CFF5 F072          	movff	tablat,??_TCP_Snd+9
 12452  002C2A  0012               	return	
 12453  002C2C                     __end_ofPL268:
 12454                           	opt stack 0
 12455  002C2C                     PL290:
 12456                           	opt stack 18
 12457  002C2C  CFEE F0A0          	movff	postinc0,TCP_Snd@tcpDataLength
 12458  002C30  CFEE F0A1          	movff	postinc0,TCP_Snd@tcpDataLength+1
 12459  002C34  0012               	return	
 12460  002C36                     __end_ofPL290:
 12461                           	opt stack 0
 12462  002C36                     PL302:
 12463                           	opt stack 18
 12464  002C36  0100               	movlb	0	; () banked
 12465  002C38  51A0               	movf	TCP_Snd@tcpDataLength& (0+255),w,b
 12466  002C3A  5D6B               	subwf	(??_TCP_Snd+2)& (0+255),w,b
 12467  002C3C  51A1               	movf	(TCP_Snd@tcpDataLength+1)& (0+255),w,b
 12468  002C3E  596C               	subwfb	(??_TCP_Snd+3)& (0+255),w,b
 12469  002C40  0012               	return	
 12470  002C42                     __end_ofPL302:
 12471                           	opt stack 0
 12472  002C42                     PL326:
 12473                           	opt stack 18
 12474  002C42  0100               	movlb	0	; () banked
 12475  002C44  516B               	movf	(??_TCP_Snd+2)& (0+255),w,b
 12476  002C46  6F6E               	movwf	(??_TCP_Snd+5)& (0+255),b
 12477  002C48  6B6D               	clrf	(??_TCP_Snd+4)& (0+255),b
 12478  002C4A  0012               	return	
 12479  002C4C                     __end_ofPL326:
 12480                           	opt stack 0
 12481  002C4C                     PL332:
 12482                           	opt stack 18
 12483  002C4C  CFEE F071          	movff	postinc0,??_TCP_Snd+8
 12484  002C50  CFEE F072          	movff	postinc0,??_TCP_Snd+9
 12485  002C54  0012               	return	
 12486  002C56                     __end_ofPL332:
 12487                           	opt stack 0
 12488  002C56                     PL354:
 12489                           	opt stack 19
 12490  002C56  6A0B               	clrf	ETH_TxComputeChecksum@position+1,c
 12491  002C58  0E1A               	movlw	26
 12492  002C5A  6E0A               	movwf	ETH_TxComputeChecksum@position,c
 12493  002C5C  0C08               	retlw	8
 12494  002C5E                     __end_ofPL354:
 12495                           	opt stack 0
 12496  002C5E                     PL358:
 12497                           	opt stack 18
 12498  002C5E  C06B  FFEE         	movff	??_TCP_Snd+2,postinc0
 12499  002C62  C06C  FFEF         	movff	??_TCP_Snd+3,indf0
 12500  002C66  0012               	return	
 12501  002C68                     __end_ofPL358:
 12502                           	opt stack 0
 12503  002C68                     PL380:
 12504                           	opt stack 18
 12505  002C68  6A06               	clrf	ETH_WriteBlock@length+1,c
 12506  002C6A  0E14               	movlw	20
 12507  002C6C  6E05               	movwf	ETH_WriteBlock@length,c
 12508  002C6E  0C14               	retlw	20
 12509  002C70                     __end_ofPL380:
 12510                           	opt stack 0
 12511                           tosu	equ	0xFFF
 12512                           tosh	equ	0xFFE
 12513                           tosl	equ	0xFFD
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           indf0	equ	0xFEF
 12523                           postinc0	equ	0xFEE
 12524                           fsr0h	equ	0xFEA
 12525                           fsr0l	equ	0xFE9
 12526                           wreg	equ	0xFE8
 12527                           postinc1	equ	0xFE6
 12528                           plusw1	equ	0xFE3
 12529                           fsr1h	equ	0xFE2
 12530                           fsr1l	equ	0xFE1
 12531                           bsr	equ	0xFE0
 12532                           indf2	equ	0xFDF
 12533                           postinc2	equ	0xFDE
 12534                           postdec2	equ	0xFDD
 12535                           plusw2	equ	0xFDB
 12536                           fsr2h	equ	0xFDA
 12537                           fsr2l	equ	0xFD9
 12538                           status	equ	0xFD8
 12539                           
 12540 ;; *************** function _TCB_Reset *****************
 12541 ;; Defined at:
 12542 ;;		line 134 in file "../../TCPIP Library/source/tcpv4.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;  tcbPtr          2    1[COMRAM] PTR struct .
 12545 ;;		 -> ?_sprintf(2), ?_printf(2), main@str(32), STR_5(13), 
 12546 ;;		 -> STR_4(17), Network_Read@debug_str(80), NULL(0), 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;		None
 12549 ;; Return value:  Size  Location     Type
 12550 ;;		None               void
 12551 ;; Registers used:
 12552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12553 ;; Tracked objects:
 12554 ;;		On entry : F/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12558 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12561 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;Total ram usage:        4 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    3
 12565 ;; This function calls:
 12566 ;;		Nothing
 12567 ;; This function is called by:
 12568 ;;		_TCP_FiniteStateMachine
 12569 ;; This function uses a non-reentrant model
 12570 ;;
 12571                           
 12572                           	psect	text37
 12573  004482                     __ptext37:
 12574                           	opt stack 0
 12575  004482                     _TCB_Reset:
 12576                           	opt stack 24
 12577                           
 12578                           ; BSR set to: 0
 12579                           ;tcpv4.c: 136: tcbPtr->destIP = 0;
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;incstack = 0
 12583  004482  0E02               	movlw	2
 12584  004484  D8A6               	call	PL36	;call to abstracted procedure
 12585  004486  64F7               	cpfsgt	tblptrh,c
 12586  004488  D007               	bra	u11537
 12587  00448A  6AF5               	clrf	tablat,c
 12588  00448C  000D               	tblwt		*+
 12589  00448E  6AF5               	clrf	tablat,c
 12590  004490  000D               	tblwt		*+
 12591  004492  ECAB  F011         	call	PL58	;call to abstracted procedure
 12592  004496  D004               	bra	u11530
 12593  004498                     u11537:
 12594  004498  EC3C  F011         	call	PL24	;call to abstracted procedure
 12595  00449C  ECF0  F011         	call	PL92	;call to abstracted procedure
 12596  0044A0                     u11530:
 12597                           
 12598                           ;tcpv4.c: 137: tcbPtr->destPort = 0;
 12599  0044A0  0E06               	movlw	6
 12600  0044A2  D897               	call	PL36	;call to abstracted procedure
 12601  0044A4  64F7               	cpfsgt	tblptrh,c
 12602  0044A6  D003               	bra	u11547
 12603  0044A8  ECAB  F011         	call	PL58	;call to abstracted procedure
 12604  0044AC  D004               	bra	u11540
 12605  0044AE                     u11547:
 12606  0044AE  EC3C  F011         	call	PL24	;call to abstracted procedure
 12607  0044B2  6AEE               	clrf	postinc0,c
 12608  0044B4  6AEF               	clrf	indf0,c
 12609  0044B6                     u11540:
 12610                           
 12611                           ;tcpv4.c: 138: tcbPtr->localSeqno = 0;
 12612  0044B6  0E10               	movlw	16
 12613  0044B8  D88C               	call	PL36	;call to abstracted procedure
 12614  0044BA  64F7               	cpfsgt	tblptrh,c
 12615  0044BC  D007               	bra	u11557
 12616  0044BE  6AF5               	clrf	tablat,c
 12617  0044C0  000D               	tblwt		*+
 12618  0044C2  6AF5               	clrf	tablat,c
 12619  0044C4  000D               	tblwt		*+
 12620  0044C6  ECAB  F011         	call	PL58	;call to abstracted procedure
 12621  0044CA  D004               	bra	u11550
 12622  0044CC                     u11557:
 12623  0044CC  EC3C  F011         	call	PL24	;call to abstracted procedure
 12624  0044D0  ECF0  F011         	call	PL92	;call to abstracted procedure
 12625  0044D4                     u11550:
 12626                           
 12627                           ;tcpv4.c: 139: tcbPtr->localLastAck = 0;
 12628  0044D4  0E14               	movlw	20
 12629  0044D6  D87D               	call	PL36	;call to abstracted procedure
 12630  0044D8  64F7               	cpfsgt	tblptrh,c
 12631  0044DA  D007               	bra	u11567
 12632  0044DC  6AF5               	clrf	tablat,c
 12633  0044DE  000D               	tblwt		*+
 12634  0044E0  6AF5               	clrf	tablat,c
 12635  0044E2  000D               	tblwt		*+
 12636  0044E4  ECAB  F011         	call	PL58	;call to abstracted procedure
 12637  0044E8  D004               	bra	u11560
 12638  0044EA                     u11567:
 12639  0044EA  EC3C  F011         	call	PL24	;call to abstracted procedure
 12640  0044EE  ECF0  F011         	call	PL92	;call to abstracted procedure
 12641  0044F2                     u11560:
 12642                           
 12643                           ;tcpv4.c: 140: tcbPtr->remoteSeqno = 0;
 12644  0044F2  0E08               	movlw	8
 12645  0044F4  D86E               	call	PL36	;call to abstracted procedure
 12646  0044F6  64F7               	cpfsgt	tblptrh,c
 12647  0044F8  D007               	bra	u11577
 12648  0044FA  6AF5               	clrf	tablat,c
 12649  0044FC  000D               	tblwt		*+
 12650  0044FE  6AF5               	clrf	tablat,c
 12651  004500  000D               	tblwt		*+
 12652  004502  ECAB  F011         	call	PL58	;call to abstracted procedure
 12653  004506  D004               	bra	u11570
 12654  004508                     u11577:
 12655  004508  EC3C  F011         	call	PL24	;call to abstracted procedure
 12656  00450C  ECF0  F011         	call	PL92	;call to abstracted procedure
 12657  004510                     u11570:
 12658                           
 12659                           ;tcpv4.c: 141: tcbPtr->remoteAck = 0;
 12660  004510  0E0C               	movlw	12
 12661  004512  D85F               	call	PL36	;call to abstracted procedure
 12662  004514  64F7               	cpfsgt	tblptrh,c
 12663  004516  D007               	bra	u11587
 12664  004518  6AF5               	clrf	tablat,c
 12665  00451A  000D               	tblwt		*+
 12666  00451C  6AF5               	clrf	tablat,c
 12667  00451E  000D               	tblwt		*+
 12668  004520  ECAB  F011         	call	PL58	;call to abstracted procedure
 12669  004524  D004               	bra	u11580
 12670  004526                     u11587:
 12671  004526  EC3C  F011         	call	PL24	;call to abstracted procedure
 12672  00452A  ECF0  F011         	call	PL92	;call to abstracted procedure
 12673  00452E                     u11580:
 12674                           
 12675                           ;tcpv4.c: 142: tcbPtr->remoteWnd = 0;
 12676  00452E  0E18               	movlw	24
 12677  004530  D850               	call	PL36	;call to abstracted procedure
 12678  004532  64F7               	cpfsgt	tblptrh,c
 12679  004534  D003               	bra	u11597
 12680  004536  ECAB  F011         	call	PL58	;call to abstracted procedure
 12681  00453A  D004               	bra	u11590
 12682  00453C                     u11597:
 12683  00453C  EC3C  F011         	call	PL24	;call to abstracted procedure
 12684  004540  6AEE               	clrf	postinc0,c
 12685  004542  6AEF               	clrf	indf0,c
 12686  004544                     u11590:
 12687                           
 12688                           ;tcpv4.c: 144: tcbPtr->timeout = 0;
 12689  004544  0E30               	movlw	48
 12690  004546  D845               	call	PL36	;call to abstracted procedure
 12691  004548  64F7               	cpfsgt	tblptrh,c
 12692  00454A  D003               	bra	u11607
 12693  00454C  ECAB  F011         	call	PL58	;call to abstracted procedure
 12694  004550  D004               	bra	u11600
 12695  004552                     u11607:
 12696  004552  EC3C  F011         	call	PL24	;call to abstracted procedure
 12697  004556  6AEE               	clrf	postinc0,c
 12698  004558  6AEF               	clrf	indf0,c
 12699  00455A                     u11600:
 12700                           
 12701                           ;tcpv4.c: 145: tcbPtr->timeoutReloadValue = 0;
 12702  00455A  0E32               	movlw	50
 12703  00455C  D83A               	call	PL36	;call to abstracted procedure
 12704  00455E  64F7               	cpfsgt	tblptrh,c
 12705  004560  D003               	bra	u11617
 12706  004562  ECAB  F011         	call	PL58	;call to abstracted procedure
 12707  004566  D004               	bra	u11610
 12708  004568                     u11617:
 12709  004568  EC3C  F011         	call	PL24	;call to abstracted procedure
 12710  00456C  6AEE               	clrf	postinc0,c
 12711  00456E  6AEF               	clrf	indf0,c
 12712  004570                     u11610:
 12713                           
 12714                           ;tcpv4.c: 146: tcbPtr->timeoutsCount = 0;
 12715  004570  0E34               	movlw	52
 12716  004572  D82F               	call	PL36	;call to abstracted procedure
 12717  004574  64F7               	cpfsgt	tblptrh,c
 12718  004576  D003               	bra	u11627
 12719  004578  6AF5               	clrf	tablat,c
 12720  00457A  000C               	tblwt		*
 12721  00457C  D003               	bra	u11620
 12722  00457E                     u11627:
 12723  00457E  EC3C  F011         	call	PL24	;call to abstracted procedure
 12724  004582  6AEF               	clrf	indf0,c
 12725  004584                     u11620:
 12726                           
 12727                           ;tcpv4.c: 147: tcbPtr->flags = 0;
 12728  004584  0E35               	movlw	53
 12729  004586  D825               	call	PL36	;call to abstracted procedure
 12730  004588  64F7               	cpfsgt	tblptrh,c
 12731  00458A  D003               	bra	u11637
 12732  00458C  6AF5               	clrf	tablat,c
 12733  00458E  000C               	tblwt		*
 12734  004590  D003               	bra	u11630
 12735  004592                     u11637:
 12736  004592  EC3C  F011         	call	PL24	;call to abstracted procedure
 12737  004596  6AEF               	clrf	indf0,c
 12738  004598                     u11630:
 12739                           
 12740                           ;tcpv4.c: 149: tcbPtr->localPort = 0;
 12741  004598  C002  FFF6         	movff	TCB_Reset@tcbPtr,tblptrl
 12742  00459C  C003  FFF7         	movff	TCB_Reset@tcbPtr+1,tblptrh
 12743  0045A0  0E00               	movlw	low (__smallconst shr (0+16))
 12744  0045A2  6EF8               	movwf	tblptru,c
 12745  0045A4  0E0F               	movlw	(high __ramtop+-1)
 12746  0045A6  64F7               	cpfsgt	tblptrh,c
 12747  0045A8  D003               	bra	u11647
 12748  0045AA  ECAB  F011         	call	PL58	;call to abstracted procedure
 12749  0045AE  D004               	bra	u11640
 12750  0045B0                     u11647:
 12751  0045B0  EC3C  F011         	call	PL24	;call to abstracted procedure
 12752  0045B4  6AEE               	clrf	postinc0,c
 12753  0045B6  6AEF               	clrf	indf0,c
 12754  0045B8                     u11640:
 12755                           
 12756                           ;tcpv4.c: 150: tcbPtr->socketState = SOCKET_CLOSED;
 12757  0045B8  0E36               	movlw	54
 12758  0045BA  D80B               	call	PL36	;call to abstracted procedure
 12759  0045BC  64F7               	cpfsgt	tblptrh,c
 12760  0045BE  D004               	bra	u11657
 12761  0045C0  0E01               	movlw	1
 12762  0045C2  6EF5               	movwf	tablat,c
 12763  0045C4  000C               	tblwt		*
 12764  0045C6  D004               	bra	u11650
 12765  0045C8                     u11657:
 12766  0045C8  EC3C  F011         	call	PL24	;call to abstracted procedure
 12767  0045CC  0E01               	movlw	1
 12768  0045CE  6EEF               	movwf	indf0,c
 12769  0045D0                     u11650:
 12770  0045D0  0012               	return		;funcret
 12771  0045D2                     __end_of_TCB_Reset:
 12772                           	opt stack 0
 12773  0045D2                     PL36:
 12774                           	opt stack 24
 12775  0045D2  2402               	addwf	TCB_Reset@tcbPtr,w,c
 12776  0045D4  6E04               	movwf	??_TCB_Reset& (0+255),c
 12777  0045D6  0E00               	movlw	0
 12778  0045D8  2003               	addwfc	TCB_Reset@tcbPtr+1,w,c
 12779  0045DA  6E05               	movwf	(??_TCB_Reset+1)& (0+255),c
 12780  0045DC  C004  FFF6         	movff	??_TCB_Reset,tblptrl
 12781  0045E0  C005  FFF7         	movff	??_TCB_Reset+1,tblptrh
 12782  0045E4  0E00               	movlw	low (__smallconst shr (0+16))
 12783  0045E6  6EF8               	movwf	tblptru,c
 12784  0045E8  0E0F               	movlw	(high __ramtop+-1)
 12785  0045EA  0012               	return	
 12786  0045EC                     __end_ofPL36:
 12787                           	opt stack 0
 12788                           tosu	equ	0xFFF
 12789                           tosh	equ	0xFFE
 12790                           tosl	equ	0xFFD
 12791                           pclath	equ	0xFFA
 12792                           tblptru	equ	0xFF8
 12793                           tblptrh	equ	0xFF7
 12794                           tblptrl	equ	0xFF6
 12795                           tablat	equ	0xFF5
 12796                           prodh	equ	0xFF4
 12797                           prodl	equ	0xFF3
 12798                           intcon	equ	0xFF2
 12799                           indf0	equ	0xFEF
 12800                           postinc0	equ	0xFEE
 12801                           fsr0h	equ	0xFEA
 12802                           fsr0l	equ	0xFE9
 12803                           wreg	equ	0xFE8
 12804                           postinc1	equ	0xFE6
 12805                           plusw1	equ	0xFE3
 12806                           fsr1h	equ	0xFE2
 12807                           fsr1l	equ	0xFE1
 12808                           bsr	equ	0xFE0
 12809                           indf2	equ	0xFDF
 12810                           postinc2	equ	0xFDE
 12811                           postdec2	equ	0xFDD
 12812                           plusw2	equ	0xFDB
 12813                           fsr2h	equ	0xFDA
 12814                           fsr2l	equ	0xFD9
 12815                           status	equ	0xFD8
 12816                           
 12817 ;; *************** function _IPV4_PseudoHeaderChecksum *****************
 12818 ;; Defined at:
 12819 ;;		line 83 in file "../../TCPIP Library/source/ipv4.c"
 12820 ;; Parameters:    Size  Location     Type
 12821 ;;  payloadLen      2    1[COMRAM] unsigned int 
 12822 ;; Auto vars:     Size  Location     Type
 12823 ;;  tmp            12   13[COMRAM] struct .
 12824 ;;  cksm            4    9[COMRAM] unsigned long 
 12825 ;;  len             1    8[COMRAM] unsigned char 
 12826 ;;  v               1    7[COMRAM] PTR unsigned int 
 12827 ;;		 -> IPV4_PseudoHeaderChecksum@tmp(12), 
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  2    1[COMRAM] unsigned int 
 12830 ;; Registers used:
 12831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12832 ;; Tracked objects:
 12833 ;;		On entry : F/0
 12834 ;;		On exit  : F/0
 12835 ;;		Unchanged: F/0
 12836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12838 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12839 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12840 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12841 ;;Total ram usage:       24 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; Hardware stack levels required when called:    3
 12844 ;; This function calls:
 12845 ;;		Nothing
 12846 ;; This function is called by:
 12847 ;;		_IPV4_Packet
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           	psect	text38
 12852  004F22                     __ptext38:
 12853                           	opt stack 0
 12854  004F22                     _IPV4_PseudoHeaderChecksum:
 12855                           	opt stack 24
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;ipv4.c: 85: ipv4_pseudo_header_t tmp;
 12859                           ;ipv4.c: 86: uint8_t len;
 12860                           ;ipv4.c: 87: uint32_t cksm = 0;
 12861                           
 12862                           ;incstack = 0
 12863  004F22  6A0A               	clrf	IPV4_PseudoHeaderChecksum@cksm,c
 12864  004F24  6A0B               	clrf	IPV4_PseudoHeaderChecksum@cksm+1,c
 12865  004F26  6A0C               	clrf	IPV4_PseudoHeaderChecksum@cksm+2,c
 12866  004F28  6A0D               	clrf	IPV4_PseudoHeaderChecksum@cksm+3,c
 12867                           
 12868                           ;ipv4.c: 88: uint16_t *v;
 12869                           ;ipv4.c: 90: tmp.srcIpAddress = ipv4Header.srcIpAddress;
 12870  004F2A  C2A0  F00E         	movff	_ipv4Header+12,IPV4_PseudoHeaderChecksum@tmp
 12871  004F2E  C2A1  F00F         	movff	_ipv4Header+13,IPV4_PseudoHeaderChecksum@tmp+1
 12872  004F32  C2A2  F010         	movff	_ipv4Header+14,IPV4_PseudoHeaderChecksum@tmp+2
 12873  004F36  C2A3  F011         	movff	_ipv4Header+15,IPV4_PseudoHeaderChecksum@tmp+3
 12874                           
 12875                           ;ipv4.c: 91: tmp.dstIpAddress = ipv4Header.dstIpAddress;
 12876  004F3A  C2A4  F012         	movff	_ipv4Header+16,IPV4_PseudoHeaderChecksum@tmp+4
 12877  004F3E  C2A5  F013         	movff	_ipv4Header+17,IPV4_PseudoHeaderChecksum@tmp+5
 12878  004F42  C2A6  F014         	movff	_ipv4Header+18,IPV4_PseudoHeaderChecksum@tmp+6
 12879  004F46  C2A7  F015         	movff	_ipv4Header+19,IPV4_PseudoHeaderChecksum@tmp+7
 12880                           
 12881                           ;ipv4.c: 92: tmp.protocol = ipv4Header.protocol;
 12882  004F4A  C29D  F016         	movff	_ipv4Header+9,IPV4_PseudoHeaderChecksum@tmp+8
 12883                           
 12884                           ;ipv4.c: 93: tmp.z = 0;
 12885  004F4E  6A17               	clrf	IPV4_PseudoHeaderChecksum@tmp+9,c
 12886                           
 12887                           ;ipv4.c: 94: tmp.length = payloadLen;
 12888  004F50  C002  F018         	movff	IPV4_PseudoHeaderChecksum@payloadLen,IPV4_PseudoHeaderChecksum@tmp+10
 12889  004F54  C003  F019         	movff	IPV4_PseudoHeaderChecksum@payloadLen+1,IPV4_PseudoHeaderChecksum@tmp+11
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;ipv4.c: 96: len = sizeof(tmp);
 12893  004F58  0E0C               	movlw	12
 12894  004F5A  6E09               	movwf	IPV4_PseudoHeaderChecksum@len,c
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;ipv4.c: 97: len = len >> 1;
 12898  004F5C  90D8               	bcf	status,0,c
 12899  004F5E  3209               	rrcf	IPV4_PseudoHeaderChecksum@len,f,c
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;ipv4.c: 99: v = (uint16_t *) &tmp;
 12903  004F60  0E0E               	movlw	low IPV4_PseudoHeaderChecksum@tmp
 12904  004F62  6E08               	movwf	IPV4_PseudoHeaderChecksum@v,c
 12905                           
 12906                           ;ipv4.c: 101: while(len)
 12907  004F64  D011               	goto	l6340
 12908  004F66                     l6334:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;ipv4.c: 102: {
 12912                           ;ipv4.c: 103: cksm += *v;
 12913  004F66  5008               	movf	IPV4_PseudoHeaderChecksum@v,w,c
 12914  004F68  6ED9               	movwf	fsr2l,c
 12915  004F6A  6ADA               	clrf	fsr2h,c
 12916  004F6C  CFDE F004          	movff	postinc2,??_IPV4_PseudoHeaderChecksum
 12917  004F70  CFDD F005          	movff	postdec2,??_IPV4_PseudoHeaderChecksum+1
 12918  004F74  5004               	movf	??_IPV4_PseudoHeaderChecksum,w,c
 12919  004F76  260A               	addwf	IPV4_PseudoHeaderChecksum@cksm,f,c
 12920  004F78  5005               	movf	??_IPV4_PseudoHeaderChecksum+1,w,c
 12921  004F7A  220B               	addwfc	IPV4_PseudoHeaderChecksum@cksm+1,f,c
 12922  004F7C  0E00               	movlw	0
 12923  004F7E  220C               	addwfc	IPV4_PseudoHeaderChecksum@cksm+2,f,c
 12924  004F80  220D               	addwfc	IPV4_PseudoHeaderChecksum@cksm+3,f,c
 12925                           
 12926                           ; BSR set to: 0
 12927                           ;ipv4.c: 104: len--;
 12928  004F82  0609               	decf	IPV4_PseudoHeaderChecksum@len,f,c
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;ipv4.c: 105: v++;
 12932  004F84  0E02               	movlw	2
 12933  004F86  2608               	addwf	IPV4_PseudoHeaderChecksum@v,f,c
 12934  004F88                     l6340:
 12935                           
 12936                           ; BSR set to: 0
 12937  004F88  5009               	movf	IPV4_PseudoHeaderChecksum@len,w,c
 12938  004F8A  E1ED               	bnz	l6334
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;ipv4.c: 106: }
 12942                           ;ipv4.c: 109: cksm = (cksm & 0x0FFFF) + (cksm>>16);
 12943  004F8C  500A               	movf	IPV4_PseudoHeaderChecksum@cksm,w,c
 12944  004F8E  6E04               	movwf	??_IPV4_PseudoHeaderChecksum& (0+255),c
 12945  004F90  500B               	movf	IPV4_PseudoHeaderChecksum@cksm+1,w,c
 12946  004F92  6E05               	movwf	(??_IPV4_PseudoHeaderChecksum+1)& (0+255),c
 12947  004F94  6A06               	clrf	(??_IPV4_PseudoHeaderChecksum+2)& (0+255),c
 12948  004F96  6A07               	clrf	(??_IPV4_PseudoHeaderChecksum+3)& (0+255),c
 12949  004F98  500C               	movf	IPV4_PseudoHeaderChecksum@cksm+2,w,c
 12950  004F9A  2404               	addwf	??_IPV4_PseudoHeaderChecksum,w,c
 12951  004F9C  6E0A               	movwf	IPV4_PseudoHeaderChecksum@cksm,c
 12952  004F9E  500D               	movf	IPV4_PseudoHeaderChecksum@cksm+3,w,c
 12953  004FA0  2005               	addwfc	??_IPV4_PseudoHeaderChecksum+1,w,c
 12954  004FA2  6E0B               	movwf	IPV4_PseudoHeaderChecksum@cksm+1,c
 12955  004FA4  0E00               	movlw	0
 12956  004FA6  2006               	addwfc	??_IPV4_PseudoHeaderChecksum+2,w,c
 12957  004FA8  6E0C               	movwf	IPV4_PseudoHeaderChecksum@cksm+2,c
 12958  004FAA  0E00               	movlw	0
 12959  004FAC  2007               	addwfc	??_IPV4_PseudoHeaderChecksum+3,w,c
 12960  004FAE  6E0D               	movwf	IPV4_PseudoHeaderChecksum@cksm+3,c
 12961                           
 12962                           ; BSR set to: 0
 12963                           ;ipv4.c: 112: return cksm;
 12964  004FB0  C00A  F002         	movff	IPV4_PseudoHeaderChecksum@cksm,?_IPV4_PseudoHeaderChecksum
 12965  004FB4  C00B  F003         	movff	IPV4_PseudoHeaderChecksum@cksm+1,?_IPV4_PseudoHeaderChecksum+1
 12966                           
 12967                           ; BSR set to: 0
 12968  004FB8  0012               	return		;funcret
 12969  004FBA                     __end_of_IPV4_PseudoHeaderChecksum:
 12970                           	opt stack 0
 12971                           tosu	equ	0xFFF
 12972                           tosh	equ	0xFFE
 12973                           tosl	equ	0xFFD
 12974                           pclath	equ	0xFFA
 12975                           tblptru	equ	0xFF8
 12976                           tblptrh	equ	0xFF7
 12977                           tblptrl	equ	0xFF6
 12978                           tablat	equ	0xFF5
 12979                           prodh	equ	0xFF4
 12980                           prodl	equ	0xFF3
 12981                           intcon	equ	0xFF2
 12982                           indf0	equ	0xFEF
 12983                           postinc0	equ	0xFEE
 12984                           fsr0h	equ	0xFEA
 12985                           fsr0l	equ	0xFE9
 12986                           wreg	equ	0xFE8
 12987                           postinc1	equ	0xFE6
 12988                           plusw1	equ	0xFE3
 12989                           fsr1h	equ	0xFE2
 12990                           fsr1l	equ	0xFE1
 12991                           bsr	equ	0xFE0
 12992                           indf2	equ	0xFDF
 12993                           postinc2	equ	0xFDE
 12994                           postdec2	equ	0xFDD
 12995                           plusw2	equ	0xFDB
 12996                           fsr2h	equ	0xFDA
 12997                           fsr2l	equ	0xFD9
 12998                           status	equ	0xFD8
 12999                           
 13000 ;; *************** function _ICMP_Receive *****************
 13001 ;; Defined at:
 13002 ;;		line 56 in file "../../TCPIP Library/source/icmp.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;  ipv4Hdr         2   17[BANK0 ] PTR struct .
 13005 ;;		 -> ipv4Header(20), 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  icmpHdr         8   24[BANK0 ] struct .
 13008 ;;  ret             1    0        enum E366
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      enum E366
 13011 ;; Registers used:
 13012 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13013 ;; Tracked objects:
 13014 ;;		On entry : F/0
 13015 ;;		On exit  : F/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13018 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13019 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13020 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13021 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13022 ;;Total ram usage:       15 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; Hardware stack levels required when called:   10
 13025 ;; This function calls:
 13026 ;;		_ETH_ReadBlock
 13027 ;;		_ETH_SaveRDPT
 13028 ;;		_ICMP_EchoReply
 13029 ;; This function is called by:
 13030 ;;		_IPV4_Packet
 13031 ;; This function uses a non-reentrant model
 13032 ;;
 13033                           
 13034                           	psect	text39
 13035  00569A                     __ptext39:
 13036                           	opt stack 0
 13037  00569A                     _ICMP_Receive:
 13038                           	opt stack 17
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;icmp.c: 60: ETH_ReadBlock((char *)&icmpHdr, sizeof(icmpHeader_t));
 13042                           
 13043                           ; BSR set to: 0
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;incstack = 0
 13047  00569A  0E78               	movlw	low ICMP_Receive@icmpHdr
 13048  00569C  6E03               	movwf	ETH_ReadBlock@buffer,c
 13049  00569E  6A04               	clrf	ETH_ReadBlock@buffer+1,c
 13050  0056A0  D81E               	call	PL378	;call to abstracted procedure
 13051  0056A2  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
 13052                           
 13053                           ;icmp.c: 61: ETH_SaveRDPT();
 13054  0056A6  EC1D  F02F         	call	_ETH_SaveRDPT	;wreg free
 13055                           
 13056                           ;icmp.c: 63: switch(((((uint16_t)(icmpTypeCodes_t)icmpHdr.typeCode & (uint16_t)0xFF00) >
      +                          > 8) | (((uint16_t)(icmpTypeCodes_t)icmpHdr.typeCode & (uint16_t)0x00FF) << 8)))
 13057  0056AA  D007               	goto	l9004
 13058  0056AC                     l9000:
 13059                           
 13060                           ; BSR set to: 0
 13061  0056AC  C071  F067         	movff	ICMP_Receive@ipv4Hdr,ICMP_EchoReply@ipv4Hdr
 13062  0056B0  C072  F068         	movff	ICMP_Receive@ipv4Hdr+1,ICMP_EchoReply@ipv4Hdr+1
 13063  0056B4  0E78               	movlw	ICMP_Receive@icmpHdr& (0+255)
 13064  0056B6  EFA6  F023         	goto	_ICMP_EchoReply
 13065  0056BA                     l9004:
 13066  0056BA  0100               	movlb	0	; () banked
 13067  0056BC  5178               	movf	ICMP_Receive@icmpHdr& (0+255),w,b
 13068  0056BE  6F74               	movwf	(??_ICMP_Receive+1)& (0+255),b
 13069  0056C0  6B73               	clrf	??_ICMP_Receive& (0+255),b
 13070  0056C2  5179               	movf	(ICMP_Receive@icmpHdr+1)& (0+255),w,b
 13071  0056C4  6F75               	movwf	(??_ICMP_Receive+2)& (0+255),b
 13072  0056C6  6B76               	clrf	(??_ICMP_Receive+3)& (0+255),b
 13073  0056C8  5173               	movf	??_ICMP_Receive& (0+255),w,b
 13074  0056CA  1375               	iorwf	(??_ICMP_Receive+2)& (0+255),f,b
 13075  0056CC  5174               	movf	(??_ICMP_Receive+1)& (0+255),w,b
 13076  0056CE  1376               	iorwf	(??_ICMP_Receive+3)& (0+255),f,b
 13077                           
 13078                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13079                           ; Switch size 1, requested type "space"
 13080                           ; Number of cases is 1, Range of values is 8 to 8
 13081                           ; switch strategies available:
 13082                           ; Name         Instructions Cycles
 13083                           ; simple_byte            4     3 (average)
 13084                           ;	Chosen strategy is simple_byte
 13085  0056D0  5176               	movf	(??_ICMP_Receive+3)& (0+255),w,b
 13086  0056D2  0A08               	xorlw	8	; case 8
 13087  0056D4  A4D8               	btfss	status,2,c
 13088  0056D6  0012               	return	
 13089                           
 13090                           ; BSR set to: 0
 13091                           ; Switch size 1, requested type "space"
 13092                           ; Number of cases is 1, Range of values is 0 to 0
 13093                           ; switch strategies available:
 13094                           ; Name         Instructions Cycles
 13095                           ; simple_byte            4     3 (average)
 13096                           ;	Chosen strategy is simple_byte
 13097  0056D8  5175               	movf	(??_ICMP_Receive+2)& (0+255),w,b
 13098  0056DA  E0E8               	bz	l9000
 13099                           
 13100                           ; BSR set to: 0
 13101  0056DC  0012               	return		;funcret
 13102  0056DE                     __end_of_ICMP_Receive:
 13103                           	opt stack 0
 13104  0056DE                     PL378:
 13105                           	opt stack 22
 13106  0056DE  6A06               	clrf	ETH_ReadBlock@length+1,c
 13107  0056E0  0E08               	movlw	8
 13108  0056E2  6E05               	movwf	ETH_ReadBlock@length,c
 13109  0056E4  0C08               	retlw	8
 13110  0056E6                     __end_ofPL378:
 13111                           	opt stack 0
 13112                           tosu	equ	0xFFF
 13113                           tosh	equ	0xFFE
 13114                           tosl	equ	0xFFD
 13115                           pclath	equ	0xFFA
 13116                           tblptru	equ	0xFF8
 13117                           tblptrh	equ	0xFF7
 13118                           tblptrl	equ	0xFF6
 13119                           tablat	equ	0xFF5
 13120                           prodh	equ	0xFF4
 13121                           prodl	equ	0xFF3
 13122                           intcon	equ	0xFF2
 13123                           indf0	equ	0xFEF
 13124                           postinc0	equ	0xFEE
 13125                           fsr0h	equ	0xFEA
 13126                           fsr0l	equ	0xFE9
 13127                           wreg	equ	0xFE8
 13128                           postinc1	equ	0xFE6
 13129                           plusw1	equ	0xFE3
 13130                           fsr1h	equ	0xFE2
 13131                           fsr1l	equ	0xFE1
 13132                           bsr	equ	0xFE0
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function _ICMP_EchoReply *****************
 13142 ;; Defined at:
 13143 ;;		line 86 in file "../../TCPIP Library/source/icmp.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  icmpHdr         1    wreg     PTR struct .
 13146 ;;		 -> ICMP_Receive@icmpHdr(8), 
 13147 ;;  ipv4Hdr         2    7[BANK0 ] PTR struct .
 13148 ;;		 -> ipv4Header(20), 
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;  icmpHdr         1   16[BANK0 ] PTR struct .
 13151 ;;		 -> ICMP_Receive@icmpHdr(8), 
 13152 ;;  ipv4PayloadL    2   13[BANK0 ] unsigned int 
 13153 ;;  icmp_cksm_st    2    0        unsigned int 
 13154 ;;  cksm            2   11[BANK0 ] unsigned int 
 13155 ;;  ret             1   15[BANK0 ] enum E366
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      enum E366
 13158 ;; Registers used:
 13159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13160 ;; Tracked objects:
 13161 ;;		On entry : F/0
 13162 ;;		On exit  : F/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;Total ram usage:       16 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    9
 13172 ;; This function calls:
 13173 ;;		_ETH_Copy
 13174 ;;		_ETH_Insert
 13175 ;;		_ETH_SaveRDPT
 13176 ;;		_ETH_TxComputeChecksum
 13177 ;;		_ETH_Write16
 13178 ;;		_IPV4_Send
 13179 ;;		_IPv4_Start
 13180 ;; This function is called by:
 13181 ;;		_ICMP_Receive
 13182 ;; This function uses a non-reentrant model
 13183 ;;
 13184                           
 13185                           	psect	text40
 13186  00474C                     __ptext40:
 13187                           	opt stack 0
 13188  00474C                     _ICMP_EchoReply:
 13189                           	opt stack 17
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;incstack = 0
 13193                           ;ICMP_EchoReply@icmpHdr stored from wreg
 13194  00474C  6F70               	movwf	ICMP_EchoReply@icmpHdr& (0+255),b
 13195                           
 13196                           ;icmp.c: 89: error_msg ret = ERROR;
 13197  00474E  0100               	movlb	0	; () banked
 13198  004750  6B6F               	clrf	ICMP_EchoReply@ret& (0+255),b
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;icmp.c: 91: ret = IPv4_Start(ipv4Hdr->srcIpAddress, ipv4Hdr->protocol);
 13202  004752  EE20 F00C          	lfsr	2,12
 13203  004756  D89B               	call	PL258	;call to abstracted procedure
 13204  004758  CFDE F04A          	movff	postinc2,IPv4_Start@destAddress
 13205  00475C  CFDE F04B          	movff	postinc2,IPv4_Start@destAddress+1
 13206  004760  CFDE F04C          	movff	postinc2,IPv4_Start@destAddress+2
 13207  004764  CFDE F04D          	movff	postinc2,IPv4_Start@destAddress+3
 13208  004768  EE20 F009          	lfsr	2,9
 13209  00476C  D890               	call	PL258	;call to abstracted procedure
 13210  00476E  50DF               	movf	indf2,w,c
 13211  004770  6E4E               	movwf	IPv4_Start@protocol,c
 13212  004772  ECC5  F020         	call	_IPv4_Start	;wreg free
 13213  004776  6F6F               	movwf	ICMP_EchoReply@ret& (0+255),b
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;icmp.c: 92: if(ret == SUCCESS)
 13217  004778  056F               	decf	ICMP_EchoReply@ret& (0+255),w,b
 13218  00477A  E16B               	bnz	l8524
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;icmp.c: 93: {
 13222                           ;icmp.c: 94: uint16_t icmp_cksm_start;
 13223                           ;icmp.c: 95: uint16_t ipv4PayloadLength = ipv4Hdr->length - sizeof(ipv4Header_t);
 13224  00477C  EE20 F002          	lfsr	2,2
 13225  004780  D886               	call	PL258	;call to abstracted procedure
 13226  004782  CFDE F057          	movff	postinc2,??_ICMP_EchoReply
 13227  004786  CFDD F058          	movff	postdec2,??_ICMP_EchoReply+1
 13228  00478A  0EEC               	movlw	236
 13229  00478C  2457               	addwf	??_ICMP_EchoReply,w,c
 13230  00478E  6F6D               	movwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),b
 13231  004790  0EFF               	movlw	255
 13232  004792  2058               	addwfc	??_ICMP_EchoReply+1,w,c
 13233  004794  6F6E               	movwf	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),b
 13234                           
 13235                           ;icmp.c: 97: ipv4PayloadLength = ipv4Hdr->length - (uint16_t)(ipv4Hdr->ihl << 2);
 13236  004796  C067  FFD9         	movff	ICMP_EchoReply@ipv4Hdr,fsr2l
 13237  00479A  C068  FFDA         	movff	ICMP_EchoReply@ipv4Hdr+1,fsr2h
 13238  00479E  50DF               	movf	223,w,c
 13239  0047A0  0B0F               	andlw	15
 13240  0047A2  6E57               	movwf	??_ICMP_EchoReply& (0+255),c
 13241  0047A4  6A58               	clrf	(??_ICMP_EchoReply+1)& (0+255),c
 13242  0047A6  90D8               	bcf	status,0,c
 13243  0047A8  3657               	rlcf	??_ICMP_EchoReply,f,c
 13244  0047AA  3658               	rlcf	??_ICMP_EchoReply+1,f,c
 13245  0047AC  90D8               	bcf	status,0,c
 13246  0047AE  3657               	rlcf	??_ICMP_EchoReply,f,c
 13247  0047B0  3658               	rlcf	??_ICMP_EchoReply+1,f,c
 13248  0047B2  EE20 F002          	lfsr	2,2
 13249  0047B6  D86B               	call	PL258	;call to abstracted procedure
 13250  0047B8  CFDE F059          	movff	postinc2,??_ICMP_EchoReply+2
 13251  0047BC  CFDD F05A          	movff	postdec2,??_ICMP_EchoReply+3
 13252  0047C0  5057               	movf	??_ICMP_EchoReply,w,c
 13253  0047C2  5C59               	subwf	??_ICMP_EchoReply+2,w,c
 13254  0047C4  6F6D               	movwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),b
 13255  0047C6  5058               	movf	??_ICMP_EchoReply+1,w,c
 13256  0047C8  585A               	subwfb	??_ICMP_EchoReply+3,w,c
 13257  0047CA  6F6E               	movwf	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),b
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;icmp.c: 99: ETH_Write16(ECHO_REPLY);
 13261  0047CC  6A04               	clrf	ETH_Write16@data+1,c
 13262  0047CE  6A03               	clrf	ETH_Write16@data,c
 13263  0047D0  ECCD  F02D         	call	_ETH_Write16	;wreg free
 13264                           
 13265                           ;icmp.c: 100: ETH_Write16(0);
 13266  0047D4  6A04               	clrf	ETH_Write16@data+1,c
 13267  0047D6  6A03               	clrf	ETH_Write16@data,c
 13268  0047D8  ECCD  F02D         	call	_ETH_Write16	;wreg free
 13269                           
 13270                           ;icmp.c: 101: ETH_Write16(((((uint16_t)icmpHdr->identifier & (uint16_t)0xFF00) >> 8) | (
      +                          ((uint16_t)icmpHdr->identifier & (uint16_t)0x00FF) << 8)));
 13271  0047DC  D85D               	call	PL360	;call to abstracted procedure
 13272  0047DE  0E04               	movlw	4
 13273  0047E0  D84A               	call	PL182	;call to abstracted procedure
 13274  0047E2  0E04               	movlw	4
 13275  0047E4  D838               	call	PL128	;call to abstracted procedure
 13276  0047E6  ECCD  F02D         	call	_ETH_Write16	;wreg free
 13277                           
 13278                           ;icmp.c: 102: ETH_Write16(((((uint16_t)icmpHdr->sequence & (uint16_t)0xFF00) >> 8) | (((
      +                          uint16_t)icmpHdr->sequence & (uint16_t)0x00FF) << 8)));
 13279  0047EA  D856               	call	PL360	;call to abstracted procedure
 13280  0047EC  0E06               	movlw	6
 13281  0047EE  D843               	call	PL182	;call to abstracted procedure
 13282  0047F0  0E06               	movlw	6
 13283  0047F2  D831               	call	PL128	;call to abstracted procedure
 13284  0047F4  ECCD  F02D         	call	_ETH_Write16	;wreg free
 13285                           
 13286                           ;icmp.c: 105: ret = ETH_Copy(ipv4PayloadLength - sizeof(icmpHeader_t));
 13287  0047F8  0EF8               	movlw	248
 13288  0047FA  0100               	movlb	0	; () banked
 13289  0047FC  256D               	addwf	ICMP_EchoReply@ipv4PayloadLength& (0+255),w,b
 13290  0047FE  6E0A               	movwf	ETH_Copy@len,c
 13291  004800  0EFF               	movlw	255
 13292  004802  216E               	addwfc	(ICMP_EchoReply@ipv4PayloadLength+1)& (0+255),w,b
 13293  004804  6E0B               	movwf	ETH_Copy@len+1,c
 13294  004806  EC72  F025         	call	_ETH_Copy	;wreg free
 13295  00480A  0100               	movlb	0	; () banked
 13296  00480C  6F6F               	movwf	ICMP_EchoReply@ret& (0+255),b
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;icmp.c: 106: if(ret==SUCCESS)
 13300  00480E  056F               	decf	ICMP_EchoReply@ret& (0+255),w,b
 13301  004810  E120               	bnz	l8524
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;icmp.c: 107: {
 13305                           ;icmp.c: 108: ETH_SaveRDPT();
 13306  004812  EC1D  F02F         	call	_ETH_SaveRDPT	;wreg free
 13307                           
 13308                           ;icmp.c: 112: cksm = ETH_TxComputeChecksum(icmp_cksm_start, ipv4PayloadLength, 0);
 13309  004816  6A0B               	clrf	ETH_TxComputeChecksum@position+1,c
 13310  004818  0E22               	movlw	34
 13311  00481A  6E0A               	movwf	ETH_TxComputeChecksum@position,c
 13312  00481C  C06D  F00C         	movff	ICMP_EchoReply@ipv4PayloadLength,ETH_TxComputeChecksum@length
 13313  004820  C06E  F00D         	movff	ICMP_EchoReply@ipv4PayloadLength+1,ETH_TxComputeChecksum@length+1
 13314  004824  6A0F               	clrf	ETH_TxComputeChecksum@seed+1,c
 13315  004826  6A0E               	clrf	ETH_TxComputeChecksum@seed,c
 13316  004828  EC71  F026         	call	_ETH_TxComputeChecksum	;wreg free
 13317  00482C  C00A  F06B         	movff	?_ETH_TxComputeChecksum,ICMP_EchoReply@cksm
 13318  004830  C00B  F06C         	movff	?_ETH_TxComputeChecksum+1,ICMP_EchoReply@cksm+1
 13319                           
 13320                           ;icmp.c: 113: ETH_Insert((char *)&cksm,sizeof(cksm),sizeof(ethernetFrame_t) + sizeof(ipv
      +                          4Header_t) + (int)(((char*)&((icmpHeader_t *)1)->checksum)-1));
 13321  004834  EC28  F02A         	call	PL192	;call to abstracted procedure
 13322  004838  0E24               	movlw	36
 13323  00483A  6E0C               	movwf	ETH_Insert@offset,c
 13324  00483C  0E6B               	movlw	ICMP_EchoReply@cksm& (0+255)
 13325  00483E  EC2D  F02A         	call	_ETH_Insert
 13326                           
 13327                           ;icmp.c: 114: ret = IPV4_Send(ipv4PayloadLength);
 13328  004842  C06D  F018         	movff	ICMP_EchoReply@ipv4PayloadLength,IPV4_Send@payloadLength
 13329  004846  C06E  F019         	movff	ICMP_EchoReply@ipv4PayloadLength+1,IPV4_Send@payloadLength+1
 13330  00484A  ECF7  F029         	call	_IPV4_Send	;wreg free
 13331  00484E  0100               	movlb	0	; () banked
 13332  004850  6F6F               	movwf	ICMP_EchoReply@ret& (0+255),b
 13333  004852                     l8524:
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;icmp.c: 115: }
 13337                           ;icmp.c: 116: }
 13338                           ;icmp.c: 117: return ret;
 13339  004852  516F               	movf	ICMP_EchoReply@ret& (0+255),w,b
 13340                           
 13341                           ; BSR set to: 0
 13342  004854  0012               	return		;funcret
 13343  004856                     __end_of_ICMP_EchoReply:
 13344                           	opt stack 0
 13345  004856                     PL128:
 13346                           	opt stack 17
 13347  004856  26D9               	addwf	fsr2l,f,c
 13348  004858  CFDE F05B          	movff	postinc2,??_ICMP_EchoReply+4
 13349  00485C  CFDD F05C          	movff	postdec2,??_ICMP_EchoReply+5
 13350  004860  C05C  F05B         	movff	??_ICMP_EchoReply+5,??_ICMP_EchoReply+4
 13351  004864  6A5C               	clrf	??_ICMP_EchoReply+5,c
 13352  004866  6A5C               	clrf	??_ICMP_EchoReply+5,c
 13353  004868  5059               	movf	??_ICMP_EchoReply+2,w,c
 13354  00486A  105B               	iorwf	??_ICMP_EchoReply+4,w,c
 13355  00486C  6E03               	movwf	ETH_Write16@data,c
 13356  00486E  505A               	movf	??_ICMP_EchoReply+3,w,c
 13357  004870  105C               	iorwf	??_ICMP_EchoReply+5,w,c
 13358  004872  6E04               	movwf	ETH_Write16@data+1,c
 13359  004874  0012               	return	
 13360  004876                     __end_ofPL128:
 13361                           	opt stack 0
 13362  004876                     PL182:
 13363                           	opt stack 17
 13364  004876  26D9               	addwf	fsr2l,f,c
 13365  004878  CFDE F057          	movff	postinc2,??_ICMP_EchoReply
 13366  00487C  CFDD F058          	movff	postdec2,??_ICMP_EchoReply+1
 13367  004880  5057               	movf	??_ICMP_EchoReply,w,c
 13368  004882  6E5A               	movwf	(??_ICMP_EchoReply+3)& (0+255),c
 13369  004884  6A59               	clrf	(??_ICMP_EchoReply+2)& (0+255),c
 13370  004886  5170               	movf	ICMP_EchoReply@icmpHdr& (0+255),w,b
 13371  004888  6ED9               	movwf	fsr2l,c
 13372  00488A  6ADA               	clrf	fsr2h,c
 13373  00488C  0012               	return	
 13374  00488E                     __end_ofPL182:
 13375                           	opt stack 0
 13376  00488E                     PL258:
 13377                           	opt stack 17
 13378  00488E  5167               	movf	ICMP_EchoReply@ipv4Hdr& (0+255),w,b
 13379  004890  26D9               	addwf	fsr2l,f,c
 13380  004892  5168               	movf	(ICMP_EchoReply@ipv4Hdr+1)& (0+255),w,b
 13381  004894  22DA               	addwfc	fsr2h,f,c
 13382  004896  0012               	return	
 13383  004898                     __end_ofPL258:
 13384                           	opt stack 0
 13385  004898                     PL360:
 13386                           	opt stack 17
 13387  004898  0100               	movlb	0	; () banked
 13388  00489A  5170               	movf	ICMP_EchoReply@icmpHdr& (0+255),w,b
 13389  00489C  6ED9               	movwf	fsr2l,c
 13390  00489E  6ADA               	clrf	fsr2h,c
 13391  0048A0  0012               	return	
 13392  0048A2                     __end_ofPL360:
 13393                           	opt stack 0
 13394                           tosu	equ	0xFFF
 13395                           tosh	equ	0xFFE
 13396                           tosl	equ	0xFFD
 13397                           pclath	equ	0xFFA
 13398                           tblptru	equ	0xFF8
 13399                           tblptrh	equ	0xFF7
 13400                           tblptrl	equ	0xFF6
 13401                           tablat	equ	0xFF5
 13402                           prodh	equ	0xFF4
 13403                           prodl	equ	0xFF3
 13404                           intcon	equ	0xFF2
 13405                           indf0	equ	0xFEF
 13406                           postinc0	equ	0xFEE
 13407                           fsr0h	equ	0xFEA
 13408                           fsr0l	equ	0xFE9
 13409                           wreg	equ	0xFE8
 13410                           postinc1	equ	0xFE6
 13411                           plusw1	equ	0xFE3
 13412                           fsr1h	equ	0xFE2
 13413                           fsr1l	equ	0xFE1
 13414                           bsr	equ	0xFE0
 13415                           indf2	equ	0xFDF
 13416                           postinc2	equ	0xFDE
 13417                           postdec2	equ	0xFDD
 13418                           plusw2	equ	0xFDB
 13419                           fsr2h	equ	0xFDA
 13420                           fsr2l	equ	0xFD9
 13421                           status	equ	0xFD8
 13422                           
 13423 ;; *************** function _ETH_SaveRDPT *****************
 13424 ;; Defined at:
 13425 ;;		line 875 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;		None
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;		None
 13430 ;; Return value:  Size  Location     Type
 13431 ;;		None               void
 13432 ;; Registers used:
 13433 ;;		wreg, status,2, status,0, cstack
 13434 ;; Tracked objects:
 13435 ;;		On entry : 0/0
 13436 ;;		On exit  : 0/0
 13437 ;;		Unchanged: 0/0
 13438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13443 ;;Total ram usage:        0 bytes
 13444 ;; Hardware stack levels used:    1
 13445 ;; Hardware stack levels required when called:    6
 13446 ;; This function calls:
 13447 ;;		_ENC28_Rcr16
 13448 ;; This function is called by:
 13449 ;;		_ICMP_Receive
 13450 ;;		_ICMP_EchoReply
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           	psect	text41
 13455  005E3A                     __ptext41:
 13456                           	opt stack 0
 13457  005E3A                     _ETH_SaveRDPT:
 13458                           	opt stack 19
 13459                           
 13460                           ;enc28J60.c: 877: ethData.saveRDPT = ENC28_Rcr16(J60_ERDPTL);
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;incstack = 0
 13464  005E3A  0E00               	movlw	0
 13465  005E3C  EC25  F02C         	call	_ENC28_Rcr16
 13466  005E40  C005  F1B8         	movff	?_ENC28_Rcr16,_ethData+3	;volatile
 13467  005E44  C006  F1B9         	movff	?_ENC28_Rcr16+1,_ethData+4	;volatile
 13468  005E48  0012               	return		;funcret
 13469  005E4A                     __end_of_ETH_SaveRDPT:
 13470                           	opt stack 0
 13471                           tosu	equ	0xFFF
 13472                           tosh	equ	0xFFE
 13473                           tosl	equ	0xFFD
 13474                           pclath	equ	0xFFA
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           intcon	equ	0xFF2
 13482                           indf0	equ	0xFEF
 13483                           postinc0	equ	0xFEE
 13484                           fsr0h	equ	0xFEA
 13485                           fsr0l	equ	0xFE9
 13486                           wreg	equ	0xFE8
 13487                           postinc1	equ	0xFE6
 13488                           plusw1	equ	0xFE3
 13489                           fsr1h	equ	0xFE2
 13490                           fsr1l	equ	0xFE1
 13491                           bsr	equ	0xFE0
 13492                           indf2	equ	0xFDF
 13493                           postinc2	equ	0xFDE
 13494                           postdec2	equ	0xFDD
 13495                           plusw2	equ	0xFDB
 13496                           fsr2h	equ	0xFDA
 13497                           fsr2l	equ	0xFD9
 13498                           status	equ	0xFD8
 13499                           
 13500 ;; *************** function _ETH_Copy *****************
 13501 ;; Defined at:
 13502 ;;		line 698 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  len             2    9[COMRAM] unsigned int 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  temp_len        2   16[COMRAM] unsigned int 
 13507 ;;  timer           2   14[COMRAM] unsigned int 
 13508 ;;  tx_buffer_ad    2   12[COMRAM] unsigned int 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  1    wreg      enum E7076
 13511 ;; Registers used:
 13512 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : F/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;Total ram usage:        9 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    6
 13525 ;; This function calls:
 13526 ;;		_ENC28_Bfc
 13527 ;;		_ENC28_Bfs
 13528 ;;		_ENC28_Rcr16
 13529 ;;		_ENC28_Rcr8
 13530 ;;		_ENC28_Wcr16
 13531 ;;		___wmul
 13532 ;; This function is called by:
 13533 ;;		_ICMP_EchoReply
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text42
 13538  004AE4                     __ptext42:
 13539                           	opt stack 0
 13540  004AE4                     _ETH_Copy:
 13541                           	opt stack 19
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;enc28J60.c: 700: uint16_t tx_buffer_address;
 13545                           ;enc28J60.c: 701: uint16_t timer;
 13546                           ;enc28J60.c: 702: uint16_t temp_len;
 13547                           ;enc28J60.c: 704: timer = 2 * len;
 13548                           
 13549                           ;incstack = 0
 13550  004AE4  90D8               	bcf	status,0,c
 13551  004AE6  340A               	rlcf	ETH_Copy@len,w,c
 13552  004AE8  6E0F               	movwf	ETH_Copy@timer,c
 13553  004AEA  340B               	rlcf	ETH_Copy@len+1,w,c
 13554  004AEC  6E10               	movwf	ETH_Copy@timer+1,c
 13555                           
 13556                           ;enc28J60.c: 706: while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer) __nop();
 13557  004AEE  D001               	goto	l8376
 13558  004AF0                     l614:
 13559  004AF0  F000               	nop	
 13560  004AF2                     l8376:
 13561  004AF2  0EFF               	movlw	255
 13562  004AF4  EC33  F02E         	call	_ENC28_Rcr8
 13563  004AF8  6E0C               	movwf	??_ETH_Copy& (0+255),c
 13564  004AFA  AA0C               	btfss	??_ETH_Copy,5,c
 13565  004AFC  D002               	goto	l8380
 13566  004AFE  D865               	call	PL310	;call to abstracted procedure
 13567  004B00  E1F7               	bnz	l614
 13568  004B02                     l8380:
 13569                           
 13570                           ;enc28J60.c: 708: if((ENC28_Rcr8(J60_ECON1) & 0x20) == 0)
 13571  004B02  0EFF               	movlw	255
 13572  004B04  EC33  F02E         	call	_ENC28_Rcr8
 13573  004B08  6E0C               	movwf	??_ETH_Copy& (0+255),c
 13574  004B0A  BA0C               	btfsc	??_ETH_Copy,5,c
 13575  004B0C  D05C               	goto	l618
 13576                           
 13577                           ;enc28J60.c: 709: {
 13578                           ;enc28J60.c: 710: tx_buffer_address = ENC28_Rcr16(J60_EWRPTL);
 13579  004B0E  0E02               	movlw	2
 13580  004B10  EC25  F02C         	call	_ENC28_Rcr16
 13581  004B14  C005  F00D         	movff	?_ENC28_Rcr16,ETH_Copy@tx_buffer_address
 13582  004B18  C006  F00E         	movff	?_ENC28_Rcr16+1,ETH_Copy@tx_buffer_address+1
 13583                           
 13584                           ;enc28J60.c: 712: ENC28_Wcr16(J60_EDMADSTL, tx_buffer_address);
 13585  004B1C  D861               	call	PL348	;call to abstracted procedure
 13586  004B1E  0E14               	movlw	20
 13587  004B20  EC9A  F02C         	call	_ENC28_Wcr16
 13588                           
 13589                           ;enc28J60.c: 713: ENC28_Wcr16(J60_EDMASTL, ethData.saveRDPT);
 13590  004B24  C1B8  F005         	movff	_ethData+3,ENC28_Wcr16@v	;volatile
 13591  004B28  C1B9  F006         	movff	_ethData+4,ENC28_Wcr16@v+1	;volatile
 13592  004B2C  0E10               	movlw	16
 13593  004B2E  EC9A  F02C         	call	_ENC28_Wcr16
 13594                           
 13595                           ;enc28J60.c: 715: tx_buffer_address += len;
 13596  004B32  500A               	movf	ETH_Copy@len,w,c
 13597  004B34  260D               	addwf	ETH_Copy@tx_buffer_address,f,c
 13598  004B36  500B               	movf	ETH_Copy@len+1,w,c
 13599  004B38  220E               	addwfc	ETH_Copy@tx_buffer_address+1,f,c
 13600                           
 13601                           ;enc28J60.c: 716: temp_len = ethData.saveRDPT + len;
 13602  004B3A  500A               	movf	ETH_Copy@len,w,c
 13603  004B3C  0101               	movlb	1	; () banked
 13604  004B3E  25B8               	addwf	(_ethData+3)& (0+255),w,b	;volatile
 13605  004B40  6E11               	movwf	ETH_Copy@temp_len,c
 13606  004B42  500B               	movf	ETH_Copy@len+1,w,c
 13607  004B44  21B9               	addwfc	(_ethData+4)& (0+255),w,b	;volatile
 13608  004B46  6E12               	movwf	ETH_Copy@temp_len+1,c
 13609                           
 13610                           ; BSR set to: 1
 13611                           ;enc28J60.c: 718: if(temp_len > ((0x1FFF - (1500)) - 2))
 13612  004B48  0E22               	movlw	34
 13613  004B4A  5C11               	subwf	ETH_Copy@temp_len,w,c
 13614  004B4C  0E1A               	movlw	26
 13615  004B4E  5812               	subwfb	ETH_Copy@temp_len+1,w,c
 13616  004B50  E308               	bnc	l8394
 13617                           
 13618                           ; BSR set to: 1
 13619                           ;enc28J60.c: 719: {
 13620                           ;enc28J60.c: 720: temp_len = temp_len - (((0x1FFF - (1500)) - 2)) + (0);
 13621  004B52  0EDF               	movlw	223
 13622  004B54  2611               	addwf	ETH_Copy@temp_len,f,c
 13623  004B56  0EE5               	movlw	229
 13624  004B58  2212               	addwfc	ETH_Copy@temp_len+1,f,c
 13625                           
 13626                           ; BSR set to: 1
 13627                           ;enc28J60.c: 721: ENC28_Wcr16(J60_EDMANDL, temp_len);
 13628  004B5A  D83D               	call	PL312	;call to abstracted procedure
 13629  004B5C  EC9A  F02C         	call	_ENC28_Wcr16
 13630                           
 13631                           ;enc28J60.c: 722: }else
 13632  004B60  D003               	goto	l620
 13633  004B62                     l8394:
 13634                           
 13635                           ; BSR set to: 1
 13636                           ;enc28J60.c: 723: {
 13637                           ;enc28J60.c: 724: ENC28_Wcr16(J60_EDMANDL, temp_len);
 13638  004B62  D839               	call	PL312	;call to abstracted procedure
 13639  004B64  EC9A  F02C         	call	_ENC28_Wcr16
 13640  004B68                     l620:
 13641                           
 13642                           ;enc28J60.c: 725: }
 13643                           ;enc28J60.c: 728: ENC28_Bfc(J60_ECON1, 0x10);
 13644  004B68  D840               	call	PL376	;call to abstracted procedure
 13645  004B6A  EC61  F02E         	call	_ENC28_Bfc
 13646                           
 13647                           ;enc28J60.c: 730: ENC28_Bfs(J60_ECON1, 0x20);
 13648  004B6E  0E20               	movlw	32
 13649  004B70  6E05               	movwf	ENC28_Bfs@bits,c
 13650  004B72  0EFF               	movlw	255
 13651  004B74  EC70  F02E         	call	_ENC28_Bfs
 13652                           
 13653                           ;enc28J60.c: 731: timer = 40 * len;
 13654  004B78  C00A  F002         	movff	ETH_Copy@len,___wmul@multiplier
 13655  004B7C  C00B  F003         	movff	ETH_Copy@len+1,___wmul@multiplier+1
 13656  004B80  6A05               	clrf	___wmul@multiplicand+1,c
 13657  004B82  0E28               	movlw	40
 13658  004B84  6E04               	movwf	___wmul@multiplicand,c
 13659  004B86  ECBA  F02D         	call	___wmul	;wreg free
 13660  004B8A  C002  F00F         	movff	?___wmul,ETH_Copy@timer
 13661  004B8E  C003  F010         	movff	?___wmul+1,ETH_Copy@timer+1
 13662                           
 13663                           ;enc28J60.c: 732: while ((ENC28_Rcr8(J60_ECON1) & 0x20)!=0 && --timer) __nop();
 13664  004B92  D001               	goto	l8398
 13665  004B94                     l622:
 13666  004B94  F000               	nop	
 13667  004B96                     l8398:
 13668  004B96  0EFF               	movlw	255
 13669  004B98  EC33  F02E         	call	_ENC28_Rcr8
 13670  004B9C  6E0C               	movwf	??_ETH_Copy& (0+255),c
 13671  004B9E  AA0C               	btfss	??_ETH_Copy,5,c
 13672  004BA0  D002               	goto	l8402
 13673  004BA2  D813               	call	PL310	;call to abstracted procedure
 13674  004BA4  E1F7               	bnz	l622
 13675  004BA6                     l8402:
 13676                           
 13677                           ;enc28J60.c: 733: if((ENC28_Rcr8(J60_ECON1) & 0x20)==0)
 13678  004BA6  0EFF               	movlw	255
 13679  004BA8  EC33  F02E         	call	_ENC28_Rcr8
 13680  004BAC  6E0C               	movwf	??_ETH_Copy& (0+255),c
 13681  004BAE  BA0C               	btfsc	??_ETH_Copy,5,c
 13682  004BB0  D00A               	goto	l618
 13683                           
 13684                           ;enc28J60.c: 734: {
 13685                           ;enc28J60.c: 736: ENC28_Wcr16(J60_EWRPTL, tx_buffer_address);
 13686  004BB2  D816               	call	PL348	;call to abstracted procedure
 13687  004BB4  0E02               	movlw	2
 13688  004BB6  EC9A  F02C         	call	_ENC28_Wcr16
 13689                           
 13690                           ;enc28J60.c: 738: TXPacketSize += len;
 13691  004BBA  500A               	movf	ETH_Copy@len,w,c
 13692  004BBC  0101               	movlb	1	; () banked
 13693  004BBE  27D3               	addwf	_TXPacketSize& (0+255),f,b
 13694  004BC0  500B               	movf	ETH_Copy@len+1,w,c
 13695  004BC2  23D4               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 13696                           
 13697                           ; BSR set to: 1
 13698                           ;enc28J60.c: 739: return SUCCESS;
 13699  004BC4  0C01               	retlw	1
 13700  004BC6                     l618:
 13701  004BC6  00FF               	reset		;# 
 13702                           
 13703                           ;enc28J60.c: 743: return DMA_TIMEOUT;
 13704  004BC8  0C0C               	retlw	12	;funcret
 13705  004BCA                     __end_of_ETH_Copy:
 13706                           	opt stack 0
 13707  004BCA                     PL310:
 13708                           	opt stack 19
 13709  004BCA  060F               	decf	ETH_Copy@timer,f,c
 13710  004BCC  A0D8               	btfss	status,0,c
 13711  004BCE  0610               	decf	ETH_Copy@timer+1,f,c
 13712  004BD0  500F               	movf	ETH_Copy@timer,w,c
 13713  004BD2  1010               	iorwf	ETH_Copy@timer+1,w,c
 13714  004BD4  0012               	return	
 13715  004BD6                     __end_ofPL310:
 13716                           	opt stack 0
 13717  004BD6                     PL312:
 13718                           	opt stack 19
 13719  004BD6  C011  F005         	movff	ETH_Copy@temp_len,ENC28_Wcr16@v
 13720  004BDA  C012  F006         	movff	ETH_Copy@temp_len+1,ENC28_Wcr16@v+1
 13721  004BDE  0C12               	retlw	18
 13722  004BE0                     __end_ofPL312:
 13723                           	opt stack 0
 13724  004BE0                     PL348:
 13725                           	opt stack 19
 13726  004BE0  C00D  F005         	movff	ETH_Copy@tx_buffer_address,ENC28_Wcr16@v
 13727  004BE4  C00E  F006         	movff	ETH_Copy@tx_buffer_address+1,ENC28_Wcr16@v+1
 13728  004BE8  0012               	return	
 13729  004BEA                     __end_ofPL348:
 13730                           	opt stack 0
 13731  004BEA                     PL376:
 13732                           	opt stack 19
 13733  004BEA  0E10               	movlw	16
 13734  004BEC  6E05               	movwf	ENC28_Bfc@bits,c
 13735  004BEE  0CFF               	retlw	255
 13736  004BF0                     __end_ofPL376:
 13737                           	opt stack 0
 13738                           tosu	equ	0xFFF
 13739                           tosh	equ	0xFFE
 13740                           tosl	equ	0xFFD
 13741                           pclath	equ	0xFFA
 13742                           tblptru	equ	0xFF8
 13743                           tblptrh	equ	0xFF7
 13744                           tblptrl	equ	0xFF6
 13745                           tablat	equ	0xFF5
 13746                           prodh	equ	0xFF4
 13747                           prodl	equ	0xFF3
 13748                           intcon	equ	0xFF2
 13749                           indf0	equ	0xFEF
 13750                           postinc0	equ	0xFEE
 13751                           fsr0h	equ	0xFEA
 13752                           fsr0l	equ	0xFE9
 13753                           wreg	equ	0xFE8
 13754                           postinc1	equ	0xFE6
 13755                           plusw1	equ	0xFE3
 13756                           fsr1h	equ	0xFE2
 13757                           fsr1l	equ	0xFE1
 13758                           bsr	equ	0xFE0
 13759                           indf2	equ	0xFDF
 13760                           postinc2	equ	0xFDE
 13761                           postdec2	equ	0xFDD
 13762                           plusw2	equ	0xFDB
 13763                           fsr2h	equ	0xFDA
 13764                           fsr2l	equ	0xFD9
 13765                           status	equ	0xFD8
 13766                           
 13767 ;; *************** function ___wmul *****************
 13768 ;; Defined at:
 13769 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
 13770 ;; Parameters:    Size  Location     Type
 13771 ;;  multiplier      2    1[COMRAM] unsigned int 
 13772 ;;  multiplicand    2    3[COMRAM] unsigned int 
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;  product         2    5[COMRAM] unsigned int 
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  2    1[COMRAM] unsigned int 
 13777 ;; Registers used:
 13778 ;;		wreg, status,2, status,0, prodl, prodh
 13779 ;; Tracked objects:
 13780 ;;		On entry : 0/1
 13781 ;;		On exit  : 0/0
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13788 ;;Total ram usage:        6 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    3
 13791 ;; This function calls:
 13792 ;;		Nothing
 13793 ;; This function is called by:
 13794 ;;		_ETH_Copy
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text43
 13799  005B74                     __ptext43:
 13800                           	opt stack 0
 13801  005B74                     ___wmul:
 13802                           	opt stack 21
 13803                           
 13804                           ;incstack = 0
 13805  005B74  5002               	movf	___wmul@multiplier,w,c
 13806  005B76  0204               	mulwf	___wmul@multiplicand,c
 13807  005B78  CFF3 F006          	movff	prodl,___wmul@product
 13808  005B7C  CFF4 F007          	movff	prodh,___wmul@product+1
 13809  005B80  5002               	movf	___wmul@multiplier,w,c
 13810  005B82  0205               	mulwf	___wmul@multiplicand+1,c
 13811  005B84  50F3               	movf	prodl,w,c
 13812  005B86  2607               	addwf	___wmul@product+1,f,c
 13813  005B88  5003               	movf	___wmul@multiplier+1,w,c
 13814  005B8A  0204               	mulwf	___wmul@multiplicand,c
 13815  005B8C  50F3               	movf	prodl,w,c
 13816  005B8E  2607               	addwf	___wmul@product+1,f,c
 13817  005B90  C006  F002         	movff	___wmul@product,?___wmul
 13818  005B94  C007  F003         	movff	___wmul@product+1,?___wmul+1
 13819  005B98  0012               	return		;funcret
 13820  005B9A                     __end_of___wmul:
 13821                           	opt stack 0
 13822                           tosu	equ	0xFFF
 13823                           tosh	equ	0xFFE
 13824                           tosl	equ	0xFFD
 13825                           pclath	equ	0xFFA
 13826                           tblptru	equ	0xFF8
 13827                           tblptrh	equ	0xFF7
 13828                           tblptrl	equ	0xFF6
 13829                           tablat	equ	0xFF5
 13830                           prodh	equ	0xFF4
 13831                           prodl	equ	0xFF3
 13832                           intcon	equ	0xFF2
 13833                           indf0	equ	0xFEF
 13834                           postinc0	equ	0xFEE
 13835                           fsr0h	equ	0xFEA
 13836                           fsr0l	equ	0xFE9
 13837                           wreg	equ	0xFE8
 13838                           postinc1	equ	0xFE6
 13839                           plusw1	equ	0xFE3
 13840                           fsr1h	equ	0xFE2
 13841                           fsr1l	equ	0xFE1
 13842                           bsr	equ	0xFE0
 13843                           indf2	equ	0xFDF
 13844                           postinc2	equ	0xFDE
 13845                           postdec2	equ	0xFDD
 13846                           plusw2	equ	0xFDB
 13847                           fsr2h	equ	0xFDA
 13848                           fsr2l	equ	0xFD9
 13849                           status	equ	0xFD8
 13850                           
 13851 ;; *************** function _ETH_RxComputeChecksum *****************
 13852 ;; Defined at:
 13853 ;;		line 830 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  len             2   17[COMRAM] unsigned int 
 13856 ;;  seed            2   19[COMRAM] unsigned int 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  cksm            4   27[COMRAM] unsigned long 
 13859 ;;  rxptr           2   25[COMRAM] unsigned int 
 13860 ;; Return value:  Size  Location     Type
 13861 ;;                  2   17[COMRAM] unsigned int 
 13862 ;; Registers used:
 13863 ;;		wreg, status,2, status,0, cstack
 13864 ;; Tracked objects:
 13865 ;;		On entry : F/0
 13866 ;;		On exit  : 0/0
 13867 ;;		Unchanged: 0/0
 13868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13870 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13871 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;Total ram usage:       14 bytes
 13874 ;; Hardware stack levels used:    1
 13875 ;; Hardware stack levels required when called:    6
 13876 ;; This function calls:
 13877 ;;		_ENC28_Rcr16
 13878 ;;		_ENC28_Wcr16
 13879 ;;		_ETH_ComputeChecksum
 13880 ;; This function is called by:
 13881 ;;		_IPV4_Packet
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           	psect	text44
 13886  0054B6                     __ptext44:
 13887                           	opt stack 0
 13888  0054B6                     _ETH_RxComputeChecksum:
 13889                           	opt stack 21
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;enc28J60.c: 832: uint16_t rxptr;
 13893                           ;enc28J60.c: 833: uint32_t cksm;
 13894                           ;enc28J60.c: 836: rxptr = ENC28_Rcr16(J60_ERDPTL);;
 13895                           
 13896                           ;incstack = 0
 13897  0054B6  0E00               	movlw	0
 13898  0054B8  EC25  F02C         	call	_ENC28_Rcr16
 13899  0054BC  C005  F01A         	movff	?_ENC28_Rcr16,ETH_RxComputeChecksum@rxptr
 13900  0054C0  C006  F01B         	movff	?_ENC28_Rcr16+1,ETH_RxComputeChecksum@rxptr+1
 13901                           
 13902                           ;enc28J60.c: 838: cksm = ETH_ComputeChecksum( len, seed);
 13903  0054C4  C012  F004         	movff	ETH_RxComputeChecksum@len,ETH_ComputeChecksum@len
 13904  0054C8  C013  F005         	movff	ETH_RxComputeChecksum@len+1,ETH_ComputeChecksum@len+1
 13905  0054CC  C014  F006         	movff	ETH_RxComputeChecksum@seed,ETH_ComputeChecksum@seed
 13906  0054D0  C015  F007         	movff	ETH_RxComputeChecksum@seed+1,ETH_ComputeChecksum@seed+1
 13907  0054D4  EC28  F028         	call	_ETH_ComputeChecksum	;wreg free
 13908  0054D8  C004  F01C         	movff	?_ETH_ComputeChecksum,ETH_RxComputeChecksum@cksm
 13909  0054DC  C005  F01D         	movff	?_ETH_ComputeChecksum+1,ETH_RxComputeChecksum@cksm+1
 13910  0054E0  6A1E               	clrf	ETH_RxComputeChecksum@cksm+2,c
 13911  0054E2  6A1F               	clrf	ETH_RxComputeChecksum@cksm+3,c
 13912                           
 13913                           ;enc28J60.c: 841: ENC28_Wcr16(J60_ERDPTL,rxptr);
 13914  0054E4  C01A  F005         	movff	ETH_RxComputeChecksum@rxptr,ENC28_Wcr16@v
 13915  0054E8  C01B  F006         	movff	ETH_RxComputeChecksum@rxptr+1,ENC28_Wcr16@v+1
 13916  0054EC  0E00               	movlw	0
 13917  0054EE  EC9A  F02C         	call	_ENC28_Wcr16
 13918                           
 13919                           ;enc28J60.c: 844: return ((cksm & 0xFF00) >> 8) | ((cksm & 0x00FF) << 8);
 13920  0054F2  501C               	movf	ETH_RxComputeChecksum@cksm,w,c
 13921  0054F4  6E17               	movwf	(??_ETH_RxComputeChecksum+1)& (0+255),c
 13922  0054F6  6A16               	clrf	??_ETH_RxComputeChecksum& (0+255),c
 13923  0054F8  501D               	movf	ETH_RxComputeChecksum@cksm+1,w,c
 13924  0054FA  6E18               	movwf	(??_ETH_RxComputeChecksum+2)& (0+255),c
 13925  0054FC  6A19               	clrf	(??_ETH_RxComputeChecksum+3)& (0+255),c
 13926  0054FE  1016               	iorwf	??_ETH_RxComputeChecksum,w,c
 13927  005500  6E12               	movwf	?_ETH_RxComputeChecksum,c
 13928  005502  5017               	movf	??_ETH_RxComputeChecksum+1,w,c
 13929  005504  1019               	iorwf	??_ETH_RxComputeChecksum+3,w,c
 13930  005506  6E13               	movwf	?_ETH_RxComputeChecksum+1,c
 13931  005508  0012               	return		;funcret
 13932  00550A                     __end_of_ETH_RxComputeChecksum:
 13933                           	opt stack 0
 13934                           tosu	equ	0xFFF
 13935                           tosh	equ	0xFFE
 13936                           tosl	equ	0xFFD
 13937                           pclath	equ	0xFFA
 13938                           tblptru	equ	0xFF8
 13939                           tblptrh	equ	0xFF7
 13940                           tblptrl	equ	0xFF6
 13941                           tablat	equ	0xFF5
 13942                           prodh	equ	0xFF4
 13943                           prodl	equ	0xFF3
 13944                           intcon	equ	0xFF2
 13945                           indf0	equ	0xFEF
 13946                           postinc0	equ	0xFEE
 13947                           fsr0h	equ	0xFEA
 13948                           fsr0l	equ	0xFE9
 13949                           wreg	equ	0xFE8
 13950                           postinc1	equ	0xFE6
 13951                           plusw1	equ	0xFE3
 13952                           fsr1h	equ	0xFE2
 13953                           fsr1l	equ	0xFE1
 13954                           bsr	equ	0xFE0
 13955                           indf2	equ	0xFDF
 13956                           postinc2	equ	0xFDE
 13957                           postdec2	equ	0xFDD
 13958                           plusw2	equ	0xFDB
 13959                           fsr2h	equ	0xFDA
 13960                           fsr2l	equ	0xFD9
 13961                           status	equ	0xFD8
 13962                           
 13963 ;; *************** function _ETH_ComputeChecksum *****************
 13964 ;; Defined at:
 13965 ;;		line 747 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 13966 ;; Parameters:    Size  Location     Type
 13967 ;;  len             2    3[COMRAM] unsigned int 
 13968 ;;  seed            2    5[COMRAM] unsigned int 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  cksm            4   11[COMRAM] unsigned long 
 13971 ;;  v               2   15[COMRAM] unsigned int 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  2    3[COMRAM] unsigned int 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0, cstack
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13981 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13982 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13983 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13985 ;;Total ram usage:       14 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    5
 13988 ;; This function calls:
 13989 ;;		_ETH_Read8
 13990 ;; This function is called by:
 13991 ;;		_ETH_RxComputeChecksum
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           	psect	text45
 13996  005050                     __ptext45:
 13997                           	opt stack 0
 13998  005050                     _ETH_ComputeChecksum:
 13999                           	opt stack 21
 14000                           
 14001                           ;enc28J60.c: 749: uint32_t cksm;
 14002                           ;enc28J60.c: 750: uint16_t v;
 14003                           ;enc28J60.c: 752: cksm = seed;
 14004                           
 14005                           ;incstack = 0
 14006  005050  C006  F00C         	movff	ETH_ComputeChecksum@seed,ETH_ComputeChecksum@cksm
 14007  005054  C007  F00D         	movff	ETH_ComputeChecksum@seed+1,ETH_ComputeChecksum@cksm+1
 14008  005058  6A0E               	clrf	ETH_ComputeChecksum@cksm+2,c
 14009  00505A  6A0F               	clrf	ETH_ComputeChecksum@cksm+3,c
 14010                           
 14011                           ;enc28J60.c: 754: while(len > 1)
 14012  00505C  D00D               	goto	l8466
 14013  00505E                     l631:
 14014                           
 14015                           ;enc28J60.c: 755: {
 14016                           ;enc28J60.c: 756: v = 0;
 14017  00505E  6A10               	clrf	ETH_ComputeChecksum@v,c
 14018  005060  6A11               	clrf	ETH_ComputeChecksum@v+1,c
 14019                           
 14020                           ;enc28J60.c: 757: ((char *)&v)[1] = ETH_Read8();
 14021  005062  ECFE  F02E         	call	_ETH_Read8	;wreg free
 14022  005066  6E11               	movwf	ETH_ComputeChecksum@v+1,c
 14023                           
 14024                           ;enc28J60.c: 758: ((char *)&v)[0] = ETH_Read8();
 14025  005068  ECFE  F02E         	call	_ETH_Read8	;wreg free
 14026  00506C  6E10               	movwf	ETH_ComputeChecksum@v,c
 14027                           
 14028                           ;enc28J60.c: 759: cksm += v;
 14029  00506E  D832               	call	PL220	;call to abstracted procedure
 14030                           
 14031                           ;enc28J60.c: 760: len -= 2;
 14032  005070  0E02               	movlw	2
 14033  005072  5E04               	subwf	ETH_ComputeChecksum@len,f,c
 14034  005074  0E00               	movlw	0
 14035  005076  5A05               	subwfb	ETH_ComputeChecksum@len+1,f,c
 14036  005078                     l8466:
 14037  005078  5005               	movf	ETH_ComputeChecksum@len+1,w,c
 14038  00507A  E1F1               	bnz	l631
 14039  00507C  0E02               	movlw	2
 14040  00507E  5C04               	subwf	ETH_ComputeChecksum@len,w,c
 14041  005080  E2EE               	bc	l631
 14042                           
 14043                           ;enc28J60.c: 761: }
 14044                           ;enc28J60.c: 763: if(len)
 14045  005082  5004               	movf	ETH_ComputeChecksum@len,w,c
 14046  005084  1005               	iorwf	ETH_ComputeChecksum@len+1,w,c
 14047  005086  E01A               	bz	l634
 14048                           
 14049                           ;enc28J60.c: 764: {
 14050                           ;enc28J60.c: 765: v = 0;
 14051  005088  6A10               	clrf	ETH_ComputeChecksum@v,c
 14052  00508A  6A11               	clrf	ETH_ComputeChecksum@v+1,c
 14053                           
 14054                           ;enc28J60.c: 766: ((char *)&v)[1] = ETH_Read8();
 14055  00508C  ECFE  F02E         	call	_ETH_Read8	;wreg free
 14056  005090  6E11               	movwf	ETH_ComputeChecksum@v+1,c
 14057                           
 14058                           ;enc28J60.c: 767: ((char *)&v)[0] = 0;
 14059  005092  6A10               	clrf	ETH_ComputeChecksum@v,c
 14060                           
 14061                           ;enc28J60.c: 768: cksm += v;
 14062  005094  D81F               	call	PL220	;call to abstracted procedure
 14063  005096  D012               	goto	l634
 14064  005098                     l8478:
 14065                           
 14066                           ;enc28J60.c: 773: {
 14067                           ;enc28J60.c: 774: cksm = (cksm & 0x0FFFF) + (cksm>>16);
 14068  005098  500C               	movf	ETH_ComputeChecksum@cksm,w,c
 14069  00509A  6E08               	movwf	??_ETH_ComputeChecksum& (0+255),c
 14070  00509C  500D               	movf	ETH_ComputeChecksum@cksm+1,w,c
 14071  00509E  6E09               	movwf	(??_ETH_ComputeChecksum+1)& (0+255),c
 14072  0050A0  6A0A               	clrf	(??_ETH_ComputeChecksum+2)& (0+255),c
 14073  0050A2  6A0B               	clrf	(??_ETH_ComputeChecksum+3)& (0+255),c
 14074  0050A4  500E               	movf	ETH_ComputeChecksum@cksm+2,w,c
 14075  0050A6  2408               	addwf	??_ETH_ComputeChecksum,w,c
 14076  0050A8  6E0C               	movwf	ETH_ComputeChecksum@cksm,c
 14077  0050AA  500F               	movf	ETH_ComputeChecksum@cksm+3,w,c
 14078  0050AC  2009               	addwfc	??_ETH_ComputeChecksum+1,w,c
 14079  0050AE  6E0D               	movwf	ETH_ComputeChecksum@cksm+1,c
 14080  0050B0  0E00               	movlw	0
 14081  0050B2  200A               	addwfc	??_ETH_ComputeChecksum+2,w,c
 14082  0050B4  6E0E               	movwf	ETH_ComputeChecksum@cksm+2,c
 14083  0050B6  0E00               	movlw	0
 14084  0050B8  200B               	addwfc	??_ETH_ComputeChecksum+3,w,c
 14085  0050BA  6E0F               	movwf	ETH_ComputeChecksum@cksm+3,c
 14086  0050BC                     l634:
 14087  0050BC  500E               	movf	ETH_ComputeChecksum@cksm+2,w,c
 14088  0050BE  100F               	iorwf	ETH_ComputeChecksum@cksm+3,w,c
 14089  0050C0  E1EB               	bnz	l8478
 14090                           
 14091                           ;enc28J60.c: 775: }
 14092                           ;enc28J60.c: 778: cksm = ~cksm;
 14093  0050C2  1E0C               	comf	ETH_ComputeChecksum@cksm,f,c
 14094  0050C4  1E0D               	comf	ETH_ComputeChecksum@cksm+1,f,c
 14095  0050C6  1E0E               	comf	ETH_ComputeChecksum@cksm+2,f,c
 14096  0050C8  1E0F               	comf	ETH_ComputeChecksum@cksm+3,f,c
 14097                           
 14098                           ;enc28J60.c: 781: return cksm;
 14099  0050CA  C00C  F004         	movff	ETH_ComputeChecksum@cksm,?_ETH_ComputeChecksum
 14100  0050CE  C00D  F005         	movff	ETH_ComputeChecksum@cksm+1,?_ETH_ComputeChecksum+1
 14101  0050D2  0CFF               	retlw	255	;funcret
 14102  0050D4                     __end_of_ETH_ComputeChecksum:
 14103                           	opt stack 0
 14104  0050D4                     PL220:
 14105                           	opt stack 21
 14106  0050D4  5010               	movf	ETH_ComputeChecksum@v,w,c
 14107  0050D6  260C               	addwf	ETH_ComputeChecksum@cksm,f,c
 14108  0050D8  5011               	movf	ETH_ComputeChecksum@v+1,w,c
 14109  0050DA  220D               	addwfc	ETH_ComputeChecksum@cksm+1,f,c
 14110  0050DC  0E00               	movlw	0
 14111  0050DE  220E               	addwfc	ETH_ComputeChecksum@cksm+2,f,c
 14112  0050E0  220F               	addwfc	ETH_ComputeChecksum@cksm+3,f,c
 14113  0050E2  0C00               	retlw	0
 14114  0050E4                     __end_ofPL220:
 14115                           	opt stack 0
 14116                           tosu	equ	0xFFF
 14117                           tosh	equ	0xFFE
 14118                           tosl	equ	0xFFD
 14119                           pclath	equ	0xFFA
 14120                           tblptru	equ	0xFF8
 14121                           tblptrh	equ	0xFF7
 14122                           tblptrl	equ	0xFF6
 14123                           tablat	equ	0xFF5
 14124                           prodh	equ	0xFF4
 14125                           prodl	equ	0xFF3
 14126                           intcon	equ	0xFF2
 14127                           indf0	equ	0xFEF
 14128                           postinc0	equ	0xFEE
 14129                           fsr0h	equ	0xFEA
 14130                           fsr0l	equ	0xFE9
 14131                           wreg	equ	0xFE8
 14132                           postinc1	equ	0xFE6
 14133                           plusw1	equ	0xFE3
 14134                           fsr1h	equ	0xFE2
 14135                           fsr1l	equ	0xFE1
 14136                           bsr	equ	0xFE0
 14137                           indf2	equ	0xFDF
 14138                           postinc2	equ	0xFDE
 14139                           postdec2	equ	0xFDD
 14140                           plusw2	equ	0xFDB
 14141                           fsr2h	equ	0xFDA
 14142                           fsr2l	equ	0xFD9
 14143                           status	equ	0xFD8
 14144                           
 14145 ;; *************** function _ETH_Read8 *****************
 14146 ;; Defined at:
 14147 ;;		line 437 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 14148 ;; Parameters:    Size  Location     Type
 14149 ;;		None
 14150 ;; Auto vars:     Size  Location     Type
 14151 ;;  b               1    2[COMRAM] unsigned char 
 14152 ;; Return value:  Size  Location     Type
 14153 ;;                  1    wreg      unsigned char 
 14154 ;; Registers used:
 14155 ;;		wreg, status,2, cstack
 14156 ;; Tracked objects:
 14157 ;;		On entry : 0/1
 14158 ;;		On exit  : 0/0
 14159 ;;		Unchanged: 0/0
 14160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14164 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14165 ;;Total ram usage:        1 bytes
 14166 ;; Hardware stack levels used:    1
 14167 ;; Hardware stack levels required when called:    4
 14168 ;; This function calls:
 14169 ;;		_SPI_ExchangeByte
 14170 ;; This function is called by:
 14171 ;;		_ETH_ComputeChecksum
 14172 ;;		_TCP_ParseTCPOptions
 14173 ;;		_DHCP_Handler
 14174 ;;		_UDP_Read8
 14175 ;; This function uses a non-reentrant model
 14176 ;;
 14177                           
 14178                           	psect	text46
 14179  005DFC                     __ptext46:
 14180                           	opt stack 0
 14181  005DFC                     _ETH_Read8:
 14182                           	opt stack 21
 14183                           
 14184                           ;incstack = 0
 14185                           ;enc28J60.c: 439: uint8_t b;
 14186                           ;enc28J60.c: 441: do{LATD3 = 0;} while(0);
 14187  005DFC  968C               	bcf	3980,3,c	;volatile
 14188                           
 14189                           ;enc28J60.c: 442: SPI_ExchangeByte(rbm_inst);
 14190  005DFE  0E3A               	movlw	58
 14191  005E00  EC42  F02F         	call	_SPI_ExchangeByte
 14192                           
 14193                           ;enc28J60.c: 443: b = SPI_ExchangeByte(0);
 14194  005E04  0E00               	movlw	0
 14195  005E06  EC42  F02F         	call	_SPI_ExchangeByte
 14196  005E0A  6E03               	movwf	ETH_Read8@b,c
 14197  005E0C  868C               	bsf	3980,3,c	;volatile
 14198                           
 14199                           ;enc28J60.c: 446: return b;
 14200  005E0E  5003               	movf	ETH_Read8@b,w,c
 14201  005E10  0012               	return		;funcret
 14202  005E12                     __end_of_ETH_Read8:
 14203                           	opt stack 0
 14204                           tosu	equ	0xFFF
 14205                           tosh	equ	0xFFE
 14206                           tosl	equ	0xFFD
 14207                           pclath	equ	0xFFA
 14208                           tblptru	equ	0xFF8
 14209                           tblptrh	equ	0xFF7
 14210                           tblptrl	equ	0xFF6
 14211                           tablat	equ	0xFF5
 14212                           prodh	equ	0xFF4
 14213                           prodl	equ	0xFF3
 14214                           intcon	equ	0xFF2
 14215                           indf0	equ	0xFEF
 14216                           postinc0	equ	0xFEE
 14217                           fsr0h	equ	0xFEA
 14218                           fsr0l	equ	0xFE9
 14219                           wreg	equ	0xFE8
 14220                           postinc1	equ	0xFE6
 14221                           plusw1	equ	0xFE3
 14222                           fsr1h	equ	0xFE2
 14223                           fsr1l	equ	0xFE1
 14224                           bsr	equ	0xFE0
 14225                           indf2	equ	0xFDF
 14226                           postinc2	equ	0xFDE
 14227                           postdec2	equ	0xFDD
 14228                           plusw2	equ	0xFDB
 14229                           fsr2h	equ	0xFDA
 14230                           fsr2l	equ	0xFD9
 14231                           status	equ	0xFD8
 14232                           
 14233 ;; *************** function _ETH_NextPacketUpdate *****************
 14234 ;; Defined at:
 14235 ;;		line 241 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;		None
 14238 ;; Auto vars:     Size  Location     Type
 14239 ;;		None
 14240 ;; Return value:  Size  Location     Type
 14241 ;;		None               void
 14242 ;; Registers used:
 14243 ;;		wreg, status,2, status,0, cstack
 14244 ;; Tracked objects:
 14245 ;;		On entry : F/1
 14246 ;;		On exit  : F/2
 14247 ;;		Unchanged: 0/0
 14248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;Total ram usage:        0 bytes
 14254 ;; Hardware stack levels used:    1
 14255 ;; Hardware stack levels required when called:    6
 14256 ;; This function calls:
 14257 ;;		_ENC28_Wcr16
 14258 ;;		_SPI_ExchangeByte
 14259 ;; This function is called by:
 14260 ;;		_Network_Read
 14261 ;; This function uses a non-reentrant model
 14262 ;;
 14263                           
 14264                           	psect	text47
 14265  00537C                     __ptext47:
 14266                           	opt stack 0
 14267  00537C                     _ETH_NextPacketUpdate:
 14268                           	opt stack 22
 14269                           
 14270                           ; BSR set to: 1
 14271                           ;enc28J60.c: 245: if (nextPacketPointer == (0))
 14272                           
 14273                           ;incstack = 0
 14274  00537C  51D9               	movf	_nextPacketPointer& (0+255),w,b
 14275  00537E  11DA               	iorwf	(_nextPacketPointer+1)& (0+255),w,b
 14276  005380  E106               	bnz	l9144
 14277                           
 14278                           ; BSR set to: 1
 14279                           ;enc28J60.c: 246: ENC28_Wcr16(J60_ERXRDPTL, ((0x1FFF - (1500)) - 2));
 14280  005382  EC94  F02B         	call	PL276	;call to abstracted procedure
 14281  005386  0E0C               	movlw	12
 14282  005388  EC9A  F02C         	call	_ENC28_Wcr16
 14283  00538C  D004               	goto	l431
 14284  00538E                     l9144:
 14285                           
 14286                           ; BSR set to: 1
 14287                           ;enc28J60.c: 247: else
 14288                           ;enc28J60.c: 248: ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer-1);
 14289  00538E  EC8D  F02B         	call	PL224	;call to abstracted procedure
 14290  005392  EC9A  F02C         	call	_ENC28_Wcr16
 14291  005396                     l431:
 14292                           
 14293                           ;enc28J60.c: 250: ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
 14294  005396  EC88  F02B         	call	PL216	;call to abstracted procedure
 14295  00539A  EC9A  F02C         	call	_ENC28_Wcr16
 14296  00539E  968C               	bcf	3980,3,c	;volatile
 14297                           
 14298                           ;enc28J60.c: 253: SPI_ExchangeByte(rbm_inst);
 14299  0053A0  0E3A               	movlw	58
 14300  0053A2  EC42  F02F         	call	_SPI_ExchangeByte
 14301                           
 14302                           ;enc28J60.c: 254: ((char *) &nextPacketPointer)[0] = SPI_ExchangeByte(0);
 14303  0053A6  0E00               	movlw	0
 14304  0053A8  EC42  F02F         	call	_SPI_ExchangeByte
 14305  0053AC  0101               	movlb	1	; () banked
 14306  0053AE  6FD9               	movwf	_nextPacketPointer& (0+255),b
 14307                           
 14308                           ; BSR set to: 1
 14309                           ;enc28J60.c: 255: ((char *) &nextPacketPointer)[1] = SPI_ExchangeByte(0);
 14310  0053B0  0E00               	movlw	0
 14311  0053B2  EC42  F02F         	call	_SPI_ExchangeByte
 14312  0053B6  0101               	movlb	1	; () banked
 14313  0053B8  6FDA               	movwf	(_nextPacketPointer+1)& (0+255),b
 14314                           
 14315                           ; BSR set to: 1
 14316                           ;enc28J60.c: 256: ((char *) &rxPacketStatusVector)[0] = SPI_ExchangeByte(0);
 14317  0053BA  0E00               	movlw	0
 14318  0053BC  EC42  F02F         	call	_SPI_ExchangeByte
 14319  0053C0  0102               	movlb	2	; () banked
 14320  0053C2  6F28               	movwf	_rxPacketStatusVector& (0+255),b
 14321                           
 14322                           ; BSR set to: 2
 14323                           ;enc28J60.c: 257: ((char *) &rxPacketStatusVector)[1] = SPI_ExchangeByte(0);
 14324  0053C4  0E00               	movlw	0
 14325  0053C6  EC42  F02F         	call	_SPI_ExchangeByte
 14326  0053CA  0102               	movlb	2	; () banked
 14327  0053CC  6F29               	movwf	(_rxPacketStatusVector+1)& (0+255),b
 14328                           
 14329                           ; BSR set to: 2
 14330                           ;enc28J60.c: 258: ((char *) &rxPacketStatusVector)[2] = SPI_ExchangeByte(0);
 14331  0053CE  0E00               	movlw	0
 14332  0053D0  EC42  F02F         	call	_SPI_ExchangeByte
 14333  0053D4  0102               	movlb	2	; () banked
 14334  0053D6  6F2A               	movwf	(_rxPacketStatusVector+2)& (0+255),b
 14335                           
 14336                           ; BSR set to: 2
 14337                           ;enc28J60.c: 259: ((char *) &rxPacketStatusVector)[3] = SPI_ExchangeByte(0);
 14338  0053D8  0E00               	movlw	0
 14339  0053DA  EC42  F02F         	call	_SPI_ExchangeByte
 14340  0053DE  0102               	movlb	2	; () banked
 14341  0053E0  6F2B               	movwf	(_rxPacketStatusVector+3)& (0+255),b
 14342                           
 14343                           ; BSR set to: 2
 14344  0053E2  868C               	bsf	3980,3,c	;volatile
 14345                           
 14346                           ; BSR set to: 2
 14347                           ;enc28J60.c: 261: rxPacketStatusVector.byteCount -= 4;
 14348  0053E4  0E04               	movlw	4
 14349  0053E6  5F28               	subwf	_rxPacketStatusVector& (0+255),f,b
 14350  0053E8  0E00               	movlw	0
 14351  0053EA  5B29               	subwfb	(_rxPacketStatusVector+1)& (0+255),f,b
 14352                           
 14353                           ; BSR set to: 2
 14354  0053EC  0C00               	retlw	0	;funcret
 14355  0053EE                     __end_of_ETH_NextPacketUpdate:
 14356                           	opt stack 0
 14357                           tosu	equ	0xFFF
 14358                           tosh	equ	0xFFE
 14359                           tosl	equ	0xFFD
 14360                           pclath	equ	0xFFA
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           intcon	equ	0xFF2
 14368                           indf0	equ	0xFEF
 14369                           postinc0	equ	0xFEE
 14370                           fsr0h	equ	0xFEA
 14371                           fsr0l	equ	0xFE9
 14372                           wreg	equ	0xFE8
 14373                           postinc1	equ	0xFE6
 14374                           plusw1	equ	0xFE3
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           bsr	equ	0xFE0
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           plusw2	equ	0xFDB
 14382                           fsr2h	equ	0xFDA
 14383                           fsr2l	equ	0xFD9
 14384                           status	equ	0xFD8
 14385                           
 14386 ;; *************** function _ETH_Flush *****************
 14387 ;; Defined at:
 14388 ;;		line 660 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;		None
 14391 ;; Auto vars:     Size  Location     Type
 14392 ;;		None
 14393 ;; Return value:  Size  Location     Type
 14394 ;;		None               void
 14395 ;; Registers used:
 14396 ;;		wreg, status,2, status,0, cstack
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;Total ram usage:        0 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:    6
 14409 ;; This function calls:
 14410 ;;		_ENC28_Bfs
 14411 ;;		_ENC28_Wcr16
 14412 ;; This function is called by:
 14413 ;;		_Network_Read
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           	psect	text48
 14418  0056E6                     __ptext48:
 14419                           	opt stack 0
 14420  0056E6                     _ETH_Flush:
 14421                           	opt stack 22
 14422                           
 14423                           ;enc28J60.c: 662: ethData.pktReady = 0;
 14424                           
 14425                           ; BSR set to: 2
 14426                           ;incstack = 0
 14427  0056E6  0101               	movlb	1	; () banked
 14428  0056E8  93B5               	bcf	_ethData& (0+255),1,b	;volatile
 14429                           
 14430                           ; BSR set to: 1
 14431                           ;enc28J60.c: 663: if (nextPacketPointer == (0))ENC28_Wcr16(J60_ERXRDPTL, ((0x1FFF - (150
      +                          0)) - 2));
 14432  0056EA  51D9               	movf	_nextPacketPointer& (0+255),w,b
 14433  0056EC  11DA               	iorwf	(_nextPacketPointer+1)& (0+255),w,b
 14434  0056EE  E105               	bnz	l9172
 14435                           
 14436                           ; BSR set to: 1
 14437  0056F0  D81B               	call	PL276	;call to abstracted procedure
 14438  0056F2  0E0C               	movlw	12
 14439  0056F4  EC9A  F02C         	call	_ENC28_Wcr16
 14440  0056F8  D003               	goto	l599
 14441  0056FA                     l9172:
 14442                           
 14443                           ; BSR set to: 1
 14444                           ;enc28J60.c: 664: else ENC28_Wcr16(J60_ERXRDPTL,nextPacketPointer-1);
 14445  0056FA  D80F               	call	PL224	;call to abstracted procedure
 14446  0056FC  EC9A  F02C         	call	_ENC28_Wcr16
 14447  005700                     l599:
 14448                           
 14449                           ;enc28J60.c: 665: ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
 14450  005700  D807               	call	PL216	;call to abstracted procedure
 14451  005702  EC9A  F02C         	call	_ENC28_Wcr16
 14452                           
 14453                           ;enc28J60.c: 667: ENC28_Bfs(J60_ECON2, 0x40);
 14454  005706  0E40               	movlw	64
 14455  005708  6E05               	movwf	ENC28_Bfs@bits,c
 14456  00570A  0EFE               	movlw	254
 14457  00570C  EF70  F02E         	goto	_ENC28_Bfs
 14458  005710                     __end_of_ETH_Flush:
 14459                           	opt stack 0
 14460  005710                     PL216:
 14461                           	opt stack 22
 14462  005710  C1D9  F005         	movff	_nextPacketPointer,ENC28_Wcr16@v
 14463  005714  C1DA  F006         	movff	_nextPacketPointer+1,ENC28_Wcr16@v+1
 14464  005718  0C00               	retlw	0
 14465  00571A                     __end_ofPL216:
 14466                           	opt stack 0
 14467  00571A                     PL224:
 14468                           	opt stack 22
 14469  00571A  0EFF               	movlw	255
 14470  00571C  25D9               	addwf	_nextPacketPointer& (0+255),w,b
 14471  00571E  6E05               	movwf	ENC28_Wcr16@v,c
 14472  005720  0EFF               	movlw	255
 14473  005722  21DA               	addwfc	(_nextPacketPointer+1)& (0+255),w,b
 14474  005724  6E06               	movwf	ENC28_Wcr16@v+1,c
 14475  005726  0C0C               	retlw	12
 14476  005728                     __end_ofPL224:
 14477                           	opt stack 0
 14478  005728                     PL276:
 14479                           	opt stack 22
 14480  005728  0E1A               	movlw	26
 14481  00572A  6E06               	movwf	ENC28_Wcr16@v+1,c
 14482  00572C  0E21               	movlw	33
 14483  00572E  6E05               	movwf	ENC28_Wcr16@v,c
 14484  005730  0C21               	retlw	33
 14485  005732                     __end_ofPL276:
 14486                           	opt stack 0
 14487                           tosu	equ	0xFFF
 14488                           tosh	equ	0xFFE
 14489                           tosl	equ	0xFFD
 14490                           pclath	equ	0xFFA
 14491                           tblptru	equ	0xFF8
 14492                           tblptrh	equ	0xFF7
 14493                           tblptrl	equ	0xFF6
 14494                           tablat	equ	0xFF5
 14495                           prodh	equ	0xFF4
 14496                           prodl	equ	0xFF3
 14497                           intcon	equ	0xFF2
 14498                           indf0	equ	0xFEF
 14499                           postinc0	equ	0xFEE
 14500                           fsr0h	equ	0xFEA
 14501                           fsr0l	equ	0xFE9
 14502                           wreg	equ	0xFE8
 14503                           postinc1	equ	0xFE6
 14504                           plusw1	equ	0xFE3
 14505                           fsr1h	equ	0xFE2
 14506                           fsr1l	equ	0xFE1
 14507                           bsr	equ	0xFE0
 14508                           indf2	equ	0xFDF
 14509                           postinc2	equ	0xFDE
 14510                           postdec2	equ	0xFDD
 14511                           plusw2	equ	0xFDB
 14512                           fsr2h	equ	0xFDA
 14513                           fsr2l	equ	0xFD9
 14514                           status	equ	0xFD8
 14515                           
 14516 ;; *************** function _ARPV4_Packet *****************
 14517 ;; Defined at:
 14518 ;;		line 97 in file "../../TCPIP Library/source/arpv4.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;  x               1   52[COMRAM] unsigned char 
 14523 ;;  arpPtr          2   49[COMRAM] PTR struct .
 14524 ;;		 -> arpMap(104), 
 14525 ;;  x               1   51[COMRAM] unsigned char 
 14526 ;;  header         28   55[COMRAM] struct .
 14527 ;;  entryPointer    2   53[COMRAM] PTR struct .
 14528 ;;		 -> arpMap(104), 
 14529 ;;  length          2   45[COMRAM] unsigned int 
 14530 ;;  ret             1   48[COMRAM] enum E450
 14531 ;;  mergeFlag       1   47[COMRAM] unsigned char 
 14532 ;; Return value:  Size  Location     Type
 14533 ;;                  1    wreg      enum E450
 14534 ;; Registers used:
 14535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14536 ;; Tracked objects:
 14537 ;;		On entry : 0/0
 14538 ;;		On exit  : 0/0
 14539 ;;		Unchanged: 0/0
 14540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14542 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14543 ;;      Temps:         32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14544 ;;      Totals:        70       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;Total ram usage:       70 bytes
 14546 ;; Hardware stack levels used:    1
 14547 ;; Hardware stack levels required when called:    7
 14548 ;; This function calls:
 14549 ;;		_ETH_GetMAC
 14550 ;;		_ETH_ReadBlock
 14551 ;;		_ETH_Send
 14552 ;;		_ETH_WriteBlock
 14553 ;;		_ETH_WriteStart
 14554 ;; This function is called by:
 14555 ;;		_Network_Read
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           	psect	text49
 14560  003094                     __ptext49:
 14561                           	opt stack 0
 14562  003094                     _ARPV4_Packet:
 14563                           	opt stack 21
 14564                           
 14565                           ;arpv4.c: 107: length = ETH_ReadBlock((char*)&header,sizeof(arpHeader_t));
 14566                           
 14567                           ;incstack = 0
 14568  003094  0E38               	movlw	low ARPV4_Packet@header
 14569  003096  6E03               	movwf	ETH_ReadBlock@buffer,c
 14570  003098  6A04               	clrf	ETH_ReadBlock@buffer+1,c
 14571  00309A  6A06               	clrf	ETH_ReadBlock@length+1,c
 14572  00309C  0E1C               	movlw	28
 14573  00309E  6E05               	movwf	ETH_ReadBlock@length,c
 14574  0030A0  EC7F  F029         	call	_ETH_ReadBlock	;wreg free
 14575  0030A4  C003  F02E         	movff	?_ETH_ReadBlock,ARPV4_Packet@length
 14576  0030A8  C004  F02F         	movff	?_ETH_ReadBlock+1,ARPV4_Packet@length+1
 14577                           
 14578                           ;arpv4.c: 108: if(length == sizeof(arpHeader_t))
 14579  0030AC  0E1C               	movlw	28
 14580  0030AE  182E               	xorwf	ARPV4_Packet@length,w,c
 14581  0030B0  102F               	iorwf	ARPV4_Packet@length+1,w,c
 14582  0030B2  A4D8               	btfss	status,2,c
 14583  0030B4  0012               	return	
 14584                           
 14585                           ;arpv4.c: 109: {
 14586                           ;arpv4.c: 111: mergeFlag = 0;
 14587  0030B6  6A30               	clrf	ARPV4_Packet@mergeFlag,c
 14588                           
 14589                           ;arpv4.c: 112: entryPointer = arpMap;
 14590  0030B8  D987               	call	PL352	;call to abstracted procedure
 14591                           
 14592                           ;arpv4.c: 114: for(uint8_t x=8; x > 0; x--)
 14593  0030BA  0E08               	movlw	8
 14594  0030BC  6E34               	movwf	ARPV4_Packet@x,c
 14595  0030BE                     l9190:
 14596                           
 14597                           ;arpv4.c: 115: {
 14598                           ;arpv4.c: 116: if( (header.spa == entryPointer->ipAddress) && (header.ptype == entryPoin
      +                          ter->protocolType) )
 14599  0030BE  EE20 F006          	lfsr	2,6
 14600  0030C2  D97D               	call	PL194	;call to abstracted procedure
 14601  0030C4  50DE               	movf	postinc2,w,c
 14602  0030C6  1846               	xorwf	ARPV4_Packet@header+14,w,c
 14603  0030C8  E11A               	bnz	l9200
 14604  0030CA  50DE               	movf	postinc2,w,c
 14605  0030CC  1847               	xorwf	ARPV4_Packet@header+15,w,c
 14606  0030CE  E117               	bnz	l9200
 14607  0030D0  50DE               	movf	postinc2,w,c
 14608  0030D2  1848               	xorwf	ARPV4_Packet@header+16,w,c
 14609  0030D4  E114               	bnz	l9200
 14610  0030D6  50DE               	movf	postinc2,w,c
 14611  0030D8  1849               	xorwf	ARPV4_Packet@header+17,w,c
 14612  0030DA  E111               	bnz	l9200
 14613  0030DC  EE20 F00A          	lfsr	2,10
 14614  0030E0  D96E               	call	PL194	;call to abstracted procedure
 14615  0030E2  50DE               	movf	postinc2,w,c
 14616  0030E4  183A               	xorwf	ARPV4_Packet@header+2,w,c
 14617  0030E6  E10B               	bnz	l9200
 14618  0030E8  50DE               	movf	postinc2,w,c
 14619  0030EA  183B               	xorwf	ARPV4_Packet@header+3,w,c
 14620  0030EC  E108               	bnz	l9200
 14621                           
 14622                           ;arpv4.c: 117: {
 14623                           ;arpv4.c: 118: entryPointer->age = 0;
 14624                           
 14625                           ;arpv4.c: 119: entryPointer->macAddress.s = header.sha.s;
 14626  0030EE  D94C               	call	PL130	;call to abstracted procedure
 14627  0030F0                     u14181:
 14628  0030F0  CFDB FFE3          	movff	plusw2,plusw1
 14629  0030F4  06E8               	decf	wreg,f,c
 14630  0030F6  E2FC               	bc	u14181
 14631                           
 14632                           ;arpv4.c: 120: mergeFlag = 1;
 14633  0030F8  0E01               	movlw	1
 14634  0030FA  6E30               	movwf	ARPV4_Packet@mergeFlag,c
 14635                           
 14636                           ;arpv4.c: 121: break;
 14637  0030FC  D007               	goto	l9206
 14638  0030FE                     l9200:
 14639                           
 14640                           ;arpv4.c: 122: }
 14641                           ;arpv4.c: 123: entryPointer++;
 14642  0030FE  0E0D               	movlw	13
 14643  003100  2636               	addwf	ARPV4_Packet@entryPointer,f,c
 14644  003102  0E00               	movlw	0
 14645  003104  2237               	addwfc	ARPV4_Packet@entryPointer+1,f,c
 14646  003106  0634               	decf	ARPV4_Packet@x,f,c
 14647  003108  5034               	movf	ARPV4_Packet@x,w,c
 14648  00310A  E1D9               	bnz	l9190
 14649  00310C                     l9206:
 14650                           
 14651                           ;arpv4.c: 124: }
 14652                           ;arpv4.c: 126: if(ipv4Address && (ipv4Address == ((((uint32_t)header.tpa&(uint32_t)0xff0
      +                          00000) >> 24) | (((uint32_t)header.tpa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.
      +                          tpa&(uint32_t)0x0000ff00) << 8) | (((uint32_t)header.tpa&(uint32_t)0x000000ff) << 24) ))
      +                          )
 14653  00310C  EC82  F021         	call	PL306	;call to abstracted procedure
 14654  003110  B4D8               	btfsc	status,2,c
 14655  003112  0012               	return	
 14656                           
 14657                           ; BSR set to: 1
 14658  003114  5050               	movf	ARPV4_Packet@header+24,w,c
 14659  003116  D92E               	call	PL126	;call to abstracted procedure
 14660  003118  EE20  F050         	lfsr	2,ARPV4_Packet@header+24
 14661  00311C  D917               	call	PL112	;call to abstracted procedure
 14662  00311E  C050  F016         	movff	ARPV4_Packet@header+24,??_ARPV4_Packet+8
 14663  003122  C051  F017         	movff	ARPV4_Packet@header+25,??_ARPV4_Packet+9
 14664  003126  C052  F018         	movff	ARPV4_Packet@header+26,??_ARPV4_Packet+10
 14665  00312A  C053  F019         	movff	ARPV4_Packet@header+27,??_ARPV4_Packet+11
 14666  00312E  D93A               	call	PL140	;call to abstracted procedure
 14667  003130  EE20  F050         	lfsr	2,ARPV4_Packet@header+24
 14668  003134  D8D2               	call	PL56	;call to abstracted procedure
 14669  003136  51C4               	movf	_ipv4Address& (0+255),w,b
 14670  003138  182A               	xorwf	??_ARPV4_Packet+28,w,c
 14671  00313A  E109               	bnz	u14221
 14672  00313C  51C5               	movf	(_ipv4Address+1)& (0+255),w,b
 14673  00313E  182B               	xorwf	??_ARPV4_Packet+29,w,c
 14674  003140  E106               	bnz	u14221
 14675  003142  51C6               	movf	(_ipv4Address+2)& (0+255),w,b
 14676  003144  182C               	xorwf	??_ARPV4_Packet+30,w,c
 14677  003146  E103               	bnz	u14221
 14678  003148  51C7               	movf	(_ipv4Address+3)& (0+255),w,b
 14679  00314A  182D               	xorwf	??_ARPV4_Packet+31,w,c
 14680  00314C  A4D8               	btfss	status,2,c
 14681  00314E                     u14221:
 14682  00314E  0012               	return	
 14683                           
 14684                           ; BSR set to: 1
 14685                           ;arpv4.c: 127: {
 14686                           ;arpv4.c: 128: if(!mergeFlag)
 14687  003150  5030               	movf	ARPV4_Packet@mergeFlag,w,c
 14688  003152  E149               	bnz	l9236
 14689                           
 14690                           ; BSR set to: 1
 14691                           ;arpv4.c: 129: {
 14692                           ;arpv4.c: 131: entryPointer = arpMap;
 14693  003154  D939               	call	PL352	;call to abstracted procedure
 14694                           
 14695                           ;arpv4.c: 132: arpMap_t *arpPtr = arpMap;
 14696  003156  0E2C               	movlw	low _arpMap
 14697  003158  6E32               	movwf	ARPV4_Packet@arpPtr,c
 14698  00315A  0E02               	movlw	high _arpMap
 14699  00315C  6E33               	movwf	ARPV4_Packet@arpPtr+1,c
 14700                           
 14701                           ; BSR set to: 1
 14702                           ;arpv4.c: 133: for(uint8_t x=8; x !=0; x--)
 14703  00315E  0E08               	movlw	8
 14704  003160  6E35               	movwf	ARPV4_Packet@x_1710,c
 14705  003162                     l9220:
 14706                           
 14707                           ;arpv4.c: 134: {
 14708                           ;arpv4.c: 135: if(entryPointer->age < arpPtr->age)
 14709  003162  EE20 F00C          	lfsr	2,12
 14710  003166  5032               	movf	ARPV4_Packet@arpPtr,w,c
 14711  003168  26D9               	addwf	fsr2l,f,c
 14712  00316A  5033               	movf	ARPV4_Packet@arpPtr+1,w,c
 14713  00316C  22DA               	addwfc	fsr2h,f,c
 14714  00316E  EE10 F00C          	lfsr	1,12
 14715  003172  5036               	movf	ARPV4_Packet@entryPointer,w,c
 14716  003174  26E1               	addwf	fsr1l,f,c
 14717  003176  5037               	movf	ARPV4_Packet@entryPointer+1,w,c
 14718  003178  22E2               	addwfc	fsr1h,f,c
 14719  00317A  50DE               	movf	postinc2,w,c
 14720  00317C  5CE6               	subwf	postinc1,w,c
 14721  00317E  E204               	bc	l705
 14722                           
 14723                           ;arpv4.c: 136: {
 14724                           ;arpv4.c: 137: entryPointer = arpPtr;
 14725  003180  C032  F036         	movff	ARPV4_Packet@arpPtr,ARPV4_Packet@entryPointer
 14726  003184  C033  F037         	movff	ARPV4_Packet@arpPtr+1,ARPV4_Packet@entryPointer+1
 14727  003188                     l705:
 14728                           
 14729                           ;arpv4.c: 138: }
 14730                           ;arpv4.c: 140: arpPtr++;
 14731  003188  0E0D               	movlw	13
 14732  00318A  2632               	addwf	ARPV4_Packet@arpPtr,f,c
 14733  00318C  0E00               	movlw	0
 14734  00318E  2233               	addwfc	ARPV4_Packet@arpPtr+1,f,c
 14735  003190  0635               	decf	ARPV4_Packet@x_1710,f,c
 14736  003192  5035               	movf	ARPV4_Packet@x_1710,w,c
 14737  003194  E1E6               	bnz	l9220
 14738                           
 14739                           ;arpv4.c: 141: }
 14740                           ;arpv4.c: 144: entryPointer->age = 0;
 14741                           
 14742                           ;arpv4.c: 145: entryPointer->macAddress.s = header.sha.s;
 14743  003196  D8F8               	call	PL130	;call to abstracted procedure
 14744  003198                     u14261:
 14745  003198  CFDB FFE3          	movff	plusw2,plusw1
 14746  00319C  06E8               	decf	wreg,f,c
 14747  00319E  E2FC               	bc	u14261
 14748                           
 14749                           ;arpv4.c: 146: entryPointer->ipAddress = ((((uint32_t)header.spa&(uint32_t)0xff000000) >
      +                          > 24) | (((uint32_t)header.spa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.spa&(uin
      +                          t32_t)0x0000ff00) << 8) | (((uint32_t)header.spa&(uint32_t)0x000000ff) << 24) );
 14750  0031A0  5046               	movf	ARPV4_Packet@header+14,w,c
 14751  0031A2  D8E8               	call	PL126	;call to abstracted procedure
 14752  0031A4  EE20  F046         	lfsr	2,ARPV4_Packet@header+14
 14753  0031A8  D8D1               	call	PL112	;call to abstracted procedure
 14754  0031AA  C046  F016         	movff	ARPV4_Packet@header+14,??_ARPV4_Packet+8
 14755  0031AE  C047  F017         	movff	ARPV4_Packet@header+15,??_ARPV4_Packet+9
 14756  0031B2  C048  F018         	movff	ARPV4_Packet@header+16,??_ARPV4_Packet+10
 14757  0031B6  C049  F019         	movff	ARPV4_Packet@header+17,??_ARPV4_Packet+11
 14758  0031BA  D8F4               	call	PL140	;call to abstracted procedure
 14759  0031BC  EE20  F046         	lfsr	2,ARPV4_Packet@header+14
 14760  0031C0  D88C               	call	PL56	;call to abstracted procedure
 14761  0031C2  EE20 F006          	lfsr	2,6
 14762  0031C6  D8FB               	call	PL194	;call to abstracted procedure
 14763  0031C8  C02A  FFDE         	movff	??_ARPV4_Packet+28,postinc2
 14764  0031CC  C02B  FFDE         	movff	??_ARPV4_Packet+29,postinc2
 14765  0031D0  C02C  FFDE         	movff	??_ARPV4_Packet+30,postinc2
 14766  0031D4  C02D  FFDE         	movff	??_ARPV4_Packet+31,postinc2
 14767                           
 14768                           ;arpv4.c: 147: entryPointer->protocolType = header.ptype;
 14769  0031D8  EE20 F00A          	lfsr	2,10
 14770  0031DC  D8F0               	call	PL194	;call to abstracted procedure
 14771  0031DE  C03A  FFDE         	movff	ARPV4_Packet@header+2,postinc2
 14772  0031E2  C03B  FFDD         	movff	ARPV4_Packet@header+3,postdec2
 14773  0031E6                     l9236:
 14774                           
 14775                           ;arpv4.c: 148: }
 14776                           ;arpv4.c: 149: if(header.oper == ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)
      +                          1 & (uint16_t)0x00FF) << 8)))
 14777  0031E6  043F               	decf	ARPV4_Packet@header+7,w,c
 14778  0031E8  103E               	iorwf	ARPV4_Packet@header+6,w,c
 14779  0031EA  A4D8               	btfss	status,2,c
 14780  0031EC  0012               	return	
 14781                           
 14782                           ;arpv4.c: 150: {
 14783                           ;arpv4.c: 151: ret = ETH_WriteStart(&header.sha ,0x0806);
 14784  0031EE  0E40               	movlw	low (ARPV4_Packet@header+8)
 14785  0031F0  6E08               	movwf	ETH_WriteStart@dest_mac,c
 14786  0031F2  6A09               	clrf	ETH_WriteStart@dest_mac+1,c
 14787  0031F4  ECA1  F023         	call	PL362	;call to abstracted procedure
 14788  0031F8  EC88  F021         	call	_ETH_WriteStart	;wreg free
 14789  0031FC  6E31               	movwf	ARPV4_Packet@ret,c
 14790                           
 14791                           ;arpv4.c: 152: if(ret == SUCCESS)
 14792  0031FE  0431               	decf	ARPV4_Packet@ret,w,c
 14793  003200  A4D8               	btfss	status,2,c
 14794  003202  0012               	return	
 14795                           
 14796                           ;arpv4.c: 153: {
 14797                           ;arpv4.c: 155: header.tha.s = header.sha.s;
 14798  003204  EE20  F040         	lfsr	2,ARPV4_Packet@header+8
 14799  003208  EE10  F04A         	lfsr	1,ARPV4_Packet@header+18
 14800  00320C  0E05               	movlw	5
 14801  00320E                     u14301:
 14802  00320E  CFDB FFE3          	movff	plusw2,plusw1
 14803  003212  06E8               	decf	wreg,f,c
 14804  003214  E2FC               	bc	u14301
 14805                           
 14806                           ;arpv4.c: 156: ETH_GetMAC((char*)&header.sha.s);
 14807  003216  0E38               	movlw	ARPV4_Packet@header& (0+255)
 14808  003218  0F08               	addlw	8
 14809  00321A  ECBE  F02B         	call	_ETH_GetMAC
 14810                           
 14811                           ;arpv4.c: 157: header.tpa = header.spa;
 14812  00321E  C046  F050         	movff	ARPV4_Packet@header+14,ARPV4_Packet@header+24
 14813  003222  C047  F051         	movff	ARPV4_Packet@header+15,ARPV4_Packet@header+25
 14814  003226  C048  F052         	movff	ARPV4_Packet@header+16,ARPV4_Packet@header+26
 14815  00322A  C049  F053         	movff	ARPV4_Packet@header+17,ARPV4_Packet@header+27
 14816                           
 14817                           ;arpv4.c: 158: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((u
      +                          int32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x00
      +                          00ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
 14818  00322E  0101               	movlb	1	; () banked
 14819  003230  51C4               	movf	_ipv4Address& (0+255),w,b
 14820  003232  D8A0               	call	PL126	;call to abstracted procedure
 14821  003234  6A12               	clrf	(??_ARPV4_Packet+4)& (0+255),c
 14822  003236  51C5               	movf	(_ipv4Address+1)& (0+255),w,b
 14823  003238  6E13               	movwf	(??_ARPV4_Packet+5)& (0+255),c
 14824  00323A  6A14               	clrf	(??_ARPV4_Packet+6)& (0+255),c
 14825  00323C  6A15               	clrf	(??_ARPV4_Packet+7)& (0+255),c
 14826  00323E  C014  F015         	movff	??_ARPV4_Packet+6,??_ARPV4_Packet+7
 14827  003242  C013  F014         	movff	??_ARPV4_Packet+5,??_ARPV4_Packet+6
 14828  003246  C012  F013         	movff	??_ARPV4_Packet+4,??_ARPV4_Packet+5
 14829  00324A  6A12               	clrf	??_ARPV4_Packet+4,c
 14830  00324C  6A16               	clrf	(??_ARPV4_Packet+8)& (0+255),c
 14831  00324E  51C6               	movf	(_ipv4Address+2)& (0+255),w,b
 14832  003250  6E17               	movwf	(??_ARPV4_Packet+9)& (0+255),c
 14833  003252  6A18               	clrf	(??_ARPV4_Packet+10)& (0+255),c
 14834  003254  5016               	movf	??_ARPV4_Packet+8,w,c
 14835  003256  6E19               	movwf	(??_ARPV4_Packet+11)& (0+255),c
 14836  003258  5017               	movf	??_ARPV4_Packet+9,w,c
 14837  00325A  6E1A               	movwf	(??_ARPV4_Packet+12)& (0+255),c
 14838  00325C  5018               	movf	??_ARPV4_Packet+10,w,c
 14839  00325E  6E1B               	movwf	(??_ARPV4_Packet+13)& (0+255),c
 14840  003260  6A1C               	clrf	(??_ARPV4_Packet+14)& (0+255),c
 14841  003262  6A1D               	clrf	(??_ARPV4_Packet+15)& (0+255),c
 14842  003264  6A1E               	clrf	(??_ARPV4_Packet+16)& (0+255),c
 14843  003266  6A1F               	clrf	(??_ARPV4_Packet+17)& (0+255),c
 14844  003268  51C7               	movf	(_ipv4Address+3)& (0+255),w,b
 14845  00326A  6E20               	movwf	(??_ARPV4_Packet+18)& (0+255),c
 14846  00326C  0E19               	movlw	25
 14847  00326E  D005               	goto	u14310
 14848  003270                     u14315:
 14849  003270  90D8               	bcf	status,0,c
 14850  003272  3220               	rrcf	??_ARPV4_Packet+18,f,c
 14851  003274  321F               	rrcf	??_ARPV4_Packet+17,f,c
 14852  003276  321E               	rrcf	??_ARPV4_Packet+16,f,c
 14853  003278  321D               	rrcf	??_ARPV4_Packet+15,f,c
 14854  00327A                     u14310:
 14855  00327A  2EE8               	decfsz	wreg,f,c
 14856  00327C  D7F9               	goto	u14315
 14857  00327E  5019               	movf	??_ARPV4_Packet+11,w,c
 14858  003280  101D               	iorwf	??_ARPV4_Packet+15,w,c
 14859  003282  6E21               	movwf	(??_ARPV4_Packet+19)& (0+255),c
 14860  003284  501A               	movf	??_ARPV4_Packet+12,w,c
 14861  003286  101E               	iorwf	??_ARPV4_Packet+16,w,c
 14862  003288  6E22               	movwf	(??_ARPV4_Packet+20)& (0+255),c
 14863  00328A  501B               	movf	??_ARPV4_Packet+13,w,c
 14864  00328C  101F               	iorwf	??_ARPV4_Packet+17,w,c
 14865  00328E  6E23               	movwf	(??_ARPV4_Packet+21)& (0+255),c
 14866  003290  501C               	movf	??_ARPV4_Packet+14,w,c
 14867  003292  1020               	iorwf	??_ARPV4_Packet+18,w,c
 14868  003294  6E24               	movwf	(??_ARPV4_Packet+22)& (0+255),c
 14869  003296  5012               	movf	??_ARPV4_Packet+4,w,c
 14870  003298  1021               	iorwf	??_ARPV4_Packet+19,w,c
 14871  00329A  6E25               	movwf	(??_ARPV4_Packet+23)& (0+255),c
 14872  00329C  5013               	movf	??_ARPV4_Packet+5,w,c
 14873  00329E  1022               	iorwf	??_ARPV4_Packet+20,w,c
 14874  0032A0  6E26               	movwf	(??_ARPV4_Packet+24)& (0+255),c
 14875  0032A2  5014               	movf	??_ARPV4_Packet+6,w,c
 14876  0032A4  1023               	iorwf	??_ARPV4_Packet+21,w,c
 14877  0032A6  6E27               	movwf	(??_ARPV4_Packet+25)& (0+255),c
 14878  0032A8  5015               	movf	??_ARPV4_Packet+7,w,c
 14879  0032AA  1024               	iorwf	??_ARPV4_Packet+22,w,c
 14880  0032AC  6E28               	movwf	(??_ARPV4_Packet+26)& (0+255),c
 14881  0032AE  500E               	movf	??_ARPV4_Packet,w,c
 14882  0032B0  1025               	iorwf	??_ARPV4_Packet+23,w,c
 14883  0032B2  6E46               	movwf	ARPV4_Packet@header+14,c
 14884  0032B4  500F               	movf	??_ARPV4_Packet+1,w,c
 14885  0032B6  1026               	iorwf	??_ARPV4_Packet+24,w,c
 14886  0032B8  6E47               	movwf	ARPV4_Packet@header+15,c
 14887  0032BA  5010               	movf	??_ARPV4_Packet+2,w,c
 14888  0032BC  1027               	iorwf	??_ARPV4_Packet+25,w,c
 14889  0032BE  6E48               	movwf	ARPV4_Packet@header+16,c
 14890  0032C0  5011               	movf	??_ARPV4_Packet+3,w,c
 14891  0032C2  1028               	iorwf	??_ARPV4_Packet+26,w,c
 14892  0032C4  6E49               	movwf	ARPV4_Packet@header+17,c
 14893                           
 14894                           ; BSR set to: 1
 14895                           ;arpv4.c: 159: header.oper = ((((uint16_t)2 & (uint16_t)0xFF00) >> 8) | (((uint16_t)2 & 
      +                          (uint16_t)0x00FF) << 8));
 14896  0032C6  0E02               	movlw	2
 14897  0032C8  6E3F               	movwf	ARPV4_Packet@header+7,c
 14898  0032CA  6A3E               	clrf	ARPV4_Packet@header+6,c
 14899                           
 14900                           ; BSR set to: 1
 14901                           ;arpv4.c: 160: ETH_WriteBlock((char*)&header,sizeof(header));
 14902  0032CC  0E38               	movlw	low ARPV4_Packet@header
 14903  0032CE  EC95  F023         	call	PL300	;call to abstracted procedure
 14904  0032D2  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 14905  0032D6  EFFD  F02C         	goto	_ETH_Send	;wreg free
 14906  0032DA                     __end_of_ARPV4_Packet:
 14907                           	opt stack 0
 14908  0032DA                     PL56:
 14909                           	opt stack 21
 14910  0032DA  14DE               	andwf	postinc2,w,c
 14911  0032DC  6E1E               	movwf	(??_ARPV4_Packet+16)& (0+255),c
 14912  0032DE  0E00               	movlw	0
 14913  0032E0  14DE               	andwf	postinc2,w,c
 14914  0032E2  6E1F               	movwf	(??_ARPV4_Packet+17)& (0+255),c
 14915  0032E4  0E00               	movlw	0
 14916  0032E6  14DE               	andwf	postinc2,w,c
 14917  0032E8  6E20               	movwf	(??_ARPV4_Packet+18)& (0+255),c
 14918  0032EA  0EFF               	movlw	255
 14919  0032EC  14DE               	andwf	postinc2,w,c
 14920  0032EE  6E21               	movwf	(??_ARPV4_Packet+19)& (0+255),c
 14921  0032F0  0E19               	movlw	25
 14922  0032F2  D005               	goto	u14210
 14923  0032F4                     u14215:
 14924  0032F4  90D8               	bcf	status,0,c
 14925  0032F6  3221               	rrcf	??_ARPV4_Packet+19,f,c
 14926  0032F8  3220               	rrcf	??_ARPV4_Packet+18,f,c
 14927  0032FA  321F               	rrcf	??_ARPV4_Packet+17,f,c
 14928  0032FC  321E               	rrcf	??_ARPV4_Packet+16,f,c
 14929  0032FE                     u14210:
 14930  0032FE  2EE8               	decfsz	wreg,f,c
 14931  003300  D7F9               	goto	u14215
 14932  003302  501A               	movf	??_ARPV4_Packet+12,w,c
 14933  003304  101E               	iorwf	??_ARPV4_Packet+16,w,c
 14934  003306  6E22               	movwf	(??_ARPV4_Packet+20)& (0+255),c
 14935  003308  501B               	movf	??_ARPV4_Packet+13,w,c
 14936  00330A  101F               	iorwf	??_ARPV4_Packet+17,w,c
 14937  00330C  6E23               	movwf	(??_ARPV4_Packet+21)& (0+255),c
 14938  00330E  501C               	movf	??_ARPV4_Packet+14,w,c
 14939  003310  1020               	iorwf	??_ARPV4_Packet+18,w,c
 14940  003312  6E24               	movwf	(??_ARPV4_Packet+22)& (0+255),c
 14941  003314  501D               	movf	??_ARPV4_Packet+15,w,c
 14942  003316  1021               	iorwf	??_ARPV4_Packet+19,w,c
 14943  003318  6E25               	movwf	(??_ARPV4_Packet+23)& (0+255),c
 14944  00331A  5012               	movf	??_ARPV4_Packet+4,w,c
 14945  00331C  1022               	iorwf	??_ARPV4_Packet+20,w,c
 14946  00331E  6E26               	movwf	(??_ARPV4_Packet+24)& (0+255),c
 14947  003320  5013               	movf	??_ARPV4_Packet+5,w,c
 14948  003322  1023               	iorwf	??_ARPV4_Packet+21,w,c
 14949  003324  6E27               	movwf	(??_ARPV4_Packet+25)& (0+255),c
 14950  003326  5014               	movf	??_ARPV4_Packet+6,w,c
 14951  003328  1024               	iorwf	??_ARPV4_Packet+22,w,c
 14952  00332A  6E28               	movwf	(??_ARPV4_Packet+26)& (0+255),c
 14953  00332C  5015               	movf	??_ARPV4_Packet+7,w,c
 14954  00332E  1025               	iorwf	??_ARPV4_Packet+23,w,c
 14955  003330  6E29               	movwf	(??_ARPV4_Packet+27)& (0+255),c
 14956  003332  500E               	movf	??_ARPV4_Packet,w,c
 14957  003334  1026               	iorwf	??_ARPV4_Packet+24,w,c
 14958  003336  6E2A               	movwf	(??_ARPV4_Packet+28)& (0+255),c
 14959  003338  500F               	movf	??_ARPV4_Packet+1,w,c
 14960  00333A  1027               	iorwf	??_ARPV4_Packet+25,w,c
 14961  00333C  6E2B               	movwf	(??_ARPV4_Packet+29)& (0+255),c
 14962  00333E  5010               	movf	??_ARPV4_Packet+2,w,c
 14963  003340  1028               	iorwf	??_ARPV4_Packet+26,w,c
 14964  003342  6E2C               	movwf	(??_ARPV4_Packet+30)& (0+255),c
 14965  003344  5011               	movf	??_ARPV4_Packet+3,w,c
 14966  003346  1029               	iorwf	??_ARPV4_Packet+27,w,c
 14967  003348  6E2D               	movwf	(??_ARPV4_Packet+31)& (0+255),c
 14968  00334A  0012               	return	
 14969  00334C                     __end_ofPL56:
 14970                           	opt stack 0
 14971  00334C                     PL112:
 14972                           	opt stack 21
 14973  00334C  0E00               	movlw	0
 14974  00334E  14DE               	andwf	postinc2,w,c
 14975  003350  6E12               	movwf	(??_ARPV4_Packet+4)& (0+255),c
 14976  003352  0EFF               	movlw	255
 14977  003354  14DE               	andwf	postinc2,w,c
 14978  003356  6E13               	movwf	(??_ARPV4_Packet+5)& (0+255),c
 14979  003358  0E00               	movlw	0
 14980  00335A  14DE               	andwf	postinc2,w,c
 14981  00335C  6E14               	movwf	(??_ARPV4_Packet+6)& (0+255),c
 14982  00335E  0E00               	movlw	0
 14983  003360  14DE               	andwf	postinc2,w,c
 14984  003362  6E15               	movwf	(??_ARPV4_Packet+7)& (0+255),c
 14985  003364  C014  F015         	movff	??_ARPV4_Packet+6,??_ARPV4_Packet+7
 14986  003368  C013  F014         	movff	??_ARPV4_Packet+5,??_ARPV4_Packet+6
 14987  00336C  C012  F013         	movff	??_ARPV4_Packet+4,??_ARPV4_Packet+5
 14988  003370  6A12               	clrf	??_ARPV4_Packet+4,c
 14989  003372  0012               	return	
 14990  003374                     __end_ofPL112:
 14991                           	opt stack 0
 14992  003374                     PL126:
 14993                           	opt stack 21
 14994  003374  6E0E               	movwf	??_ARPV4_Packet& (0+255),c
 14995  003376  6A0F               	clrf	(??_ARPV4_Packet+1)& (0+255),c
 14996  003378  6A10               	clrf	(??_ARPV4_Packet+2)& (0+255),c
 14997  00337A  6A11               	clrf	(??_ARPV4_Packet+3)& (0+255),c
 14998  00337C  C00E  F011         	movff	??_ARPV4_Packet,??_ARPV4_Packet+3
 14999  003380  6A10               	clrf	??_ARPV4_Packet+2,c
 15000  003382  6A0F               	clrf	??_ARPV4_Packet+1,c
 15001  003384  6A0E               	clrf	??_ARPV4_Packet,c
 15002  003386  0012               	return	
 15003  003388                     __end_ofPL126:
 15004                           	opt stack 0
 15005  003388                     PL130:
 15006                           	opt stack 21
 15007  003388  EE20 F00C          	lfsr	2,12
 15008  00338C  5036               	movf	ARPV4_Packet@entryPointer,w,c
 15009  00338E  26D9               	addwf	fsr2l,f,c
 15010  003390  5037               	movf	ARPV4_Packet@entryPointer+1,w,c
 15011  003392  22DA               	addwfc	fsr2h,f,c
 15012  003394  6ADF               	clrf	indf2,c
 15013  003396  EE20  F040         	lfsr	2,ARPV4_Packet@header+8
 15014  00339A  C036  FFE1         	movff	ARPV4_Packet@entryPointer,fsr1l
 15015  00339E  C037  FFE2         	movff	ARPV4_Packet@entryPointer+1,fsr1h
 15016  0033A2  0C05               	retlw	5
 15017  0033A4                     __end_ofPL130:
 15018                           	opt stack 0
 15019  0033A4                     PL140:
 15020                           	opt stack 21
 15021  0033A4  C017  F016         	movff	??_ARPV4_Packet+9,??_ARPV4_Packet+8
 15022  0033A8  C018  F017         	movff	??_ARPV4_Packet+10,??_ARPV4_Packet+9
 15023  0033AC  C019  F018         	movff	??_ARPV4_Packet+11,??_ARPV4_Packet+10
 15024  0033B0  6A19               	clrf	??_ARPV4_Packet+11,c
 15025  0033B2  6A1A               	clrf	(??_ARPV4_Packet+12)& (0+255),c
 15026  0033B4  5017               	movf	??_ARPV4_Packet+9,w,c
 15027  0033B6  6E1B               	movwf	(??_ARPV4_Packet+13)& (0+255),c
 15028  0033B8  6A1C               	clrf	(??_ARPV4_Packet+14)& (0+255),c
 15029  0033BA  6A1D               	clrf	(??_ARPV4_Packet+15)& (0+255),c
 15030  0033BC  0C00               	retlw	0
 15031  0033BE                     __end_ofPL140:
 15032                           	opt stack 0
 15033  0033BE                     PL194:
 15034                           	opt stack 21
 15035  0033BE  5036               	movf	ARPV4_Packet@entryPointer,w,c
 15036  0033C0  26D9               	addwf	fsr2l,f,c
 15037  0033C2  5037               	movf	ARPV4_Packet@entryPointer+1,w,c
 15038  0033C4  22DA               	addwfc	fsr2h,f,c
 15039  0033C6  0012               	return	
 15040  0033C8                     __end_ofPL194:
 15041                           	opt stack 0
 15042  0033C8                     PL352:
 15043                           	opt stack 21
 15044  0033C8  0E2C               	movlw	low _arpMap
 15045  0033CA  6E36               	movwf	ARPV4_Packet@entryPointer,c
 15046  0033CC  0E02               	movlw	high _arpMap
 15047  0033CE  6E37               	movwf	ARPV4_Packet@entryPointer+1,c
 15048  0033D0  0012               	return	
 15049  0033D2                     __end_ofPL352:
 15050                           	opt stack 0
 15051                           tosu	equ	0xFFF
 15052                           tosh	equ	0xFFE
 15053                           tosl	equ	0xFFD
 15054                           pclath	equ	0xFFA
 15055                           tblptru	equ	0xFF8
 15056                           tblptrh	equ	0xFF7
 15057                           tblptrl	equ	0xFF6
 15058                           tablat	equ	0xFF5
 15059                           prodh	equ	0xFF4
 15060                           prodl	equ	0xFF3
 15061                           intcon	equ	0xFF2
 15062                           indf0	equ	0xFEF
 15063                           postinc0	equ	0xFEE
 15064                           fsr0h	equ	0xFEA
 15065                           fsr0l	equ	0xFE9
 15066                           wreg	equ	0xFE8
 15067                           postinc1	equ	0xFE6
 15068                           plusw1	equ	0xFE3
 15069                           fsr1h	equ	0xFE2
 15070                           fsr1l	equ	0xFE1
 15071                           bsr	equ	0xFE0
 15072                           indf2	equ	0xFDF
 15073                           postinc2	equ	0xFDE
 15074                           postdec2	equ	0xFDD
 15075                           plusw2	equ	0xFDB
 15076                           fsr2h	equ	0xFDA
 15077                           fsr2l	equ	0xFD9
 15078                           status	equ	0xFD8
 15079                           
 15080 ;; *************** function _ETH_ReadBlock *****************
 15081 ;; Defined at:
 15082 ;;		line 491 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 15083 ;; Parameters:    Size  Location     Type
 15084 ;;  buffer          2    2[COMRAM] PTR void 
 15085 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), 
 15086 ;;		 -> DEMO_UDP_Recv@str(32), data(2), idle_packet(2), main@str(32), 
 15087 ;;		 -> STR_5(13), STR_4(17), udpHeader(8), tcpHeader(20), 
 15088 ;;		 -> Network_Read@debug_str(80), Network_Read@header(14), ipv4Header(20), ICMP_Receive@icmpHdr(8), 
 15089 ;;		 -> DHCP_Handler@ethPktMAC(6), ARPV4_Packet@header(28), NULL(0), 
 15090 ;;  length          2    4[COMRAM] unsigned int 
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;  readCount       2    9[COMRAM] unsigned int 
 15093 ;;  p               2    7[COMRAM] PTR unsigned char 
 15094 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@str2(16), DEMO_UDP_Recv@str1(16), 
 15095 ;;		 -> DEMO_UDP_Recv@str(32), data(2), idle_packet(2), main@str(32), 
 15096 ;;		 -> STR_5(13), STR_4(17), udpHeader(8), tcpHeader(20), 
 15097 ;;		 -> Network_Read@debug_str(80), Network_Read@header(14), ipv4Header(20), ICMP_Receive@icmpHdr(8), 
 15098 ;;		 -> DHCP_Handler@ethPktMAC(6), ARPV4_Packet@header(28), NULL(0), 
 15099 ;; Return value:  Size  Location     Type
 15100 ;;                  2    2[COMRAM] unsigned int 
 15101 ;; Registers used:
 15102 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15103 ;; Tracked objects:
 15104 ;;		On entry : 0/2
 15105 ;;		On exit  : 0/0
 15106 ;;		Unchanged: 0/0
 15107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15109 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15112 ;;Total ram usage:        9 bytes
 15113 ;; Hardware stack levels used:    1
 15114 ;; Hardware stack levels required when called:    4
 15115 ;; This function calls:
 15116 ;;		_SPI_ExchangeByte
 15117 ;; This function is called by:
 15118 ;;		_ARPV4_Packet
 15119 ;;		_ICMP_Receive
 15120 ;;		_IPV4_Packet
 15121 ;;		_Network_Read
 15122 ;;		_TCP_PayloadSave
 15123 ;;		_TCP_Recv
 15124 ;;		_UDP_Receive
 15125 ;;		_DHCP_Handler
 15126 ;;		_UDP_ReadBlock
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130                           	psect	text50
 15131  0052FE                     __ptext50:
 15132                           	opt stack 0
 15133  0052FE                     _ETH_ReadBlock:
 15134                           	opt stack 22
 15135                           
 15136                           ;enc28J60.c: 493: uint16_t readCount = length;
 15137                           
 15138                           ;incstack = 0
 15139  0052FE  C005  F00A         	movff	ETH_ReadBlock@length,ETH_ReadBlock@readCount
 15140  005302  C006  F00B         	movff	ETH_ReadBlock@length+1,ETH_ReadBlock@readCount+1
 15141                           
 15142                           ;enc28J60.c: 494: char *p = buffer;
 15143  005306  C003  F008         	movff	ETH_ReadBlock@buffer,ETH_ReadBlock@p
 15144  00530A  C004  F009         	movff	ETH_ReadBlock@buffer+1,ETH_ReadBlock@p+1
 15145                           
 15146                           ;enc28J60.c: 496: if (rxPacketStatusVector.byteCount < length)
 15147  00530E  5005               	movf	ETH_ReadBlock@length,w,c
 15148  005310  0102               	movlb	2	; () banked
 15149  005312  5D28               	subwf	_rxPacketStatusVector& (0+255),w,b
 15150  005314  5006               	movf	ETH_ReadBlock@length+1,w,c
 15151  005316  5929               	subwfb	(_rxPacketStatusVector+1)& (0+255),w,b
 15152  005318  E204               	bc	l534
 15153                           
 15154                           ; BSR set to: 2
 15155                           ;enc28J60.c: 497: readCount = rxPacketStatusVector.byteCount;
 15156  00531A  C228  F00A         	movff	_rxPacketStatusVector,ETH_ReadBlock@readCount
 15157  00531E  C229  F00B         	movff	_rxPacketStatusVector+1,ETH_ReadBlock@readCount+1
 15158  005322                     l534:
 15159                           
 15160                           ; BSR set to: 2
 15161                           ;enc28J60.c: 498: length = readCount;
 15162  005322  C00A  F005         	movff	ETH_ReadBlock@readCount,ETH_ReadBlock@length
 15163  005326  C00B  F006         	movff	ETH_ReadBlock@readCount+1,ETH_ReadBlock@length+1
 15164                           
 15165                           ; BSR set to: 2
 15166                           
 15167                           ;enc28J60.c: 499: do{LATD3 = 0;} while(0);
 15168  00532A  968C               	bcf	3980,3,c	;volatile
 15169                           
 15170                           ; BSR set to: 2
 15171                           ;enc28J60.c: 500: SPI_ExchangeByte(rbm_inst);
 15172  00532C  0E3A               	movlw	58
 15173  00532E  EC42  F02F         	call	_SPI_ExchangeByte
 15174                           
 15175                           ;enc28J60.c: 501: while (length--) *p++ = SPI_ExchangeByte(0);
 15176  005332  D017               	goto	l8282
 15177  005334                     l8278:
 15178  005334  C008  FFF6         	movff	ETH_ReadBlock@p,tblptrl
 15179  005338  C009  FFF7         	movff	ETH_ReadBlock@p+1,tblptrh
 15180  00533C  0E00               	movlw	low (__smallconst shr (0+16))
 15181  00533E  6EF8               	movwf	tblptru,c
 15182  005340  0E00               	movlw	0
 15183  005342  EC42  F02F         	call	_SPI_ExchangeByte
 15184  005346  6E07               	movwf	??_ETH_ReadBlock& (0+255),c
 15185  005348  0E0F               	movlw	(high __ramtop+-1)
 15186  00534A  64F7               	cpfsgt	tblptrh,c
 15187  00534C  D004               	bra	u10967
 15188  00534E  C007  FFF5         	movff	??_ETH_ReadBlock,tablat
 15189  005352  000C               	tblwt		*
 15190  005354  D004               	bra	u10960
 15191  005356                     u10967:
 15192  005356  EC3C  F011         	call	PL24	;call to abstracted procedure
 15193  00535A  C007  FFEF         	movff	??_ETH_ReadBlock,indf0
 15194  00535E                     u10960:
 15195  00535E  4A08               	infsnz	ETH_ReadBlock@p,f,c
 15196  005360  2A09               	incf	ETH_ReadBlock@p+1,f,c
 15197  005362                     l8282:
 15198  005362  0605               	decf	ETH_ReadBlock@length,f,c
 15199  005364  A0D8               	btfss	status,0,c
 15200  005366  0606               	decf	ETH_ReadBlock@length+1,f,c
 15201  005368  2805               	incf	ETH_ReadBlock@length,w,c
 15202  00536A  E1E4               	bnz	l8278
 15203  00536C  2806               	incf	ETH_ReadBlock@length+1,w,c
 15204  00536E  E1E2               	bnz	l8278
 15205                           
 15206                           ;enc28J60.c: 502: do{LATD3 = 1;} while(0);
 15207  005370  868C               	bsf	3980,3,c	;volatile
 15208                           
 15209                           ;enc28J60.c: 504: return readCount;
 15210  005372  C00A  F003         	movff	ETH_ReadBlock@readCount,?_ETH_ReadBlock
 15211  005376  C00B  F004         	movff	ETH_ReadBlock@readCount+1,?_ETH_ReadBlock+1
 15212  00537A  0012               	return		;funcret
 15213  00537C                     __end_of_ETH_ReadBlock:
 15214                           	opt stack 0
 15215                           tosu	equ	0xFFF
 15216                           tosh	equ	0xFFE
 15217                           tosl	equ	0xFFD
 15218                           pclath	equ	0xFFA
 15219                           tblptru	equ	0xFF8
 15220                           tblptrh	equ	0xFF7
 15221                           tblptrl	equ	0xFF6
 15222                           tablat	equ	0xFF5
 15223                           prodh	equ	0xFF4
 15224                           prodl	equ	0xFF3
 15225                           intcon	equ	0xFF2
 15226                           indf0	equ	0xFEF
 15227                           postinc0	equ	0xFEE
 15228                           fsr0h	equ	0xFEA
 15229                           fsr0l	equ	0xFE9
 15230                           wreg	equ	0xFE8
 15231                           postinc1	equ	0xFE6
 15232                           plusw1	equ	0xFE3
 15233                           fsr1h	equ	0xFE2
 15234                           fsr1l	equ	0xFE1
 15235                           bsr	equ	0xFE0
 15236                           indf2	equ	0xFDF
 15237                           postinc2	equ	0xFDE
 15238                           postdec2	equ	0xFDD
 15239                           plusw2	equ	0xFDB
 15240                           fsr2h	equ	0xFDA
 15241                           fsr2l	equ	0xFD9
 15242                           status	equ	0xFD8
 15243                           
 15244 ;; *************** function _ETH_EventHandler *****************
 15245 ;; Defined at:
 15246 ;;		line 194 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;		None
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;  phstat2_val     3   15[COMRAM] struct .
 15251 ;;  eir_val         1   18[COMRAM] struct .
 15252 ;; Return value:  Size  Location     Type
 15253 ;;		None               void
 15254 ;; Registers used:
 15255 ;;		wreg, status,2, status,0, cstack
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/1
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;Total ram usage:        4 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; Hardware stack levels required when called:    8
 15268 ;; This function calls:
 15269 ;;		_ENC28_Bfc
 15270 ;;		_ENC28_Bfs
 15271 ;;		_ENC28_Rcr16
 15272 ;;		_ENC28_Rcr8
 15273 ;;		_ENC28_Wcr16
 15274 ;;		_ENC28_Wcr8
 15275 ;;		_ETH_CheckLinkUp
 15276 ;; This function is called by:
 15277 ;;		_Network_Manage
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           	psect	text51
 15282  00516E                     __ptext51:
 15283                           	opt stack 0
 15284  00516E                     _ETH_EventHandler:
 15285                           	opt stack 21
 15286                           
 15287                           ;enc28J60.c: 196: eir_t eir_val;
 15288                           ;enc28J60.c: 197: phstat2_t phstat2_val;
 15289                           ;enc28J60.c: 200: if (((PORTBbits.RB0 == 0)?1:0))
 15290                           
 15291                           ;incstack = 0
 15292  00516E  B081               	btfsc	3969,0,c	;volatile
 15293  005170  0012               	return	
 15294                           
 15295                           ;enc28J60.c: 201: {
 15296                           ;enc28J60.c: 204: eir_val.val = ENC28_Rcr8(J60_EIR);
 15297  005172  0EFC               	movlw	252
 15298  005174  EC33  F02E         	call	_ENC28_Rcr8
 15299  005178  6E13               	movwf	ETH_EventHandler@eir_val,c
 15300                           
 15301                           ;enc28J60.c: 205: phstat2_val.val = ENC28_Rcr16(J60_PHSTAT2);
 15302  00517A  0E11               	movlw	17
 15303  00517C  EC25  F02C         	call	_ENC28_Rcr16
 15304  005180  C005  F010         	movff	?_ENC28_Rcr16,ETH_EventHandler@phstat2_val
 15305  005184  C006  F011         	movff	?_ENC28_Rcr16+1,ETH_EventHandler@phstat2_val+1
 15306                           
 15307                           ;enc28J60.c: 207: if (eir_val.LINKIF)
 15308  005188  A813               	btfss	ETH_EventHandler@eir_val,4,c
 15309  00518A  D01E               	goto	l9426
 15310                           
 15311                           ;enc28J60.c: 208: {
 15312                           ;enc28J60.c: 209: ethData.linkChange = 1;
 15313  00518C  0101               	movlb	1	; () banked
 15314  00518E  89B5               	bsf	_ethData& (0+255),4,b	;volatile
 15315                           
 15316                           ;enc28J60.c: 210: ethData.up = 0;
 15317  005190  95B5               	bcf	_ethData& (0+255),2,b	;volatile
 15318                           
 15319                           ; BSR set to: 1
 15320                           ;enc28J60.c: 211: if(ETH_CheckLinkUp())
 15321  005192  ECDC  F02E         	call	_ETH_CheckLinkUp	;wreg free
 15322                           
 15323                           ;enc28J60.c: 213: }
 15324                           ;enc28J60.c: 214: if (phstat2_val.DPXSTAT)
 15325                           
 15326                           ;enc28J60.c: 212: {
 15327  005196  A611               	btfss	ETH_EventHandler@phstat2_val+1,3,c
 15328  005198  D00C               	goto	l9424
 15329                           
 15330                           ;enc28J60.c: 215: {
 15331                           ;enc28J60.c: 216: ENC28_Wcr16(J60_MABBIPG, 0x15);
 15332  00519A  6A06               	clrf	ENC28_Wcr16@v+1,c
 15333  00519C  0E15               	movlw	21
 15334  00519E  6E05               	movwf	ENC28_Wcr16@v,c
 15335  0051A0  0E84               	movlw	132
 15336  0051A2  EC9A  F02C         	call	_ENC28_Wcr16
 15337                           
 15338                           ;enc28J60.c: 217: ENC28_Bfs(J60_PHSTAT2,0x01);
 15339  0051A6  0E01               	movlw	1
 15340  0051A8  6E05               	movwf	ENC28_Bfs@bits,c
 15341  0051AA  0E11               	movlw	17
 15342  0051AC  EC70  F02E         	call	_ENC28_Bfs
 15343                           
 15344                           ;enc28J60.c: 218: }
 15345  0051B0  D00B               	goto	l9426
 15346  0051B2                     l9424:
 15347                           
 15348                           ;enc28J60.c: 219: else
 15349                           ;enc28J60.c: 220: {
 15350                           ;enc28J60.c: 221: ENC28_Wcr16(J60_MABBIPG, 0x12);
 15351  0051B2  6A06               	clrf	ENC28_Wcr16@v+1,c
 15352  0051B4  0E12               	movlw	18
 15353  0051B6  6E05               	movwf	ENC28_Wcr16@v,c
 15354  0051B8  0E84               	movlw	132
 15355  0051BA  EC9A  F02C         	call	_ENC28_Wcr16
 15356                           
 15357                           ;enc28J60.c: 222: ENC28_Bfc(J60_PHSTAT2,0x01);
 15358  0051BE  0E01               	movlw	1
 15359  0051C0  6E05               	movwf	ENC28_Bfc@bits,c
 15360  0051C2  0E11               	movlw	17
 15361  0051C4  EC61  F02E         	call	_ENC28_Bfc
 15362  0051C8                     l9426:
 15363                           
 15364                           ;enc28J60.c: 223: }
 15365                           ;enc28J60.c: 224: }
 15366                           ;enc28J60.c: 225: if(eir_val.TXIF)
 15367  0051C8  A613               	btfss	ETH_EventHandler@eir_val,3,c
 15368  0051CA  D007               	goto	l9432
 15369                           
 15370                           ;enc28J60.c: 226: {
 15371                           ;enc28J60.c: 227: ethData.bufferBusy = 0;
 15372  0051CC  0101               	movlb	1	; () banked
 15373  0051CE  9BB5               	bcf	_ethData& (0+255),5,b	;volatile
 15374                           
 15375                           ; BSR set to: 1
 15376                           ;enc28J60.c: 228: ENC28_Bfc(J60_EIR,0x08);
 15377  0051D0  0E08               	movlw	8
 15378  0051D2  6E05               	movwf	ENC28_Bfc@bits,c
 15379  0051D4  0EFC               	movlw	252
 15380  0051D6  EC61  F02E         	call	_ENC28_Bfc
 15381  0051DA                     l9432:
 15382                           
 15383                           ;enc28J60.c: 229: }
 15384                           ;enc28J60.c: 230: if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT))
 15385  0051DA  BC13               	btfsc	ETH_EventHandler@eir_val,6,c
 15386  0051DC  D005               	goto	l426
 15387  0051DE  0E59               	movlw	89
 15388  0051E0  EC33  F02E         	call	_ENC28_Rcr8
 15389  0051E4  0900               	iorlw	0
 15390  0051E6  E002               	bz	l9436
 15391  0051E8                     l426:
 15392                           
 15393                           ;enc28J60.c: 231: {
 15394                           ;enc28J60.c: 232: ethData.pktReady = 1;
 15395  0051E8  0101               	movlb	1	; () banked
 15396  0051EA  83B5               	bsf	_ethData& (0+255),1,b	;volatile
 15397  0051EC                     l9436:
 15398                           
 15399                           ;enc28J60.c: 233: }
 15400                           ;enc28J60.c: 234: ENC28_Wcr8(J60_EIR, eir_val.val);
 15401  0051EC  C013  F005         	movff	ETH_EventHandler@eir_val,ENC28_Wcr8@v
 15402  0051F0  0EFC               	movlw	252
 15403  0051F2  EF52  F02E         	goto	_ENC28_Wcr8
 15404  0051F6                     __end_of_ETH_EventHandler:
 15405                           	opt stack 0
 15406                           tosu	equ	0xFFF
 15407                           tosh	equ	0xFFE
 15408                           tosl	equ	0xFFD
 15409                           pclath	equ	0xFFA
 15410                           tblptru	equ	0xFF8
 15411                           tblptrh	equ	0xFF7
 15412                           tblptrl	equ	0xFF6
 15413                           tablat	equ	0xFF5
 15414                           prodh	equ	0xFF4
 15415                           prodl	equ	0xFF3
 15416                           intcon	equ	0xFF2
 15417                           indf0	equ	0xFEF
 15418                           postinc0	equ	0xFEE
 15419                           fsr0h	equ	0xFEA
 15420                           fsr0l	equ	0xFE9
 15421                           wreg	equ	0xFE8
 15422                           postinc1	equ	0xFE6
 15423                           plusw1	equ	0xFE3
 15424                           fsr1h	equ	0xFE2
 15425                           fsr1l	equ	0xFE1
 15426                           bsr	equ	0xFE0
 15427                           indf2	equ	0xFDF
 15428                           postinc2	equ	0xFDE
 15429                           postdec2	equ	0xFDD
 15430                           plusw2	equ	0xFDB
 15431                           fsr2h	equ	0xFDA
 15432                           fsr2l	equ	0xFD9
 15433                           status	equ	0xFD8
 15434                           
 15435 ;; *************** function _DHCP_Manage *****************
 15436 ;; Defined at:
 15437 ;;		line 130 in file "../../TCPIP Library/source/dhcp_client.c"
 15438 ;; Parameters:    Size  Location     Type
 15439 ;;		None
 15440 ;; Auto vars:     Size  Location     Type
 15441 ;;		None
 15442 ;; Return value:  Size  Location     Type
 15443 ;;		None               void
 15444 ;; Registers used:
 15445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15446 ;; Tracked objects:
 15447 ;;		On entry : F/1
 15448 ;;		On exit  : E/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15455 ;;Total ram usage:        0 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:   11
 15458 ;; This function calls:
 15459 ;;		_DHCP_Request
 15460 ;; This function is called by:
 15461 ;;		_Network_Manage
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text52
 15466  0051F6                     __ptext52:
 15467                           	opt stack 0
 15468  0051F6                     _DHCP_Manage:
 15469                           	opt stack 18
 15470                           
 15471                           ; BSR set to: 1
 15472                           ;dhcp_client.c: 132: if(ethData.linkChange)
 15473                           
 15474                           ;incstack = 0
 15475  0051F6  A9B5               	btfss	_ethData& (0+255),4,b	;volatile
 15476  0051F8  D015               	goto	l9454
 15477                           
 15478                           ; BSR set to: 1
 15479                           ;dhcp_client.c: 133: {
 15480                           ;dhcp_client.c: 134: if (clientState == BOUND && dhcpLeaseTime)
 15481  0051FA  0E05               	movlw	5
 15482  0051FC  185D               	xorwf	_clientState,w,c
 15483  0051FE  E10B               	bnz	l9448
 15484                           
 15485                           ; BSR set to: 1
 15486  005200  D838               	call	PL284	;call to abstracted procedure
 15487  005202  E009               	bz	l9448
 15488                           
 15489                           ; BSR set to: 1
 15490                           ;dhcp_client.c: 135: {
 15491                           ;dhcp_client.c: 136: dhcpServerId = 0xFFFFFFFF;
 15492  005204  0102               	movlb	2	; () banked
 15493  005206  691C               	setf	_dhcpServerId& (0+255),b
 15494  005208  691D               	setf	(_dhcpServerId+1)& (0+255),b
 15495  00520A  691E               	setf	(_dhcpServerId+2)& (0+255),b
 15496  00520C  691F               	setf	(_dhcpServerId+3)& (0+255),b
 15497                           
 15498                           ; BSR set to: 2
 15499                           ;dhcp_client.c: 137: DHCP_Request(DHCP_REQUEST);
 15500  00520E  0E03               	movlw	3
 15501  005210  EC1B  F01F         	call	_DHCP_Request
 15502                           
 15503                           ;dhcp_client.c: 138: }
 15504  005214  D004               	goto	l9452
 15505  005216                     l9448:
 15506                           
 15507                           ; BSR set to: 1
 15508                           ;dhcp_client.c: 139: else
 15509                           ;dhcp_client.c: 140: {
 15510                           ;dhcp_client.c: 141: clientState = INIT;
 15511  005216  0E01               	movlw	1
 15512  005218  6E5D               	movwf	_clientState,c
 15513                           
 15514                           ; BSR set to: 1
 15515                           ;dhcp_client.c: 142: DHCP_Request(DHCP_DISCOVER);
 15516  00521A  EC1B  F01F         	call	_DHCP_Request
 15517  00521E                     l9452:
 15518                           
 15519                           ; BSR set to: 0
 15520                           ;dhcp_client.c: 143: }
 15521                           ;dhcp_client.c: 144: ethData.linkChange=0;
 15522  00521E  0101               	movlb	1	; () banked
 15523  005220  99B5               	bcf	_ethData& (0+255),4,b	;volatile
 15524                           
 15525                           ;dhcp_client.c: 145: }
 15526  005222  0012               	return	
 15527  005224                     l9454:
 15528                           
 15529                           ; BSR set to: 1
 15530                           ;dhcp_client.c: 146: else if (clientState == INIT || clientState == INIT_REBOOT)
 15531  005224  045D               	decf	_clientState,w,c
 15532  005226  E003               	bz	l9458
 15533                           
 15534                           ; BSR set to: 1
 15535  005228  0E02               	movlw	2
 15536  00522A  185D               	xorwf	_clientState,w,c
 15537  00522C  E104               	bnz	l9462
 15538  00522E                     l9458:
 15539                           
 15540                           ; BSR set to: 1
 15541                           ;dhcp_client.c: 147: {
 15542                           ;dhcp_client.c: 148: clientState = INIT;
 15543  00522E  0E01               	movlw	1
 15544  005230  6E5D               	movwf	_clientState,c
 15545                           
 15546                           ; BSR set to: 1
 15547                           ;dhcp_client.c: 149: DHCP_Request(DHCP_DISCOVER);
 15548  005232  EF1B  F01F         	goto	_DHCP_Request
 15549  005236                     l9462:
 15550                           
 15551                           ; BSR set to: 1
 15552                           ;dhcp_client.c: 151: else if ((dhcpLeaseTime < 100)&& clientState == BOUND)
 15553  005236  51C3               	movf	(_dhcpLeaseTime+3)& (0+255),w,b
 15554  005238  11C2               	iorwf	(_dhcpLeaseTime+2)& (0+255),w,b
 15555  00523A  11C1               	iorwf	(_dhcpLeaseTime+1)& (0+255),w,b
 15556  00523C  E109               	bnz	l9468
 15557  00523E  0E64               	movlw	100
 15558  005240  5DC0               	subwf	_dhcpLeaseTime& (0+255),w,b
 15559  005242  E206               	bc	l9468
 15560                           
 15561                           ; BSR set to: 1
 15562  005244  0E05               	movlw	5
 15563  005246  185D               	xorwf	_clientState,w,c
 15564  005248  E103               	bnz	l9468
 15565                           
 15566                           ; BSR set to: 1
 15567                           ;dhcp_client.c: 152: {
 15568                           ;dhcp_client.c: 153: DHCP_Request(DHCP_REQUEST);
 15569  00524A  0E03               	movlw	3
 15570  00524C  EF1B  F01F         	goto	_DHCP_Request
 15571  005250                     l9468:
 15572                           
 15573                           ; BSR set to: 1
 15574                           ;dhcp_client.c: 155: else
 15575                           ;dhcp_client.c: 156: {
 15576                           ;dhcp_client.c: 157: if(clientState == BOUND && dhcpLeaseTime) dhcpLeaseTime --;
 15577  005250  0E05               	movlw	5
 15578  005252  185D               	xorwf	_clientState,w,c
 15579  005254  E108               	bnz	l9474
 15580                           
 15581                           ; BSR set to: 1
 15582  005256  D80D               	call	PL284	;call to abstracted procedure
 15583  005258  E006               	bz	l9474
 15584                           
 15585                           ; BSR set to: 1
 15586  00525A  07C0               	decf	_dhcpLeaseTime& (0+255),f,b
 15587  00525C  0E00               	movlw	0
 15588  00525E  5BC1               	subwfb	(_dhcpLeaseTime+1)& (0+255),f,b
 15589  005260  5BC2               	subwfb	(_dhcpLeaseTime+2)& (0+255),f,b
 15590  005262  5BC3               	subwfb	(_dhcpLeaseTime+3)& (0+255),f,b
 15591  005264  0C00               	retlw	0
 15592  005266                     l9474:
 15593                           
 15594                           ; BSR set to: 1
 15595                           ;dhcp_client.c: 158: else if (!dhcpLeaseTime) clientState = INIT_REBOOT;
 15596  005266  D805               	call	PL284	;call to abstracted procedure
 15597  005268  A4D8               	btfss	status,2,c
 15598  00526A  0012               	return	
 15599                           
 15600                           ; BSR set to: 1
 15601  00526C  0E02               	movlw	2
 15602  00526E  6E5D               	movwf	_clientState,c
 15603  005270  0C02               	retlw	2
 15604  005272                     __end_of_DHCP_Manage:
 15605                           	opt stack 0
 15606  005272                     PL284:
 15607                           	opt stack 18
 15608  005272  51C0               	movf	_dhcpLeaseTime& (0+255),w,b
 15609  005274  11C1               	iorwf	(_dhcpLeaseTime+1)& (0+255),w,b
 15610  005276  11C2               	iorwf	(_dhcpLeaseTime+2)& (0+255),w,b
 15611  005278  11C3               	iorwf	(_dhcpLeaseTime+3)& (0+255),w,b
 15612  00527A  0012               	return	
 15613  00527C                     __end_ofPL284:
 15614                           	opt stack 0
 15615                           tosu	equ	0xFFF
 15616                           tosh	equ	0xFFE
 15617                           tosl	equ	0xFFD
 15618                           pclath	equ	0xFFA
 15619                           tblptru	equ	0xFF8
 15620                           tblptrh	equ	0xFF7
 15621                           tblptrl	equ	0xFF6
 15622                           tablat	equ	0xFF5
 15623                           prodh	equ	0xFF4
 15624                           prodl	equ	0xFF3
 15625                           intcon	equ	0xFF2
 15626                           indf0	equ	0xFEF
 15627                           postinc0	equ	0xFEE
 15628                           fsr0h	equ	0xFEA
 15629                           fsr0l	equ	0xFE9
 15630                           wreg	equ	0xFE8
 15631                           postinc1	equ	0xFE6
 15632                           plusw1	equ	0xFE3
 15633                           fsr1h	equ	0xFE2
 15634                           fsr1l	equ	0xFE1
 15635                           bsr	equ	0xFE0
 15636                           indf2	equ	0xFDF
 15637                           postinc2	equ	0xFDE
 15638                           postdec2	equ	0xFDD
 15639                           plusw2	equ	0xFDB
 15640                           fsr2h	equ	0xFDA
 15641                           fsr2l	equ	0xFD9
 15642                           status	equ	0xFD8
 15643                           
 15644 ;; *************** function _DHCP_Request *****************
 15645 ;; Defined at:
 15646 ;;		line 71 in file "../../TCPIP Library/source/dhcp_client.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;  type            1    wreg     enum E592
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;  type            1   16[BANK0 ] enum E592
 15651 ;;  ethMAC          6   17[BANK0 ] struct .
 15652 ;;  msglength       2    0        unsigned int 
 15653 ;;  started         1   15[BANK0 ] unsigned char 
 15654 ;; Return value:  Size  Location     Type
 15655 ;;		None               void
 15656 ;; Registers used:
 15657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15658 ;; Tracked objects:
 15659 ;;		On entry : C/2
 15660 ;;		On exit  : F/0
 15661 ;;		Unchanged: 0/0
 15662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15664 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15666 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15667 ;;Total ram usage:        8 bytes
 15668 ;; Hardware stack levels used:    1
 15669 ;; Hardware stack levels required when called:   10
 15670 ;; This function calls:
 15671 ;;		_DHCP_WriteZeros
 15672 ;;		_ETH_GetMAC
 15673 ;;		_ETH_Write16
 15674 ;;		_ETH_Write32
 15675 ;;		_ETH_Write8
 15676 ;;		_ETH_WriteBlock
 15677 ;;		_UDP_Send
 15678 ;;		_UDP_Start
 15679 ;; This function is called by:
 15680 ;;		_DHCP_Manage
 15681 ;;		_DHCP_Handler
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           	psect	text53
 15686  003E36                     __ptext53:
 15687                           	opt stack 0
 15688  003E36                     _DHCP_Request:
 15689                           	opt stack 18
 15690                           
 15691                           ;incstack = 0
 15692                           ;DHCP_Request@type stored from wreg
 15693  003E36  0100               	movlb	0	; () banked
 15694  003E38  6F70               	movwf	DHCP_Request@type& (0+255),b
 15695                           
 15696                           ;dhcp_client.c: 78: ETH_GetMAC((char*)&ethMAC);
 15697  003E3A  0E71               	movlw	DHCP_Request@ethMAC& (0+255)
 15698  003E3C  ECBE  F02B         	call	_ETH_GetMAC
 15699                           
 15700                           ;dhcp_client.c: 83: }
 15701                           ;dhcp_client.c: 85: started = UDP_Start(0xFFFFFFFF,68,67);
 15702  003E40  EC6B  F026         	call	PL314	;call to abstracted procedure
 15703  003E44  6B6C               	clrf	(UDP_Start@srcPort+1)& (0+255),b
 15704  003E46  0E44               	movlw	68
 15705  003E48  6F6B               	movwf	UDP_Start@srcPort& (0+255),b
 15706  003E4A  6B6E               	clrf	(UDP_Start@dstPort+1)& (0+255),b
 15707  003E4C  0E43               	movlw	67
 15708  003E4E  6F6D               	movwf	UDP_Start@dstPort& (0+255),b
 15709  003E50  ECD9  F02A         	call	_UDP_Start	;wreg free
 15710  003E54  0100               	movlb	0	; () banked
 15711  003E56  6F6F               	movwf	DHCP_Request@started& (0+255),b
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;dhcp_client.c: 87: if(started==SUCCESS)
 15715  003E58  056F               	decf	DHCP_Request@started& (0+255),w,b
 15716  003E5A  A4D8               	btfss	status,2,c
 15717  003E5C  0012               	return	
 15718                           
 15719                           ; BSR set to: 0
 15720                           ;dhcp_client.c: 88: {
 15721                           ;dhcp_client.c: 89: ETH_Write32(0x01010600);
 15722  003E5E  6A03               	clrf	ETH_Write32@data,c
 15723  003E60  0E06               	movlw	6
 15724  003E62  6E04               	movwf	ETH_Write32@data+1,c
 15725  003E64  0E01               	movlw	1
 15726  003E66  6E05               	movwf	ETH_Write32@data+2,c
 15727  003E68  6E06               	movwf	ETH_Write32@data+3,c
 15728  003E6A  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15729                           
 15730                           ;dhcp_client.c: 90: ETH_Write32(xidValue);
 15731  003E6E  0E50               	movlw	80
 15732  003E70  6E03               	movwf	ETH_Write32@data,c
 15733  003E72  0E48               	movlw	72
 15734  003E74  6E04               	movwf	ETH_Write32@data+1,c
 15735  003E76  0E43               	movlw	67
 15736  003E78  6E05               	movwf	ETH_Write32@data+2,c
 15737  003E7A  0E4D               	movlw	77
 15738  003E7C  6E06               	movwf	ETH_Write32@data+3,c
 15739  003E7E  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15740                           
 15741                           ;dhcp_client.c: 91: ETH_Write32(0x00008000);
 15742  003E82  6A03               	clrf	ETH_Write32@data,c
 15743  003E84  0E80               	movlw	128
 15744  003E86  6E04               	movwf	ETH_Write32@data+1,c
 15745  003E88  6A05               	clrf	ETH_Write32@data+2,c
 15746  003E8A  6A06               	clrf	ETH_Write32@data+3,c
 15747  003E8C  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15748                           
 15749                           ;dhcp_client.c: 92: if (type == DHCP_REQUEST)
 15750  003E90  0E03               	movlw	3
 15751  003E92  0100               	movlb	0	; () banked
 15752  003E94  1970               	xorwf	DHCP_Request@type& (0+255),w,b
 15753  003E96  E104               	bnz	l9276
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;dhcp_client.c: 93: {
 15757                           ;dhcp_client.c: 94: ETH_Write32(0);
 15758  003E98  D899               	call	PL234	;call to abstracted procedure
 15759  003E9A  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15760                           
 15761                           ;dhcp_client.c: 95: }
 15762  003E9E  D003               	goto	l789
 15763  003EA0                     l9276:
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;dhcp_client.c: 96: else
 15767                           ;dhcp_client.c: 97: {
 15768                           ;dhcp_client.c: 98: ETH_Write32(ipv4Address);
 15769  003EA0  D88C               	call	PL136	;call to abstracted procedure
 15770  003EA2  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15771  003EA6                     l789:
 15772                           
 15773                           ;dhcp_client.c: 99: }
 15774                           ;dhcp_client.c: 100: ETH_Write32(0);
 15775  003EA6  D892               	call	PL234	;call to abstracted procedure
 15776  003EA8  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15777                           
 15778                           ;dhcp_client.c: 101: ETH_Write32(0);
 15779  003EAC  D88F               	call	PL234	;call to abstracted procedure
 15780  003EAE  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15781                           
 15782                           ;dhcp_client.c: 102: ETH_Write32(0);
 15783  003EB2  D88C               	call	PL234	;call to abstracted procedure
 15784  003EB4  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15785                           
 15786                           ;dhcp_client.c: 103: ETH_WriteBlock((char *)&ethMAC,6);
 15787  003EB8  D88E               	call	PL274	;call to abstracted procedure
 15788  003EBA  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 15789                           
 15790                           ;dhcp_client.c: 104: DHCP_WriteZeros(202);
 15791  003EBE  6A05               	clrf	DHCP_WriteZeros@length+1,c
 15792  003EC0  0ECA               	movlw	202
 15793  003EC2  6E04               	movwf	DHCP_WriteZeros@length,c
 15794  003EC4  ECD0  F02E         	call	_DHCP_WriteZeros	;wreg free
 15795                           
 15796                           ;dhcp_client.c: 105: ETH_Write32(0x63825363);
 15797  003EC8  0E63               	movlw	99
 15798  003ECA  6E03               	movwf	ETH_Write32@data,c
 15799  003ECC  0E53               	movlw	83
 15800  003ECE  6E04               	movwf	ETH_Write32@data+1,c
 15801  003ED0  0E82               	movlw	130
 15802  003ED2  6E05               	movwf	ETH_Write32@data+2,c
 15803  003ED4  0E63               	movlw	99
 15804  003ED6  6E06               	movwf	ETH_Write32@data+3,c
 15805  003ED8  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15806                           
 15807                           ;dhcp_client.c: 107: ETH_Write8(53);
 15808  003EDC  0E35               	movlw	53
 15809  003EDE  ECB6  F02E         	call	_ETH_Write8
 15810                           
 15811                           ;dhcp_client.c: 108: ETH_Write8(1);
 15812  003EE2  0E01               	movlw	1
 15813  003EE4  ECB6  F02E         	call	_ETH_Write8
 15814                           
 15815                           ;dhcp_client.c: 109: ETH_Write8(type);
 15816  003EE8  0100               	movlb	0	; () banked
 15817  003EEA  5170               	movf	DHCP_Request@type& (0+255),w,b
 15818  003EEC  ECB6  F02E         	call	_ETH_Write8
 15819                           
 15820                           ;dhcp_client.c: 110: if(type == DHCP_REQUEST)
 15821  003EF0  0E03               	movlw	3
 15822  003EF2  0100               	movlb	0	; () banked
 15823  003EF4  1970               	xorwf	DHCP_Request@type& (0+255),w,b
 15824  003EF6  E119               	bnz	l790
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;dhcp_client.c: 111: {
 15828                           ;dhcp_client.c: 112: ETH_Write8(54);ETH_Write8(4);ETH_Write32(dhcpServerId);
 15829  003EF8  0E36               	movlw	54
 15830  003EFA  ECB6  F02E         	call	_ETH_Write8
 15831  003EFE  0E04               	movlw	4
 15832  003F00  ECB6  F02E         	call	_ETH_Write8
 15833  003F04  C21C  F003         	movff	_dhcpServerId,ETH_Write32@data
 15834  003F08  C21D  F004         	movff	_dhcpServerId+1,ETH_Write32@data+1
 15835  003F0C  C21E  F005         	movff	_dhcpServerId+2,ETH_Write32@data+2
 15836  003F10  C21F  F006         	movff	_dhcpServerId+3,ETH_Write32@data+3
 15837  003F14  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15838                           
 15839                           ;dhcp_client.c: 113: ETH_Write8(50);ETH_Write8(4);ETH_Write32(ipv4Address);
 15840  003F18  0E32               	movlw	50
 15841  003F1A  ECB6  F02E         	call	_ETH_Write8
 15842  003F1E  0E04               	movlw	4
 15843  003F20  ECB6  F02E         	call	_ETH_Write8
 15844  003F24  D84A               	call	PL136	;call to abstracted procedure
 15845  003F26  EC6B  F02D         	call	_ETH_Write32	;wreg free
 15846  003F2A                     l790:
 15847                           
 15848                           ;dhcp_client.c: 114: }
 15849                           ;dhcp_client.c: 115: ETH_Write8(55); ETH_Write8(4); ETH_Write8(1); ETH_Write8(3); ETH_Wr
      +                          ite8(6); ETH_Write8(15);
 15850  003F2A  0E37               	movlw	55
 15851  003F2C  ECB6  F02E         	call	_ETH_Write8
 15852  003F30  0E04               	movlw	4
 15853  003F32  ECB6  F02E         	call	_ETH_Write8
 15854  003F36  0E01               	movlw	1
 15855  003F38  ECB6  F02E         	call	_ETH_Write8
 15856  003F3C  0E03               	movlw	3
 15857  003F3E  ECB6  F02E         	call	_ETH_Write8
 15858  003F42  0E06               	movlw	6
 15859  003F44  ECB6  F02E         	call	_ETH_Write8
 15860  003F48  0E0F               	movlw	15
 15861  003F4A  ECB6  F02E         	call	_ETH_Write8
 15862                           
 15863                           ;dhcp_client.c: 116: ETH_Write8(57); ETH_Write8(2); ETH_Write16(512);
 15864  003F4E  0E39               	movlw	57
 15865  003F50  ECB6  F02E         	call	_ETH_Write8
 15866  003F54  0E02               	movlw	2
 15867  003F56  ECB6  F02E         	call	_ETH_Write8
 15868  003F5A  0E02               	movlw	2
 15869  003F5C  6E04               	movwf	ETH_Write16@data+1,c
 15870  003F5E  6A03               	clrf	ETH_Write16@data,c
 15871  003F60  ECCD  F02D         	call	_ETH_Write16	;wreg free
 15872                           
 15873                           ;dhcp_client.c: 117: ETH_Write8(12); ETH_Write8(20); ETH_WriteBlock((char *)dhcpName,20)
      +                          ;
 15874  003F64  0E0C               	movlw	12
 15875  003F66  ECB6  F02E         	call	_ETH_Write8
 15876  003F6A  0E14               	movlw	20
 15877  003F6C  ECB6  F02E         	call	_ETH_Write8
 15878  003F70  0E13               	movlw	low _dhcpName
 15879  003F72  6E03               	movwf	ETH_WriteBlock@data,c
 15880  003F74  5003               	movf	ETH_WriteBlock@data,w,c
 15881  003F76  A4D8               	btfss	status,2,c
 15882  003F78  0E10               	movlw	high __smallconst
 15883  003F7A  6E04               	movwf	ETH_WriteBlock@data+1,c
 15884  003F7C  EC34  F016         	call	PL380	;call to abstracted procedure
 15885  003F80  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 15886                           
 15887                           ;dhcp_client.c: 119: ETH_Write8(61); ETH_Write8(7); ETH_Write8(1); ETH_WriteBlock((char 
      +                          *)&ethMAC,6);
 15888  003F84  0E3D               	movlw	61
 15889  003F86  ECB6  F02E         	call	_ETH_Write8
 15890  003F8A  0E07               	movlw	7
 15891  003F8C  ECB6  F02E         	call	_ETH_Write8
 15892  003F90  0E01               	movlw	1
 15893  003F92  ECB6  F02E         	call	_ETH_Write8
 15894  003F96  D81F               	call	PL274	;call to abstracted procedure
 15895  003F98  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 15896                           
 15897                           ;dhcp_client.c: 120: ETH_Write8(255);
 15898  003F9C  0EFF               	movlw	255
 15899  003F9E  ECB6  F02E         	call	_ETH_Write8
 15900                           
 15901                           ;dhcp_client.c: 122: ETH_Write8(0);
 15902  003FA2  0E00               	movlw	0
 15903  003FA4  ECB6  F02E         	call	_ETH_Write8
 15904                           
 15905                           ;dhcp_client.c: 124: UDP_Send();
 15906  003FA8  EC72  F028         	call	_UDP_Send	;wreg free
 15907                           
 15908                           ; BSR set to: 1
 15909                           ;dhcp_client.c: 125: if (type == DHCP_DISCOVER)
 15910  003FAC  0100               	movlb	0	; () banked
 15911  003FAE  0570               	decf	DHCP_Request@type& (0+255),w,b
 15912  003FB0  A4D8               	btfss	status,2,c
 15913  003FB2  0012               	return	
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;dhcp_client.c: 126: clientState=SELECTING;
 15917  003FB4  0E03               	movlw	3
 15918  003FB6  6E5D               	movwf	_clientState,c
 15919                           
 15920                           ; BSR set to: 0
 15921  003FB8  0C03               	retlw	3	;funcret
 15922  003FBA                     __end_of_DHCP_Request:
 15923                           	opt stack 0
 15924  003FBA                     PL136:
 15925                           	opt stack 18
 15926  003FBA  C1C4  F003         	movff	_ipv4Address,ETH_Write32@data
 15927  003FBE  C1C5  F004         	movff	_ipv4Address+1,ETH_Write32@data+1
 15928  003FC2  C1C6  F005         	movff	_ipv4Address+2,ETH_Write32@data+2
 15929  003FC6  C1C7  F006         	movff	_ipv4Address+3,ETH_Write32@data+3
 15930  003FCA  0012               	return	
 15931  003FCC                     __end_ofPL136:
 15932                           	opt stack 0
 15933  003FCC                     PL234:
 15934                           	opt stack 18
 15935  003FCC  6A03               	clrf	ETH_Write32@data,c
 15936  003FCE  6A04               	clrf	ETH_Write32@data+1,c
 15937  003FD0  6A05               	clrf	ETH_Write32@data+2,c
 15938  003FD2  6A06               	clrf	ETH_Write32@data+3,c
 15939  003FD4  0012               	return	
 15940  003FD6                     __end_ofPL234:
 15941                           	opt stack 0
 15942  003FD6                     PL274:
 15943                           	opt stack 18
 15944  003FD6  0E71               	movlw	low DHCP_Request@ethMAC
 15945  003FD8  6E03               	movwf	ETH_WriteBlock@data,c
 15946  003FDA  6A04               	clrf	ETH_WriteBlock@data+1,c
 15947  003FDC  6A06               	clrf	ETH_WriteBlock@length+1,c
 15948  003FDE  0E06               	movlw	6
 15949  003FE0  6E05               	movwf	ETH_WriteBlock@length,c
 15950  003FE2  0C06               	retlw	6
 15951  003FE4                     __end_ofPL274:
 15952                           	opt stack 0
 15953                           tosu	equ	0xFFF
 15954                           tosh	equ	0xFFE
 15955                           tosl	equ	0xFFD
 15956                           pclath	equ	0xFFA
 15957                           tblptru	equ	0xFF8
 15958                           tblptrh	equ	0xFF7
 15959                           tblptrl	equ	0xFF6
 15960                           tablat	equ	0xFF5
 15961                           prodh	equ	0xFF4
 15962                           prodl	equ	0xFF3
 15963                           intcon	equ	0xFF2
 15964                           indf0	equ	0xFEF
 15965                           postinc0	equ	0xFEE
 15966                           fsr0h	equ	0xFEA
 15967                           fsr0l	equ	0xFE9
 15968                           wreg	equ	0xFE8
 15969                           postinc1	equ	0xFE6
 15970                           plusw1	equ	0xFE3
 15971                           fsr1h	equ	0xFE2
 15972                           fsr1l	equ	0xFE1
 15973                           bsr	equ	0xFE0
 15974                           indf2	equ	0xFDF
 15975                           postinc2	equ	0xFDE
 15976                           postdec2	equ	0xFDD
 15977                           plusw2	equ	0xFDB
 15978                           fsr2h	equ	0xFDA
 15979                           fsr2l	equ	0xFD9
 15980                           status	equ	0xFD8
 15981                           
 15982 ;; *************** function _DHCP_WriteZeros *****************
 15983 ;; Defined at:
 15984 ;;		line 277 in file "../../TCPIP Library/source/dhcp_client.c"
 15985 ;; Parameters:    Size  Location     Type
 15986 ;;  length          2    3[COMRAM] unsigned int 
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;		None
 15989 ;; Return value:  Size  Location     Type
 15990 ;;		None               void
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0, cstack
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16002 ;;Total ram usage:        2 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    5
 16005 ;; This function calls:
 16006 ;;		_ETH_Write8
 16007 ;; This function is called by:
 16008 ;;		_DHCP_Request
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text54
 16013  005DA0                     __ptext54:
 16014                           	opt stack 0
 16015  005DA0                     _DHCP_WriteZeros:
 16016                           	opt stack 22
 16017                           
 16018                           ;dhcp_client.c: 279: while(length--)
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;incstack = 0
 16022  005DA0  D003               	goto	l8970
 16023  005DA2                     l8968:
 16024                           
 16025                           ;dhcp_client.c: 280: {
 16026                           ;dhcp_client.c: 281: ETH_Write8(0);
 16027  005DA2  0E00               	movlw	0
 16028  005DA4  ECB6  F02E         	call	_ETH_Write8
 16029  005DA8                     l8970:
 16030  005DA8  0604               	decf	DHCP_WriteZeros@length,f,c
 16031  005DAA  A0D8               	btfss	status,0,c
 16032  005DAC  0605               	decf	DHCP_WriteZeros@length+1,f,c
 16033  005DAE  2804               	incf	DHCP_WriteZeros@length,w,c
 16034  005DB0  E1F8               	bnz	l8968
 16035  005DB2  2805               	incf	DHCP_WriteZeros@length+1,w,c
 16036  005DB4  E1F6               	bnz	l8968
 16037  005DB6  0012               	return		;funcret
 16038  005DB8                     __end_of_DHCP_WriteZeros:
 16039                           	opt stack 0
 16040                           tosu	equ	0xFFF
 16041                           tosh	equ	0xFFE
 16042                           tosl	equ	0xFFD
 16043                           pclath	equ	0xFFA
 16044                           tblptru	equ	0xFF8
 16045                           tblptrh	equ	0xFF7
 16046                           tblptrl	equ	0xFF6
 16047                           tablat	equ	0xFF5
 16048                           prodh	equ	0xFF4
 16049                           prodl	equ	0xFF3
 16050                           intcon	equ	0xFF2
 16051                           indf0	equ	0xFEF
 16052                           postinc0	equ	0xFEE
 16053                           fsr0h	equ	0xFEA
 16054                           fsr0l	equ	0xFE9
 16055                           wreg	equ	0xFE8
 16056                           postinc1	equ	0xFE6
 16057                           plusw1	equ	0xFE3
 16058                           fsr1h	equ	0xFE2
 16059                           fsr1l	equ	0xFE1
 16060                           bsr	equ	0xFE0
 16061                           indf2	equ	0xFDF
 16062                           postinc2	equ	0xFDE
 16063                           postdec2	equ	0xFDD
 16064                           plusw2	equ	0xFDB
 16065                           fsr2h	equ	0xFDA
 16066                           fsr2l	equ	0xFD9
 16067                           status	equ	0xFD8
 16068                           
 16069 ;; *************** function _ARPV4_Update *****************
 16070 ;; Defined at:
 16071 ;;		line 179 in file "../../TCPIP Library/source/arpv4.c"
 16072 ;; Parameters:    Size  Location     Type
 16073 ;;		None
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;  x               1    3[COMRAM] unsigned char 
 16076 ;;  entryPointer    2    1[COMRAM] PTR struct .
 16077 ;;		 -> arpMap(104), 
 16078 ;; Return value:  Size  Location     Type
 16079 ;;		None               void
 16080 ;; Registers used:
 16081 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16082 ;; Tracked objects:
 16083 ;;		On entry : F/1
 16084 ;;		On exit  : F/1
 16085 ;;		Unchanged: F/0
 16086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16091 ;;Total ram usage:        3 bytes
 16092 ;; Hardware stack levels used:    1
 16093 ;; Hardware stack levels required when called:    3
 16094 ;; This function calls:
 16095 ;;		Nothing
 16096 ;; This function is called by:
 16097 ;;		_Network_Manage
 16098 ;; This function uses a non-reentrant model
 16099 ;;
 16100                           
 16101                           	psect	text55
 16102  005AAC                     __ptext55:
 16103                           	opt stack 0
 16104  005AAC                     _ARPV4_Update:
 16105                           	opt stack 26
 16106                           
 16107                           ; BSR set to: 1
 16108                           ;arpv4.c: 181: arpMap_t *entryPointer = arpMap;
 16109                           
 16110                           ;incstack = 0
 16111  005AAC  0E2C               	movlw	low _arpMap
 16112  005AAE  6E02               	movwf	ARPV4_Update@entryPointer,c
 16113  005AB0  0E02               	movlw	high _arpMap
 16114  005AB2  6E03               	movwf	ARPV4_Update@entryPointer+1,c
 16115                           
 16116                           ; BSR set to: 1
 16117                           ;arpv4.c: 182: for(uint8_t x=0; x < 8; x++)
 16118  005AB4  6A04               	clrf	ARPV4_Update@x,c
 16119  005AB6                     l7048:
 16120                           
 16121                           ; BSR set to: 1
 16122                           ;arpv4.c: 183: {
 16123                           ;arpv4.c: 184: entryPointer->age ++;
 16124  005AB6  EE20 F00C          	lfsr	2,12
 16125  005ABA  5002               	movf	ARPV4_Update@entryPointer,w,c
 16126  005ABC  26D9               	addwf	fsr2l,f,c
 16127  005ABE  5003               	movf	ARPV4_Update@entryPointer+1,w,c
 16128  005AC0  22DA               	addwfc	fsr2h,f,c
 16129  005AC2  2ADF               	incf	indf2,f,c
 16130                           
 16131                           ; BSR set to: 1
 16132                           ;arpv4.c: 185: entryPointer ++;
 16133  005AC4  0E0D               	movlw	13
 16134  005AC6  2602               	addwf	ARPV4_Update@entryPointer,f,c
 16135  005AC8  0E00               	movlw	0
 16136  005ACA  2203               	addwfc	ARPV4_Update@entryPointer+1,f,c
 16137                           
 16138                           ; BSR set to: 1
 16139  005ACC  2A04               	incf	ARPV4_Update@x,f,c
 16140                           
 16141                           ; BSR set to: 1
 16142  005ACE  0E07               	movlw	7
 16143  005AD0  6404               	cpfsgt	ARPV4_Update@x,c
 16144  005AD2  D7F1               	goto	l7048
 16145  005AD4  0C07               	retlw	7
 16146  005AD6                     __end_of_ARPV4_Update:
 16147                           	opt stack 0
 16148                           tosu	equ	0xFFF
 16149                           tosh	equ	0xFFE
 16150                           tosl	equ	0xFFD
 16151                           pclath	equ	0xFFA
 16152                           tblptru	equ	0xFF8
 16153                           tblptrh	equ	0xFF7
 16154                           tblptrl	equ	0xFF6
 16155                           tablat	equ	0xFF5
 16156                           prodh	equ	0xFF4
 16157                           prodl	equ	0xFF3
 16158                           intcon	equ	0xFF2
 16159                           indf0	equ	0xFEF
 16160                           postinc0	equ	0xFEE
 16161                           fsr0h	equ	0xFEA
 16162                           fsr0l	equ	0xFE9
 16163                           wreg	equ	0xFE8
 16164                           postinc1	equ	0xFE6
 16165                           plusw1	equ	0xFE3
 16166                           fsr1h	equ	0xFE2
 16167                           fsr1l	equ	0xFE1
 16168                           bsr	equ	0xFE0
 16169                           indf2	equ	0xFDF
 16170                           postinc2	equ	0xFDE
 16171                           postdec2	equ	0xFDD
 16172                           plusw2	equ	0xFDB
 16173                           fsr2h	equ	0xFDA
 16174                           fsr2l	equ	0xFD9
 16175                           status	equ	0xFD8
 16176                           
 16177 ;; *************** function _Network_Init *****************
 16178 ;; Defined at:
 16179 ;;		line 65 in file "../../TCPIP Library/source/network.c"
 16180 ;; Parameters:    Size  Location     Type
 16181 ;;		None
 16182 ;; Auto vars:     Size  Location     Type
 16183 ;;		None
 16184 ;; Return value:  Size  Location     Type
 16185 ;;		None               void
 16186 ;; Registers used:
 16187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16188 ;; Tracked objects:
 16189 ;;		On entry : 0/1
 16190 ;;		On exit  : F/2
 16191 ;;		Unchanged: 0/0
 16192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16197 ;;Total ram usage:        0 bytes
 16198 ;; Hardware stack levels used:    1
 16199 ;; Hardware stack levels required when called:    9
 16200 ;; This function calls:
 16201 ;;		_ARPV4_Init
 16202 ;;		_ETH_Init
 16203 ;;		_IPV4_Init
 16204 ;;		_TCP_Init
 16205 ;;		_time
 16206 ;; This function is called by:
 16207 ;;		_main
 16208 ;; This function uses a non-reentrant model
 16209 ;;
 16210                           
 16211                           	psect	text56
 16212  005BE4                     __ptext56:
 16213                           	opt stack 0
 16214  005BE4                     _Network_Init:
 16215                           	opt stack 21
 16216                           
 16217                           ;network.c: 67: ETH_Init();
 16218                           
 16219                           ; BSR set to: 1
 16220                           ;incstack = 0
 16221  005BE4  ECF2  F01F         	call	_ETH_Init	;wreg free
 16222                           
 16223                           ;network.c: 68: ARPV4_Init();
 16224  005BE8  ECA9  F02E         	call	_ARPV4_Init	;wreg free
 16225                           
 16226                           ;network.c: 69: IPV4_Init();
 16227  005BEC  EC4F  F02F         	call	_IPV4_Init	;wreg free
 16228                           
 16229                           ; BSR set to: 1
 16230                           ;network.c: 70: TCP_Init();
 16231  005BF0  EC3B  F02F         	call	_TCP_Init	;wreg free
 16232                           
 16233                           ; BSR set to: 1
 16234                           ;network.c: 72: time(&arpTimer);
 16235  005BF4  0EB0               	movlw	low _arpTimer
 16236  005BF6  6E02               	movwf	time@t,c
 16237  005BF8  0E02               	movlw	high _arpTimer
 16238  005BFA  6E03               	movwf	time@t+1,c
 16239  005BFC  EC85  F02A         	call	_time	;wreg free
 16240                           
 16241                           ;network.c: 73: arpTimer += 10;
 16242  005C00  EC20  F028         	call	PL226	;call to abstracted procedure
 16243                           
 16244                           ; BSR set to: 2
 16245  005C04  0C00               	retlw	0	;funcret
 16246  005C06                     __end_of_Network_Init:
 16247                           	opt stack 0
 16248                           tosu	equ	0xFFF
 16249                           tosh	equ	0xFFE
 16250                           tosl	equ	0xFFD
 16251                           pclath	equ	0xFFA
 16252                           tblptru	equ	0xFF8
 16253                           tblptrh	equ	0xFF7
 16254                           tblptrl	equ	0xFF6
 16255                           tablat	equ	0xFF5
 16256                           prodh	equ	0xFF4
 16257                           prodl	equ	0xFF3
 16258                           intcon	equ	0xFF2
 16259                           indf0	equ	0xFEF
 16260                           postinc0	equ	0xFEE
 16261                           fsr0h	equ	0xFEA
 16262                           fsr0l	equ	0xFE9
 16263                           wreg	equ	0xFE8
 16264                           postinc1	equ	0xFE6
 16265                           plusw1	equ	0xFE3
 16266                           fsr1h	equ	0xFE2
 16267                           fsr1l	equ	0xFE1
 16268                           bsr	equ	0xFE0
 16269                           indf2	equ	0xFDF
 16270                           postinc2	equ	0xFDE
 16271                           postdec2	equ	0xFDD
 16272                           plusw2	equ	0xFDB
 16273                           fsr2h	equ	0xFDA
 16274                           fsr2l	equ	0xFD9
 16275                           status	equ	0xFD8
 16276                           
 16277 ;; *************** function _time *****************
 16278 ;; Defined at:
 16279 ;;		line 198 in file "../board_support_package/picdem2_net/rtcc.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;  t               2    1[COMRAM] PTR long 
 16282 ;;		 -> main@t(4), main@now_p(4), main@ip_timer(4), Network_Manage@now(4), 
 16283 ;;		 -> arpTimer(4), NULL(0), 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  the_time        4    6[COMRAM] long 
 16286 ;;  gie_val         1    5[COMRAM] unsigned char 
 16287 ;; Return value:  Size  Location     Type
 16288 ;;                  4    1[COMRAM] long 
 16289 ;; Registers used:
 16290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/2
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16296 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16297 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;Total ram usage:        9 bytes
 16301 ;; Hardware stack levels used:    1
 16302 ;; Hardware stack levels required when called:    3
 16303 ;; This function calls:
 16304 ;;		Nothing
 16305 ;; This function is called by:
 16306 ;;		_Network_Init
 16307 ;;		_Network_Manage
 16308 ;;		_SYSLOG_Init
 16309 ;;		_SYSLOG_Write
 16310 ;;		_main
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text57
 16315  00550A                     __ptext57:
 16316                           	opt stack 0
 16317  00550A                     _time:
 16318                           	opt stack 27
 16319                           
 16320                           ;rtcc.c: 200: bool gie_val;
 16321                           ;rtcc.c: 201: time_t the_time;
 16322                           ;rtcc.c: 203: gie_val = GIE;
 16323                           
 16324                           ; BSR set to: 2
 16325                           ;incstack = 0
 16326  00550A  0E00               	movlw	0
 16327  00550C  BEF2               	btfsc	intcon,7,c	;volatile
 16328  00550E  0E01               	movlw	1
 16329  005510  6E06               	movwf	time@gie_val,c
 16330                           
 16331                           ;rtcc.c: 204: GIE = 0;
 16332  005512  9EF2               	bcf	intcon,7,c	;volatile
 16333                           
 16334                           ;rtcc.c: 205: the_time = deviceTime;
 16335  005514  C2B4  F007         	movff	_deviceTime,time@the_time	;volatile
 16336  005518  C2B5  F008         	movff	_deviceTime+1,time@the_time+1	;volatile
 16337  00551C  C2B6  F009         	movff	_deviceTime+2,time@the_time+2	;volatile
 16338  005520  C2B7  F00A         	movff	_deviceTime+3,time@the_time+3	;volatile
 16339                           
 16340                           ;rtcc.c: 206: GIE = gie_val;
 16341  005524  A006               	btfss	time@gie_val,0,c
 16342  005526  D002               	goto	u9510
 16343  005528  8EF2               	bsf	intcon,7,c	;volatile
 16344  00552A  D001               	goto	l6960
 16345  00552C                     u9510:
 16346  00552C  9EF2               	bcf	intcon,7,c	;volatile
 16347  00552E                     l6960:
 16348                           
 16349                           ;rtcc.c: 208: if(t)
 16350  00552E  5002               	movf	time@t,w,c
 16351  005530  1003               	iorwf	time@t+1,w,c
 16352  005532  E00C               	bz	l6964
 16353                           
 16354                           ;rtcc.c: 209: {
 16355                           ;rtcc.c: 210: *t = the_time;
 16356  005534  C002  FFD9         	movff	time@t,fsr2l
 16357  005538  C003  FFDA         	movff	time@t+1,fsr2h
 16358  00553C  C007  FFDE         	movff	time@the_time,postinc2
 16359  005540  C008  FFDE         	movff	time@the_time+1,postinc2
 16360  005544  C009  FFDE         	movff	time@the_time+2,postinc2
 16361  005548  C00A  FFDE         	movff	time@the_time+3,postinc2
 16362  00554C                     l6964:
 16363                           
 16364                           ;rtcc.c: 211: }
 16365                           ;rtcc.c: 213: return (the_time);
 16366  00554C  C007  F002         	movff	time@the_time,?_time
 16367  005550  C008  F003         	movff	time@the_time+1,?_time+1
 16368  005554  C009  F004         	movff	time@the_time+2,?_time+2
 16369  005558  C00A  F005         	movff	time@the_time+3,?_time+3
 16370  00555C  0012               	return		;funcret
 16371  00555E                     __end_of_time:
 16372                           	opt stack 0
 16373                           tosu	equ	0xFFF
 16374                           tosh	equ	0xFFE
 16375                           tosl	equ	0xFFD
 16376                           pclath	equ	0xFFA
 16377                           tblptru	equ	0xFF8
 16378                           tblptrh	equ	0xFF7
 16379                           tblptrl	equ	0xFF6
 16380                           tablat	equ	0xFF5
 16381                           prodh	equ	0xFF4
 16382                           prodl	equ	0xFF3
 16383                           intcon	equ	0xFF2
 16384                           indf0	equ	0xFEF
 16385                           postinc0	equ	0xFEE
 16386                           fsr0h	equ	0xFEA
 16387                           fsr0l	equ	0xFE9
 16388                           wreg	equ	0xFE8
 16389                           postinc1	equ	0xFE6
 16390                           plusw1	equ	0xFE3
 16391                           fsr1h	equ	0xFE2
 16392                           fsr1l	equ	0xFE1
 16393                           bsr	equ	0xFE0
 16394                           indf2	equ	0xFDF
 16395                           postinc2	equ	0xFDE
 16396                           postdec2	equ	0xFDD
 16397                           plusw2	equ	0xFDB
 16398                           fsr2h	equ	0xFDA
 16399                           fsr2l	equ	0xFD9
 16400                           status	equ	0xFD8
 16401                           
 16402 ;; *************** function _TCP_Init *****************
 16403 ;; Defined at:
 16404 ;;		line 1173 in file "../../TCPIP Library/source/tcpv4.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;		None
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;		None
 16409 ;; Return value:  Size  Location     Type
 16410 ;;		None               void
 16411 ;; Registers used:
 16412 ;;		wreg, status,2
 16413 ;; Tracked objects:
 16414 ;;		On entry : F/1
 16415 ;;		On exit  : F/1
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;Total ram usage:        0 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    3
 16425 ;; This function calls:
 16426 ;;		Nothing
 16427 ;; This function is called by:
 16428 ;;		_Network_Init
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           	psect	text58
 16433  005E76                     __ptext58:
 16434                           	opt stack 0
 16435  005E76                     _TCP_Init:
 16436                           	opt stack 26
 16437                           
 16438                           ; BSR set to: 1
 16439                           ;tcpv4.c: 1175: tcbList = (0);
 16440                           
 16441                           ;incstack = 0
 16442  005E76  6BDF               	clrf	_tcbList& (0+255),b
 16443  005E78  6BE0               	clrf	(_tcbList+1)& (0+255),b
 16444                           
 16445                           ;tcpv4.c: 1176: tcbListSize = 0;
 16446  005E7A  6BE7               	clrf	_tcbListSize& (0+255),b
 16447                           
 16448                           ; BSR set to: 1
 16449                           ;tcpv4.c: 1178: nextSequenceNumber = 0;
 16450  005E7C  0E04               	movlw	4
 16451  005E7E  6FD8               	movwf	(_nextAvailablePort+1)& (0+255),b
 16452  005E80  6BD7               	clrf	_nextAvailablePort& (0+255),b
 16453                           
 16454                           ; BSR set to: 1
 16455  005E82  0C00               	retlw	0	;funcret
 16456  005E84                     __end_of_TCP_Init:
 16457                           	opt stack 0
 16458                           tosu	equ	0xFFF
 16459                           tosh	equ	0xFFE
 16460                           tosl	equ	0xFFD
 16461                           pclath	equ	0xFFA
 16462                           tblptru	equ	0xFF8
 16463                           tblptrh	equ	0xFF7
 16464                           tblptrl	equ	0xFF6
 16465                           tablat	equ	0xFF5
 16466                           prodh	equ	0xFF4
 16467                           prodl	equ	0xFF3
 16468                           intcon	equ	0xFF2
 16469                           indf0	equ	0xFEF
 16470                           postinc0	equ	0xFEE
 16471                           fsr0h	equ	0xFEA
 16472                           fsr0l	equ	0xFE9
 16473                           wreg	equ	0xFE8
 16474                           postinc1	equ	0xFE6
 16475                           plusw1	equ	0xFE3
 16476                           fsr1h	equ	0xFE2
 16477                           fsr1l	equ	0xFE1
 16478                           bsr	equ	0xFE0
 16479                           indf2	equ	0xFDF
 16480                           postinc2	equ	0xFDE
 16481                           postdec2	equ	0xFDD
 16482                           plusw2	equ	0xFDB
 16483                           fsr2h	equ	0xFDA
 16484                           fsr2l	equ	0xFD9
 16485                           status	equ	0xFD8
 16486                           
 16487 ;; *************** function _IPV4_Init *****************
 16488 ;; Defined at:
 16489 ;;		line 78 in file "../../TCPIP Library/source/ipv4.c"
 16490 ;; Parameters:    Size  Location     Type
 16491 ;;		None
 16492 ;; Auto vars:     Size  Location     Type
 16493 ;;		None
 16494 ;; Return value:  Size  Location     Type
 16495 ;;		None               void
 16496 ;; Registers used:
 16497 ;;		None
 16498 ;; Tracked objects:
 16499 ;;		On entry : 0/1
 16500 ;;		On exit  : F/1
 16501 ;;		Unchanged: 0/0
 16502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;Total ram usage:        0 bytes
 16508 ;; Hardware stack levels used:    1
 16509 ;; Hardware stack levels required when called:    3
 16510 ;; This function calls:
 16511 ;;		Nothing
 16512 ;; This function is called by:
 16513 ;;		_Network_Init
 16514 ;; This function uses a non-reentrant model
 16515 ;;
 16516                           
 16517                           	psect	text59
 16518  005E9E                     __ptext59:
 16519                           	opt stack 0
 16520  005E9E                     _IPV4_Init:
 16521                           	opt stack 26
 16522                           
 16523                           ;ipv4.c: 80: ipv4Address = 0;
 16524                           
 16525                           ; BSR set to: 1
 16526                           ;incstack = 0
 16527  005E9E  0101               	movlb	1	; () banked
 16528  005EA0  6BC4               	clrf	_ipv4Address& (0+255),b
 16529  005EA2  6BC5               	clrf	(_ipv4Address+1)& (0+255),b
 16530  005EA4  6BC6               	clrf	(_ipv4Address+2)& (0+255),b
 16531  005EA6  6BC7               	clrf	(_ipv4Address+3)& (0+255),b
 16532                           
 16533                           ; BSR set to: 1
 16534  005EA8  0012               	return		;funcret
 16535  005EAA                     __end_of_IPV4_Init:
 16536                           	opt stack 0
 16537                           tosu	equ	0xFFF
 16538                           tosh	equ	0xFFE
 16539                           tosl	equ	0xFFD
 16540                           pclath	equ	0xFFA
 16541                           tblptru	equ	0xFF8
 16542                           tblptrh	equ	0xFF7
 16543                           tblptrl	equ	0xFF6
 16544                           tablat	equ	0xFF5
 16545                           prodh	equ	0xFF4
 16546                           prodl	equ	0xFF3
 16547                           intcon	equ	0xFF2
 16548                           indf0	equ	0xFEF
 16549                           postinc0	equ	0xFEE
 16550                           fsr0h	equ	0xFEA
 16551                           fsr0l	equ	0xFE9
 16552                           wreg	equ	0xFE8
 16553                           postinc1	equ	0xFE6
 16554                           plusw1	equ	0xFE3
 16555                           fsr1h	equ	0xFE2
 16556                           fsr1l	equ	0xFE1
 16557                           bsr	equ	0xFE0
 16558                           indf2	equ	0xFDF
 16559                           postinc2	equ	0xFDE
 16560                           postdec2	equ	0xFDD
 16561                           plusw2	equ	0xFDB
 16562                           fsr2h	equ	0xFDA
 16563                           fsr2l	equ	0xFD9
 16564                           status	equ	0xFD8
 16565                           
 16566 ;; *************** function _ETH_Init *****************
 16567 ;; Defined at:
 16568 ;;		line 120 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;		None
 16571 ;; Auto vars:     Size  Location     Type
 16572 ;;		None
 16573 ;; Return value:  Size  Location     Type
 16574 ;;		None               void
 16575 ;; Registers used:
 16576 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16577 ;; Tracked objects:
 16578 ;;		On entry : 0/1
 16579 ;;		On exit  : 0/0
 16580 ;;		Unchanged: 0/0
 16581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;Total ram usage:        1 bytes
 16587 ;; Hardware stack levels used:    1
 16588 ;; Hardware stack levels required when called:    8
 16589 ;; This function calls:
 16590 ;;		_ENC28_Bfs
 16591 ;;		_ENC28_PhyWrite
 16592 ;;		_ENC28_Rcr8
 16593 ;;		_ENC28_Wcr16
 16594 ;;		_ENC28_Wcr8
 16595 ;;		_ETH_CheckLinkUp
 16596 ;;		_ETH_SendSystemReset
 16597 ;;		_MAC_getAddress
 16598 ;; This function is called by:
 16599 ;;		_Network_Init
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           	psect	text60
 16604  003FE4                     __ptext60:
 16605                           	opt stack 0
 16606  003FE4                     _ETH_Init:
 16607                           	opt stack 21
 16608                           
 16609                           ;enc28J60.c: 123: ethData.error = 0;
 16610                           
 16611                           ; BSR set to: 1
 16612                           ;incstack = 0
 16613  003FE4  0101               	movlb	1	; () banked
 16614  003FE6  91B5               	bcf	_ethData& (0+255),0,b	;volatile
 16615                           
 16616                           ;enc28J60.c: 124: ethData.up = 0;
 16617  003FE8  95B5               	bcf	_ethData& (0+255),2,b	;volatile
 16618                           
 16619                           ;enc28J60.c: 125: ethData.linkChange = 0;
 16620  003FEA  99B5               	bcf	_ethData& (0+255),4,b	;volatile
 16621                           
 16622                           ;enc28J60.c: 126: ethData.bufferBusy = 0;
 16623  003FEC  9BB5               	bcf	_ethData& (0+255),5,b	;volatile
 16624                           
 16625                           ;enc28J60.c: 127: ethData.saveRDPT = 0;
 16626  003FEE  6BB8               	clrf	(_ethData+3)& (0+255),b	;volatile
 16627  003FF0  6BB9               	clrf	(_ethData+4)& (0+255),b	;volatile
 16628                           
 16629                           ;enc28J60.c: 129: lastBank = sfr_bank0;
 16630  003FF2  6BE5               	clrf	_lastBank& (0+255),b
 16631                           
 16632                           ; BSR set to: 1
 16633                           ;enc28J60.c: 131: _delay((unsigned long)((100)*(41666667UL/4000000.0)));
 16634  003FF4  0ED0               	movlw	208
 16635  003FF6                     u15537:
 16636  003FF6  D000               	nop2	
 16637  003FF8  2EE8               	decfsz	wreg,f,c
 16638  003FFA  D7FD               	goto	u15537
 16639  003FFC  F000               	nop	
 16640                           
 16641                           ;enc28J60.c: 133: ETH_SendSystemReset();
 16642  003FFE  EC55  F02F         	call	_ETH_SendSystemReset	;wreg free
 16643                           
 16644                           ;enc28J60.c: 134: _delay((unsigned long)((10)*(41666667UL/4000.0)));
 16645  004002  0E88               	movlw	136
 16646  004004  6E10               	movwf	??_ETH_Init& (0+255),c
 16647  004006  0E46               	movlw	70
 16648  004008                     u15547:
 16649  004008  2EE8               	decfsz	wreg,f,c
 16650  00400A  D7FE               	goto	u15547
 16651  00400C  2E10               	decfsz	??_ETH_Init& (0+255),f,c
 16652  00400E  D7FC               	goto	u15547
 16653  004010  D000               	nop2	
 16654  004012                     l9384:
 16655  004012  0EFD               	movlw	253
 16656  004014  EC33  F02E         	call	_ENC28_Rcr8
 16657  004018  6E10               	movwf	??_ETH_Init& (0+255),c
 16658  00401A  A010               	btfss	??_ETH_Init,0,c
 16659  00401C  D7FA               	goto	l9384
 16660                           
 16661                           ;enc28J60.c: 140: nextPacketPointer = (0);
 16662  00401E  0101               	movlb	1	; () banked
 16663  004020  6BD9               	clrf	_nextPacketPointer& (0+255),b
 16664  004022  6BDA               	clrf	(_nextPacketPointer+1)& (0+255),b
 16665                           
 16666                           ; BSR set to: 1
 16667                           ;enc28J60.c: 142: ENC28_Bfs (J60_ECON2, 0x80);
 16668  004024  0E80               	movlw	128
 16669  004026  6E05               	movwf	ENC28_Bfs@bits,c
 16670  004028  0EFE               	movlw	254
 16671  00402A  EC70  F02E         	call	_ENC28_Bfs
 16672                           
 16673                           ;enc28J60.c: 145: ENC28_Wcr16(J60_ETXSTL, (0x1FFF - (1500)));
 16674  00402E  EC3C  F022         	call	PL250	;call to abstracted procedure
 16675  004032  0E04               	movlw	4
 16676  004034  EC9A  F02C         	call	_ENC28_Wcr16
 16677                           
 16678                           ;enc28J60.c: 146: ENC28_Wcr16(J60_ETXNDL, (0x1FFF));
 16679  004038  0E1F               	movlw	31
 16680  00403A  6E06               	movwf	ENC28_Wcr16@v+1,c
 16681  00403C  6805               	setf	ENC28_Wcr16@v,c
 16682  00403E  0E06               	movlw	6
 16683  004040  EC9A  F02C         	call	_ENC28_Wcr16
 16684                           
 16685                           ;enc28J60.c: 147: ENC28_Wcr16(J60_ERXSTL, (0));
 16686  004044  6A06               	clrf	ENC28_Wcr16@v+1,c
 16687  004046  6A05               	clrf	ENC28_Wcr16@v,c
 16688  004048  0E08               	movlw	8
 16689  00404A  EC9A  F02C         	call	_ENC28_Wcr16
 16690                           
 16691                           ;enc28J60.c: 148: ENC28_Wcr16(J60_ERXNDL, ((0x1FFF - (1500)) - 2));
 16692  00404E  EC94  F02B         	call	PL276	;call to abstracted procedure
 16693  004052  0E0A               	movlw	10
 16694  004054  EC9A  F02C         	call	_ENC28_Wcr16
 16695                           
 16696                           ;enc28J60.c: 149: ENC28_Wcr16(J60_ERDPTL,nextPacketPointer);
 16697  004058  EC88  F02B         	call	PL216	;call to abstracted procedure
 16698  00405C  EC9A  F02C         	call	_ENC28_Wcr16
 16699                           
 16700                           ;enc28J60.c: 151: ENC28_Wcr16(J60_ERDPTL, (0));
 16701  004060  0E00               	movlw	0
 16702  004062  6A06               	clrf	ENC28_Wcr16@v+1,c
 16703  004064  6A05               	clrf	ENC28_Wcr16@v,c
 16704  004066  EC9A  F02C         	call	_ENC28_Wcr16
 16705                           
 16706                           ;enc28J60.c: 152: ENC28_Wcr16(J60_EWRPTL, (0x1FFF - (1500)));
 16707  00406A  EC3C  F022         	call	PL250	;call to abstracted procedure
 16708  00406E  0E02               	movlw	2
 16709  004070  EC9A  F02C         	call	_ENC28_Wcr16
 16710                           
 16711                           ;enc28J60.c: 155: ENC28_Wcr8(J60_ERXFCON, 0b10101001);
 16712  004074  0EA9               	movlw	169
 16713  004076  6E05               	movwf	ENC28_Wcr8@v,c
 16714  004078  0E58               	movlw	88
 16715  00407A  EC52  F02E         	call	_ENC28_Wcr8
 16716                           
 16717                           ;enc28J60.c: 158: eth_MAC = MAC_getAddress();
 16718  00407E  EC6D  F02F         	call	_MAC_getAddress	;wreg free
 16719  004082  6E10               	movwf	??_ETH_Init& (0+255),c
 16720  004084  C010  F1D0         	movff	??_ETH_Init,_eth_MAC
 16721  004088  0101               	movlb	1	; () banked
 16722  00408A  51D0               	movf	_eth_MAC& (0+255),w,b
 16723  00408C  A4D8               	btfss	status,2,c
 16724  00408E  0E10               	movlw	high __smallconst
 16725  004090  6FD1               	movwf	(_eth_MAC+1)& (0+255),b
 16726  004092  51D1               	movf	(_eth_MAC+1)& (0+255),w,b
 16727  004094  A4D8               	btfss	status,2,c
 16728  004096  0E00               	movlw	low (__smallconst shr (0+16))
 16729  004098  6FD2               	movwf	(_eth_MAC+2)& (0+255),b
 16730                           
 16731                           ;enc28J60.c: 161: ENC28_Wcr8(J60_MACON1, 0x0D);
 16732  00409A  0E0D               	movlw	13
 16733  00409C  6E05               	movwf	ENC28_Wcr8@v,c
 16734  00409E  0E80               	movlw	128
 16735  0040A0  EC52  F02E         	call	_ENC28_Wcr8
 16736                           
 16737                           ;enc28J60.c: 162: ENC28_Wcr8(J60_MACON3, 0x22);
 16738  0040A4  0E22               	movlw	34
 16739  0040A6  6E05               	movwf	ENC28_Wcr8@v,c
 16740  0040A8  0E82               	movlw	130
 16741  0040AA  EC52  F02E         	call	_ENC28_Wcr8
 16742                           
 16743                           ;enc28J60.c: 163: ENC28_Wcr8(J60_MACON4, 0x40);
 16744  0040AE  0E40               	movlw	64
 16745  0040B0  6E05               	movwf	ENC28_Wcr8@v,c
 16746  0040B2  0E83               	movlw	131
 16747  0040B4  EC52  F02E         	call	_ENC28_Wcr8
 16748                           
 16749                           ;enc28J60.c: 164: ENC28_Wcr16(J60_MAIPGL, 0x0c12);
 16750  0040B8  0E0C               	movlw	12
 16751  0040BA  6E06               	movwf	ENC28_Wcr16@v+1,c
 16752  0040BC  0E12               	movlw	18
 16753  0040BE  6E05               	movwf	ENC28_Wcr16@v,c
 16754  0040C0  0E86               	movlw	134
 16755  0040C2  EC9A  F02C         	call	_ENC28_Wcr16
 16756                           
 16757                           ;enc28J60.c: 165: ENC28_Wcr8(J60_MABBIPG, 0x12);
 16758  0040C6  0E12               	movlw	18
 16759  0040C8  6E05               	movwf	ENC28_Wcr8@v,c
 16760  0040CA  0E84               	movlw	132
 16761  0040CC  EC52  F02E         	call	_ENC28_Wcr8
 16762                           
 16763                           ;enc28J60.c: 166: ENC28_Wcr16(J60_MAMXFLL, (1500));
 16764  0040D0  0E05               	movlw	5
 16765  0040D2  6E06               	movwf	ENC28_Wcr16@v+1,c
 16766  0040D4  0EDC               	movlw	220
 16767  0040D6  6E05               	movwf	ENC28_Wcr16@v,c
 16768  0040D8  0E8A               	movlw	138
 16769  0040DA  EC9A  F02C         	call	_ENC28_Wcr16
 16770                           
 16771                           ;enc28J60.c: 167: ENC28_Wcr8(J60_MAADR1, eth_MAC->mac_array[0]); __nop();
 16772  0040DE  EC34  F022         	call	PL218	;call to abstracted procedure
 16773  0040E2  CFF5 F005          	movff	tablat,ENC28_Wcr8@v
 16774  0040E6  0EC4               	movlw	196
 16775  0040E8  EC52  F02E         	call	_ENC28_Wcr8
 16776  0040EC  F000               	nop	
 16777                           
 16778                           ;enc28J60.c: 168: ENC28_Wcr8(J60_MAADR2, eth_MAC->mac_array[1]); __nop();
 16779  0040EE  0E01               	movlw	1
 16780  0040F0  D83F               	call	PL70	;call to abstracted procedure
 16781  0040F2  0EC5               	movlw	197
 16782  0040F4  EC52  F02E         	call	_ENC28_Wcr8
 16783  0040F8  F000               	nop	
 16784                           
 16785                           ;enc28J60.c: 169: ENC28_Wcr8(J60_MAADR3, eth_MAC->mac_array[2]); __nop();
 16786  0040FA  0E02               	movlw	2
 16787  0040FC  D839               	call	PL70	;call to abstracted procedure
 16788  0040FE  0EC2               	movlw	194
 16789  004100  EC52  F02E         	call	_ENC28_Wcr8
 16790  004104  F000               	nop	
 16791                           
 16792                           ;enc28J60.c: 170: ENC28_Wcr8(J60_MAADR4, eth_MAC->mac_array[3]); __nop();
 16793  004106  0E03               	movlw	3
 16794  004108  D833               	call	PL70	;call to abstracted procedure
 16795  00410A  0EC3               	movlw	195
 16796  00410C  EC52  F02E         	call	_ENC28_Wcr8
 16797  004110  F000               	nop	
 16798                           
 16799                           ;enc28J60.c: 171: ENC28_Wcr8(J60_MAADR5, eth_MAC->mac_array[4]); __nop();
 16800  004112  0E04               	movlw	4
 16801  004114  D82D               	call	PL70	;call to abstracted procedure
 16802  004116  0EC0               	movlw	192
 16803  004118  EC52  F02E         	call	_ENC28_Wcr8
 16804  00411C  F000               	nop	
 16805                           
 16806                           ;enc28J60.c: 172: ENC28_Wcr8(J60_MAADR6, eth_MAC->mac_array[5]); __nop();
 16807  00411E  0E05               	movlw	5
 16808  004120  D827               	call	PL70	;call to abstracted procedure
 16809  004122  0EC1               	movlw	193
 16810  004124  EC52  F02E         	call	_ENC28_Wcr8
 16811  004128  F000               	nop	
 16812                           
 16813                           ;enc28J60.c: 174: ENC28_Wcr8(J60_ECON1, 0x04);
 16814  00412A  0E04               	movlw	4
 16815  00412C  6E05               	movwf	ENC28_Wcr8@v,c
 16816  00412E  0EFF               	movlw	255
 16817  004130  EC52  F02E         	call	_ENC28_Wcr8
 16818                           
 16819                           ;enc28J60.c: 177: ENC28_PhyWrite(J60_PHCON1, 0x0000);
 16820  004134  0E00               	movlw	0
 16821  004136  6A09               	clrf	ENC28_PhyWrite@d+1,c
 16822  004138  6A08               	clrf	ENC28_PhyWrite@d,c
 16823  00413A  ECE6  F02C         	call	_ENC28_PhyWrite
 16824                           
 16825                           ;enc28J60.c: 178: ENC28_PhyWrite(J60_PHCON2, 0x0100);
 16826  00413E  0E01               	movlw	1
 16827  004140  6E09               	movwf	ENC28_PhyWrite@d+1,c
 16828  004142  6A08               	clrf	ENC28_PhyWrite@d,c
 16829  004144  0E10               	movlw	16
 16830  004146  ECE6  F02C         	call	_ENC28_PhyWrite
 16831                           
 16832                           ;enc28J60.c: 179: ENC28_PhyWrite(J60_PHLCON, 0x0472);
 16833  00414A  0E04               	movlw	4
 16834  00414C  6E09               	movwf	ENC28_PhyWrite@d+1,c
 16835  00414E  0E72               	movlw	114
 16836  004150  6E08               	movwf	ENC28_PhyWrite@d,c
 16837  004152  0E14               	movlw	20
 16838  004154  ECE6  F02C         	call	_ENC28_PhyWrite
 16839                           
 16840                           ;enc28J60.c: 183: ENC28_Wcr8(J60_EIE, 0xDB);
 16841  004158  0EDB               	movlw	219
 16842  00415A  6E05               	movwf	ENC28_Wcr8@v,c
 16843  00415C  0EFB               	movlw	251
 16844  00415E  EC52  F02E         	call	_ENC28_Wcr8
 16845                           
 16846                           ;enc28J60.c: 184: ENC28_Wcr16(J60_PHIE, 0x12);
 16847  004162  6A06               	clrf	ENC28_Wcr16@v+1,c
 16848  004164  0E12               	movlw	18
 16849  004166  6E05               	movwf	ENC28_Wcr16@v,c
 16850  004168  EC9A  F02C         	call	_ENC28_Wcr16
 16851                           
 16852                           ;enc28J60.c: 187: ETH_CheckLinkUp();
 16853  00416C  EFDC  F02E         	goto	_ETH_CheckLinkUp	;wreg free
 16854  004170                     __end_of_ETH_Init:
 16855                           	opt stack 0
 16856  004170                     PL70:
 16857                           	opt stack 21
 16858  004170  0101               	movlb	1	; () banked
 16859  004172  25D0               	addwf	_eth_MAC& (0+255),w,b
 16860  004174  6EF6               	movwf	tblptrl,c
 16861  004176  0E00               	movlw	0
 16862  004178  21D1               	addwfc	(_eth_MAC+1)& (0+255),w,b
 16863  00417A  6EF7               	movwf	tblptrh,c
 16864  00417C  0E00               	movlw	0
 16865  00417E  21D2               	addwfc	(_eth_MAC+2)& (0+255),w,b
 16866  004180  6EF8               	movwf	tblptru,c
 16867  004182  0008               	tblrd		*
 16868  004184  CFF5 F005          	movff	tablat,ENC28_Wcr8@v
 16869  004188  0012               	return	
 16870  00418A                     __end_ofPL70:
 16871                           	opt stack 0
 16872                           tosu	equ	0xFFF
 16873                           tosh	equ	0xFFE
 16874                           tosl	equ	0xFFD
 16875                           pclath	equ	0xFFA
 16876                           tblptru	equ	0xFF8
 16877                           tblptrh	equ	0xFF7
 16878                           tblptrl	equ	0xFF6
 16879                           tablat	equ	0xFF5
 16880                           prodh	equ	0xFF4
 16881                           prodl	equ	0xFF3
 16882                           intcon	equ	0xFF2
 16883                           indf0	equ	0xFEF
 16884                           postinc0	equ	0xFEE
 16885                           fsr0h	equ	0xFEA
 16886                           fsr0l	equ	0xFE9
 16887                           wreg	equ	0xFE8
 16888                           postinc1	equ	0xFE6
 16889                           plusw1	equ	0xFE3
 16890                           fsr1h	equ	0xFE2
 16891                           fsr1l	equ	0xFE1
 16892                           bsr	equ	0xFE0
 16893                           indf2	equ	0xFDF
 16894                           postinc2	equ	0xFDE
 16895                           postdec2	equ	0xFDD
 16896                           plusw2	equ	0xFDB
 16897                           fsr2h	equ	0xFDA
 16898                           fsr2l	equ	0xFD9
 16899                           status	equ	0xFD8
 16900                           
 16901 ;; *************** function _MAC_getAddress *****************
 16902 ;; Defined at:
 16903 ;;		line 46 in file "../../TCPIP Library/source/mac_address.c"
 16904 ;; Parameters:    Size  Location     Type
 16905 ;;		None
 16906 ;; Auto vars:     Size  Location     Type
 16907 ;;		None
 16908 ;; Return value:  Size  Location     Type
 16909 ;;                  1    wreg      PTR const struct .
 16910 ;; Registers used:
 16911 ;;		wreg
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/1
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16917 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16921 ;;Total ram usage:        2 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:    3
 16924 ;; This function calls:
 16925 ;;		Nothing
 16926 ;; This function is called by:
 16927 ;;		_ETH_Init
 16928 ;; This function uses a non-reentrant model
 16929 ;;
 16930                           
 16931                           	psect	text61
 16932  005EDA                     __ptext61:
 16933                           	opt stack 0
 16934  005EDA                     _MAC_getAddress:
 16935                           	opt stack 25
 16936                           
 16937                           ;mac_address.c: 48: return &macAddress;
 16938                           
 16939                           ;incstack = 0
 16940  005EDA  0E3D               	movlw	_macAddress& (0+255)
 16941  005EDC  0012               	return		;funcret
 16942  005EDE                     __end_of_MAC_getAddress:
 16943                           	opt stack 0
 16944                           tosu	equ	0xFFF
 16945                           tosh	equ	0xFFE
 16946                           tosl	equ	0xFFD
 16947                           pclath	equ	0xFFA
 16948                           tblptru	equ	0xFF8
 16949                           tblptrh	equ	0xFF7
 16950                           tblptrl	equ	0xFF6
 16951                           tablat	equ	0xFF5
 16952                           prodh	equ	0xFF4
 16953                           prodl	equ	0xFF3
 16954                           intcon	equ	0xFF2
 16955                           indf0	equ	0xFEF
 16956                           postinc0	equ	0xFEE
 16957                           fsr0h	equ	0xFEA
 16958                           fsr0l	equ	0xFE9
 16959                           wreg	equ	0xFE8
 16960                           postinc1	equ	0xFE6
 16961                           plusw1	equ	0xFE3
 16962                           fsr1h	equ	0xFE2
 16963                           fsr1l	equ	0xFE1
 16964                           bsr	equ	0xFE0
 16965                           indf2	equ	0xFDF
 16966                           postinc2	equ	0xFDE
 16967                           postdec2	equ	0xFDD
 16968                           plusw2	equ	0xFDB
 16969                           fsr2h	equ	0xFDA
 16970                           fsr2l	equ	0xFD9
 16971                           status	equ	0xFD8
 16972                           
 16973 ;; *************** function _ETH_SendSystemReset *****************
 16974 ;; Defined at:
 16975 ;;		line 406 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;		None
 16978 ;; Auto vars:     Size  Location     Type
 16979 ;;		None
 16980 ;; Return value:  Size  Location     Type
 16981 ;;		None               void
 16982 ;; Registers used:
 16983 ;;		wreg, status,2, cstack
 16984 ;; Tracked objects:
 16985 ;;		On entry : 0/1
 16986 ;;		On exit  : 0/0
 16987 ;;		Unchanged: 0/0
 16988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16993 ;;Total ram usage:        0 bytes
 16994 ;; Hardware stack levels used:    1
 16995 ;; Hardware stack levels required when called:    4
 16996 ;; This function calls:
 16997 ;;		_SPI_ExchangeByte
 16998 ;; This function is called by:
 16999 ;;		_ETH_Init
 17000 ;; This function uses a non-reentrant model
 17001 ;;
 17002                           
 17003                           	psect	text62
 17004  005EAA                     __ptext62:
 17005                           	opt stack 0
 17006  005EAA                     _ETH_SendSystemReset:
 17007                           	opt stack 24
 17008                           
 17009                           ;incstack = 0
 17010                           ;enc28J60.c: 408: do{LATD3 = 0;} while(0);
 17011  005EAA  968C               	bcf	3980,3,c	;volatile
 17012                           
 17013                           ;enc28J60.c: 409: SPI_ExchangeByte(src_inst);
 17014  005EAC  0EFF               	movlw	255
 17015  005EAE  EC42  F02F         	call	_SPI_ExchangeByte
 17016  005EB2  868C               	bsf	3980,3,c	;volatile
 17017  005EB4  0012               	return		;funcret
 17018  005EB6                     __end_of_ETH_SendSystemReset:
 17019                           	opt stack 0
 17020                           tosu	equ	0xFFF
 17021                           tosh	equ	0xFFE
 17022                           tosl	equ	0xFFD
 17023                           pclath	equ	0xFFA
 17024                           tblptru	equ	0xFF8
 17025                           tblptrh	equ	0xFF7
 17026                           tblptrl	equ	0xFF6
 17027                           tablat	equ	0xFF5
 17028                           prodh	equ	0xFF4
 17029                           prodl	equ	0xFF3
 17030                           intcon	equ	0xFF2
 17031                           indf0	equ	0xFEF
 17032                           postinc0	equ	0xFEE
 17033                           fsr0h	equ	0xFEA
 17034                           fsr0l	equ	0xFE9
 17035                           wreg	equ	0xFE8
 17036                           postinc1	equ	0xFE6
 17037                           plusw1	equ	0xFE3
 17038                           fsr1h	equ	0xFE2
 17039                           fsr1l	equ	0xFE1
 17040                           bsr	equ	0xFE0
 17041                           indf2	equ	0xFDF
 17042                           postinc2	equ	0xFDE
 17043                           postdec2	equ	0xFDD
 17044                           plusw2	equ	0xFDB
 17045                           fsr2h	equ	0xFDA
 17046                           fsr2l	equ	0xFD9
 17047                           status	equ	0xFD8
 17048                           
 17049 ;; *************** function _ETH_CheckLinkUp *****************
 17050 ;; Defined at:
 17051 ;;		line 417 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;		None
 17054 ;; Auto vars:     Size  Location     Type
 17055 ;;  phstat2         2   13[COMRAM] unsigned int 
 17056 ;; Return value:  Size  Location     Type
 17057 ;;                  1    wreg      unsigned char 
 17058 ;; Registers used:
 17059 ;;		wreg, status,2, status,0, cstack
 17060 ;; Tracked objects:
 17061 ;;		On entry : 0/2
 17062 ;;		On exit  : 0/0
 17063 ;;		Unchanged: 0/0
 17064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;Total ram usage:        2 bytes
 17070 ;; Hardware stack levels used:    1
 17071 ;; Hardware stack levels required when called:    7
 17072 ;; This function calls:
 17073 ;;		_ENC28_PhyRead
 17074 ;; This function is called by:
 17075 ;;		_ETH_Init
 17076 ;;		_ETH_EventHandler
 17077 ;;		_Network_WaitForLink
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           	psect	text63
 17082  005DB8                     __ptext63:
 17083                           	opt stack 0
 17084  005DB8                     _ETH_CheckLinkUp:
 17085                           	opt stack 22
 17086                           
 17087                           ;enc28J60.c: 419: uint16_t phstat2;
 17088                           ;enc28J60.c: 421: phstat2 = ENC28_PhyRead(J60_PHSTAT2);
 17089                           
 17090                           ;incstack = 0
 17091  005DB8  0E11               	movlw	17
 17092  005DBA  EC44  F02C         	call	_ENC28_PhyRead
 17093  005DBE  C00A  F00E         	movff	?_ENC28_PhyRead,ETH_CheckLinkUp@phstat2
 17094  005DC2  C00B  F00F         	movff	?_ENC28_PhyRead+1,ETH_CheckLinkUp@phstat2+1
 17095                           
 17096                           ;enc28J60.c: 423: if(phstat2 & 0x0400)
 17097  005DC6  A40F               	btfss	ETH_CheckLinkUp@phstat2+1,2,c
 17098  005DC8  0C00               	retlw	0
 17099                           
 17100                           ;enc28J60.c: 424: {
 17101                           ;enc28J60.c: 425: ethData.up = 1;
 17102  005DCA  0101               	movlb	1	; () banked
 17103  005DCC  85B5               	bsf	_ethData& (0+255),2,b	;volatile
 17104                           
 17105                           ; BSR set to: 1
 17106                           ;enc28J60.c: 426: return 1;
 17107  005DCE  0C01               	retlw	1
 17108  005DD0                     __end_of_ETH_CheckLinkUp:
 17109                           	opt stack 0
 17110                           tosu	equ	0xFFF
 17111                           tosh	equ	0xFFE
 17112                           tosl	equ	0xFFD
 17113                           pclath	equ	0xFFA
 17114                           tblptru	equ	0xFF8
 17115                           tblptrh	equ	0xFF7
 17116                           tblptrl	equ	0xFF6
 17117                           tablat	equ	0xFF5
 17118                           prodh	equ	0xFF4
 17119                           prodl	equ	0xFF3
 17120                           intcon	equ	0xFF2
 17121                           indf0	equ	0xFEF
 17122                           postinc0	equ	0xFEE
 17123                           fsr0h	equ	0xFEA
 17124                           fsr0l	equ	0xFE9
 17125                           wreg	equ	0xFE8
 17126                           postinc1	equ	0xFE6
 17127                           plusw1	equ	0xFE3
 17128                           fsr1h	equ	0xFE2
 17129                           fsr1l	equ	0xFE1
 17130                           bsr	equ	0xFE0
 17131                           indf2	equ	0xFDF
 17132                           postinc2	equ	0xFDE
 17133                           postdec2	equ	0xFDD
 17134                           plusw2	equ	0xFDB
 17135                           fsr2h	equ	0xFDA
 17136                           fsr2l	equ	0xFD9
 17137                           status	equ	0xFD8
 17138                           
 17139 ;; *************** function _ENC28_PhyRead *****************
 17140 ;; Defined at:
 17141 ;;		line 393 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;  a               1    wreg     enum E6740
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  a               1   12[COMRAM] enum E6740
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  2    9[COMRAM] unsigned int 
 17148 ;; Registers used:
 17149 ;;		wreg, status,2, status,0, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/2
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;Total ram usage:        4 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    6
 17162 ;; This function calls:
 17163 ;;		_ENC28_Bfc
 17164 ;;		_ENC28_Bfs
 17165 ;;		_ENC28_Rcr16
 17166 ;;		_ENC28_Rcr8
 17167 ;;		_ENC28_Wcr8
 17168 ;; This function is called by:
 17169 ;;		_ETH_CheckLinkUp
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           	psect	text64
 17174  005888                     __ptext64:
 17175                           	opt stack 0
 17176  005888                     _ENC28_PhyRead:
 17177                           	opt stack 22
 17178                           
 17179                           ;incstack = 0
 17180                           ;ENC28_PhyRead@a stored from wreg
 17181  005888  6E0D               	movwf	ENC28_PhyRead@a,c
 17182                           
 17183                           ;enc28J60.c: 395: ENC28_Wcr8(J60_MIREGADR, a);
 17184  00588A  C00D  F005         	movff	ENC28_PhyRead@a,ENC28_Wcr8@v
 17185  00588E  0E94               	movlw	148
 17186  005890  EC52  F02E         	call	_ENC28_Wcr8
 17187                           
 17188                           ;enc28J60.c: 396: ENC28_Bfs(J60_MICMD, 0x01);
 17189  005894  0E01               	movlw	1
 17190  005896  6E05               	movwf	ENC28_Bfs@bits,c
 17191  005898  0E92               	movlw	146
 17192  00589A  EC70  F02E         	call	_ENC28_Bfs
 17193  00589E                     l8942:
 17194  00589E  0ECA               	movlw	202
 17195  0058A0  EC33  F02E         	call	_ENC28_Rcr8
 17196  0058A4  6E0C               	movwf	??_ENC28_PhyRead& (0+255),c
 17197  0058A6  B00C               	btfsc	??_ENC28_PhyRead,0,c
 17198  0058A8  D7FA               	goto	l8942
 17199                           
 17200                           ;enc28J60.c: 398: ENC28_Bfc(J60_MICMD, 0x01);
 17201  0058AA  0E01               	movlw	1
 17202  0058AC  6E05               	movwf	ENC28_Bfc@bits,c
 17203  0058AE  0E92               	movlw	146
 17204  0058B0  EC61  F02E         	call	_ENC28_Bfc
 17205                           
 17206                           ;enc28J60.c: 400: return ENC28_Rcr16(J60_MIRDL);
 17207  0058B4  0E98               	movlw	152
 17208  0058B6  EC25  F02C         	call	_ENC28_Rcr16
 17209  0058BA  C005  F00A         	movff	?_ENC28_Rcr16,?_ENC28_PhyRead
 17210  0058BE  C006  F00B         	movff	?_ENC28_Rcr16+1,?_ENC28_PhyRead+1
 17211  0058C2  0012               	return		;funcret
 17212  0058C4                     __end_of_ENC28_PhyRead:
 17213                           	opt stack 0
 17214                           tosu	equ	0xFFF
 17215                           tosh	equ	0xFFE
 17216                           tosl	equ	0xFFD
 17217                           pclath	equ	0xFFA
 17218                           tblptru	equ	0xFF8
 17219                           tblptrh	equ	0xFF7
 17220                           tblptrl	equ	0xFF6
 17221                           tablat	equ	0xFF5
 17222                           prodh	equ	0xFF4
 17223                           prodl	equ	0xFF3
 17224                           intcon	equ	0xFF2
 17225                           indf0	equ	0xFEF
 17226                           postinc0	equ	0xFEE
 17227                           fsr0h	equ	0xFEA
 17228                           fsr0l	equ	0xFE9
 17229                           wreg	equ	0xFE8
 17230                           postinc1	equ	0xFE6
 17231                           plusw1	equ	0xFE3
 17232                           fsr1h	equ	0xFE2
 17233                           fsr1l	equ	0xFE1
 17234                           bsr	equ	0xFE0
 17235                           indf2	equ	0xFDF
 17236                           postinc2	equ	0xFDE
 17237                           postdec2	equ	0xFDD
 17238                           plusw2	equ	0xFDB
 17239                           fsr2h	equ	0xFDA
 17240                           fsr2l	equ	0xFD9
 17241                           status	equ	0xFD8
 17242                           
 17243 ;; *************** function _ENC28_PhyWrite *****************
 17244 ;; Defined at:
 17245 ;;		line 376 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 17246 ;; Parameters:    Size  Location     Type
 17247 ;;  a               1    wreg     enum E6740
 17248 ;;  d               2    7[COMRAM] unsigned int 
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;  a               1    9[COMRAM] enum E6740
 17251 ;;  v               1   10[COMRAM] unsigned char 
 17252 ;; Return value:  Size  Location     Type
 17253 ;;		None               void
 17254 ;; Registers used:
 17255 ;;		wreg, status,2, status,0, cstack
 17256 ;; Tracked objects:
 17257 ;;		On entry : 0/1
 17258 ;;		On exit  : 0/0
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;Total ram usage:        4 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    6
 17268 ;; This function calls:
 17269 ;;		_ENC28_Rcr8
 17270 ;;		_ENC28_Wcr16
 17271 ;;		_ENC28_Wcr8
 17272 ;; This function is called by:
 17273 ;;		_ETH_Init
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           	psect	text65
 17278  0059CC                     __ptext65:
 17279                           	opt stack 0
 17280  0059CC                     _ENC28_PhyWrite:
 17281                           	opt stack 22
 17282                           
 17283                           ;incstack = 0
 17284                           ;ENC28_PhyWrite@a stored from wreg
 17285  0059CC  6E0A               	movwf	ENC28_PhyWrite@a,c
 17286                           
 17287                           ;enc28J60.c: 378: uint8_t v=1;
 17288  0059CE  0E01               	movlw	1
 17289  0059D0  6E0B               	movwf	ENC28_PhyWrite@v,c
 17290                           
 17291                           ;enc28J60.c: 380: ENC28_Wcr8(J60_MIREGADR, a);
 17292  0059D2  C00A  F005         	movff	ENC28_PhyWrite@a,ENC28_Wcr8@v
 17293  0059D6  0E94               	movlw	148
 17294  0059D8  EC52  F02E         	call	_ENC28_Wcr8
 17295                           
 17296                           ;enc28J60.c: 381: ENC28_Wcr16(J60_MIWRL, d);
 17297  0059DC  C008  F005         	movff	ENC28_PhyWrite@d,ENC28_Wcr16@v
 17298  0059E0  C009  F006         	movff	ENC28_PhyWrite@d+1,ENC28_Wcr16@v+1
 17299  0059E4  0E96               	movlw	150
 17300  0059E6  EC9A  F02C         	call	_ENC28_Wcr16
 17301                           
 17302                           ;enc28J60.c: 382: while(v & 0x01)
 17303  0059EA  D004               	goto	l9122
 17304  0059EC                     l9120:
 17305                           
 17306                           ;enc28J60.c: 383: {
 17307                           ;enc28J60.c: 384: v = ENC28_Rcr8(J60_MISTAT);
 17308  0059EC  0ECA               	movlw	202
 17309  0059EE  EC33  F02E         	call	_ENC28_Rcr8
 17310  0059F2  6E0B               	movwf	ENC28_PhyWrite@v,c
 17311  0059F4                     l9122:
 17312  0059F4  A00B               	btfss	ENC28_PhyWrite@v,0,c
 17313  0059F6  0012               	return		;funcret
 17314  0059F8  D7F9               	goto	l9120
 17315  0059FA                     __end_of_ENC28_PhyWrite:
 17316                           	opt stack 0
 17317                           tosu	equ	0xFFF
 17318                           tosh	equ	0xFFE
 17319                           tosl	equ	0xFFD
 17320                           pclath	equ	0xFFA
 17321                           tblptru	equ	0xFF8
 17322                           tblptrh	equ	0xFF7
 17323                           tblptrl	equ	0xFF6
 17324                           tablat	equ	0xFF5
 17325                           prodh	equ	0xFF4
 17326                           prodl	equ	0xFF3
 17327                           intcon	equ	0xFF2
 17328                           indf0	equ	0xFEF
 17329                           postinc0	equ	0xFEE
 17330                           fsr0h	equ	0xFEA
 17331                           fsr0l	equ	0xFE9
 17332                           wreg	equ	0xFE8
 17333                           postinc1	equ	0xFE6
 17334                           plusw1	equ	0xFE3
 17335                           fsr1h	equ	0xFE2
 17336                           fsr1l	equ	0xFE1
 17337                           bsr	equ	0xFE0
 17338                           indf2	equ	0xFDF
 17339                           postinc2	equ	0xFDE
 17340                           postdec2	equ	0xFDD
 17341                           plusw2	equ	0xFDB
 17342                           fsr2h	equ	0xFDA
 17343                           fsr2l	equ	0xFD9
 17344                           status	equ	0xFD8
 17345                           
 17346 ;; *************** function _ENC28_Wcr8 *****************
 17347 ;; Defined at:
 17348 ;;		line 313 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 17349 ;; Parameters:    Size  Location     Type
 17350 ;;  a               1    wreg     enum E6625
 17351 ;;  v               1    4[COMRAM] unsigned char 
 17352 ;; Auto vars:     Size  Location     Type
 17353 ;;  a               1    5[COMRAM] enum E6625
 17354 ;; Return value:  Size  Location     Type
 17355 ;;		None               void
 17356 ;; Registers used:
 17357 ;;		wreg, status,2, status,0, cstack
 17358 ;; Tracked objects:
 17359 ;;		On entry : 0/1
 17360 ;;		On exit  : 0/0
 17361 ;;		Unchanged: 0/0
 17362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17363 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17367 ;;Total ram usage:        2 bytes
 17368 ;; Hardware stack levels used:    1
 17369 ;; Hardware stack levels required when called:    5
 17370 ;; This function calls:
 17371 ;;		_ENC28_BankSel
 17372 ;;		_SPI_ExchangeByte
 17373 ;; This function is called by:
 17374 ;;		_ETH_Init
 17375 ;;		_ETH_EventHandler
 17376 ;;		_ENC28_PhyWrite
 17377 ;;		_ENC28_PhyRead
 17378 ;; This function uses a non-reentrant model
 17379 ;;
 17380                           
 17381                           	psect	text66
 17382  005CA4                     __ptext66:
 17383                           	opt stack 0
 17384  005CA4                     _ENC28_Wcr8:
 17385                           	opt stack 22
 17386                           
 17387                           ;incstack = 0
 17388                           ;ENC28_Wcr8@a stored from wreg
 17389  005CA4  6E06               	movwf	ENC28_Wcr8@a,c
 17390                           
 17391                           ;enc28J60.c: 315: ENC28_BankSel(a);
 17392  005CA6  5006               	movf	ENC28_Wcr8@a,w,c
 17393  005CA8  ECE2  F02B         	call	_ENC28_BankSel
 17394  005CAC  968C               	bcf	3980,3,c	;volatile
 17395                           
 17396                           ;enc28J60.c: 317: SPI_ExchangeByte(wcr_inst | (a & 0x1F));
 17397  005CAE  5006               	movf	ENC28_Wcr8@a,w,c
 17398  005CB0  0B1F               	andlw	31
 17399  005CB2  0940               	iorlw	64
 17400  005CB4  EC42  F02F         	call	_SPI_ExchangeByte
 17401                           
 17402                           ;enc28J60.c: 318: SPI_ExchangeByte(v);
 17403  005CB8  5005               	movf	ENC28_Wcr8@v,w,c
 17404  005CBA  EC42  F02F         	call	_SPI_ExchangeByte
 17405  005CBE  868C               	bsf	3980,3,c	;volatile
 17406  005CC0  0012               	return		;funcret
 17407  005CC2                     __end_of_ENC28_Wcr8:
 17408                           	opt stack 0
 17409                           tosu	equ	0xFFF
 17410                           tosh	equ	0xFFE
 17411                           tosl	equ	0xFFD
 17412                           pclath	equ	0xFFA
 17413                           tblptru	equ	0xFF8
 17414                           tblptrh	equ	0xFF7
 17415                           tblptrl	equ	0xFF6
 17416                           tablat	equ	0xFF5
 17417                           prodh	equ	0xFF4
 17418                           prodl	equ	0xFF3
 17419                           intcon	equ	0xFF2
 17420                           indf0	equ	0xFEF
 17421                           postinc0	equ	0xFEE
 17422                           fsr0h	equ	0xFEA
 17423                           fsr0l	equ	0xFE9
 17424                           wreg	equ	0xFE8
 17425                           postinc1	equ	0xFE6
 17426                           plusw1	equ	0xFE3
 17427                           fsr1h	equ	0xFE2
 17428                           fsr1l	equ	0xFE1
 17429                           bsr	equ	0xFE0
 17430                           indf2	equ	0xFDF
 17431                           postinc2	equ	0xFDE
 17432                           postdec2	equ	0xFDD
 17433                           plusw2	equ	0xFDB
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function _ARPV4_Init *****************
 17439 ;; Defined at:
 17440 ;;		line 86 in file "../../TCPIP Library/source/arpv4.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;		None
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;  x               1    1[COMRAM] unsigned char 
 17445 ;; Return value:  Size  Location     Type
 17446 ;;		None               void
 17447 ;; Registers used:
 17448 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/1
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;Total ram usage:        1 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; Hardware stack levels required when called:    3
 17461 ;; This function calls:
 17462 ;;		Nothing
 17463 ;; This function is called by:
 17464 ;;		_Network_Init
 17465 ;; This function uses a non-reentrant model
 17466 ;;
 17467                           
 17468                           	psect	text67
 17469  005D52                     __ptext67:
 17470                           	opt stack 0
 17471  005D52                     _ARPV4_Init:
 17472                           	opt stack 26
 17473                           
 17474                           ;arpv4.c: 88: for(uint8_t x= 0 ; x < sizeof(arpMap); x++)
 17475                           
 17476                           ;incstack = 0
 17477  005D52  6A02               	clrf	ARPV4_Init@x,c
 17478  005D54                     l7036:
 17479                           
 17480                           ;arpv4.c: 89: ((char *)arpMap)[x] = 0;
 17481  005D54  0E2C               	movlw	low _arpMap
 17482  005D56  2402               	addwf	ARPV4_Init@x,w,c
 17483  005D58  6ED9               	movwf	fsr2l,c
 17484  005D5A  6ADA               	clrf	fsr2h,c
 17485  005D5C  0E02               	movlw	high _arpMap
 17486  005D5E  22DA               	addwfc	fsr2h,f,c
 17487  005D60  6ADF               	clrf	indf2,c
 17488  005D62  2A02               	incf	ARPV4_Init@x,f,c
 17489  005D64  0E67               	movlw	103
 17490  005D66  6402               	cpfsgt	ARPV4_Init@x,c
 17491  005D68  D7F5               	goto	l7036
 17492  005D6A  0C67               	retlw	103
 17493  005D6C                     __end_of_ARPV4_Init:
 17494                           	opt stack 0
 17495                           tosu	equ	0xFFF
 17496                           tosh	equ	0xFFE
 17497                           tosl	equ	0xFFD
 17498                           pclath	equ	0xFFA
 17499                           tblptru	equ	0xFF8
 17500                           tblptrh	equ	0xFF7
 17501                           tblptrl	equ	0xFF6
 17502                           tablat	equ	0xFF5
 17503                           prodh	equ	0xFF4
 17504                           prodl	equ	0xFF3
 17505                           intcon	equ	0xFF2
 17506                           indf0	equ	0xFEF
 17507                           postinc0	equ	0xFEE
 17508                           fsr0h	equ	0xFEA
 17509                           fsr0l	equ	0xFE9
 17510                           wreg	equ	0xFE8
 17511                           postinc1	equ	0xFE6
 17512                           plusw1	equ	0xFE3
 17513                           fsr1h	equ	0xFE2
 17514                           fsr1l	equ	0xFE1
 17515                           bsr	equ	0xFE0
 17516                           indf2	equ	0xFDF
 17517                           postinc2	equ	0xFDE
 17518                           postdec2	equ	0xFDD
 17519                           plusw2	equ	0xFDB
 17520                           fsr2h	equ	0xFDA
 17521                           fsr2l	equ	0xFD9
 17522                           status	equ	0xFD8
 17523                           
 17524 ;; *************** function _IPV4_GetMyIP *****************
 17525 ;; Defined at:
 17526 ;;		line 288 in file "../../TCPIP Library/source/ipv4.c"
 17527 ;; Parameters:    Size  Location     Type
 17528 ;;		None
 17529 ;; Auto vars:     Size  Location     Type
 17530 ;;		None
 17531 ;; Return value:  Size  Location     Type
 17532 ;;                  4    1[COMRAM] unsigned long 
 17533 ;; Registers used:
 17534 ;;		None
 17535 ;; Tracked objects:
 17536 ;;		On entry : 0/1
 17537 ;;		On exit  : 0/0
 17538 ;;		Unchanged: 0/0
 17539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17543 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17544 ;;Total ram usage:        4 bytes
 17545 ;; Hardware stack levels used:    1
 17546 ;; Hardware stack levels required when called:    3
 17547 ;; This function calls:
 17548 ;;		Nothing
 17549 ;; This function is called by:
 17550 ;;		_main
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           	psect	text68
 17555  005E28                     __ptext68:
 17556                           	opt stack 0
 17557  005E28                     _IPV4_GetMyIP:
 17558                           	opt stack 27
 17559                           
 17560                           ;ipv4.c: 290: return(ipv4Address);
 17561                           
 17562                           ;incstack = 0
 17563  005E28  C1C4  F002         	movff	_ipv4Address,?_IPV4_GetMyIP
 17564  005E2C  C1C5  F003         	movff	_ipv4Address+1,?_IPV4_GetMyIP+1
 17565  005E30  C1C6  F004         	movff	_ipv4Address+2,?_IPV4_GetMyIP+2
 17566  005E34  C1C7  F005         	movff	_ipv4Address+3,?_IPV4_GetMyIP+3
 17567  005E38  0012               	return		;funcret
 17568  005E3A                     __end_of_IPV4_GetMyIP:
 17569                           	opt stack 0
 17570                           tosu	equ	0xFFF
 17571                           tosh	equ	0xFFE
 17572                           tosl	equ	0xFFD
 17573                           pclath	equ	0xFFA
 17574                           tblptru	equ	0xFF8
 17575                           tblptrh	equ	0xFF7
 17576                           tblptrl	equ	0xFF6
 17577                           tablat	equ	0xFF5
 17578                           prodh	equ	0xFF4
 17579                           prodl	equ	0xFF3
 17580                           intcon	equ	0xFF2
 17581                           indf0	equ	0xFEF
 17582                           postinc0	equ	0xFEE
 17583                           fsr0h	equ	0xFEA
 17584                           fsr0l	equ	0xFE9
 17585                           wreg	equ	0xFE8
 17586                           postinc1	equ	0xFE6
 17587                           plusw1	equ	0xFE3
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           bsr	equ	0xFE0
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           plusw2	equ	0xFDB
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _DEMO_UDP_Send *****************
 17600 ;; Defined at:
 17601 ;;		line 379 in file "udp_demo.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;		None
 17604 ;; Auto vars:     Size  Location     Type
 17605 ;;  pot_adcResul    2   16[BANK0 ] unsigned int 
 17606 ;;  started         1   15[BANK0 ] unsigned char 
 17607 ;; Return value:  Size  Location     Type
 17608 ;;		None               void
 17609 ;; Registers used:
 17610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17611 ;; Tracked objects:
 17612 ;;		On entry : 0/1
 17613 ;;		On exit  : E/0
 17614 ;;		Unchanged: 0/0
 17615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;Total ram usage:        7 bytes
 17621 ;; Hardware stack levels used:    1
 17622 ;; Hardware stack levels required when called:   10
 17623 ;; This function calls:
 17624 ;;		_ADC_GetConversion
 17625 ;;		_DEMO_UDP_ClaimIPCheck
 17626 ;;		_UDP_Send
 17627 ;;		_UDP_Start
 17628 ;;		_UDP_Write32
 17629 ;;		_UDP_Write8
 17630 ;; This function is called by:
 17631 ;;		_main
 17632 ;; This function uses a non-reentrant model
 17633 ;;
 17634                           
 17635                           	psect	text69
 17636  004BF0                     __ptext69:
 17637                           	opt stack 0
 17638  004BF0                     _DEMO_UDP_Send:
 17639                           	opt stack 20
 17640                           
 17641                           ;udp_demo.c: 382: adc_result_t pot_adcResult;
 17642                           ;udp_demo.c: 384: if(!DEMO_UDP_ClaimIPCheck())
 17643                           
 17644                           ;incstack = 0
 17645  004BF0  ECC3  F02E         	call	_DEMO_UDP_ClaimIPCheck	;wreg free
 17646  004BF4  E20F               	bc	l9618
 17647                           
 17648                           ; BSR set to: 1
 17649                           ;udp_demo.c: 385: {
 17650                           ;udp_demo.c: 386: started = UDP_Start(0xFFFFFFFF,65533,65531);
 17651  004BF6  D86F               	call	PL314	;call to abstracted procedure
 17652  004BF8  D867               	call	PL264	;call to abstracted procedure
 17653  004BFA  ECD9  F02A         	call	_UDP_Start	;wreg free
 17654  004BFE  0100               	movlb	0	; () banked
 17655  004C00  6F6F               	movwf	DEMO_UDP_Send@started& (0+255),b
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;udp_demo.c: 387: if(started==SUCCESS)
 17659  004C02  056F               	decf	DEMO_UDP_Send@started& (0+255),w,b
 17660  004C04  E107               	bnz	l9618
 17661                           
 17662                           ; BSR set to: 0
 17663                           ;udp_demo.c: 388: {
 17664                           ;udp_demo.c: 389: UDP_Write8('L');
 17665  004C06  0E4C               	movlw	76
 17666  004C08                     i1L__ptext70:
 17667                           	opt stack 0
 17668  004C08                     i1L_UDP_Write8:
 17669                           	opt stack 24
 17670                           
 17671                           ;incstack = 0
 17672                           ;UDP_Write8@data stored from wreg
 17673  004C08  6E04               	movwf	UDP_Write8@data,c
 17674  004C0A                     i1Ll9548:
 17675                           	opt stack 24
 17676                           
 17677                           ;udpv4.c: 184: ETH_Write8(data);
 17678  004C0A  5004               	movf	UDP_Write8@data,w,c
 17679  004C0C  ECB6  F02E         	call	_ETH_Write8
 17680  004C10                     i1Ll1502:
 17681                           	opt stack 20
 17682                           
 17683                           ;udp_demo.c: 390: UDP_Send();
 17684  004C10  EC72  F028         	call	_UDP_Send	;wreg free
 17685  004C14                     l9618:
 17686                           
 17687                           ;udp_demo.c: 391: }
 17688                           ;udp_demo.c: 392: }
 17689                           ;udp_demo.c: 394: if(pot_init)
 17690  004C14  0101               	movlb	1	; () banked
 17691  004C16  51E6               	movf	_pot_init& (0+255),w,b
 17692  004C18  B4D8               	btfsc	status,2,c
 17693  004C1A  0012               	return	
 17694                           
 17695                           ; BSR set to: 1
 17696                           ;udp_demo.c: 395: {
 17697                           ;udp_demo.c: 396: pot_adcResult = ADC_GetConversion(channel_AN2);
 17698  004C1C  0E02               	movlw	2
 17699  004C1E  EC14  F02D         	call	_ADC_GetConversion
 17700  004C22  C002  F070         	movff	?_ADC_GetConversion,DEMO_UDP_Send@pot_adcResult
 17701  004C26  C003  F071         	movff	?_ADC_GetConversion+1,DEMO_UDP_Send@pot_adcResult+1
 17702                           
 17703                           ;udp_demo.c: 398: if(((pot_adcResult > (pot_initial_adcResult + 100)) || (pot_adcResult 
      +                          <(pot_initial_adcResult - 100))) && pot_adcResult > 100)
 17704  004C2A  0E64               	movlw	100
 17705  004C2C  0101               	movlb	1	; () banked
 17706  004C2E  25DB               	addwf	_pot_initial_adcResult& (0+255),w,b
 17707  004C30  6E58               	movwf	??_DEMO_UDP_Send& (0+255),c
 17708  004C32  0E00               	movlw	0
 17709  004C34  21DC               	addwfc	(_pot_initial_adcResult+1)& (0+255),w,b
 17710  004C36  6E59               	movwf	(??_DEMO_UDP_Send+1)& (0+255),c
 17711  004C38  0100               	movlb	0	; () banked
 17712  004C3A  5170               	movf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 17713  004C3C  5C58               	subwf	??_DEMO_UDP_Send,w,c
 17714  004C3E  5171               	movf	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 17715  004C40  5859               	subwfb	??_DEMO_UDP_Send+1,w,c
 17716  004C42  E311               	bnc	l9626
 17717                           
 17718                           ; BSR set to: 0
 17719  004C44  0E9C               	movlw	156
 17720  004C46  6E58               	movwf	??_DEMO_UDP_Send& (0+255),c
 17721  004C48  6859               	setf	(??_DEMO_UDP_Send+1)& (0+255),c
 17722  004C4A  C1DB  F05A         	movff	_pot_initial_adcResult,??_DEMO_UDP_Send+2
 17723  004C4E  C1DC  F05B         	movff	_pot_initial_adcResult+1,??_DEMO_UDP_Send+3
 17724  004C52  5058               	movf	??_DEMO_UDP_Send,w,c
 17725  004C54  265A               	addwf	??_DEMO_UDP_Send+2,f,c
 17726  004C56  5059               	movf	??_DEMO_UDP_Send+1,w,c
 17727  004C58  225B               	addwfc	??_DEMO_UDP_Send+3,f,c
 17728  004C5A  505A               	movf	??_DEMO_UDP_Send+2,w,c
 17729  004C5C  5D70               	subwf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 17730  004C5E  505B               	movf	??_DEMO_UDP_Send+3,w,c
 17731  004C60  5971               	subwfb	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 17732  004C62  B0D8               	btfsc	status,0,c
 17733  004C64  0012               	return	
 17734  004C66                     l9626:
 17735                           
 17736                           ; BSR set to: 0
 17737  004C66  5171               	movf	(DEMO_UDP_Send@pot_adcResult+1)& (0+255),w,b
 17738  004C68  E104               	bnz	u14900
 17739  004C6A  0E65               	movlw	101
 17740  004C6C  5D70               	subwf	DEMO_UDP_Send@pot_adcResult& (0+255),w,b
 17741  004C6E  A0D8               	btfss	status,0,c
 17742  004C70  0012               	return	
 17743  004C72                     u14900:
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;udp_demo.c: 399: {
 17747                           ;udp_demo.c: 400: started = UDP_Start(claim_dest_ip,65533,65531);
 17748  004C72  C1BC  F067         	movff	_claim_dest_ip,UDP_Start@destIP
 17749  004C76  C1BD  F068         	movff	_claim_dest_ip+1,UDP_Start@destIP+1
 17750  004C7A  C1BE  F069         	movff	_claim_dest_ip+2,UDP_Start@destIP+2
 17751  004C7E  C1BF  F06A         	movff	_claim_dest_ip+3,UDP_Start@destIP+3
 17752  004C82  D822               	call	PL264	;call to abstracted procedure
 17753  004C84  ECD9  F02A         	call	_UDP_Start	;wreg free
 17754  004C88  0100               	movlb	0	; () banked
 17755  004C8A  6F6F               	movwf	DEMO_UDP_Send@started& (0+255),b
 17756                           
 17757                           ; BSR set to: 0
 17758                           ;udp_demo.c: 401: if(started==SUCCESS)
 17759  004C8C  056F               	decf	DEMO_UDP_Send@started& (0+255),w,b
 17760  004C8E  E117               	bnz	l9636
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;udp_demo.c: 402: {
 17764                           ;udp_demo.c: 403: UDP_Write8('P');
 17765  004C90  0E50               	movlw	80
 17766  004C92                     i2L__ptext70:
 17767                           	opt stack 0
 17768  004C92                     i2L_UDP_Write8:
 17769                           	opt stack 24
 17770                           
 17771                           ;incstack = 0
 17772                           ;UDP_Write8@data stored from wreg
 17773  004C92  6E04               	movwf	UDP_Write8@data,c
 17774  004C94                     i2Ll9548:
 17775                           	opt stack 24
 17776                           
 17777                           ;udpv4.c: 184: ETH_Write8(data);
 17778  004C94  5004               	movf	UDP_Write8@data,w,c
 17779  004C96  ECB6  F02E         	call	_ETH_Write8
 17780  004C9A                     i2Ll1502:
 17781                           	opt stack 20
 17782                           
 17783                           ;udp_demo.c: 404: UDP_Write32(pot_adcResult);
 17784  004C9A  C070  F007         	movff	DEMO_UDP_Send@pot_adcResult,UDP_Write32@data
 17785  004C9E  C071  F008         	movff	DEMO_UDP_Send@pot_adcResult+1,UDP_Write32@data+1
 17786  004CA2  6A09               	clrf	UDP_Write32@data+2,c
 17787  004CA4  6A0A               	clrf	UDP_Write32@data+3,c
 17788  004CA6                     i3L__ptext71:
 17789                           	opt stack 0
 17790  004CA6                     i3L_UDP_Write32:
 17791                           	opt stack 0
 17792  004CA6                     i3Ll9550:
 17793                           	opt stack 24
 17794                           
 17795                           ;udpv4.c: 195: ETH_Write32(data);
 17796  004CA6  C007  F003         	movff	UDP_Write32@data,ETH_Write32@data
 17797  004CAA  C008  F004         	movff	UDP_Write32@data+1,ETH_Write32@data+1
 17798  004CAE  C009  F005         	movff	UDP_Write32@data+2,ETH_Write32@data+2
 17799  004CB2  C00A  F006         	movff	UDP_Write32@data+3,ETH_Write32@data+3
 17800  004CB6  EC6B  F02D         	call	_ETH_Write32	;wreg free
 17801  004CBA                     i3Ll1508:
 17802                           	opt stack 20
 17803                           
 17804                           ;udp_demo.c: 405: UDP_Send();
 17805  004CBA  EC72  F028         	call	_UDP_Send	;wreg free
 17806  004CBE                     l9636:
 17807                           
 17808                           ;udp_demo.c: 406: }
 17809                           ;udp_demo.c: 407: pot_initial_adcResult = pot_adcResult;
 17810  004CBE  C070  F1DB         	movff	DEMO_UDP_Send@pot_adcResult,_pot_initial_adcResult
 17811  004CC2  C071  F1DC         	movff	DEMO_UDP_Send@pot_adcResult+1,_pot_initial_adcResult+1
 17812  004CC6  0012               	return		;funcret
 17813  004CC8                     __end_of_DEMO_UDP_Send:
 17814                           	opt stack 0
 17815  004CC8                     PL264:
 17816                           	opt stack 20
 17817  004CC8  696C               	setf	(UDP_Start@srcPort+1)& (0+255),b
 17818  004CCA  0EFD               	movlw	253
 17819  004CCC  6F6B               	movwf	UDP_Start@srcPort& (0+255),b
 17820  004CCE  696E               	setf	(UDP_Start@dstPort+1)& (0+255),b
 17821  004CD0  0EFB               	movlw	251
 17822  004CD2  6F6D               	movwf	UDP_Start@dstPort& (0+255),b
 17823  004CD4  0CFB               	retlw	251
 17824  004CD6                     __end_ofPL264:
 17825                           	opt stack 0
 17826  004CD6                     PL314:
 17827                           	opt stack 18
 17828  004CD6  0100               	movlb	0	; () banked
 17829  004CD8  6967               	setf	UDP_Start@destIP& (0+255),b
 17830  004CDA  6968               	setf	(UDP_Start@destIP+1)& (0+255),b
 17831  004CDC  6969               	setf	(UDP_Start@destIP+2)& (0+255),b
 17832  004CDE  696A               	setf	(UDP_Start@destIP+3)& (0+255),b
 17833  004CE0  0012               	return	
 17834  004CE2                     __end_ofPL314:
 17835                           	opt stack 0
 17836                           tosu	equ	0xFFF
 17837                           tosh	equ	0xFFE
 17838                           tosl	equ	0xFFD
 17839                           pclath	equ	0xFFA
 17840                           tblptru	equ	0xFF8
 17841                           tblptrh	equ	0xFF7
 17842                           tblptrl	equ	0xFF6
 17843                           tablat	equ	0xFF5
 17844                           prodh	equ	0xFF4
 17845                           prodl	equ	0xFF3
 17846                           intcon	equ	0xFF2
 17847                           indf0	equ	0xFEF
 17848                           postinc0	equ	0xFEE
 17849                           fsr0h	equ	0xFEA
 17850                           fsr0l	equ	0xFE9
 17851                           wreg	equ	0xFE8
 17852                           postinc1	equ	0xFE6
 17853                           plusw1	equ	0xFE3
 17854                           fsr1h	equ	0xFE2
 17855                           fsr1l	equ	0xFE1
 17856                           bsr	equ	0xFE0
 17857                           indf2	equ	0xFDF
 17858                           postinc2	equ	0xFDE
 17859                           postdec2	equ	0xFDD
 17860                           plusw2	equ	0xFDB
 17861                           fsr2h	equ	0xFDA
 17862                           fsr2l	equ	0xFD9
 17863                           status	equ	0xFD8
 17864                           
 17865 ;; *************** function _UDP_Write8 *****************
 17866 ;; Defined at:
 17867 ;;		line 182 in file "../../TCPIP Library/source/udpv4.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;  data            1    wreg     unsigned char 
 17870 ;; Auto vars:     Size  Location     Type
 17871 ;;  data            1    3[COMRAM] unsigned char 
 17872 ;; Return value:  Size  Location     Type
 17873 ;;		None               void
 17874 ;; Registers used:
 17875 ;;		wreg, status,2, status,0, cstack
 17876 ;; Tracked objects:
 17877 ;;		On entry : F/0
 17878 ;;		On exit  : 0/0
 17879 ;;		Unchanged: 0/0
 17880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17885 ;;Total ram usage:        1 bytes
 17886 ;; Hardware stack levels used:    1
 17887 ;; Hardware stack levels required when called:    5
 17888 ;; This function calls:
 17889 ;;		_ETH_Write8
 17890 ;; This function is called by:
 17891 ;;		_DEMO_UDP_Send
 17892 ;;		_DEMO_UDP_Recv
 17893 ;; This function uses a non-reentrant model
 17894 ;;
 17895                           
 17896                           	psect	text70
 17897  000000                     __ptext70:
 17898                           	opt stack 0
 17899  000000                     _UDP_Write8:
 17900                           	opt stack 0
 17901  000000                     __end_of_UDP_Write8:
 17902                           	opt stack 0
 17903                           tosu	equ	0xFFF
 17904                           tosh	equ	0xFFE
 17905                           tosl	equ	0xFFD
 17906                           pclath	equ	0xFFA
 17907                           tblptru	equ	0xFF8
 17908                           tblptrh	equ	0xFF7
 17909                           tblptrl	equ	0xFF6
 17910                           tablat	equ	0xFF5
 17911                           prodh	equ	0xFF4
 17912                           prodl	equ	0xFF3
 17913                           intcon	equ	0xFF2
 17914                           indf0	equ	0xFEF
 17915                           postinc0	equ	0xFEE
 17916                           fsr0h	equ	0xFEA
 17917                           fsr0l	equ	0xFE9
 17918                           wreg	equ	0xFE8
 17919                           postinc1	equ	0xFE6
 17920                           plusw1	equ	0xFE3
 17921                           fsr1h	equ	0xFE2
 17922                           fsr1l	equ	0xFE1
 17923                           bsr	equ	0xFE0
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _UDP_Write32 *****************
 17933 ;; Defined at:
 17934 ;;		line 193 in file "../../TCPIP Library/source/udpv4.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  data            4    6[COMRAM] unsigned long 
 17937 ;; Auto vars:     Size  Location     Type
 17938 ;;		None
 17939 ;; Return value:  Size  Location     Type
 17940 ;;		None               void
 17941 ;; Registers used:
 17942 ;;		wreg, status,2, status,0, cstack
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;Total ram usage:        4 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    5
 17955 ;; This function calls:
 17956 ;;		_ETH_Write32
 17957 ;; This function is called by:
 17958 ;;		_DEMO_UDP_Send
 17959 ;; This function uses a non-reentrant model
 17960 ;;
 17961                           
 17962                           	psect	text71
 17963  000000                     __ptext71:
 17964                           	opt stack 0
 17965  000000                     _UDP_Write32:
 17966                           	opt stack 0
 17967  000000                     __end_of_UDP_Write32:
 17968                           	opt stack 0
 17969                           tosu	equ	0xFFF
 17970                           tosh	equ	0xFFE
 17971                           tosl	equ	0xFFD
 17972                           pclath	equ	0xFFA
 17973                           tblptru	equ	0xFF8
 17974                           tblptrh	equ	0xFF7
 17975                           tblptrl	equ	0xFF6
 17976                           tablat	equ	0xFF5
 17977                           prodh	equ	0xFF4
 17978                           prodl	equ	0xFF3
 17979                           intcon	equ	0xFF2
 17980                           indf0	equ	0xFEF
 17981                           postinc0	equ	0xFEE
 17982                           fsr0h	equ	0xFEA
 17983                           fsr0l	equ	0xFE9
 17984                           wreg	equ	0xFE8
 17985                           postinc1	equ	0xFE6
 17986                           plusw1	equ	0xFE3
 17987                           fsr1h	equ	0xFE2
 17988                           fsr1l	equ	0xFE1
 17989                           bsr	equ	0xFE0
 17990                           indf2	equ	0xFDF
 17991                           postinc2	equ	0xFDE
 17992                           postdec2	equ	0xFDD
 17993                           plusw2	equ	0xFDB
 17994                           fsr2h	equ	0xFDA
 17995                           fsr2l	equ	0xFD9
 17996                           status	equ	0xFD8
 17997                           
 17998 ;; *************** function _UDP_Start *****************
 17999 ;; Defined at:
 18000 ;;		line 71 in file "../../TCPIP Library/source/udpv4.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  destIP          4    7[BANK0 ] unsigned long 
 18003 ;;  srcPort         2   11[BANK0 ] unsigned int 
 18004 ;;  dstPort         2   13[BANK0 ] unsigned int 
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;  ret             1   86[COMRAM] enum E367
 18007 ;; Return value:  Size  Location     Type
 18008 ;;                  1    wreg      enum E449
 18009 ;; Registers used:
 18010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : F/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18016 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;Total ram usage:        9 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:    9
 18023 ;; This function calls:
 18024 ;;		_ETH_ResetByteCount
 18025 ;;		_ETH_Write16
 18026 ;;		_IPv4_Start
 18027 ;; This function is called by:
 18028 ;;		_DHCP_Request
 18029 ;;		_DEMO_UDP_Send
 18030 ;;		_DEMO_UDP_Recv
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	text72
 18035  0055B2                     __ptext72:
 18036                           	opt stack 0
 18037  0055B2                     _UDP_Start:
 18038                           	opt stack 18
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;udpv4.c: 77: ret = IPv4_Start(destIP,UDP);
 18042                           
 18043                           ; BSR set to: 0
 18044                           
 18045                           ;incstack = 0
 18046  0055B2  C067  F04A         	movff	UDP_Start@destIP,IPv4_Start@destAddress
 18047  0055B6  C068  F04B         	movff	UDP_Start@destIP+1,IPv4_Start@destAddress+1
 18048  0055BA  C069  F04C         	movff	UDP_Start@destIP+2,IPv4_Start@destAddress+2
 18049  0055BE  C06A  F04D         	movff	UDP_Start@destIP+3,IPv4_Start@destAddress+3
 18050  0055C2  0E11               	movlw	17
 18051  0055C4  6E4E               	movwf	IPv4_Start@protocol,c
 18052  0055C6  ECC5  F020         	call	_IPv4_Start	;wreg free
 18053  0055CA  6E57               	movwf	UDP_Start@ret,c
 18054                           
 18055                           ; BSR set to: 0
 18056                           ;udpv4.c: 78: if(ret == SUCCESS)
 18057  0055CC  0457               	decf	UDP_Start@ret,w,c
 18058  0055CE  E116               	bnz	l8962
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;udpv4.c: 79: {
 18062                           ;udpv4.c: 81: ETH_ResetByteCount();
 18063  0055D0  EC25  F02F         	call	_ETH_ResetByteCount	;wreg free
 18064                           
 18065                           ;udpv4.c: 84: ETH_Write16(srcPort);
 18066  0055D4  C06B  F003         	movff	UDP_Start@srcPort,ETH_Write16@data
 18067  0055D8  C06C  F004         	movff	UDP_Start@srcPort+1,ETH_Write16@data+1
 18068  0055DC  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18069                           
 18070                           ;udpv4.c: 87: ETH_Write16(dstPort);
 18071  0055E0  C06D  F003         	movff	UDP_Start@dstPort,ETH_Write16@data
 18072  0055E4  C06E  F004         	movff	UDP_Start@dstPort+1,ETH_Write16@data+1
 18073  0055E8  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18074                           
 18075                           ;udpv4.c: 90: ETH_Write16(0);
 18076  0055EC  6A04               	clrf	ETH_Write16@data+1,c
 18077  0055EE  6A03               	clrf	ETH_Write16@data,c
 18078  0055F0  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18079                           
 18080                           ;udpv4.c: 93: ETH_Write16(0);
 18081  0055F4  6A04               	clrf	ETH_Write16@data+1,c
 18082  0055F6  6A03               	clrf	ETH_Write16@data,c
 18083  0055F8  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18084  0055FC                     l8962:
 18085                           
 18086                           ;udpv4.c: 95: }
 18087                           ;udpv4.c: 96: return ret;
 18088  0055FC  5057               	movf	UDP_Start@ret,w,c
 18089  0055FE  0012               	return		;funcret
 18090  005600                     __end_of_UDP_Start:
 18091                           	opt stack 0
 18092                           tosu	equ	0xFFF
 18093                           tosh	equ	0xFFE
 18094                           tosl	equ	0xFFD
 18095                           pclath	equ	0xFFA
 18096                           tblptru	equ	0xFF8
 18097                           tblptrh	equ	0xFF7
 18098                           tblptrl	equ	0xFF6
 18099                           tablat	equ	0xFF5
 18100                           prodh	equ	0xFF4
 18101                           prodl	equ	0xFF3
 18102                           intcon	equ	0xFF2
 18103                           indf0	equ	0xFEF
 18104                           postinc0	equ	0xFEE
 18105                           fsr0h	equ	0xFEA
 18106                           fsr0l	equ	0xFE9
 18107                           wreg	equ	0xFE8
 18108                           postinc1	equ	0xFE6
 18109                           plusw1	equ	0xFE3
 18110                           fsr1h	equ	0xFE2
 18111                           fsr1l	equ	0xFE1
 18112                           bsr	equ	0xFE0
 18113                           indf2	equ	0xFDF
 18114                           postinc2	equ	0xFDE
 18115                           postdec2	equ	0xFDD
 18116                           plusw2	equ	0xFDB
 18117                           fsr2h	equ	0xFDA
 18118                           fsr2l	equ	0xFD9
 18119                           status	equ	0xFD8
 18120                           
 18121 ;; *************** function _IPv4_Start *****************
 18122 ;; Defined at:
 18123 ;;		line 213 in file "../../TCPIP Library/source/ipv4.c"
 18124 ;; Parameters:    Size  Location     Type
 18125 ;;  destAddress     4   73[COMRAM] unsigned long 
 18126 ;;  protocol        1   77[COMRAM] enum E6803
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;  targetAddres    4    0[BANK0 ] unsigned long 
 18129 ;;  macAddress      2    4[BANK0 ] PTR const struct .
 18130 ;;		 -> arpMap.macAddress(6), broadcastMAC(6), arpMap(104), NULL(0), 
 18131 ;;  ret             1    6[BANK0 ] enum E6944
 18132 ;; Return value:  Size  Location     Type
 18133 ;;                  1    wreg      enum E366
 18134 ;; Registers used:
 18135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18136 ;; Tracked objects:
 18137 ;;		On entry : 0/0
 18138 ;;		On exit  : F/0
 18139 ;;		Unchanged: 0/0
 18140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18141 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18142 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18143 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18144 ;;      Totals:        13       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18145 ;;Total ram usage:       20 bytes
 18146 ;; Hardware stack levels used:    1
 18147 ;; Hardware stack levels required when called:    8
 18148 ;; This function calls:
 18149 ;;		_ARPV4_Lookup
 18150 ;;		_ARPV4_Request
 18151 ;;		_ETH_Write16
 18152 ;;		_ETH_Write32
 18153 ;;		_ETH_Write8
 18154 ;;		_ETH_WriteStart
 18155 ;; This function is called by:
 18156 ;;		_ICMP_EchoReply
 18157 ;;		_TCP_Snd
 18158 ;;		_UDP_Start
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text73
 18163  00418A                     __ptext73:
 18164                           	opt stack 0
 18165  00418A                     _IPv4_Start:
 18166                           	opt stack 18
 18167                           
 18168                           ;ipv4.c: 215: error_msg ret = ERROR;
 18169                           
 18170                           ;incstack = 0
 18171  00418A  0100               	movlb	0	; () banked
 18172  00418C  6B66               	clrf	IPv4_Start@ret& (0+255),b
 18173                           
 18174                           ; BSR set to: 0
 18175                           ;ipv4.c: 217: const mac48Address_t *macAddress;
 18176                           ;ipv4.c: 218: uint32_t targetAddress;
 18177                           ;ipv4.c: 221: if(((ipv4Address != 0) || (protocol == UDP))
 18178                           ;ipv4.c: 222: && (ipv4Address != 0x7F000001))
 18179  00418E  D8BA               	call	PL306	;call to abstracted procedure
 18180  004190  E103               	bnz	l8220
 18181                           
 18182                           ; BSR set to: 1
 18183  004192  0E11               	movlw	17
 18184  004194  184E               	xorwf	IPv4_Start@protocol,w,c
 18185  004196  E162               	bnz	l8234
 18186  004198                     l8220:
 18187                           
 18188                           ; BSR set to: 1
 18189  004198  05C4               	decf	_ipv4Address& (0+255),w,b
 18190  00419A  E105               	bnz	u10900
 18191  00419C  0E7F               	movlw	127
 18192  00419E  19C7               	xorwf	(_ipv4Address+3)& (0+255),w,b
 18193  0041A0  11C5               	iorwf	(_ipv4Address+1)& (0+255),w,b
 18194  0041A2  11C6               	iorwf	(_ipv4Address+2)& (0+255),w,b
 18195  0041A4  E05B               	bz	l8234
 18196  0041A6                     u10900:
 18197                           
 18198                           ; BSR set to: 1
 18199                           ;ipv4.c: 223: {
 18200                           ;ipv4.c: 224: if(destAddress != 0xFFFFFFFF)
 18201  0041A6  284A               	incf	IPv4_Start@destAddress,w,c
 18202  0041A8  E106               	bnz	u10910
 18203  0041AA  284B               	incf	IPv4_Start@destAddress+1,w,c
 18204  0041AC  E104               	bnz	u10910
 18205  0041AE  284C               	incf	IPv4_Start@destAddress+2,w,c
 18206  0041B0  E102               	bnz	u10910
 18207  0041B2  284D               	incf	IPv4_Start@destAddress+3,w,c
 18208  0041B4  E056               	bz	l8238
 18209  0041B6                     u10910:
 18210                           
 18211                           ; BSR set to: 1
 18212                           ;ipv4.c: 225: {
 18213                           ;ipv4.c: 226: if((ipv4SubnetMask & destAddress) == (ipv4SubnetMask & ipv4Address))
 18214  0041B6  51C4               	movf	_ipv4Address& (0+255),w,b
 18215  0041B8  15C8               	andwf	_ipv4SubnetMask& (0+255),w,b
 18216  0041BA  6E4F               	movwf	??_IPv4_Start& (0+255),c
 18217  0041BC  51C5               	movf	(_ipv4Address+1)& (0+255),w,b
 18218  0041BE  15C9               	andwf	(_ipv4SubnetMask+1)& (0+255),w,b
 18219  0041C0  6E50               	movwf	(??_IPv4_Start+1)& (0+255),c
 18220  0041C2  51C6               	movf	(_ipv4Address+2)& (0+255),w,b
 18221  0041C4  15CA               	andwf	(_ipv4SubnetMask+2)& (0+255),w,b
 18222  0041C6  6E51               	movwf	(??_IPv4_Start+2)& (0+255),c
 18223  0041C8  51C7               	movf	(_ipv4Address+3)& (0+255),w,b
 18224  0041CA  15CB               	andwf	(_ipv4SubnetMask+3)& (0+255),w,b
 18225  0041CC  6E52               	movwf	(??_IPv4_Start+3)& (0+255),c
 18226  0041CE  504A               	movf	IPv4_Start@destAddress,w,c
 18227  0041D0  15C8               	andwf	_ipv4SubnetMask& (0+255),w,b
 18228  0041D2  6E53               	movwf	(??_IPv4_Start+4)& (0+255),c
 18229  0041D4  504B               	movf	IPv4_Start@destAddress+1,w,c
 18230  0041D6  15C9               	andwf	(_ipv4SubnetMask+1)& (0+255),w,b
 18231  0041D8  6E54               	movwf	(??_IPv4_Start+5)& (0+255),c
 18232  0041DA  504C               	movf	IPv4_Start@destAddress+2,w,c
 18233  0041DC  15CA               	andwf	(_ipv4SubnetMask+2)& (0+255),w,b
 18234  0041DE  6E55               	movwf	(??_IPv4_Start+6)& (0+255),c
 18235  0041E0  504D               	movf	IPv4_Start@destAddress+3,w,c
 18236  0041E2  15CB               	andwf	(_ipv4SubnetMask+3)& (0+255),w,b
 18237  0041E4  6E56               	movwf	(??_IPv4_Start+7)& (0+255),c
 18238  0041E6  504F               	movf	??_IPv4_Start,w,c
 18239  0041E8  1853               	xorwf	??_IPv4_Start+4,w,c
 18240  0041EA  E112               	bnz	l969
 18241  0041EC  5050               	movf	??_IPv4_Start+1,w,c
 18242  0041EE  1854               	xorwf	??_IPv4_Start+5,w,c
 18243  0041F0  E10F               	bnz	l969
 18244  0041F2  5051               	movf	??_IPv4_Start+2,w,c
 18245  0041F4  1855               	xorwf	??_IPv4_Start+6,w,c
 18246  0041F6  E10C               	bnz	l969
 18247  0041F8  5052               	movf	??_IPv4_Start+3,w,c
 18248  0041FA  1856               	xorwf	??_IPv4_Start+7,w,c
 18249  0041FC  E109               	bnz	l969
 18250                           
 18251                           ; BSR set to: 1
 18252                           ;ipv4.c: 227: {
 18253                           ;ipv4.c: 228: targetAddress = destAddress;
 18254  0041FE  C04A  F060         	movff	IPv4_Start@destAddress,IPv4_Start@targetAddress
 18255  004202  C04B  F061         	movff	IPv4_Start@destAddress+1,IPv4_Start@targetAddress+1
 18256  004206  C04C  F062         	movff	IPv4_Start@destAddress+2,IPv4_Start@targetAddress+2
 18257  00420A  C04D  F063         	movff	IPv4_Start@destAddress+3,IPv4_Start@targetAddress+3
 18258                           
 18259                           ;ipv4.c: 229: }
 18260  00420E  D008               	goto	l8228
 18261  004210                     l969:
 18262                           
 18263                           ; BSR set to: 1
 18264                           ;ipv4.c: 230: else
 18265                           ;ipv4.c: 231: {
 18266                           ;ipv4.c: 232: targetAddress = ipv4Router;
 18267  004210  C220  F060         	movff	_ipv4Router,IPv4_Start@targetAddress
 18268  004214  C221  F061         	movff	_ipv4Router+1,IPv4_Start@targetAddress+1
 18269  004218  C222  F062         	movff	_ipv4Router+2,IPv4_Start@targetAddress+2
 18270  00421C  C223  F063         	movff	_ipv4Router+3,IPv4_Start@targetAddress+3
 18271  004220                     l8228:
 18272                           
 18273                           ; BSR set to: 1
 18274                           ;ipv4.c: 233: }
 18275                           ;ipv4.c: 235: macAddress= ARPV4_Lookup(targetAddress);
 18276  004220  C060  F002         	movff	IPv4_Start@targetAddress,ARPV4_Lookup@ip_address
 18277  004224  C061  F003         	movff	IPv4_Start@targetAddress+1,ARPV4_Lookup@ip_address+1
 18278  004228  C062  F004         	movff	IPv4_Start@targetAddress+2,ARPV4_Lookup@ip_address+2
 18279  00422C  C063  F005         	movff	IPv4_Start@targetAddress+3,ARPV4_Lookup@ip_address+3
 18280  004230  EC00  F02B         	call	_ARPV4_Lookup	;wreg free
 18281  004234  C002  F064         	movff	?_ARPV4_Lookup,IPv4_Start@macAddress
 18282  004238  C003  F065         	movff	?_ARPV4_Lookup+1,IPv4_Start@macAddress+1
 18283                           
 18284                           ; BSR set to: 1
 18285                           ;ipv4.c: 236: if(macAddress == 0)
 18286  00423C  0100               	movlb	0	; () banked
 18287  00423E  5164               	movf	IPv4_Start@macAddress& (0+255),w,b
 18288  004240  1165               	iorwf	(IPv4_Start@macAddress+1)& (0+255),w,b
 18289  004242  E116               	bnz	l8240
 18290                           
 18291                           ; BSR set to: 0
 18292                           ;ipv4.c: 237: {
 18293                           ;ipv4.c: 238: ret = ARPV4_Request(targetAddress);
 18294  004244  C060  F00E         	movff	IPv4_Start@targetAddress,ARPV4_Request@destAddress
 18295  004248  C061  F00F         	movff	IPv4_Start@targetAddress+1,ARPV4_Request@destAddress+1
 18296  00424C  C062  F010         	movff	IPv4_Start@targetAddress+2,ARPV4_Request@destAddress+2
 18297  004250  C063  F011         	movff	IPv4_Start@targetAddress+3,ARPV4_Request@destAddress+3
 18298  004254  ECF6  F022         	call	_ARPV4_Request	;wreg free
 18299  004258  0100               	movlb	0	; () banked
 18300  00425A  6F66               	movwf	IPv4_Start@ret& (0+255),b
 18301  00425C                     l8234:
 18302                           
 18303                           ;ipv4.c: 239: return ret;
 18304  00425C  0100               	movlb	0	; () banked
 18305  00425E  5166               	movf	IPv4_Start@ret& (0+255),w,b
 18306  004260  0012               	return	
 18307  004262                     l8238:
 18308                           
 18309                           ; BSR set to: 1
 18310                           ;ipv4.c: 242: else
 18311                           ;ipv4.c: 243: {
 18312                           ;ipv4.c: 244: macAddress = &broadcastMAC;
 18313  004262  0E37               	movlw	low _broadcastMAC
 18314  004264  0100               	movlb	0	; () banked
 18315  004266  6F64               	movwf	IPv4_Start@macAddress& (0+255),b
 18316  004268  5164               	movf	IPv4_Start@macAddress& (0+255),w,b
 18317  00426A  A4D8               	btfss	status,2,c
 18318  00426C  0E10               	movlw	high __smallconst
 18319  00426E  6F65               	movwf	(IPv4_Start@macAddress+1)& (0+255),b
 18320  004270                     l8240:
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;ipv4.c: 245: }
 18324                           ;ipv4.c: 246: ret = ETH_WriteStart(macAddress, 0x0800);
 18325  004270  C064  F008         	movff	IPv4_Start@macAddress,ETH_WriteStart@dest_mac
 18326  004274  C065  F009         	movff	IPv4_Start@macAddress+1,ETH_WriteStart@dest_mac+1
 18327  004278  0E08               	movlw	8
 18328  00427A  6E0B               	movwf	ETH_WriteStart@type+1,c
 18329  00427C  6A0A               	clrf	ETH_WriteStart@type,c
 18330  00427E  EC88  F021         	call	_ETH_WriteStart	;wreg free
 18331  004282  0100               	movlb	0	; () banked
 18332  004284  6F66               	movwf	IPv4_Start@ret& (0+255),b
 18333                           
 18334                           ; BSR set to: 0
 18335                           ;ipv4.c: 247: if(ret == SUCCESS)
 18336  004286  0566               	decf	IPv4_Start@ret& (0+255),w,b
 18337  004288  E1E9               	bnz	l8234
 18338                           
 18339                           ; BSR set to: 0
 18340                           ;ipv4.c: 248: {
 18341                           ;ipv4.c: 249: ETH_Write16(0x4500);
 18342  00428A  0E45               	movlw	69
 18343  00428C  6E04               	movwf	ETH_Write16@data+1,c
 18344  00428E  6A03               	clrf	ETH_Write16@data,c
 18345  004290  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18346                           
 18347                           ;ipv4.c: 250: ETH_Write16(0);
 18348  004294  6A04               	clrf	ETH_Write16@data+1,c
 18349  004296  6A03               	clrf	ETH_Write16@data,c
 18350  004298  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18351                           
 18352                           ;ipv4.c: 251: ETH_Write32(0xAA554000);
 18353  00429C  6A03               	clrf	ETH_Write32@data,c
 18354  00429E  0E40               	movlw	64
 18355  0042A0  6E04               	movwf	ETH_Write32@data+1,c
 18356  0042A2  0E55               	movlw	85
 18357  0042A4  6E05               	movwf	ETH_Write32@data+2,c
 18358  0042A6  0EAA               	movlw	170
 18359  0042A8  6E06               	movwf	ETH_Write32@data+3,c
 18360  0042AA  EC6B  F02D         	call	_ETH_Write32	;wreg free
 18361                           
 18362                           ;ipv4.c: 252: ETH_Write8(64u);
 18363  0042AE  0E40               	movlw	64
 18364  0042B0  ECB6  F02E         	call	_ETH_Write8
 18365                           
 18366                           ;ipv4.c: 253: ETH_Write8(protocol);
 18367  0042B4  504E               	movf	IPv4_Start@protocol,w,c
 18368  0042B6  ECB6  F02E         	call	_ETH_Write8
 18369                           
 18370                           ;ipv4.c: 254: ETH_Write16(0);
 18371  0042BA  6A04               	clrf	ETH_Write16@data+1,c
 18372  0042BC  6A03               	clrf	ETH_Write16@data,c
 18373  0042BE  ECCD  F02D         	call	_ETH_Write16	;wreg free
 18374                           
 18375                           ;ipv4.c: 255: ETH_Write32(ipv4Address);
 18376  0042C2  ECDD  F01F         	call	PL136	;call to abstracted procedure
 18377  0042C6  EC6B  F02D         	call	_ETH_Write32	;wreg free
 18378                           
 18379                           ;ipv4.c: 256: ETH_Write32(destAddress);
 18380  0042CA  C04A  F003         	movff	IPv4_Start@destAddress,ETH_Write32@data
 18381  0042CE  C04B  F004         	movff	IPv4_Start@destAddress+1,ETH_Write32@data+1
 18382  0042D2  C04C  F005         	movff	IPv4_Start@destAddress+2,ETH_Write32@data+2
 18383  0042D6  C04D  F006         	movff	IPv4_Start@destAddress+3,ETH_Write32@data+3
 18384  0042DA  EC6B  F02D         	call	_ETH_Write32	;wreg free
 18385                           
 18386                           ;ipv4.c: 259: ipv4Header.srcIpAddress = ipv4Address;
 18387  0042DE  C1C4  F2A0         	movff	_ipv4Address,_ipv4Header+12
 18388  0042E2  C1C5  F2A1         	movff	_ipv4Address+1,_ipv4Header+13
 18389  0042E6  C1C6  F2A2         	movff	_ipv4Address+2,_ipv4Header+14
 18390  0042EA  C1C7  F2A3         	movff	_ipv4Address+3,_ipv4Header+15
 18391                           
 18392                           ;ipv4.c: 260: ipv4Header.dstIpAddress = destAddress;
 18393  0042EE  C04A  F2A4         	movff	IPv4_Start@destAddress,_ipv4Header+16
 18394  0042F2  C04B  F2A5         	movff	IPv4_Start@destAddress+1,_ipv4Header+17
 18395  0042F6  C04C  F2A6         	movff	IPv4_Start@destAddress+2,_ipv4Header+18
 18396  0042FA  C04D  F2A7         	movff	IPv4_Start@destAddress+3,_ipv4Header+19
 18397                           
 18398                           ;ipv4.c: 261: ipv4Header.protocol = protocol;
 18399  0042FE  C04E  F29D         	movff	IPv4_Start@protocol,_ipv4Header+9
 18400  004302  D7AC               	goto	l8234
 18401  004304                     __end_of_IPv4_Start:
 18402                           	opt stack 0
 18403  004304                     PL306:
 18404                           	opt stack 21
 18405  004304  0101               	movlb	1	; () banked
 18406  004306  51C4               	movf	_ipv4Address& (0+255),w,b
 18407  004308  11C5               	iorwf	(_ipv4Address+1)& (0+255),w,b
 18408  00430A  11C6               	iorwf	(_ipv4Address+2)& (0+255),w,b
 18409  00430C  11C7               	iorwf	(_ipv4Address+3)& (0+255),w,b
 18410  00430E  0012               	return	
 18411  004310                     __end_ofPL306:
 18412                           	opt stack 0
 18413                           tosu	equ	0xFFF
 18414                           tosh	equ	0xFFE
 18415                           tosl	equ	0xFFD
 18416                           pclath	equ	0xFFA
 18417                           tblptru	equ	0xFF8
 18418                           tblptrh	equ	0xFF7
 18419                           tblptrl	equ	0xFF6
 18420                           tablat	equ	0xFF5
 18421                           prodh	equ	0xFF4
 18422                           prodl	equ	0xFF3
 18423                           intcon	equ	0xFF2
 18424                           indf0	equ	0xFEF
 18425                           postinc0	equ	0xFEE
 18426                           fsr0h	equ	0xFEA
 18427                           fsr0l	equ	0xFE9
 18428                           wreg	equ	0xFE8
 18429                           postinc1	equ	0xFE6
 18430                           plusw1	equ	0xFE3
 18431                           fsr1h	equ	0xFE2
 18432                           fsr1l	equ	0xFE1
 18433                           bsr	equ	0xFE0
 18434                           indf2	equ	0xFDF
 18435                           postinc2	equ	0xFDE
 18436                           postdec2	equ	0xFDD
 18437                           plusw2	equ	0xFDB
 18438                           fsr2h	equ	0xFDA
 18439                           fsr2l	equ	0xFD9
 18440                           status	equ	0xFD8
 18441                           
 18442 ;; *************** function _ETH_Write8 *****************
 18443 ;; Defined at:
 18444 ;;		line 511 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 18445 ;; Parameters:    Size  Location     Type
 18446 ;;  data            1    wreg     unsigned char 
 18447 ;; Auto vars:     Size  Location     Type
 18448 ;;  data            1    2[COMRAM] unsigned char 
 18449 ;; Return value:  Size  Location     Type
 18450 ;;		None               void
 18451 ;; Registers used:
 18452 ;;		wreg, status,2, status,0, cstack
 18453 ;; Tracked objects:
 18454 ;;		On entry : 0/0
 18455 ;;		On exit  : 0/0
 18456 ;;		Unchanged: 0/0
 18457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18462 ;;Total ram usage:        1 bytes
 18463 ;; Hardware stack levels used:    1
 18464 ;; Hardware stack levels required when called:    4
 18465 ;; This function calls:
 18466 ;;		_SPI_ExchangeByte
 18467 ;; This function is called by:
 18468 ;;		_DHCP_Request
 18469 ;;		_DHCP_WriteZeros
 18470 ;;		_IPv4_Start
 18471 ;;		_UDP_Write8
 18472 ;; This function uses a non-reentrant model
 18473 ;;
 18474                           
 18475                           	psect	text74
 18476  005D6C                     __ptext74:
 18477                           	opt stack 0
 18478  005D6C                     _ETH_Write8:
 18479                           	opt stack 21
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;incstack = 0
 18483                           ;ETH_Write8@data stored from wreg
 18484  005D6C  6E03               	movwf	ETH_Write8@data,c
 18485                           
 18486                           ;enc28J60.c: 513: TXPacketSize += 1;
 18487  005D6E  0101               	movlb	1	; () banked
 18488  005D70  4BD3               	infsnz	_TXPacketSize& (0+255),f,b
 18489  005D72  2BD4               	incf	(_TXPacketSize+1)& (0+255),f,b
 18490                           
 18491                           ; BSR set to: 1
 18492  005D74  968C               	bcf	3980,3,c	;volatile
 18493                           
 18494                           ; BSR set to: 1
 18495                           ;enc28J60.c: 515: SPI_ExchangeByte(wbm_inst);
 18496  005D76  0E7A               	movlw	122
 18497  005D78  EC42  F02F         	call	_SPI_ExchangeByte
 18498                           
 18499                           ;enc28J60.c: 516: SPI_ExchangeByte(data);
 18500  005D7C  5003               	movf	ETH_Write8@data,w,c
 18501  005D7E  EC42  F02F         	call	_SPI_ExchangeByte
 18502  005D82  868C               	bsf	3980,3,c	;volatile
 18503  005D84  0012               	return		;funcret
 18504  005D86                     __end_of_ETH_Write8:
 18505                           	opt stack 0
 18506                           tosu	equ	0xFFF
 18507                           tosh	equ	0xFFE
 18508                           tosl	equ	0xFFD
 18509                           pclath	equ	0xFFA
 18510                           tblptru	equ	0xFF8
 18511                           tblptrh	equ	0xFF7
 18512                           tblptrl	equ	0xFF6
 18513                           tablat	equ	0xFF5
 18514                           prodh	equ	0xFF4
 18515                           prodl	equ	0xFF3
 18516                           intcon	equ	0xFF2
 18517                           indf0	equ	0xFEF
 18518                           postinc0	equ	0xFEE
 18519                           fsr0h	equ	0xFEA
 18520                           fsr0l	equ	0xFE9
 18521                           wreg	equ	0xFE8
 18522                           postinc1	equ	0xFE6
 18523                           plusw1	equ	0xFE3
 18524                           fsr1h	equ	0xFE2
 18525                           fsr1l	equ	0xFE1
 18526                           bsr	equ	0xFE0
 18527                           indf2	equ	0xFDF
 18528                           postinc2	equ	0xFDE
 18529                           postdec2	equ	0xFDD
 18530                           plusw2	equ	0xFDB
 18531                           fsr2h	equ	0xFDA
 18532                           fsr2l	equ	0xFD9
 18533                           status	equ	0xFD8
 18534                           
 18535 ;; *************** function _ETH_Write32 *****************
 18536 ;; Defined at:
 18537 ;;		line 538 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;  data            4    2[COMRAM] unsigned long 
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;		None
 18542 ;; Return value:  Size  Location     Type
 18543 ;;		None               void
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;Total ram usage:        4 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    4
 18558 ;; This function calls:
 18559 ;;		_SPI_ExchangeByte
 18560 ;; This function is called by:
 18561 ;;		_DHCP_Request
 18562 ;;		_IPv4_Start
 18563 ;;		_UDP_Write32
 18564 ;; This function uses a non-reentrant model
 18565 ;;
 18566                           
 18567                           	psect	text75
 18568  005AD6                     __ptext75:
 18569                           	opt stack 0
 18570  005AD6                     _ETH_Write32:
 18571                           	opt stack 21
 18572                           
 18573                           ;enc28J60.c: 540: TXPacketSize += 4;
 18574                           
 18575                           ;incstack = 0
 18576  005AD6  0E04               	movlw	4
 18577  005AD8  ECDB  F02D         	call	PL294	;call to abstracted procedure
 18578                           
 18579                           ; BSR set to: 1
 18580  005ADC  968C               	bcf	3980,3,c	;volatile
 18581                           
 18582                           ; BSR set to: 1
 18583                           ;enc28J60.c: 542: SPI_ExchangeByte(wbm_inst);
 18584  005ADE  0E7A               	movlw	122
 18585  005AE0  EC42  F02F         	call	_SPI_ExchangeByte
 18586                           
 18587                           ;enc28J60.c: 543: SPI_ExchangeByte(data >> 24);
 18588  005AE4  5006               	movf	ETH_Write32@data+3,w,c
 18589  005AE6  EC42  F02F         	call	_SPI_ExchangeByte
 18590                           
 18591                           ;enc28J60.c: 544: SPI_ExchangeByte(data >> 16);
 18592  005AEA  5005               	movf	ETH_Write32@data+2,w,c
 18593  005AEC  EC42  F02F         	call	_SPI_ExchangeByte
 18594                           
 18595                           ;enc28J60.c: 545: SPI_ExchangeByte(data >> 8);
 18596  005AF0  5004               	movf	ETH_Write32@data+1,w,c
 18597  005AF2  EC42  F02F         	call	_SPI_ExchangeByte
 18598                           
 18599                           ;enc28J60.c: 546: SPI_ExchangeByte(data);
 18600  005AF6  5003               	movf	ETH_Write32@data,w,c
 18601  005AF8  EC42  F02F         	call	_SPI_ExchangeByte
 18602  005AFC  868C               	bsf	3980,3,c	;volatile
 18603  005AFE  0012               	return		;funcret
 18604  005B00                     __end_of_ETH_Write32:
 18605                           	opt stack 0
 18606                           tosu	equ	0xFFF
 18607                           tosh	equ	0xFFE
 18608                           tosl	equ	0xFFD
 18609                           pclath	equ	0xFFA
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           indf0	equ	0xFEF
 18618                           postinc0	equ	0xFEE
 18619                           fsr0h	equ	0xFEA
 18620                           fsr0l	equ	0xFE9
 18621                           wreg	equ	0xFE8
 18622                           postinc1	equ	0xFE6
 18623                           plusw1	equ	0xFE3
 18624                           fsr1h	equ	0xFE2
 18625                           fsr1l	equ	0xFE1
 18626                           bsr	equ	0xFE0
 18627                           indf2	equ	0xFDF
 18628                           postinc2	equ	0xFDE
 18629                           postdec2	equ	0xFDD
 18630                           plusw2	equ	0xFDB
 18631                           fsr2h	equ	0xFDA
 18632                           fsr2l	equ	0xFD9
 18633                           status	equ	0xFD8
 18634                           
 18635 ;; *************** function _ETH_Write16 *****************
 18636 ;; Defined at:
 18637 ;;		line 524 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 18638 ;; Parameters:    Size  Location     Type
 18639 ;;  data            2    2[COMRAM] unsigned int 
 18640 ;; Auto vars:     Size  Location     Type
 18641 ;;		None
 18642 ;; Return value:  Size  Location     Type
 18643 ;;		None               void
 18644 ;; Registers used:
 18645 ;;		wreg, status,2, status,0, cstack
 18646 ;; Tracked objects:
 18647 ;;		On entry : 0/0
 18648 ;;		On exit  : 0/0
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;Total ram usage:        2 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:    4
 18658 ;; This function calls:
 18659 ;;		_SPI_ExchangeByte
 18660 ;; This function is called by:
 18661 ;;		_DHCP_Request
 18662 ;;		_ICMP_EchoReply
 18663 ;;		_IPv4_Start
 18664 ;;		_UDP_Start
 18665 ;;		_UDP_Write16
 18666 ;; This function uses a non-reentrant model
 18667 ;;
 18668                           
 18669                           	psect	text76
 18670  005B9A                     __ptext76:
 18671                           	opt stack 0
 18672  005B9A                     _ETH_Write16:
 18673                           	opt stack 21
 18674                           
 18675                           ;enc28J60.c: 526: TXPacketSize += 2;
 18676                           
 18677                           ;incstack = 0
 18678  005B9A  0E02               	movlw	2
 18679  005B9C  D80C               	call	PL294	;call to abstracted procedure
 18680                           
 18681                           ; BSR set to: 1
 18682  005B9E  968C               	bcf	3980,3,c	;volatile
 18683                           
 18684                           ; BSR set to: 1
 18685                           ;enc28J60.c: 528: SPI_ExchangeByte(wbm_inst);
 18686  005BA0  0E7A               	movlw	122
 18687  005BA2  EC42  F02F         	call	_SPI_ExchangeByte
 18688                           
 18689                           ;enc28J60.c: 529: SPI_ExchangeByte(data >> 8);
 18690  005BA6  5004               	movf	ETH_Write16@data+1,w,c
 18691  005BA8  EC42  F02F         	call	_SPI_ExchangeByte
 18692                           
 18693                           ;enc28J60.c: 530: SPI_ExchangeByte(data);
 18694  005BAC  5003               	movf	ETH_Write16@data,w,c
 18695  005BAE  EC42  F02F         	call	_SPI_ExchangeByte
 18696  005BB2  868C               	bsf	3980,3,c	;volatile
 18697  005BB4  0012               	return		;funcret
 18698  005BB6                     __end_of_ETH_Write16:
 18699                           	opt stack 0
 18700  005BB6                     PL294:
 18701                           	opt stack 21
 18702  005BB6  0101               	movlb	1	; () banked
 18703  005BB8  27D3               	addwf	_TXPacketSize& (0+255),f,b
 18704  005BBA  0E00               	movlw	0
 18705  005BBC  23D4               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 18706  005BBE  0C00               	retlw	0
 18707  005BC0                     __end_ofPL294:
 18708                           	opt stack 0
 18709                           tosu	equ	0xFFF
 18710                           tosh	equ	0xFFE
 18711                           tosl	equ	0xFFD
 18712                           pclath	equ	0xFFA
 18713                           tblptru	equ	0xFF8
 18714                           tblptrh	equ	0xFF7
 18715                           tblptrl	equ	0xFF6
 18716                           tablat	equ	0xFF5
 18717                           prodh	equ	0xFF4
 18718                           prodl	equ	0xFF3
 18719                           intcon	equ	0xFF2
 18720                           indf0	equ	0xFEF
 18721                           postinc0	equ	0xFEE
 18722                           fsr0h	equ	0xFEA
 18723                           fsr0l	equ	0xFE9
 18724                           wreg	equ	0xFE8
 18725                           postinc1	equ	0xFE6
 18726                           plusw1	equ	0xFE3
 18727                           fsr1h	equ	0xFE2
 18728                           fsr1l	equ	0xFE1
 18729                           bsr	equ	0xFE0
 18730                           indf2	equ	0xFDF
 18731                           postinc2	equ	0xFDE
 18732                           postdec2	equ	0xFDD
 18733                           plusw2	equ	0xFDB
 18734                           fsr2h	equ	0xFDA
 18735                           fsr2l	equ	0xFD9
 18736                           status	equ	0xFD8
 18737                           
 18738 ;; *************** function _ARPV4_Request *****************
 18739 ;; Defined at:
 18740 ;;		line 194 in file "../../TCPIP Library/source/arpv4.c"
 18741 ;; Parameters:    Size  Location     Type
 18742 ;;  destAddress     4   13[COMRAM] unsigned long 
 18743 ;; Auto vars:     Size  Location     Type
 18744 ;;  header         28   45[COMRAM] struct .
 18745 ;;  ret             1   44[COMRAM] enum E450
 18746 ;; Return value:  Size  Location     Type
 18747 ;;                  1    wreg      enum E450
 18748 ;; Registers used:
 18749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18750 ;; Tracked objects:
 18751 ;;		On entry : F/0
 18752 ;;		On exit  : 0/0
 18753 ;;		Unchanged: 0/0
 18754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18756 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18757 ;;      Temps:         27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18758 ;;      Totals:        60       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18759 ;;Total ram usage:       60 bytes
 18760 ;; Hardware stack levels used:    1
 18761 ;; Hardware stack levels required when called:    7
 18762 ;; This function calls:
 18763 ;;		_ETH_GetMAC
 18764 ;;		_ETH_Send
 18765 ;;		_ETH_WriteBlock
 18766 ;;		_ETH_WriteStart
 18767 ;; This function is called by:
 18768 ;;		_IPv4_Start
 18769 ;; This function uses a non-reentrant model
 18770 ;;
 18771                           
 18772                           	psect	text77
 18773  0045EC                     __ptext77:
 18774                           	opt stack 0
 18775  0045EC                     _ARPV4_Request:
 18776                           	opt stack 18
 18777                           
 18778                           ; BSR set to: 0
 18779                           ;arpv4.c: 200: arpHeader_t header;
 18780                           ;arpv4.c: 201: header.htype = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 &
      +                           (uint16_t)0x00FF) << 8));
 18781                           
 18782                           ; BSR set to: 0
 18783                           
 18784                           ;incstack = 0
 18785  0045EC  0E01               	movlw	1
 18786  0045EE  6E2F               	movwf	ARPV4_Request@header+1,c
 18787  0045F0  6A2E               	clrf	ARPV4_Request@header,c
 18788                           
 18789                           ;arpv4.c: 202: header.ptype = ((((uint16_t)0x0800 & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)0x0800 & (uint16_t)0x00FF) << 8));
 18790  0045F2  6A31               	clrf	ARPV4_Request@header+3,c
 18791  0045F4  0E08               	movlw	8
 18792  0045F6  6E30               	movwf	ARPV4_Request@header+2,c
 18793                           
 18794                           ;arpv4.c: 203: header.hlen = 6;
 18795  0045F8  0E06               	movlw	6
 18796  0045FA  6E32               	movwf	ARPV4_Request@header+4,c
 18797                           
 18798                           ;arpv4.c: 204: header.plen = 4;
 18799  0045FC  0E04               	movlw	4
 18800  0045FE  6E33               	movwf	ARPV4_Request@header+5,c
 18801                           
 18802                           ;arpv4.c: 205: header.oper = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & 
      +                          (uint16_t)0x00FF) << 8));
 18803  004600  0E01               	movlw	1
 18804  004602  6E35               	movwf	ARPV4_Request@header+7,c
 18805  004604  6A34               	clrf	ARPV4_Request@header+6,c
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;arpv4.c: 206: ETH_GetMAC((char*)&header.sha);
 18809  004606  0E2E               	movlw	ARPV4_Request@header& (0+255)
 18810  004608  0F08               	addlw	8
 18811  00460A  ECBE  F02B         	call	_ETH_GetMAC
 18812                           
 18813                           ;arpv4.c: 207: header.spa = ((((uint32_t)ipv4Address&(uint32_t)0xff000000) >> 24) | (((u
      +                          int32_t)ipv4Address&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)ipv4Address&(uint32_t)0x00
      +                          00ff00) << 8) | (((uint32_t)ipv4Address&(uint32_t)0x000000ff) << 24) );
 18814  00460E  0101               	movlb	1	; () banked
 18815  004610  51C4               	movf	_ipv4Address& (0+255),w,b
 18816  004612  D880               	call	PL196	;call to abstracted procedure
 18817  004614  51C5               	movf	(_ipv4Address+1)& (0+255),w,b
 18818  004616  D872               	call	PL180	;call to abstracted procedure
 18819  004618  51C6               	movf	(_ipv4Address+2)& (0+255),w,b
 18820  00461A  D863               	call	PL166	;call to abstracted procedure
 18821  00461C  51C7               	movf	(_ipv4Address+3)& (0+255),w,b
 18822  00461E  6E24               	movwf	(??_ARPV4_Request+18)& (0+255),c
 18823  004620  0E19               	movlw	25
 18824  004622  D001               	goto	u10820
 18825  004624                     u10825:
 18826  004624  D888               	call	PL308	;call to abstracted procedure
 18827  004626                     u10820:
 18828  004626  2EE8               	decfsz	wreg,f,c
 18829  004628  D7FD               	goto	u10825
 18830  00462A  D840               	call	PL94	;call to abstracted procedure
 18831  00462C  6E3C               	movwf	ARPV4_Request@header+14,c
 18832  00462E  5013               	movf	??_ARPV4_Request+1,w,c
 18833  004630  102A               	iorwf	??_ARPV4_Request+24,w,c
 18834  004632  6E3D               	movwf	ARPV4_Request@header+15,c
 18835  004634  5014               	movf	??_ARPV4_Request+2,w,c
 18836  004636  102B               	iorwf	??_ARPV4_Request+25,w,c
 18837  004638  6E3E               	movwf	ARPV4_Request@header+16,c
 18838  00463A  5015               	movf	??_ARPV4_Request+3,w,c
 18839  00463C  102C               	iorwf	??_ARPV4_Request+26,w,c
 18840  00463E  6E3F               	movwf	ARPV4_Request@header+17,c
 18841                           
 18842                           ; BSR set to: 1
 18843                           ;arpv4.c: 208: header.tpa= ((((uint32_t)destAddress&(uint32_t)0xff000000) >> 24) | (((ui
      +                          nt32_t)destAddress&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)destAddress&(uint32_t)0x000
      +                          0ff00) << 8) | (((uint32_t)destAddress&(uint32_t)0x000000ff) << 24) );
 18844  004640  500E               	movf	ARPV4_Request@destAddress,w,c
 18845  004642  D868               	call	PL196	;call to abstracted procedure
 18846  004644  500F               	movf	ARPV4_Request@destAddress+1,w,c
 18847  004646  D85A               	call	PL180	;call to abstracted procedure
 18848  004648  5010               	movf	ARPV4_Request@destAddress+2,w,c
 18849  00464A  D84B               	call	PL166	;call to abstracted procedure
 18850  00464C  5011               	movf	ARPV4_Request@destAddress+3,w,c
 18851  00464E  6E24               	movwf	(??_ARPV4_Request+18)& (0+255),c
 18852  004650  0E19               	movlw	25
 18853  004652  D001               	goto	u10830
 18854  004654                     u10835:
 18855  004654  D870               	call	PL308	;call to abstracted procedure
 18856  004656                     u10830:
 18857  004656  2EE8               	decfsz	wreg,f,c
 18858  004658  D7FD               	goto	u10835
 18859  00465A  D828               	call	PL94	;call to abstracted procedure
 18860  00465C  6E46               	movwf	ARPV4_Request@header+24,c
 18861  00465E  5013               	movf	??_ARPV4_Request+1,w,c
 18862  004660  102A               	iorwf	??_ARPV4_Request+24,w,c
 18863  004662  6E47               	movwf	ARPV4_Request@header+25,c
 18864  004664  5014               	movf	??_ARPV4_Request+2,w,c
 18865  004666  102B               	iorwf	??_ARPV4_Request+25,w,c
 18866  004668  6E48               	movwf	ARPV4_Request@header+26,c
 18867  00466A  5015               	movf	??_ARPV4_Request+3,w,c
 18868  00466C  102C               	iorwf	??_ARPV4_Request+26,w,c
 18869  00466E  6E49               	movwf	ARPV4_Request@header+27,c
 18870                           
 18871                           ; BSR set to: 1
 18872                           ;arpv4.c: 209: header.tha.s.byte1 = 0;
 18873  004670  6A40               	clrf	ARPV4_Request@header+18,c
 18874                           
 18875                           ; BSR set to: 1
 18876                           ;arpv4.c: 210: header.tha.s.byte2 = 0;
 18877  004672  6A41               	clrf	ARPV4_Request@header+19,c
 18878                           
 18879                           ; BSR set to: 1
 18880                           ;arpv4.c: 211: header.tha.s.byte3 = 0;
 18881  004674  6A42               	clrf	ARPV4_Request@header+20,c
 18882                           
 18883                           ; BSR set to: 1
 18884                           ;arpv4.c: 212: header.tha.s.byte4 = 0;
 18885  004676  6A43               	clrf	ARPV4_Request@header+21,c
 18886                           
 18887                           ; BSR set to: 1
 18888                           ;arpv4.c: 213: header.tha.s.byte5 = 0;
 18889  004678  6A44               	clrf	ARPV4_Request@header+22,c
 18890                           
 18891                           ; BSR set to: 1
 18892                           ;arpv4.c: 214: header.tha.s.byte6 = 0;
 18893  00467A  6A45               	clrf	ARPV4_Request@header+23,c
 18894                           
 18895                           ; BSR set to: 1
 18896                           ;arpv4.c: 216: ret = ETH_WriteStart(&broadcastMAC,0x0806);
 18897  00467C  0E37               	movlw	low _broadcastMAC
 18898  00467E  6E08               	movwf	ETH_WriteStart@dest_mac,c
 18899  004680  5008               	movf	ETH_WriteStart@dest_mac,w,c
 18900  004682  A4D8               	btfss	status,2,c
 18901  004684  0E10               	movlw	high __smallconst
 18902  004686  6E09               	movwf	ETH_WriteStart@dest_mac+1,c
 18903  004688  D85C               	call	PL362	;call to abstracted procedure
 18904  00468A  EC88  F021         	call	_ETH_WriteStart	;wreg free
 18905  00468E  6E2D               	movwf	ARPV4_Request@ret,c
 18906                           
 18907                           ;arpv4.c: 217: if(ret == SUCCESS)
 18908  004690  042D               	decf	ARPV4_Request@ret,w,c
 18909  004692  E10A               	bnz	l8192
 18910                           
 18911                           ;arpv4.c: 218: {
 18912                           ;arpv4.c: 219: ETH_WriteBlock((char*)&header,sizeof(arpHeader_t));
 18913  004694  0E2E               	movlw	low ARPV4_Request@header
 18914  004696  D849               	call	PL300	;call to abstracted procedure
 18915  004698  ECAF  F02A         	call	_ETH_WriteBlock	;wreg free
 18916                           
 18917                           ;arpv4.c: 220: ret = ETH_Send();
 18918  00469C  ECFD  F02C         	call	_ETH_Send	;wreg free
 18919  0046A0  6E2D               	movwf	ARPV4_Request@ret,c
 18920                           
 18921                           ; BSR set to: 1
 18922                           ;arpv4.c: 221: if(ret == SUCCESS)
 18923  0046A2  042D               	decf	ARPV4_Request@ret,w,c
 18924  0046A4  E101               	bnz	l8192
 18925                           
 18926                           ; BSR set to: 1
 18927                           ;arpv4.c: 222: {
 18928                           ;arpv4.c: 223: return MAC_NOT_FOUND;
 18929  0046A6  0C05               	retlw	5
 18930  0046A8                     l8192:
 18931                           
 18932                           ;arpv4.c: 224: }
 18933                           ;arpv4.c: 225: }
 18934                           ;arpv4.c: 226: return ret;
 18935  0046A8  502D               	movf	ARPV4_Request@ret,w,c
 18936  0046AA  0012               	return		;funcret
 18937  0046AC                     __end_of_ARPV4_Request:
 18938                           	opt stack 0
 18939  0046AC                     PL94:
 18940                           	opt stack 18
 18941  0046AC  501D               	movf	??_ARPV4_Request+11,w,c
 18942  0046AE  1021               	iorwf	??_ARPV4_Request+15,w,c
 18943  0046B0  6E25               	movwf	(??_ARPV4_Request+19)& (0+255),c
 18944  0046B2  501E               	movf	??_ARPV4_Request+12,w,c
 18945  0046B4  1022               	iorwf	??_ARPV4_Request+16,w,c
 18946  0046B6  6E26               	movwf	(??_ARPV4_Request+20)& (0+255),c
 18947  0046B8  501F               	movf	??_ARPV4_Request+13,w,c
 18948  0046BA  1023               	iorwf	??_ARPV4_Request+17,w,c
 18949  0046BC  6E27               	movwf	(??_ARPV4_Request+21)& (0+255),c
 18950  0046BE  5020               	movf	??_ARPV4_Request+14,w,c
 18951  0046C0  1024               	iorwf	??_ARPV4_Request+18,w,c
 18952  0046C2  6E28               	movwf	(??_ARPV4_Request+22)& (0+255),c
 18953  0046C4  5016               	movf	??_ARPV4_Request+4,w,c
 18954  0046C6  1025               	iorwf	??_ARPV4_Request+19,w,c
 18955  0046C8  6E29               	movwf	(??_ARPV4_Request+23)& (0+255),c
 18956  0046CA  5017               	movf	??_ARPV4_Request+5,w,c
 18957  0046CC  1026               	iorwf	??_ARPV4_Request+20,w,c
 18958  0046CE  6E2A               	movwf	(??_ARPV4_Request+24)& (0+255),c
 18959  0046D0  5018               	movf	??_ARPV4_Request+6,w,c
 18960  0046D2  1027               	iorwf	??_ARPV4_Request+21,w,c
 18961  0046D4  6E2B               	movwf	(??_ARPV4_Request+25)& (0+255),c
 18962  0046D6  5019               	movf	??_ARPV4_Request+7,w,c
 18963  0046D8  1028               	iorwf	??_ARPV4_Request+22,w,c
 18964  0046DA  6E2C               	movwf	(??_ARPV4_Request+26)& (0+255),c
 18965  0046DC  5012               	movf	??_ARPV4_Request,w,c
 18966  0046DE  1029               	iorwf	??_ARPV4_Request+23,w,c
 18967  0046E0  0012               	return	
 18968  0046E2                     __end_ofPL94:
 18969                           	opt stack 0
 18970  0046E2                     PL166:
 18971                           	opt stack 18
 18972  0046E2  6E1B               	movwf	(??_ARPV4_Request+9)& (0+255),c
 18973  0046E4  6A1C               	clrf	(??_ARPV4_Request+10)& (0+255),c
 18974  0046E6  501A               	movf	??_ARPV4_Request+8,w,c
 18975  0046E8  6E1D               	movwf	(??_ARPV4_Request+11)& (0+255),c
 18976  0046EA  501B               	movf	??_ARPV4_Request+9,w,c
 18977  0046EC  6E1E               	movwf	(??_ARPV4_Request+12)& (0+255),c
 18978  0046EE  501C               	movf	??_ARPV4_Request+10,w,c
 18979  0046F0  6E1F               	movwf	(??_ARPV4_Request+13)& (0+255),c
 18980  0046F2  6A20               	clrf	(??_ARPV4_Request+14)& (0+255),c
 18981  0046F4  6A21               	clrf	(??_ARPV4_Request+15)& (0+255),c
 18982  0046F6  6A22               	clrf	(??_ARPV4_Request+16)& (0+255),c
 18983  0046F8  6A23               	clrf	(??_ARPV4_Request+17)& (0+255),c
 18984  0046FA  0012               	return	
 18985  0046FC                     __end_ofPL166:
 18986                           	opt stack 0
 18987  0046FC                     PL180:
 18988                           	opt stack 18
 18989  0046FC  6E17               	movwf	(??_ARPV4_Request+5)& (0+255),c
 18990  0046FE  6A18               	clrf	(??_ARPV4_Request+6)& (0+255),c
 18991  004700  6A19               	clrf	(??_ARPV4_Request+7)& (0+255),c
 18992  004702  C018  F019         	movff	??_ARPV4_Request+6,??_ARPV4_Request+7
 18993  004706  C017  F018         	movff	??_ARPV4_Request+5,??_ARPV4_Request+6
 18994  00470A  C016  F017         	movff	??_ARPV4_Request+4,??_ARPV4_Request+5
 18995  00470E  6A16               	clrf	??_ARPV4_Request+4,c
 18996  004710  6A1A               	clrf	(??_ARPV4_Request+8)& (0+255),c
 18997  004712  0012               	return	
 18998  004714                     __end_ofPL180:
 18999                           	opt stack 0
 19000  004714                     PL196:
 19001                           	opt stack 18
 19002  004714  6E12               	movwf	??_ARPV4_Request& (0+255),c
 19003  004716  6A13               	clrf	(??_ARPV4_Request+1)& (0+255),c
 19004  004718  6A14               	clrf	(??_ARPV4_Request+2)& (0+255),c
 19005  00471A  6A15               	clrf	(??_ARPV4_Request+3)& (0+255),c
 19006  00471C  C012  F015         	movff	??_ARPV4_Request,??_ARPV4_Request+3
 19007  004720  6A14               	clrf	??_ARPV4_Request+2,c
 19008  004722  6A13               	clrf	??_ARPV4_Request+1,c
 19009  004724  6A12               	clrf	??_ARPV4_Request,c
 19010  004726  6A16               	clrf	(??_ARPV4_Request+4)& (0+255),c
 19011  004728  0012               	return	
 19012  00472A                     __end_ofPL196:
 19013                           	opt stack 0
 19014  00472A                     PL300:
 19015                           	opt stack 21
 19016  00472A  6E03               	movwf	ETH_WriteBlock@data,c
 19017  00472C  6A04               	clrf	ETH_WriteBlock@data+1,c
 19018  00472E  6A06               	clrf	ETH_WriteBlock@length+1,c
 19019  004730  0E1C               	movlw	28
 19020  004732  6E05               	movwf	ETH_WriteBlock@length,c
 19021  004734  0C1C               	retlw	28
 19022  004736                     __end_ofPL300:
 19023                           	opt stack 0
 19024  004736                     PL308:
 19025                           	opt stack 18
 19026  004736  90D8               	bcf	status,0,c
 19027  004738  3224               	rrcf	??_ARPV4_Request+18,f,c
 19028  00473A  3223               	rrcf	??_ARPV4_Request+17,f,c
 19029  00473C  3222               	rrcf	??_ARPV4_Request+16,f,c
 19030  00473E  3221               	rrcf	??_ARPV4_Request+15,f,c
 19031  004740  0012               	return	
 19032  004742                     __end_ofPL308:
 19033                           	opt stack 0
 19034  004742                     PL362:
 19035                           	opt stack 21
 19036  004742  0E08               	movlw	8
 19037  004744  6E0B               	movwf	ETH_WriteStart@type+1,c
 19038  004746  0E06               	movlw	6
 19039  004748  6E0A               	movwf	ETH_WriteStart@type,c
 19040  00474A  0C06               	retlw	6
 19041  00474C                     __end_ofPL362:
 19042                           	opt stack 0
 19043                           tosu	equ	0xFFF
 19044                           tosh	equ	0xFFE
 19045                           tosl	equ	0xFFD
 19046                           pclath	equ	0xFFA
 19047                           tblptru	equ	0xFF8
 19048                           tblptrh	equ	0xFF7
 19049                           tblptrl	equ	0xFF6
 19050                           tablat	equ	0xFF5
 19051                           prodh	equ	0xFF4
 19052                           prodl	equ	0xFF3
 19053                           intcon	equ	0xFF2
 19054                           indf0	equ	0xFEF
 19055                           postinc0	equ	0xFEE
 19056                           fsr0h	equ	0xFEA
 19057                           fsr0l	equ	0xFE9
 19058                           wreg	equ	0xFE8
 19059                           postinc1	equ	0xFE6
 19060                           plusw1	equ	0xFE3
 19061                           fsr1h	equ	0xFE2
 19062                           fsr1l	equ	0xFE1
 19063                           bsr	equ	0xFE0
 19064                           indf2	equ	0xFDF
 19065                           postinc2	equ	0xFDE
 19066                           postdec2	equ	0xFDD
 19067                           plusw2	equ	0xFDB
 19068                           fsr2h	equ	0xFDA
 19069                           fsr2l	equ	0xFD9
 19070                           status	equ	0xFD8
 19071                           
 19072 ;; *************** function _ETH_WriteStart *****************
 19073 ;; Defined at:
 19074 ;;		line 576 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;  dest_mac        2    7[COMRAM] PTR const struct .
 19077 ;;		 -> arpMap.macAddress(6), broadcastMAC(6), header.sha(6), ARPV4_Packet@header(28), 
 19078 ;;		 -> arpMap(104), NULL(0), 
 19079 ;;  type            2    9[COMRAM] unsigned int 
 19080 ;; Auto vars:     Size  Location     Type
 19081 ;;		None
 19082 ;; Return value:  Size  Location     Type
 19083 ;;                  1    wreg      enum E7076
 19084 ;; Registers used:
 19085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19086 ;; Tracked objects:
 19087 ;;		On entry : E/1
 19088 ;;		On exit  : 0/0
 19089 ;;		Unchanged: 0/0
 19090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19094 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;Total ram usage:        6 bytes
 19096 ;; Hardware stack levels used:    1
 19097 ;; Hardware stack levels required when called:    6
 19098 ;; This function calls:
 19099 ;;		_ENC28_Rcr8
 19100 ;;		_ENC28_Wcr16
 19101 ;;		_SPI_ExchangeByte
 19102 ;; This function is called by:
 19103 ;;		_ARPV4_Packet
 19104 ;;		_ARPV4_Request
 19105 ;;		_IPv4_Start
 19106 ;; This function uses a non-reentrant model
 19107 ;;
 19108                           
 19109                           	psect	text78
 19110  004310                     __ptext78:
 19111                           	opt stack 0
 19112  004310                     _ETH_WriteStart:
 19113                           	opt stack 19
 19114                           
 19115                           ;enc28J60.c: 578: if(ethData.bufferBusy)
 19116                           
 19117                           ;incstack = 0
 19118  004310  0101               	movlb	1	; () banked
 19119  004312  BBB5               	btfsc	_ethData& (0+255),5,b	;volatile
 19120                           
 19121                           ; BSR set to: 1
 19122                           ;enc28J60.c: 579: {
 19123                           ;enc28J60.c: 580: return BUFFER_BUSY;
 19124  004314  0C03               	retlw	3
 19125                           
 19126                           ; BSR set to: 1
 19127                           ;enc28J60.c: 581: }
 19128                           ;enc28J60.c: 583: if((ENC28_Rcr8(J60_ECON1) & 0x08))
 19129  004316  0EFF               	movlw	255
 19130  004318  EC33  F02E         	call	_ENC28_Rcr8
 19131  00431C  6E0C               	movwf	??_ETH_WriteStart& (0+255),c
 19132  00431E  B60C               	btfsc	??_ETH_WriteStart,3,c
 19133                           
 19134                           ;enc28J60.c: 584: {
 19135                           ;enc28J60.c: 585: return TX_LOGIC_NOT_IDLE;
 19136  004320  0C04               	retlw	4
 19137                           
 19138                           ;enc28J60.c: 586: }
 19139                           ;enc28J60.c: 588: ENC28_Wcr16(J60_ETXSTL, (0x1FFF - (1500)));
 19140  004322  D8AA               	call	PL250	;call to abstracted procedure
 19141  004324  0E04               	movlw	4
 19142  004326  EC9A  F02C         	call	_ENC28_Wcr16
 19143                           
 19144                           ;enc28J60.c: 589: ENC28_Wcr16(J60_EWRPTL, (0x1FFF - (1500)));
 19145  00432A  D8A6               	call	PL250	;call to abstracted procedure
 19146  00432C  0E02               	movlw	2
 19147  00432E  EC9A  F02C         	call	_ENC28_Wcr16
 19148                           
 19149                           ;enc28J60.c: 591: TXPacketSize = 0;
 19150  004332  0101               	movlb	1	; () banked
 19151  004334  6BD3               	clrf	_TXPacketSize& (0+255),b
 19152  004336  6BD4               	clrf	(_TXPacketSize+1)& (0+255),b
 19153                           
 19154                           ; BSR set to: 1
 19155  004338  968C               	bcf	3980,3,c	;volatile
 19156                           
 19157                           ; BSR set to: 1
 19158                           ;enc28J60.c: 593: SPI_ExchangeByte(wbm_inst);
 19159  00433A  0E7A               	movlw	122
 19160  00433C  EC42  F02F         	call	_SPI_ExchangeByte
 19161                           
 19162                           ;enc28J60.c: 594: SPI_ExchangeByte(Control_Byte);
 19163  004340  0E00               	movlw	0
 19164  004342  EC42  F02F         	call	_SPI_ExchangeByte
 19165                           
 19166                           ;enc28J60.c: 595: SPI_ExchangeByte(dest_mac->mac_array[0]);
 19167  004346  C008  FFF6         	movff	ETH_WriteStart@dest_mac,tblptrl
 19168  00434A  C009  FFF7         	movff	ETH_WriteStart@dest_mac+1,tblptrh
 19169  00434E  0E00               	movlw	low (__smallconst shr (0+16))
 19170  004350  6EF8               	movwf	tblptru,c
 19171  004352  0E0F               	movlw	(high __ramtop+-1)
 19172  004354  64F7               	cpfsgt	tblptrh,c
 19173  004356  D003               	bra	u10687
 19174  004358  0008               	tblrd		*
 19175  00435A  50F5               	movf	tablat,w,c
 19176  00435C  D003               	bra	u10680
 19177  00435E                     u10687:
 19178  00435E  EC3C  F011         	call	PL24	;call to abstracted procedure
 19179  004362  50EF               	movf	indf0,w,c
 19180  004364                     u10680:
 19181  004364  EC42  F02F         	call	_SPI_ExchangeByte
 19182                           
 19183                           ;enc28J60.c: 596: SPI_ExchangeByte(dest_mac->mac_array[1]);
 19184  004368  2808               	incf	ETH_WriteStart@dest_mac,w,c
 19185  00436A  D872               	call	PL76	;call to abstracted procedure
 19186  00436C  64F7               	cpfsgt	tblptrh,c
 19187  00436E  D003               	bra	u10697
 19188  004370  0008               	tblrd		*
 19189  004372  50F5               	movf	tablat,w,c
 19190  004374  D003               	bra	u10690
 19191  004376                     u10697:
 19192  004376  EC3C  F011         	call	PL24	;call to abstracted procedure
 19193  00437A  50EF               	movf	indf0,w,c
 19194  00437C                     u10690:
 19195  00437C  EC42  F02F         	call	_SPI_ExchangeByte
 19196                           
 19197                           ;enc28J60.c: 597: SPI_ExchangeByte(dest_mac->mac_array[2]);
 19198  004380  0E02               	movlw	2
 19199  004382  2408               	addwf	ETH_WriteStart@dest_mac,w,c
 19200  004384  D865               	call	PL76	;call to abstracted procedure
 19201  004386  64F7               	cpfsgt	tblptrh,c
 19202  004388  D003               	bra	u10707
 19203  00438A  0008               	tblrd		*
 19204  00438C  50F5               	movf	tablat,w,c
 19205  00438E  D003               	bra	u10700
 19206  004390                     u10707:
 19207  004390  EC3C  F011         	call	PL24	;call to abstracted procedure
 19208  004394  50EF               	movf	indf0,w,c
 19209  004396                     u10700:
 19210  004396  EC42  F02F         	call	_SPI_ExchangeByte
 19211                           
 19212                           ;enc28J60.c: 598: SPI_ExchangeByte(dest_mac->mac_array[3]);
 19213  00439A  0E03               	movlw	3
 19214  00439C  2408               	addwf	ETH_WriteStart@dest_mac,w,c
 19215  00439E  D858               	call	PL76	;call to abstracted procedure
 19216  0043A0  64F7               	cpfsgt	tblptrh,c
 19217  0043A2  D003               	bra	u10717
 19218  0043A4  0008               	tblrd		*
 19219  0043A6  50F5               	movf	tablat,w,c
 19220  0043A8  D003               	bra	u10710
 19221  0043AA                     u10717:
 19222  0043AA  EC3C  F011         	call	PL24	;call to abstracted procedure
 19223  0043AE  50EF               	movf	indf0,w,c
 19224  0043B0                     u10710:
 19225  0043B0  EC42  F02F         	call	_SPI_ExchangeByte
 19226                           
 19227                           ;enc28J60.c: 599: SPI_ExchangeByte(dest_mac->mac_array[4]);
 19228  0043B4  0E04               	movlw	4
 19229  0043B6  2408               	addwf	ETH_WriteStart@dest_mac,w,c
 19230  0043B8  D84B               	call	PL76	;call to abstracted procedure
 19231  0043BA  64F7               	cpfsgt	tblptrh,c
 19232  0043BC  D003               	bra	u10727
 19233  0043BE  0008               	tblrd		*
 19234  0043C0  50F5               	movf	tablat,w,c
 19235  0043C2  D003               	bra	u10720
 19236  0043C4                     u10727:
 19237  0043C4  EC3C  F011         	call	PL24	;call to abstracted procedure
 19238  0043C8  50EF               	movf	indf0,w,c
 19239  0043CA                     u10720:
 19240  0043CA  EC42  F02F         	call	_SPI_ExchangeByte
 19241                           
 19242                           ;enc28J60.c: 600: SPI_ExchangeByte(dest_mac->mac_array[5]);
 19243  0043CE  0E05               	movlw	5
 19244  0043D0  2408               	addwf	ETH_WriteStart@dest_mac,w,c
 19245  0043D2  D83E               	call	PL76	;call to abstracted procedure
 19246  0043D4  64F7               	cpfsgt	tblptrh,c
 19247  0043D6  D003               	bra	u10737
 19248  0043D8  0008               	tblrd		*
 19249  0043DA  50F5               	movf	tablat,w,c
 19250  0043DC  D003               	bra	u10730
 19251  0043DE                     u10737:
 19252  0043DE  EC3C  F011         	call	PL24	;call to abstracted procedure
 19253  0043E2  50EF               	movf	indf0,w,c
 19254  0043E4                     u10730:
 19255  0043E4  EC42  F02F         	call	_SPI_ExchangeByte
 19256                           
 19257                           ;enc28J60.c: 601: SPI_ExchangeByte(eth_MAC->mac_array[0]);
 19258  0043E8  D83F               	call	PL218	;call to abstracted procedure
 19259  0043EA  50F5               	movf	tablat,w,c
 19260  0043EC  EC42  F02F         	call	_SPI_ExchangeByte
 19261                           
 19262                           ;enc28J60.c: 602: SPI_ExchangeByte(eth_MAC->mac_array[1]);
 19263  0043F0  0E01               	movlw	1
 19264  0043F2  0101               	movlb	1	; () banked
 19265  0043F4  D822               	call	PL74	;call to abstracted procedure
 19266  0043F6  EC42  F02F         	call	_SPI_ExchangeByte
 19267                           
 19268                           ;enc28J60.c: 603: SPI_ExchangeByte(eth_MAC->mac_array[2]);
 19269  0043FA  0E02               	movlw	2
 19270  0043FC  0101               	movlb	1	; () banked
 19271  0043FE  D81D               	call	PL74	;call to abstracted procedure
 19272  004400  EC42  F02F         	call	_SPI_ExchangeByte
 19273                           
 19274                           ;enc28J60.c: 604: SPI_ExchangeByte(eth_MAC->mac_array[3]);
 19275  004404  0E03               	movlw	3
 19276  004406  0101               	movlb	1	; () banked
 19277  004408  D818               	call	PL74	;call to abstracted procedure
 19278  00440A  EC42  F02F         	call	_SPI_ExchangeByte
 19279                           
 19280                           ;enc28J60.c: 605: SPI_ExchangeByte(eth_MAC->mac_array[4]);
 19281  00440E  0E04               	movlw	4
 19282  004410  0101               	movlb	1	; () banked
 19283  004412  D813               	call	PL74	;call to abstracted procedure
 19284  004414  EC42  F02F         	call	_SPI_ExchangeByte
 19285                           
 19286                           ;enc28J60.c: 606: SPI_ExchangeByte(eth_MAC->mac_array[5]);
 19287  004418  0E05               	movlw	5
 19288  00441A  0101               	movlb	1	; () banked
 19289  00441C  D80E               	call	PL74	;call to abstracted procedure
 19290  00441E  EC42  F02F         	call	_SPI_ExchangeByte
 19291                           
 19292                           ;enc28J60.c: 607: SPI_ExchangeByte(type >> 8);
 19293  004422  500B               	movf	ETH_WriteStart@type+1,w,c
 19294  004424  EC42  F02F         	call	_SPI_ExchangeByte
 19295                           
 19296                           ;enc28J60.c: 608: SPI_ExchangeByte(type & 0x0FF);
 19297  004428  500A               	movf	ETH_WriteStart@type,w,c
 19298  00442A  EC42  F02F         	call	_SPI_ExchangeByte
 19299  00442E  868C               	bsf	3980,3,c	;volatile
 19300                           
 19301                           ;enc28J60.c: 610: TXPacketSize += 15;
 19302  004430  0E0F               	movlw	15
 19303  004432  ECDB  F02D         	call	PL294	;call to abstracted procedure
 19304                           
 19305                           ; BSR set to: 1
 19306                           ;enc28J60.c: 611: ethData.bufferBusy = 1;
 19307  004436  8BB5               	bsf	_ethData& (0+255),5,b	;volatile
 19308                           
 19309                           ; BSR set to: 1
 19310                           ;enc28J60.c: 613: return SUCCESS;
 19311  004438  0C01               	retlw	1	;funcret
 19312  00443A                     __end_of_ETH_WriteStart:
 19313                           	opt stack 0
 19314  00443A                     PL74:
 19315                           	opt stack 19
 19316  00443A  25D0               	addwf	_eth_MAC& (0+255),w,b
 19317  00443C  6EF6               	movwf	tblptrl,c
 19318  00443E  0E00               	movlw	0
 19319  004440  21D1               	addwfc	(_eth_MAC+1)& (0+255),w,b
 19320  004442  6EF7               	movwf	tblptrh,c
 19321  004444  0E00               	movlw	0
 19322  004446  21D2               	addwfc	(_eth_MAC+2)& (0+255),w,b
 19323  004448  6EF8               	movwf	tblptru,c
 19324  00444A  0008               	tblrd		*
 19325  00444C  50F5               	movf	tablat,w,c
 19326  00444E  0012               	return	
 19327  004450                     __end_ofPL74:
 19328                           	opt stack 0
 19329  004450                     PL76:
 19330                           	opt stack 19
 19331  004450  6E0C               	movwf	??_ETH_WriteStart& (0+255),c
 19332  004452  0E00               	movlw	0
 19333  004454  2009               	addwfc	ETH_WriteStart@dest_mac+1,w,c
 19334  004456  6E0D               	movwf	(??_ETH_WriteStart+1)& (0+255),c
 19335  004458  C00C  FFF6         	movff	??_ETH_WriteStart,tblptrl
 19336  00445C  C00D  FFF7         	movff	??_ETH_WriteStart+1,tblptrh
 19337  004460  0E00               	movlw	low (__smallconst shr (0+16))
 19338  004462  6EF8               	movwf	tblptru,c
 19339  004464  0E0F               	movlw	(high __ramtop+-1)
 19340  004466  0012               	return	
 19341  004468                     __end_ofPL76:
 19342                           	opt stack 0
 19343  004468                     PL218:
 19344                           	opt stack 21
 19345  004468  C1D0  FFF6         	movff	_eth_MAC,tblptrl
 19346  00446C  C1D1  FFF7         	movff	_eth_MAC+1,tblptrh
 19347  004470  C1D2  FFF8         	movff	_eth_MAC+2,tblptru
 19348  004474  0008               	tblrd		*
 19349  004476  0012               	return	
 19350  004478                     __end_ofPL218:
 19351                           	opt stack 0
 19352  004478                     PL250:
 19353                           	opt stack 21
 19354  004478  0E1A               	movlw	26
 19355  00447A  6E06               	movwf	ENC28_Wcr16@v+1,c
 19356  00447C  0E23               	movlw	35
 19357  00447E  6E05               	movwf	ENC28_Wcr16@v,c
 19358  004480  0C23               	retlw	35
 19359  004482                     __end_ofPL250:
 19360                           	opt stack 0
 19361                           tosu	equ	0xFFF
 19362                           tosh	equ	0xFFE
 19363                           tosl	equ	0xFFD
 19364                           pclath	equ	0xFFA
 19365                           tblptru	equ	0xFF8
 19366                           tblptrh	equ	0xFF7
 19367                           tblptrl	equ	0xFF6
 19368                           tablat	equ	0xFF5
 19369                           prodh	equ	0xFF4
 19370                           prodl	equ	0xFF3
 19371                           intcon	equ	0xFF2
 19372                           indf0	equ	0xFEF
 19373                           postinc0	equ	0xFEE
 19374                           fsr0h	equ	0xFEA
 19375                           fsr0l	equ	0xFE9
 19376                           wreg	equ	0xFE8
 19377                           postinc1	equ	0xFE6
 19378                           plusw1	equ	0xFE3
 19379                           fsr1h	equ	0xFE2
 19380                           fsr1l	equ	0xFE1
 19381                           bsr	equ	0xFE0
 19382                           indf2	equ	0xFDF
 19383                           postinc2	equ	0xFDE
 19384                           postdec2	equ	0xFDD
 19385                           plusw2	equ	0xFDB
 19386                           fsr2h	equ	0xFDA
 19387                           fsr2l	equ	0xFD9
 19388                           status	equ	0xFD8
 19389                           
 19390 ;; *************** function _ETH_WriteBlock *****************
 19391 ;; Defined at:
 19392 ;;		line 555 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 19393 ;; Parameters:    Size  Location     Type
 19394 ;;  data            2    2[COMRAM] PTR void 
 19395 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@local_ip(4), main@str(32), 
 19396 ;;		 -> STR_5(13), STR_4(17), TCP_Snd@txHeader(20), Network_Read@debug_str(80), 
 19397 ;;		 -> dhcpName(21), DHCP_Request@ethMAC(6), ARPV4_Request@header(28), ARPV4_Packet@header(28), 
 19398 ;;		 -> NULL(0), 
 19399 ;;  length          2    4[COMRAM] unsigned int 
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;  p               2    6[COMRAM] PTR unsigned char 
 19402 ;;		 -> ?_sprintf(2), ?_printf(2), DEMO_UDP_Recv@local_ip(4), main@str(32), 
 19403 ;;		 -> STR_5(13), STR_4(17), TCP_Snd@txHeader(20), Network_Read@debug_str(80), 
 19404 ;;		 -> dhcpName(21), DHCP_Request@ethMAC(6), ARPV4_Request@header(28), ARPV4_Packet@header(28), 
 19405 ;;		 -> NULL(0), 
 19406 ;; Return value:  Size  Location     Type
 19407 ;;                  2    2[COMRAM] unsigned int 
 19408 ;; Registers used:
 19409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19416 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;Total ram usage:        6 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    4
 19422 ;; This function calls:
 19423 ;;		_SPI_ExchangeByte
 19424 ;; This function is called by:
 19425 ;;		_ARPV4_Packet
 19426 ;;		_ARPV4_Request
 19427 ;;		_DHCP_Request
 19428 ;;		_TCP_Snd
 19429 ;;		_UDP_WriteBlock
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           	psect	text79
 19434  00555E                     __ptext79:
 19435                           	opt stack 0
 19436  00555E                     _ETH_WriteBlock:
 19437                           	opt stack 20
 19438                           
 19439                           ;enc28J60.c: 557: char *p = data;
 19440                           
 19441                           ;incstack = 0
 19442  00555E  C003  F007         	movff	ETH_WriteBlock@data,ETH_WriteBlock@p
 19443  005562  C004  F008         	movff	ETH_WriteBlock@data+1,ETH_WriteBlock@p+1
 19444                           
 19445                           ;enc28J60.c: 558: TXPacketSize += length;
 19446  005566  5005               	movf	ETH_WriteBlock@length,w,c
 19447  005568  0101               	movlb	1	; () banked
 19448  00556A  27D3               	addwf	_TXPacketSize& (0+255),f,b
 19449  00556C  5006               	movf	ETH_WriteBlock@length+1,w,c
 19450  00556E  23D4               	addwfc	(_TXPacketSize+1)& (0+255),f,b
 19451                           
 19452                           ; BSR set to: 1
 19453  005570  968C               	bcf	3980,3,c	;volatile
 19454                           
 19455                           ; BSR set to: 1
 19456                           ;enc28J60.c: 560: SPI_ExchangeByte(wbm_inst);
 19457  005572  0E7A               	movlw	122
 19458  005574  EC42  F02F         	call	_SPI_ExchangeByte
 19459                           
 19460                           ;enc28J60.c: 561: while (length--) {
 19461  005578  D013               	goto	l7976
 19462  00557A                     l7972:
 19463                           
 19464                           ;enc28J60.c: 562: SPI_ExchangeByte(*p++);
 19465  00557A  C007  FFF6         	movff	ETH_WriteBlock@p,tblptrl
 19466  00557E  C008  FFF7         	movff	ETH_WriteBlock@p+1,tblptrh
 19467  005582  0E00               	movlw	low (__smallconst shr (0+16))
 19468  005584  6EF8               	movwf	tblptru,c
 19469  005586  0E0F               	movlw	(high __ramtop+-1)
 19470  005588  64F7               	cpfsgt	tblptrh,c
 19471  00558A  D003               	bra	u10647
 19472  00558C  0008               	tblrd		*
 19473  00558E  50F5               	movf	tablat,w,c
 19474  005590  D003               	bra	u10640
 19475  005592                     u10647:
 19476  005592  EC3C  F011         	call	PL24	;call to abstracted procedure
 19477  005596  50EF               	movf	indf0,w,c
 19478  005598                     u10640:
 19479  005598  EC42  F02F         	call	_SPI_ExchangeByte
 19480  00559C  4A07               	infsnz	ETH_WriteBlock@p,f,c
 19481  00559E  2A08               	incf	ETH_WriteBlock@p+1,f,c
 19482  0055A0                     l7976:
 19483  0055A0  0605               	decf	ETH_WriteBlock@length,f,c
 19484  0055A2  A0D8               	btfss	status,0,c
 19485  0055A4  0606               	decf	ETH_WriteBlock@length+1,f,c
 19486  0055A6  2805               	incf	ETH_WriteBlock@length,w,c
 19487  0055A8  E1E8               	bnz	l7972
 19488  0055AA  2806               	incf	ETH_WriteBlock@length+1,w,c
 19489  0055AC  E1E6               	bnz	l7972
 19490                           
 19491                           ;enc28J60.c: 563: }
 19492                           ;enc28J60.c: 564: do{LATD3 = 1;} while(0);
 19493  0055AE  868C               	bsf	3980,3,c	;volatile
 19494  0055B0  0012               	return		;funcret
 19495  0055B2                     __end_of_ETH_WriteBlock:
 19496                           	opt stack 0
 19497                           tosu	equ	0xFFF
 19498                           tosh	equ	0xFFE
 19499                           tosl	equ	0xFFD
 19500                           pclath	equ	0xFFA
 19501                           tblptru	equ	0xFF8
 19502                           tblptrh	equ	0xFF7
 19503                           tblptrl	equ	0xFF6
 19504                           tablat	equ	0xFF5
 19505                           prodh	equ	0xFF4
 19506                           prodl	equ	0xFF3
 19507                           intcon	equ	0xFF2
 19508                           indf0	equ	0xFEF
 19509                           postinc0	equ	0xFEE
 19510                           fsr0h	equ	0xFEA
 19511                           fsr0l	equ	0xFE9
 19512                           wreg	equ	0xFE8
 19513                           postinc1	equ	0xFE6
 19514                           plusw1	equ	0xFE3
 19515                           fsr1h	equ	0xFE2
 19516                           fsr1l	equ	0xFE1
 19517                           bsr	equ	0xFE0
 19518                           indf2	equ	0xFDF
 19519                           postinc2	equ	0xFDE
 19520                           postdec2	equ	0xFDD
 19521                           plusw2	equ	0xFDB
 19522                           fsr2h	equ	0xFDA
 19523                           fsr2l	equ	0xFD9
 19524                           status	equ	0xFD8
 19525                           
 19526 ;; *************** function _ETH_GetMAC *****************
 19527 ;; Defined at:
 19528 ;;		line 851 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 19529 ;; Parameters:    Size  Location     Type
 19530 ;;  macAddr         1    wreg     PTR unsigned char 
 19531 ;;		 -> DHCP_Handler@ethMAC(6), DHCP_Request@ethMAC(6), ARPV4_Request@header(28), header.sha(6), 
 19532 ;;		 -> ARPV4_Packet@header(28), 
 19533 ;; Auto vars:     Size  Location     Type
 19534 ;;  macAddr         1    6[COMRAM] PTR unsigned char 
 19535 ;;		 -> DHCP_Handler@ethMAC(6), DHCP_Request@ethMAC(6), ARPV4_Request@header(28), header.sha(6), 
 19536 ;;		 -> ARPV4_Packet@header(28), 
 19537 ;; Return value:  Size  Location     Type
 19538 ;;		None               void
 19539 ;; Registers used:
 19540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19541 ;; Tracked objects:
 19542 ;;		On entry : 0/1
 19543 ;;		On exit  : 0/0
 19544 ;;		Unchanged: 0/0
 19545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19550 ;;Total ram usage:        1 bytes
 19551 ;; Hardware stack levels used:    1
 19552 ;; Hardware stack levels required when called:    6
 19553 ;; This function calls:
 19554 ;;		_ENC28_Rcr8
 19555 ;; This function is called by:
 19556 ;;		_ARPV4_Packet
 19557 ;;		_ARPV4_Request
 19558 ;;		_DHCP_Request
 19559 ;;		_DHCP_Handler
 19560 ;; This function uses a non-reentrant model
 19561 ;;
 19562                           
 19563                           	psect	text80
 19564  00577C                     __ptext80:
 19565                           	opt stack 0
 19566  00577C                     _ETH_GetMAC:
 19567                           	opt stack 18
 19568                           
 19569                           ;incstack = 0
 19570                           ;ETH_GetMAC@macAddr stored from wreg
 19571  00577C  6E07               	movwf	ETH_GetMAC@macAddr,c
 19572                           
 19573                           ;enc28J60.c: 853: *macAddr++ = ENC28_Rcr8(J60_MAADR1);
 19574  00577E  5007               	movf	ETH_GetMAC@macAddr,w,c
 19575  005780  6ED9               	movwf	fsr2l,c
 19576  005782  6ADA               	clrf	fsr2h,c
 19577  005784  0EC4               	movlw	196
 19578  005786  EC33  F02E         	call	_ENC28_Rcr8
 19579                           
 19580                           ;enc28J60.c: 854: *macAddr++ = ENC28_Rcr8(J60_MAADR2);
 19581  00578A  D816               	call	PL156	;call to abstracted procedure
 19582  00578C  0EC5               	movlw	197
 19583  00578E  EC33  F02E         	call	_ENC28_Rcr8
 19584                           
 19585                           ;enc28J60.c: 855: *macAddr++ = ENC28_Rcr8(J60_MAADR3);
 19586  005792  D812               	call	PL156	;call to abstracted procedure
 19587  005794  0EC2               	movlw	194
 19588  005796  EC33  F02E         	call	_ENC28_Rcr8
 19589                           
 19590                           ;enc28J60.c: 856: *macAddr++ = ENC28_Rcr8(J60_MAADR4);
 19591  00579A  D80E               	call	PL156	;call to abstracted procedure
 19592  00579C  0EC3               	movlw	195
 19593  00579E  EC33  F02E         	call	_ENC28_Rcr8
 19594                           
 19595                           ;enc28J60.c: 857: *macAddr++ = ENC28_Rcr8(J60_MAADR5);
 19596  0057A2  D80A               	call	PL156	;call to abstracted procedure
 19597  0057A4  0EC0               	movlw	192
 19598  0057A6  EC33  F02E         	call	_ENC28_Rcr8
 19599                           
 19600                           ;enc28J60.c: 858: *macAddr++ = ENC28_Rcr8(J60_MAADR6);
 19601  0057AA  D806               	call	PL156	;call to abstracted procedure
 19602  0057AC  0EC1               	movlw	193
 19603  0057AE  EC33  F02E         	call	_ENC28_Rcr8
 19604  0057B2  6EDF               	movwf	indf2,c
 19605  0057B4  2A07               	incf	ETH_GetMAC@macAddr,f,c
 19606  0057B6  0012               	return		;funcret
 19607  0057B8                     __end_of_ETH_GetMAC:
 19608                           	opt stack 0
 19609  0057B8                     PL156:
 19610                           	opt stack 18
 19611  0057B8  6EDF               	movwf	indf2,c
 19612  0057BA  2A07               	incf	ETH_GetMAC@macAddr,f,c
 19613  0057BC  5007               	movf	ETH_GetMAC@macAddr,w,c
 19614  0057BE  6ED9               	movwf	fsr2l,c
 19615  0057C0  6ADA               	clrf	fsr2h,c
 19616  0057C2  0012               	return	
 19617  0057C4                     __end_ofPL156:
 19618                           	opt stack 0
 19619                           tosu	equ	0xFFF
 19620                           tosh	equ	0xFFE
 19621                           tosl	equ	0xFFD
 19622                           pclath	equ	0xFFA
 19623                           tblptru	equ	0xFF8
 19624                           tblptrh	equ	0xFF7
 19625                           tblptrl	equ	0xFF6
 19626                           tablat	equ	0xFF5
 19627                           prodh	equ	0xFF4
 19628                           prodl	equ	0xFF3
 19629                           intcon	equ	0xFF2
 19630                           indf0	equ	0xFEF
 19631                           postinc0	equ	0xFEE
 19632                           fsr0h	equ	0xFEA
 19633                           fsr0l	equ	0xFE9
 19634                           wreg	equ	0xFE8
 19635                           postinc1	equ	0xFE6
 19636                           plusw1	equ	0xFE3
 19637                           fsr1h	equ	0xFE2
 19638                           fsr1l	equ	0xFE1
 19639                           bsr	equ	0xFE0
 19640                           indf2	equ	0xFDF
 19641                           postinc2	equ	0xFDE
 19642                           postdec2	equ	0xFDD
 19643                           plusw2	equ	0xFDB
 19644                           fsr2h	equ	0xFDA
 19645                           fsr2l	equ	0xFD9
 19646                           status	equ	0xFD8
 19647                           
 19648 ;; *************** function _ARPV4_Lookup *****************
 19649 ;; Defined at:
 19650 ;;		line 234 in file "../../TCPIP Library/source/arpv4.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;  ip_address      4    1[COMRAM] unsigned long 
 19653 ;; Auto vars:     Size  Location     Type
 19654 ;;  entry_pointe    2    9[COMRAM] PTR struct .
 19655 ;;		 -> arpMap(104), 
 19656 ;;  x               1   11[COMRAM] unsigned char 
 19657 ;; Return value:  Size  Location     Type
 19658 ;;                  2    1[COMRAM] PTR struct .
 19659 ;; Registers used:
 19660 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19661 ;; Tracked objects:
 19662 ;;		On entry : F/1
 19663 ;;		On exit  : F/1
 19664 ;;		Unchanged: F/0
 19665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19667 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;Total ram usage:       11 bytes
 19671 ;; Hardware stack levels used:    1
 19672 ;; Hardware stack levels required when called:    3
 19673 ;; This function calls:
 19674 ;;		Nothing
 19675 ;; This function is called by:
 19676 ;;		_IPv4_Start
 19677 ;; This function uses a non-reentrant model
 19678 ;;
 19679                           
 19680                           	psect	text81
 19681  005600                     __ptext81:
 19682                           	opt stack 0
 19683  005600                     _ARPV4_Lookup:
 19684                           	opt stack 22
 19685                           
 19686                           ; BSR set to: 1
 19687                           ;arpv4.c: 236: arpMap_t *entry_pointer = arpMap;
 19688                           
 19689                           ;incstack = 0
 19690  005600  0E2C               	movlw	low _arpMap
 19691  005602  6E0A               	movwf	ARPV4_Lookup@entry_pointer,c
 19692  005604  0E02               	movlw	high _arpMap
 19693  005606  6E0B               	movwf	ARPV4_Lookup@entry_pointer+1,c
 19694                           
 19695                           ; BSR set to: 1
 19696                           ;arpv4.c: 237: uint8_t x;
 19697                           ;arpv4.c: 239: for(x = 0; x < 8; x++)
 19698  005608  6A0C               	clrf	ARPV4_Lookup@x,c
 19699  00560A                     l8202:
 19700                           
 19701                           ; BSR set to: 1
 19702                           ;arpv4.c: 240: {
 19703                           ;arpv4.c: 241: if(entry_pointer->ipAddress == ip_address)
 19704  00560A  EE20 F006          	lfsr	2,6
 19705  00560E  500A               	movf	ARPV4_Lookup@entry_pointer,w,c
 19706  005610  26D9               	addwf	fsr2l,f,c
 19707  005612  500B               	movf	ARPV4_Lookup@entry_pointer+1,w,c
 19708  005614  22DA               	addwfc	fsr2h,f,c
 19709  005616  5002               	movf	ARPV4_Lookup@ip_address,w,c
 19710  005618  18DE               	xorwf	postinc2,w,c
 19711  00561A  E10E               	bnz	l8208
 19712  00561C  5003               	movf	ARPV4_Lookup@ip_address+1,w,c
 19713  00561E  18DE               	xorwf	postinc2,w,c
 19714  005620  E10B               	bnz	l8208
 19715  005622  5004               	movf	ARPV4_Lookup@ip_address+2,w,c
 19716  005624  18DE               	xorwf	postinc2,w,c
 19717  005626  E108               	bnz	l8208
 19718  005628  5005               	movf	ARPV4_Lookup@ip_address+3,w,c
 19719  00562A  18DE               	xorwf	postinc2,w,c
 19720  00562C  E105               	bnz	l8208
 19721                           
 19722                           ; BSR set to: 1
 19723                           ;arpv4.c: 242: return &entry_pointer->macAddress;
 19724  00562E  C00A  F002         	movff	ARPV4_Lookup@entry_pointer,?_ARPV4_Lookup
 19725  005632  C00B  F003         	movff	ARPV4_Lookup@entry_pointer+1,?_ARPV4_Lookup+1
 19726  005636  0012               	return	
 19727  005638                     l8208:
 19728                           
 19729                           ; BSR set to: 1
 19730                           ;arpv4.c: 243: entry_pointer ++;
 19731  005638  0E0D               	movlw	13
 19732  00563A  260A               	addwf	ARPV4_Lookup@entry_pointer,f,c
 19733  00563C  0E00               	movlw	0
 19734  00563E  220B               	addwfc	ARPV4_Lookup@entry_pointer+1,f,c
 19735                           
 19736                           ; BSR set to: 1
 19737  005640  2A0C               	incf	ARPV4_Lookup@x,f,c
 19738                           
 19739                           ; BSR set to: 1
 19740  005642  0E07               	movlw	7
 19741  005644  640C               	cpfsgt	ARPV4_Lookup@x,c
 19742  005646  D7E1               	goto	l8202
 19743                           
 19744                           ; BSR set to: 1
 19745                           ;arpv4.c: 244: }
 19746                           ;arpv4.c: 245: return 0;
 19747  005648  6A02               	clrf	?_ARPV4_Lookup,c
 19748  00564A  6A03               	clrf	?_ARPV4_Lookup+1,c
 19749                           
 19750                           ; BSR set to: 1
 19751  00564C  0012               	return		;funcret
 19752  00564E                     __end_of_ARPV4_Lookup:
 19753                           	opt stack 0
 19754                           tosu	equ	0xFFF
 19755                           tosh	equ	0xFFE
 19756                           tosl	equ	0xFFD
 19757                           pclath	equ	0xFFA
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           indf0	equ	0xFEF
 19766                           postinc0	equ	0xFEE
 19767                           fsr0h	equ	0xFEA
 19768                           fsr0l	equ	0xFE9
 19769                           wreg	equ	0xFE8
 19770                           postinc1	equ	0xFE6
 19771                           plusw1	equ	0xFE3
 19772                           fsr1h	equ	0xFE2
 19773                           fsr1l	equ	0xFE1
 19774                           bsr	equ	0xFE0
 19775                           indf2	equ	0xFDF
 19776                           postinc2	equ	0xFDE
 19777                           postdec2	equ	0xFDD
 19778                           plusw2	equ	0xFDB
 19779                           fsr2h	equ	0xFDA
 19780                           fsr2l	equ	0xFD9
 19781                           status	equ	0xFD8
 19782                           
 19783 ;; *************** function _ETH_ResetByteCount *****************
 19784 ;; Defined at:
 19785 ;;		line 880 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 19786 ;; Parameters:    Size  Location     Type
 19787 ;;		None
 19788 ;; Auto vars:     Size  Location     Type
 19789 ;;		None
 19790 ;; Return value:  Size  Location     Type
 19791 ;;		None               void
 19792 ;; Registers used:
 19793 ;;		wreg, status,2, status,0, cstack
 19794 ;; Tracked objects:
 19795 ;;		On entry : F/0
 19796 ;;		On exit  : 0/0
 19797 ;;		Unchanged: 0/0
 19798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19803 ;;Total ram usage:        0 bytes
 19804 ;; Hardware stack levels used:    1
 19805 ;; Hardware stack levels required when called:    6
 19806 ;; This function calls:
 19807 ;;		_ENC28_Rcr16
 19808 ;; This function is called by:
 19809 ;;		_UDP_Start
 19810 ;; This function uses a non-reentrant model
 19811 ;;
 19812                           
 19813                           	psect	text82
 19814  005E4A                     __ptext82:
 19815                           	opt stack 0
 19816  005E4A                     _ETH_ResetByteCount:
 19817                           	opt stack 20
 19818                           
 19819                           ; BSR set to: 0
 19820                           ;enc28J60.c: 882: ethData.saveWRPT = ENC28_Rcr16(J60_EWRPTL);
 19821                           
 19822                           ; BSR set to: 1
 19823                           ;incstack = 0
 19824  005E4A  0E02               	movlw	2
 19825  005E4C  EC25  F02C         	call	_ENC28_Rcr16
 19826  005E50  C005  F1BA         	movff	?_ENC28_Rcr16,_ethData+5	;volatile
 19827  005E54  C006  F1BB         	movff	?_ENC28_Rcr16+1,_ethData+6	;volatile
 19828  005E58  0012               	return		;funcret
 19829  005E5A                     __end_of_ETH_ResetByteCount:
 19830                           	opt stack 0
 19831                           tosu	equ	0xFFF
 19832                           tosh	equ	0xFFE
 19833                           tosl	equ	0xFFD
 19834                           pclath	equ	0xFFA
 19835                           tblptru	equ	0xFF8
 19836                           tblptrh	equ	0xFF7
 19837                           tblptrl	equ	0xFF6
 19838                           tablat	equ	0xFF5
 19839                           prodh	equ	0xFF4
 19840                           prodl	equ	0xFF3
 19841                           intcon	equ	0xFF2
 19842                           indf0	equ	0xFEF
 19843                           postinc0	equ	0xFEE
 19844                           fsr0h	equ	0xFEA
 19845                           fsr0l	equ	0xFE9
 19846                           wreg	equ	0xFE8
 19847                           postinc1	equ	0xFE6
 19848                           plusw1	equ	0xFE3
 19849                           fsr1h	equ	0xFE2
 19850                           fsr1l	equ	0xFE1
 19851                           bsr	equ	0xFE0
 19852                           indf2	equ	0xFDF
 19853                           postinc2	equ	0xFDE
 19854                           postdec2	equ	0xFDD
 19855                           plusw2	equ	0xFDB
 19856                           fsr2h	equ	0xFDA
 19857                           fsr2l	equ	0xFD9
 19858                           status	equ	0xFD8
 19859                           
 19860 ;; *************** function _UDP_Send *****************
 19861 ;; Defined at:
 19862 ;;		line 99 in file "../../TCPIP Library/source/udpv4.c"
 19863 ;; Parameters:    Size  Location     Type
 19864 ;;		None
 19865 ;; Auto vars:     Size  Location     Type
 19866 ;;  udpLength       2   41[COMRAM] unsigned int 
 19867 ;;  cksm            2   39[COMRAM] unsigned int 
 19868 ;;  ret             1    0        enum E367
 19869 ;; Return value:  Size  Location     Type
 19870 ;;                  1    wreg      enum E449
 19871 ;; Registers used:
 19872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19873 ;; Tracked objects:
 19874 ;;		On entry : 0/0
 19875 ;;		On exit  : F/1
 19876 ;;		Unchanged: 0/0
 19877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19879 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19880 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19881 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19882 ;;Total ram usage:        9 bytes
 19883 ;; Hardware stack levels used:    1
 19884 ;; Hardware stack levels required when called:    8
 19885 ;; This function calls:
 19886 ;;		_ETH_GetByteCount
 19887 ;;		_ETH_Insert
 19888 ;;		_ETH_TxComputeChecksum
 19889 ;;		_IPV4_Send
 19890 ;; This function is called by:
 19891 ;;		_DHCP_Request
 19892 ;;		_DEMO_UDP_Send
 19893 ;;		_DEMO_UDP_Recv
 19894 ;; This function uses a non-reentrant model
 19895 ;;
 19896                           
 19897                           	psect	text83
 19898  0050E4                     __ptext83:
 19899                           	opt stack 0
 19900  0050E4                     _UDP_Send:
 19901                           	opt stack 19
 19902                           
 19903                           ;udpv4.c: 105: udpLength = ETH_GetByteCount();
 19904                           
 19905                           ;incstack = 0
 19906  0050E4  EC7F  F02E         	call	_ETH_GetByteCount	;wreg free
 19907  0050E8  C00A  F02A         	movff	?_ETH_GetByteCount,UDP_Send@udpLength
 19908  0050EC  C00B  F02B         	movff	?_ETH_GetByteCount+1,UDP_Send@udpLength+1
 19909                           
 19910                           ; BSR set to: 1
 19911                           ;udpv4.c: 106: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)udpLength & (uint16_t)0x00FF) << 8));
 19912  0050F0  D831               	call	PL160	;call to abstracted procedure
 19913                           
 19914                           ; BSR set to: 1
 19915                           ;udpv4.c: 107: ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4He
      +                          ader_t) + (int)(((char*)&((udpHeader_t *)1)->length)-1));
 19916  0050F2  EC28  F02A         	call	PL192	;call to abstracted procedure
 19917  0050F6  0E26               	movlw	38
 19918  0050F8  6E0C               	movwf	ETH_Insert@offset,c
 19919  0050FA  0E2A               	movlw	UDP_Send@udpLength& (0+255)
 19920  0050FC  EC2D  F02A         	call	_ETH_Insert
 19921                           
 19922                           ;udpv4.c: 108: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_
      +                          t)udpLength & (uint16_t)0x00FF) << 8));
 19923  005100  D829               	call	PL160	;call to abstracted procedure
 19924                           
 19925                           ;udpv4.c: 111: cksm = udpLength + UDP;
 19926  005102  0E11               	movlw	17
 19927  005104  242A               	addwf	UDP_Send@udpLength,w,c
 19928  005106  6E28               	movwf	UDP_Send@cksm,c
 19929  005108  0E00               	movlw	0
 19930  00510A  202B               	addwfc	UDP_Send@udpLength+1,w,c
 19931  00510C  6E29               	movwf	UDP_Send@cksm+1,c
 19932                           
 19933                           ;udpv4.c: 112: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) - 8, udpLength + 8, cksm);
 19934  00510E  EC2B  F016         	call	PL354	;call to abstracted procedure
 19935  005112  242A               	addwf	UDP_Send@udpLength,w,c
 19936  005114  6E0C               	movwf	ETH_TxComputeChecksum@length,c
 19937  005116  0E00               	movlw	0
 19938  005118  202B               	addwfc	UDP_Send@udpLength+1,w,c
 19939  00511A  6E0D               	movwf	ETH_TxComputeChecksum@length+1,c
 19940  00511C  C028  F00E         	movff	UDP_Send@cksm,ETH_TxComputeChecksum@seed
 19941  005120  C029  F00F         	movff	UDP_Send@cksm+1,ETH_TxComputeChecksum@seed+1
 19942  005124  EC71  F026         	call	_ETH_TxComputeChecksum	;wreg free
 19943  005128  C00A  F028         	movff	?_ETH_TxComputeChecksum,UDP_Send@cksm
 19944  00512C  C00B  F029         	movff	?_ETH_TxComputeChecksum+1,UDP_Send@cksm+1
 19945                           
 19946                           ;udpv4.c: 115: if (cksm == 0){
 19947  005130  5028               	movf	UDP_Send@cksm,w,c
 19948  005132  1029               	iorwf	UDP_Send@cksm+1,w,c
 19949  005134  E102               	bnz	l8990
 19950                           
 19951                           ;udpv4.c: 116: cksm = 0xffff;
 19952  005136  6828               	setf	UDP_Send@cksm,c
 19953  005138  6829               	setf	UDP_Send@cksm+1,c
 19954  00513A                     l8990:
 19955                           
 19956                           ;udpv4.c: 117: }
 19957                           ;udpv4.c: 119: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_
      +                          t) + (int)(((char*)&((udpHeader_t *)1)->checksum)-1));
 19958  00513A  EC28  F02A         	call	PL192	;call to abstracted procedure
 19959  00513E  0E28               	movlw	40
 19960  005140  6E0C               	movwf	ETH_Insert@offset,c
 19961  005142  0E28               	movlw	UDP_Send@cksm& (0+255)
 19962  005144  EC2D  F02A         	call	_ETH_Insert
 19963  005148  C02A  F018         	movff	UDP_Send@udpLength,IPV4_Send@payloadLength
 19964  00514C  C02B  F019         	movff	UDP_Send@udpLength+1,IPV4_Send@payloadLength+1
 19965  005150  EFF7  F029         	goto	_IPV4_Send	;wreg free
 19966  005154                     __end_of_UDP_Send:
 19967                           	opt stack 0
 19968  005154                     PL160:
 19969                           	opt stack 19
 19970  005154  502A               	movf	UDP_Send@udpLength,w,c
 19971  005156  6E24               	movwf	(??_UDP_Send+1)& (0+255),c
 19972  005158  6A23               	clrf	??_UDP_Send& (0+255),c
 19973  00515A  502B               	movf	UDP_Send@udpLength+1,w,c
 19974  00515C  6E25               	movwf	(??_UDP_Send+2)& (0+255),c
 19975  00515E  6A26               	clrf	(??_UDP_Send+3)& (0+255),c
 19976  005160  5023               	movf	??_UDP_Send,w,c
 19977  005162  1025               	iorwf	??_UDP_Send+2,w,c
 19978  005164  6E2A               	movwf	UDP_Send@udpLength,c
 19979  005166  5024               	movf	??_UDP_Send+1,w,c
 19980  005168  1026               	iorwf	??_UDP_Send+3,w,c
 19981  00516A  6E2B               	movwf	UDP_Send@udpLength+1,c
 19982  00516C  0012               	return	
 19983  00516E                     __end_ofPL160:
 19984                           	opt stack 0
 19985                           tosu	equ	0xFFF
 19986                           tosh	equ	0xFFE
 19987                           tosl	equ	0xFFD
 19988                           pclath	equ	0xFFA
 19989                           tblptru	equ	0xFF8
 19990                           tblptrh	equ	0xFF7
 19991                           tblptrl	equ	0xFF6
 19992                           tablat	equ	0xFF5
 19993                           prodh	equ	0xFF4
 19994                           prodl	equ	0xFF3
 19995                           intcon	equ	0xFF2
 19996                           indf0	equ	0xFEF
 19997                           postinc0	equ	0xFEE
 19998                           fsr0h	equ	0xFEA
 19999                           fsr0l	equ	0xFE9
 20000                           wreg	equ	0xFE8
 20001                           postinc1	equ	0xFE6
 20002                           plusw1	equ	0xFE3
 20003                           fsr1h	equ	0xFE2
 20004                           fsr1l	equ	0xFE1
 20005                           bsr	equ	0xFE0
 20006                           indf2	equ	0xFDF
 20007                           postinc2	equ	0xFDE
 20008                           postdec2	equ	0xFDD
 20009                           plusw2	equ	0xFDB
 20010                           fsr2h	equ	0xFDA
 20011                           fsr2l	equ	0xFD9
 20012                           status	equ	0xFD8
 20013                           
 20014 ;; *************** function _IPV4_Send *****************
 20015 ;; Defined at:
 20016 ;;		line 267 in file "../../TCPIP Library/source/ipv4.c"
 20017 ;; Parameters:    Size  Location     Type
 20018 ;;  payloadLengt    2   23[COMRAM] unsigned int 
 20019 ;; Auto vars:     Size  Location     Type
 20020 ;;  totalLength     2   32[COMRAM] unsigned int 
 20021 ;;  cksm            2   30[COMRAM] unsigned int 
 20022 ;;  ret             1   29[COMRAM] enum E6944
 20023 ;; Return value:  Size  Location     Type
 20024 ;;                  1    wreg      enum E366
 20025 ;; Registers used:
 20026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20027 ;; Tracked objects:
 20028 ;;		On entry : 0/0
 20029 ;;		On exit  : F/1
 20030 ;;		Unchanged: 0/0
 20031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20032 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20033 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20034 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20035 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;Total ram usage:       11 bytes
 20037 ;; Hardware stack levels used:    1
 20038 ;; Hardware stack levels required when called:    7
 20039 ;; This function calls:
 20040 ;;		_ETH_Insert
 20041 ;;		_ETH_Send
 20042 ;;		_ETH_TxComputeChecksum
 20043 ;; This function is called by:
 20044 ;;		_ICMP_EchoReply
 20045 ;;		_TCP_Snd
 20046 ;;		_UDP_Send
 20047 ;; This function uses a non-reentrant model
 20048 ;;
 20049                           
 20050                           	psect	text84
 20051  0053EE                     __ptext84:
 20052                           	opt stack 0
 20053  0053EE                     _IPV4_Send:
 20054                           	opt stack 19
 20055                           
 20056                           ;ipv4.c: 269: uint16_t totalLength;
 20057                           ;ipv4.c: 270: uint16_t cksm;
 20058                           ;ipv4.c: 271: error_msg ret;
 20059                           ;ipv4.c: 273: totalLength = 20 + payloadLength;
 20060                           
 20061                           ; BSR set to: 1
 20062                           ;incstack = 0
 20063  0053EE  0E14               	movlw	20
 20064  0053F0  2418               	addwf	IPV4_Send@payloadLength,w,c
 20065  0053F2  6E21               	movwf	IPV4_Send@totalLength,c
 20066  0053F4  0E00               	movlw	0
 20067  0053F6  2019               	addwfc	IPV4_Send@payloadLength+1,w,c
 20068  0053F8  6E22               	movwf	IPV4_Send@totalLength+1,c
 20069                           
 20070                           ;ipv4.c: 274: totalLength = ((((uint16_t)totalLength & (uint16_t)0xFF00) >> 8) | (((uint
      +                          16_t)totalLength & (uint16_t)0x00FF) << 8));
 20071  0053FA  5021               	movf	IPV4_Send@totalLength,w,c
 20072  0053FC  6E1B               	movwf	(??_IPV4_Send+1)& (0+255),c
 20073  0053FE  6A1A               	clrf	??_IPV4_Send& (0+255),c
 20074  005400  5022               	movf	IPV4_Send@totalLength+1,w,c
 20075  005402  6E1C               	movwf	(??_IPV4_Send+2)& (0+255),c
 20076  005404  6A1D               	clrf	(??_IPV4_Send+3)& (0+255),c
 20077  005406  501A               	movf	??_IPV4_Send,w,c
 20078  005408  101C               	iorwf	??_IPV4_Send+2,w,c
 20079  00540A  6E21               	movwf	IPV4_Send@totalLength,c
 20080  00540C  501B               	movf	??_IPV4_Send+1,w,c
 20081  00540E  101D               	iorwf	??_IPV4_Send+3,w,c
 20082  005410  6E22               	movwf	IPV4_Send@totalLength+1,c
 20083                           
 20084                           ;ipv4.c: 277: ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + (int)(((char
      +                          *)&((ipv4Header_t *)1)->length)-1));
 20085  005412  D81E               	call	PL192	;call to abstracted procedure
 20086  005414  0E10               	movlw	16
 20087  005416  6E0C               	movwf	ETH_Insert@offset,c
 20088  005418  0E21               	movlw	IPV4_Send@totalLength& (0+255)
 20089  00541A  EC2D  F02A         	call	_ETH_Insert
 20090                           
 20091                           ;ipv4.c: 279: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t),sizeof(ipv4Header_t),
      +                          0);
 20092  00541E  6A0B               	clrf	ETH_TxComputeChecksum@position+1,c
 20093  005420  0E0E               	movlw	14
 20094  005422  6E0A               	movwf	ETH_TxComputeChecksum@position,c
 20095  005424  6A0D               	clrf	ETH_TxComputeChecksum@length+1,c
 20096  005426  0E14               	movlw	20
 20097  005428  6E0C               	movwf	ETH_TxComputeChecksum@length,c
 20098  00542A  6A0F               	clrf	ETH_TxComputeChecksum@seed+1,c
 20099  00542C  6A0E               	clrf	ETH_TxComputeChecksum@seed,c
 20100  00542E  EC71  F026         	call	_ETH_TxComputeChecksum	;wreg free
 20101  005432  C00A  F01F         	movff	?_ETH_TxComputeChecksum,IPV4_Send@cksm
 20102  005436  C00B  F020         	movff	?_ETH_TxComputeChecksum+1,IPV4_Send@cksm+1
 20103                           
 20104                           ;ipv4.c: 281: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + (int)(((char*)&((ip
      +                          v4Header_t *)1)->headerCksm)-1));
 20105  00543A  D80A               	call	PL192	;call to abstracted procedure
 20106  00543C  0E18               	movlw	24
 20107  00543E  6E0C               	movwf	ETH_Insert@offset,c
 20108  005440  0E1F               	movlw	IPV4_Send@cksm& (0+255)
 20109  005442  EC2D  F02A         	call	_ETH_Insert
 20110                           
 20111                           ;ipv4.c: 282: ret = ETH_Send();
 20112  005446  ECFD  F02C         	call	_ETH_Send	;wreg free
 20113  00544A  6E1E               	movwf	IPV4_Send@ret,c
 20114                           
 20115                           ; BSR set to: 1
 20116                           ;ipv4.c: 284: return ret;
 20117  00544C  501E               	movf	IPV4_Send@ret,w,c
 20118                           
 20119                           ; BSR set to: 1
 20120  00544E  0012               	return		;funcret
 20121  005450                     __end_of_IPV4_Send:
 20122                           	opt stack 0
 20123  005450                     PL192:
 20124                           	opt stack 19
 20125  005450  6A0B               	clrf	ETH_Insert@len+1,c
 20126  005452  0E02               	movlw	2
 20127  005454  6E0A               	movwf	ETH_Insert@len,c
 20128  005456  6A0D               	clrf	ETH_Insert@offset+1,c
 20129  005458  0C02               	retlw	2
 20130  00545A                     __end_ofPL192:
 20131                           	opt stack 0
 20132                           tosu	equ	0xFFF
 20133                           tosh	equ	0xFFE
 20134                           tosl	equ	0xFFD
 20135                           pclath	equ	0xFFA
 20136                           tblptru	equ	0xFF8
 20137                           tblptrh	equ	0xFF7
 20138                           tblptrl	equ	0xFF6
 20139                           tablat	equ	0xFF5
 20140                           prodh	equ	0xFF4
 20141                           prodl	equ	0xFF3
 20142                           intcon	equ	0xFF2
 20143                           indf0	equ	0xFEF
 20144                           postinc0	equ	0xFEE
 20145                           fsr0h	equ	0xFEA
 20146                           fsr0l	equ	0xFE9
 20147                           wreg	equ	0xFE8
 20148                           postinc1	equ	0xFE6
 20149                           plusw1	equ	0xFE3
 20150                           fsr1h	equ	0xFE2
 20151                           fsr1l	equ	0xFE1
 20152                           bsr	equ	0xFE0
 20153                           indf2	equ	0xFDF
 20154                           postinc2	equ	0xFDE
 20155                           postdec2	equ	0xFDD
 20156                           plusw2	equ	0xFDB
 20157                           fsr2h	equ	0xFDA
 20158                           fsr2l	equ	0xFD9
 20159                           status	equ	0xFD8
 20160                           
 20161 ;; *************** function _ETH_TxComputeChecksum *****************
 20162 ;; Defined at:
 20163 ;;		line 790 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20164 ;; Parameters:    Size  Location     Type
 20165 ;;  position        2    9[COMRAM] unsigned int 
 20166 ;;  length          2   11[COMRAM] unsigned int 
 20167 ;;  seed            2   13[COMRAM] unsigned int 
 20168 ;; Auto vars:     Size  Location     Type
 20169 ;;  cksm            4   19[COMRAM] unsigned long 
 20170 ;; Return value:  Size  Location     Type
 20171 ;;                  2    9[COMRAM] unsigned int 
 20172 ;; Registers used:
 20173 ;;		wreg, status,2, status,0, cstack
 20174 ;; Tracked objects:
 20175 ;;		On entry : 0/0
 20176 ;;		On exit  : 0/0
 20177 ;;		Unchanged: 0/0
 20178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20179 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20180 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20181 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20182 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20183 ;;Total ram usage:       14 bytes
 20184 ;; Hardware stack levels used:    1
 20185 ;; Hardware stack levels required when called:    6
 20186 ;; This function calls:
 20187 ;;		_ENC28_Bfc
 20188 ;;		_ENC28_Bfs
 20189 ;;		_ENC28_Rcr16
 20190 ;;		_ENC28_Rcr8
 20191 ;;		_ENC28_Wcr16
 20192 ;; This function is called by:
 20193 ;;		_ICMP_EchoReply
 20194 ;;		_IPV4_Send
 20195 ;;		_TCP_Snd
 20196 ;;		_UDP_Send
 20197 ;; This function uses a non-reentrant model
 20198 ;;
 20199                           
 20200                           	psect	text85
 20201  004CE2                     __ptext85:
 20202                           	opt stack 0
 20203  004CE2                     _ETH_TxComputeChecksum:
 20204                           	opt stack 19
 20205                           
 20206                           ;enc28J60.c: 792: uint32_t cksm;
 20207                           ;enc28J60.c: 795: position+= sizeof(Control_Byte);
 20208                           
 20209                           ; BSR set to: 1
 20210                           ;incstack = 0
 20211  004CE2  4A0A               	infsnz	ETH_TxComputeChecksum@position,f,c
 20212  004CE4  2A0B               	incf	ETH_TxComputeChecksum@position+1,f,c
 20213  004CE6                     l8132:
 20214  004CE6  0EFF               	movlw	255
 20215  004CE8  EC33  F02E         	call	_ENC28_Rcr8
 20216  004CEC  6E10               	movwf	??_ETH_TxComputeChecksum& (0+255),c
 20217  004CEE  BA10               	btfsc	??_ETH_TxComputeChecksum,5,c
 20218  004CF0  D7FA               	goto	l8132
 20219                           
 20220                           ;enc28J60.c: 799: ENC28_Wcr16(J60_EDMASTL, ((0x1FFF - (1500)) + position));
 20221  004CF2  0E23               	movlw	35
 20222  004CF4  240A               	addwf	ETH_TxComputeChecksum@position,w,c
 20223  004CF6  6E05               	movwf	ENC28_Wcr16@v,c
 20224  004CF8  0E1A               	movlw	26
 20225  004CFA  200B               	addwfc	ETH_TxComputeChecksum@position+1,w,c
 20226  004CFC  6E06               	movwf	ENC28_Wcr16@v+1,c
 20227  004CFE  0E10               	movlw	16
 20228  004D00  EC9A  F02C         	call	_ENC28_Wcr16
 20229                           
 20230                           ;enc28J60.c: 800: ENC28_Wcr16(J60_EDMANDL, (0x1FFF - (1500)) + position + (length-1));
 20231  004D04  500A               	movf	ETH_TxComputeChecksum@position,w,c
 20232  004D06  240C               	addwf	ETH_TxComputeChecksum@length,w,c
 20233  004D08  6E10               	movwf	??_ETH_TxComputeChecksum& (0+255),c
 20234  004D0A  500B               	movf	ETH_TxComputeChecksum@position+1,w,c
 20235  004D0C  200D               	addwfc	ETH_TxComputeChecksum@length+1,w,c
 20236  004D0E  6E11               	movwf	(??_ETH_TxComputeChecksum+1)& (0+255),c
 20237  004D10  0E22               	movlw	34
 20238  004D12  2410               	addwf	??_ETH_TxComputeChecksum,w,c
 20239  004D14  6E05               	movwf	ENC28_Wcr16@v,c
 20240  004D16  0E1A               	movlw	26
 20241  004D18  2011               	addwfc	??_ETH_TxComputeChecksum+1,w,c
 20242  004D1A  6E06               	movwf	ENC28_Wcr16@v+1,c
 20243  004D1C  0E12               	movlw	18
 20244  004D1E  EC9A  F02C         	call	_ENC28_Wcr16
 20245                           
 20246                           ;enc28J60.c: 802: if (!(ENC28_Rcr8(J60_ECON1) & 0x10))
 20247  004D22  0EFF               	movlw	255
 20248  004D24  EC33  F02E         	call	_ENC28_Rcr8
 20249  004D28  6E10               	movwf	??_ETH_TxComputeChecksum& (0+255),c
 20250  004D2A  B810               	btfsc	??_ETH_TxComputeChecksum,4,c
 20251  004D2C  D04A               	goto	l8152
 20252                           
 20253                           ;enc28J60.c: 803: {
 20254                           ;enc28J60.c: 805: ENC28_Bfs(J60_ECON1, 0x30);
 20255  004D2E  0E30               	movlw	48
 20256  004D30  6E05               	movwf	ENC28_Bfs@bits,c
 20257  004D32  0EFF               	movlw	255
 20258  004D34  EC70  F02E         	call	_ENC28_Bfs
 20259  004D38                     l8138:
 20260  004D38  0EFF               	movlw	255
 20261  004D3A  EC33  F02E         	call	_ENC28_Rcr8
 20262  004D3E  6E10               	movwf	??_ETH_TxComputeChecksum& (0+255),c
 20263  004D40  BA10               	btfsc	??_ETH_TxComputeChecksum,5,c
 20264  004D42  D7FA               	goto	l8138
 20265                           
 20266                           ;enc28J60.c: 807: ENC28_Bfc(J60_ECON1,0x10);
 20267  004D44  ECF5  F025         	call	PL376	;call to abstracted procedure
 20268  004D48  EC61  F02E         	call	_ENC28_Bfc
 20269                           
 20270                           ;enc28J60.c: 809: cksm = ENC28_Rcr16(J60_EDMACSL);
 20271  004D4C  0E16               	movlw	22
 20272  004D4E  EC25  F02C         	call	_ENC28_Rcr16
 20273  004D52  C005  F014         	movff	?_ENC28_Rcr16,ETH_TxComputeChecksum@cksm
 20274  004D56  C006  F015         	movff	?_ENC28_Rcr16+1,ETH_TxComputeChecksum@cksm+1
 20275  004D5A  6A16               	clrf	ETH_TxComputeChecksum@cksm+2,c
 20276  004D5C  6A17               	clrf	ETH_TxComputeChecksum@cksm+3,c
 20277                           
 20278                           ;enc28J60.c: 810: if (seed)
 20279  004D5E  500E               	movf	ETH_TxComputeChecksum@seed,w,c
 20280  004D60  100F               	iorwf	ETH_TxComputeChecksum@seed+1,w,c
 20281  004D62  E01F               	bz	l8150
 20282                           
 20283                           ;enc28J60.c: 811: {
 20284                           ;enc28J60.c: 812: seed=~(seed);
 20285  004D64  1E0E               	comf	ETH_TxComputeChecksum@seed,f,c
 20286  004D66  1E0F               	comf	ETH_TxComputeChecksum@seed+1,f,c
 20287                           
 20288                           ;enc28J60.c: 813: cksm+=seed;
 20289  004D68  500E               	movf	ETH_TxComputeChecksum@seed,w,c
 20290  004D6A  2614               	addwf	ETH_TxComputeChecksum@cksm,f,c
 20291  004D6C  500F               	movf	ETH_TxComputeChecksum@seed+1,w,c
 20292  004D6E  2215               	addwfc	ETH_TxComputeChecksum@cksm+1,f,c
 20293  004D70  0E00               	movlw	0
 20294  004D72  2216               	addwfc	ETH_TxComputeChecksum@cksm+2,f,c
 20295  004D74  2217               	addwfc	ETH_TxComputeChecksum@cksm+3,f,c
 20296                           
 20297                           ;enc28J60.c: 814: while(cksm >> 16)
 20298  004D76  D012               	goto	l648
 20299  004D78                     l8148:
 20300                           
 20301                           ;enc28J60.c: 815: {
 20302                           ;enc28J60.c: 816: cksm = (cksm & 0x0FFFF) + (cksm>>16);
 20303  004D78  5014               	movf	ETH_TxComputeChecksum@cksm,w,c
 20304  004D7A  6E10               	movwf	??_ETH_TxComputeChecksum& (0+255),c
 20305  004D7C  5015               	movf	ETH_TxComputeChecksum@cksm+1,w,c
 20306  004D7E  6E11               	movwf	(??_ETH_TxComputeChecksum+1)& (0+255),c
 20307  004D80  6A12               	clrf	(??_ETH_TxComputeChecksum+2)& (0+255),c
 20308  004D82  6A13               	clrf	(??_ETH_TxComputeChecksum+3)& (0+255),c
 20309  004D84  5016               	movf	ETH_TxComputeChecksum@cksm+2,w,c
 20310  004D86  2410               	addwf	??_ETH_TxComputeChecksum,w,c
 20311  004D88  6E14               	movwf	ETH_TxComputeChecksum@cksm,c
 20312  004D8A  5017               	movf	ETH_TxComputeChecksum@cksm+3,w,c
 20313  004D8C  2011               	addwfc	??_ETH_TxComputeChecksum+1,w,c
 20314  004D8E  6E15               	movwf	ETH_TxComputeChecksum@cksm+1,c
 20315  004D90  0E00               	movlw	0
 20316  004D92  2012               	addwfc	??_ETH_TxComputeChecksum+2,w,c
 20317  004D94  6E16               	movwf	ETH_TxComputeChecksum@cksm+2,c
 20318  004D96  0E00               	movlw	0
 20319  004D98  2013               	addwfc	??_ETH_TxComputeChecksum+3,w,c
 20320  004D9A  6E17               	movwf	ETH_TxComputeChecksum@cksm+3,c
 20321  004D9C                     l648:
 20322  004D9C  5016               	movf	ETH_TxComputeChecksum@cksm+2,w,c
 20323  004D9E  1017               	iorwf	ETH_TxComputeChecksum@cksm+3,w,c
 20324  004DA0  E1EB               	bnz	l8148
 20325  004DA2                     l8150:
 20326                           
 20327                           ;enc28J60.c: 817: }
 20328                           ;enc28J60.c: 818: }
 20329                           ;enc28J60.c: 819: cksm = ((((uint16_t)cksm & (uint16_t)0xFF00) >> 8) | (((uint16_t)cksm 
      +                          & (uint16_t)0x00FF) << 8));
 20330  004DA2  5014               	movf	ETH_TxComputeChecksum@cksm,w,c
 20331  004DA4  6E11               	movwf	(??_ETH_TxComputeChecksum+1)& (0+255),c
 20332  004DA6  6A10               	clrf	??_ETH_TxComputeChecksum& (0+255),c
 20333  004DA8  5015               	movf	ETH_TxComputeChecksum@cksm+1,w,c
 20334  004DAA  6E12               	movwf	(??_ETH_TxComputeChecksum+2)& (0+255),c
 20335  004DAC  6A13               	clrf	(??_ETH_TxComputeChecksum+3)& (0+255),c
 20336  004DAE  5010               	movf	??_ETH_TxComputeChecksum,w,c
 20337  004DB0  1212               	iorwf	??_ETH_TxComputeChecksum+2,f,c
 20338  004DB2  5011               	movf	??_ETH_TxComputeChecksum+1,w,c
 20339  004DB4  1213               	iorwf	??_ETH_TxComputeChecksum+3,f,c
 20340  004DB6  C012  F014         	movff	??_ETH_TxComputeChecksum+2,ETH_TxComputeChecksum@cksm
 20341  004DBA  C013  F015         	movff	??_ETH_TxComputeChecksum+3,ETH_TxComputeChecksum@cksm+1
 20342  004DBE  6A16               	clrf	ETH_TxComputeChecksum@cksm+2,c
 20343  004DC0  6A17               	clrf	ETH_TxComputeChecksum@cksm+3,c
 20344  004DC2                     l8152:
 20345                           
 20346                           ;enc28J60.c: 820: }
 20347                           ;enc28J60.c: 821: return cksm;
 20348  004DC2  C014  F00A         	movff	ETH_TxComputeChecksum@cksm,?_ETH_TxComputeChecksum
 20349  004DC6  C015  F00B         	movff	ETH_TxComputeChecksum@cksm+1,?_ETH_TxComputeChecksum+1
 20350  004DCA  0012               	return		;funcret
 20351  004DCC                     __end_of_ETH_TxComputeChecksum:
 20352                           	opt stack 0
 20353                           tosu	equ	0xFFF
 20354                           tosh	equ	0xFFE
 20355                           tosl	equ	0xFFD
 20356                           pclath	equ	0xFFA
 20357                           tblptru	equ	0xFF8
 20358                           tblptrh	equ	0xFF7
 20359                           tblptrl	equ	0xFF6
 20360                           tablat	equ	0xFF5
 20361                           prodh	equ	0xFF4
 20362                           prodl	equ	0xFF3
 20363                           intcon	equ	0xFF2
 20364                           indf0	equ	0xFEF
 20365                           postinc0	equ	0xFEE
 20366                           fsr0h	equ	0xFEA
 20367                           fsr0l	equ	0xFE9
 20368                           wreg	equ	0xFE8
 20369                           postinc1	equ	0xFE6
 20370                           plusw1	equ	0xFE3
 20371                           fsr1h	equ	0xFE2
 20372                           fsr1l	equ	0xFE1
 20373                           bsr	equ	0xFE0
 20374                           indf2	equ	0xFDF
 20375                           postinc2	equ	0xFDE
 20376                           postdec2	equ	0xFDD
 20377                           plusw2	equ	0xFDB
 20378                           fsr2h	equ	0xFDA
 20379                           fsr2l	equ	0xFD9
 20380                           status	equ	0xFD8
 20381                           
 20382 ;; *************** function _ENC28_Rcr8 *****************
 20383 ;; Defined at:
 20384 ;;		line 270 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20385 ;; Parameters:    Size  Location     Type
 20386 ;;  a               1    wreg     enum E6625
 20387 ;; Auto vars:     Size  Location     Type
 20388 ;;  a               1    5[COMRAM] enum E6625
 20389 ;;  v               1    4[COMRAM] unsigned char 
 20390 ;; Return value:  Size  Location     Type
 20391 ;;                  1    wreg      unsigned char 
 20392 ;; Registers used:
 20393 ;;		wreg, status,2, status,0, cstack
 20394 ;; Tracked objects:
 20395 ;;		On entry : 0/0
 20396 ;;		On exit  : 0/0
 20397 ;;		Unchanged: 0/0
 20398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20403 ;;Total ram usage:        2 bytes
 20404 ;; Hardware stack levels used:    1
 20405 ;; Hardware stack levels required when called:    5
 20406 ;; This function calls:
 20407 ;;		_ENC28_BankSel
 20408 ;;		_SPI_ExchangeByte
 20409 ;; This function is called by:
 20410 ;;		_ETH_Init
 20411 ;;		_ETH_EventHandler
 20412 ;;		_ENC28_PhyWrite
 20413 ;;		_ENC28_PhyRead
 20414 ;;		_ETH_WriteStart
 20415 ;;		_ETH_Copy
 20416 ;;		_ETH_TxComputeChecksum
 20417 ;;		_ETH_GetMAC
 20418 ;; This function uses a non-reentrant model
 20419 ;;
 20420                           
 20421                           	psect	text86
 20422  005C66                     __ptext86:
 20423                           	opt stack 0
 20424  005C66                     _ENC28_Rcr8:
 20425                           	opt stack 22
 20426                           
 20427                           ;incstack = 0
 20428                           ;ENC28_Rcr8@a stored from wreg
 20429  005C66  6E06               	movwf	ENC28_Rcr8@a,c
 20430                           
 20431                           ;enc28J60.c: 272: uint8_t v;
 20432                           ;enc28J60.c: 274: ENC28_BankSel(a);
 20433  005C68  5006               	movf	ENC28_Rcr8@a,w,c
 20434  005C6A  ECE2  F02B         	call	_ENC28_BankSel
 20435  005C6E  968C               	bcf	3980,3,c	;volatile
 20436                           
 20437                           ;enc28J60.c: 276: SPI_ExchangeByte(rcr_inst | (a & 0x1F));
 20438  005C70  5006               	movf	ENC28_Rcr8@a,w,c
 20439  005C72  0B1F               	andlw	31
 20440  005C74  EC42  F02F         	call	_SPI_ExchangeByte
 20441                           
 20442                           ;enc28J60.c: 277: v = SPI_ExchangeByte(0);
 20443  005C78  0E00               	movlw	0
 20444  005C7A  EC42  F02F         	call	_SPI_ExchangeByte
 20445  005C7E  6E05               	movwf	ENC28_Rcr8@v,c
 20446  005C80  868C               	bsf	3980,3,c	;volatile
 20447                           
 20448                           ;enc28J60.c: 280: return v;
 20449  005C82  5005               	movf	ENC28_Rcr8@v,w,c
 20450  005C84  0012               	return		;funcret
 20451  005C86                     __end_of_ENC28_Rcr8:
 20452                           	opt stack 0
 20453                           tosu	equ	0xFFF
 20454                           tosh	equ	0xFFE
 20455                           tosl	equ	0xFFD
 20456                           pclath	equ	0xFFA
 20457                           tblptru	equ	0xFF8
 20458                           tblptrh	equ	0xFF7
 20459                           tblptrl	equ	0xFF6
 20460                           tablat	equ	0xFF5
 20461                           prodh	equ	0xFF4
 20462                           prodl	equ	0xFF3
 20463                           intcon	equ	0xFF2
 20464                           indf0	equ	0xFEF
 20465                           postinc0	equ	0xFEE
 20466                           fsr0h	equ	0xFEA
 20467                           fsr0l	equ	0xFE9
 20468                           wreg	equ	0xFE8
 20469                           postinc1	equ	0xFE6
 20470                           plusw1	equ	0xFE3
 20471                           fsr1h	equ	0xFE2
 20472                           fsr1l	equ	0xFE1
 20473                           bsr	equ	0xFE0
 20474                           indf2	equ	0xFDF
 20475                           postinc2	equ	0xFDE
 20476                           postdec2	equ	0xFDD
 20477                           plusw2	equ	0xFDB
 20478                           fsr2h	equ	0xFDA
 20479                           fsr2l	equ	0xFD9
 20480                           status	equ	0xFD8
 20481                           
 20482 ;; *************** function _ENC28_Bfc *****************
 20483 ;; Defined at:
 20484 ;;		line 362 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20485 ;; Parameters:    Size  Location     Type
 20486 ;;  a               1    wreg     enum E6625
 20487 ;;  bits            1    4[COMRAM] unsigned char 
 20488 ;; Auto vars:     Size  Location     Type
 20489 ;;  a               1    5[COMRAM] enum E6625
 20490 ;; Return value:  Size  Location     Type
 20491 ;;		None               void
 20492 ;; Registers used:
 20493 ;;		wreg, status,2, status,0, cstack
 20494 ;; Tracked objects:
 20495 ;;		On entry : 0/1
 20496 ;;		On exit  : 0/0
 20497 ;;		Unchanged: 0/0
 20498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20499 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20503 ;;Total ram usage:        2 bytes
 20504 ;; Hardware stack levels used:    1
 20505 ;; Hardware stack levels required when called:    5
 20506 ;; This function calls:
 20507 ;;		_ENC28_BankSel
 20508 ;;		_SPI_ExchangeByte
 20509 ;; This function is called by:
 20510 ;;		_ETH_EventHandler
 20511 ;;		_ENC28_PhyRead
 20512 ;;		_ETH_Copy
 20513 ;;		_ETH_TxComputeChecksum
 20514 ;; This function uses a non-reentrant model
 20515 ;;
 20516                           
 20517                           	psect	text87
 20518  005CC2                     __ptext87:
 20519                           	opt stack 0
 20520  005CC2                     _ENC28_Bfc:
 20521                           	opt stack 22
 20522                           
 20523                           ;incstack = 0
 20524                           ;ENC28_Bfc@a stored from wreg
 20525  005CC2  6E06               	movwf	ENC28_Bfc@a,c
 20526                           
 20527                           ;enc28J60.c: 364: ENC28_BankSel(a);
 20528  005CC4  5006               	movf	ENC28_Bfc@a,w,c
 20529  005CC6  ECE2  F02B         	call	_ENC28_BankSel
 20530  005CCA  968C               	bcf	3980,3,c	;volatile
 20531                           
 20532                           ;enc28J60.c: 366: SPI_ExchangeByte(bfc_inst | (a & 0x1F));
 20533  005CCC  5006               	movf	ENC28_Bfc@a,w,c
 20534  005CCE  0B1F               	andlw	31
 20535  005CD0  09A0               	iorlw	160
 20536  005CD2  EC42  F02F         	call	_SPI_ExchangeByte
 20537                           
 20538                           ;enc28J60.c: 367: SPI_ExchangeByte(bits);
 20539  005CD6  5005               	movf	ENC28_Bfc@bits,w,c
 20540  005CD8  EC42  F02F         	call	_SPI_ExchangeByte
 20541  005CDC  868C               	bsf	3980,3,c	;volatile
 20542  005CDE  0012               	return		;funcret
 20543  005CE0                     __end_of_ENC28_Bfc:
 20544                           	opt stack 0
 20545                           tosu	equ	0xFFF
 20546                           tosh	equ	0xFFE
 20547                           tosl	equ	0xFFD
 20548                           pclath	equ	0xFFA
 20549                           tblptru	equ	0xFF8
 20550                           tblptrh	equ	0xFF7
 20551                           tblptrl	equ	0xFF6
 20552                           tablat	equ	0xFF5
 20553                           prodh	equ	0xFF4
 20554                           prodl	equ	0xFF3
 20555                           intcon	equ	0xFF2
 20556                           indf0	equ	0xFEF
 20557                           postinc0	equ	0xFEE
 20558                           fsr0h	equ	0xFEA
 20559                           fsr0l	equ	0xFE9
 20560                           wreg	equ	0xFE8
 20561                           postinc1	equ	0xFE6
 20562                           plusw1	equ	0xFE3
 20563                           fsr1h	equ	0xFE2
 20564                           fsr1l	equ	0xFE1
 20565                           bsr	equ	0xFE0
 20566                           indf2	equ	0xFDF
 20567                           postinc2	equ	0xFDE
 20568                           postdec2	equ	0xFDD
 20569                           plusw2	equ	0xFDB
 20570                           fsr2h	equ	0xFDA
 20571                           fsr2l	equ	0xFD9
 20572                           status	equ	0xFD8
 20573                           
 20574 ;; *************** function _ETH_Send *****************
 20575 ;; Defined at:
 20576 ;;		line 620 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20577 ;; Parameters:    Size  Location     Type
 20578 ;;		None
 20579 ;; Auto vars:     Size  Location     Type
 20580 ;;		None
 20581 ;; Return value:  Size  Location     Type
 20582 ;;                  1    wreg      enum E7076
 20583 ;; Registers used:
 20584 ;;		wreg, status,2, status,0, cstack
 20585 ;; Tracked objects:
 20586 ;;		On entry : 0/1
 20587 ;;		On exit  : F/1
 20588 ;;		Unchanged: 0/0
 20589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20594 ;;Total ram usage:        0 bytes
 20595 ;; Hardware stack levels used:    1
 20596 ;; Hardware stack levels required when called:    6
 20597 ;; This function calls:
 20598 ;;		_ENC28_Bfs
 20599 ;;		_ENC28_Wcr16
 20600 ;; This function is called by:
 20601 ;;		_ARPV4_Packet
 20602 ;;		_ARPV4_Request
 20603 ;;		_IPV4_Send
 20604 ;; This function uses a non-reentrant model
 20605 ;;
 20606                           
 20607                           	psect	text88
 20608  0059FA                     __ptext88:
 20609                           	opt stack 0
 20610  0059FA                     _ETH_Send:
 20611                           	opt stack 18
 20612                           
 20613                           ;enc28J60.c: 622: ENC28_Wcr16(J60_ETXNDL,(0x1FFF - (1500))+TXPacketSize);
 20614                           
 20615                           ;incstack = 0
 20616  0059FA  0E23               	movlw	35
 20617  0059FC  0101               	movlb	1	; () banked
 20618  0059FE  25D3               	addwf	_TXPacketSize& (0+255),w,b
 20619  005A00  6E05               	movwf	ENC28_Wcr16@v,c
 20620  005A02  0E1A               	movlw	26
 20621  005A04  21D4               	addwfc	(_TXPacketSize+1)& (0+255),w,b
 20622  005A06  6E06               	movwf	ENC28_Wcr16@v+1,c
 20623  005A08  0E06               	movlw	6
 20624  005A0A  EC9A  F02C         	call	_ENC28_Wcr16
 20625                           
 20626                           ;enc28J60.c: 623: if (!ethData.up)
 20627  005A0E  0101               	movlb	1	; () banked
 20628  005A10  A5B5               	btfss	_ethData& (0+255),2,b	;volatile
 20629                           
 20630                           ; BSR set to: 1
 20631                           ;enc28J60.c: 624: {
 20632                           ;enc28J60.c: 625: return LINK_NOT_FOUND;
 20633  005A12  0C02               	retlw	2
 20634                           
 20635                           ; BSR set to: 1
 20636                           ;enc28J60.c: 626: }
 20637                           ;enc28J60.c: 627: if(!ethData.bufferBusy)
 20638  005A14  ABB5               	btfss	_ethData& (0+255),5,b	;volatile
 20639                           
 20640                           ; BSR set to: 1
 20641                           ;enc28J60.c: 628: {
 20642                           ;enc28J60.c: 629: return BUFFER_BUSY;
 20643  005A16  0C03               	retlw	3
 20644                           
 20645                           ; BSR set to: 1
 20646                           ;enc28J60.c: 630: }
 20647                           ;enc28J60.c: 631: ENC28_Bfs(J60_ECON1, 0x08);
 20648  005A18  0E08               	movlw	8
 20649  005A1A  6E05               	movwf	ENC28_Bfs@bits,c
 20650  005A1C  0EFF               	movlw	255
 20651  005A1E  EC70  F02E         	call	_ENC28_Bfs
 20652                           
 20653                           ;enc28J60.c: 632: ethData.bufferBusy = 0;
 20654  005A22  0101               	movlb	1	; () banked
 20655  005A24  9BB5               	bcf	_ethData& (0+255),5,b	;volatile
 20656                           
 20657                           ; BSR set to: 1
 20658                           
 20659                           ; BSR set to: 1
 20660                           ;enc28J60.c: 634: return SUCCESS;
 20661  005A26  0C01               	retlw	1	;funcret
 20662  005A28                     __end_of_ETH_Send:
 20663                           	opt stack 0
 20664                           tosu	equ	0xFFF
 20665                           tosh	equ	0xFFE
 20666                           tosl	equ	0xFFD
 20667                           pclath	equ	0xFFA
 20668                           tblptru	equ	0xFF8
 20669                           tblptrh	equ	0xFF7
 20670                           tblptrl	equ	0xFF6
 20671                           tablat	equ	0xFF5
 20672                           prodh	equ	0xFF4
 20673                           prodl	equ	0xFF3
 20674                           intcon	equ	0xFF2
 20675                           indf0	equ	0xFEF
 20676                           postinc0	equ	0xFEE
 20677                           fsr0h	equ	0xFEA
 20678                           fsr0l	equ	0xFE9
 20679                           wreg	equ	0xFE8
 20680                           postinc1	equ	0xFE6
 20681                           plusw1	equ	0xFE3
 20682                           fsr1h	equ	0xFE2
 20683                           fsr1l	equ	0xFE1
 20684                           bsr	equ	0xFE0
 20685                           indf2	equ	0xFDF
 20686                           postinc2	equ	0xFDE
 20687                           postdec2	equ	0xFDD
 20688                           plusw2	equ	0xFDB
 20689                           fsr2h	equ	0xFDA
 20690                           fsr2l	equ	0xFD9
 20691                           status	equ	0xFD8
 20692                           
 20693 ;; *************** function _ENC28_Bfs *****************
 20694 ;; Defined at:
 20695 ;;		line 348 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20696 ;; Parameters:    Size  Location     Type
 20697 ;;  a               1    wreg     enum E6625
 20698 ;;  bits            1    4[COMRAM] unsigned char 
 20699 ;; Auto vars:     Size  Location     Type
 20700 ;;  a               1    5[COMRAM] enum E6625
 20701 ;; Return value:  Size  Location     Type
 20702 ;;		None               void
 20703 ;; Registers used:
 20704 ;;		wreg, status,2, status,0, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : 0/1
 20707 ;;		On exit  : 0/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20710 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;Total ram usage:        2 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:    5
 20717 ;; This function calls:
 20718 ;;		_ENC28_BankSel
 20719 ;;		_SPI_ExchangeByte
 20720 ;; This function is called by:
 20721 ;;		_ETH_Init
 20722 ;;		_ETH_EventHandler
 20723 ;;		_ENC28_PhyRead
 20724 ;;		_ETH_Send
 20725 ;;		_ETH_Flush
 20726 ;;		_ETH_Copy
 20727 ;;		_ETH_TxComputeChecksum
 20728 ;; This function uses a non-reentrant model
 20729 ;;
 20730                           
 20731                           	psect	text89
 20732  005CE0                     __ptext89:
 20733                           	opt stack 0
 20734  005CE0                     _ENC28_Bfs:
 20735                           	opt stack 22
 20736                           
 20737                           ; BSR set to: 1
 20738                           ;incstack = 0
 20739                           ;ENC28_Bfs@a stored from wreg
 20740  005CE0  6E06               	movwf	ENC28_Bfs@a,c
 20741                           
 20742                           ;enc28J60.c: 350: ENC28_BankSel(a);
 20743  005CE2  5006               	movf	ENC28_Bfs@a,w,c
 20744  005CE4  ECE2  F02B         	call	_ENC28_BankSel
 20745  005CE8  968C               	bcf	3980,3,c	;volatile
 20746                           
 20747                           ;enc28J60.c: 352: SPI_ExchangeByte(bfs_inst | (a & 0x1F));
 20748  005CEA  5006               	movf	ENC28_Bfs@a,w,c
 20749  005CEC  0B1F               	andlw	31
 20750  005CEE  0980               	iorlw	128
 20751  005CF0  EC42  F02F         	call	_SPI_ExchangeByte
 20752                           
 20753                           ;enc28J60.c: 353: SPI_ExchangeByte(bits);
 20754  005CF4  5005               	movf	ENC28_Bfs@bits,w,c
 20755  005CF6  EC42  F02F         	call	_SPI_ExchangeByte
 20756  005CFA  868C               	bsf	3980,3,c	;volatile
 20757  005CFC  0012               	return		;funcret
 20758  005CFE                     __end_of_ENC28_Bfs:
 20759                           	opt stack 0
 20760                           tosu	equ	0xFFF
 20761                           tosh	equ	0xFFE
 20762                           tosl	equ	0xFFD
 20763                           pclath	equ	0xFFA
 20764                           tblptru	equ	0xFF8
 20765                           tblptrh	equ	0xFF7
 20766                           tblptrl	equ	0xFF6
 20767                           tablat	equ	0xFF5
 20768                           prodh	equ	0xFF4
 20769                           prodl	equ	0xFF3
 20770                           intcon	equ	0xFF2
 20771                           indf0	equ	0xFEF
 20772                           postinc0	equ	0xFEE
 20773                           fsr0h	equ	0xFEA
 20774                           fsr0l	equ	0xFE9
 20775                           wreg	equ	0xFE8
 20776                           postinc1	equ	0xFE6
 20777                           plusw1	equ	0xFE3
 20778                           fsr1h	equ	0xFE2
 20779                           fsr1l	equ	0xFE1
 20780                           bsr	equ	0xFE0
 20781                           indf2	equ	0xFDF
 20782                           postinc2	equ	0xFDE
 20783                           postdec2	equ	0xFDD
 20784                           plusw2	equ	0xFDB
 20785                           fsr2h	equ	0xFDA
 20786                           fsr2l	equ	0xFD9
 20787                           status	equ	0xFD8
 20788                           
 20789 ;; *************** function _ETH_Insert *****************
 20790 ;; Defined at:
 20791 ;;		line 676 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20792 ;; Parameters:    Size  Location     Type
 20793 ;;  data            1    wreg     PTR unsigned char 
 20794 ;;		 -> UDP_Send@cksm(2), UDP_Send@udpLength(2), TCP_Snd@cksm(2), IPV4_Send@cksm(2), 
 20795 ;;		 -> IPV4_Send@totalLength(2), ICMP_EchoReply@cksm(2), 
 20796 ;;  len             2    9[COMRAM] unsigned int 
 20797 ;;  offset          2   11[COMRAM] unsigned int 
 20798 ;; Auto vars:     Size  Location     Type
 20799 ;;  data            1   15[COMRAM] PTR unsigned char 
 20800 ;;		 -> UDP_Send@cksm(2), UDP_Send@udpLength(2), TCP_Snd@cksm(2), IPV4_Send@cksm(2), 
 20801 ;;		 -> IPV4_Send@totalLength(2), ICMP_EchoReply@cksm(2), 
 20802 ;;  current_tx_p    2   13[COMRAM] unsigned int 
 20803 ;; Return value:  Size  Location     Type
 20804 ;;		None               void
 20805 ;; Registers used:
 20806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20807 ;; Tracked objects:
 20808 ;;		On entry : 0/0
 20809 ;;		On exit  : 0/0
 20810 ;;		Unchanged: 0/0
 20811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20816 ;;Total ram usage:        7 bytes
 20817 ;; Hardware stack levels used:    1
 20818 ;; Hardware stack levels required when called:    6
 20819 ;; This function calls:
 20820 ;;		_ENC28_Rcr16
 20821 ;;		_ENC28_Wcr16
 20822 ;;		_SPI_ExchangeByte
 20823 ;; This function is called by:
 20824 ;;		_ICMP_EchoReply
 20825 ;;		_IPV4_Send
 20826 ;;		_TCP_Snd
 20827 ;;		_UDP_Send
 20828 ;; This function uses a non-reentrant model
 20829 ;;
 20830                           
 20831                           	psect	text90
 20832  00545A                     __ptext90:
 20833                           	opt stack 0
 20834  00545A                     _ETH_Insert:
 20835                           	opt stack 19
 20836                           
 20837                           ;incstack = 0
 20838                           ;ETH_Insert@data stored from wreg
 20839  00545A  6E10               	movwf	ETH_Insert@data,c
 20840                           
 20841                           ;enc28J60.c: 679: offset+=sizeof(Control_Byte);
 20842  00545C  4A0C               	infsnz	ETH_Insert@offset,f,c
 20843  00545E  2A0D               	incf	ETH_Insert@offset+1,f,c
 20844                           
 20845                           ;enc28J60.c: 681: current_tx_pointer = ENC28_Rcr16(J60_EWRPTL);
 20846  005460  0E02               	movlw	2
 20847  005462  EC25  F02C         	call	_ENC28_Rcr16
 20848  005466  C005  F00E         	movff	?_ENC28_Rcr16,ETH_Insert@current_tx_pointer
 20849  00546A  C006  F00F         	movff	?_ENC28_Rcr16+1,ETH_Insert@current_tx_pointer+1
 20850                           
 20851                           ;enc28J60.c: 682: ENC28_Wcr16(J60_EWRPTL, (0x1FFF - (1500))+offset);
 20852  00546E  0E23               	movlw	35
 20853  005470  240C               	addwf	ETH_Insert@offset,w,c
 20854  005472  6E05               	movwf	ENC28_Wcr16@v,c
 20855  005474  0E1A               	movlw	26
 20856  005476  200D               	addwfc	ETH_Insert@offset+1,w,c
 20857  005478  6E06               	movwf	ENC28_Wcr16@v+1,c
 20858  00547A  0E02               	movlw	2
 20859  00547C  EC9A  F02C         	call	_ENC28_Wcr16
 20860                           
 20861                           ;enc28J60.c: 683: while (len--)
 20862  005480  D00C               	goto	l8126
 20863  005482                     l605:
 20864  005482  968C               	bcf	3980,3,c	;volatile
 20865                           
 20866                           ;enc28J60.c: 686: SPI_ExchangeByte(wbm_inst);
 20867  005484  0E7A               	movlw	122
 20868  005486  EC42  F02F         	call	_SPI_ExchangeByte
 20869                           
 20870                           ;enc28J60.c: 687: SPI_ExchangeByte(*data++);
 20871  00548A  5010               	movf	ETH_Insert@data,w,c
 20872  00548C  6ED9               	movwf	fsr2l,c
 20873  00548E  6ADA               	clrf	fsr2h,c
 20874  005490  50DF               	movf	indf2,w,c
 20875  005492  EC42  F02F         	call	_SPI_ExchangeByte
 20876  005496  2A10               	incf	ETH_Insert@data,f,c
 20877  005498  868C               	bsf	3980,3,c	;volatile
 20878  00549A                     l8126:
 20879  00549A  060A               	decf	ETH_Insert@len,f,c
 20880  00549C  A0D8               	btfss	status,0,c
 20881  00549E  060B               	decf	ETH_Insert@len+1,f,c
 20882  0054A0  280A               	incf	ETH_Insert@len,w,c
 20883  0054A2  E1EF               	bnz	l605
 20884  0054A4  280B               	incf	ETH_Insert@len+1,w,c
 20885  0054A6  E1ED               	bnz	l605
 20886                           
 20887                           ;enc28J60.c: 689: }
 20888                           ;enc28J60.c: 690: ENC28_Wcr16(J60_EWRPTL, current_tx_pointer);
 20889  0054A8  C00E  F005         	movff	ETH_Insert@current_tx_pointer,ENC28_Wcr16@v
 20890  0054AC  C00F  F006         	movff	ETH_Insert@current_tx_pointer+1,ENC28_Wcr16@v+1
 20891  0054B0  0E02               	movlw	2
 20892  0054B2  EF9A  F02C         	goto	_ENC28_Wcr16
 20893  0054B6                     __end_of_ETH_Insert:
 20894                           	opt stack 0
 20895                           tosu	equ	0xFFF
 20896                           tosh	equ	0xFFE
 20897                           tosl	equ	0xFFD
 20898                           pclath	equ	0xFFA
 20899                           tblptru	equ	0xFF8
 20900                           tblptrh	equ	0xFF7
 20901                           tblptrl	equ	0xFF6
 20902                           tablat	equ	0xFF5
 20903                           prodh	equ	0xFF4
 20904                           prodl	equ	0xFF3
 20905                           intcon	equ	0xFF2
 20906                           indf0	equ	0xFEF
 20907                           postinc0	equ	0xFEE
 20908                           fsr0h	equ	0xFEA
 20909                           fsr0l	equ	0xFE9
 20910                           wreg	equ	0xFE8
 20911                           postinc1	equ	0xFE6
 20912                           plusw1	equ	0xFE3
 20913                           fsr1h	equ	0xFE2
 20914                           fsr1l	equ	0xFE1
 20915                           bsr	equ	0xFE0
 20916                           indf2	equ	0xFDF
 20917                           postinc2	equ	0xFDE
 20918                           postdec2	equ	0xFDD
 20919                           plusw2	equ	0xFDB
 20920                           fsr2h	equ	0xFDA
 20921                           fsr2l	equ	0xFD9
 20922                           status	equ	0xFD8
 20923                           
 20924 ;; *************** function _ENC28_Wcr16 *****************
 20925 ;; Defined at:
 20926 ;;		line 327 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 20927 ;; Parameters:    Size  Location     Type
 20928 ;;  a               1    wreg     enum E6625
 20929 ;;  v               2    4[COMRAM] unsigned int 
 20930 ;; Auto vars:     Size  Location     Type
 20931 ;;  a               1    6[COMRAM] enum E6625
 20932 ;; Return value:  Size  Location     Type
 20933 ;;		None               void
 20934 ;; Registers used:
 20935 ;;		wreg, status,2, status,0, cstack
 20936 ;; Tracked objects:
 20937 ;;		On entry : 0/2
 20938 ;;		On exit  : 0/0
 20939 ;;		Unchanged: 0/0
 20940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20944 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20945 ;;Total ram usage:        3 bytes
 20946 ;; Hardware stack levels used:    1
 20947 ;; Hardware stack levels required when called:    5
 20948 ;; This function calls:
 20949 ;;		_ENC28_BankSel
 20950 ;;		_SPI_ExchangeByte
 20951 ;; This function is called by:
 20952 ;;		_ETH_Init
 20953 ;;		_ETH_EventHandler
 20954 ;;		_ETH_NextPacketUpdate
 20955 ;;		_ENC28_PhyWrite
 20956 ;;		_ETH_WriteStart
 20957 ;;		_ETH_Send
 20958 ;;		_ETH_Dump
 20959 ;;		_ETH_Flush
 20960 ;;		_ETH_Insert
 20961 ;;		_ETH_Copy
 20962 ;;		_ETH_TxComputeChecksum
 20963 ;;		_ETH_RxComputeChecksum
 20964 ;; This function uses a non-reentrant model
 20965 ;;
 20966                           
 20967                           	psect	text91
 20968  005934                     __ptext91:
 20969                           	opt stack 0
 20970  005934                     _ENC28_Wcr16:
 20971                           	opt stack 19
 20972                           
 20973                           ;incstack = 0
 20974                           ;ENC28_Wcr16@a stored from wreg
 20975  005934  6E07               	movwf	ENC28_Wcr16@a,c
 20976                           
 20977                           ;enc28J60.c: 329: ENC28_BankSel(a);
 20978  005936  5007               	movf	ENC28_Wcr16@a,w,c
 20979  005938  ECE2  F02B         	call	_ENC28_BankSel
 20980                           
 20981                           ;enc28J60.c: 330: a &= 0x1F;
 20982  00593C  0E1F               	movlw	31
 20983  00593E  1607               	andwf	ENC28_Wcr16@a,f,c
 20984  005940  968C               	bcf	3980,3,c	;volatile
 20985                           
 20986                           ;enc28J60.c: 332: SPI_ExchangeByte(wcr_inst | (a));
 20987  005942  5007               	movf	ENC28_Wcr16@a,w,c
 20988  005944  0940               	iorlw	64
 20989  005946  EC42  F02F         	call	_SPI_ExchangeByte
 20990                           
 20991                           ;enc28J60.c: 333: SPI_ExchangeByte(((char *) &v)[0]);
 20992  00594A  5005               	movf	ENC28_Wcr16@v,w,c
 20993  00594C  EC42  F02F         	call	_SPI_ExchangeByte
 20994  005950  868C               	bsf	3980,3,c	;volatile
 20995                           
 20996                           ;enc28J60.c: 335: __nop();
 20997  005952  F000               	nop	
 20998                           
 20999                           ;enc28J60.c: 336: __nop();
 21000  005954  F000               	nop	
 21001  005956  968C               	bcf	3980,3,c	;volatile
 21002                           
 21003                           ;enc28J60.c: 338: SPI_ExchangeByte(wcr_inst | (a + 1));
 21004  005958  2807               	incf	ENC28_Wcr16@a,w,c
 21005  00595A  0940               	iorlw	64
 21006  00595C  EC42  F02F         	call	_SPI_ExchangeByte
 21007                           
 21008                           ;enc28J60.c: 339: SPI_ExchangeByte(((char *) &v)[1]);
 21009  005960  5006               	movf	ENC28_Wcr16@v+1,w,c
 21010  005962  EC42  F02F         	call	_SPI_ExchangeByte
 21011  005966  868C               	bsf	3980,3,c	;volatile
 21012  005968  0012               	return		;funcret
 21013  00596A                     __end_of_ENC28_Wcr16:
 21014                           	opt stack 0
 21015                           tosu	equ	0xFFF
 21016                           tosh	equ	0xFFE
 21017                           tosl	equ	0xFFD
 21018                           pclath	equ	0xFFA
 21019                           tblptru	equ	0xFF8
 21020                           tblptrh	equ	0xFF7
 21021                           tblptrl	equ	0xFF6
 21022                           tablat	equ	0xFF5
 21023                           prodh	equ	0xFF4
 21024                           prodl	equ	0xFF3
 21025                           intcon	equ	0xFF2
 21026                           indf0	equ	0xFEF
 21027                           postinc0	equ	0xFEE
 21028                           fsr0h	equ	0xFEA
 21029                           fsr0l	equ	0xFE9
 21030                           wreg	equ	0xFE8
 21031                           postinc1	equ	0xFE6
 21032                           plusw1	equ	0xFE3
 21033                           fsr1h	equ	0xFE2
 21034                           fsr1l	equ	0xFE1
 21035                           bsr	equ	0xFE0
 21036                           indf2	equ	0xFDF
 21037                           postinc2	equ	0xFDE
 21038                           postdec2	equ	0xFDD
 21039                           plusw2	equ	0xFDB
 21040                           fsr2h	equ	0xFDA
 21041                           fsr2l	equ	0xFD9
 21042                           status	equ	0xFD8
 21043                           
 21044 ;; *************** function _ETH_GetByteCount *****************
 21045 ;; Defined at:
 21046 ;;		line 885 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 21047 ;; Parameters:    Size  Location     Type
 21048 ;;		None
 21049 ;; Auto vars:     Size  Location     Type
 21050 ;;  wptr            2   11[COMRAM] unsigned int 
 21051 ;; Return value:  Size  Location     Type
 21052 ;;                  2    9[COMRAM] unsigned int 
 21053 ;; Registers used:
 21054 ;;		wreg, status,2, status,0, cstack
 21055 ;; Tracked objects:
 21056 ;;		On entry : 0/0
 21057 ;;		On exit  : F/1
 21058 ;;		Unchanged: 0/0
 21059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21063 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21064 ;;Total ram usage:        4 bytes
 21065 ;; Hardware stack levels used:    1
 21066 ;; Hardware stack levels required when called:    6
 21067 ;; This function calls:
 21068 ;;		_ENC28_Rcr16
 21069 ;; This function is called by:
 21070 ;;		_UDP_Send
 21071 ;; This function uses a non-reentrant model
 21072 ;;
 21073                           
 21074                           	psect	text92
 21075  005CFE                     __ptext92:
 21076                           	opt stack 0
 21077  005CFE                     _ETH_GetByteCount:
 21078                           	opt stack 20
 21079                           
 21080                           ;enc28J60.c: 887: uint16_t wptr;
 21081                           ;enc28J60.c: 889: wptr = ENC28_Rcr16(J60_EWRPTL);
 21082                           
 21083                           ;incstack = 0
 21084  005CFE  0E02               	movlw	2
 21085  005D00  EC25  F02C         	call	_ENC28_Rcr16
 21086  005D04  C005  F00C         	movff	?_ENC28_Rcr16,ETH_GetByteCount@wptr
 21087  005D08  C006  F00D         	movff	?_ENC28_Rcr16+1,ETH_GetByteCount@wptr+1
 21088                           
 21089                           ;enc28J60.c: 891: return (wptr - ethData.saveWRPT);
 21090  005D0C  0101               	movlb	1	; () banked
 21091  005D0E  51BA               	movf	(_ethData+5)& (0+255),w,b	;volatile
 21092  005D10  5C0C               	subwf	ETH_GetByteCount@wptr,w,c
 21093  005D12  6E0A               	movwf	?_ETH_GetByteCount,c
 21094  005D14  51BB               	movf	(_ethData+6)& (0+255),w,b	;volatile
 21095  005D16  580D               	subwfb	ETH_GetByteCount@wptr+1,w,c
 21096  005D18  6E0B               	movwf	?_ETH_GetByteCount+1,c
 21097                           
 21098                           ; BSR set to: 1
 21099  005D1A  0012               	return		;funcret
 21100  005D1C                     __end_of_ETH_GetByteCount:
 21101                           	opt stack 0
 21102                           tosu	equ	0xFFF
 21103                           tosh	equ	0xFFE
 21104                           tosl	equ	0xFFD
 21105                           pclath	equ	0xFFA
 21106                           tblptru	equ	0xFF8
 21107                           tblptrh	equ	0xFF7
 21108                           tblptrl	equ	0xFF6
 21109                           tablat	equ	0xFF5
 21110                           prodh	equ	0xFF4
 21111                           prodl	equ	0xFF3
 21112                           intcon	equ	0xFF2
 21113                           indf0	equ	0xFEF
 21114                           postinc0	equ	0xFEE
 21115                           fsr0h	equ	0xFEA
 21116                           fsr0l	equ	0xFE9
 21117                           wreg	equ	0xFE8
 21118                           postinc1	equ	0xFE6
 21119                           plusw1	equ	0xFE3
 21120                           fsr1h	equ	0xFE2
 21121                           fsr1l	equ	0xFE1
 21122                           bsr	equ	0xFE0
 21123                           indf2	equ	0xFDF
 21124                           postinc2	equ	0xFDE
 21125                           postdec2	equ	0xFDD
 21126                           plusw2	equ	0xFDB
 21127                           fsr2h	equ	0xFDA
 21128                           fsr2l	equ	0xFD9
 21129                           status	equ	0xFD8
 21130                           
 21131 ;; *************** function _ENC28_Rcr16 *****************
 21132 ;; Defined at:
 21133 ;;		line 288 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 21134 ;; Parameters:    Size  Location     Type
 21135 ;;  a               1    wreg     enum E6625
 21136 ;; Auto vars:     Size  Location     Type
 21137 ;;  a               1    8[COMRAM] enum E6625
 21138 ;;  v               2    6[COMRAM] unsigned int 
 21139 ;; Return value:  Size  Location     Type
 21140 ;;                  2    4[COMRAM] unsigned int 
 21141 ;; Registers used:
 21142 ;;		wreg, status,2, status,0, cstack
 21143 ;; Tracked objects:
 21144 ;;		On entry : 0/2
 21145 ;;		On exit  : 0/0
 21146 ;;		Unchanged: 0/0
 21147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21149 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21151 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21152 ;;Total ram usage:        5 bytes
 21153 ;; Hardware stack levels used:    1
 21154 ;; Hardware stack levels required when called:    5
 21155 ;; This function calls:
 21156 ;;		_ENC28_BankSel
 21157 ;;		_SPI_ExchangeByte
 21158 ;; This function is called by:
 21159 ;;		_ETH_EventHandler
 21160 ;;		_ENC28_PhyRead
 21161 ;;		_ETH_Dump
 21162 ;;		_ETH_Insert
 21163 ;;		_ETH_Copy
 21164 ;;		_ETH_TxComputeChecksum
 21165 ;;		_ETH_RxComputeChecksum
 21166 ;;		_ETH_SaveRDPT
 21167 ;;		_ETH_ResetByteCount
 21168 ;;		_ETH_GetByteCount
 21169 ;; This function uses a non-reentrant model
 21170 ;;
 21171                           
 21172                           	psect	text93
 21173  00584A                     __ptext93:
 21174                           	opt stack 0
 21175  00584A                     _ENC28_Rcr16:
 21176                           	opt stack 22
 21177                           
 21178                           ; BSR set to: 1
 21179                           ;incstack = 0
 21180                           ;ENC28_Rcr16@a stored from wreg
 21181  00584A  6E09               	movwf	ENC28_Rcr16@a,c
 21182                           
 21183                           ;enc28J60.c: 290: uint16_t v;
 21184                           ;enc28J60.c: 292: ENC28_BankSel(a);
 21185  00584C  5009               	movf	ENC28_Rcr16@a,w,c
 21186  00584E  ECE2  F02B         	call	_ENC28_BankSel
 21187                           
 21188                           ;enc28J60.c: 293: a &= 0x1F;
 21189  005852  0E1F               	movlw	31
 21190  005854  1609               	andwf	ENC28_Rcr16@a,f,c
 21191  005856  968C               	bcf	3980,3,c	;volatile
 21192                           
 21193                           ;enc28J60.c: 295: SPI_ExchangeByte(rcr_inst | (a));
 21194  005858  5009               	movf	ENC28_Rcr16@a,w,c
 21195  00585A  EC42  F02F         	call	_SPI_ExchangeByte
 21196                           
 21197                           ;enc28J60.c: 296: ((char *) &v)[0] = SPI_ExchangeByte(0);
 21198  00585E  0E00               	movlw	0
 21199  005860  EC42  F02F         	call	_SPI_ExchangeByte
 21200  005864  6E07               	movwf	ENC28_Rcr16@v,c
 21201  005866  868C               	bsf	3980,3,c	;volatile
 21202                           
 21203                           ;enc28J60.c: 298: __nop();
 21204  005868  F000               	nop	
 21205                           
 21206                           ;enc28J60.c: 299: __nop();
 21207  00586A  F000               	nop	
 21208  00586C  968C               	bcf	3980,3,c	;volatile
 21209                           
 21210                           ;enc28J60.c: 301: SPI_ExchangeByte(rcr_inst | (a + 1));
 21211  00586E  2809               	incf	ENC28_Rcr16@a,w,c
 21212  005870  EC42  F02F         	call	_SPI_ExchangeByte
 21213                           
 21214                           ;enc28J60.c: 302: ((char *) &v)[1] = SPI_ExchangeByte(0);
 21215  005874  0E00               	movlw	0
 21216  005876  EC42  F02F         	call	_SPI_ExchangeByte
 21217  00587A  6E08               	movwf	ENC28_Rcr16@v+1,c
 21218  00587C  868C               	bsf	3980,3,c	;volatile
 21219                           
 21220                           ;enc28J60.c: 305: return v;
 21221  00587E  C007  F005         	movff	ENC28_Rcr16@v,?_ENC28_Rcr16
 21222  005882  C008  F006         	movff	ENC28_Rcr16@v+1,?_ENC28_Rcr16+1
 21223  005886  0012               	return		;funcret
 21224  005888                     __end_of_ENC28_Rcr16:
 21225                           	opt stack 0
 21226                           tosu	equ	0xFFF
 21227                           tosh	equ	0xFFE
 21228                           tosl	equ	0xFFD
 21229                           pclath	equ	0xFFA
 21230                           tblptru	equ	0xFF8
 21231                           tblptrh	equ	0xFF7
 21232                           tblptrl	equ	0xFF6
 21233                           tablat	equ	0xFF5
 21234                           prodh	equ	0xFF4
 21235                           prodl	equ	0xFF3
 21236                           intcon	equ	0xFF2
 21237                           indf0	equ	0xFEF
 21238                           postinc0	equ	0xFEE
 21239                           fsr0h	equ	0xFEA
 21240                           fsr0l	equ	0xFE9
 21241                           wreg	equ	0xFE8
 21242                           postinc1	equ	0xFE6
 21243                           plusw1	equ	0xFE3
 21244                           fsr1h	equ	0xFE2
 21245                           fsr1l	equ	0xFE1
 21246                           bsr	equ	0xFE0
 21247                           indf2	equ	0xFDF
 21248                           postinc2	equ	0xFDE
 21249                           postdec2	equ	0xFDD
 21250                           plusw2	equ	0xFDB
 21251                           fsr2h	equ	0xFDA
 21252                           fsr2l	equ	0xFD9
 21253                           status	equ	0xFD8
 21254                           
 21255 ;; *************** function _ENC28_BankSel *****************
 21256 ;; Defined at:
 21257 ;;		line 95 in file "../../TCPIP Library/ethernet_drivers/enc28J60.c"
 21258 ;; Parameters:    Size  Location     Type
 21259 ;;  r               1    wreg     enum E6625
 21260 ;; Auto vars:     Size  Location     Type
 21261 ;;  r               1    2[COMRAM] enum E6625
 21262 ;;  a               1    3[COMRAM] unsigned char 
 21263 ;; Return value:  Size  Location     Type
 21264 ;;		None               void
 21265 ;; Registers used:
 21266 ;;		wreg, status,2, status,0, cstack
 21267 ;; Tracked objects:
 21268 ;;		On entry : 0/1
 21269 ;;		On exit  : 0/0
 21270 ;;		Unchanged: 0/0
 21271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21275 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;Total ram usage:        2 bytes
 21277 ;; Hardware stack levels used:    1
 21278 ;; Hardware stack levels required when called:    4
 21279 ;; This function calls:
 21280 ;;		_SPI_ExchangeByte
 21281 ;; This function is called by:
 21282 ;;		_ENC28_Rcr8
 21283 ;;		_ENC28_Rcr16
 21284 ;;		_ENC28_Wcr8
 21285 ;;		_ENC28_Wcr16
 21286 ;;		_ENC28_Bfs
 21287 ;;		_ENC28_Bfc
 21288 ;; This function uses a non-reentrant model
 21289 ;;
 21290                           
 21291                           	psect	text94
 21292  0057C4                     __ptext94:
 21293                           	opt stack 0
 21294  0057C4                     _ENC28_BankSel:
 21295                           	opt stack 22
 21296                           
 21297                           ;incstack = 0
 21298                           ;ENC28_BankSel@r stored from wreg
 21299  0057C4  6E03               	movwf	ENC28_BankSel@r,c
 21300                           
 21301                           ;enc28J60.c: 97: uint8_t a = r & 0xE0;
 21302  0057C6  5003               	movf	ENC28_BankSel@r,w,c
 21303  0057C8  0BE0               	andlw	224
 21304  0057CA  6E04               	movwf	ENC28_BankSel@a,c
 21305                           
 21306                           ;enc28J60.c: 99: if (a != sfr_common && a != lastBank)
 21307  0057CC  0EE0               	movlw	224
 21308  0057CE  1804               	xorwf	ENC28_BankSel@a,w,c
 21309  0057D0  B4D8               	btfsc	status,2,c
 21310  0057D2  0012               	return	
 21311  0057D4  0101               	movlb	1	; () banked
 21312  0057D6  51E5               	movf	_lastBank& (0+255),w,b
 21313  0057D8  1804               	xorwf	ENC28_BankSel@a,w,c
 21314  0057DA  B4D8               	btfsc	status,2,c
 21315  0057DC  0012               	return	
 21316                           
 21317                           ; BSR set to: 1
 21318                           ;enc28J60.c: 100: {
 21319                           ;enc28J60.c: 101: lastBank = a;
 21320  0057DE  C004  F1E5         	movff	ENC28_BankSel@a,_lastBank
 21321                           
 21322                           ; BSR set to: 1
 21323                           
 21324                           ;enc28J60.c: 103: do{LATD3 = 0;} while(0);
 21325  0057E2  968C               	bcf	3980,3,c	;volatile
 21326                           
 21327                           ; BSR set to: 1
 21328                           ;enc28J60.c: 104: SPI_ExchangeByte(bfc_inst | 0x1F);
 21329  0057E4  0EBF               	movlw	191
 21330  0057E6  EC42  F02F         	call	_SPI_ExchangeByte
 21331                           
 21332                           ;enc28J60.c: 105: SPI_ExchangeByte(0x03);
 21333  0057EA  0E03               	movlw	3
 21334  0057EC  EC42  F02F         	call	_SPI_ExchangeByte
 21335  0057F0  868C               	bsf	3980,3,c	;volatile
 21336                           
 21337                           ;enc28J60.c: 107: __nop();
 21338  0057F2  F000               	nop	
 21339                           
 21340                           ;enc28J60.c: 108: __nop();
 21341  0057F4  F000               	nop	
 21342  0057F6  968C               	bcf	3980,3,c	;volatile
 21343                           
 21344                           ;enc28J60.c: 111: SPI_ExchangeByte(bfs_inst | 0x1F);
 21345  0057F8  0E9F               	movlw	159
 21346  0057FA  EC42  F02F         	call	_SPI_ExchangeByte
 21347                           
 21348                           ;enc28J60.c: 112: SPI_ExchangeByte(a >> 6);
 21349  0057FE  4404               	rlncf	ENC28_BankSel@a,w,c
 21350  005800  46E8               	rlncf	wreg,f,c
 21351  005802  0B03               	andlw	3
 21352  005804  EC42  F02F         	call	_SPI_ExchangeByte
 21353  005808  868C               	bsf	3980,3,c	;volatile
 21354  00580A  0012               	return		;funcret
 21355  00580C                     __end_of_ENC28_BankSel:
 21356                           	opt stack 0
 21357                           tosu	equ	0xFFF
 21358                           tosh	equ	0xFFE
 21359                           tosl	equ	0xFFD
 21360                           pclath	equ	0xFFA
 21361                           tblptru	equ	0xFF8
 21362                           tblptrh	equ	0xFF7
 21363                           tblptrl	equ	0xFF6
 21364                           tablat	equ	0xFF5
 21365                           prodh	equ	0xFF4
 21366                           prodl	equ	0xFF3
 21367                           intcon	equ	0xFF2
 21368                           indf0	equ	0xFEF
 21369                           postinc0	equ	0xFEE
 21370                           fsr0h	equ	0xFEA
 21371                           fsr0l	equ	0xFE9
 21372                           wreg	equ	0xFE8
 21373                           postinc1	equ	0xFE6
 21374                           plusw1	equ	0xFE3
 21375                           fsr1h	equ	0xFE2
 21376                           fsr1l	equ	0xFE1
 21377                           bsr	equ	0xFE0
 21378                           indf2	equ	0xFDF
 21379                           postinc2	equ	0xFDE
 21380                           postdec2	equ	0xFDD
 21381                           plusw2	equ	0xFDB
 21382                           fsr2h	equ	0xFDA
 21383                           fsr2l	equ	0xFD9
 21384                           status	equ	0xFD8
 21385                           
 21386 ;; *************** function _SPI_ExchangeByte *****************
 21387 ;; Defined at:
 21388 ;;		line 55 in file "../board_support_package/picdem2_net/mssp_spi_master.c"
 21389 ;; Parameters:    Size  Location     Type
 21390 ;;  v               1    wreg     unsigned char 
 21391 ;; Auto vars:     Size  Location     Type
 21392 ;;  v               1    1[COMRAM] unsigned char 
 21393 ;; Return value:  Size  Location     Type
 21394 ;;                  1    wreg      unsigned char 
 21395 ;; Registers used:
 21396 ;;		wreg, status,2
 21397 ;; Tracked objects:
 21398 ;;		On entry : 0/1
 21399 ;;		On exit  : 0/0
 21400 ;;		Unchanged: 0/0
 21401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;Total ram usage:        1 bytes
 21407 ;; Hardware stack levels used:    1
 21408 ;; Hardware stack levels required when called:    3
 21409 ;; This function calls:
 21410 ;;		Nothing
 21411 ;; This function is called by:
 21412 ;;		_ENC28_BankSel
 21413 ;;		_ETH_NextPacketUpdate
 21414 ;;		_ENC28_Rcr8
 21415 ;;		_ENC28_Rcr16
 21416 ;;		_ENC28_Wcr8
 21417 ;;		_ENC28_Wcr16
 21418 ;;		_ENC28_Bfs
 21419 ;;		_ENC28_Bfc
 21420 ;;		_ETH_SendSystemReset
 21421 ;;		_ETH_Read8
 21422 ;;		_ETH_Read16
 21423 ;;		_ETH_ReadBlock
 21424 ;;		_ETH_Write8
 21425 ;;		_ETH_Write16
 21426 ;;		_ETH_Write32
 21427 ;;		_ETH_WriteBlock
 21428 ;;		_ETH_WriteStart
 21429 ;;		_ETH_Insert
 21430 ;;		_ETH_Read32
 21431 ;; This function uses a non-reentrant model
 21432 ;;
 21433                           
 21434                           	psect	text95
 21435  005E84                     __ptext95:
 21436                           	opt stack 0
 21437  005E84                     _SPI_ExchangeByte:
 21438                           	opt stack 23
 21439                           
 21440                           ;incstack = 0
 21441                           ;SPI_ExchangeByte@v stored from wreg
 21442  005E84  6E02               	movwf	SPI_ExchangeByte@v,c
 21443                           
 21444                           ;mssp_spi_master.c: 57: SSP1BUF = v;
 21445  005E86  C002  FFC9         	movff	SPI_ExchangeByte@v,4041	;volatile
 21446  005E8A                     l279:
 21447  005E8A  A0C7               	btfss	4039,0,c	;volatile
 21448  005E8C  D7FE               	goto	l279
 21449                           
 21450                           ;mssp_spi_master.c: 59: return SSPBUF;
 21451  005E8E  50C9               	movf	4041,w,c	;volatile
 21452  005E90  0012               	return		;funcret
 21453  005E92                     __end_of_SPI_ExchangeByte:
 21454                           	opt stack 0
 21455                           tosu	equ	0xFFF
 21456                           tosh	equ	0xFFE
 21457                           tosl	equ	0xFFD
 21458                           pclath	equ	0xFFA
 21459                           tblptru	equ	0xFF8
 21460                           tblptrh	equ	0xFF7
 21461                           tblptrl	equ	0xFF6
 21462                           tablat	equ	0xFF5
 21463                           prodh	equ	0xFF4
 21464                           prodl	equ	0xFF3
 21465                           intcon	equ	0xFF2
 21466                           indf0	equ	0xFEF
 21467                           postinc0	equ	0xFEE
 21468                           fsr0h	equ	0xFEA
 21469                           fsr0l	equ	0xFE9
 21470                           wreg	equ	0xFE8
 21471                           postinc1	equ	0xFE6
 21472                           plusw1	equ	0xFE3
 21473                           fsr1h	equ	0xFE2
 21474                           fsr1l	equ	0xFE1
 21475                           bsr	equ	0xFE0
 21476                           indf2	equ	0xFDF
 21477                           postinc2	equ	0xFDE
 21478                           postdec2	equ	0xFDD
 21479                           plusw2	equ	0xFDB
 21480                           fsr2h	equ	0xFDA
 21481                           fsr2l	equ	0xFD9
 21482                           status	equ	0xFD8
 21483                           
 21484 ;; *************** function _DEMO_UDP_ClaimIPCheck *****************
 21485 ;; Defined at:
 21486 ;;		line 46 in file "udp_demo.c"
 21487 ;; Parameters:    Size  Location     Type
 21488 ;;		None
 21489 ;; Auto vars:     Size  Location     Type
 21490 ;;  ret             1    2[COMRAM] unsigned char 
 21491 ;; Return value:  Size  Location     Type
 21492 ;;		None               void
 21493 ;; Registers used:
 21494 ;;		wreg, status,2, status,0
 21495 ;; Tracked objects:
 21496 ;;		On entry : 0/1
 21497 ;;		On exit  : F/1
 21498 ;;		Unchanged: 0/0
 21499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21502 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21503 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21504 ;;Total ram usage:        2 bytes
 21505 ;; Hardware stack levels used:    1
 21506 ;; Hardware stack levels required when called:    3
 21507 ;; This function calls:
 21508 ;;		Nothing
 21509 ;; This function is called by:
 21510 ;;		_DEMO_UDP_Send
 21511 ;;		_DEMO_UDP_Recv
 21512 ;; This function uses a non-reentrant model
 21513 ;;
 21514                           
 21515                           	psect	text96
 21516  005D86                     __ptext96:
 21517                           	opt stack 0
 21518  005D86                     _DEMO_UDP_ClaimIPCheck:
 21519                           	opt stack 26
 21520                           
 21521                           ;udp_demo.c: 48: bool ret;
 21522                           ;udp_demo.c: 49: if(claim == 1)
 21523                           
 21524                           ;incstack = 0
 21525  005D86  0101               	movlb	1	; () banked
 21526  005D88  05E3               	decf	_claim& (0+255),w,b
 21527  005D8A  E103               	bnz	l7188
 21528                           
 21529                           ; BSR set to: 1
 21530                           ;udp_demo.c: 50: {
 21531                           ;udp_demo.c: 51: ret = 1;
 21532  005D8C  0E01               	movlw	1
 21533  005D8E  6E03               	movwf	DEMO_UDP_ClaimIPCheck@ret,c
 21534                           
 21535                           ;udp_demo.c: 52: }
 21536  005D90  D003               	goto	l7192
 21537  005D92                     l7188:
 21538                           
 21539                           ; BSR set to: 1
 21540                           ;udp_demo.c: 53: else if(claim == 0)
 21541  005D92  51E3               	movf	_claim& (0+255),w,b
 21542  005D94  E101               	bnz	l7192
 21543                           
 21544                           ; BSR set to: 1
 21545                           ;udp_demo.c: 54: {
 21546                           ;udp_demo.c: 55: ret = 0;
 21547  005D96  6A03               	clrf	DEMO_UDP_ClaimIPCheck@ret,c
 21548  005D98                     l7192:
 21549                           
 21550                           ; BSR set to: 1
 21551                           ;udp_demo.c: 56: }
 21552                           ;udp_demo.c: 57: return ret;
 21553  005D98  C003  F002         	movff	DEMO_UDP_ClaimIPCheck@ret,??_DEMO_UDP_ClaimIPCheck
 21554  005D9C  3002               	rrcf	??_DEMO_UDP_ClaimIPCheck,w,c
 21555                           
 21556                           ; BSR set to: 1
 21557  005D9E  0012               	return		;funcret
 21558  005DA0                     __end_of_DEMO_UDP_ClaimIPCheck:
 21559                           	opt stack 0
 21560                           tosu	equ	0xFFF
 21561                           tosh	equ	0xFFE
 21562                           tosl	equ	0xFFD
 21563                           pclath	equ	0xFFA
 21564                           tblptru	equ	0xFF8
 21565                           tblptrh	equ	0xFF7
 21566                           tblptrl	equ	0xFF6
 21567                           tablat	equ	0xFF5
 21568                           prodh	equ	0xFF4
 21569                           prodl	equ	0xFF3
 21570                           intcon	equ	0xFF2
 21571                           indf0	equ	0xFEF
 21572                           postinc0	equ	0xFEE
 21573                           fsr0h	equ	0xFEA
 21574                           fsr0l	equ	0xFE9
 21575                           wreg	equ	0xFE8
 21576                           postinc1	equ	0xFE6
 21577                           plusw1	equ	0xFE3
 21578                           fsr1h	equ	0xFE2
 21579                           fsr1l	equ	0xFE1
 21580                           bsr	equ	0xFE0
 21581                           indf2	equ	0xFDF
 21582                           postinc2	equ	0xFDE
 21583                           postdec2	equ	0xFDD
 21584                           plusw2	equ	0xFDB
 21585                           fsr2h	equ	0xFDA
 21586                           fsr2l	equ	0xFD9
 21587                           status	equ	0xFD8
 21588                           
 21589 ;; *************** function _ADC_GetConversion *****************
 21590 ;; Defined at:
 21591 ;;		line 106 in file "../board_support_package/picdem2_net/adc.c"
 21592 ;; Parameters:    Size  Location     Type
 21593 ;;  channel         1    wreg     enum E6609
 21594 ;; Auto vars:     Size  Location     Type
 21595 ;;  channel         1    4[COMRAM] enum E6609
 21596 ;; Return value:  Size  Location     Type
 21597 ;;                  2    1[COMRAM] unsigned int 
 21598 ;; Registers used:
 21599 ;;		wreg, status,2, status,0
 21600 ;; Tracked objects:
 21601 ;;		On entry : F/1
 21602 ;;		On exit  : 0/0
 21603 ;;		Unchanged: 0/0
 21604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21609 ;;Total ram usage:        4 bytes
 21610 ;; Hardware stack levels used:    1
 21611 ;; Hardware stack levels required when called:    3
 21612 ;; This function calls:
 21613 ;;		Nothing
 21614 ;; This function is called by:
 21615 ;;		_DEMO_UDP_Send
 21616 ;;		_DEMO_UDP_MeasureTemp
 21617 ;; This function uses a non-reentrant model
 21618 ;;
 21619                           
 21620                           	psect	text97
 21621  005A28                     __ptext97:
 21622                           	opt stack 0
 21623  005A28                     _ADC_GetConversion:
 21624                           	opt stack 26
 21625                           
 21626                           ; BSR set to: 1
 21627                           ;incstack = 0
 21628                           ;ADC_GetConversion@channel stored from wreg
 21629  005A28  6E05               	movwf	ADC_GetConversion@channel,c
 21630                           
 21631                           ;adc.c: 109: ADCON0bits.CHS = channel;
 21632  005A2A  C005  F004         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 21633  005A2E  4604               	rlncf	??_ADC_GetConversion,f,c
 21634  005A30  4604               	rlncf	??_ADC_GetConversion,f,c
 21635  005A32  50C2               	movf	4034,w,c	;volatile
 21636  005A34  1804               	xorwf	??_ADC_GetConversion,w,c
 21637  005A36  0BC3               	andlw	-61
 21638  005A38  1804               	xorwf	??_ADC_GetConversion,w,c
 21639  005A3A  6EC2               	movwf	4034,c	;volatile
 21640                           
 21641                           ;adc.c: 112: ADCON0bits.ADON = 1;
 21642  005A3C  80C2               	bsf	4034,0,c	;volatile
 21643                           
 21644                           ;adc.c: 115: _delay((unsigned long)((5)*(41666667UL/4000000.0)));
 21645  005A3E  0E11               	movlw	17
 21646  005A40                     u15557:
 21647  005A40  2EE8               	decfsz	wreg,f,c
 21648  005A42  D7FE               	goto	u15557
 21649  005A44  F000               	nop	
 21650                           
 21651                           ;adc.c: 118: ADCON0bits.GO_nDONE = 1;
 21652  005A46  82C2               	bsf	4034,1,c	;volatile
 21653  005A48                     l33:
 21654  005A48  B2C2               	btfsc	4034,1,c	;volatile
 21655  005A4A  D7FE               	goto	l33
 21656                           
 21657                           ;adc.c: 123: }
 21658                           ;adc.c: 127: return (ADRES);
 21659  005A4C  CFC3 F002          	movff	4035,?_ADC_GetConversion	;volatile
 21660  005A50  CFC4 F003          	movff	4036,?_ADC_GetConversion+1	;volatile
 21661  005A54  0012               	return		;funcret
 21662  005A56                     __end_of_ADC_GetConversion:
 21663                           	opt stack 0
 21664                           tosu	equ	0xFFF
 21665                           tosh	equ	0xFFE
 21666                           tosl	equ	0xFFD
 21667                           pclath	equ	0xFFA
 21668                           tblptru	equ	0xFF8
 21669                           tblptrh	equ	0xFF7
 21670                           tblptrl	equ	0xFF6
 21671                           tablat	equ	0xFF5
 21672                           prodh	equ	0xFF4
 21673                           prodl	equ	0xFF3
 21674                           intcon	equ	0xFF2
 21675                           indf0	equ	0xFEF
 21676                           postinc0	equ	0xFEE
 21677                           fsr0h	equ	0xFEA
 21678                           fsr0l	equ	0xFE9
 21679                           wreg	equ	0xFE8
 21680                           postinc1	equ	0xFE6
 21681                           plusw1	equ	0xFE3
 21682                           fsr1h	equ	0xFE2
 21683                           fsr1l	equ	0xFE1
 21684                           bsr	equ	0xFE0
 21685                           indf2	equ	0xFDF
 21686                           postinc2	equ	0xFDE
 21687                           postdec2	equ	0xFDD
 21688                           plusw2	equ	0xFDB
 21689                           fsr2h	equ	0xFDA
 21690                           fsr2l	equ	0xFD9
 21691                           status	equ	0xFD8
 21692                           
 21693 ;; *************** function _DEMO_UDP_IPLockTimer *****************
 21694 ;; Defined at:
 21695 ;;		line 68 in file "udp_demo.c"
 21696 ;; Parameters:    Size  Location     Type
 21697 ;;		None
 21698 ;; Auto vars:     Size  Location     Type
 21699 ;;		None
 21700 ;; Return value:  Size  Location     Type
 21701 ;;		None               void
 21702 ;; Registers used:
 21703 ;;		wreg, status,2, cstack
 21704 ;; Tracked objects:
 21705 ;;		On entry : F/1
 21706 ;;		On exit  : 0/0
 21707 ;;		Unchanged: 0/0
 21708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21713 ;;Total ram usage:        0 bytes
 21714 ;; Hardware stack levels used:    1
 21715 ;; Hardware stack levels required when called:    4
 21716 ;; This function calls:
 21717 ;;		_DEMO_UDP_SetClaimIP
 21718 ;; This function is called by:
 21719 ;;		_main
 21720 ;; This function uses a non-reentrant model
 21721 ;;
 21722                           
 21723                           	psect	text98
 21724  005E12                     __ptext98:
 21725                           	opt stack 0
 21726  005E12                     _DEMO_UDP_IPLockTimer:
 21727                           	opt stack 26
 21728                           
 21729                           ; BSR set to: 1
 21730                           ;udp_demo.c: 71: if(!idle_pkt_received)
 21731                           
 21732                           ;incstack = 0
 21733  005E12  51E4               	movf	_idle_pkt_received& (0+255),w,b
 21734  005E14  E103               	bnz	l7344
 21735                           
 21736                           ; BSR set to: 1
 21737                           ;udp_demo.c: 72: {
 21738                           ;udp_demo.c: 73: DEMO_UDP_SetClaimIP(0);
 21739  005E16  0E00               	movlw	0
 21740  005E18  EF65  F02F         	goto	_DEMO_UDP_SetClaimIP
 21741  005E1C                     l7344:
 21742                           
 21743                           ; BSR set to: 1
 21744                           ;udp_demo.c: 75: else
 21745                           ;udp_demo.c: 76: {
 21746                           ;udp_demo.c: 77: DEMO_UDP_SetClaimIP(1);
 21747  005E1C  0E01               	movlw	1
 21748  005E1E  EC65  F02F         	call	_DEMO_UDP_SetClaimIP
 21749                           
 21750                           ;udp_demo.c: 78: idle_pkt_received = 0;
 21751  005E22  0101               	movlb	1	; () banked
 21752  005E24  6BE4               	clrf	_idle_pkt_received& (0+255),b
 21753  005E26  0012               	return		;funcret
 21754  005E28                     __end_of_DEMO_UDP_IPLockTimer:
 21755                           	opt stack 0
 21756                           tosu	equ	0xFFF
 21757                           tosh	equ	0xFFE
 21758                           tosl	equ	0xFFD
 21759                           pclath	equ	0xFFA
 21760                           tblptru	equ	0xFF8
 21761                           tblptrh	equ	0xFF7
 21762                           tblptrl	equ	0xFF6
 21763                           tablat	equ	0xFF5
 21764                           prodh	equ	0xFF4
 21765                           prodl	equ	0xFF3
 21766                           intcon	equ	0xFF2
 21767                           indf0	equ	0xFEF
 21768                           postinc0	equ	0xFEE
 21769                           fsr0h	equ	0xFEA
 21770                           fsr0l	equ	0xFE9
 21771                           wreg	equ	0xFE8
 21772                           postinc1	equ	0xFE6
 21773                           plusw1	equ	0xFE3
 21774                           fsr1h	equ	0xFE2
 21775                           fsr1l	equ	0xFE1
 21776                           bsr	equ	0xFE0
 21777                           indf2	equ	0xFDF
 21778                           postinc2	equ	0xFDE
 21779                           postdec2	equ	0xFDD
 21780                           plusw2	equ	0xFDB
 21781                           fsr2h	equ	0xFDA
 21782                           fsr2l	equ	0xFD9
 21783                           status	equ	0xFD8
 21784                           
 21785 ;; *************** function _DEMO_UDP_SetClaimIP *****************
 21786 ;; Defined at:
 21787 ;;		line 61 in file "udp_demo.c"
 21788 ;; Parameters:    Size  Location     Type
 21789 ;;  claim_ip        1    wreg     unsigned char 
 21790 ;; Auto vars:     Size  Location     Type
 21791 ;;  claim_ip        1    1[COMRAM] unsigned char 
 21792 ;; Return value:  Size  Location     Type
 21793 ;;		None               void
 21794 ;; Registers used:
 21795 ;;		wreg
 21796 ;; Tracked objects:
 21797 ;;		On entry : F/1
 21798 ;;		On exit  : 0/0
 21799 ;;		Unchanged: 0/0
 21800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;Total ram usage:        1 bytes
 21806 ;; Hardware stack levels used:    1
 21807 ;; Hardware stack levels required when called:    3
 21808 ;; This function calls:
 21809 ;;		Nothing
 21810 ;; This function is called by:
 21811 ;;		_DEMO_UDP_IPLockTimer
 21812 ;;		_DEMO_UDP_Recv
 21813 ;; This function uses a non-reentrant model
 21814 ;;
 21815                           
 21816                           	psect	text99
 21817  005ECA                     __ptext99:
 21818                           	opt stack 0
 21819  005ECA                     _DEMO_UDP_SetClaimIP:
 21820                           	opt stack 26
 21821                           
 21822                           ;incstack = 0
 21823                           ;DEMO_UDP_SetClaimIP@claim_ip stored from wreg
 21824  005ECA  6E02               	movwf	DEMO_UDP_SetClaimIP@claim_ip,c
 21825                           
 21826                           ;udp_demo.c: 63: claim = claim_ip;
 21827  005ECC  C002  F1E3         	movff	DEMO_UDP_SetClaimIP@claim_ip,_claim
 21828  005ED0  0012               	return		;funcret
 21829  005ED2                     __end_of_DEMO_UDP_SetClaimIP:
 21830                           	opt stack 0
 21831                           tosu	equ	0xFFF
 21832                           tosh	equ	0xFFE
 21833                           tosl	equ	0xFFD
 21834                           pclath	equ	0xFFA
 21835                           tblptru	equ	0xFF8
 21836                           tblptrh	equ	0xFF7
 21837                           tblptrl	equ	0xFF6
 21838                           tablat	equ	0xFF5
 21839                           prodh	equ	0xFF4
 21840                           prodl	equ	0xFF3
 21841                           intcon	equ	0xFF2
 21842                           indf0	equ	0xFEF
 21843                           postinc0	equ	0xFEE
 21844                           fsr0h	equ	0xFEA
 21845                           fsr0l	equ	0xFE9
 21846                           wreg	equ	0xFE8
 21847                           postinc1	equ	0xFE6
 21848                           plusw1	equ	0xFE3
 21849                           fsr1h	equ	0xFE2
 21850                           fsr1l	equ	0xFE1
 21851                           bsr	equ	0xFE0
 21852                           indf2	equ	0xFDF
 21853                           postinc2	equ	0xFDE
 21854                           postdec2	equ	0xFDD
 21855                           plusw2	equ	0xFDB
 21856                           fsr2h	equ	0xFDA
 21857                           fsr2l	equ	0xFD9
 21858                           status	equ	0xFD8
 21859                           
 21860 ;; *************** function _low_isr *****************
 21861 ;; Defined at:
 21862 ;;		line 61 in file "main.c"
 21863 ;; Parameters:    Size  Location     Type
 21864 ;;		None
 21865 ;; Auto vars:     Size  Location     Type
 21866 ;;		None
 21867 ;; Return value:  Size  Location     Type
 21868 ;;		None               void
 21869 ;; Registers used:
 21870 ;;		None
 21871 ;; Tracked objects:
 21872 ;;		On entry : 0/0
 21873 ;;		On exit  : 0/0
 21874 ;;		Unchanged: 0/0
 21875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21880 ;;Total ram usage:        1 bytes
 21881 ;; Hardware stack levels used:    1
 21882 ;; Hardware stack levels required when called:    2
 21883 ;; This function calls:
 21884 ;;		Nothing
 21885 ;; This function is called by:
 21886 ;;		Interrupt level 1
 21887 ;; This function uses a non-reentrant model
 21888 ;;
 21889                           
 21890                           	psect	intcodelo
 21891  000018                     __pintcodelo:
 21892                           	opt stack 0
 21893  000018                     _low_isr:
 21894                           	opt stack 15
 21895                           
 21896                           ;incstack = 0
 21897  000018  805E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 21898  00001A  CFE0 F001          	movff	bsr,??_low_isr
 21899                           
 21900                           ;main.c: 66: __nop();
 21901  00001E  F000               	nop	
 21902  000020  C001  FFE0         	movff	??_low_isr,bsr
 21903  000024  905E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 21904  000026  0010               	retfie	
 21905  000028                     __end_of_low_isr:
 21906                           	opt stack 0
 21907                           tosu	equ	0xFFF
 21908                           tosh	equ	0xFFE
 21909                           tosl	equ	0xFFD
 21910                           pclath	equ	0xFFA
 21911                           tblptru	equ	0xFF8
 21912                           tblptrh	equ	0xFF7
 21913                           tblptrl	equ	0xFF6
 21914                           tablat	equ	0xFF5
 21915                           prodh	equ	0xFF4
 21916                           prodl	equ	0xFF3
 21917                           intcon	equ	0xFF2
 21918                           indf0	equ	0xFEF
 21919                           postinc0	equ	0xFEE
 21920                           fsr0h	equ	0xFEA
 21921                           fsr0l	equ	0xFE9
 21922                           wreg	equ	0xFE8
 21923                           postinc1	equ	0xFE6
 21924                           plusw1	equ	0xFE3
 21925                           fsr1h	equ	0xFE2
 21926                           fsr1l	equ	0xFE1
 21927                           bsr	equ	0xFE0
 21928                           indf2	equ	0xFDF
 21929                           postinc2	equ	0xFDE
 21930                           postdec2	equ	0xFDD
 21931                           plusw2	equ	0xFDB
 21932                           fsr2h	equ	0xFDA
 21933                           fsr2l	equ	0xFD9
 21934                           status	equ	0xFD8
 21935                           
 21936 ;; *************** function _high_isr *****************
 21937 ;; Defined at:
 21938 ;;		line 56 in file "main.c"
 21939 ;; Parameters:    Size  Location     Type
 21940 ;;		None
 21941 ;; Auto vars:     Size  Location     Type
 21942 ;;		None
 21943 ;; Return value:  Size  Location     Type
 21944 ;;		None               void
 21945 ;; Registers used:
 21946 ;;		wreg, status,2, status,0, cstack
 21947 ;; Tracked objects:
 21948 ;;		On entry : 0/0
 21949 ;;		On exit  : 0/0
 21950 ;;		Unchanged: 0/0
 21951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21956 ;;Total ram usage:        0 bytes
 21957 ;; Hardware stack levels used:    1
 21958 ;; Hardware stack levels required when called:    1
 21959 ;; This function calls:
 21960 ;;		_rtcc_handler
 21961 ;; This function is called by:
 21962 ;;		Interrupt level 2
 21963 ;; This function uses a non-reentrant model
 21964 ;;
 21965                           
 21966                           	psect	intcode
 21967  000008                     __pintcode:
 21968                           	opt stack 0
 21969  000008                     _high_isr:
 21970                           	opt stack 15
 21971                           
 21972                           ;incstack = 0
 21973  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21974  00000A  EF69  F02F         	goto	int_func
 21975                           tosu	equ	0xFFF
 21976                           tosh	equ	0xFFE
 21977                           tosl	equ	0xFFD
 21978                           pclath	equ	0xFFA
 21979                           tblptru	equ	0xFF8
 21980                           tblptrh	equ	0xFF7
 21981                           tblptrl	equ	0xFF6
 21982                           tablat	equ	0xFF5
 21983                           prodh	equ	0xFF4
 21984                           prodl	equ	0xFF3
 21985                           intcon	equ	0xFF2
 21986                           indf0	equ	0xFEF
 21987                           postinc0	equ	0xFEE
 21988                           fsr0h	equ	0xFEA
 21989                           fsr0l	equ	0xFE9
 21990                           wreg	equ	0xFE8
 21991                           postinc1	equ	0xFE6
 21992                           plusw1	equ	0xFE3
 21993                           fsr1h	equ	0xFE2
 21994                           fsr1l	equ	0xFE1
 21995                           bsr	equ	0xFE0
 21996                           indf2	equ	0xFDF
 21997                           postinc2	equ	0xFDE
 21998                           postdec2	equ	0xFDD
 21999                           plusw2	equ	0xFDB
 22000                           fsr2h	equ	0xFDA
 22001                           fsr2l	equ	0xFD9
 22002                           status	equ	0xFD8
 22003                           
 22004                           	psect	intcode_body
 22005  005ED2                     __pintcode_body:
 22006                           	opt stack 15
 22007  005ED2                     int_func:
 22008                           	opt stack 15
 22009                           
 22010                           ;main.c: 58: rtcc_handler();
 22011  005ED2  EC80  F02D         	call	_rtcc_handler	;wreg free
 22012  005ED6  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22013  005ED8  0011               	retfie		f
 22014  005EDA                     __end_of_high_isr:
 22015                           	opt stack 0
 22016                           tosu	equ	0xFFF
 22017                           tosh	equ	0xFFE
 22018                           tosl	equ	0xFFD
 22019                           pclath	equ	0xFFA
 22020                           tblptru	equ	0xFF8
 22021                           tblptrh	equ	0xFF7
 22022                           tblptrl	equ	0xFF6
 22023                           tablat	equ	0xFF5
 22024                           prodh	equ	0xFF4
 22025                           prodl	equ	0xFF3
 22026                           intcon	equ	0xFF2
 22027                           indf0	equ	0xFEF
 22028                           postinc0	equ	0xFEE
 22029                           fsr0h	equ	0xFEA
 22030                           fsr0l	equ	0xFE9
 22031                           wreg	equ	0xFE8
 22032                           postinc1	equ	0xFE6
 22033                           plusw1	equ	0xFE3
 22034                           fsr1h	equ	0xFE2
 22035                           fsr1l	equ	0xFE1
 22036                           bsr	equ	0xFE0
 22037                           indf2	equ	0xFDF
 22038                           postinc2	equ	0xFDE
 22039                           postdec2	equ	0xFDD
 22040                           plusw2	equ	0xFDB
 22041                           fsr2h	equ	0xFDA
 22042                           fsr2l	equ	0xFD9
 22043                           status	equ	0xFD8
 22044                           
 22045 ;; *************** function _rtcc_handler *****************
 22046 ;; Defined at:
 22047 ;;		line 122 in file "../board_support_package/picdem2_net/rtcc.c"
 22048 ;; Parameters:    Size  Location     Type
 22049 ;;		None
 22050 ;; Auto vars:     Size  Location     Type
 22051 ;;		None
 22052 ;; Return value:  Size  Location     Type
 22053 ;;		None               void
 22054 ;; Registers used:
 22055 ;;		wreg, status,2, status,0
 22056 ;; Tracked objects:
 22057 ;;		On entry : 0/0
 22058 ;;		On exit  : 0/0
 22059 ;;		Unchanged: 0/0
 22060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22065 ;;Total ram usage:        0 bytes
 22066 ;; Hardware stack levels used:    1
 22067 ;; This function calls:
 22068 ;;		Nothing
 22069 ;; This function is called by:
 22070 ;;		_high_isr
 22071 ;; This function uses a non-reentrant model
 22072 ;;
 22073                           
 22074                           	psect	text102
 22075  005B00                     __ptext102:
 22076                           	opt stack 0
 22077  005B00                     _rtcc_handler:
 22078                           	opt stack 15
 22079                           
 22080                           ;rtcc.c: 124: if(TMR1IE && TMR1IF)
 22081                           
 22082                           ;incstack = 0
 22083  005B00  B09D               	btfsc	3997,0,c	;volatile
 22084  005B02  A09E               	btfss	3998,0,c	;volatile
 22085  005B04  0012               	return	
 22086                           
 22087                           ;rtcc.c: 125: {
 22088                           ;rtcc.c: 126: TMR1IF = 0;
 22089  005B06  909E               	bcf	3998,0,c	;volatile
 22090                           
 22091                           ;rtcc.c: 127: TMR1ON = 0;
 22092  005B08  90CD               	bcf	4045,0,c	;volatile
 22093                           
 22094                           ;rtcc.c: 128: TMR1 = 32768UL;
 22095  005B0A  0E80               	movlw	128
 22096  005B0C  6ECF               	movwf	4047,c	;volatile
 22097  005B0E  6ACE               	clrf	4046,c	;volatile
 22098                           
 22099                           ;rtcc.c: 129: TMR1ON = 1;
 22100  005B10  80CD               	bsf	4045,0,c	;volatile
 22101                           
 22102                           ;rtcc.c: 130: deviceTime++;
 22103  005B12  0102               	movlb	2	; () banked
 22104  005B14  2BB4               	incf	_deviceTime& (0+255),f,b	;volatile
 22105  005B16  0E00               	movlw	0
 22106  005B18  23B5               	addwfc	(_deviceTime+1)& (0+255),f,b	;volatile
 22107  005B1A  23B6               	addwfc	(_deviceTime+2)& (0+255),f,b	;volatile
 22108  005B1C  23B7               	addwfc	(_deviceTime+3)& (0+255),f,b	;volatile
 22109                           
 22110                           ; BSR set to: 2
 22111                           ;rtcc.c: 131: localTime++;
 22112  005B1E  2BB8               	incf	_localTime& (0+255),f,b	;volatile
 22113  005B20  23B9               	addwfc	(_localTime+1)& (0+255),f,b	;volatile
 22114  005B22  23BA               	addwfc	(_localTime+2)& (0+255),f,b	;volatile
 22115  005B24  23BB               	addwfc	(_localTime+3)& (0+255),f,b	;volatile
 22116  005B26  0C00               	retlw	0	;funcret
 22117  005B28                     __end_of_rtcc_handler:
 22118                           	opt stack 0
 22119                           tosu	equ	0xFFF
 22120                           tosh	equ	0xFFE
 22121                           tosl	equ	0xFFD
 22122                           pclath	equ	0xFFA
 22123                           tblptru	equ	0xFF8
 22124                           tblptrh	equ	0xFF7
 22125                           tblptrl	equ	0xFF6
 22126                           tablat	equ	0xFF5
 22127                           prodh	equ	0xFF4
 22128                           prodl	equ	0xFF3
 22129                           intcon	equ	0xFF2
 22130                           indf0	equ	0xFEF
 22131                           postinc0	equ	0xFEE
 22132                           fsr0h	equ	0xFEA
 22133                           fsr0l	equ	0xFE9
 22134                           wreg	equ	0xFE8
 22135                           postinc1	equ	0xFE6
 22136                           plusw1	equ	0xFE3
 22137                           fsr1h	equ	0xFE2
 22138                           fsr1l	equ	0xFE1
 22139                           bsr	equ	0xFE0
 22140                           indf2	equ	0xFDF
 22141                           postinc2	equ	0xFDE
 22142                           postdec2	equ	0xFDD
 22143                           plusw2	equ	0xFDB
 22144                           fsr2h	equ	0xFDA
 22145                           fsr2l	equ	0xFD9
 22146                           status	equ	0xFD8
 22147                           tosu	equ	0xFFF
 22148                           tosh	equ	0xFFE
 22149                           tosl	equ	0xFFD
 22150                           pclath	equ	0xFFA
 22151                           tblptru	equ	0xFF8
 22152                           tblptrh	equ	0xFF7
 22153                           tblptrl	equ	0xFF6
 22154                           tablat	equ	0xFF5
 22155                           prodh	equ	0xFF4
 22156                           prodl	equ	0xFF3
 22157                           intcon	equ	0xFF2
 22158                           indf0	equ	0xFEF
 22159                           postinc0	equ	0xFEE
 22160                           fsr0h	equ	0xFEA
 22161                           fsr0l	equ	0xFE9
 22162                           wreg	equ	0xFE8
 22163                           postinc1	equ	0xFE6
 22164                           plusw1	equ	0xFE3
 22165                           fsr1h	equ	0xFE2
 22166                           fsr1l	equ	0xFE1
 22167                           bsr	equ	0xFE0
 22168                           indf2	equ	0xFDF
 22169                           postinc2	equ	0xFDE
 22170                           postdec2	equ	0xFDD
 22171                           plusw2	equ	0xFDB
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176                           	psect	text103
 22177  000000                     __ptext103:
 22178                           	opt stack 0
 22179                           tosu	equ	0xFFF
 22180                           tosh	equ	0xFFE
 22181                           tosl	equ	0xFFD
 22182                           pclath	equ	0xFFA
 22183                           tblptru	equ	0xFF8
 22184                           tblptrh	equ	0xFF7
 22185                           tblptrl	equ	0xFF6
 22186                           tablat	equ	0xFF5
 22187                           prodh	equ	0xFF4
 22188                           prodl	equ	0xFF3
 22189                           intcon	equ	0xFF2
 22190                           indf0	equ	0xFEF
 22191                           postinc0	equ	0xFEE
 22192                           fsr0h	equ	0xFEA
 22193                           fsr0l	equ	0xFE9
 22194                           wreg	equ	0xFE8
 22195                           postinc1	equ	0xFE6
 22196                           plusw1	equ	0xFE3
 22197                           fsr1h	equ	0xFE2
 22198                           fsr1l	equ	0xFE1
 22199                           bsr	equ	0xFE0
 22200                           indf2	equ	0xFDF
 22201                           postinc2	equ	0xFDE
 22202                           postdec2	equ	0xFDD
 22203                           plusw2	equ	0xFDB
 22204                           fsr2h	equ	0xFDA
 22205                           fsr2l	equ	0xFD9
 22206                           status	equ	0xFD8
 22207                           
 22208                           	psect	rparam
 22209  0000                     tosu	equ	0xFFF
 22210                           tosh	equ	0xFFE
 22211                           tosl	equ	0xFFD
 22212                           pclath	equ	0xFFA
 22213                           tblptru	equ	0xFF8
 22214                           tblptrh	equ	0xFF7
 22215                           tblptrl	equ	0xFF6
 22216                           tablat	equ	0xFF5
 22217                           prodh	equ	0xFF4
 22218                           prodl	equ	0xFF3
 22219                           intcon	equ	0xFF2
 22220                           indf0	equ	0xFEF
 22221                           postinc0	equ	0xFEE
 22222                           fsr0h	equ	0xFEA
 22223                           fsr0l	equ	0xFE9
 22224                           wreg	equ	0xFE8
 22225                           postinc1	equ	0xFE6
 22226                           plusw1	equ	0xFE3
 22227                           fsr1h	equ	0xFE2
 22228                           fsr1l	equ	0xFE1
 22229                           bsr	equ	0xFE0
 22230                           indf2	equ	0xFDF
 22231                           postinc2	equ	0xFDE
 22232                           postdec2	equ	0xFDD
 22233                           plusw2	equ	0xFDB
 22234                           fsr2h	equ	0xFDA
 22235                           fsr2l	equ	0xFD9
 22236                           status	equ	0xFD8
 22237                           
 22238                           	psect	temp
 22239  00005E                     btemp:
 22240                           	opt stack 0
 22241  00005E                     	ds	1
 22242  0000                     int$flags	set	btemp
 22243                           tosu	equ	0xFFF
 22244                           tosh	equ	0xFFE
 22245                           tosl	equ	0xFFD
 22246                           pclath	equ	0xFFA
 22247                           tblptru	equ	0xFF8
 22248                           tblptrh	equ	0xFF7
 22249                           tblptrl	equ	0xFF6
 22250                           tablat	equ	0xFF5
 22251                           prodh	equ	0xFF4
 22252                           prodl	equ	0xFF3
 22253                           intcon	equ	0xFF2
 22254                           indf0	equ	0xFEF
 22255                           postinc0	equ	0xFEE
 22256                           fsr0h	equ	0xFEA
 22257                           fsr0l	equ	0xFE9
 22258                           wreg	equ	0xFE8
 22259                           postinc1	equ	0xFE6
 22260                           plusw1	equ	0xFE3
 22261                           fsr1h	equ	0xFE2
 22262                           fsr1l	equ	0xFE1
 22263                           bsr	equ	0xFE0
 22264                           indf2	equ	0xFDF
 22265                           postinc2	equ	0xFDE
 22266                           postdec2	equ	0xFDD
 22267                           plusw2	equ	0xFDB
 22268                           fsr2h	equ	0xFDA
 22269                           fsr2l	equ	0xFD9
 22270                           status	equ	0xFD8
 22271                           tosu	equ	0xFFF
 22272                           tosh	equ	0xFFE
 22273                           tosl	equ	0xFFD
 22274                           pclath	equ	0xFFA
 22275                           tblptru	equ	0xFF8
 22276                           tblptrh	equ	0xFF7
 22277                           tblptrl	equ	0xFF6
 22278                           tablat	equ	0xFF5
 22279                           prodh	equ	0xFF4
 22280                           prodl	equ	0xFF3
 22281                           intcon	equ	0xFF2
 22282                           indf0	equ	0xFEF
 22283                           postinc0	equ	0xFEE
 22284                           fsr0h	equ	0xFEA
 22285                           fsr0l	equ	0xFE9
 22286                           wreg	equ	0xFE8
 22287                           postinc1	equ	0xFE6
 22288                           plusw1	equ	0xFE3
 22289                           fsr1h	equ	0xFE2
 22290                           fsr1l	equ	0xFE1
 22291                           bsr	equ	0xFE0
 22292                           indf2	equ	0xFDF
 22293                           postinc2	equ	0xFDE
 22294                           postdec2	equ	0xFDD
 22295                           plusw2	equ	0xFDB
 22296                           fsr2h	equ	0xFDA
 22297                           fsr2l	equ	0xFD9
 22298                           status	equ	0xFD8


Data Sizes:
    Strings     112
    Constant    66
    Data        1
    BSS         255
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     92      93
    BANK0           160    160     160
    BANK1           256    181     256
    BANK2           256      0     188
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    arpMap.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arpMap.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arpMap.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arpMap.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arpMap.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    arpMap.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Network_Read@debug_str.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    main@str.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_printf.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_sprintf.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_6(CODE[12]), STR_1(CODE[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK1[32]), Network_Read@debug_str(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK1[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_3(CODE[10]), STR_2(CODE[28]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK1[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), DEMO_UDP_Recv@str(COMRAM[32]), main@str(BANK1[32]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), DEMO_UDP_Recv@str(COMRAM[32]), main@str(BANK1[32]), 

    _doprnt@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_6(CODE[12]), STR_3(CODE[10]), STR_2(CODE[28]), STR_1(CODE[8]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), printf@ap(COMRAM[1]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), STR_7(CODE[7]), main@str(BANK1[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    S4302__prbuf$func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    S4302__prbuf$ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK1[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> main@str(BANK1[32]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 6
		 -> sprintf@pb(COMRAM[5]), printf@pb(COMRAM[5]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), DEMO_UDP_Recv@str(COMRAM[32]), main@str(BANK1[32]), 

    UDP_Receive@hptr.callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    UDP_Receive@hptr	PTR const struct . size(1) Largest target is 15
		 -> UDP_CallBackTable(CODE[15]), 

    TCP_Update@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Update@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetRxLength@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_GetReceivedData@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_InsertRxBuffer@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SendDone@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Send@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Close@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Connect@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Listen@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Bind@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketPoll@socket_ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_SocketInit@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Recv@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    currentTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    currentTCB	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_Snd@data	PTR unsigned char  size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCP_Snd@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCP_Snd@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCB_Check@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Check@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Reset@tcbPtr	PTR struct . size(2) Largest target is 0
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), main@str(BANK1[32]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), Network_Read@debug_str(BANK1[80]), NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Remove@ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    TCB_Insert@ptr.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.prevTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.nextTCB	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.txBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.txBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.rxBufferPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2714$rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList.rxBufferStart	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    tcbList	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    SYSLOG_Write@message	PTR const unsigned char  size(2) Largest target is 32
		 -> main@str(BANK1[32]), STR_5(CODE[13]), STR_4(CODE[17]), 

    IPv4_Start@macAddress	PTR const struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), broadcastMAC(CODE[6]), arpMap(BANK2[104]), NULL(NULL[0]), 

    IPV4_PseudoHeaderChecksum@v	PTR unsigned int  size(1) Largest target is 12
		 -> IPV4_PseudoHeaderChecksum@tmp(COMRAM[12]), 

    ICMP_EchoReply@icmpHdr	PTR struct . size(1) Largest target is 8
		 -> ICMP_Receive@icmpHdr(BANK0[8]), 

    ICMP_EchoReply@ipv4Hdr	PTR struct . size(2) Largest target is 20
		 -> ipv4Header(BANK2[20]), 

    ICMP_Receive@ipv4Hdr	PTR struct . size(2) Largest target is 20
		 -> ipv4Header(BANK2[20]), 

    S1795$callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    UDP_CallBackTable.callBack	PTR FTN(int ,)void  size(3) Largest target is 0
		 -> DHCP_Handler(), DEMO_UDP_Recv(), DEMO_UDP_IdlePkt(), 

    sp__ARPV4_Lookup	PTR struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), arpMap(BANK2[104]), NULL(NULL[0]), 

    ARPV4_Lookup@entry_pointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Update@entryPointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Packet@arpPtr	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ARPV4_Packet@entryPointer	PTR struct . size(2) Largest target is 104
		 -> arpMap(BANK2[104]), 

    ETH_GetMAC@macAddr	PTR unsigned char  size(1) Largest target is 28
		 -> DHCP_Handler@ethMAC(COMRAM[6]), DHCP_Request@ethMAC(BANK0[6]), ARPV4_Request@header(COMRAM[28]), header.sha(COMRAM[6]), 
		 -> ARPV4_Packet@header(COMRAM[28]), 

    ETH_Insert@data	PTR unsigned char  size(1) Largest target is 2
		 -> UDP_Send@cksm(COMRAM[2]), UDP_Send@udpLength(COMRAM[2]), TCP_Snd@cksm(BANK0[2]), IPV4_Send@cksm(COMRAM[2]), 
		 -> IPV4_Send@totalLength(COMRAM[2]), ICMP_EchoReply@cksm(BANK0[2]), 

    ETH_WriteStart@dest_mac	PTR const struct . size(2) Largest target is 104
		 -> arpMap.macAddress(BANK2[6]), broadcastMAC(CODE[6]), header.sha(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), 
		 -> arpMap(BANK2[104]), NULL(NULL[0]), 

    ETH_WriteBlock@data	PTR void  size(2) Largest target is 28
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@local_ip(COMRAM[4]), main@str(BANK1[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), TCP_Snd@txHeader(BANK0[20]), Network_Read@debug_str(BANK1[80]), 
		 -> dhcpName(CODE[21]), DHCP_Request@ethMAC(BANK0[6]), ARPV4_Request@header(COMRAM[28]), ARPV4_Packet@header(COMRAM[28]), 
		 -> NULL(NULL[0]), 

    ETH_WriteBlock@p	PTR unsigned char  size(2) Largest target is 28
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@local_ip(COMRAM[4]), main@str(BANK1[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), TCP_Snd@txHeader(BANK0[20]), Network_Read@debug_str(BANK1[80]), 
		 -> dhcpName(CODE[21]), DHCP_Request@ethMAC(BANK0[6]), ARPV4_Request@header(COMRAM[28]), ARPV4_Packet@header(COMRAM[28]), 
		 -> NULL(NULL[0]), 

    ETH_ReadBlock@buffer	PTR void  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), 
		 -> DEMO_UDP_Recv@str(COMRAM[32]), data(BANK1[2]), idle_packet(BANK1[2]), main@str(BANK1[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), udpHeader(BANK2[8]), tcpHeader(BANK1[20]), 
		 -> Network_Read@debug_str(BANK1[80]), Network_Read@header(BANK1[14]), ipv4Header(BANK2[20]), ICMP_Receive@icmpHdr(BANK0[8]), 
		 -> DHCP_Handler@ethPktMAC(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), NULL(NULL[0]), 

    ETH_ReadBlock@p	PTR unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), 
		 -> DEMO_UDP_Recv@str(COMRAM[32]), data(BANK1[2]), idle_packet(BANK1[2]), main@str(BANK1[32]), 
		 -> STR_5(CODE[13]), STR_4(CODE[17]), udpHeader(BANK2[8]), tcpHeader(BANK1[20]), 
		 -> Network_Read@debug_str(BANK1[80]), Network_Read@header(BANK1[14]), ipv4Header(BANK2[20]), ICMP_Receive@icmpHdr(BANK0[8]), 
		 -> DHCP_Handler@ethPktMAC(COMRAM[6]), ARPV4_Packet@header(COMRAM[28]), NULL(NULL[0]), 

    sp__MAC_getAddress	PTR const struct . size(1) Largest target is 6
		 -> macAddress(CODE[6]), 

    eth_MAC	PTR const struct . size(3) Largest target is 131063
		 -> macAddress(CODE[6]), ROM(CODE[131063]), 

    time@t	PTR long  size(2) Largest target is 4
		 -> main@t(BANK1[4]), main@now_p(BANK1[4]), main@ip_timer(BANK1[4]), Network_Manage@now(BANK1[4]), 
		 -> arpTimer(BANK2[4]), NULL(NULL[0]), 

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 32
		 -> DEMO_UDP_Recv@str2(COMRAM[16]), DEMO_UDP_Recv@str1(COMRAM[16]), DEMO_UDP_Recv@str(COMRAM[32]), main@str(BANK1[32]), 


Critical Paths under _main in COMRAM

    _lcd_puts->_lcd_putch
    _lcd_putch->_lcd_write_data
    _lcd_goto1->_lcd_write_ctrl
    _initHW->_lcd_init
    _lcd_init->_lcd_write_ctrl
    _SYSLOG_Write->_printf
    _SYSLOG_Init->_printf
    _printf->__doprnt
    _Network_WaitForLink->_ETH_CheckLinkUp
    _sprintf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _IPV4_Packet->_TCP_Recv
    _UDP_Receive->_ETH_ReadBlock
    _TCP_ParseTCPOptions->_ETH_Dump
    _ETH_Read16->_SPI_ExchangeByte
    _ETH_Dump->_ENC28_Rcr16
    _TCP_FiniteStateMachine->_TCP_PayloadSave
    _TCP_Snd->_IPv4_Start
    _ICMP_Receive->_ICMP_EchoReply
    _ICMP_EchoReply->_IPv4_Start
    _ETH_SaveRDPT->_ENC28_Rcr16
    _ETH_Copy->_ENC28_Rcr16
    _ETH_RxComputeChecksum->_ETH_ComputeChecksum
    _ETH_ComputeChecksum->_ETH_Read8
    _ETH_Read8->_SPI_ExchangeByte
    _ETH_NextPacketUpdate->_ENC28_Wcr16
    _ETH_Flush->_ENC28_Wcr16
    _ARPV4_Packet->_ETH_WriteStart
    _ETH_ReadBlock->_SPI_ExchangeByte
    _ETH_EventHandler->_ETH_CheckLinkUp
    _DHCP_Request->_UDP_Start
    _DHCP_WriteZeros->_ETH_Write8
    _Network_Init->_ETH_Init
    _ETH_Init->_ETH_CheckLinkUp
    _ETH_SendSystemReset->_SPI_ExchangeByte
    _ETH_CheckLinkUp->_ENC28_PhyRead
    _ENC28_PhyRead->_ENC28_Rcr16
    _ENC28_PhyWrite->_ENC28_Wcr16
    _ENC28_Wcr8->_ENC28_BankSel
    _DEMO_UDP_Send->_UDP_Start
    _UDP_Write8->_ETH_Write8
    _UDP_Write32->_ETH_Write32
    _UDP_Start->_IPv4_Start
    _IPv4_Start->_ARPV4_Request
    _ETH_Write8->_SPI_ExchangeByte
    _ETH_Write32->_SPI_ExchangeByte
    _ETH_Write16->_SPI_ExchangeByte
    _ARPV4_Request->_ETH_WriteStart
    _ETH_WriteStart->_ENC28_Wcr16
    _ETH_WriteBlock->_SPI_ExchangeByte
    _ETH_GetMAC->_ENC28_Rcr8
    _ETH_ResetByteCount->_ENC28_Rcr16
    _UDP_Send->_IPV4_Send
    _IPV4_Send->_ETH_TxComputeChecksum
    _ETH_TxComputeChecksum->_ENC28_Rcr16
    _ENC28_Rcr8->_ENC28_BankSel
    _ENC28_Bfc->_ENC28_BankSel
    _ETH_Send->_ENC28_Wcr16
    _ENC28_Bfs->_ENC28_BankSel
    _ETH_Insert->_ENC28_Rcr16
    _ENC28_Wcr16->_ENC28_BankSel
    _ETH_GetByteCount->_ENC28_Rcr16
    _ENC28_Rcr16->_ENC28_BankSel
    _ENC28_BankSel->_SPI_ExchangeByte
    _DEMO_UDP_IPLockTimer->_DEMO_UDP_SetClaimIP

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Network_Manage->_Network_Read
    _TCP_Update->_TCP_FiniteStateMachine
    _Network_Read->_IPV4_Packet
    _IPV4_Packet->_TCP_Recv
    _TCP_Recv->_TCP_FiniteStateMachine
    _TCP_FiniteStateMachine->_TCP_PayloadSave
    _TCP_PayloadSave->_TCP_Snd
    _TCP_Snd->_IPv4_Start
    _ICMP_Receive->_ICMP_EchoReply
    _ICMP_EchoReply->_IPv4_Start
    _DHCP_Manage->_DHCP_Request
    _DHCP_Request->_UDP_Start
    _DEMO_UDP_Send->_UDP_Start
    _UDP_Start->_IPv4_Start

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Network_Manage
    _Network_Manage->_Network_Read
    _Network_Read->_IPV4_Packet

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  512063
                                            127 BANK1     54    54      0
               _DEMO_UDP_IPLockTimer
                      _DEMO_UDP_Send
                       _IPV4_GetMyIP
                       _Network_Init
                     _Network_Manage
                _Network_WaitForLink
                        _SYSLOG_Init
                       _SYSLOG_Write
                             _initHW
                          _lcd_goto1
                           _lcd_puts
                             _memset
                            _sprintf
                               _time
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     852
                                              1 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2     281
                                              3 COMRAM     2     0      2
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (2) _lcd_putch                                            1     1      0      88
                                              2 COMRAM     1     1      0
                           _lcd_busy
                     _lcd_write_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_data                                       1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_goto1                                            1     1      0      44
                                              2 COMRAM     1     1      0
                           _lcd_busy
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (1) _initHW                                               0     0      0      91
                     _ADC_Initialize
                           _LED_Init
                           _lcd_init
                          _rtcc_init
                           _spi_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rtcc_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             5     5      0      22
                                              2 COMRAM     1     1      0
                           _lcd_busy
                      _lcd_init_pins
                     _lcd_write_ctrl
 ---------------------------------------------------------------------------------
 (2) _lcd_write_ctrl                                       1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_init_pins                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0      69
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSLOG_Write                                         4     2      2    3435
                                             38 COMRAM     4     2      2
                             _printf
                               _time
 ---------------------------------------------------------------------------------
 (1) _SYSLOG_Init                                          4     4      0    3185
                                             38 COMRAM     4     4      0
                             _printf
                               _time
 ---------------------------------------------------------------------------------
 (2) _printf                                              11     7      4    2518
                                             27 COMRAM    11     7      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _Network_WaitForLink                                  0     0      0    4647
                    _ETH_CheckLinkUp
 ---------------------------------------------------------------------------------
 (1) _Network_Manage                                       5     5      0  419749
                                            122 BANK1      5     5      0
                       _ARPV4_Update
                        _DHCP_Manage
                   _ETH_EventHandler
                       _Network_Read
                         _TCP_Update
                               _time
 ---------------------------------------------------------------------------------
 (2) _TCP_Update                                          12    12      0  117252
                                            117 BANK0     12    12      0
             _TCP_FiniteStateMachine
 ---------------------------------------------------------------------------------
 (2) _Network_Read                                        98    98      0  229036
                                            156 BANK0      4     4      0
                                             28 BANK1     94    94      0
                       _ARPV4_Packet
                          _ETH_Flush
               _ETH_NextPacketUpdate
                      _ETH_ReadBlock
                        _IPV4_Packet
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             17     6     11    2734
                                             27 COMRAM    17     6     11
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             20    18      2    2334
                                             13 COMRAM    14    12      2
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              8 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     466
                                              1 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IPV4_Packet                                         73    73      0  201018
                                            151 BANK0      5     5      0
                                              0 BANK1     28    28      0
                           _ETH_Dump
                      _ETH_ReadBlock
              _ETH_RxComputeChecksum
                       _ICMP_Receive
          _IPV4_PseudoHeaderChecksum
                           _TCP_Recv
                        _UDP_Receive
 ---------------------------------------------------------------------------------
 (4) _UDP_Receive                                         10     8      2    2096
                                             11 COMRAM    10     8      2
                      _ETH_ReadBlock
 ---------------------------------------------------------------------------------
 (4) _TCP_Recv                                            37    31      6  124560
                                             89 COMRAM     3     3      0
                                            117 BANK0     34    28      6
                      _ETH_ReadBlock
             _TCP_FiniteStateMachine
                _TCP_ParseTCPOptions
 ---------------------------------------------------------------------------------
 (5) _TCP_ParseTCPOptions                                  6     6      0    5525
                                             13 COMRAM     6     6      0
                           _ETH_Dump
                         _ETH_Read16
                          _ETH_Read8
 ---------------------------------------------------------------------------------
 (6) _ETH_Read16                                           4     2      2      68
                                              2 COMRAM     4     2      2
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Dump                                             4     2      2    4892
                                              9 COMRAM     4     2      2
                        _ENC28_Rcr16
                        _ENC28_Wcr16
 ---------------------------------------------------------------------------------
 (3) _TCP_FiniteStateMachine                              17    17      0  116772
                                            100 BANK0     17    17      0
                          _TCB_Reset
                    _TCP_PayloadSave
                            _TCP_Snd
 ---------------------------------------------------------------------------------
 (4) _TCP_PayloadSave                                     17    15      2   58286
                                             86 COMRAM     3     3      0
                                             86 BANK0     14    12      2
                      _ETH_ReadBlock
                            _TCP_Snd
 ---------------------------------------------------------------------------------
 (4) _TCP_Snd                                             79    77      2   56140
                                              7 BANK0     79    77      2
                         _ETH_Insert
              _ETH_TxComputeChecksum
                     _ETH_WriteBlock
                          _IPV4_Send
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (4) _TCB_Reset                                            4     2      2    1823
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _IPV4_PseudoHeaderChecksum                           24    22      2     413
                                              1 COMRAM    24    22      2
 ---------------------------------------------------------------------------------
 (4) _ICMP_Receive                                        15    13      2   61418
                                             17 BANK0     15    13      2
                      _ETH_ReadBlock
                       _ETH_SaveRDPT
                     _ICMP_EchoReply
 ---------------------------------------------------------------------------------
 (5) _ICMP_EchoReply                                      16    14      2   58951
                                             86 COMRAM     6     6      0
                                              7 BANK0     10     8      2
                           _ETH_Copy
                         _ETH_Insert
                       _ETH_SaveRDPT
              _ETH_TxComputeChecksum
                        _ETH_Write16
                          _IPV4_Send
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (6) _ETH_SaveRDPT                                         0     0      0     387
                        _ENC28_Rcr16
 ---------------------------------------------------------------------------------
 (6) _ETH_Copy                                             9     7      2    6551
                                              9 COMRAM     9     7      2
                          _ENC28_Bfc
                          _ENC28_Bfs
                        _ENC28_Rcr16
                         _ENC28_Rcr8
                        _ENC28_Wcr16
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     311
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _ETH_RxComputeChecksum                               14    10      4    5256
                                             17 COMRAM    14    10      4
                        _ENC28_Rcr16
                        _ENC28_Wcr16
                _ETH_ComputeChecksum
 ---------------------------------------------------------------------------------
 (5) _ETH_ComputeChecksum                                 14    10      4     634
                                              3 COMRAM    14    10      4
                          _ETH_Read8
 ---------------------------------------------------------------------------------
 (6) _ETH_Read8                                            1     1      0      65
                                              2 COMRAM     1     1      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _ETH_NextPacketUpdate                                 0     0      0    3382
                        _ENC28_Wcr16
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _ETH_Flush                                            0     0      0    4294
                          _ENC28_Bfs
                        _ENC28_Wcr16
 ---------------------------------------------------------------------------------
 (3) _ARPV4_Packet                                        70    70      0   14369
                                             13 COMRAM    70    70      0
                         _ETH_GetMAC
                      _ETH_ReadBlock
                           _ETH_Send
                     _ETH_WriteBlock
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (5) _ETH_ReadBlock                                        9     5      4    1851
                                              2 COMRAM     9     5      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (2) _ETH_EventHandler                                     4     4      0   12744
                                             15 COMRAM     4     4      0
                          _ENC28_Bfc
                          _ENC28_Bfs
                        _ENC28_Rcr16
                         _ENC28_Rcr8
                        _ENC28_Wcr16
                         _ENC28_Wcr8
                    _ETH_CheckLinkUp
 ---------------------------------------------------------------------------------
 (2) _DHCP_Manage                                          0     0      0   59873
                       _DHCP_Request
 ---------------------------------------------------------------------------------
 (3) _DHCP_Request                                        10    10      0   59873
                                             15 BANK0      8     8      0
                    _DHCP_WriteZeros
                         _ETH_GetMAC
                        _ETH_Write16
                        _ETH_Write32
                         _ETH_Write8
                     _ETH_WriteBlock
                           _UDP_Send
                          _UDP_Start
 ---------------------------------------------------------------------------------
 (4) _DHCP_WriteZeros                                      2     0      2     183
                                              3 COMRAM     2     0      2
                         _ETH_Write8
 ---------------------------------------------------------------------------------
 (2) _ARPV4_Update                                         3     3      0      70
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Network_Init                                         0     0      0   18382
                         _ARPV4_Init
                           _ETH_Init
                          _IPV4_Init
                           _TCP_Init
                               _time
 ---------------------------------------------------------------------------------
 (1) _time                                                 9     5      4     644
                                              1 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _TCP_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IPV4_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ETH_Init                                             1     1      0   17670
                                             15 COMRAM     1     1      0
                          _ENC28_Bfs
                     _ENC28_PhyWrite
                         _ENC28_Rcr8
                        _ENC28_Wcr16
                         _ENC28_Wcr8
                    _ETH_CheckLinkUp
                _ETH_SendSystemReset
                     _MAC_getAddress
 ---------------------------------------------------------------------------------
 (3) _MAC_getAddress                                       2     0      2       0
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ETH_SendSystemReset                                  0     0      0      31
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (2) _ETH_CheckLinkUp                                      2     2      0    4647
                                             13 COMRAM     2     2      0
                      _ENC28_PhyRead
 ---------------------------------------------------------------------------------
 (3) _ENC28_PhyRead                                        4     2      2    4613
                                              9 COMRAM     4     2      2
                          _ENC28_Bfc
                          _ENC28_Bfs
                        _ENC28_Rcr16
                         _ENC28_Rcr8
                         _ENC28_Wcr8
 ---------------------------------------------------------------------------------
 (3) _ENC28_PhyWrite                                       4     2      2    6209
                                              7 COMRAM     4     2      2
                         _ENC28_Rcr8
                        _ENC28_Wcr16
                         _ENC28_Wcr8
 ---------------------------------------------------------------------------------
 (4) _ENC28_Wcr8                                           2     1      1    2173
                                              4 COMRAM     2     1      1
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (2) _ARPV4_Init                                           1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IPV4_GetMyIP                                         4     0      4       0
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _DEMO_UDP_Send                                        7     7      0   56303
                                             87 COMRAM     4     4      0
                                             15 BANK0      3     3      0
                  _ADC_GetConversion
              _DEMO_UDP_ClaimIPCheck
                           _UDP_Send
                          _UDP_Start
                        _UDP_Write32
                         _UDP_Write8
 ---------------------------------------------------------------------------------
 (2) _UDP_Write8                                           1     1      0      93
                                              3 COMRAM     1     1      0
                         _ETH_Write8
 ---------------------------------------------------------------------------------
 (2) _UDP_Write32                                          4     0      4    1635
                                              6 COMRAM     4     0      4
                        _ETH_Write32
 ---------------------------------------------------------------------------------
 (4) _UDP_Start                                            9     1      8   23906
                                             86 COMRAM     1     1      0
                                              7 BANK0      8     0      8
                 _ETH_ResetByteCount
                        _ETH_Write16
                         _IPv4_Start
 ---------------------------------------------------------------------------------
 (5) _IPv4_Start                                          20    15      5   20488
                                             73 COMRAM    13     8      5
                                              0 BANK0      7     7      0
                       _ARPV4_Lookup
                      _ARPV4_Request
                        _ETH_Write16
                        _ETH_Write32
                         _ETH_Write8
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (6) _ETH_Write8                                           1     1      0      62
                                              2 COMRAM     1     1      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Write32                                          4     0      4    1514
                                              2 COMRAM     4     0      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Write16                                          2     0      2    1250
                                              2 COMRAM     2     0      2
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ARPV4_Request                                       60    56      4   11890
                                             13 COMRAM    60    56      4
                         _ETH_GetMAC
                           _ETH_Send
                     _ETH_WriteBlock
                     _ETH_WriteStart
 ---------------------------------------------------------------------------------
 (6) _ETH_WriteStart                                       6     2      4    4489
                                              7 COMRAM     6     2      4
                         _ENC28_Rcr8
                        _ENC28_Wcr16
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_WriteBlock                                       6     2      4    1576
                                              2 COMRAM     6     2      4
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_GetMAC                                           1     1      0     664
                                              6 COMRAM     1     1      0
                         _ENC28_Rcr8
 ---------------------------------------------------------------------------------
 (6) _ARPV4_Lookup                                        11     7      4     257
                                              1 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (5) _ETH_ResetByteCount                                   0     0      0     387
                        _ENC28_Rcr16
 ---------------------------------------------------------------------------------
 (4) _UDP_Send                                             9     9      0   30394
                                             34 COMRAM     9     9      0
                   _ETH_GetByteCount
                         _ETH_Insert
              _ETH_TxComputeChecksum
                          _IPV4_Send
 ---------------------------------------------------------------------------------
 (5) _IPV4_Send                                           11     9      2   17180
                                             23 COMRAM    11     9      2
                         _ETH_Insert
                           _ETH_Send
              _ETH_TxComputeChecksum
 ---------------------------------------------------------------------------------
 (6) _ETH_TxComputeChecksum                               14     8      6    7208
                                              9 COMRAM    14     8      6
                          _ENC28_Bfc
                          _ENC28_Bfs
                        _ENC28_Rcr16
                         _ENC28_Rcr8
                        _ENC28_Wcr16
 ---------------------------------------------------------------------------------
 (4) _ENC28_Rcr8                                           2     2      0     316
                                              4 COMRAM     2     2      0
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (4) _ENC28_Bfc                                            2     1      1     763
                                              4 COMRAM     2     1      1
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ETH_Send                                             0     0      0    4294
                          _ENC28_Bfs
                        _ENC28_Wcr16
 ---------------------------------------------------------------------------------
 (4) _ENC28_Bfs                                            2     1      1     943
                                              4 COMRAM     2     1      1
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (6) _ETH_Insert                                           7     3      4    5201
                                              9 COMRAM     7     3      4
                        _ENC28_Rcr16
                        _ENC28_Wcr16
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (7) _ENC28_Wcr16                                          3     1      2    3351
                                              4 COMRAM     3     1      2
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _ETH_GetByteCount                                     4     2      2     421
                                              9 COMRAM     4     2      2
                        _ENC28_Rcr16
 ---------------------------------------------------------------------------------
 (4) _ENC28_Rcr16                                          5     3      2     387
                                              4 COMRAM     5     3      2
                      _ENC28_BankSel
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _ENC28_BankSel                                        2     2      0     189
                                              2 COMRAM     2     2      0
                   _SPI_ExchangeByte
 ---------------------------------------------------------------------------------
 (5) _SPI_ExchangeByte                                     1     1      0      31
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DEMO_UDP_ClaimIPCheck                                2     2      0      24
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DEMO_UDP_IPLockTimer                                 0     0      0      22
                _DEMO_UDP_SetClaimIP
 ---------------------------------------------------------------------------------
 (2) _DEMO_UDP_SetClaimIP                                  1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _low_isr                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _high_isr                                            0     0      0       0
                       _rtcc_handler
 ---------------------------------------------------------------------------------
 (16) _rtcc_handler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DEMO_UDP_IPLockTimer
     _DEMO_UDP_SetClaimIP
   _DEMO_UDP_Send
     _ADC_GetConversion
     _DEMO_UDP_ClaimIPCheck
     _UDP_Send
       _ETH_GetByteCount
         _ENC28_Rcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_Insert
         _ENC28_Rcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_TxComputeChecksum
         _ENC28_Bfc
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Bfs
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Rcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Rcr8
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _IPV4_Send
         _ETH_Insert
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ETH_Send
           _ENC28_Bfs
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_TxComputeChecksum
           _ENC28_Bfc
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Bfs
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
     _UDP_Start
       _ETH_ResetByteCount
         _ENC28_Rcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_Write16
         _SPI_ExchangeByte
       _IPv4_Start
         _ARPV4_Lookup
         _ARPV4_Request
           _ETH_GetMAC
             _ENC28_Rcr8
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Send
             _ENC28_Bfs
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
           _ETH_WriteStart
             _ENC28_Rcr8
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_Write16
           _SPI_ExchangeByte
         _ETH_Write32
           _SPI_ExchangeByte
         _ETH_Write8
           _SPI_ExchangeByte
         _ETH_WriteStart
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _SPI_ExchangeByte
     _UDP_Write32
       _ETH_Write32
         _SPI_ExchangeByte
     _UDP_Write8
       _ETH_Write8
         _SPI_ExchangeByte
   _IPV4_GetMyIP
   _Network_Init
     _ARPV4_Init
     _ETH_Init
       _ENC28_Bfs
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_PhyWrite
         _ENC28_Rcr8
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr8
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ENC28_Rcr8
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Wcr16
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Wcr8
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_CheckLinkUp
         _ENC28_PhyRead
           _ENC28_Bfc
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Bfs
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
       _ETH_SendSystemReset
         _SPI_ExchangeByte
       _MAC_getAddress
     _IPV4_Init
     _TCP_Init
     _time
   _Network_Manage
     _ARPV4_Update
     _DHCP_Manage
       _DHCP_Request
         _DHCP_WriteZeros
           _ETH_Write8
             _SPI_ExchangeByte
         _ETH_GetMAC
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_Write16
           _SPI_ExchangeByte
         _ETH_Write32
           _SPI_ExchangeByte
         _ETH_Write8
           _SPI_ExchangeByte
         _ETH_WriteBlock
           _SPI_ExchangeByte
         _UDP_Send
           _ETH_GetByteCount
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Insert
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_TxComputeChecksum
             _ENC28_Bfc
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Bfs
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Rcr8
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _IPV4_Send
             _ETH_Insert
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Send
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENC28_Bfc
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
         _UDP_Start
           _ETH_ResetByteCount
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_Write16
             _SPI_ExchangeByte
           _IPv4_Start
             _ARPV4_Lookup
             _ARPV4_Request
               _ETH_GetMAC
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Send
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _ETH_Write32
               _SPI_ExchangeByte
             _ETH_Write8
               _SPI_ExchangeByte
             _ETH_WriteStart
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
     _ETH_EventHandler
       _ENC28_Bfc
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Bfs
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Rcr16
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Rcr8
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Wcr16
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ENC28_Wcr8
         _ENC28_BankSel
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_CheckLinkUp
         _ENC28_PhyRead
           _ENC28_Bfc
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Bfs
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
     _Network_Read
       _ARPV4_Packet
         _ETH_GetMAC
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_ReadBlock
           _SPI_ExchangeByte
         _ETH_Send
           _ENC28_Bfs
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_WriteBlock
           _SPI_ExchangeByte
         _ETH_WriteStart
           _ENC28_Rcr8
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_Flush
         _ENC28_Bfs
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
       _ETH_NextPacketUpdate
         _ENC28_Wcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _SPI_ExchangeByte
       _ETH_ReadBlock
         _SPI_ExchangeByte
       _IPV4_Packet
         _ETH_Dump
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
         _ETH_ReadBlock
           _SPI_ExchangeByte
         _ETH_RxComputeChecksum
           _ENC28_Rcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ENC28_Wcr16
             _ENC28_BankSel
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_ComputeChecksum
             _ETH_Read8
               _SPI_ExchangeByte
         _ICMP_Receive
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _ETH_SaveRDPT
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ICMP_EchoReply
             _ETH_Copy
               _ENC28_Bfc
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               ___wmul
             _ETH_Insert
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_SaveRDPT
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENC28_Bfc
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _IPV4_Send
               _ETH_Insert
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Send
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENC28_Bfc
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
             _IPv4_Start
               _ARPV4_Lookup
               _ARPV4_Request
                 _ETH_GetMAC
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Send
                   _ENC28_Bfs
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_Write32
                 _SPI_ExchangeByte
               _ETH_Write8
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
         _IPV4_PseudoHeaderChecksum
         _TCP_Recv
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _TCP_FiniteStateMachine
             _TCB_Reset
             _TCP_PayloadSave
               _ETH_ReadBlock
                 _SPI_ExchangeByte
               _TCP_Snd
                 _ETH_Insert
                   _ENC28_Rcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENC28_Bfc
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Bfs
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Rcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _IPV4_Send
                   _ETH_Insert
                     _ENC28_Rcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ETH_Send
                     _ENC28_Bfs
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_TxComputeChecksum
                     _ENC28_Bfc
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Bfs
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Rcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Rcr8
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                 _IPv4_Start
                   _ARPV4_Lookup
                   _ARPV4_Request
                     _ETH_GetMAC
                       _ENC28_Rcr8
                         _ENC28_BankSel
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                     _ETH_Send
                       _ENC28_Bfs
                         _ENC28_BankSel
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ENC28_Wcr16
                         _ENC28_BankSel
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                     _ETH_WriteBlock
                       _SPI_ExchangeByte
                     _ETH_WriteStart
                       _ENC28_Rcr8
                         _ENC28_BankSel
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _ENC28_Wcr16
                         _ENC28_BankSel
                           _SPI_ExchangeByte
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_Write16
                     _SPI_ExchangeByte
                   _ETH_Write32
                     _SPI_ExchangeByte
                   _ETH_Write8
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENC28_Rcr8
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
             _TCP_Snd
               _ETH_Insert
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENC28_Bfc
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _IPV4_Send
                 _ETH_Insert
                   _ENC28_Rcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ETH_Send
                   _ENC28_Bfs
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_TxComputeChecksum
                   _ENC28_Bfc
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Bfs
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Rcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
               _IPv4_Start
                 _ARPV4_Lookup
                 _ARPV4_Request
                   _ETH_GetMAC
                     _ENC28_Rcr8
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_Send
                     _ENC28_Bfs
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                   _ETH_WriteBlock
                     _SPI_ExchangeByte
                   _ETH_WriteStart
                     _ENC28_Rcr8
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _ENC28_Wcr16
                       _ENC28_BankSel
                         _SPI_ExchangeByte
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Write16
                   _SPI_ExchangeByte
                 _ETH_Write32
                   _SPI_ExchangeByte
                 _ETH_Write8
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
           _TCP_ParseTCPOptions
             _ETH_Dump
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Read16
               _SPI_ExchangeByte
             _ETH_Read8
               _SPI_ExchangeByte
         _UDP_Receive
           _ETH_ReadBlock
             _SPI_ExchangeByte
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
     _TCP_Update
       _TCP_FiniteStateMachine
         _TCB_Reset
         _TCP_PayloadSave
           _ETH_ReadBlock
             _SPI_ExchangeByte
           _TCP_Snd
             _ETH_Insert
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENC28_Bfc
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_WriteBlock
               _SPI_ExchangeByte
             _IPV4_Send
               _ETH_Insert
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ETH_Send
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_TxComputeChecksum
                 _ENC28_Bfc
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
             _IPv4_Start
               _ARPV4_Lookup
               _ARPV4_Request
                 _ETH_GetMAC
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_Send
                   _ENC28_Bfs
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                 _ETH_WriteBlock
                   _SPI_ExchangeByte
                 _ETH_WriteStart
                   _ENC28_Rcr8
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _ENC28_Wcr16
                     _ENC28_BankSel
                       _SPI_ExchangeByte
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Write16
                 _SPI_ExchangeByte
               _ETH_Write32
                 _SPI_ExchangeByte
               _ETH_Write8
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
         _TCP_Snd
           _ETH_Insert
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _SPI_ExchangeByte
           _ETH_TxComputeChecksum
             _ENC28_Bfc
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Bfs
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Rcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Rcr8
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ENC28_Wcr16
               _ENC28_BankSel
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
           _ETH_WriteBlock
             _SPI_ExchangeByte
           _IPV4_Send
             _ETH_Insert
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
             _ETH_Send
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_TxComputeChecksum
               _ENC28_Bfc
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Bfs
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
           _IPv4_Start
             _ARPV4_Lookup
             _ARPV4_Request
               _ETH_GetMAC
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_Send
                 _ENC28_Bfs
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
               _ETH_WriteBlock
                 _SPI_ExchangeByte
               _ETH_WriteStart
                 _ENC28_Rcr8
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _ENC28_Wcr16
                   _ENC28_BankSel
                     _SPI_ExchangeByte
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
             _ETH_Write16
               _SPI_ExchangeByte
             _ETH_Write32
               _SPI_ExchangeByte
             _ETH_Write8
               _SPI_ExchangeByte
             _ETH_WriteStart
               _ENC28_Rcr8
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _ENC28_Wcr16
                 _ENC28_BankSel
                   _SPI_ExchangeByte
                 _SPI_ExchangeByte
               _SPI_ExchangeByte
     _time
   _Network_WaitForLink
     _ETH_CheckLinkUp
       _ENC28_PhyRead
         _ENC28_Bfc
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Bfs
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Rcr16
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Rcr8
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
         _ENC28_Wcr8
           _ENC28_BankSel
             _SPI_ExchangeByte
           _SPI_ExchangeByte
   _SYSLOG_Init
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
     _time
   _SYSLOG_Write
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
     _time
   _initHW
     _ADC_Initialize
     _LED_Init
     _lcd_init
       _lcd_busy
       _lcd_init_pins
       _lcd_write_ctrl
     _rtcc_init
     _spi_init
     _uart_init
   _lcd_goto1
     _lcd_busy
     _lcd_write_ctrl
   _lcd_puts
     _lcd_putch
       _lcd_busy
       _lcd_write_data
   _memset
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
   _time

 _low_isr (ROOT)

 _high_isr (ROOT)
   _rtcc_handler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      BC       9       73.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     B5     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5C      5D       1       98.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B9      29        0.0%
DATA                 0      0     2B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Sep 09 15:12:50 2015

                         __CFG_BW$16 000000                                   l33 5A48  
                     ENC28_PhyRead@a 000D                                   bsr 000FE0  
                ___wmul@multiplicand 0004                     ??_ICMP_EchoReply 0057  
                 __size_of_ENC28_Bfc 001E          ??_IPV4_PseudoHeaderChecksum 0004  
                 __size_of_ENC28_Bfs 001E                       ??_ICMP_Receive 0073  
                       __CFG_CP0$OFF 000000                                  PL20 2210  
                                PL30 22A6                                  PL22 2232  
                                PL40 2F68                                  PL32 22C0  
                                PL24 2278                                  PL50 2344  
                                PL42 3DBE                                  PL34 22CC  
                                PL26 2282                                  PL60 2F88  
                                PL52 3BE8                                  PL44 2316  
                                PL36 45D2                                  PL28 29EE  
                                PL70 4170                                  PL62 35B6  
                                PL54 234C                                  PL46 2332  
                                PL38 22EE                                  PL80 23A2  
                                PL72 2A5C                                  PL64 2A08  
                                PL56 32DA                                  PL48 3DE0  
                                PL90 23D6                                  PL82 23B0  
                                PL74 443A                                  PL66 2360  
                                PL58 2356                                  PL92 23E0  
                                PL84 23CA                                  PL76 4450  
                                PL68 237A                                  PL94 46AC  
                                PL86 392E                                  PL78 2394  
                                PL96 23EA                                  PL88 393E  
                                PL98 23FC                                  l350 5D48  
                                l431 5396                                  l426 51E8  
                                l347 5D40                                  l620 4B68  
                                l605 5482                                  l534 5322  
                                l622 4B94                                  l614 4AF0  
                                l279 5E8A                                  l631 505E  
                                l705 3188                                  l634 50BC  
                                l618 4BC6                                  l648 4D9C  
                                l790 3F2A                                  l599 5700  
                                l789 3EA6                                  l969 4210  
                                _GIE 007F97                          ?_ETH_GetMAC 0001  
               __end_of_DHCP_Request 3FBA                   ICMP_EchoReply@cksm 006B  
            IPv4_Start@targetAddress 0060                          ?_ETH_Read16 0003  
                       UDP_Start@ret 0057                                  prod 000FF3  
               TCP_Snd@tcpDataLength 00A0                ??_ETH_ComputeChecksum 0008  
                                tosl 000FFD                                  wreg 000FE8  
                        ?_ETH_Insert 000A                         __CFG_IESO$ON 000000  
                __size_of_ENC28_Rcr8 0020                  __size_of_ENC28_Wcr8 001E  
                       __CFG_MODE$MM 000000        __size_of_DEMO_UDP_IPLockTimer 0016  
                        ?_ETH_Write8 0001                       _ipv4SubnetMask 01C8  
                               PL100 240E                                 PL110 2FE8  
                               PL102 2A6A                                 PL200 2BA2  
                               PL120 2A84                                 PL112 334C  
                               PL104 2420                                 PL210 2BC2  
                               PL202 3992                                 PL130 3388  
                               PL122 2452                                 PL114 243A  
                               PL106 3956                                 PL300 472A  
                               PL220 50D4                                 PL212 2BD4  
                               PL204 3C02                                 PL140 33A4  
                               PL132 363E                                 PL124 3DEA  
                               PL116 2440                                 PL108 2428  
                               PL310 4BCA                                 PL302 2C36  
                               PL230 2BE6                                 PL222 2472  
                               PL214 246A                                 PL206 3E02  
                               PL150 3974                                 PL142 2A9C  
                               PL134 3962                                 PL126 3374  
                               PL118 3616                                 PL320 2526  
                               PL312 4BD6                                 PL304 5C98  
                               PL240 3E14                                 PL232 2BF0  
                               PL224 571A                                 PL216 5710  
                               PL208 2BB0                                 PL160 5154  
                               PL152 3DF4                                 PL144 3010  
                               PL136 3FBA                                 PL128 4856  
                               PL330 3062                                 PL322 4ADA  
                               PL314 4CD6                                 PL306 4304  
                               PL250 4478                                 PL242 249A  
                               PL234 3FCC                                 PL226 5040  
                               PL218 4468                                 PL170 2B3C  
                               PL162 2AEE                                 PL154 245C  
                               PL146 2AB8                                 PL138 2A8E  
                               PL340 3076                                 PL332 2C4C  
                               PL324 36AA                                 PL316 3E2C  
                               PL308 4736                                 PL260 24DC  
                               PL252 24C2                                 PL244 24A4  
                               PL236 2486                                 PL228 247C  
                               PL180 46FC                                 PL172 2B56  
                               PL164 2B08                                 PL156 57B8  
                               PL148 3650                                 PL350 308A  
                               PL342 3080                                 PL334 36B4  
                               PL326 2C42                                 PL318 304E  
                               PL270 3040                                 PL262 2C10  
                               PL254 24D2                                 PL246 24AE  
                               PL238 2490                                 PL190 302A  
                               PL182 4876                                 PL174 2B70  
                               PL166 46E2                                 PL158 2AD4  
                               PL360 4898                                 PL352 33C8  
                               PL344 39AE                                 PL336 2530  
                               PL328 3058                                 PL280 24F4  
                               PL272 39A0                                 PL264 4CC8  
                               PL256 2C00                                 PL248 24B8  
                               PL192 5450                                 PL184 2B8A  
                               PL176 366A                                 PL168 2B22  
                               PL370 36C8                                 PL362 4742  
                               PL354 2C56                                 PL346 253A  
                               PL338 306C                                 PL290 2C2C  
                               PL282 24FE                                 PL274 3FD6  
                               PL266 3E1E                                 PL258 488E  
                               PL194 33BE                                 PL186 3982  
                               PL178 3684                                 PL380 2C68  
                               PL372 36D2                                 PL364 39B8  
                               PL356 4F16                                 PL348 4BE0  
                               PL292 251C                                 PL284 5272  
                               PL276 5728                                 PL268 2C1E  
                               PL196 4714                                 PL188 398A  
                               PL374 4F1C                                 PL366 39C2  
                               PL358 2C5E                                 PL294 5BB6  
                               PL286 2508                                 PL278 24EA  
                               PL198 3694                                 PL376 4BEA  
                               PL368 36BE                                 PL296 3C10  
                               PL288 2512                                 PL378 56DE  
                               PL298 49C8            TCP_FiniteStateMachine@ret 00D0  
                    ?_Network_Manage 0001                         __CFG_WDT$OFF 000000  
                               l1202 2DEC                                 l1042 5E6A  
                               l1212 2EE6                                 l1204 2E6E  
                               l1208 2EAA                                 l1146 2824  
                               l2202 5772                                 l1227 1264  
                               l1148 2740                                 l2212 5840  
                               l1149 276A                                 l1502 0008  
                               l1175 4A6C                                 l1176 4A66  
                               l1187 4AD6                                 l1508 0014  
                               l1487 52FC                                 l1752 3716  
                               l1577 4934                                 l1757 3928  
                               l6224 5742                                 l6226 574A  
                               l7036 5D54                                 l6340 4F88  
                               l6236 5768                                 l6228 574E  
                               l6252 5836                                 l6244 5818  
                               l6500 3802                                 l6334 4F66  
                               l6246 5820                                 l7048 5AB6  
                               l9000 56AC                                 l6248 5824  
                               l6520 3828                                 l7240 5C92  
                               l8202 560A                                 l6514 3824  
                               l6506 3806                                 l6530 3846  
                               l6450 36E0                                 l8132 4CE6  
                               l8220 4198                                 l9004 56BA  
                               l8300 26FC                                 l9020 52A0  
                               l6532 3854                                 l6460 371A  
                               l7236 5C88                                 l8126 549A  
                               l8150 4DA2                                 l9102 2ECC  
                               l9030 52CA                                 l6542 388A  
                               l6462 371E                                 l7334 5A8C  
                               l7344 5E1C                                 l7192 5D98  
                               l8152 4DC2                                 l8208 5638  
                               l8240 4270                                 l9120 59EC  
                               l9200 30FE                                 l6552 38DA  
                               l6544 3890                                 l6472 3774  
                               l6480 3798                                 l6456 370C  
                               l8138 4D38                                 l8234 425C  
                               l9122 59F4                                 l8402 4BA6  
                               l9106 2F02                                 l9034 52E8  
                               l6546 38B8                                 l6554 38E8  
                               l6562 3916                                 l6538 3882  
                               l6482 37B4                                 l6474 377A  
                               l7338 5A9C                                 l7188 5D92  
                               l8148 4D78                                 l8228 4220  
                               l9220 3162                                 l8340 29E8  
                               l8324 28B6                                 l8332 2902  
                               l9060 2CE6                                 l6468 373C  
                               l6564 391C                                 l8238 4262  
                               l9206 310C                                 l9070 2D6C  
                               l6558 390E                                 l6486 37BA  
                               l8192 46A8                                 l9144 538E  
                               l8432 3C5C                                 l9320 33EC  
                               l6488 37DC                                 l8282 5362  
                               l8338 2982                                 l8434 3C7E  
                               l9090 2E54                                 l9074 2D86  
                               l9066 2D30                                 l6498 37FC  
                               l9236 31E6                                 l9172 56FA  
                               l8380 4B02                                 l8524 4852  
                               l8540 4A10                                 l9340 34FA  
                               l9332 34A0                                 l8278 5334  
                               l9190 30BE                                 l8710 16F2  
                               l8366 5662                                 l9326 3406  
                               l6960 552E                                 l9432 51DA  
                               l9424 51B2                                 l8376 4AF2  
                               l8720 17C4                                 l8616 1278  
                               l8608 1256                                 l9096 2E90  
                               l9426 51C8                                 l8466 5078  
                               l8394 4B62                                 l8722 17DC  
                               l8650 1482                                 l8618 1288  
                               l8562 4A74                                 l8546 4A20  
                               l8538 4A08                                 l6938 5C4A  
                               l6964 554C                                 l9276 3EA0  
                               l9452 521E                                 l9436 51EC  
                               l8812 1EE2                                 l8804 1E44  
                               l8740 1996                                 l8708 16C4  
                               l8636 1356                                 l8548 4A26  
                               l8580 4ABC                                 l9356 3550  
                               l9348 3526                                 l9372 35A4  
                               l9540 3B94                                 l9524 39E4  
                               l9550 0000                                 l9462 5236  
                               l9454 5224                                 l8478 5098  
                               l8398 4B96                                 l8750 1AD2  
                               l8742 19A2                                 l8670 15E2  
                               l8582 4ACC                                 l9526 39EE  
                               l9384 4012                                 l9448 5216  
                               l8920 214C                                 l8912 20F0  
                               l8736 1914                                 l8680 161E  
                               l8584 4AD2                                 l9368 3598  
                               l9544 3BBE                                 l9626 4C66  
                               l9618 4C14                                 l9474 5266  
                               l9458 522E                                 l8842 1FB6  
                               l8834 1F6A                                 l8826 1F1A  
                               l8738 1990                                 l8658 14C6  
                               l8594 10F0                                 l8578 4AAE  
                               l9490 4E2A                                 l7972 557A  
                               l9548 0002                                 l9636 4CBE  
                               l9468 5250                                 l8908 20DE  
                               l8860 200A                                 l8844 1FBC  
                               l8828 1F44                                 l8780 1D8C  
                               l8764 1BCE                                 l8748 1ACC  
                               l8932 218A                                 l8942 589E  
                               l8838 1F94                                 l8790 1E0C  
                               l8766 1BF6                                 l8934 21DE  
                               l9486 4E1A                                 l9494 4E4E  
                               l9574 5E6C                                 l7976 55A0  
                               l8928 217C                                 l8864 2012  
                               l8696 16A0                                 l9488 4E22  
                               l9592 502E                                 l9752 48DA  
                               l8962 55FC                                 l8970 5DA8  
                               l8858 1FF4                                 l9754 48E6  
                               l8884 2058                                 l9588 4FFE  
                               l8990 513A                                 l8894 20A6  
                               l8886 2062                                 l8878 204A  
                               l8798 1E2C                                 STR_1 10A4  
                               l8968 5DA2                                 STR_2 1043  
                               STR_3 109A                                 l9778 49A4  
                               STR_4 1070                                 STR_5 1081  
                               STR_6 108E                                 STR_7 10AC  
                               STR_8 105F                                 _GIEH 007F97  
                               _GIEL 007F96                                 _LATE 000F8D  
                               _LATH 000F90                                 _LATJ 000F91  
                    ENC28_PhyWrite@a 000A                      ENC28_PhyWrite@d 0008  
                               _IPEN 007E87                      ENC28_PhyWrite@v 000B  
                               u9108 38F8                                 u9510 552C  
                               u9088 386E                                 u8960 3772  
                               u8928 36F6                                 u8970 3790  
                               u8980 37AC                                 u8958 374C  
                               u8967 376C                                 u8977 378A  
                               _TMR1 000FCE                                 u8987 37A6  
                    lcd_write_data@d 0002                         lcd_goto1@pos 0003  
                      __CFG_FCMEN$ON 000000                         __CFG_STVR$ON 000000  
             __end_of_lcd_write_data 5C26                      __end_of_TCP_Snd 29EE  
                               _data 01FC               __end_of_lcd_write_ctrl 5C46  
                    _TCP_PayloadSave 3C1A                __end_of_DEMO_UDP_Send 4CC8  
                    lcd_write_ctrl@c 0002                                 _main 48A2  
                               _time 550A                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 indf0 000FEF  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 005E  
     __size_of_DEMO_UDP_ClaimIPCheck 001A                          _SYSLOG_Init 599E  
      __end_of_DEMO_UDP_ClaimIPCheck 5DA0                                 prodh 000FF4  
                               prodl 000FF3                                 start 0028  
                      __CFG_FOSC2$ON 000000                         ?_IPV4_Packet 0001  
               __size_of_ENC28_Rcr16 003E                 __size_of_ENC28_Wcr16 0036  
                 __size_of_ETH_Read8 0016                   __size_of_ETH_Flush 002A  
             __size_of_ETH_ReadBlock 007E                    SPI_ExchangeByte@v 0002  
                       ___param_bank 000010                __size_of_SYSLOG_Write 0026  
                 __size_of_IPV4_Init 000C                   __size_of_IPV4_Send 0062  
                       ?_ETH_Write32 0003                         ?_ETH_Write16 0003  
                   ARPV4_Request@ret 002D                  __size_of_ARPV4_Init 001A  
           __size_of_ETH_CheckLinkUp 0018              ?_TCP_FiniteStateMachine 0001  
                   __end_of_LED_Init 5C66                         _BAUDCON1bits 000F7E  
                      __CFG_WAIT$OFF 000000                     _ETH_GetByteCount 5CFE  
                     __CFG_CCP2MX$ON 000000                                l10102 4E6C  
                              l10104 4E76                                l10106 4E7A  
                   __end_of_ETH_Copy 4BCA                     __end_of_ETH_Dump 569A  
                   __end_of_ETH_Init 4170                    _nextPacketPointer 01D9  
                   __end_of_ETH_Send 5A28                                ?_main 0001  
                              _ADRES 000FC3                                ?_time 0002  
IPV4_PseudoHeaderChecksum@payloadLen 0002                                _CREN1 007D5C  
                              u11000 25A4                                u11010 25B8  
                              u11100 267C                                u11020 25D8  
                              u11030 25EC                                u11007 259E  
                              u11200 2740                                u11120 26B2  
                              u11040 2600                                u12000 11C0  
                              u11017 25B2                                u11210 2754  
                              u11130 26C6                                u11050 2614  
                              u12010 11DA                                u11107 2676  
                              u11027 25D0                                u11140 26EC  
                              u11060 2A22                                u12100 12F0  
                              u12020 11F2                                u11037 25E6  
                              u11310 2824                                u11230 276A  
                              u11070 2640                                u12110 1308  
                              u12030 120C                                u11207 273A  
                              u11127 26AC                                u11047 25FA  
                              u12007 11B8                                u11320 283A  
                              u11240 278E                                u11160 270E  
                              u11080 2654                                u13000 1B74  
                              u12200 13F0                                u12120 1320  
                              u12040 1224                                u11217 274E  
                              u11137 26C0                                u11065 2A18  
                              u11057 260E                                u12017 11D2  
                              u11410 2980                                u11330 2880  
                              u11250 27A2                                u11090 2668  
                              u13010 1B8E                                u12210 1408  
                              u12130 133A                                u12050 123C  
                              u11147 26E6                                u12107 12E8  
                              u12027 11EA                                u10700 4396  
                              u11420 2998                                u11260 27BE  
                              u11180 272A                                u13020 1BA8  
                              u12300 14DE                                u12220 1426  
                              u12140 1354                                u12060 1256  
                              u11317 281C                                u11237 2764  
                              u11077 2638                                u12117 1300  
                              u12037 1204                                u10710 43B0  
                              u11430 29E8                                u11270 27D2  
                              u13110 1C8E                                u13030 1BBA  
                              u12310 14F6                                u12230 1440  
                              u12150 136E                                u12070 12A0  
                              u11327 2834                                u11247 2782  
                              u11167 2708                                u11087 264E  
                              u13007 1B6E                                u12207 13E8  
                              u12127 1318                                u12047 121C  
                              u10640 5598                                u10720 43CA  
                              u11600 455A                                u11280 27EE  
                              u13200 1D76                                u13040 1BCC  
                              u12400 15DE                                u12240 1458  
                              u12160 1386                                u12080 12BE  
                              u11417 2978                                u11337 286C  
                              u11257 279C                                u11097 2662  
                              u13017 1B88                                u12321 1512  
                              u12217 1400                                u12137 1332  
                              u12057 1234                                u10730 43E4  
                              u11610 4570                                u11530 44A0  
                              u11370 291A                                u11290 2802  
                              u13130 1CCC                                u13050 1C06  
                              u12410 15FA                                u12330 152C  
                              u12090 12D8                                u14010 2E8E  
                              u10707 4390                                u11427 2990  
                              u11267 27B8                                u11187 2724  
                              u13027 1BA2                                u12307 14D6  
                              u12227 141E                                u12171 13A2  
                              u12147 134C                                u12067 124E  
                              u10820 4626                                u10900 41A6  
                              u11620 4584                                u11540 44B6  
                              u11380 294E                                u11700 3C7E  
                              u13300 1E54                                u13220 1D8C  
                              u13140 1CF8                                u12420 1614  
                              u12340 1546                                u12260 147E  
                              u12180 13BC                                u14020 2EA8  
                              u10717 43AA                                u11437 29D4  
                              u11277 27CC                                u13117 1C8A  
                              u13061 1C1E                                u13037 1BB4  
                              u12317 14EE                                u12237 1438  
                              u12157 1366                                u12077 1298  
                              u10830 4656                                u10910 41B6  
                              u11630 4598                                u11550 44D4  
                              u11390 2962                                u11710 3CA0  
                              u13310 1E64                                u13230 1DBC  
                              u13150 1D12                                u13070 1C30  
                              u12510 169C                                u12350 1560  
                              u12270 149A                                u12190 13D6  
                              u10647 5592                                u10727 43C4  
                              u11607 4552                                u11287 27E8  
                              u13207 1D72                                u13047 1BC6  
                              u12407 15DC                                u12247 1450  
                              u12167 137E                                u12087 12B6  
                              u10680 4364                                u11640 45B8  
                              u11560 44F2                                u11720 3CBE  
                              u13400 1F10                                u13320 1E7C  
                              u13240 1DCC                                u13160 1D2A  
                              u12520 16BA                                u12440 1634  
                              u12360 1578                                u12280 14B4  
                              u10737 43DE                                u10825 4624  
                              u11617 4568                                u11537 4498  
                              u11377 2914                                u11297 27FC  
                              u13137 1CC2                                u13081 1C48  
                              u13057 1C02                                u12417 15F2  
                              u12337 1524                                u12097 12D0  
                              u14017 2E86                                u10690 437C  
                              u14210 32FE                                u11650 45D0  
                              u11570 4510                                u11730 3CDE  
                              u13330 1E92                                u13170 1D44  
                              u13090 1C5A                                u12610 17A4  
                              u12370 1596                                u14050 2ECA  
                              u10835 4654                                u11627 457E  
                              u11547 44AE                                u11387 2946  
                              u11707 3C72                                u13307 1E50  
                              u13227 1D88                                u13147 1CEE  
                              u12427 160C                                u12347 153E  
                              u12267 147C                                u12187 13B4  
                              u14027 2EA0                                u11580 452E  
                              u11740 3CF0                                u11660 3C2E  
                              u13500 1FEA                                u13420 1F5A  
                              u13340 1EA2                                u13260 1DFE  
                              u13180 1D5C                                u12700 188A  
                              u12540 1708                                u12380 15B0  
                              u14060 2EE4                                u14301 320E  
                              u14221 314E                                u11637 4592  
                              u11557 44CC                                u11397 295C  
                              u11717 3C94                                u13317 1E60  
                              u13237 1DB8                                u13157 1D0E  
                              u13077 1C2C                                u12517 169A  
                              u12357 1558                                u12277 1492  
                              u12197 13CE                                u14310 327A  
                              u11590 4544                                u11750 3D10  
                              u13350 1EB2                                u13270 1E22  
                              u12630 17D8                                u12470 165E  
                              u12390 15C8                                u15030 4934  
                              u10687 435E                                u14215 32F4  
                              u11647 45B0                                u11567 44EA  
                              u11727 3CB8                                u13407 1F0A  
                              u13327 1E78                                u13247 1DC8  
                              u13167 1D20                                u12711 18A6  
                              u12551 1714                                u12527 16B2  
                              u12447 162E                                u12367 1570  
                              u12287 14AC                                u10960 535E  
                              u11760 3D36                                u11680 3C46  
                              u13440 1F7A                                u13360 1EC8  
                              u12800 1990                                u12720 18C2  
                              u12640 17F4                                u12560 1730  
                              u14080 2F02                                u14400 348E  
                              u10697 4376                                u11657 45C8  
                              u11577 4508                                u11737 3CD8  
                              u13601 20A4                                u13337 1E8C  
                              u13177 1D40                                u13097 1C56  
                              u12617 179C                                u12377 158E  
                              u14057 2EC2                                u11770 3D9E  
                              u13610 20B8                                u13530 2024  
                              u13450 1F90                                u13370 1EDE  
                              u13290 1E42                                u12810 19B8  
                              u12730 18DC                                u12570 1748  
                              u12490 167C                                u11930 10CE  
                              u14090 2FAC                                u14315 3270  
                              u11587 4526                                u11747 3CEA  
                              u11667 3C28                                u13507 1FE4  
                              u13427 1F54                                u13347 1E9E  
                              u13267 1DFA                                u13187 1D52  
                              u12707 1882                                u12651 180C  
                              u12547 1700                                u12387 15A8  
                              u14067 2EDC                                u14411 349E  
                              _LATD3 007C63                                u10980 2564  
                              u11780 3DB6                                u13700 2176  
                              u13460 1FAA                                u13380 1EF4  
                              u12900 1AA4                                u12740 18F4  
                              u12660 182E                                u11940 10E8  
                              u14261 3198                                u14181 30F0  
                              u11597 453C                                u11757 3D0A  
                              u13357 1EAE                                u13277 1E1C  
                              u12821 19C4                                u12637 17D6  
                              u12581 1760                                u12477 1658  
                              u12397 15C0                                u10990 257C  
                              u13710 219C                                u13630 20D4  
                              u13550 2040                                u12910 1AB8  
                              u12830 19E0                                u12750 1910  
                              u12590 1780                                u11950 1128  
                              u11870 4A30                                u10967 5356  
                              u11767 3D28                                u11687 3C40  
                              u13447 1F76                                u13367 1EC2  
                              u12807 1988                                u12727 18BA  
                              u12671 183A                                u12647 17EC  
                              u12567 1728                                u14095 2FA2  
                              u14087 2EFA                                u13720 21F4  
                              u13480 1FCE                                u12920 1ACC  
                              u12760 192C                                u12680 1856  
                              u11960 114C                                _LATH0 007C80  
                              u11777 3D8A                                u13617 20B4  
                              u13537 2020                                u13457 1F8A  
                              u13377 1ED8                                u13297 1E3C  
                              u12841 19F8                                u12817 19B0  
                              u12737 18D4                                u12577 1740  
                              u12497 1676                                u11937 10C8  
                              _LATH1 007C81                                u13730 220A  
                              u13650 2100                                u13570 2072  
                              u12930 1AE4                                u12850 1A1A  
                              u12770 1946                                u11970 116C  
                              _LATH2 007C82                                u10987 2558  
                              u11787 3DAE                                u13707 2170  
                              u13467 1FA4                                u13387 1EF0  
                              u12907 1A9E                                u12747 18EC  
                              u12691 186E                                u12667 1822  
                              u11947 10E2                                u13660 2110  
                              u12860 1A30                                u12780 195E  
                              u11980 1184                                u13900 2DA2  
                              u14380 35DA                                u14700 3AB8  
                              u10997 2576                                u13717 2198  
                              u13637 20CE                                u13581 2082  
                              u13557 203A                                u12917 1AB2  
                              u12837 19D8                                u12757 1908  
                              u12597 1774                                u11957 1114  
                              u13670 2126                                u13590 209C  
                              u12950 1B00                                u12870 1A4E  
                              u12790 1976                                u11990 119C  
                              u13910 2DB6                                u13727 21EE  
                              u13487 1FCA                                u12927 1AC6  
                              u12767 1924                                u12687 184E  
                              u11967 1140                                u13680 213C  
                              u12880 1A6C                                u13920 2DDE  
                              u13840 2D12                                u14720 3AD2  
                              u14640 3A00                                u13737 2204  
                              u13657 20FC                                u13577 206E  
                              u12937 1AE0                                u12857 1A12  
                              u12777 193E                                u11977 1164  
                              u14385 35D0                                u15417 5C12  
                              u13690 2164                                u12970 1B2A  
                              u12890 1A88                                u13667 210C  
                              u12867 1A28                                u12787 1956  
                              u11987 117C                                u13907 2D9C  
                              u14707 3AB2                                u15507 5C2E  
                              u15427 5C1C                                u14900 4C72  
                              u12980 1B3E                                u13860 2D6A  
                              u14740 3AEA                                u14660 3A46  
                              u13677 2120                                u13597 2092  
                              u12957 1AFA                                u12877 1A46  
                              u12797 196E                                u11997 1194  
                              u15517 5C3C                                u15437 4E8A  
                              u12990 1B5A                                u14750 3B24  
                              u14670 3A88                                u13687 2136  
                              u12887 1A64                                u13927 2DD0  
                              u13847 2D06                                u14727 3ACC  
                              u14647 39FA                                u15527 5EC2  
                              u15447 4E96                                u14760 3B3A  
                              u14680 3A9C                                u15537 3FF6  
                              u13697 2160                                u12977 1B24  
                              u12897 1A82                                u15457 4EA2  
                              u13970 2E52                                u14770 3B6E  
                              u15547 4008                                u12987 1B38  
                              u13867 2D5E                                u14747 3AE4  
                              u14667 3A3A                                u15467 4EAE  
                              u13980 2E6C                                u14780 3B88  
                              u15557 5A40                                u12997 1B54  
                              u14757 3B18                                u14677 3A7C  
                              u15477 4EC0                                u14790 3BB8  
                              u14767 3B34                                u14687 3A96  
                              u15487 4ED2                                u13977 2E4A  
                              u14777 3B66                                u15497 4F0C  
                 __size_of_TCB_Reset 0150                                u13987 2E64  
                              u14787 3B80                                u14797 3BAC  
                    __end_of___lwdiv 577C                      __end_of___lwmod 584A  
                              _SPEN1 007D5F                                _TX1IF 007CF4  
                              _PORTJ 000F88                         main@ip_timer 018D  
                    __end_of__doprnt 392E                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISE 000F96  
                              _TRISH 000F99                                _TRISJ 000F9A  
                     __CFG_ECCPMX$ON 000000       __size_of_ETH_TxComputeChecksum 00EA  
      __end_of_ETH_TxComputeChecksum 4DCC                 __size_of_DHCP_Manage 007C  
                   __end_of_TCP_Init 5E84                     __end_of_TCP_Recv 2F68  
                        ?_IPv4_Start 004A                                _claim 01E3  
                    __end_of_dpowers 100B                     __end_of_UDP_Send 5154  
                  ETH_GetMAC@macAddr 0007                          ?_TCP_Update 0001  
                              _putch 5D38                                main@t 0184  
                 __size_of_UDP_Start 004E                      __end_of_low_isr 0028  
          __size_of_ETH_EventHandler 0088            _IPV4_PseudoHeaderChecksum 4F22  
                              pclath 000FFA      TCP_FiniteStateMachine@nextState 00D4  
                              tablat 000FF5                                time@t 0002  
                              plusw1 000FE3                                plusw2 000FDB  
                  __end_of_ENC28_Bfc 5CE0                    __end_of_ENC28_Bfs 5CFE  
                       _SYSLOG_Write 5B28                      ?_lcd_write_data 0001  
                    ??_lcd_init_pins 0002                      ?_lcd_write_ctrl 0001  
                              status 000FD8                     ??_ENC28_PhyWrite 000A  
                    __end_of_sprintf 5A82                        ?_IPV4_GetMyIP 0002  
                        ?_UDP_Write8 0001                        ?_ETH_SaveRDPT 0001  
                       __end_ofPL100 2420                         __end_ofPL110 3010  
                       __end_ofPL102 2A84                         __end_ofPL200 2BB0  
                       __end_ofPL120 2A8E                         __end_ofPL112 3374  
                       __end_ofPL104 2428                         __end_ofPL210 2BD4  
                       __end_ofPL202 39A0                         __end_ofPL130 33A4  
                       __end_ofPL122 245C                         __end_ofPL114 2440  
                       __end_ofPL106 3962                         __end_ofPL300 4736  
                       __end_ofPL220 50E4                         __end_ofPL212 2BE6  
                       __end_ofPL204 3C10                         __end_ofPL140 33BE  
                       __end_ofPL132 3650                         __end_ofPL124 3DF4  
                       __end_ofPL116 2452                         __end_ofPL108 243A  
                       __end_ofPL310 4BD6                         __end_ofPL302 2C42  
                       __end_ofPL230 2BF0                         __end_ofPL222 247C  
                       __end_ofPL214 2472                         __end_ofPL206 3E14  
                       __end_ofPL150 3982                         __end_ofPL142 2AB8  
                       __end_ofPL134 3974                         __end_ofPL126 3388  
                       __end_ofPL118 363E                         __end_ofPL320 2530  
                       __end_ofPL312 4BE0                         __end_ofPL304 5CA4  
                       __end_ofPL240 3E1E                         __end_ofPL232 2C00  
                       __end_ofPL224 5728                         __end_ofPL216 571A  
                       __end_ofPL208 2BC2                         __end_ofPL160 516E  
                       __end_ofPL152 3E02                         __end_ofPL144 302A  
                       __end_ofPL136 3FCC                         __end_ofPL128 4876  
                       __end_ofPL330 306C                         __end_ofPL322 4AE4  
                       __end_ofPL314 4CE2                         __end_ofPL306 4310  
                       __end_ofPL250 4482                         __end_ofPL242 24A4  
                       __end_ofPL234 3FD6                         __end_ofPL226 5050  
                       __end_ofPL218 4478                         __end_ofPL170 2B56  
                       __end_ofPL162 2B08                         __end_ofPL154 246A  
                       __end_ofPL146 2AD4                         __end_ofPL138 2A9C  
                       __end_ofPL340 3080                         __end_ofPL332 2C56  
                       __end_ofPL324 36B4                         __end_ofPL316 3E36  
                       __end_ofPL308 4742                         __end_ofPL260 24EA  
                       __end_ofPL252 24D2                         __end_ofPL244 24AE  
                       __end_ofPL236 2490                         __end_ofPL228 2486  
                       __end_ofPL180 4714                         __end_ofPL172 2B70  
                       __end_ofPL164 2B22                         __end_ofPL156 57C4  
                       __end_ofPL148 366A                         __end_ofPL350 3094  
                       __end_ofPL342 308A                         __end_ofPL334 36BE  
                       __end_ofPL326 2C4C                         __end_ofPL318 3058  
                       __end_ofPL270 304E                         __end_ofPL262 2C1E  
                       __end_ofPL254 24DC                         __end_ofPL246 24B8  
                       __end_ofPL238 249A                         __end_ofPL190 3040  
                       __end_ofPL182 488E                         __end_ofPL174 2B8A  
                       __end_ofPL166 46FC                         __end_ofPL158 2AEE  
                       __end_ofPL360 48A2                         __end_ofPL352 33D2  
                       __end_ofPL344 39B8                         __end_ofPL336 253A  
                       __end_ofPL328 3062                         __end_ofPL280 24FE  
                       __end_ofPL272 39AE                         __end_ofPL264 4CD6  
                       __end_ofPL256 2C10                         __end_ofPL248 24C2  
                       __end_ofPL192 545A                         __end_ofPL184 2BA2  
                       __end_ofPL176 3684                         __end_ofPL168 2B3C  
                       __end_ofPL370 36D2                         __end_ofPL362 474C  
                       __end_ofPL354 2C5E                         __end_ofPL346 2544  
                       __end_ofPL338 3076                         __end_ofPL290 2C36  
                       __end_ofPL282 2508                         __end_ofPL274 3FE4  
                       __end_ofPL266 3E2C                         __end_ofPL258 4898  
                       __end_ofPL194 33C8                         __end_ofPL186 398A  
                       __end_ofPL178 3694                         __end_ofPL380 2C70  
                       __end_ofPL372 36DC                         __end_ofPL364 39C2  
                       __end_ofPL356 4F1C                         __end_ofPL348 4BEA  
                       __end_ofPL292 2526                         __end_ofPL284 527C  
                       __end_ofPL276 5732                         __end_ofPL268 2C2C  
                       __end_ofPL196 472A                         __end_ofPL188 3992  
                       __end_ofPL374 4F22                         __end_ofPL366 39CC  
                       __end_ofPL358 2C68                         __end_ofPL294 5BC0  
                       __end_ofPL286 2512                         __end_ofPL278 24F4  
                       __end_ofPL198 36AA                         __end_ofPL376 4BF0  
                       __end_ofPL368 36C8                         __end_ofPL296 3C1A  
                       __end_ofPL288 251C                         __end_ofPL378 56E6  
                       __end_ofPL298 49D4           ETH_RxComputeChecksum@rxptr 001A  
                __size_of_ETH_GetMAC 003C                       __CFG_ETHLED$ON 000000  
      ETH_TxComputeChecksum@position 000A                  __size_of_ETH_Read16 0026  
               __end_of_ARPV4_Packet 32DA                      __initialization 596A  
                __size_of_ETH_Insert 005C                 __end_of_ARPV4_Lookup 564E  
                       __end_of_main 49C8                 __end_of_ARPV4_Update 5AD6  
                       __end_of_time 555E       __end_of_TCP_FiniteStateMachine 2210  
                __size_of_ETH_Write8 001A                          ETH_Copy@len 000A  
                        ETH_Read16@b 0005                      _DHCP_WriteZeros 5DA0  
                             ??_main 017F                               ??_time 0006  
                      __activetblptr 000003                       _MAC_getAddress 5EDA  
                _TCP_ParseTCPOptions 49D4                        _ETH_ReadBlock 52FE  
                    TCP_Snd@txHeader 00A2                    __end_of_ETH_Read8 5E12  
                  __end_of_ETH_Flush 5710              __end_of_TCP_PayloadSave 3DBE  
                  __end_of_IPV4_Init 5EAA                       UDP_Write8@data 0004  
           __end_of_SPI_ExchangeByte 5E92                    __end_of_IPV4_Send 5450  
                          ??_TCP_Snd 0069                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   _DEMO_UDP_IdlePkt 000000                               _ADRESH 000FC4  
                             _ADRESL 000FC3                       ETH_Dump@length 000A  
                             ?_putch 0001                               _T1SYNC 007E6A  
                             _OSCCON 000FD3                       ??_IPV4_GetMyIP 0006  
                             _SPBRG1 000FAF                               _TMR1IE 007CE8  
                             _TMR1IF 007CF0                               _TMR1CS 007E69  
                     ??_ETH_SaveRDPT 000A                               _TMR1IP 007CF8  
                             _TMR1ON 007E68                               _SSPBUF 000FC9  
               __end_of_ICMP_Receive 56DE                               _TXREG1 000FAD  
                             _TXSTA1 000FAC                     __end_of_dhcpName 1028  
               ?_TCP_ParseTCPOptions 0001                    __end_of_TCB_Reset 45D2  
                       ??_ENC28_Rcr8 0005                    main@no_ip_display 0188  
                       ??_ENC28_Wcr8 0006                       __CFG_XINST$OFF 000000  
                    __CFG_EASHFT$OFF 000000                  _ETH_SendSystemReset 5EAA  
                   __end_of_lcd_busy 5ECA                     __end_of_lcd_init 4F16  
                     ETH_ReadBlock@p 0008                     __end_of_high_isr 5EDA  
              ICMP_EchoReply@icmpHdr 0070                     __end_of_lcd_puts 5C98  
                 _ETH_ResetByteCount 5E4A                 TCP_Snd@payloadLength 009D  
              ICMP_EchoReply@ipv4Hdr 0067                               ___wmul 5B74  
                __size_of_IPv4_Start 017A                               _arpMap 022C  
                          ??___lwdiv 0006                            ??___lwmod 000D  
              __size_of_DHCP_Request 0184                  __size_of_TCP_Update 021C  
                             _initHW 58FE                            ??__doprnt 0010  
                             _memset 5A82                    __end_of_UDP_Start 5600  
                             clear_0 5970                               clear_1 597C  
             __end_of_MAC_getAddress 5EDE                               _tcpMss 01E1  
                       __doprnt@flag 0017                 __end_of_broadcastMAC 103D  
                             _printf 5BC0                  ?_ETH_ResetByteCount 0001  
                       __doprnt@prec 0014                               main@ip 01B1  
             ETH_ComputeChecksum@len 0004                      UDP_Start@destIP 0067  
                __size_of_UDP_Write8 0000                         __pdataCOMRAM 005D  
               ETH_GetByteCount@wptr 000C                       ?_ETH_ReadBlock 0003  
                       ?_UDP_Receive 000C                         __mediumconst 0000  
                  ??_ETH_CheckLinkUp 000E                 ?_ETH_SendSystemReset 0001  
                          ??_low_isr 0001         __size_of_DEMO_UDP_SetClaimIP 0008  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                     __end_of_spi_init 5E9E  
           ADC_GetConversion@channel 0005                   __end_of_ENC28_Rcr8 5C86  
       __size_of_Network_WaitForLink 000E                   __end_of_ENC28_Wcr8 5CC2  
                          ??_sprintf 0027                         ??_ARPV4_Init 0002  
                       ?_UDP_Write32 0007                DHCP_WriteZeros@length 0004  
                       _DHCP_Handler 000000                       ETH_Insert@data 0010  
                    __CFG_FOSC$HSPLL 000000                           __accesstop 0060  
            __end_of__initialization 5994               __size_of_ENC28_BankSel 0048  
               ??_ETH_ResetByteCount 000A                            ?_LED_Init 0001  
              ??_TCP_ParseTCPOptions 000E                            ?_ETH_Copy 000A  
                          ?_ETH_Dump 000A                            ?_ETH_Init 0001  
                          ?_ETH_Send 0001                        ___rparam_used 000001  
                       _DHCP_Request 3E36                        ?_Network_Init 0001  
                      ?_Network_Read 0001               IPV4_Send@payloadLength 0018  
              IPv4_Start@destAddress 004A              __end_of_DHCP_WriteZeros 5DB8  
                     __pcstackCOMRAM 0001               __size_of_ENC28_PhyRead 003C  
              _ETH_RxComputeChecksum 54B6              __size_of_ETH_WriteBlock 0054  
               __size_of_IPV4_Packet 01E4                __end_of_ARPV4_Request 46AC  
                          LED_Init@x 0002                            ?_TCP_Init 0001  
                          ?_TCP_Recv 00D5              __size_of_ETH_WriteStart 012A  
                          ?_UDP_Send 0001                        __end_of_putch 5D52  
               __size_of_ETH_Write16 001C                 __size_of_ETH_Write32 002A  
                    ?_MAC_getAddress 0002                   __end_of_ARPV4_Init 5D6C  
  TCP_ParseTCPOptions@tcpOptionsSize 0012                         _TXPacketSize 01D3  
       __end_of_ETH_NextPacketUpdate 53EE                         ??_ETH_GetMAC 0007  
                       _dhcpServerId 021C                         ??_ETH_Read16 0005  
                   ??_Network_Manage 017A                ??_ETH_SendSystemReset 0003  
                       ??_ETH_Insert 000E                   __size_of_lcd_goto1 000E  
                       ??_ETH_Write8 0003                     ?_TCP_PayloadSave 00B6  
                         __doprnt@ap 000F                           __doprnt@cp 0015  
                         __doprnt@pb 001B                   __size_of_lcd_putch 001C  
               ETH_ComputeChecksum@v 0010                              ??_putch 0002  
                         __pbssBANK1 01B5                           __pbssBANK2 0200  
                   _ETH_EventHandler 516E             __end_of_ETH_GetByteCount 5D1C  
              __size_of_ARPV4_Packet 0246                      UDP_Write32@data 0007  
                         ??_LED_Init 0002                __size_of_ARPV4_Lookup 004E  
                       ?_SYSLOG_Init 0001                           ??_ETH_Copy 000C  
                         ??_ETH_Dump 000C                           ??_ETH_Init 0010  
                     ??_Network_Init 0011                       ??_Network_Read 00FC  
                         ??_ETH_Send 0008                __size_of_ARPV4_Update 002A  
         DEMO_UDP_Send@pot_adcResult 0070                           _macAddress 103D  
                    TCB_Reset@tcbPtr 0002         __end_of_DEMO_UDP_IPLockTimer 5E28  
                 __end_of_ETH_GetMAC 57B8                   __end_of_ETH_Read16 5B74  
                 __end_of_ETH_Insert 54B6                         IPV4_Send@ret 001E  
                            ?___wmul 0002                           ??_TCP_Init 0002  
                         ??_TCP_Recv 00DB                   __end_of_ETH_Write8 5D86  
                            ?_initHW 0001                           ??_UDP_Send 0023  
                         _deviceTime 02B4                              ?_memset 0002  
        __end_of_ETH_ComputeChecksum 50D4                        _ENC28_BankSel 57C4  
                            ?_printf 001C              __size_of_ADC_Initialize 0016  
                            _T1CKPS0 007E6C                              _T1CKPS1 007E6D  
               __end_of_IPV4_GetMyIP 5E3A                      ??_ETH_ReadBlock 0007  
               __end_of_ETH_SaveRDPT 5E4A                              _T1OSCEN 007E6B  
                 __size_of_uart_init 0016                   __size_of_rtcc_init 003A  
                       SYSLOG_Init@t 0027                           _ipv4Header 0294  
                       _ARPV4_Packet 3094                              _OSCTUNE 000F9B  
                      _ENC28_PhyRead 5888                         ??_IPv4_Start 004F  
                         ENC28_Bfc@a 0006                     ??_lcd_write_data 0002  
                            _SSP1BUF 000FC9                           ENC28_Bfs@a 0006  
                   ??_lcd_write_ctrl 0002                         _ARPV4_Lookup 5600  
                            _TCP_Snd 2544                         ??_TCP_Update 00D5  
              __size_of_ICMP_Receive 0044                         _ARPV4_Update 5AAC  
                          ?_lcd_busy 0001                            ?_lcd_init 0001  
                          ?_high_isr 0001                            ?_lcd_puts 0004  
             ARPV4_Lookup@ip_address 0002                           _ipv4Router 0220  
                         _led_values 0200                      TCP_Update@count 00DD  
                      ??_ENC28_Rcr16 0007                         ??_UDP_Write8 0004  
                      ??_ENC28_Wcr16 0007                   UDP_Receive@udpcksm 000C  
                  ETH_Dump@newRXTail 000C                  SYSLOG_Write@message 0027  
                            __Hparam 0000                            _ENC28_Bfc 5CC2  
                          _ENC28_Bfs 5CE0                              __Lparam 0000  
              _DEMO_UDP_ClaimIPCheck 5D86               ?_ETH_RxComputeChecksum 0012  
                   ?_DHCP_WriteZeros 0004                    __end_of_lcd_goto1 5E68  
                          ?_spi_init 0001                    __end_of_lcd_putch 5D38  
                        time@gie_val 0006                      __size_of___wmul 0026  
                            ___lwdiv 5732                              ___lwmod 580C  
                         _currentTCB 01D5                         __psmallconst 1000  
                 __end_of_IPv4_Start 4304                       ?_ENC28_BankSel 0001  
                            __doprnt 36DC                      __size_of_initHW 0036  
                 __end_of_TCP_Update 3BE8                              __pcinit 596A  
                    __size_of_memset 002A                              __ramtop 1000  
                            __ptext0 48A2                              __ptext1 5A82  
                            __ptext2 5C86                              __ptext3 5D1C  
                            __ptext4 5C06                              __ptext5 5E5A  
                            __ptext6 58FE                              __ptext7 5DD0  
                            __ptext8 5E92                              __ptext9 58C4  
                            _ethData 01B5                              _eth_MAC 01D0  
                            _ipv4DNS 0210                      __size_of_printf 0024  
  TCP_FiniteStateMachine@notAckBytes 00D1                        ??_DHCP_Manage 0058  
                       _ICMP_Receive 569A                    __end_of_hexpowers 1013  
             __size_of_DEMO_UDP_Send 00D8                              _dpowers 1001  
                            _tcbList 01DF                   __end_of_UDP_Write8 0000  
                     ?_ENC28_PhyRead 000A                              _low_isr 0018  
            ETH_EventHandler@eir_val 0013                 __size_of_UDP_Receive 0082  
              _ETH_TxComputeChecksum 4CE2              __size_of_ICMP_EchoReply 010A  
                            _sprintf 5A56                    ?_SPI_ExchangeByte 0001  
                         ??_lcd_busy 0002                           ??_lcd_init 0003  
                            main@str 0191                           ??_high_isr 0002  
                     __pintcode_body 5ED2                           ??_lcd_puts 0006  
               end_of_initialization 5994              ETH_ComputeChecksum@cksm 000C  
                        TCP_Snd@data 0099              ETH_ComputeChecksum@seed 0006  
                        TCP_Snd@cksm 009B                            _ETH_Read8 5DFC  
                          _ETH_Flush 56E6                   ??_SPI_ExchangeByte 0002  
                          _IPV4_Init 5E9E                            _IPV4_Send 53EE  
                 IPv4_Start@protocol 004E                 __size_of_UDP_Write32 0000  
                            memset@c 0004                              memset@n 0006  
                            memset@p 0008                              int_func 5ED2  
                       _broadcastMAC 1037                     UDP_Start@dstPort 006D  
                ETH_ReadBlock@buffer 0003                 _ETH_NextPacketUpdate 537C  
              __end_of_lcd_init_pins 5EC0                  ETH_ReadBlock@length 0005  
               DEMO_UDP_Send@started 006F                    __end_of_uart_init 5DE6  
                     ETH_Write8@data 0003                        ?_rtcc_handler 0001  
                  __end_of_rtcc_init 58FE                           ?_ENC28_Bfc 0005  
                         ?_ENC28_Bfs 0005                     DHCP_Request@type 0070  
                _DEMO_UDP_SetClaimIP 5ECA                     UDP_Start@srcPort 006B  
                            printf@f 0020                       _ETH_WriteBlock 555E  
                _Network_WaitForLink 5E68                            _TCB_Reset 4482  
                            postdec2 000FDD                  __end_of_ENC28_Rcr16 5888  
                         ??_spi_init 0002                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                __end_of_ENC28_Wcr16 596A                      _ETH_CheckLinkUp 5DB8  
                     _ETH_WriteStart 4310                   TCP_PayloadSave@len 00B6  
              ARPV4_Packet@mergeFlag 0030             ETH_RxComputeChecksum@len 0012  
                          _PORTBbits 000F81                            _PORTJbits 000F88  
                       ENC28_Rcr16@a 0009                         ENC28_Rcr16@v 0007  
                          _UDP_Start 55B2                 __end_of_Network_Init 5C06  
               __end_of_Network_Read 4E84                         ENC28_Wcr16@a 0007  
               ?_DEMO_UDP_SetClaimIP 0001                         ENC28_Wcr16@v 0005  
                          _TRISAbits 000F92                            _TRISCbits 000F94  
                          _TRISDbits 000F95                        _rcvPayloadLen 01DD  
               _DEMO_UDP_IPLockTimer 5E12                 ?_Network_WaitForLink 0001  
                  IPV4_Packet@hdrLen 00F7                  __end_of_DHCP_Manage 5272  
                  IPV4_Packet@length 00F8             DEMO_UDP_ClaimIPCheck@ret 0003  
                  ICMP_EchoReply@ret 006F                           ?_ETH_Read8 0001  
                         ?_ETH_Flush 0001                           ?_IPV4_Init 0001  
                         ?_IPV4_Send 0018                ?_ETH_NextPacketUpdate 0001  
                      _DEMO_UDP_Recv 000000                        _DEMO_UDP_Send 4BF0  
                         main@old_ip 0180                       ??_rtcc_handler 0002  
                         lcd_putch@c 0003               ?_DEMO_UDP_ClaimIPCheck 0001  
             __end_of_ETH_WriteBlock 55B2                    __size_of_LED_Init 0020  
                      _dhcpLeaseTime 01C0                 __size_of_SYSLOG_Init 002E  
                  __size_of_ETH_Copy 00E6                    __size_of_ETH_Dump 004C  
                  __size_of_ETH_Init 018C               __end_of_ETH_WriteStart 443A  
                  __size_of_ETH_Send 002E                     ??_MAC_getAddress 0004  
                         ?_TCB_Reset 0002                      ??_ENC28_BankSel 0003  
              __size_of_IPV4_GetMyIP 0012                __size_of_ETH_SaveRDPT 0010  
            __size_of_ENC28_PhyWrite 002E                       __end_of___wmul 5B9A  
           __end_of_ETH_EventHandler 51F6             ARPV4_Request@destAddress 000E  
                     TCP_Recv@length 00D9                        __pidataCOMRAM 5EDE  
                  _UDP_CallBackTable 1028                       TCP_Recv@tcbPtr 005B  
                     _ADC_Initialize 5DE6                    __size_of_TCP_Init 000E  
                  __size_of_TCP_Recv 02F8                       __end_of_initHW 5934  
                     __end_of_memset 5AAC                    __size_of_UDP_Send 0070  
                    ??_ENC28_PhyRead 000C                       __end_of_printf 5BE4  
          ETH_RxComputeChecksum@cksm 001C                           ?_UDP_Start 0067  
                ICMP_Receive@icmpHdr 0078            ETH_RxComputeChecksum@seed 0014  
              ??_DEMO_UDP_SetClaimIP 0002                          __end_ofPL20 2232  
                        __end_ofPL30 22C0                          __end_ofPL22 2278  
                        __end_ofPL40 2F88                          __end_ofPL32 22CC  
                        __end_ofPL24 2282                          __end_ofPL50 234C  
                        __end_ofPL42 3DE0                          __end_ofPL34 22EE  
                        __end_ofPL26 22A6                          __end_ofPL60 2FE8  
                        __end_ofPL52 3C02                          __end_ofPL44 2332  
                        __end_ofPL36 45EC                          __end_ofPL28 2A08  
                        __end_ofPL70 418A                          __end_ofPL62 3616  
                        __end_ofPL54 2356                          __end_ofPL46 2344  
                        __end_ofPL38 2316                  ICMP_Receive@ipv4Hdr 0071  
                        __end_ofPL80 23B0                          __end_ofPL72 2A6A  
                        __end_ofPL64 2A5C                          __end_ofPL56 334C  
                        __end_ofPL48 3DEA                          __end_ofPL90 23E0  
                        __end_ofPL82 23CA                          __end_ofPL74 4450  
                        __end_ofPL66 237A                          __end_ofPL58 2360  
                        __end_ofPL92 23EA                          __end_ofPL84 23D6  
                        __end_ofPL76 4468                          __end_ofPL68 2394  
                        __end_ofPL94 46E2                          __end_ofPL86 393E  
                        __end_ofPL78 23A2                          __end_ofPL96 23FC  
                        __end_ofPL88 3956                          __end_ofPL98 240E  
                start_initialization 596A                    _idle_pkt_received 01E4  
              ?_DEMO_UDP_IPLockTimer 0001                ??_Network_WaitForLink 0010  
             ?_ETH_TxComputeChecksum 000A                     ETH_Copy@temp_len 0011  
                      ETH_Copy@timer 000F            ETH_Copy@tx_buffer_address 000D  
                         ETH_Read8@b 0003          __end_of_TCP_ParseTCPOptions 4ADA  
             ETH_WriteStart@dest_mac 0008          ETH_TxComputeChecksum@length 000C  
                     ?_DEMO_UDP_Send 0001          __size_of_ETH_ResetByteCount 0010  
                  ?_ETH_GetByteCount 000A          ETH_EventHandler@phstat2_val 0010  
                        _ENC28_Rcr16 584A                         _IPV4_GetMyIP 5E28  
                       _ETH_SaveRDPT 5E3A                          _ENC28_Wcr16 5934  
           ??_TCP_FiniteStateMachine 00C4              __end_of_ETH_CheckLinkUp 5DD0  
                 ??_ETH_GetByteCount 000C                        ??_IPV4_Packet 0100  
                        ??_ENC28_Bfc 0006                      ?_ETH_WriteBlock 0003  
                        ??_ENC28_Bfs 0006                      ?_ETH_WriteStart 0008  
                      ??_ETH_Write32 0007                        ??_ETH_Write16 0005  
                           ??___wmul 0006            __end_of_UDP_CallBackTable 1037  
                        __doprnt@idx 0013               __end_of_ADC_Initialize 5DFC  
                        __doprnt@val 0018                  ARPV4_Request@header 002E  
                           ??_initHW 0004                             ??_memset 0008  
        __end_of_ETH_SendSystemReset 5EB6                             ??_printf 0020  
                        _DHCP_Manage 51F6                 IPv4_Start@macAddress 0064  
                      ETH_Insert@len 000A                      IPV4_Packet@cksm 00FA  
                      __pcstackBANK0 0060                        __pcstackBANK1 0100  
              TCP_Recv@remoteAddress 00D5                        _claim_dest_ip 01BC  
                     _ICMP_EchoReply 474C                             ?_TCP_Snd 0067  
             __size_of_ARPV4_Request 00C0                          ??_ETH_Read8 0003  
                        ??_ETH_Flush 0008               ??_ETH_NextPacketUpdate 0008  
                        ??_IPV4_Init 0002                        ?_SYSLOG_Write 0027  
                        ??_IPV4_Send 001A                    __size_of_lcd_busy 000A  
                  __size_of_lcd_init 0092                    __size_of_high_isr 5ED2  
                          __doprnt@c 001A                            __doprnt@f 000E  
                  __size_of_lcd_puts 0012              ??_ETH_RxComputeChecksum 0016  
           __size_of_TCP_PayloadSave 01A4                            __pnvBANK2 02B4  
    ICMP_EchoReply@ipv4PayloadLength 006D                     ___lwdiv@dividend 0002  
                          __pintcode 0008                          ??_TCB_Reset 0004  
                          __ptext102 5B00                            __ptext103 0000  
                 ARPV4_Packet@x_1710 0035                             ?___lwdiv 0002  
                           ?___lwmod 0009                        IPV4_Send@cksm 001F  
                    ?_ADC_Initialize 0001               ETH_ReadBlock@readCount 000A  
                 ETH_WriteBlock@data 0003                             ?__doprnt 000E  
              __size_of_Network_Init 0022                __size_of_Network_Read 00B8  
                 ARPV4_Packet@header 0038                          __pintcodelo 0018  
                __end_of_IPV4_Packet 35B6                   ARPV4_Packet@arpPtr 0032  
                  __size_of_spi_init 000C                            _lcd_goto1 5E5A  
                 ARPV4_Packet@length 002E         IPV4_PseudoHeaderChecksum@len 0009  
                          _lcd_putch 5D1C         IPV4_PseudoHeaderChecksum@tmp 000E  
           ARPV4_Update@entryPointer 0002                  __end_of_ETH_Write16 5BB6  
                __end_of_ETH_Write32 5B00                          __smallconst 1000  
                           _BAUDCON1 000F7E                          _clientState 005D  
                        ??_UDP_Start 0057               ??_DEMO_UDP_IPLockTimer 0003  
              __end_of_ETH_ReadBlock 537C                 __end_of_rtcc_handler 5B28  
             __end_of_ICMP_EchoReply 4856                             ?_low_isr 0001  
       __size_of_ETH_ComputeChecksum 0084                            _hexpowers 100B  
                   ___lwdiv@quotient 0006                            _localTime 02B8  
                DHCP_Request@started 006F                _pot_initial_adcResult 01DB  
                           ?_sprintf 001C                       __size_of_putch 001A  
                    ??_DEMO_UDP_Send 0058                       ??_SYSLOG_Write 0029  
                          _tcpHeader 01E8              __size_of_Network_Manage 0086  
                     ___wmul@product 0006                            _udpHeader 02A8  
                           _LED_Init 5C46                             _LATDbits 000F8C  
               ETH_WriteBlock@length 0005                          _idle_packet 01FE  
                           _ETH_Copy 4AE4                           TCP_Snd@ret 009F  
                           _ETH_Dump 564E                             _ETH_Init 3FE4  
                           _ETH_Send 59FA                     ?_ETH_CheckLinkUp 0001  
    __size_of_TCP_FiniteStateMachine 115C                          _ipv4Address 01C4  
                       _Network_Init 5BE4                         _Network_Read 4DCC  
                  _nextAvailablePort 01D7                     __CFG_WDTPS$32768 000000  
          __size_of_SPI_ExchangeByte 000E                            _uart_init 5DD0  
                           _SSP1CON1 000FC6                        ARPV4_Packet@x 0034  
                      SYSLOG_Write@t 0029                       _ENC28_PhyWrite 59CC  
                           _TCP_Init 5E76                            _rtcc_init 58C4  
                           _TCP_Recv 2C70   __size_of_IPV4_PseudoHeaderChecksum 0098  
                      _ARPV4_Request 45EC                             _UDP_Send 50E4  
         ?_IPV4_PseudoHeaderChecksum 0002                          ENC28_Rcr8@a 0006  
                        ENC28_Rcr8@v 0005                           ?_lcd_goto1 0001  
                        ENC28_Wcr8@a 0006                          ENC28_Wcr8@v 0005  
                         ?_lcd_putch 0001                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0002             __size_of_DHCP_WriteZeros 0018  
                      ARPV4_Lookup@x 000C          TCP_FiniteStateMachine@event 00D3  
                      ??_UDP_Receive 000E                      ?_ICMP_EchoReply 0067  
                          main@now_p 0189                            lcd_puts@s 0004  
                      ARPV4_Update@x 0004                   __end_of_macAddress 1043  
                      ??_UDP_Write32 000B                        TCP_Recv@count 005A  
         IPV4_PseudoHeaderChecksum@v 0008                     TCP_Update@tcbPtr 00DF  
                   __size_of_TCP_Snd 04AA              ??_DEMO_UDP_ClaimIPCheck 0002  
                      TCP_Snd@tcbPtr 0067                        ?_DHCP_Request 0001  
            __size_of_lcd_write_data 0020                        IPv4_Start@ret 0066  
                         _ENC28_Rcr8 5C66              __size_of_lcd_write_ctrl 0020  
                         _ENC28_Wcr8 5CA4                             __Hrparam 0000  
                        _IPV4_Packet 33D2               __end_of_ENC28_PhyWrite 59FA  
                           __Lrparam 0000                    _ADC_GetConversion 5A28  
                         ?_uart_init 0001                          _ETH_Write32 5AD6  
                        _ETH_Write16 5B9A                       ?_ARPV4_Request 000E  
                  ??_TCP_PayloadSave 00B8                           ?_rtcc_init 0001  
                 ?_ADC_GetConversion 0002                     __size_of___lwdiv 004A  
                   __size_of___lwmod 003E                    ?_ETH_EventHandler 0001  
                   __size_of__doprnt 0252    __end_of_IPV4_PseudoHeaderChecksum 4FBA  
             TCP_ParseTCPOptions@ret 0010               TCP_ParseTCPOptions@opt 0011  
                        _tcbListSize 01E7             ARPV4_Packet@entryPointer 0036  
            ??_ETH_TxComputeChecksum 0010                   ??_ETH_EventHandler 0010  
             ETH_CheckLinkUp@phstat2 000E               _TCP_FiniteStateMachine 10B4  
                ??_ADC_GetConversion 0004                             _dhcpName 1013  
             __size_of_lcd_init_pins 000A                      ___lwdiv@divisor 0004  
                    ___lwdiv@counter 0008                     __size_of_low_isr 0010  
                           __ptext10 4E84                             __ptext11 5C26  
                           __ptext20 4FBA                             __ptext12 5EB6  
                           __ptext21 39CC                             __ptext13 5EC0  
                           __ptext30 2C70                             __ptext22 4DCC  
                           __ptext14 5C46                             __ptext31 49D4  
                           __ptext23 5A56                             __ptext15 5DE6  
                           __ptext40 474C                             __ptext32 5B4E  
                           __ptext24 36DC                             __ptext16 5B28  
                           _arpTimer 02B0                             __ptext41 5E3A  
                           __ptext33 564E                             __ptext25 5D38  
                           __ptext17 599E                             __ptext50 52FE  
                           __ptext42 4AE4                             __ptext34 10B4  
                           __ptext26 580C                             __ptext18 5BC0  
                           __ptext51 516E                             __ptext43 5B74  
                           __ptext35 3C1A                             __ptext27 5732  
                           __ptext19 5E68                             __ptext60 3FE4  
                           __ptext52 51F6                             __ptext44 54B6  
                           __ptext36 2544                             __ptext28 33D2  
                           __ptext61 5EDA                             __ptext53 3E36  
                           __ptext45 5050                             __ptext37 4482  
                           __ptext29 527C                             __ptext70 0000  
                           __ptext62 5EAA                             __ptext54 5DA0  
                           __ptext46 5DFC                             __ptext38 4F22  
                           __ptext71 0000                             __ptext63 5DB8  
                           __ptext55 5AAC                             __ptext47 537C  
                           __ptext39 569A                             __ptext80 577C  
                           __ptext72 55B2                             __ptext64 5888  
                           __ptext56 5BE4                             __ptext48 56E6  
                           __ptext81 5600                             __ptext73 418A  
                           __ptext65 59CC                             __ptext57 550A  
                           __ptext49 3094                             __ptext90 545A  
                           __ptext82 5E4A                             __ptext74 5D6C  
                           __ptext66 5CA4                             __ptext58 5E76  
                           __ptext91 5934                             __ptext83 50E4  
                           __ptext75 5AD6                             __ptext67 5D52  
                           __ptext59 5E9E                             __ptext92 5CFE  
                           __ptext84 53EE                             __ptext76 5B9A  
                           __ptext68 5E28                             __ptext93 584A  
                           __ptext85 4CE2                             __ptext77 45EC  
                           __ptext69 4BF0                             __ptext94 57C4  
                           __ptext86 5C66                             __ptext78 4310  
                           __ptext95 5E84                             __ptext87 5CC2  
                           __ptext79 555E                             __ptext96 5D86  
                           __ptext88 59FA                             __ptext97 5A28  
                           __ptext89 5CE0                             __ptext98 5E12  
                           __ptext99 5ECA                         _SSP1CON1bits 000FC6  
                           _lcd_busy 5EC0                             _lcd_init 4E84  
                 DHCP_Request@ethMAC 0071                             _high_isr 0008  
                         _ARPV4_Init 5D52                         time@the_time 0007  
                           _lcd_puts 5C86                     __size_of_sprintf 002C  
                __end_of_UDP_Receive 52FE                             _lastBank 01E5  
                   ??_ETH_WriteBlock 0007                    _remoteIpv4Address 0224  
                 ETH_WriteStart@type 000A            ARPV4_Lookup@entry_pointer 000A  
                   ??_ETH_WriteStart 000C                        __size_of_main 0126  
                      ??_SYSLOG_Init 0027                       ??_DHCP_Request 0058  
                      __size_of_time 0054                         ?_ENC28_Rcr16 0005  
                       ?_ENC28_Wcr16 0005                  __end_of_UDP_Write32 0000  
          __end_of_ADC_GetConversion 5A56                Network_Read@debug_str 011C  
                  UDP_Send@udpLength 002A                      ?_ENC28_PhyWrite 0008  
       ETH_Insert@current_tx_pointer 000E                             _pot_init 01E6  
                           _spi_init 5E92                             int$flags 005E  
        DEMO_UDP_SetClaimIP@claim_ip 0002                 _rxPacketStatusVector 0228  
              __end_of_ENC28_BankSel 580C                         _SSP1STATbits 000FC7  
        __end_of_DEMO_UDP_SetClaimIP 5ED2                          ??_lcd_goto1 0003  
              __size_of_rtcc_handler 0028                 __end_of_SYSLOG_Write 5B4E  
          __size_of_ETH_GetByteCount 001E          __end_of_Network_WaitForLink 5E76  
                        ??_lcd_putch 0003                         ?_DHCP_Manage 0001  
                         _ETH_GetMAC 577C                            putch@data 0002  
                Network_Manage@nowPv 0218                           _ETH_Read16 5B4E  
          ETH_TxComputeChecksum@cksm 0014            ETH_TxComputeChecksum@seed 000E  
                         _ETH_Insert 545A                __end_of_ENC28_PhyRead 58C4  
                      ?_ARPV4_Packet 0001                      ETH_Write32@data 0003  
                    ETH_Write16@data 0003                        ?_ARPV4_Lookup 0002  
                           memset@p1 0002                           _ETH_Write8 5D6C  
                  ??_DHCP_WriteZeros 0006                        ?_ARPV4_Update 0001  
              _receivedRemoteAddress 01CC           __end_of_ETH_ResetByteCount 5E5A  
                           intlevel1 0000                             intlevel2 0000  
                          sprintf@ap 0027                            sprintf@pb 0028  
                          sprintf@wh 001C                       _Network_Manage 4FBA  
                   ___lwmod@dividend 0009                      UDP_Receive@hptr 0013  
       __size_of_TCP_ParseTCPOptions 0106                          ?_ENC28_Rcr8 0001  
                        ?_ENC28_Wcr8 0005       __size_of_ETH_RxComputeChecksum 0054  
                   ??_ADC_Initialize 0002                        _lcd_init_pins 5EB6  
      __end_of_ETH_RxComputeChecksum 550A                         _rtcc_handler 5B00  
                    ??_ARPV4_Request 0012                  _ETH_ComputeChecksum 5050  
                        ARPV4_Init@x 0002                     _SPI_ExchangeByte 5E84  
                     ENC28_BankSel@a 0004                       ENC28_BankSel@r 0003  
                        ??_uart_init 0002                  __end_of_SYSLOG_Init 59CC  
                           printf@ap 0021                             printf@pb 0022  
                        ??_rtcc_init 0002                 IPV4_Send@totalLength 0021  
                      ?_ICMP_Receive 0071                             sprintf@f 001E  
            __size_of_MAC_getAddress 0004                      ETH_WriteBlock@p 0007  
                      ENC28_Bfc@bits 0005        IPV4_PseudoHeaderChecksum@cksm 000A  
                    ___lwmod@divisor 000B                      ARPV4_Packet@ret 0031  
                     ??_ARPV4_Packet 000E                      ___lwmod@counter 000D  
                        _UDP_Receive 527C                       ??_ARPV4_Lookup 0006  
               ?_ETH_ComputeChecksum 0004         __size_of_ETH_SendSystemReset 000C  
         TCP_PayloadSave@buffer_size 0058                       ??_ARPV4_Update 0002  
                      ENC28_Bfs@bits 0005                           _IPv4_Start 418A  
                  Network_Manage@now 017B                           _TCP_Update 39CC  
             __end_of_Network_Manage 5040                          ?_ARPV4_Init 0001  
                        _UDP_Write32 0000                   Network_Read@header 016C  
                         _UDP_Write8 0000        __size_of_ETH_NextPacketUpdate 0072  
                       UDP_Receive@x 0014                       _lcd_write_data 5C06  
                     ?_lcd_init_pins 0001           __size_of_ADC_GetConversion 002E  
                     _lcd_write_ctrl 5C26                         UDP_Send@cksm 0028  
                   ETH_Insert@offset 000C  
