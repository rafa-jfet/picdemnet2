
# 1 "../../TCPIP Library/source/tcpv4.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 25 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdbool.h"
typedef unsigned char bool;

# 6 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stddef.h"
typedef int ptrdiff_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 34
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 51 "../../TCPIP Library/include\tcpip_types.h"
typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;

typedef union
{
uint16_t value;
struct
{
unsigned int priorityCodePoint:3;
unsigned int dropEligible:1;
unsigned int vlanId:12;
};
} tci_t;

typedef struct
{
uint8_t destinationMAC[6];
uint8_t sourceMAC[6];
union
{
uint16_t type;
uint16_t length;
uint16_t tpid;
}id;




} ethernetFrame_t;

uint8_t Control_Byte = 0x00;

# 88
typedef struct
{
unsigned ihl:4;
unsigned version:4;
unsigned ecn:2;
unsigned dscp:6;
uint16_t length;
uint16_t identifcation;
unsigned fragmentOffsetHigh:5;
unsigned :1;
unsigned dontFragment:1;
unsigned moreFragments:1;
uint8_t fragmentOffsetLow;
uint8_t timeToLive;
uint8_t protocol;
uint16_t headerCksm;
uint32_t srcIpAddress;
uint32_t dstIpAddress;


} ipv4Header_t;


typedef struct
{
uint32_t srcIpAddress;
uint32_t dstIpAddress;
uint8_t protocol;
uint8_t z;
uint16_t length;
} ipv4_pseudo_header_t;

typedef struct
{
union
{
uint16_t typeCode;
struct
{
uint8_t code;
uint8_t type;
};
};
uint16_t checksum;
uint16_t identifier;
uint16_t sequence;

} icmpHeader_t;


typedef enum
{
ECHO_REPLY = 0x0000,

DEST_NETWORK_UNREACHABLE = 0x0300,
DEST_HOST_UNREACHABLE = 0x0301,
DEST_PROTOCOL_UNREACHABLE = 0x0302,
DEST_PORT_UNREACHABLE = 0x0303,
FRAGMENTATION_REQUIRED = 0x0304,
SOURCE_ROUTE_FAILED = 0x0305,
DESTINATION_NETWORK_UNKNOWN = 0x0306,
SOURCE_HOST_ISOLATED = 0x0307,
NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
HOST_UNREACHABLE_FOR_TOS = 0x030B,
COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
HOST_PRECEDENCE_VIOLATION = 0x030D,
PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,

SOURCE_QUENCH = 0x0400,

REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,

ALTERNATE_HOST_ADDRESS = 0x0600,

ECHO_REQUEST = 0x0800,

ROUTER_ADVERTISEMENT = 0x0900,
ROUTER_SOLICITATION = 0x0A00,
TRACEROUTE = 0x3000
} icmpTypeCodes_t;

typedef struct
{
uint16_t srcPort;
uint16_t dstPort;
uint16_t length;
uint16_t checksum;
} udpHeader_t;

typedef struct
{
uint16_t sourcePort;
uint16_t destPort;
uint32_t sequenceNumber;
uint32_t ackNumber;
union{
uint8_t byte13;
struct{
uint8_t ns:1;
uint8_t reserved:3;
uint8_t dataOffset:4;
};
};

union{
uint8_t flags;
struct{
uint8_t fin:1;
uint8_t syn:1;
uint8_t rst:1;
uint8_t psh:1;
uint8_t ack:1;
uint8_t urg:1;
uint8_t ece:1;
uint8_t cwr:1;
};
};

uint16_t windowSize;
uint16_t checksum;
uint16_t urgentPtr;



} tcpHeader_t;

typedef struct
{
unsigned int version:4;
unsigned int trafficClass:8;
unsigned int flowLabel:20;
uint16_t payloadLength;
uint8_t nextHeader;
uint8_t hopLimit;
uint8_t srcAddress[8];
uint8_t dstAddress[8];

} ipv6Header_t;


typedef enum
{
HOPOPT = 0,
ICMP = 1,
IGMP = 2,
GGP = 3,
IPV4 = 4,
ST = 5,
TCP = 6,
CBT = 7,
EGP = 8,
IGP = 9,
BBN_RCC_MON = 10,
NVP_II = 11,
PUP = 12,
ARGUS = 13,
EMCON = 14,
XNET = 15,
CHAOS = 16,
UDP = 17,
MUX = 18,
DCN_MEAS = 19,
HMP = 20,
PRM = 21,
XNS_IDP = 22,
TRUNK_1 = 23,
TRUNK_2 = 24,
LEAF_1 = 25,
LEAF_2 = 26,
RDP = 27,
IRTP = 28,
ISO_TP4 = 29,
NETBLT = 30,
MFE_NSP = 31,
MERIT_INP = 32,
DCCP = 33,
THREEPC = 34,
IDPR = 35,
XTP = 36,
DDP = 37,
IDPR_CMTP = 38,
TPpp = 39,
IL = 40,
IPV6_TUNNEL = 41,
SDRP = 42,
IPV6_Route = 43,
IPV6_Frag = 44,
IDRP = 45,
RSVP = 46,
GRE = 47,
DSR = 48,
BNA = 49,
ESP = 50,
AH = 51,
I_NLSP = 52,
SWIPE = 53,
NARP = 54,
MOBILE = 55,
TLSP = 56,
SKIP = 57,
IPV6_ICMP = 58,
IPV6_NoNxt = 59,
IPV6_Opts = 60,
CFTP = 62,
SAT_EXPAK = 64,
KRYPTOLAN = 65,
RVD = 66,
IPPC = 67,
SAT_MON = 69,
VISA = 70,
IPCV = 71,
CPNX = 72,
CPHB = 73,
WSN = 74,
PVP = 75,
BR_SAT_MON = 76,
SUN_ND = 77,
WB_MON = 78,
WB_EXPAK = 79,
ISO_IP = 80,
VMTP = 81,
SECURE_VMTP = 82,
VINES = 83,
TTP = 84,
IPTM = 84,
NSFNET_IGP = 85,
DGP = 86,
TCF = 87,
EIGRP = 88,
OSPFIGP = 89,
Sprite_RPC = 90,
LARP = 91,
MTP = 92,
AX25 = 93,
IPIP = 94,
MICP = 95,
SCC_SP = 96,
ETHERIP = 97,
ENCAP = 98,
GMTP = 100,
IFMP = 101,
PNNI = 102,
PIM = 103,
ARIS = 104,
SCPS = 105,
QNX = 106,
A_N = 107,
IPComp = 108,
SNP = 109,
Compaq_Peer = 110,
IPX_in_IP = 111,
VRRP = 112,
PGM = 113,
L2TP = 115,
DDX = 116,
IATP = 117,
STP = 118,
SRP = 119,
UTI = 120,

SM = 122,
PTP = 123,
ISIS = 124,
FIRE = 125,
CRTP = 126,
CRUDP = 127,
SSCOPMCE = 128,
IPLT = 129,
SPS = 130,
PIPE = 131,
SCTP = 132,
FC = 133
} ipProtocolNumbers;

typedef struct
{
union{
uint32_t s_addr;
uint8_t s_addr_byte[4];
};
}inAddr_t;

typedef struct
{
uint16_t port;
inAddr_t addr;
}sockaddr_in_t;

typedef enum
{
ERROR =0,
SUCCESS,
LINK_NOT_FOUND,
BUFFER_BUSY,
TX_LOGIC_NOT_IDLE,
MAC_NOT_FOUND,
IP_WRONG_VERSION,
IPV4_CHECKSUM_FAILS,
DEST_IP_NOT_MATCHED,
ICMP_CHECKSUM_FAILS,
UDP_CHECKSUM_FAILS,
TCP_CHECKSUM_FAILS,
DMA_TIMEOUT,
PORT_NOT_AVAILABLE,
ARP_IP_NOT_MATCHED
}error_msg;

typedef struct
{
inAddr_t dest_addr;
}destIP_t;


typedef int8_t socklistsize_t;

typedef void (*ip_receive_function_ptr)(int);

# 49 "../../TCPIP Library/include\mac_address.h"
typedef union
{
uint8_t mac_array[6];
struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
} mac48Address_t;

extern const mac48Address_t broadcastMAC;
extern const mac48Address_t macAddress;

const mac48Address_t *MAC_getAddress(void);

# 51 "../../TCPIP Library/ethernet_drivers\ethernet_driver.h"
typedef struct
{
uint16_t byteCount;
unsigned long_drop_event:1;
unsigned :1;
unsigned excessCarrierEvent:1;
unsigned :1;
unsigned crcError:1;
unsigned lengthCheckError:1;
unsigned lengthLongError:1;
unsigned rxOK:1;
unsigned rxMulticast:1;
unsigned rxBroadcast:1;
unsigned dribbleNibble:1;
unsigned controlFrame:1;
unsigned pauseControlFrame:1;
unsigned unknownContrlFrame:1;
unsigned vlanTagPresent:1;
unsigned zero:1;
}receiveStatusVector_t;

typedef struct
{
unsigned error:1;
unsigned pktReady:1;
unsigned up:1;
unsigned idle:1;
unsigned linkChange:1;
unsigned bufferBusy:1;
unsigned :2;
uint16_t TXPacketSize;
uint16_t saveRDPT;
uint16_t saveWRPT;
} ethernetDriver_t;

extern volatile ethernetDriver_t ethData;

# 92
void ETH_Init(void);
void ETH_EventHandler(void);
void ETH_NextPacketUpdate();
void ETH_ResetReceiver(void);
void ETH_SendSystemReset(void);


uint16_t ETH_ReadBlock(void*, uint16_t);
uint8_t ETH_Read8(void);
uint16_t ETH_Read16(void);
uint32_t ETH_Read32(void);
void ETH_Dump(uint16_t);
void ETH_Flush(void);

error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
uint16_t ETH_WriteBlock(void *, uint16_t);
void ETH_Write8(uint8_t);
void ETH_Write16(uint16_t);
void ETH_Write24(uint24_t data);
void ETH_Write32(uint32_t);
void ETH_Insert(char *,uint16_t, uint16_t);
error_msg ETH_Copy(uint16_t);
error_msg ETH_Send(void);

uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);

void ETH_GetMAC(uint8_t *);
void ETH_SetMAC(uint8_t *);

void ETH_SaveRDPT(void);

void ETH_ResetByteCount(void);
uint16_t ETH_GetByteCount(void);

bool ETH_CheckLinkUp();

# 63 "../../TCPIP Library/include\ipv4.h"
extern uint32_t ipv4Address;
extern uint32_t dstIPv4Address;
extern uint32_t ipv4Gateway;
extern uint8_t gatewayMAC[6];
extern uint32_t ipv4DNS[2];
extern uint32_t ipv4SubnetMask;
extern uint32_t ipv4Router;
extern ipv4Header_t ipv4Header;

# 79
void IPV4_Init(void);

# 86
error_msg IPV4_Packet(void);

# 103
error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);

# 111
uint32_t IPV4_GetMyIP(void);

# 122
uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);

# 136
error_msg IPV4_Send(uint16_t payloadLength);

# 67 "../../TCPIP Library/include\tcpip_config.h"
const char dhcpName[] = "PIC18F97J60 ETHERNET";

# 58 "../../TCPIP Library/include\dhcp_client.h"
typedef enum
{
DHCP_DISCOVER = 1,
DHCP_OFFER, DHCP_REQUEST, DHCP_DECLINE, DHCP_ACK, DHCP_NACK, DHCP_RELEASE,
DHCP_INFORM, DHCP_FORCERENEW, DHCP_LEASEQUERY, DHCP_LEASEUNASSIGNED, DHCP_LEASEUNKNOWN,
DHCP_LEASEACTIVE, DHCP_BULKLEASEQUERY, DHCP_LEASEQUERYDONE
}dhcp_type;

typedef enum
{
INIT = 1, INIT_REBOOT, SELECTING, REQUESTING, BOUND
}dhcp_client_state;

# 81
void DHCP_Request(dhcp_type);

# 90
void DHCP_Handler(int);

# 96
void DHCP_Manage(void);

# 104
void DHCP_WriteZeros(uint16_t length);

# 65 "../../TCPIP Library/include\tcpv4.h"
typedef enum
{
CLOSED = 0,
LISTEN, SYN_SENT, SYN_RECEIVED, ESTABLISHED, FIN_WAIT_1, FIN_WAIT_2, CLOSE_WAIT, CLOSING, LAST_ACK, TIME_WAIT,
}tcp_fsm_states_t;

typedef enum
{
CLOSE = 0,
ACTIVE_OPEN, PASIVE_OPEN, RCV_SYN, RCV_ACK, RCV_SYNACK, RCV_FIN, RCV_FINACK, RX_PACKET, RCV_RST, RCV_RSTACK,
RCV_PSHACK, TIMEOUT,
NOP
}tcpEvent_t;


typedef enum
{
NOT_A_SOCKET = 0,
SOCKET_CLOSED,
SOCKET_IN_PROGRESS,
SOCKET_CONNECTED,
SOCKET_CLOSING
} socketState_t;

typedef struct
{
uint32_t localIP;
uint16_t localPort;
uint32_t remoteIP;
uint16_t remotePort;
}tcpSocket_t;

typedef enum
{
NO_BUFF = 0,
RX_BUFF_IN_USE,
TX_BUFF_IN_USE
}tcpBufferState_t;

typedef struct
{
uint16_t localPort;

uint32_t destIP;
uint16_t destPort;

uint32_t remoteSeqno;
uint32_t remoteAck;

uint32_t localSeqno;
uint32_t localLastAck;

uint16_t remoteWnd;
uint16_t localWnd;

uint16_t mss;

uint8_t *rxBufferStart;
uint8_t *rxBufferPtr;
tcpBufferState_t rxBufState;

uint8_t *txBufferStart;
uint8_t *txBufferPtr;
uint16_t bytesToSend;
tcpBufferState_t txBufState;

tcp_fsm_states_t fsmState;
tcpEvent_t connectionEvent;


void *nextTCB;
void *prevTCB;

uint16_t timeout;
uint16_t timeoutReloadValue;
uint8_t timeoutsCount;
uint8_t flags;

socketState_t socketState;
}tcpTCB_t;

typedef enum
{
TCP_EOP = 0u,
TCP_NOP = 1u,
TCP_MSS = 2u,

# 197
}tcp_options_t;

# 213
void TCP_Init(void);

# 229
tcbError_t TCP_SocketInit(tcpTCB_t *tcb_ptr);

# 244
tcbError_t TCP_SocketRemove(tcpTCB_t *tcb_ptr);

# 258
socketState_t TCP_SocketPoll(tcpTCB_t *tcbPtr);

# 275
bool TCP_Bind(tcpTCB_t *tcbPtr, uint16_t port);

# 293
bool TCP_Listen(tcpTCB_t *tcbPtr);

# 309
bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr);

# 323
bool TCP_Close(tcpTCB_t *tcbPtr);

# 338
bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);

# 353
bool TCP_SendDone(tcpTCB_t *tcbPtr);

# 372
bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);

# 386
int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr);

# 399
int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr);

# 411
void TCP_Update(void);

# 62 "../../TCPIP Library/include\network.h"
void Network_Init(void);
void Network_Read(void);
void Network_Manage(void);
void Network_WaitForLink(void);

# 47 "../../TCPIP Library/include\syslog.h"
void SYSLOG_Init(void);
void SYSLOG_Write(const char *message);

# 52 "../../TCPIP Library/source/tcpv4.c"
tcpTCB_t *tcbList;
socklistsize_t tcbListSize;
tcpTCB_t *currentTCB;

static tcpHeader_t tcpHeader;
static uint16_t nextAvailablePort;
static uint32_t nextSequenceNumber;

static uint32_t receivedRemoteAddress;
static uint16_t rcvPayloadLen;
static uint16_t tcpMss;

# 70
static bool TCP_FiniteStateMachine(void);

# 80
static void TCB_Insert(tcpTCB_t *ptr)
{


if(tcbList != (0))
{

tcbList->prevTCB = ptr;
}
ptr->nextTCB = tcbList;
tcbList = ptr;
ptr->prevTCB = (0);
tcbListSize ++;
}

# 104
static void TCB_Remove(tcpTCB_t *ptr)
{
if(tcbListSize > 1)
{

if(ptr->prevTCB == (0))
{
tcbList = ptr->nextTCB;
((tcpTCB_t *)(ptr->nextTCB))->prevTCB = (0);
} else
{
((tcpTCB_t *)(ptr->prevTCB))->nextTCB = ptr->nextTCB;
((tcpTCB_t *)(ptr->nextTCB))->prevTCB = ptr->prevTCB;
}
tcbListSize --;
}
else if(tcbListSize==1)
{
tcbList = (0);
}
}

# 134
static void TCB_Reset(tcpTCB_t *tcbPtr)
{
tcbPtr->destIP = 0;
tcbPtr->destPort = 0;
tcbPtr->localSeqno = 0;
tcbPtr->localLastAck = 0;
tcbPtr->remoteSeqno = 0;
tcbPtr->remoteAck = 0;
tcbPtr->remoteWnd = 0;

tcbPtr->timeout = 0;
tcbPtr->timeoutReloadValue = 0;
tcbPtr->timeoutsCount = 0;
tcbPtr->flags = 0;

tcbPtr->localPort = 0;
tcbPtr->socketState = SOCKET_CLOSED;
}

# 162
static bool TCB_Check(tcpTCB_t *ptr)
{
tcpTCB_t *tcbPtr;
bool ret = 0;
socklistsize_t count = 0;

if((tcbList != (0)) && (ptr != (0)))
{

tcbPtr = tcbList;
while((tcbPtr != (0)) && (count < tcbListSize))
{
if (tcbPtr == ptr)
{
ret = 1;
break;
}
else
{
tcbPtr = tcbPtr->nextTCB;
count ++;
}
}
}
return ret;
}

# 200
static bool TCP_Snd(tcpTCB_t *tcbPtr)
{
bool ret = 0;
tcpHeader_t txHeader;
uint16_t payloadLength;
uint16_t cksm;
uint16_t tcpDataLength;
uint8_t *data;

txHeader.sourcePort = ((((uint16_t)tcbPtr->localPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->localPort & (uint16_t)0x00FF) << 8));
txHeader.destPort = ((((uint16_t)tcbPtr->destPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->destPort & (uint16_t)0x00FF) << 8));

txHeader.sequenceNumber = ((((uint32_t)tcbPtr->localSeqno&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x000000ff) << 24) );

txHeader.ackNumber = ((((uint32_t)tcbPtr->remoteAck&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x000000ff) << 24) );

txHeader.ns = 0;
txHeader.reserved = 0;
txHeader.dataOffset = 5;
txHeader.windowSize = ((((uint16_t)tcbPtr->localWnd & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->localWnd & (uint16_t)0x00FF) << 8));
txHeader.checksum = 0;
txHeader.urgentPtr = 0;

if ((tcbPtr->flags) & (0x02U | 0x04U))
{
tcpDataLength = 0;
} else
{
tcpDataLength = tcbPtr->bytesToSend;

if (tcpDataLength != 0)
{
if(tcpDataLength > tcbPtr->remoteWnd)
{
tcpDataLength = tcbPtr->remoteWnd;
}

if(tcpDataLength > tcbPtr->mss)
{
tcpDataLength = tcbPtr->mss;
}
data = tcbPtr->txBufferPtr;


tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;

if (tcbPtr->bytesToSend == 0)
{
tcbPtr->flags |= 0x08U;
}
}
}

txHeader.flags = tcbPtr->flags;
payloadLength = sizeof(tcpHeader_t) + tcpDataLength;

ret = IPv4_Start(tcbPtr->destIP, TCP);
if (ret)
{
ETH_WriteBlock((uint8_t *) &txHeader, sizeof(tcpHeader_t));

if (tcpDataLength > 0)
{
ETH_WriteBlock( data, tcpDataLength);
}

cksm = payloadLength + TCP;

cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, payloadLength + 8, cksm);
ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + (int)(((char*)&((tcpHeader_t *)1)->checksum)-1));

ret = IPV4_Send(payloadLength);
}



if (ret == 0)
{


tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;

if (tcbPtr->timeout == 0)
{
tcbPtr->timeout = ((unsigned long)1*2);
}
}
else
{

tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
;
}

return ret;
}

# 310
bool TCP_PayloadSave(uint16_t len)
{
bool ret = 0;
uint16_t buffer_size;


if (currentTCB->rxBufState == RX_BUFF_IN_USE)
{

if (currentTCB->localWnd >= len)
{
buffer_size = len;
}else
{
buffer_size = currentTCB->localWnd;
}

ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;


currentTCB->localWnd = currentTCB->localWnd - buffer_size;
currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;


currentTCB->flags = 0x10U;
TCP_Snd(currentTCB);
ret = 1;
}
return ret;
}

# 356
static bool TCP_ParseTCPOptions(void)
{
uint8_t opt;
uint16_t tcpOptionsSize;
bool ret;

ret = 0;

tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeader_t));

if (tcpOptionsSize > 0)
{


tcpMss = 536;

if(tcpHeader.syn)
{

while(tcpOptionsSize--)
{
opt = ETH_Read8();
switch (opt)
{
case TCP_EOP:

if (tcpOptionsSize)
{

ETH_Dump(tcpOptionsSize);
tcpOptionsSize = 0;
}
ret = 1;
break;
case TCP_NOP:

break;
case TCP_MSS:
if (tcpOptionsSize >= 3)
{
opt = ETH_Read8();
if (opt == 0x04)
{

tcpMss = ETH_Read16();

tcpOptionsSize = tcpOptionsSize - 3;


if (tcpMss > 1460u)
{
tcpMss = 1460u;
}

ret = 1;
}else
{

;

tcpOptionsSize = 0;
}
}else
{

tcpOptionsSize = 0;
ret = 0;
}
break;
default:
;
opt = ETH_Read8();
tcpOptionsSize--;

if (opt > 1)
{

opt = opt - 2;
if (opt <= tcpOptionsSize)
{

ETH_Dump(opt);
tcpOptionsSize = tcpOptionsSize - opt;
ret = 1;
}else
{
;

tcpOptionsSize = 0;
ret = 0;
}
}else
{
;


tcpOptionsSize = 0;
ret = 0;
}
break;
}
}
}else
{
ETH_Dump(tcpOptionsSize);
ret = 1;
}
}else
{
ret = 1;
}

return ret;
}

# 483
void TCP_Recv(uint32_t remoteAddress, uint16_t length)
{
tcpTCB_t *tcbPtr;
socklistsize_t count = 0;

tcbPtr = (0);

receivedRemoteAddress = 0;
rcvPayloadLen = 0;

ETH_ReadBlock((char *)&tcpHeader,sizeof(tcpHeader_t));

currentTCB = (0);


if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0))
{
tcpHeader.sourcePort = ((((uint16_t)tcpHeader.sourcePort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.sourcePort & (uint16_t)0x00FF) << 8));
tcpHeader.destPort = ((((uint16_t)tcpHeader.destPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.destPort & (uint16_t)0x00FF) << 8));


tcbPtr = tcbList;
while((tcbPtr != (0)) && (count < tcbListSize))
{
if (tcpHeader.destPort == tcbPtr->localPort)
{
currentTCB = tcbPtr;
break;
}
else
{
tcbPtr = tcbPtr->nextTCB;
count ++;
}
}

if (currentTCB != (0))
{
if((tcpHeader.sourcePort == currentTCB->destPort) ||
(currentTCB->destIP == 0))
{


receivedRemoteAddress = remoteAddress;
rcvPayloadLen = length - (uint16_t)(tcpHeader.dataOffset << 2);


if (TCP_ParseTCPOptions() == 1)
{


if(tcpHeader.syn)
{
if(tcpHeader.ack)
{
;
currentTCB->connectionEvent = RCV_SYNACK;
} else
{
;
currentTCB->connectionEvent = RCV_SYN;
}
} else if(tcpHeader.fin)
{
if(tcpHeader.ack)
{
;
currentTCB->connectionEvent = RCV_FINACK;
} else
{
;
currentTCB->connectionEvent = RCV_FIN;
}
} else if(tcpHeader.rst)
{
if(tcpHeader.ack)
{
;
currentTCB->connectionEvent = RCV_RSTACK;
} else
{
;
currentTCB->connectionEvent = RCV_RST;
}
} else if(tcpHeader.ack)
{
;
currentTCB->connectionEvent = RCV_ACK;
}
else
{
;
}

tcpHeader.ackNumber = ((((uint32_t)tcpHeader.ackNumber&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x000000ff) << 24) );
tcpHeader.sequenceNumber = ((((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x000000ff) << 24) );

TCP_FiniteStateMachine();
}else
{
;
}
}
}
}
}

# 602
static bool TCP_FiniteStateMachine(void)
{
uint16_t notAckBytes;
bool ret = 0;

tcp_fsm_states_t nextState = currentTCB->fsmState;
tcpEvent_t event = currentTCB->connectionEvent;

switch (currentTCB->fsmState)
{
case LISTEN:
switch (event)
{
case RCV_SYN:
;


currentTCB->destIP = receivedRemoteAddress;
currentTCB->destPort = tcpHeader.sourcePort;


currentTCB->localLastAck = 0;

currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
currentTCB->remoteAck = currentTCB->remoteSeqno + 1;


currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
currentTCB->mss = tcpMss;


currentTCB->flags = 0x02U | 0x10U;
currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutReloadValue = ((unsigned long)1*2);
currentTCB->timeoutsCount = (3u);

TCP_Snd(currentTCB);
nextState = SYN_RECEIVED;
break;
case CLOSE:
;
nextState = CLOSE;
TCB_Reset(currentTCB);
break;
default:

break;
}
break;
case SYN_SENT:
switch (event)
{
case RCV_SYN:
;

currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;


currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
currentTCB->mss = tcpMss;


currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutReloadValue = ((unsigned long)1*2);
currentTCB->timeoutsCount = (3u);
currentTCB->flags = 0x02U | 0x10U;

TCP_Snd(currentTCB);


nextState = SYN_RECEIVED;
break;
case RCV_SYNACK:
;

currentTCB->timeout = 0;

if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
{

currentTCB->localSeqno = currentTCB->localSeqno + 1;
currentTCB->flags = 0x10U;


currentTCB->remoteSeqno = tcpHeader.sequenceNumber;

currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;

currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
currentTCB->mss = tcpMss;

if(TCP_Snd(currentTCB))
{
nextState = ESTABLISHED;
currentTCB->socketState = SOCKET_CONNECTED;
}
}
else
{

currentTCB->localSeqno = tcpHeader.ackNumber;
currentTCB->flags = 0x04U | 0x10U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
case RCV_ACK:
;

currentTCB->timeout = 0;

if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
{

currentTCB->localSeqno = currentTCB->localSeqno + 1;
currentTCB->flags = 0x10U;


currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;

currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
currentTCB->mss = tcpMss;

nextState = ESTABLISHED;
currentTCB->socketState = SOCKET_CONNECTED;
}
else
{

currentTCB->localSeqno = tcpHeader.ackNumber;
currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
case CLOSE:
;

nextState = CLOSED;
TCB_Reset(currentTCB);
break;
case TIMEOUT:
;


if (currentTCB->timeoutsCount)
{
if(TCP_Snd(currentTCB))
{
if (currentTCB->flags & 0x04U)
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}else
if(currentTCB->flags & 0x10U)
{
nextState = ESTABLISHED;
currentTCB->socketState = SOCKET_CONNECTED;
}
}
}else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
case RCV_RST:
case RCV_RSTACK:

nextState = CLOSED;
TCB_Reset(currentTCB);
break;
default:

break;
}
break;
case SYN_RECEIVED:
switch (event)
{
case RCV_SYNACK:
;
if (currentTCB->localPort == tcpHeader.destPort)
{

currentTCB->timeout = 0;



if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)

nextState = ESTABLISHED;
currentTCB->socketState = SOCKET_CONNECTED;
}
break;
case RCV_ACK:
;



if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
{


if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
{

if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
{
currentTCB->localSeqno = currentTCB->localSeqno + 1;

currentTCB->timeout = 0;

nextState = ESTABLISHED;
currentTCB->socketState = SOCKET_CONNECTED;
}
}
}
break;
case CLOSE:
;

currentTCB->timeout = 0;

currentTCB->flags = 0x01U;
currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutReloadValue = ((unsigned long)1*2);
currentTCB->timeoutsCount = (5u);

nextState = FIN_WAIT_1;
TCP_Snd(currentTCB);
break;
case RCV_RSTACK:
case RCV_RST:

;

if (currentTCB->localPort == tcpHeader.destPort)
{
if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
{
;
currentTCB->destIP = 0;
currentTCB->destPort = 0;
currentTCB->localSeqno = 0;
currentTCB->localLastAck = 0;
currentTCB->remoteSeqno = 0;
currentTCB->remoteAck = 0;
currentTCB->remoteWnd = 0;
currentTCB->mss = 0;

nextState = LISTEN;
}
}
break;
case TIMEOUT:
;
if (currentTCB->timeoutsCount)
{
TCP_Snd(currentTCB);
}
else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
currentTCB->destIP = 0;
currentTCB->destPort = 0;
currentTCB->localSeqno = 0;
currentTCB->localLastAck = 0;
currentTCB->remoteSeqno = 0;
currentTCB->remoteAck = 0;
currentTCB->remoteWnd = 0;
currentTCB->mss = 0;
nextState = LISTEN;
}
}
break;
default:

break;
}
break;
case ESTABLISHED:
switch (event)
{
case RCV_ACK:
;
if (currentTCB->destIP == receivedRemoteAddress)
{



if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
{



if (currentTCB->localLastAck < tcpHeader.ackNumber)
{

if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber)
{
notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;


currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;


if(currentTCB->bytesToSend == 0)
{
if (currentTCB->txBufState == TX_BUFF_IN_USE)
{
currentTCB->txBufState = NO_BUFF;
}
}

currentTCB->localLastAck = tcpHeader.ackNumber - 1;
currentTCB->localSeqno = tcpHeader.ackNumber;


if(rcvPayloadLen > 0)
{
currentTCB->remoteSeqno = tcpHeader.sequenceNumber;


TCP_PayloadSave(rcvPayloadLen);
}
}else
{



currentTCB->flags = 0x04U | 0x10U;
if (TCP_Snd(currentTCB))
{
nextState = CLOSED;
TCB_Reset(currentTCB);
}
}
}
}
}
break;
case CLOSE:
;
currentTCB->flags = 0x01U;
nextState = FIN_WAIT_1;
TCP_Snd(currentTCB);
break;
case RCV_FINACK:
;
case RCV_FIN:
;


currentTCB->localSeqno = tcpHeader.ackNumber;
currentTCB->remoteAck = currentTCB->remoteAck + 1;

currentTCB->socketState = SOCKET_CLOSING;
currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutReloadValue = ((unsigned long)1*2);
currentTCB->timeoutsCount = (5u);

currentTCB->flags = 0x01U | 0x10U;

nextState = LAST_ACK;
TCP_Snd(currentTCB);
break;
case RCV_RST:
case RCV_RSTACK:
nextState = CLOSED;
TCB_Reset(currentTCB);
break;
case TIMEOUT:
;
if (currentTCB->timeoutsCount)
{
TCP_Snd(currentTCB);
}else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
default:
break;
}
break;
case FIN_WAIT_1:
switch (event)
{
case RCV_FIN:
;
currentTCB->flags = 0x10U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSING;
}
break;
case RCV_ACK:
;

currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutsCount = 1;
nextState = FIN_WAIT_2;
break;
case RCV_FINACK:
;
currentTCB->flags = 0x10U;
if(TCP_Snd(currentTCB))
{
nextState = TIME_WAIT;
}
break;
case TIMEOUT:
;
if (currentTCB->timeoutsCount)
{
TCP_Snd(currentTCB);
}else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
default:
break;
}
break;
case FIN_WAIT_2:
switch (event)
{
case RCV_FIN:
;
if(TCP_Snd(currentTCB))
{
nextState = TIME_WAIT;
}
break;
case TIMEOUT:
;
if (currentTCB->timeoutsCount)
{
TCP_Snd(currentTCB);
}else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
break;
default:
break;
}
break;
case CLOSE_WAIT:

break;
case CLOSING:
switch (event)
{
case RCV_ACK:
;
nextState = TIME_WAIT;
break;
default:
break;
}
break;
case LAST_ACK:

switch (event)
{
case RCV_FINACK:
case RCV_ACK:
if ((currentTCB->destIP == receivedRemoteAddress) &&
(currentTCB->destPort == tcpHeader.sourcePort))
{
;
nextState = CLOSED;
TCB_Reset(currentTCB);
}
break;
case TIMEOUT:
if (currentTCB->timeoutsCount)
{
TCP_Snd(currentTCB);
}else
{

currentTCB->flags = 0x04U;
if(TCP_Snd(currentTCB))
{
nextState = CLOSE;
TCB_Reset(currentTCB);
}
}
default:
break;
}
break;
case TIME_WAIT:
;
nextState = CLOSED;
TCB_Reset(currentTCB);
break;
case CLOSED:
switch (event)
{
case ACTIVE_OPEN:
;

currentTCB->timeout = ((unsigned long)1*2);
currentTCB->timeoutReloadValue = ((unsigned long)1*2);
currentTCB->timeoutsCount = (3u);
currentTCB->flags = 0x02U;
TCP_Snd(currentTCB);
nextState = SYN_SENT;
ret = 1;
break;
case PASIVE_OPEN:
;
currentTCB->destIP = 0;
currentTCB->destPort = 0;
nextState = LISTEN;
ret = 1;
break;
default:
break;
}
break;
default:
break;
}
currentTCB->connectionEvent = NOP;
currentTCB->fsmState = nextState;
return ret;
}


void TCP_Init(void)
{
tcbList = (0);
tcbListSize = 0;
nextAvailablePort = (1024u);
nextSequenceNumber = 0;
}

tcbError_t TCP_SocketInit(tcpTCB_t *tcbPtr)
{
tcbError_t ret = TCB_ERROR;


if(TCB_Check(tcbPtr) == 0)
{
TCB_Reset(tcbPtr);

tcbPtr->localWnd = 0;
tcbPtr->mss = 1460u;
tcbPtr->fsmState = CLOSED;
tcbPtr->connectionEvent = NOP;
tcbPtr->rxBufferStart = (0);
tcbPtr->rxBufState = NO_BUFF;
tcbPtr->txBufferStart = (0);
tcbPtr->txBufferPtr = (0);
tcbPtr->bytesToSend = 0;
tcbPtr->txBufState = NO_BUFF;

TCB_Insert(tcbPtr);
ret = TCB_NO_ERROR;
}
return ret;
}

tcbError_t TCP_SocketRemove(tcpTCB_t *tcbPtr)
{
tcbError_t ret = TCB_ERROR;


if(TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED)
{
TCB_Remove(tcbPtr);
ret = TCB_NO_ERROR;
}
return ret;
}

socketState_t TCP_SocketPoll(tcpTCB_t *socket_ptr)
{
socketState_t tmpSocketState;

tmpSocketState = NOT_A_SOCKET;

if(TCB_Check(socket_ptr))
{
tmpSocketState = socket_ptr->socketState;
}

return tmpSocketState;
}


bool TCP_Bind(tcpTCB_t *tcbPtr, uint16_t port)
{
bool ret = 0;

;

if (TCB_Check(tcbPtr))
{
tcbPtr->localPort = port;
ret = 1;
}
return ret;
}


bool TCP_Listen(tcpTCB_t *tcbPtr)
{
bool ret = 0;

;

if (TCB_Check(tcbPtr))
{
tcbPtr->connectionEvent = PASIVE_OPEN;
tcbPtr->socketState = SOCKET_IN_PROGRESS;
tcbPtr->localSeqno = nextSequenceNumber;
currentTCB = tcbPtr;
if (tcbPtr->localPort == 0)
{
tcbPtr->localPort = nextAvailablePort++;
}
ret = TCP_FiniteStateMachine();
}
return ret;
}


bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr)
{
bool ret = 0;

if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED)
{
tcbPtr->destIP = srvaddr->addr.s_addr;
tcbPtr->destPort = srvaddr->port;
if(tcbPtr->localPort == 0)
{

tcbPtr->localPort = nextAvailablePort++;
}

tcbPtr->socketState = SOCKET_IN_PROGRESS;
tcbPtr->localSeqno = nextSequenceNumber;
tcbPtr->connectionEvent = ACTIVE_OPEN;

currentTCB = tcbPtr;
ret = TCP_FiniteStateMachine();
}

return ret;
}


bool TCP_Close(tcpTCB_t *tcbPtr)
{
bool ret = 0;

;

if (TCB_Check(tcbPtr))
{
tcbPtr->connectionEvent = CLOSE;

tcbPtr->socketState = SOCKET_CLOSING;


currentTCB = tcbPtr;
ret = TCP_FiniteStateMachine();
}
return ret;
}


bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen)
{
bool ret = 0;

if (TCP_SocketPoll(tcbPtr) == SOCKET_CONNECTED)
{
if (tcbPtr->txBufState == NO_BUFF)
{
if (data != (0))
{
tcbPtr->txBufferStart = data;
tcbPtr->txBufferPtr = tcbPtr->txBufferStart;
tcbPtr->bytesToSend = dataLen;
tcbPtr->txBufState = TX_BUFF_IN_USE;

tcbPtr->timeoutReloadValue = ((unsigned long)1*2);
tcbPtr->timeoutsCount = (5u);

tcbPtr->flags = 0x10U;

TCP_Snd(tcbPtr);
ret = 1;
}
}
}
return ret;
}


bool TCP_SendDone(tcpTCB_t *tcbPtr)
{
bool ret = 0;

if(TCB_Check(tcbPtr))
{
if (tcbPtr->txBufState == NO_BUFF)
{
ret = 1;
}
}
return ret;
}

bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t data_len)
{
bool ret = 0;

if (TCB_Check(tcbPtr))
{
if (tcbPtr->rxBufState == NO_BUFF)
{
if (data != (0))
{
tcbPtr->rxBufferStart = data;
tcbPtr->rxBufferPtr = tcbPtr->rxBufferStart;
tcbPtr->localWnd = data_len;
tcbPtr->rxBufState = RX_BUFF_IN_USE;
ret = 1;
}
}
}
return ret;
}


int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr)
{
int16_t ret = 0;

if (TCB_Check(tcbPtr))
{
if (tcbPtr->rxBufState == RX_BUFF_IN_USE)
{
ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;

if (ret != 0)
{
tcbPtr->localWnd = 0;
tcbPtr->rxBufState = NO_BUFF;
}
}
}
return ret;
}

int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr)
{
int16_t ret = 0;

if (TCB_Check(tcbPtr))
{
if (tcbPtr->rxBufState == RX_BUFF_IN_USE)
{
ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
}
}
return ret;
}

void TCP_Update(void)
{
tcpTCB_t *tcbPtr;
tcbPtr = (0);
int count = 0;



nextSequenceNumber++;


nextAvailablePort = nextAvailablePort + 1;
if (nextAvailablePort < (1024u))
{
nextAvailablePort = (1024u);
}


tcbPtr = tcbList;
while((tcbPtr != (0)) && (count < tcbListSize))
{
if (tcbPtr->timeout > 0)
{
;
tcbPtr->timeout = tcbPtr->timeout - 1;

if (tcbPtr->timeout == 0)
{
if (tcbPtr->timeoutsCount > 0)
{

if (tcbPtr->connectionEvent == NOP)
{
tcbPtr->timeout = tcbPtr->timeoutReloadValue;
tcbPtr->timeoutsCount = tcbPtr->timeoutsCount - 1;
tcbPtr->connectionEvent = TIMEOUT;
currentTCB = tcbPtr;
TCP_FiniteStateMachine();
}
}
}
}
tcbPtr = tcbPtr->nextTCB;
count ++;
}
}
