Version 3.2 HI-TECH Software Intermediate Code
[v F471 `(v ~T0 @X0 0 tf1`i ]
"61 ../../TCPIP Library/include\udpv4_port_handler_table.h
[s S26 `ui 1 `*F471 1 ]
[n S26 . portNumber callBack ]
"90 ../../TCPIP Library/include\dhcp_client.h
[v _DHCP_Handler `(v ~T0 @X0 0 ef1`i ]
"68 ../../TCPIP Library/source/dhcp_client.c
[c E609 1 2 3 4 5 .. ]
[n E609 . INIT INIT_REBOOT SELECTING REQUESTING BOUND  ]
"72
[c E592 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .. ]
[n E592 . DHCP_DISCOVER DHCP_OFFER DHCP_REQUEST DHCP_DECLINE DHCP_ACK DHCP_NACK DHCP_RELEASE DHCP_INFORM DHCP_FORCERENEW DHCP_LEASEQUERY DHCP_LEASEUNASSIGNED DHCP_LEASEUNKNOWN DHCP_LEASEACTIVE DHCP_BULKLEASEQUERY DHCP_LEASEQUERYDONE  ]
"52 ../../TCPIP Library/include\mac_address.h
[s S23 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S23 . byte1 byte2 byte3 byte4 byte5 byte6 ]
"50
[u S22 `uc -> 6 `i `S23 1 ]
[n S22 . mac_array s ]
"119 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_GetMAC `(v ~T0 @X0 0 ef1`*uc ]
"85 ../../TCPIP Library/source/dhcp_client.c
[c E449 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .. ]
[n E449 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED  ]
"81 ../../TCPIP Library/include\udpv4.h
[v _UDP_Start `(E449 ~T0 @X0 0 ef3`ul`ui`ui ]
"111 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_Write32 `(v ~T0 @X0 0 ef1`ul ]
"63 ../../TCPIP Library/include\ipv4.h
[v _ipv4Address `ul ~T0 @X0 0 e ]
"107 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"104 ../../TCPIP Library/include\dhcp_client.h
[v _DHCP_WriteZeros `(v ~T0 @X0 0 ef1`ui ]
"108 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_Write8 `(v ~T0 @X0 0 ef1`uc ]
"109
[v _ETH_Write16 `(v ~T0 @X0 0 ef1`ui ]
"95 ../../TCPIP Library/include\udpv4.h
[v _UDP_Send `(E449 ~T0 @X0 0 ef ]
"73 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[s S25 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :2 `uc 1 `ui 1 `ui 1 `ui 1 ]
[n S25 . error pktReady up idle linkChange bufferBusy . TXPacketSize saveRDPT saveWRPT ]
"86
[v _ethData `VS25 ~T0 @X0 0 e ]
"101
[v _ETH_Read16 `(ui ~T0 @X0 0 ef ]
"103
[v _ETH_Dump `(v ~T0 @X0 0 ef1`ui ]
"102
[v _ETH_Read32 `(ul ~T0 @X0 0 ef ]
"99
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"42 C:\Program Files (x86)\Microchip\xc8\v1.35\include\string.h
[v _memcmp `(i ~T0 @X0 0 ef3`*Cv`*Cv`ui ]
"100 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_Read8 `(uc ~T0 @X0 0 ef ]
"68 ../../TCPIP Library/include\ipv4.h
[v _ipv4SubnetMask `ul ~T0 @X0 0 e ]
"69
[v _ipv4Router `ul ~T0 @X0 0 e ]
"67
[v _ipv4DNS `ul ~T0 @X0 -> 0 `x e ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 25: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 34: extern char * strcat(char *, const char *);
[; ;string.h: 35: extern char * strcpy(char *, const char *);
[; ;string.h: 36: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 37: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 38: extern char * strdup(const char *);
[; ;string.h: 39: extern char * strtok(char *, const char *);
[; ;string.h: 42: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 43: extern int strcmp(const char *, const char *);
[; ;string.h: 44: extern int stricmp(const char *, const char *);
[; ;string.h: 45: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 46: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 47: extern void * memchr(const void *, int, size_t);
[; ;string.h: 48: extern size_t strcspn(const char *, const char *);
[; ;string.h: 49: extern char * strpbrk(const char *, const char *);
[; ;string.h: 50: extern size_t strspn(const char *, const char *);
[; ;string.h: 51: extern char * strstr(const char *, const char *);
[; ;string.h: 52: extern char * stristr(const char *, const char *);
[; ;string.h: 53: extern char * strerror(int);
[; ;string.h: 54: extern size_t strlen(const char *);
[; ;string.h: 55: extern char * strchr(const char *, int);
[; ;string.h: 56: extern char * strichr(const char *, int);
[; ;string.h: 57: extern char * strrchr(const char *, int);
[; ;string.h: 58: extern char * strrichr(const char *, int);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;include\tcpip_types.h: 51: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;include\tcpip_types.h: 53: typedef union
[; ;include\tcpip_types.h: 54: {
[; ;include\tcpip_types.h: 55: uint16_t value;
[; ;include\tcpip_types.h: 56: struct
[; ;include\tcpip_types.h: 57: {
[; ;include\tcpip_types.h: 58: unsigned int priorityCodePoint:3;
[; ;include\tcpip_types.h: 59: unsigned int dropEligible:1;
[; ;include\tcpip_types.h: 60: unsigned int vlanId:12;
[; ;include\tcpip_types.h: 61: };
[; ;include\tcpip_types.h: 62: } tci_t;
[; ;include\tcpip_types.h: 64: typedef struct
[; ;include\tcpip_types.h: 65: {
[; ;include\tcpip_types.h: 66: uint8_t destinationMAC[6];
[; ;include\tcpip_types.h: 67: uint8_t sourceMAC[6];
[; ;include\tcpip_types.h: 68: union
[; ;include\tcpip_types.h: 69: {
[; ;include\tcpip_types.h: 70: uint16_t type;
[; ;include\tcpip_types.h: 71: uint16_t length;
[; ;include\tcpip_types.h: 72: uint16_t tpid;
[; ;include\tcpip_types.h: 73: }id;
[; ;include\tcpip_types.h: 78: } ethernetFrame_t;
"80 ../../TCPIP Library/include\tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;include\tcpip_types.h: 80: uint8_t Control_Byte = 0x00;
[; ;include\tcpip_types.h: 88: typedef struct
[; ;include\tcpip_types.h: 89: {
[; ;include\tcpip_types.h: 90: unsigned ihl:4;
[; ;include\tcpip_types.h: 91: unsigned version:4;
[; ;include\tcpip_types.h: 92: unsigned ecn:2;
[; ;include\tcpip_types.h: 93: unsigned dscp:6;
[; ;include\tcpip_types.h: 94: uint16_t length;
[; ;include\tcpip_types.h: 95: uint16_t identifcation;
[; ;include\tcpip_types.h: 96: unsigned fragmentOffsetHigh:5;
[; ;include\tcpip_types.h: 97: unsigned :1;
[; ;include\tcpip_types.h: 98: unsigned dontFragment:1;
[; ;include\tcpip_types.h: 99: unsigned moreFragments:1;
[; ;include\tcpip_types.h: 100: uint8_t fragmentOffsetLow;
[; ;include\tcpip_types.h: 101: uint8_t timeToLive;
[; ;include\tcpip_types.h: 102: uint8_t protocol;
[; ;include\tcpip_types.h: 103: uint16_t headerCksm;
[; ;include\tcpip_types.h: 104: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 105: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 108: } ipv4Header_t;
[; ;include\tcpip_types.h: 111: typedef struct
[; ;include\tcpip_types.h: 112: {
[; ;include\tcpip_types.h: 113: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 114: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 115: uint8_t protocol;
[; ;include\tcpip_types.h: 116: uint8_t z;
[; ;include\tcpip_types.h: 117: uint16_t length;
[; ;include\tcpip_types.h: 118: } ipv4_pseudo_header_t;
[; ;include\tcpip_types.h: 120: typedef struct
[; ;include\tcpip_types.h: 121: {
[; ;include\tcpip_types.h: 122: union
[; ;include\tcpip_types.h: 123: {
[; ;include\tcpip_types.h: 124: uint16_t typeCode;
[; ;include\tcpip_types.h: 125: struct
[; ;include\tcpip_types.h: 126: {
[; ;include\tcpip_types.h: 127: uint8_t code;
[; ;include\tcpip_types.h: 128: uint8_t type;
[; ;include\tcpip_types.h: 129: };
[; ;include\tcpip_types.h: 130: };
[; ;include\tcpip_types.h: 131: uint16_t checksum;
[; ;include\tcpip_types.h: 132: uint16_t identifier;
[; ;include\tcpip_types.h: 133: uint16_t sequence;
[; ;include\tcpip_types.h: 135: } icmpHeader_t;
[; ;include\tcpip_types.h: 138: typedef enum
[; ;include\tcpip_types.h: 139: {
[; ;include\tcpip_types.h: 140: ECHO_REPLY = 0x0000,
[; ;include\tcpip_types.h: 142: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;include\tcpip_types.h: 143: DEST_HOST_UNREACHABLE = 0x0301,
[; ;include\tcpip_types.h: 144: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;include\tcpip_types.h: 145: DEST_PORT_UNREACHABLE = 0x0303,
[; ;include\tcpip_types.h: 146: FRAGMENTATION_REQUIRED = 0x0304,
[; ;include\tcpip_types.h: 147: SOURCE_ROUTE_FAILED = 0x0305,
[; ;include\tcpip_types.h: 148: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;include\tcpip_types.h: 149: SOURCE_HOST_ISOLATED = 0x0307,
[; ;include\tcpip_types.h: 150: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;include\tcpip_types.h: 151: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;include\tcpip_types.h: 152: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;include\tcpip_types.h: 153: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;include\tcpip_types.h: 154: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;include\tcpip_types.h: 155: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;include\tcpip_types.h: 156: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;include\tcpip_types.h: 158: SOURCE_QUENCH = 0x0400,
[; ;include\tcpip_types.h: 160: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;include\tcpip_types.h: 161: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;include\tcpip_types.h: 162: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;include\tcpip_types.h: 163: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;include\tcpip_types.h: 165: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;include\tcpip_types.h: 167: ECHO_REQUEST = 0x0800,
[; ;include\tcpip_types.h: 169: ROUTER_ADVERTISEMENT = 0x0900,
[; ;include\tcpip_types.h: 170: ROUTER_SOLICITATION = 0x0A00,
[; ;include\tcpip_types.h: 171: TRACEROUTE = 0x3000
[; ;include\tcpip_types.h: 172: } icmpTypeCodes_t;
[; ;include\tcpip_types.h: 174: typedef struct
[; ;include\tcpip_types.h: 175: {
[; ;include\tcpip_types.h: 176: uint16_t srcPort;
[; ;include\tcpip_types.h: 177: uint16_t dstPort;
[; ;include\tcpip_types.h: 178: uint16_t length;
[; ;include\tcpip_types.h: 179: uint16_t checksum;
[; ;include\tcpip_types.h: 180: } udpHeader_t;
[; ;include\tcpip_types.h: 182: typedef struct
[; ;include\tcpip_types.h: 183: {
[; ;include\tcpip_types.h: 184: uint16_t sourcePort;
[; ;include\tcpip_types.h: 185: uint16_t destPort;
[; ;include\tcpip_types.h: 186: uint32_t sequenceNumber;
[; ;include\tcpip_types.h: 187: uint32_t ackNumber;
[; ;include\tcpip_types.h: 188: union{
[; ;include\tcpip_types.h: 189: uint8_t byte13;
[; ;include\tcpip_types.h: 190: struct{
[; ;include\tcpip_types.h: 191: uint8_t ns:1;
[; ;include\tcpip_types.h: 192: uint8_t reserved:3;
[; ;include\tcpip_types.h: 193: uint8_t dataOffset:4;
[; ;include\tcpip_types.h: 194: };
[; ;include\tcpip_types.h: 195: };
[; ;include\tcpip_types.h: 197: union{
[; ;include\tcpip_types.h: 198: uint8_t flags;
[; ;include\tcpip_types.h: 199: struct{
[; ;include\tcpip_types.h: 200: uint8_t fin:1;
[; ;include\tcpip_types.h: 201: uint8_t syn:1;
[; ;include\tcpip_types.h: 202: uint8_t rst:1;
[; ;include\tcpip_types.h: 203: uint8_t psh:1;
[; ;include\tcpip_types.h: 204: uint8_t ack:1;
[; ;include\tcpip_types.h: 205: uint8_t urg:1;
[; ;include\tcpip_types.h: 206: uint8_t ece:1;
[; ;include\tcpip_types.h: 207: uint8_t cwr:1;
[; ;include\tcpip_types.h: 208: };
[; ;include\tcpip_types.h: 209: };
[; ;include\tcpip_types.h: 211: uint16_t windowSize;
[; ;include\tcpip_types.h: 212: uint16_t checksum;
[; ;include\tcpip_types.h: 213: uint16_t urgentPtr;
[; ;include\tcpip_types.h: 217: } tcpHeader_t;
[; ;include\tcpip_types.h: 219: typedef struct
[; ;include\tcpip_types.h: 220: {
[; ;include\tcpip_types.h: 221: unsigned int version:4;
[; ;include\tcpip_types.h: 222: unsigned int trafficClass:8;
[; ;include\tcpip_types.h: 223: unsigned int flowLabel:20;
[; ;include\tcpip_types.h: 224: uint16_t payloadLength;
[; ;include\tcpip_types.h: 225: uint8_t nextHeader;
[; ;include\tcpip_types.h: 226: uint8_t hopLimit;
[; ;include\tcpip_types.h: 227: uint8_t srcAddress[8];
[; ;include\tcpip_types.h: 228: uint8_t dstAddress[8];
[; ;include\tcpip_types.h: 230: } ipv6Header_t;
[; ;include\tcpip_types.h: 233: typedef enum
[; ;include\tcpip_types.h: 234: {
[; ;include\tcpip_types.h: 235: HOPOPT = 0,
[; ;include\tcpip_types.h: 236: ICMP = 1,
[; ;include\tcpip_types.h: 237: IGMP = 2,
[; ;include\tcpip_types.h: 238: GGP = 3,
[; ;include\tcpip_types.h: 239: IPV4 = 4,
[; ;include\tcpip_types.h: 240: ST = 5,
[; ;include\tcpip_types.h: 241: TCP = 6,
[; ;include\tcpip_types.h: 242: CBT = 7,
[; ;include\tcpip_types.h: 243: EGP = 8,
[; ;include\tcpip_types.h: 244: IGP = 9,
[; ;include\tcpip_types.h: 245: BBN_RCC_MON = 10,
[; ;include\tcpip_types.h: 246: NVP_II = 11,
[; ;include\tcpip_types.h: 247: PUP = 12,
[; ;include\tcpip_types.h: 248: ARGUS = 13,
[; ;include\tcpip_types.h: 249: EMCON = 14,
[; ;include\tcpip_types.h: 250: XNET = 15,
[; ;include\tcpip_types.h: 251: CHAOS = 16,
[; ;include\tcpip_types.h: 252: UDP = 17,
[; ;include\tcpip_types.h: 253: MUX = 18,
[; ;include\tcpip_types.h: 254: DCN_MEAS = 19,
[; ;include\tcpip_types.h: 255: HMP = 20,
[; ;include\tcpip_types.h: 256: PRM = 21,
[; ;include\tcpip_types.h: 257: XNS_IDP = 22,
[; ;include\tcpip_types.h: 258: TRUNK_1 = 23,
[; ;include\tcpip_types.h: 259: TRUNK_2 = 24,
[; ;include\tcpip_types.h: 260: LEAF_1 = 25,
[; ;include\tcpip_types.h: 261: LEAF_2 = 26,
[; ;include\tcpip_types.h: 262: RDP = 27,
[; ;include\tcpip_types.h: 263: IRTP = 28,
[; ;include\tcpip_types.h: 264: ISO_TP4 = 29,
[; ;include\tcpip_types.h: 265: NETBLT = 30,
[; ;include\tcpip_types.h: 266: MFE_NSP = 31,
[; ;include\tcpip_types.h: 267: MERIT_INP = 32,
[; ;include\tcpip_types.h: 268: DCCP = 33,
[; ;include\tcpip_types.h: 269: THREEPC = 34,
[; ;include\tcpip_types.h: 270: IDPR = 35,
[; ;include\tcpip_types.h: 271: XTP = 36,
[; ;include\tcpip_types.h: 272: DDP = 37,
[; ;include\tcpip_types.h: 273: IDPR_CMTP = 38,
[; ;include\tcpip_types.h: 274: TPpp = 39,
[; ;include\tcpip_types.h: 275: IL = 40,
[; ;include\tcpip_types.h: 276: IPV6_TUNNEL = 41,
[; ;include\tcpip_types.h: 277: SDRP = 42,
[; ;include\tcpip_types.h: 278: IPV6_Route = 43,
[; ;include\tcpip_types.h: 279: IPV6_Frag = 44,
[; ;include\tcpip_types.h: 280: IDRP = 45,
[; ;include\tcpip_types.h: 281: RSVP = 46,
[; ;include\tcpip_types.h: 282: GRE = 47,
[; ;include\tcpip_types.h: 283: DSR = 48,
[; ;include\tcpip_types.h: 284: BNA = 49,
[; ;include\tcpip_types.h: 285: ESP = 50,
[; ;include\tcpip_types.h: 286: AH = 51,
[; ;include\tcpip_types.h: 287: I_NLSP = 52,
[; ;include\tcpip_types.h: 288: SWIPE = 53,
[; ;include\tcpip_types.h: 289: NARP = 54,
[; ;include\tcpip_types.h: 290: MOBILE = 55,
[; ;include\tcpip_types.h: 291: TLSP = 56,
[; ;include\tcpip_types.h: 292: SKIP = 57,
[; ;include\tcpip_types.h: 293: IPV6_ICMP = 58,
[; ;include\tcpip_types.h: 294: IPV6_NoNxt = 59,
[; ;include\tcpip_types.h: 295: IPV6_Opts = 60,
[; ;include\tcpip_types.h: 296: CFTP = 62,
[; ;include\tcpip_types.h: 297: SAT_EXPAK = 64,
[; ;include\tcpip_types.h: 298: KRYPTOLAN = 65,
[; ;include\tcpip_types.h: 299: RVD = 66,
[; ;include\tcpip_types.h: 300: IPPC = 67,
[; ;include\tcpip_types.h: 301: SAT_MON = 69,
[; ;include\tcpip_types.h: 302: VISA = 70,
[; ;include\tcpip_types.h: 303: IPCV = 71,
[; ;include\tcpip_types.h: 304: CPNX = 72,
[; ;include\tcpip_types.h: 305: CPHB = 73,
[; ;include\tcpip_types.h: 306: WSN = 74,
[; ;include\tcpip_types.h: 307: PVP = 75,
[; ;include\tcpip_types.h: 308: BR_SAT_MON = 76,
[; ;include\tcpip_types.h: 309: SUN_ND = 77,
[; ;include\tcpip_types.h: 310: WB_MON = 78,
[; ;include\tcpip_types.h: 311: WB_EXPAK = 79,
[; ;include\tcpip_types.h: 312: ISO_IP = 80,
[; ;include\tcpip_types.h: 313: VMTP = 81,
[; ;include\tcpip_types.h: 314: SECURE_VMTP = 82,
[; ;include\tcpip_types.h: 315: VINES = 83,
[; ;include\tcpip_types.h: 316: TTP = 84,
[; ;include\tcpip_types.h: 317: IPTM = 84,
[; ;include\tcpip_types.h: 318: NSFNET_IGP = 85,
[; ;include\tcpip_types.h: 319: DGP = 86,
[; ;include\tcpip_types.h: 320: TCF = 87,
[; ;include\tcpip_types.h: 321: EIGRP = 88,
[; ;include\tcpip_types.h: 322: OSPFIGP = 89,
[; ;include\tcpip_types.h: 323: Sprite_RPC = 90,
[; ;include\tcpip_types.h: 324: LARP = 91,
[; ;include\tcpip_types.h: 325: MTP = 92,
[; ;include\tcpip_types.h: 326: AX25 = 93,
[; ;include\tcpip_types.h: 327: IPIP = 94,
[; ;include\tcpip_types.h: 328: MICP = 95,
[; ;include\tcpip_types.h: 329: SCC_SP = 96,
[; ;include\tcpip_types.h: 330: ETHERIP = 97,
[; ;include\tcpip_types.h: 331: ENCAP = 98,
[; ;include\tcpip_types.h: 332: GMTP = 100,
[; ;include\tcpip_types.h: 333: IFMP = 101,
[; ;include\tcpip_types.h: 334: PNNI = 102,
[; ;include\tcpip_types.h: 335: PIM = 103,
[; ;include\tcpip_types.h: 336: ARIS = 104,
[; ;include\tcpip_types.h: 337: SCPS = 105,
[; ;include\tcpip_types.h: 338: QNX = 106,
[; ;include\tcpip_types.h: 339: A_N = 107,
[; ;include\tcpip_types.h: 340: IPComp = 108,
[; ;include\tcpip_types.h: 341: SNP = 109,
[; ;include\tcpip_types.h: 342: Compaq_Peer = 110,
[; ;include\tcpip_types.h: 343: IPX_in_IP = 111,
[; ;include\tcpip_types.h: 344: VRRP = 112,
[; ;include\tcpip_types.h: 345: PGM = 113,
[; ;include\tcpip_types.h: 346: L2TP = 115,
[; ;include\tcpip_types.h: 347: DDX = 116,
[; ;include\tcpip_types.h: 348: IATP = 117,
[; ;include\tcpip_types.h: 349: STP = 118,
[; ;include\tcpip_types.h: 350: SRP = 119,
[; ;include\tcpip_types.h: 351: UTI = 120,
[; ;include\tcpip_types.h: 353: SM = 122,
[; ;include\tcpip_types.h: 354: PTP = 123,
[; ;include\tcpip_types.h: 355: ISIS = 124,
[; ;include\tcpip_types.h: 356: FIRE = 125,
[; ;include\tcpip_types.h: 357: CRTP = 126,
[; ;include\tcpip_types.h: 358: CRUDP = 127,
[; ;include\tcpip_types.h: 359: SSCOPMCE = 128,
[; ;include\tcpip_types.h: 360: IPLT = 129,
[; ;include\tcpip_types.h: 361: SPS = 130,
[; ;include\tcpip_types.h: 362: PIPE = 131,
[; ;include\tcpip_types.h: 363: SCTP = 132,
[; ;include\tcpip_types.h: 364: FC = 133
[; ;include\tcpip_types.h: 365: } ipProtocolNumbers;
[; ;include\tcpip_types.h: 367: typedef struct
[; ;include\tcpip_types.h: 368: {
[; ;include\tcpip_types.h: 369: union{
[; ;include\tcpip_types.h: 370: uint32_t s_addr;
[; ;include\tcpip_types.h: 371: uint8_t s_addr_byte[4];
[; ;include\tcpip_types.h: 372: };
[; ;include\tcpip_types.h: 373: }inAddr_t;
[; ;include\tcpip_types.h: 375: typedef struct
[; ;include\tcpip_types.h: 376: {
[; ;include\tcpip_types.h: 377: uint16_t port;
[; ;include\tcpip_types.h: 378: inAddr_t addr;
[; ;include\tcpip_types.h: 379: }sockaddr_in_t;
[; ;include\tcpip_types.h: 381: typedef enum
[; ;include\tcpip_types.h: 382: {
[; ;include\tcpip_types.h: 383: ERROR =0,
[; ;include\tcpip_types.h: 384: SUCCESS,
[; ;include\tcpip_types.h: 385: LINK_NOT_FOUND,
[; ;include\tcpip_types.h: 386: BUFFER_BUSY,
[; ;include\tcpip_types.h: 387: TX_LOGIC_NOT_IDLE,
[; ;include\tcpip_types.h: 388: MAC_NOT_FOUND,
[; ;include\tcpip_types.h: 389: IP_WRONG_VERSION,
[; ;include\tcpip_types.h: 390: IPV4_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 391: DEST_IP_NOT_MATCHED,
[; ;include\tcpip_types.h: 392: ICMP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 393: UDP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 394: TCP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 395: DMA_TIMEOUT,
[; ;include\tcpip_types.h: 396: PORT_NOT_AVAILABLE,
[; ;include\tcpip_types.h: 397: ARP_IP_NOT_MATCHED
[; ;include\tcpip_types.h: 398: }error_msg;
[; ;include\tcpip_types.h: 400: typedef struct
[; ;include\tcpip_types.h: 401: {
[; ;include\tcpip_types.h: 402: inAddr_t dest_addr;
[; ;include\tcpip_types.h: 403: }destIP_t;
[; ;include\tcpip_types.h: 406: typedef int8_t socklistsize_t;
[; ;include\tcpip_types.h: 408: typedef void (*ip_receive_function_ptr)(int);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;include\mac_address.h: 49: typedef union
[; ;include\mac_address.h: 50: {
[; ;include\mac_address.h: 51: uint8_t mac_array[6];
[; ;include\mac_address.h: 52: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;include\mac_address.h: 53: } mac48Address_t;
[; ;include\mac_address.h: 55: extern const mac48Address_t broadcastMAC;
[; ;include\mac_address.h: 56: extern const mac48Address_t macAddress;
[; ;include\mac_address.h: 58: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_drivers\ethernet_driver.h: 51: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 52: {
[; ;ethernet_drivers\ethernet_driver.h: 53: uint16_t byteCount;
[; ;ethernet_drivers\ethernet_driver.h: 54: unsigned long_drop_event:1;
[; ;ethernet_drivers\ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 56: unsigned excessCarrierEvent:1;
[; ;ethernet_drivers\ethernet_driver.h: 57: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 58: unsigned crcError:1;
[; ;ethernet_drivers\ethernet_driver.h: 59: unsigned lengthCheckError:1;
[; ;ethernet_drivers\ethernet_driver.h: 60: unsigned lengthLongError:1;
[; ;ethernet_drivers\ethernet_driver.h: 61: unsigned rxOK:1;
[; ;ethernet_drivers\ethernet_driver.h: 62: unsigned rxMulticast:1;
[; ;ethernet_drivers\ethernet_driver.h: 63: unsigned rxBroadcast:1;
[; ;ethernet_drivers\ethernet_driver.h: 64: unsigned dribbleNibble:1;
[; ;ethernet_drivers\ethernet_driver.h: 65: unsigned controlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 66: unsigned pauseControlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 67: unsigned unknownContrlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 68: unsigned vlanTagPresent:1;
[; ;ethernet_drivers\ethernet_driver.h: 69: unsigned zero:1;
[; ;ethernet_drivers\ethernet_driver.h: 70: }receiveStatusVector_t;
[; ;ethernet_drivers\ethernet_driver.h: 72: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 73: {
[; ;ethernet_drivers\ethernet_driver.h: 74: unsigned error:1;
[; ;ethernet_drivers\ethernet_driver.h: 75: unsigned pktReady:1;
[; ;ethernet_drivers\ethernet_driver.h: 76: unsigned up:1;
[; ;ethernet_drivers\ethernet_driver.h: 77: unsigned idle:1;
[; ;ethernet_drivers\ethernet_driver.h: 78: unsigned linkChange:1;
[; ;ethernet_drivers\ethernet_driver.h: 79: unsigned bufferBusy:1;
[; ;ethernet_drivers\ethernet_driver.h: 80: unsigned :2;
[; ;ethernet_drivers\ethernet_driver.h: 81: uint16_t TXPacketSize;
[; ;ethernet_drivers\ethernet_driver.h: 82: uint16_t saveRDPT;
[; ;ethernet_drivers\ethernet_driver.h: 83: uint16_t saveWRPT;
[; ;ethernet_drivers\ethernet_driver.h: 84: } ethernetDriver_t;
[; ;ethernet_drivers\ethernet_driver.h: 86: extern volatile ethernetDriver_t ethData;
[; ;ethernet_drivers\ethernet_driver.h: 92: void ETH_Init(void);
[; ;ethernet_drivers\ethernet_driver.h: 93: void ETH_EventHandler(void);
[; ;ethernet_drivers\ethernet_driver.h: 94: void ETH_NextPacketUpdate();
[; ;ethernet_drivers\ethernet_driver.h: 95: void ETH_ResetReceiver(void);
[; ;ethernet_drivers\ethernet_driver.h: 96: void ETH_SendSystemReset(void);
[; ;ethernet_drivers\ethernet_driver.h: 99: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 100: uint8_t ETH_Read8(void);
[; ;ethernet_drivers\ethernet_driver.h: 101: uint16_t ETH_Read16(void);
[; ;ethernet_drivers\ethernet_driver.h: 102: uint32_t ETH_Read32(void);
[; ;ethernet_drivers\ethernet_driver.h: 103: void ETH_Dump(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 104: void ETH_Flush(void);
[; ;ethernet_drivers\ethernet_driver.h: 106: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_drivers\ethernet_driver.h: 107: uint16_t ETH_WriteBlock(void *, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 108: void ETH_Write8(uint8_t);
[; ;ethernet_drivers\ethernet_driver.h: 109: void ETH_Write16(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 110: void ETH_Write24(uint24_t data);
[; ;ethernet_drivers\ethernet_driver.h: 111: void ETH_Write32(uint32_t);
[; ;ethernet_drivers\ethernet_driver.h: 112: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 113: error_msg ETH_Copy(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 114: error_msg ETH_Send(void);
[; ;ethernet_drivers\ethernet_driver.h: 116: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 117: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 119: void ETH_GetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 120: void ETH_SetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 122: void ETH_SaveRDPT(void);
[; ;ethernet_drivers\ethernet_driver.h: 124: void ETH_ResetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 125: uint16_t ETH_GetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 127: bool ETH_CheckLinkUp();
[; ;include\network.h: 62: void Network_Init(void);
[; ;include\network.h: 63: void Network_Read(void);
[; ;include\network.h: 64: void Network_Manage(void);
[; ;include\network.h: 65: void Network_WaitForLink(void);
"67 ../../TCPIP Library/include\tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 56 `c
-> 70 `c
-> 57 `c
-> 55 `c
-> 74 `c
-> 54 `c
-> 48 `c
-> 32 `c
-> 69 `c
-> 84 `c
-> 72 `c
-> 69 `c
-> 82 `c
-> 78 `c
-> 69 `c
-> 84 `c
-> 0 `c
..
]
[; ;include\tcpip_config.h: 67: const char dhcpName[] = "PIC18F97J60 ETHERNET";
[; ;include\dhcp_client.h: 58: typedef enum
[; ;include\dhcp_client.h: 59: {
[; ;include\dhcp_client.h: 60: DHCP_DISCOVER = 1,
[; ;include\dhcp_client.h: 61: DHCP_OFFER, DHCP_REQUEST, DHCP_DECLINE, DHCP_ACK, DHCP_NACK, DHCP_RELEASE,
[; ;include\dhcp_client.h: 62: DHCP_INFORM, DHCP_FORCERENEW, DHCP_LEASEQUERY, DHCP_LEASEUNASSIGNED, DHCP_LEASEUNKNOWN,
[; ;include\dhcp_client.h: 63: DHCP_LEASEACTIVE, DHCP_BULKLEASEQUERY, DHCP_LEASEQUERYDONE
[; ;include\dhcp_client.h: 64: }dhcp_type;
[; ;include\dhcp_client.h: 66: typedef enum
[; ;include\dhcp_client.h: 67: {
[; ;include\dhcp_client.h: 68: INIT = 1, INIT_REBOOT, SELECTING, REQUESTING, BOUND
[; ;include\dhcp_client.h: 69: }dhcp_client_state;
[; ;include\dhcp_client.h: 81: void DHCP_Request(dhcp_type);
[; ;include\dhcp_client.h: 90: void DHCP_Handler(int);
[; ;include\dhcp_client.h: 96: void DHCP_Manage(void);
[; ;include\dhcp_client.h: 104: void DHCP_WriteZeros(uint16_t length);
[; ;include\udpv4.h: 81: error_msg UDP_Start(uint32_t destIP, uint16_t destPort, uint16_t srcPort);
[; ;include\udpv4.h: 95: error_msg UDP_Send();
[; ;include\udpv4.h: 103: inline void UDP_Write8(uint8_t data);
[; ;include\udpv4.h: 111: inline void UDP_Write16(uint16_t data);
[; ;include\udpv4.h: 119: inline void UDP_Write32(uint32_t data);
[; ;include\udpv4.h: 130: inline void UDP_WriteBlock(void* data, uint16_t length);
[; ;include\udpv4.h: 138: inline uint8_t UDP_Read8(void);
[; ;include\udpv4.h: 146: inline uint16_t UDP_Read16(void);
[; ;include\udpv4.h: 154: inline uint32_t UDP_Read32(void);
[; ;include\udpv4.h: 167: uint16_t UDP_ReadBlock(void* data, uint16_t length);
[; ;include\udpv4.h: 175: uint16_t UDP_GetDestPort(void);
[; ;include\udpv4.h: 183: uint32_t UDP_GetDestIP(void);
[; ;include\udpv4.h: 195: error_msg UDP_Receive(uint16_t udpcksm);
[; ;include\udpv4_port_handler_table.h: 54: void udp_test(int len);
[; ;include\udpv4_port_handler_table.h: 55: extern void DEMO_UDP_Recv(int len);
[; ;include\udpv4_port_handler_table.h: 56: extern void DEMO_UDP_IdlePkt(int length);
[; ;include\udpv4_port_handler_table.h: 60: typedef struct
[; ;include\udpv4_port_handler_table.h: 61: {
[; ;include\udpv4_port_handler_table.h: 62: uint16_t portNumber;
[; ;include\udpv4_port_handler_table.h: 63: ip_receive_function_ptr callBack;
[; ;include\udpv4_port_handler_table.h: 64: } udp_handler_t;
"66 ../../TCPIP Library/include\udpv4_port_handler_table.h
[v _UDP_CallBackTable `CS26 ~T0 @X0 -> 0 `x e ]
[i _UDP_CallBackTable
:U ..
:U ..
"72
-> -> 68 `i `ui
&U _DHCP_Handler
..
..
]
[; ;include\udpv4_port_handler_table.h: 66: const udp_handler_t UDP_CallBackTable[] = {
[; ;include\udpv4_port_handler_table.h: 72: {68, &DHCP_Handler}
[; ;include\udpv4_port_handler_table.h: 73: };
[; ;include\ipv4.h: 63: extern uint32_t ipv4Address;
[; ;include\ipv4.h: 64: extern uint32_t dstIPv4Address;
[; ;include\ipv4.h: 65: extern uint32_t ipv4Gateway;
[; ;include\ipv4.h: 66: extern uint8_t gatewayMAC[6];
[; ;include\ipv4.h: 67: extern uint32_t ipv4DNS[2];
[; ;include\ipv4.h: 68: extern uint32_t ipv4SubnetMask;
[; ;include\ipv4.h: 69: extern uint32_t ipv4Router;
[; ;include\ipv4.h: 70: extern ipv4Header_t ipv4Header;
[; ;include\ipv4.h: 79: void IPV4_Init(void);
[; ;include\ipv4.h: 86: error_msg IPV4_Packet(void);
[; ;include\ipv4.h: 103: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;include\ipv4.h: 111: uint32_t IPV4_GetMyIP(void);
[; ;include\ipv4.h: 122: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;include\ipv4.h: 136: error_msg IPV4_Send(uint16_t payloadLength);
[; ;include\arpv4.h: 62: void ARPV4_Init(void);
[; ;include\arpv4.h: 74: error_msg ARPV4_Packet(void);
[; ;include\arpv4.h: 80: void ARPV4_Update(void);
[; ;include\arpv4.h: 91: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;include\arpv4.h: 104: error_msg ARPV4_Request(uint32_t destAddress);
[; ;time.h: 8: typedef long time_t;
[; ;time.h: 9: struct tm {
[; ;time.h: 10: int tm_sec;
[; ;time.h: 11: int tm_min;
[; ;time.h: 12: int tm_hour;
[; ;time.h: 13: int tm_mday;
[; ;time.h: 14: int tm_mon;
[; ;time.h: 15: int tm_year;
[; ;time.h: 16: int tm_wday;
[; ;time.h: 17: int tm_yday;
[; ;time.h: 18: int tm_isdst;
[; ;time.h: 19: };
[; ;time.h: 25: extern int time_zone;
[; ;time.h: 30: extern time_t time(time_t *);
[; ;time.h: 31: extern int stime(time_t *);
[; ;time.h: 47: extern char * asctime(const struct tm *) ;
[; ;time.h: 48: extern char * ctime(const time_t *) ;
[; ;time.h: 49: extern struct tm * gmtime(const time_t *) ;
[; ;time.h: 50: extern struct tm * localtime(const time_t *) ;
[; ;time.h: 51: extern size_t strftime(char *, size_t, const char *, const struct tm *) ;
[; ;time.h: 52: extern time_t mktime(struct tm *);
"65 ../../TCPIP Library/source/dhcp_client.c
[v _xidValue `Cul ~T0 @X0 1 e ]
[i _xidValue
-> -> 1296255056 `l `ul
]
[; ;dhcp_client.c: 65: const uint32_t xidValue = 0x4D434850;
"66
[v _dhcpLeaseTime `ul ~T0 @X0 1 s ]
[i _dhcpLeaseTime
-> -> -> 0 `i `l `ul
]
[; ;dhcp_client.c: 66: static uint32_t dhcpLeaseTime=0;
"67
[v _dhcpServerId `ul ~T0 @X0 1 s ]
[; ;dhcp_client.c: 67: static uint32_t dhcpServerId;
"68
[v _clientState `E609 ~T0 @X0 1 s ]
[i _clientState
. `E609 0
]
[; ;dhcp_client.c: 68: static dhcp_client_state clientState=INIT;
"71
[v _DHCP_Request `(v ~T0 @X0 1 ef1`E592 ]
"72
{
[; ;dhcp_client.c: 71: void DHCP_Request(dhcp_type type)
[; ;dhcp_client.c: 72: {
[e :U _DHCP_Request ]
"71
[v _type `E592 ~T0 @X0 1 r1 ]
"72
[f ]
"74
[v _ethMAC `S22 ~T0 @X0 1 a ]
"75
[v _started `uc ~T0 @X0 1 a ]
[; ;dhcp_client.c: 74: mac48Address_t ethMAC;
[; ;dhcp_client.c: 75: bool started = 0;
[e = _started -> -> 0 `i `uc ]
"76
[v _msglength `ui ~T0 @X0 1 a ]
[; ;dhcp_client.c: 76: uint16_t msglength = ((240 + 25 + 20) + 1);
[e = _msglength -> + + + -> 240 `i -> 25 `i -> 20 `i -> 1 `i `ui ]
[; ;dhcp_client.c: 78: ETH_GetMAC((char*)&ethMAC);
"78
[e ( _ETH_GetMAC (1 -> &U _ethMAC `*uc ]
[; ;dhcp_client.c: 80: if (type == DHCP_REQUEST)
"80
[e $ ! == -> _type `i -> . `E592 2 `i 29  ]
[; ;dhcp_client.c: 81: {
"81
{
[; ;dhcp_client.c: 82: msglength += 12;
"82
[e =+ _msglength -> -> 12 `i `ui ]
"83
}
[e :U 29 ]
[; ;dhcp_client.c: 83: }
[; ;dhcp_client.c: 85: started = UDP_Start(0xFFFFFFFF,68,67);
"85
[e = _started -> ( _UDP_Start (3 , , -> -1 `ul -> -> 68 `i `ui -> -> 67 `i `ui `uc ]
[; ;dhcp_client.c: 87: if(started==SUCCESS)
"87
[e $ ! == -> _started `i -> . `E449 1 `i 30  ]
[; ;dhcp_client.c: 88: {
"88
{
[; ;dhcp_client.c: 89: ETH_Write32(0x01010600);
"89
[e ( _ETH_Write32 (1 -> -> 16844288 `l `ul ]
[; ;dhcp_client.c: 90: ETH_Write32(xidValue);
"90
[e ( _ETH_Write32 (1 _xidValue ]
[; ;dhcp_client.c: 91: ETH_Write32(0x00008000);
"91
[e ( _ETH_Write32 (1 -> -> 32768 `ui `ul ]
[; ;dhcp_client.c: 92: if (type == DHCP_REQUEST)
"92
[e $ ! == -> _type `i -> . `E592 2 `i 31  ]
[; ;dhcp_client.c: 93: {
"93
{
[; ;dhcp_client.c: 94: ETH_Write32(0);
"94
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
"95
}
[; ;dhcp_client.c: 95: }
[e $U 32  ]
"96
[e :U 31 ]
[; ;dhcp_client.c: 96: else
[; ;dhcp_client.c: 97: {
"97
{
[; ;dhcp_client.c: 98: ETH_Write32(ipv4Address);
"98
[e ( _ETH_Write32 (1 _ipv4Address ]
"99
}
[e :U 32 ]
[; ;dhcp_client.c: 99: }
[; ;dhcp_client.c: 100: ETH_Write32(0);
"100
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 101: ETH_Write32(0);
"101
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 102: ETH_Write32(0);
"102
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 103: ETH_WriteBlock((char *)&ethMAC,6);
"103
[e ( _ETH_WriteBlock (2 , -> -> &U _ethMAC `*uc `*v -> -> 6 `i `ui ]
[; ;dhcp_client.c: 104: DHCP_WriteZeros(202);
"104
[e ( _DHCP_WriteZeros (1 -> -> 202 `i `ui ]
[; ;dhcp_client.c: 105: ETH_Write32(0x63825363);
"105
[e ( _ETH_Write32 (1 -> -> 1669485411 `l `ul ]
[; ;dhcp_client.c: 107: ETH_Write8(53);
"107
[e ( _ETH_Write8 (1 -> -> 53 `i `uc ]
[; ;dhcp_client.c: 108: ETH_Write8(1);
"108
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[; ;dhcp_client.c: 109: ETH_Write8(type);
"109
[e ( _ETH_Write8 (1 -> _type `uc ]
[; ;dhcp_client.c: 110: if(type == DHCP_REQUEST)
"110
[e $ ! == -> _type `i -> . `E592 2 `i 33  ]
[; ;dhcp_client.c: 111: {
"111
{
[; ;dhcp_client.c: 112: ETH_Write8(54);ETH_Write8(4);ETH_Write32(dhcpServerId);
"112
[e ( _ETH_Write8 (1 -> -> 54 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write32 (1 _dhcpServerId ]
[; ;dhcp_client.c: 113: ETH_Write8(50);ETH_Write8(4);ETH_Write32(ipv4Address);
"113
[e ( _ETH_Write8 (1 -> -> 50 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write32 (1 _ipv4Address ]
"114
}
[e :U 33 ]
[; ;dhcp_client.c: 114: }
[; ;dhcp_client.c: 115: ETH_Write8(55); ETH_Write8(4); ETH_Write8(1); ETH_Write8(3); ETH_Write8(6); ETH_Write8(15);
"115
[e ( _ETH_Write8 (1 -> -> 55 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 3 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 6 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 15 `i `uc ]
[; ;dhcp_client.c: 116: ETH_Write8(57); ETH_Write8(2); ETH_Write16(512);
"116
[e ( _ETH_Write8 (1 -> -> 57 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 2 `i `uc ]
[e ( _ETH_Write16 (1 -> -> 512 `i `ui ]
[; ;dhcp_client.c: 117: ETH_Write8(12); ETH_Write8(20); ETH_WriteBlock((char *)dhcpName,20);
"117
[e ( _ETH_Write8 (1 -> -> 12 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 20 `i `uc ]
[e ( _ETH_WriteBlock (2 , -> -> &U _dhcpName `*uc `*v -> -> 20 `i `ui ]
[; ;dhcp_client.c: 119: ETH_Write8(61); ETH_Write8(7); ETH_Write8(1); ETH_WriteBlock((char *)&ethMAC,6);
"119
[e ( _ETH_Write8 (1 -> -> 61 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 7 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[e ( _ETH_WriteBlock (2 , -> -> &U _ethMAC `*uc `*v -> -> 6 `i `ui ]
[; ;dhcp_client.c: 120: ETH_Write8(255);
"120
[e ( _ETH_Write8 (1 -> -> 255 `i `uc ]
[; ;dhcp_client.c: 122: ETH_Write8(0);
"122
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
[; ;dhcp_client.c: 124: UDP_Send();
"124
[e ( _UDP_Send ..  ]
[; ;dhcp_client.c: 125: if (type == DHCP_DISCOVER)
"125
[e $ ! == -> _type `i -> . `E592 0 `i 34  ]
[; ;dhcp_client.c: 126: clientState=SELECTING;
"126
[e = _clientState . `E609 2 ]
[e :U 34 ]
"127
}
[e :U 30 ]
[; ;dhcp_client.c: 127: }
[; ;dhcp_client.c: 128: }
"128
[e :UE 28 ]
}
"130
[v _DHCP_Manage `(v ~T0 @X0 1 ef ]
"131
{
[; ;dhcp_client.c: 130: void DHCP_Manage(void)
[; ;dhcp_client.c: 131: {
[e :U _DHCP_Manage ]
[f ]
[; ;dhcp_client.c: 132: if(ethData.linkChange)
"132
[e $ ! != -> . _ethData 4 `i -> -> -> 0 `i `Vuc `i 36  ]
[; ;dhcp_client.c: 133: {
"133
{
[; ;dhcp_client.c: 134: if (clientState == BOUND && dhcpLeaseTime)
"134
[e $ ! && == -> _clientState `i -> . `E609 4 `i != _dhcpLeaseTime -> -> 0 `i `ul 37  ]
[; ;dhcp_client.c: 135: {
"135
{
[; ;dhcp_client.c: 136: dhcpServerId = 0xFFFFFFFF;
"136
[e = _dhcpServerId -> -1 `ul ]
[; ;dhcp_client.c: 137: DHCP_Request(DHCP_REQUEST);
"137
[e ( _DHCP_Request (1 . `E592 2 ]
"138
}
[; ;dhcp_client.c: 138: }
[e $U 38  ]
"139
[e :U 37 ]
[; ;dhcp_client.c: 139: else
[; ;dhcp_client.c: 140: {
"140
{
[; ;dhcp_client.c: 141: clientState = INIT;
"141
[e = _clientState . `E609 0 ]
[; ;dhcp_client.c: 142: DHCP_Request(DHCP_DISCOVER);
"142
[e ( _DHCP_Request (1 . `E592 0 ]
"143
}
[e :U 38 ]
[; ;dhcp_client.c: 143: }
[; ;dhcp_client.c: 144: ethData.linkChange=0;
"144
[e = . _ethData 4 -> -> 0 `i `uc ]
"145
}
[; ;dhcp_client.c: 145: }
[e $U 39  ]
"146
[e :U 36 ]
[; ;dhcp_client.c: 146: else if (clientState == INIT || clientState == INIT_REBOOT)
[e $ ! || == -> _clientState `i -> . `E609 0 `i == -> _clientState `i -> . `E609 1 `i 40  ]
[; ;dhcp_client.c: 147: {
"147
{
[; ;dhcp_client.c: 148: clientState = INIT;
"148
[e = _clientState . `E609 0 ]
[; ;dhcp_client.c: 149: DHCP_Request(DHCP_DISCOVER);
"149
[e ( _DHCP_Request (1 . `E592 0 ]
"150
}
[; ;dhcp_client.c: 150: }
[e $U 41  ]
"151
[e :U 40 ]
[; ;dhcp_client.c: 151: else if ((dhcpLeaseTime < 100)&& clientState == BOUND)
[e $ ! && < _dhcpLeaseTime -> -> -> 100 `i `l `ul == -> _clientState `i -> . `E609 4 `i 42  ]
[; ;dhcp_client.c: 152: {
"152
{
[; ;dhcp_client.c: 153: DHCP_Request(DHCP_REQUEST);
"153
[e ( _DHCP_Request (1 . `E592 2 ]
"154
}
[; ;dhcp_client.c: 154: }
[e $U 43  ]
"155
[e :U 42 ]
[; ;dhcp_client.c: 155: else
[; ;dhcp_client.c: 156: {
"156
{
[; ;dhcp_client.c: 157: if(clientState == BOUND && dhcpLeaseTime) dhcpLeaseTime --;
"157
[e $ ! && == -> _clientState `i -> . `E609 4 `i != _dhcpLeaseTime -> -> 0 `i `ul 44  ]
[e -- _dhcpLeaseTime -> -> -> 1 `i `l `ul ]
[e $U 45  ]
"158
[e :U 44 ]
[; ;dhcp_client.c: 158: else if (!dhcpLeaseTime) clientState = INIT_REBOOT;
[e $ ! ! != _dhcpLeaseTime -> -> 0 `i `ul 46  ]
[e = _clientState . `E609 1 ]
[e :U 46 ]
"159
[e :U 45 ]
}
[e :U 43 ]
[e :U 41 ]
[e :U 39 ]
[; ;dhcp_client.c: 159: }
[; ;dhcp_client.c: 160: }
"160
[e :UE 35 ]
}
"162
[v _DHCP_Handler `(v ~T0 @X0 1 ef1`i ]
"163
{
[; ;dhcp_client.c: 162: void DHCP_Handler(int length)
[; ;dhcp_client.c: 163: {
[e :U _DHCP_Handler ]
"162
[v _length `i ~T0 @X0 1 r1 ]
"163
[f ]
"165
[v _myip `ul ~T0 @X0 1 a ]
[v _v `ul ~T0 @X0 1 a ]
"166
[v _v16 `ui ~T0 @X0 1 a ]
"167
[v _ip `ui ~T0 @X0 -> 4 `i a ]
"169
[v _ethPktMAC `S22 ~T0 @X0 1 a ]
"170
[v _ethMAC `S22 ~T0 @X0 1 a ]
[; ;dhcp_client.c: 165: uint32_t myip,v;
[; ;dhcp_client.c: 166: uint16_t v16;
[; ;dhcp_client.c: 167: uint16_t ip[4];
[; ;dhcp_client.c: 169: mac48Address_t ethPktMAC;
[; ;dhcp_client.c: 170: mac48Address_t ethMAC;
[; ;dhcp_client.c: 172: ETH_GetMAC((char*)&ethMAC);
"172
[e ( _ETH_GetMAC (1 -> &U _ethMAC `*uc ]
[; ;dhcp_client.c: 178: if(length > 240)
"178
[e $ ! > _length -> 240 `i 48  ]
[; ;dhcp_client.c: 179: {
"179
{
[; ;dhcp_client.c: 180: v16 = ETH_Read16();
"180
[e = _v16 ( _ETH_Read16 ..  ]
[; ;dhcp_client.c: 181: if(v16 == 0x0201)
"181
[e $ ! == _v16 -> -> 513 `i `ui 49  ]
[; ;dhcp_client.c: 182: {
"182
{
[; ;dhcp_client.c: 183: ETH_Dump(2);
"183
[e ( _ETH_Dump (1 -> -> 2 `i `ui ]
[; ;dhcp_client.c: 184: v = ETH_Read32();
"184
[e = _v ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 185: if(v == xidValue)
"185
[e $ ! == _v _xidValue 50  ]
[; ;dhcp_client.c: 186: {
"186
{
[; ;dhcp_client.c: 187: ETH_Dump(8);
"187
[e ( _ETH_Dump (1 -> -> 8 `i `ui ]
[; ;dhcp_client.c: 188: myip = ETH_Read32();
"188
[e = _myip ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 189: ip[0] = myip & 0x00FF;
"189
[e = *U + &U _ip * -> -> -> 0 `i `ui `ux -> -> # *U &U _ip `ui `ux -> & _myip -> -> -> 255 `i `l `ul `ui ]
[; ;dhcp_client.c: 190: ip[1] = (myip >> 8) & 0x00FF;
"190
[e = *U + &U _ip * -> -> -> 1 `i `ui `ux -> -> # *U &U _ip `ui `ux -> & >> _myip -> 8 `i -> -> -> 255 `i `l `ul `ui ]
[; ;dhcp_client.c: 191: ip[2] = (myip >> 16) & 0x00FF;
"191
[e = *U + &U _ip * -> -> -> 2 `i `ui `ux -> -> # *U &U _ip `ui `ux -> & >> _myip -> 16 `i -> -> -> 255 `i `l `ul `ui ]
[; ;dhcp_client.c: 192: ip[3] = (myip >> 24) & 0x00FF;
"192
[e = *U + &U _ip * -> -> -> 3 `i `ui `ux -> -> # *U &U _ip `ui `ux -> & >> _myip -> 24 `i -> -> -> 255 `i `l `ul `ui ]
[; ;dhcp_client.c: 193: ETH_Dump(8);
"193
[e ( _ETH_Dump (1 -> -> 8 `i `ui ]
[; ;dhcp_client.c: 194: ETH_ReadBlock((char *)&ethPktMAC, sizeof(ethPktMAC.s));
"194
[e ( _ETH_ReadBlock (2 , -> -> &U _ethPktMAC `*uc `*v -> # . _ethPktMAC 1 `ui ]
[; ;dhcp_client.c: 196: if(memcmp(&ethPktMAC.s, &ethMAC.s, 6)== 0)
"196
[e $ ! == ( _memcmp (3 , , -> &U . _ethPktMAC 1 `*Cv -> &U . _ethMAC 1 `*Cv -> -> 6 `i `ui -> 0 `i 51  ]
[; ;dhcp_client.c: 197: {
"197
{
[; ;dhcp_client.c: 198: ETH_Dump(202);
"198
[e ( _ETH_Dump (1 -> -> 202 `i `ui ]
[; ;dhcp_client.c: 199: if(ETH_Read32() == 0x63825363)
"199
[e $ ! == ( _ETH_Read32 ..  -> -> 1669485411 `l `ul 52  ]
[; ;dhcp_client.c: 200: {
"200
{
[; ;dhcp_client.c: 201: length -= 240;
"201
[e =- _length -> 240 `i ]
[; ;dhcp_client.c: 202: while(length>0)
"202
[e $U 53  ]
[e :U 54 ]
[; ;dhcp_client.c: 203: {
"203
{
"205
[v _option `uc ~T0 @X0 1 a ]
[v _optionLength `uc ~T0 @X0 1 a ]
[; ;dhcp_client.c: 205: uint8_t option, optionLength;
[; ;dhcp_client.c: 206: option = ETH_Read8();
"206
[e = _option ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 207: optionLength = ETH_Read8();
"207
[e = _optionLength ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 208: length -= 2 + optionLength;
"208
[e =- _length + -> 2 `i -> _optionLength `i ]
[; ;dhcp_client.c: 209: switch(option)
"209
[e $U 57  ]
[; ;dhcp_client.c: 210: {
"210
{
[; ;dhcp_client.c: 211: case 1:
"211
[e :U 58 ]
[; ;dhcp_client.c: 212: ipv4SubnetMask = ETH_Read32();
"212
[e = _ipv4SubnetMask ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 213: break;
"213
[e $U 56  ]
[; ;dhcp_client.c: 214: case 3:
"214
[e :U 59 ]
[; ;dhcp_client.c: 215: ipv4Router = ETH_Read32();
"215
[e = _ipv4Router ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 216: break;
"216
[e $U 56  ]
[; ;dhcp_client.c: 217: case 6:
"217
[e :U 60 ]
[; ;dhcp_client.c: 219: if(optionLength >= 4)
"219
[e $ ! >= -> _optionLength `i -> 4 `i 61  ]
[; ;dhcp_client.c: 220: {
"220
{
[; ;dhcp_client.c: 221: ipv4DNS[0] = ETH_Read32();
"221
[e = *U + &U _ipv4DNS * -> -> -> 0 `i `ui `ux -> -> # *U &U _ipv4DNS `ui `ux ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 222: optionLength -= 4;
"222
[e =- _optionLength -> -> 4 `i `uc ]
[; ;dhcp_client.c: 223: if(optionLength >= 4)
"223
[e $ ! >= -> _optionLength `i -> 4 `i 62  ]
[; ;dhcp_client.c: 224: {
"224
{
[; ;dhcp_client.c: 225: ipv4DNS[1] = ETH_Read32();
"225
[e = *U + &U _ipv4DNS * -> -> -> 1 `i `ui `ux -> -> # *U &U _ipv4DNS `ui `ux ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 226: optionLength -= 4;
"226
[e =- _optionLength -> -> 4 `i `uc ]
"227
}
[e :U 62 ]
"228
}
[e :U 61 ]
[; ;dhcp_client.c: 227: }
[; ;dhcp_client.c: 228: }
[; ;dhcp_client.c: 229: break;
"229
[e $U 56  ]
[; ;dhcp_client.c: 230: case 51:
"230
[e :U 63 ]
[; ;dhcp_client.c: 231: if(optionLength >= 4)
"231
[e $ ! >= -> _optionLength `i -> 4 `i 64  ]
[; ;dhcp_client.c: 232: {
"232
{
[; ;dhcp_client.c: 233: dhcpLeaseTime = ETH_Read32();
"233
[e = _dhcpLeaseTime ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 234: optionLength -= 4;
"234
[e =- _optionLength -> -> 4 `i `uc ]
"235
}
[e :U 64 ]
[; ;dhcp_client.c: 235: }
[; ;dhcp_client.c: 236: break;
"236
[e $U 56  ]
[; ;dhcp_client.c: 237: case 54:
"237
[e :U 65 ]
[; ;dhcp_client.c: 238: dhcpServerId = ETH_Read32();
"238
[e = _dhcpServerId ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 239: optionLength -= 4;
"239
[e =- _optionLength -> -> 4 `i `uc ]
[; ;dhcp_client.c: 240: break;
"240
[e $U 56  ]
[; ;dhcp_client.c: 241: case 53:
"241
[e :U 66 ]
[; ;dhcp_client.c: 242: switch(ETH_Read8())
"242
[e $U 68  ]
[; ;dhcp_client.c: 243: {
"243
{
[; ;dhcp_client.c: 244: case DHCP_OFFER:
"244
[e :U 69 ]
[; ;dhcp_client.c: 245: ipv4Address = myip;
"245
[e = _ipv4Address _myip ]
[; ;dhcp_client.c: 246: clientState = REQUESTING;
"246
[e = _clientState . `E609 3 ]
[; ;dhcp_client.c: 247: break;
"247
[e $U 67  ]
[; ;dhcp_client.c: 248: case DHCP_ACK:
"248
[e :U 70 ]
[; ;dhcp_client.c: 249: ipv4Address = myip;
"249
[e = _ipv4Address _myip ]
[; ;dhcp_client.c: 250: clientState = BOUND;
"250
[e = _clientState . `E609 4 ]
[; ;dhcp_client.c: 252: break;
"252
[e $U 67  ]
[; ;dhcp_client.c: 253: case DHCP_NACK:
"253
[e :U 71 ]
[; ;dhcp_client.c: 254: clientState = INIT;
"254
[e = _clientState . `E609 0 ]
[; ;dhcp_client.c: 255: break;
"255
[e $U 67  ]
[; ;dhcp_client.c: 256: default:
"256
[e :U 72 ]
[; ;dhcp_client.c: 257: break;
"257
[e $U 67  ]
"258
}
[; ;dhcp_client.c: 258: }
[e $U 67  ]
"242
[e :U 68 ]
[e [\ ( _ETH_Read8 ..  , $ -> . `E592 1 `uc 69
 , $ -> . `E592 4 `uc 70
 , $ -> . `E592 5 `uc 71
 72 ]
"258
[e :U 67 ]
[; ;dhcp_client.c: 259: optionLength -=1;
"259
[e =- _optionLength -> -> 1 `i `uc ]
[; ;dhcp_client.c: 260: break;
"260
[e $U 56  ]
[; ;dhcp_client.c: 261: default:
"261
[e :U 73 ]
[; ;dhcp_client.c: 262: ETH_Dump(optionLength);
"262
[e ( _ETH_Dump (1 -> _optionLength `ui ]
[; ;dhcp_client.c: 263: break;
"263
[e $U 56  ]
"264
}
[; ;dhcp_client.c: 264: }
[e $U 56  ]
"209
[e :U 57 ]
[e [\ _option , $ -> -> 1 `i `uc 58
 , $ -> -> 3 `i `uc 59
 , $ -> -> 6 `i `uc 60
 , $ -> -> 51 `i `uc 63
 , $ -> -> 54 `i `uc 65
 , $ -> -> 53 `i `uc 66
 73 ]
"264
[e :U 56 ]
"265
}
[e :U 53 ]
"202
[e $ > _length -> 0 `i 54  ]
[e :U 55 ]
[; ;dhcp_client.c: 265: }
[; ;dhcp_client.c: 266: if (clientState == REQUESTING)
"266
[e $ ! == -> _clientState `i -> . `E609 3 `i 74  ]
[; ;dhcp_client.c: 267: DHCP_Request( DHCP_REQUEST );
"267
[e ( _DHCP_Request (1 . `E592 2 ]
[e :U 74 ]
"268
}
[e :U 52 ]
"269
}
[; ;dhcp_client.c: 268: }
[; ;dhcp_client.c: 269: }
[e $U 75  ]
"270
[e :U 51 ]
[; ;dhcp_client.c: 270: else
[; ;dhcp_client.c: 271: ETH_Dump(length - 34);
"271
[e ( _ETH_Dump (1 -> - _length -> 34 `i `ui ]
[e :U 75 ]
"272
}
[e :U 50 ]
"273
}
[e :U 49 ]
"274
}
[e :U 48 ]
[; ;dhcp_client.c: 272: }
[; ;dhcp_client.c: 273: }
[; ;dhcp_client.c: 274: }
[; ;dhcp_client.c: 275: }
"275
[e :UE 47 ]
}
"277
[v _DHCP_WriteZeros `(v ~T0 @X0 1 ef1`ui ]
"278
{
[; ;dhcp_client.c: 277: void DHCP_WriteZeros(uint16_t length)
[; ;dhcp_client.c: 278: {
[e :U _DHCP_WriteZeros ]
"277
[v _length `ui ~T0 @X0 1 r1 ]
"278
[f ]
[; ;dhcp_client.c: 279: while(length--)
"279
[e $U 77  ]
[e :U 78 ]
[; ;dhcp_client.c: 280: {
"280
{
[; ;dhcp_client.c: 281: ETH_Write8(0);
"281
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
"282
}
[e :U 77 ]
"279
[e $ != -- _length -> -> 1 `i `ui -> -> 0 `i `ui 78  ]
[e :U 79 ]
[; ;dhcp_client.c: 282: }
[; ;dhcp_client.c: 283: }
"283
[e :UE 76 ]
}
