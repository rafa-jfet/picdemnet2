Version 3.2 HI-TECH Software Intermediate Code
"52 ../../TCPIP Library/source/tcpv4.c
[c E680 0 1 2 .. ]
[n E680 . NO_BUFF RX_BUFF_IN_USE TX_BUFF_IN_USE  ]
[c E638 0 1 2 3 4 5 6 7 8 9 10 .. ]
[n E638 . CLOSED LISTEN SYN_SENT SYN_RECEIVED ESTABLISHED FIN_WAIT_1 FIN_WAIT_2 CLOSE_WAIT CLOSING LAST_ACK TIME_WAIT  ]
[c E651 0 1 2 3 4 5 6 7 8 9 10 11 12 13 .. ]
[n E651 . CLOSE ACTIVE_OPEN PASIVE_OPEN RCV_SYN RCV_ACK RCV_SYNACK RCV_FIN RCV_FINACK RX_PACKET RCV_RST RCV_RSTACK RCV_PSHACK TIMEOUT NOP  ]
[c E667 0 1 2 3 4 .. ]
[n E667 . NOT_A_SOCKET SOCKET_CLOSED SOCKET_IN_PROGRESS SOCKET_CONNECTED SOCKET_CLOSING  ]
"105 ../../TCPIP Library/include\tcpv4.h
[s S27 `ui 1 `ul 1 `ui 1 `ul 1 `ul 1 `ul 1 `ul 1 `ui 1 `ui 1 `ui 1 `*uc 1 `*uc 1 `E680 1 `*uc 1 `*uc 1 `ui 1 `E680 1 `E638 1 `E651 1 `*v 1 `*v 1 `ui 1 `ui 1 `uc 1 `uc 1 `E667 1 ]
[n S27 . localPort destIP destPort remoteSeqno remoteAck localSeqno localLastAck remoteWnd localWnd mss rxBufferStart rxBufferPtr rxBufState txBufferStart txBufferPtr bytesToSend txBufState fsmState connectionEvent nextTCB prevTCB timeout timeoutReloadValue timeoutsCount flags socketState ]
"190 ../../TCPIP Library/include\tcpip_types.h
[s S14 :1 `uc 1 :3 `uc 1 :4 `uc 1 ]
[n S14 . ns reserved dataOffset ]
"188
[u S13 `uc 1 `S14 1 ]
[n S13 . byte13 . ]
"199
[s S16 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 ]
[n S16 . fin syn rst psh ack urg ece cwr ]
"197
[u S15 `uc 1 `S16 1 ]
[n S15 . flags . ]
"183
[s S12 `ui 1 `ui 1 `ul 1 `ul 1 `S13 1 `S15 1 `ui 1 `ui 1 `ui 1 ]
[n S12 . sourcePort destPort sequenceNumber ackNumber . . windowSize checksum urgentPtr ]
"257 ../../TCPIP Library/source/tcpv4.c
[c E310 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 62 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 100 101 102 103 104 105 106 107 108 109 110 111 112 113 115 116 117 118 119 120 122 123 124 125 126 127 128 129 130 131 132 133 .. ]
[n E310 . HOPOPT ICMP IGMP GGP IPV4 ST TCP CBT EGP IGP BBN_RCC_MON NVP_II PUP ARGUS EMCON XNET CHAOS UDP MUX DCN_MEAS HMP PRM XNS_IDP TRUNK_1 TRUNK_2 LEAF_1 LEAF_2 RDP IRTP ISO_TP4 NETBLT MFE_NSP MERIT_INP DCCP THREEPC IDPR XTP DDP IDPR_CMTP TPpp IL IPV6_TUNNEL SDRP IPV6_Route IPV6_Frag IDRP RSVP GRE DSR BNA ESP AH I_NLSP SWIPE NARP MOBILE TLSP SKIP IPV6_ICMP IPV6_NoNxt IPV6_Opts CFTP SAT_EXPAK KRYPTOLAN RVD IPPC SAT_MON VISA IPCV CPNX CPHB WSN PVP BR_SAT_MON SUN_ND WB_MON WB_EXPAK ISO_IP VMTP SECURE_VMTP VINES TTP IPTM NSFNET_IGP DGP TCF EIGRP OSPFIGP Sprite_RPC LARP MTP AX25 IPIP MICP SCC_SP ETHERIP ENCAP GMTP IFMP PNNI PIM ARIS SCPS QNX A_N IPComp SNP Compaq_Peer IPX_in_IP VRRP PGM L2TP DDX IATP STP SRP UTI SM PTP ISIS FIRE CRTP CRUDP SSCOPMCE IPLT SPS PIPE SCTP FC  ]
[c E451 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .. ]
[n E451 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED  ]
"103 ../../TCPIP Library/include\ipv4.h
[v _IPv4_Start `(E451 ~T0 @X0 0 ef2`ul`E310 ]
"107 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"116
[v _ETH_TxComputeChecksum `(ui ~T0 @X0 0 ef3`ui`ui`ui ]
"69 ../../TCPIP Library/include\tcpip_types.h
[u S5 `ui 1 `ui 1 `ui 1 ]
[n S5 . type length tpid ]
"65
[s S4 `uc -> 6 `i `uc -> 6 `i `S5 1 ]
[n S4 . destinationMAC sourceMAC id ]
"89
[s S6 :4 `uc 1 :4 `uc 1 :2 `uc 1 :6 `uc 1 `ui 1 `ui 1 :5 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 `uc 1 `uc 1 `uc 1 `ui 1 `ul 1 `ul 1 ]
[n S6 . ihl version ecn dscp length identifcation fragmentOffsetHigh . dontFragment moreFragments fragmentOffsetLow timeToLive protocol headerCksm srcIpAddress dstIpAddress ]
"112 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_Insert `(v ~T0 @X0 0 ef3`*uc`ui`ui ]
"136 ../../TCPIP Library/include\ipv4.h
[v _IPV4_Send `(E451 ~T0 @X0 0 ef1`ui ]
"99 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"100
[v _ETH_Read8 `(uc ~T0 @X0 0 ef ]
"103
[v _ETH_Dump `(v ~T0 @X0 0 ef1`ui ]
"101
[v _ETH_Read16 `(ui ~T0 @X0 0 ef ]
"378 ../../TCPIP Library/source/tcpv4.c
[c E713 0 1 2 .. ]
[n E713 . TCP_EOP TCP_NOP TCP_MSS  ]
"70
[v _TCP_FiniteStateMachine `(uc ~T0 @X0 0 sf ]
"1182
[c E177 -1 0 .. ]
[n E177 . TCB_ERROR TCB_NO_ERROR  ]
"258 ../../TCPIP Library/include\tcpv4.h
[v _TCP_SocketPoll `(E667 ~T0 @X0 0 ef1`*S27 ]
"369 ../../TCPIP Library/include\tcpip_types.h
[u S19 `ul 1 `uc -> 4 `i ]
[n S19 . s_addr s_addr_byte ]
"368
[s S18 `S19 1 ]
[n S18 . . ]
"376
[s S20 `ui 1 `S18 1 ]
[n S20 . port addr ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 25: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;stddef.h: 6: typedef int ptrdiff_t;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 34: extern char * strcat(char *, const char *);
[; ;string.h: 35: extern char * strcpy(char *, const char *);
[; ;string.h: 36: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 37: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 38: extern char * strdup(const char *);
[; ;string.h: 39: extern char * strtok(char *, const char *);
[; ;string.h: 42: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 43: extern int strcmp(const char *, const char *);
[; ;string.h: 44: extern int stricmp(const char *, const char *);
[; ;string.h: 45: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 46: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 47: extern void * memchr(const void *, int, size_t);
[; ;string.h: 48: extern size_t strcspn(const char *, const char *);
[; ;string.h: 49: extern char * strpbrk(const char *, const char *);
[; ;string.h: 50: extern size_t strspn(const char *, const char *);
[; ;string.h: 51: extern char * strstr(const char *, const char *);
[; ;string.h: 52: extern char * stristr(const char *, const char *);
[; ;string.h: 53: extern char * strerror(int);
[; ;string.h: 54: extern size_t strlen(const char *);
[; ;string.h: 55: extern char * strchr(const char *, int);
[; ;string.h: 56: extern char * strichr(const char *, int);
[; ;string.h: 57: extern char * strrchr(const char *, int);
[; ;string.h: 58: extern char * strrichr(const char *, int);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;include\tcpip_types.h: 51: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;include\tcpip_types.h: 53: typedef union
[; ;include\tcpip_types.h: 54: {
[; ;include\tcpip_types.h: 55: uint16_t value;
[; ;include\tcpip_types.h: 56: struct
[; ;include\tcpip_types.h: 57: {
[; ;include\tcpip_types.h: 58: unsigned int priorityCodePoint:3;
[; ;include\tcpip_types.h: 59: unsigned int dropEligible:1;
[; ;include\tcpip_types.h: 60: unsigned int vlanId:12;
[; ;include\tcpip_types.h: 61: };
[; ;include\tcpip_types.h: 62: } tci_t;
[; ;include\tcpip_types.h: 64: typedef struct
[; ;include\tcpip_types.h: 65: {
[; ;include\tcpip_types.h: 66: uint8_t destinationMAC[6];
[; ;include\tcpip_types.h: 67: uint8_t sourceMAC[6];
[; ;include\tcpip_types.h: 68: union
[; ;include\tcpip_types.h: 69: {
[; ;include\tcpip_types.h: 70: uint16_t type;
[; ;include\tcpip_types.h: 71: uint16_t length;
[; ;include\tcpip_types.h: 72: uint16_t tpid;
[; ;include\tcpip_types.h: 73: }id;
[; ;include\tcpip_types.h: 78: } ethernetFrame_t;
"80 ../../TCPIP Library/include\tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;include\tcpip_types.h: 80: uint8_t Control_Byte = 0x00;
[; ;include\tcpip_types.h: 88: typedef struct
[; ;include\tcpip_types.h: 89: {
[; ;include\tcpip_types.h: 90: unsigned ihl:4;
[; ;include\tcpip_types.h: 91: unsigned version:4;
[; ;include\tcpip_types.h: 92: unsigned ecn:2;
[; ;include\tcpip_types.h: 93: unsigned dscp:6;
[; ;include\tcpip_types.h: 94: uint16_t length;
[; ;include\tcpip_types.h: 95: uint16_t identifcation;
[; ;include\tcpip_types.h: 96: unsigned fragmentOffsetHigh:5;
[; ;include\tcpip_types.h: 97: unsigned :1;
[; ;include\tcpip_types.h: 98: unsigned dontFragment:1;
[; ;include\tcpip_types.h: 99: unsigned moreFragments:1;
[; ;include\tcpip_types.h: 100: uint8_t fragmentOffsetLow;
[; ;include\tcpip_types.h: 101: uint8_t timeToLive;
[; ;include\tcpip_types.h: 102: uint8_t protocol;
[; ;include\tcpip_types.h: 103: uint16_t headerCksm;
[; ;include\tcpip_types.h: 104: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 105: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 108: } ipv4Header_t;
[; ;include\tcpip_types.h: 111: typedef struct
[; ;include\tcpip_types.h: 112: {
[; ;include\tcpip_types.h: 113: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 114: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 115: uint8_t protocol;
[; ;include\tcpip_types.h: 116: uint8_t z;
[; ;include\tcpip_types.h: 117: uint16_t length;
[; ;include\tcpip_types.h: 118: } ipv4_pseudo_header_t;
[; ;include\tcpip_types.h: 120: typedef struct
[; ;include\tcpip_types.h: 121: {
[; ;include\tcpip_types.h: 122: union
[; ;include\tcpip_types.h: 123: {
[; ;include\tcpip_types.h: 124: uint16_t typeCode;
[; ;include\tcpip_types.h: 125: struct
[; ;include\tcpip_types.h: 126: {
[; ;include\tcpip_types.h: 127: uint8_t code;
[; ;include\tcpip_types.h: 128: uint8_t type;
[; ;include\tcpip_types.h: 129: };
[; ;include\tcpip_types.h: 130: };
[; ;include\tcpip_types.h: 131: uint16_t checksum;
[; ;include\tcpip_types.h: 132: uint16_t identifier;
[; ;include\tcpip_types.h: 133: uint16_t sequence;
[; ;include\tcpip_types.h: 135: } icmpHeader_t;
[; ;include\tcpip_types.h: 138: typedef enum
[; ;include\tcpip_types.h: 139: {
[; ;include\tcpip_types.h: 140: ECHO_REPLY = 0x0000,
[; ;include\tcpip_types.h: 142: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;include\tcpip_types.h: 143: DEST_HOST_UNREACHABLE = 0x0301,
[; ;include\tcpip_types.h: 144: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;include\tcpip_types.h: 145: DEST_PORT_UNREACHABLE = 0x0303,
[; ;include\tcpip_types.h: 146: FRAGMENTATION_REQUIRED = 0x0304,
[; ;include\tcpip_types.h: 147: SOURCE_ROUTE_FAILED = 0x0305,
[; ;include\tcpip_types.h: 148: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;include\tcpip_types.h: 149: SOURCE_HOST_ISOLATED = 0x0307,
[; ;include\tcpip_types.h: 150: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;include\tcpip_types.h: 151: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;include\tcpip_types.h: 152: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;include\tcpip_types.h: 153: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;include\tcpip_types.h: 154: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;include\tcpip_types.h: 155: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;include\tcpip_types.h: 156: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;include\tcpip_types.h: 158: SOURCE_QUENCH = 0x0400,
[; ;include\tcpip_types.h: 160: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;include\tcpip_types.h: 161: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;include\tcpip_types.h: 162: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;include\tcpip_types.h: 163: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;include\tcpip_types.h: 165: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;include\tcpip_types.h: 167: ECHO_REQUEST = 0x0800,
[; ;include\tcpip_types.h: 169: ROUTER_ADVERTISEMENT = 0x0900,
[; ;include\tcpip_types.h: 170: ROUTER_SOLICITATION = 0x0A00,
[; ;include\tcpip_types.h: 171: TRACEROUTE = 0x3000
[; ;include\tcpip_types.h: 172: } icmpTypeCodes_t;
[; ;include\tcpip_types.h: 174: typedef struct
[; ;include\tcpip_types.h: 175: {
[; ;include\tcpip_types.h: 176: uint16_t srcPort;
[; ;include\tcpip_types.h: 177: uint16_t dstPort;
[; ;include\tcpip_types.h: 178: uint16_t length;
[; ;include\tcpip_types.h: 179: uint16_t checksum;
[; ;include\tcpip_types.h: 180: } udpHeader_t;
[; ;include\tcpip_types.h: 182: typedef struct
[; ;include\tcpip_types.h: 183: {
[; ;include\tcpip_types.h: 184: uint16_t sourcePort;
[; ;include\tcpip_types.h: 185: uint16_t destPort;
[; ;include\tcpip_types.h: 186: uint32_t sequenceNumber;
[; ;include\tcpip_types.h: 187: uint32_t ackNumber;
[; ;include\tcpip_types.h: 188: union{
[; ;include\tcpip_types.h: 189: uint8_t byte13;
[; ;include\tcpip_types.h: 190: struct{
[; ;include\tcpip_types.h: 191: uint8_t ns:1;
[; ;include\tcpip_types.h: 192: uint8_t reserved:3;
[; ;include\tcpip_types.h: 193: uint8_t dataOffset:4;
[; ;include\tcpip_types.h: 194: };
[; ;include\tcpip_types.h: 195: };
[; ;include\tcpip_types.h: 197: union{
[; ;include\tcpip_types.h: 198: uint8_t flags;
[; ;include\tcpip_types.h: 199: struct{
[; ;include\tcpip_types.h: 200: uint8_t fin:1;
[; ;include\tcpip_types.h: 201: uint8_t syn:1;
[; ;include\tcpip_types.h: 202: uint8_t rst:1;
[; ;include\tcpip_types.h: 203: uint8_t psh:1;
[; ;include\tcpip_types.h: 204: uint8_t ack:1;
[; ;include\tcpip_types.h: 205: uint8_t urg:1;
[; ;include\tcpip_types.h: 206: uint8_t ece:1;
[; ;include\tcpip_types.h: 207: uint8_t cwr:1;
[; ;include\tcpip_types.h: 208: };
[; ;include\tcpip_types.h: 209: };
[; ;include\tcpip_types.h: 211: uint16_t windowSize;
[; ;include\tcpip_types.h: 212: uint16_t checksum;
[; ;include\tcpip_types.h: 213: uint16_t urgentPtr;
[; ;include\tcpip_types.h: 217: } tcpHeader_t;
[; ;include\tcpip_types.h: 219: typedef struct
[; ;include\tcpip_types.h: 220: {
[; ;include\tcpip_types.h: 221: unsigned int version:4;
[; ;include\tcpip_types.h: 222: unsigned int trafficClass:8;
[; ;include\tcpip_types.h: 223: unsigned int flowLabel:20;
[; ;include\tcpip_types.h: 224: uint16_t payloadLength;
[; ;include\tcpip_types.h: 225: uint8_t nextHeader;
[; ;include\tcpip_types.h: 226: uint8_t hopLimit;
[; ;include\tcpip_types.h: 227: uint8_t srcAddress[8];
[; ;include\tcpip_types.h: 228: uint8_t dstAddress[8];
[; ;include\tcpip_types.h: 230: } ipv6Header_t;
[; ;include\tcpip_types.h: 233: typedef enum
[; ;include\tcpip_types.h: 234: {
[; ;include\tcpip_types.h: 235: HOPOPT = 0,
[; ;include\tcpip_types.h: 236: ICMP = 1,
[; ;include\tcpip_types.h: 237: IGMP = 2,
[; ;include\tcpip_types.h: 238: GGP = 3,
[; ;include\tcpip_types.h: 239: IPV4 = 4,
[; ;include\tcpip_types.h: 240: ST = 5,
[; ;include\tcpip_types.h: 241: TCP = 6,
[; ;include\tcpip_types.h: 242: CBT = 7,
[; ;include\tcpip_types.h: 243: EGP = 8,
[; ;include\tcpip_types.h: 244: IGP = 9,
[; ;include\tcpip_types.h: 245: BBN_RCC_MON = 10,
[; ;include\tcpip_types.h: 246: NVP_II = 11,
[; ;include\tcpip_types.h: 247: PUP = 12,
[; ;include\tcpip_types.h: 248: ARGUS = 13,
[; ;include\tcpip_types.h: 249: EMCON = 14,
[; ;include\tcpip_types.h: 250: XNET = 15,
[; ;include\tcpip_types.h: 251: CHAOS = 16,
[; ;include\tcpip_types.h: 252: UDP = 17,
[; ;include\tcpip_types.h: 253: MUX = 18,
[; ;include\tcpip_types.h: 254: DCN_MEAS = 19,
[; ;include\tcpip_types.h: 255: HMP = 20,
[; ;include\tcpip_types.h: 256: PRM = 21,
[; ;include\tcpip_types.h: 257: XNS_IDP = 22,
[; ;include\tcpip_types.h: 258: TRUNK_1 = 23,
[; ;include\tcpip_types.h: 259: TRUNK_2 = 24,
[; ;include\tcpip_types.h: 260: LEAF_1 = 25,
[; ;include\tcpip_types.h: 261: LEAF_2 = 26,
[; ;include\tcpip_types.h: 262: RDP = 27,
[; ;include\tcpip_types.h: 263: IRTP = 28,
[; ;include\tcpip_types.h: 264: ISO_TP4 = 29,
[; ;include\tcpip_types.h: 265: NETBLT = 30,
[; ;include\tcpip_types.h: 266: MFE_NSP = 31,
[; ;include\tcpip_types.h: 267: MERIT_INP = 32,
[; ;include\tcpip_types.h: 268: DCCP = 33,
[; ;include\tcpip_types.h: 269: THREEPC = 34,
[; ;include\tcpip_types.h: 270: IDPR = 35,
[; ;include\tcpip_types.h: 271: XTP = 36,
[; ;include\tcpip_types.h: 272: DDP = 37,
[; ;include\tcpip_types.h: 273: IDPR_CMTP = 38,
[; ;include\tcpip_types.h: 274: TPpp = 39,
[; ;include\tcpip_types.h: 275: IL = 40,
[; ;include\tcpip_types.h: 276: IPV6_TUNNEL = 41,
[; ;include\tcpip_types.h: 277: SDRP = 42,
[; ;include\tcpip_types.h: 278: IPV6_Route = 43,
[; ;include\tcpip_types.h: 279: IPV6_Frag = 44,
[; ;include\tcpip_types.h: 280: IDRP = 45,
[; ;include\tcpip_types.h: 281: RSVP = 46,
[; ;include\tcpip_types.h: 282: GRE = 47,
[; ;include\tcpip_types.h: 283: DSR = 48,
[; ;include\tcpip_types.h: 284: BNA = 49,
[; ;include\tcpip_types.h: 285: ESP = 50,
[; ;include\tcpip_types.h: 286: AH = 51,
[; ;include\tcpip_types.h: 287: I_NLSP = 52,
[; ;include\tcpip_types.h: 288: SWIPE = 53,
[; ;include\tcpip_types.h: 289: NARP = 54,
[; ;include\tcpip_types.h: 290: MOBILE = 55,
[; ;include\tcpip_types.h: 291: TLSP = 56,
[; ;include\tcpip_types.h: 292: SKIP = 57,
[; ;include\tcpip_types.h: 293: IPV6_ICMP = 58,
[; ;include\tcpip_types.h: 294: IPV6_NoNxt = 59,
[; ;include\tcpip_types.h: 295: IPV6_Opts = 60,
[; ;include\tcpip_types.h: 296: CFTP = 62,
[; ;include\tcpip_types.h: 297: SAT_EXPAK = 64,
[; ;include\tcpip_types.h: 298: KRYPTOLAN = 65,
[; ;include\tcpip_types.h: 299: RVD = 66,
[; ;include\tcpip_types.h: 300: IPPC = 67,
[; ;include\tcpip_types.h: 301: SAT_MON = 69,
[; ;include\tcpip_types.h: 302: VISA = 70,
[; ;include\tcpip_types.h: 303: IPCV = 71,
[; ;include\tcpip_types.h: 304: CPNX = 72,
[; ;include\tcpip_types.h: 305: CPHB = 73,
[; ;include\tcpip_types.h: 306: WSN = 74,
[; ;include\tcpip_types.h: 307: PVP = 75,
[; ;include\tcpip_types.h: 308: BR_SAT_MON = 76,
[; ;include\tcpip_types.h: 309: SUN_ND = 77,
[; ;include\tcpip_types.h: 310: WB_MON = 78,
[; ;include\tcpip_types.h: 311: WB_EXPAK = 79,
[; ;include\tcpip_types.h: 312: ISO_IP = 80,
[; ;include\tcpip_types.h: 313: VMTP = 81,
[; ;include\tcpip_types.h: 314: SECURE_VMTP = 82,
[; ;include\tcpip_types.h: 315: VINES = 83,
[; ;include\tcpip_types.h: 316: TTP = 84,
[; ;include\tcpip_types.h: 317: IPTM = 84,
[; ;include\tcpip_types.h: 318: NSFNET_IGP = 85,
[; ;include\tcpip_types.h: 319: DGP = 86,
[; ;include\tcpip_types.h: 320: TCF = 87,
[; ;include\tcpip_types.h: 321: EIGRP = 88,
[; ;include\tcpip_types.h: 322: OSPFIGP = 89,
[; ;include\tcpip_types.h: 323: Sprite_RPC = 90,
[; ;include\tcpip_types.h: 324: LARP = 91,
[; ;include\tcpip_types.h: 325: MTP = 92,
[; ;include\tcpip_types.h: 326: AX25 = 93,
[; ;include\tcpip_types.h: 327: IPIP = 94,
[; ;include\tcpip_types.h: 328: MICP = 95,
[; ;include\tcpip_types.h: 329: SCC_SP = 96,
[; ;include\tcpip_types.h: 330: ETHERIP = 97,
[; ;include\tcpip_types.h: 331: ENCAP = 98,
[; ;include\tcpip_types.h: 332: GMTP = 100,
[; ;include\tcpip_types.h: 333: IFMP = 101,
[; ;include\tcpip_types.h: 334: PNNI = 102,
[; ;include\tcpip_types.h: 335: PIM = 103,
[; ;include\tcpip_types.h: 336: ARIS = 104,
[; ;include\tcpip_types.h: 337: SCPS = 105,
[; ;include\tcpip_types.h: 338: QNX = 106,
[; ;include\tcpip_types.h: 339: A_N = 107,
[; ;include\tcpip_types.h: 340: IPComp = 108,
[; ;include\tcpip_types.h: 341: SNP = 109,
[; ;include\tcpip_types.h: 342: Compaq_Peer = 110,
[; ;include\tcpip_types.h: 343: IPX_in_IP = 111,
[; ;include\tcpip_types.h: 344: VRRP = 112,
[; ;include\tcpip_types.h: 345: PGM = 113,
[; ;include\tcpip_types.h: 346: L2TP = 115,
[; ;include\tcpip_types.h: 347: DDX = 116,
[; ;include\tcpip_types.h: 348: IATP = 117,
[; ;include\tcpip_types.h: 349: STP = 118,
[; ;include\tcpip_types.h: 350: SRP = 119,
[; ;include\tcpip_types.h: 351: UTI = 120,
[; ;include\tcpip_types.h: 353: SM = 122,
[; ;include\tcpip_types.h: 354: PTP = 123,
[; ;include\tcpip_types.h: 355: ISIS = 124,
[; ;include\tcpip_types.h: 356: FIRE = 125,
[; ;include\tcpip_types.h: 357: CRTP = 126,
[; ;include\tcpip_types.h: 358: CRUDP = 127,
[; ;include\tcpip_types.h: 359: SSCOPMCE = 128,
[; ;include\tcpip_types.h: 360: IPLT = 129,
[; ;include\tcpip_types.h: 361: SPS = 130,
[; ;include\tcpip_types.h: 362: PIPE = 131,
[; ;include\tcpip_types.h: 363: SCTP = 132,
[; ;include\tcpip_types.h: 364: FC = 133
[; ;include\tcpip_types.h: 365: } ipProtocolNumbers;
[; ;include\tcpip_types.h: 367: typedef struct
[; ;include\tcpip_types.h: 368: {
[; ;include\tcpip_types.h: 369: union{
[; ;include\tcpip_types.h: 370: uint32_t s_addr;
[; ;include\tcpip_types.h: 371: uint8_t s_addr_byte[4];
[; ;include\tcpip_types.h: 372: };
[; ;include\tcpip_types.h: 373: }inAddr_t;
[; ;include\tcpip_types.h: 375: typedef struct
[; ;include\tcpip_types.h: 376: {
[; ;include\tcpip_types.h: 377: uint16_t port;
[; ;include\tcpip_types.h: 378: inAddr_t addr;
[; ;include\tcpip_types.h: 379: }sockaddr_in_t;
[; ;include\tcpip_types.h: 381: typedef enum
[; ;include\tcpip_types.h: 382: {
[; ;include\tcpip_types.h: 383: ERROR =0,
[; ;include\tcpip_types.h: 384: SUCCESS,
[; ;include\tcpip_types.h: 385: LINK_NOT_FOUND,
[; ;include\tcpip_types.h: 386: BUFFER_BUSY,
[; ;include\tcpip_types.h: 387: TX_LOGIC_NOT_IDLE,
[; ;include\tcpip_types.h: 388: MAC_NOT_FOUND,
[; ;include\tcpip_types.h: 389: IP_WRONG_VERSION,
[; ;include\tcpip_types.h: 390: IPV4_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 391: DEST_IP_NOT_MATCHED,
[; ;include\tcpip_types.h: 392: ICMP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 393: UDP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 394: TCP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 395: DMA_TIMEOUT,
[; ;include\tcpip_types.h: 396: PORT_NOT_AVAILABLE,
[; ;include\tcpip_types.h: 397: ARP_IP_NOT_MATCHED
[; ;include\tcpip_types.h: 398: }error_msg;
[; ;include\tcpip_types.h: 400: typedef struct
[; ;include\tcpip_types.h: 401: {
[; ;include\tcpip_types.h: 402: inAddr_t dest_addr;
[; ;include\tcpip_types.h: 403: }destIP_t;
[; ;include\tcpip_types.h: 406: typedef int8_t socklistsize_t;
[; ;include\tcpip_types.h: 408: typedef void (*ip_receive_function_ptr)(int);
[; ;include\mac_address.h: 49: typedef union
[; ;include\mac_address.h: 50: {
[; ;include\mac_address.h: 51: uint8_t mac_array[6];
[; ;include\mac_address.h: 52: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;include\mac_address.h: 53: } mac48Address_t;
[; ;include\mac_address.h: 55: extern const mac48Address_t broadcastMAC;
[; ;include\mac_address.h: 56: extern const mac48Address_t macAddress;
[; ;include\mac_address.h: 58: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_drivers\ethernet_driver.h: 51: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 52: {
[; ;ethernet_drivers\ethernet_driver.h: 53: uint16_t byteCount;
[; ;ethernet_drivers\ethernet_driver.h: 54: unsigned long_drop_event:1;
[; ;ethernet_drivers\ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 56: unsigned excessCarrierEvent:1;
[; ;ethernet_drivers\ethernet_driver.h: 57: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 58: unsigned crcError:1;
[; ;ethernet_drivers\ethernet_driver.h: 59: unsigned lengthCheckError:1;
[; ;ethernet_drivers\ethernet_driver.h: 60: unsigned lengthLongError:1;
[; ;ethernet_drivers\ethernet_driver.h: 61: unsigned rxOK:1;
[; ;ethernet_drivers\ethernet_driver.h: 62: unsigned rxMulticast:1;
[; ;ethernet_drivers\ethernet_driver.h: 63: unsigned rxBroadcast:1;
[; ;ethernet_drivers\ethernet_driver.h: 64: unsigned dribbleNibble:1;
[; ;ethernet_drivers\ethernet_driver.h: 65: unsigned controlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 66: unsigned pauseControlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 67: unsigned unknownContrlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 68: unsigned vlanTagPresent:1;
[; ;ethernet_drivers\ethernet_driver.h: 69: unsigned zero:1;
[; ;ethernet_drivers\ethernet_driver.h: 70: }receiveStatusVector_t;
[; ;ethernet_drivers\ethernet_driver.h: 72: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 73: {
[; ;ethernet_drivers\ethernet_driver.h: 74: unsigned error:1;
[; ;ethernet_drivers\ethernet_driver.h: 75: unsigned pktReady:1;
[; ;ethernet_drivers\ethernet_driver.h: 76: unsigned up:1;
[; ;ethernet_drivers\ethernet_driver.h: 77: unsigned idle:1;
[; ;ethernet_drivers\ethernet_driver.h: 78: unsigned linkChange:1;
[; ;ethernet_drivers\ethernet_driver.h: 79: unsigned bufferBusy:1;
[; ;ethernet_drivers\ethernet_driver.h: 80: unsigned :2;
[; ;ethernet_drivers\ethernet_driver.h: 81: uint16_t TXPacketSize;
[; ;ethernet_drivers\ethernet_driver.h: 82: uint16_t saveRDPT;
[; ;ethernet_drivers\ethernet_driver.h: 83: uint16_t saveWRPT;
[; ;ethernet_drivers\ethernet_driver.h: 84: } ethernetDriver_t;
[; ;ethernet_drivers\ethernet_driver.h: 86: extern volatile ethernetDriver_t ethData;
[; ;ethernet_drivers\ethernet_driver.h: 92: void ETH_Init(void);
[; ;ethernet_drivers\ethernet_driver.h: 93: void ETH_EventHandler(void);
[; ;ethernet_drivers\ethernet_driver.h: 94: void ETH_NextPacketUpdate();
[; ;ethernet_drivers\ethernet_driver.h: 95: void ETH_ResetReceiver(void);
[; ;ethernet_drivers\ethernet_driver.h: 96: void ETH_SendSystemReset(void);
[; ;ethernet_drivers\ethernet_driver.h: 99: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 100: uint8_t ETH_Read8(void);
[; ;ethernet_drivers\ethernet_driver.h: 101: uint16_t ETH_Read16(void);
[; ;ethernet_drivers\ethernet_driver.h: 102: uint32_t ETH_Read32(void);
[; ;ethernet_drivers\ethernet_driver.h: 103: void ETH_Dump(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 104: void ETH_Flush(void);
[; ;ethernet_drivers\ethernet_driver.h: 106: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_drivers\ethernet_driver.h: 107: uint16_t ETH_WriteBlock(void *, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 108: void ETH_Write8(uint8_t);
[; ;ethernet_drivers\ethernet_driver.h: 109: void ETH_Write16(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 110: void ETH_Write24(uint24_t data);
[; ;ethernet_drivers\ethernet_driver.h: 111: void ETH_Write32(uint32_t);
[; ;ethernet_drivers\ethernet_driver.h: 112: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 113: error_msg ETH_Copy(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 114: error_msg ETH_Send(void);
[; ;ethernet_drivers\ethernet_driver.h: 116: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 117: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 119: void ETH_GetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 120: void ETH_SetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 122: void ETH_SaveRDPT(void);
[; ;ethernet_drivers\ethernet_driver.h: 124: void ETH_ResetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 125: uint16_t ETH_GetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 127: bool ETH_CheckLinkUp();
[; ;include\ipv4.h: 63: extern uint32_t ipv4Address;
[; ;include\ipv4.h: 64: extern uint32_t dstIPv4Address;
[; ;include\ipv4.h: 65: extern uint32_t ipv4Gateway;
[; ;include\ipv4.h: 66: extern uint8_t gatewayMAC[6];
[; ;include\ipv4.h: 67: extern uint32_t ipv4DNS[2];
[; ;include\ipv4.h: 68: extern uint32_t ipv4SubnetMask;
[; ;include\ipv4.h: 69: extern uint32_t ipv4Router;
[; ;include\ipv4.h: 70: extern ipv4Header_t ipv4Header;
[; ;include\ipv4.h: 79: void IPV4_Init(void);
[; ;include\ipv4.h: 86: error_msg IPV4_Packet(void);
[; ;include\ipv4.h: 103: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;include\ipv4.h: 111: uint32_t IPV4_GetMyIP(void);
[; ;include\ipv4.h: 122: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;include\ipv4.h: 136: error_msg IPV4_Send(uint16_t payloadLength);
"67 ../../TCPIP Library/include\tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 56 `c
-> 70 `c
-> 57 `c
-> 55 `c
-> 74 `c
-> 54 `c
-> 48 `c
-> 32 `c
-> 69 `c
-> 84 `c
-> 72 `c
-> 69 `c
-> 82 `c
-> 78 `c
-> 69 `c
-> 84 `c
-> 0 `c
..
]
[; ;include\tcpip_config.h: 67: const char dhcpName[] = "PIC18F97J60 ETHERNET";
[; ;include\dhcp_client.h: 58: typedef enum
[; ;include\dhcp_client.h: 59: {
[; ;include\dhcp_client.h: 60: DHCP_DISCOVER = 1,
[; ;include\dhcp_client.h: 61: DHCP_OFFER, DHCP_REQUEST, DHCP_DECLINE, DHCP_ACK, DHCP_NACK, DHCP_RELEASE,
[; ;include\dhcp_client.h: 62: DHCP_INFORM, DHCP_FORCERENEW, DHCP_LEASEQUERY, DHCP_LEASEUNASSIGNED, DHCP_LEASEUNKNOWN,
[; ;include\dhcp_client.h: 63: DHCP_LEASEACTIVE, DHCP_BULKLEASEQUERY, DHCP_LEASEQUERYDONE
[; ;include\dhcp_client.h: 64: }dhcp_type;
[; ;include\dhcp_client.h: 66: typedef enum
[; ;include\dhcp_client.h: 67: {
[; ;include\dhcp_client.h: 68: INIT = 1, INIT_REBOOT, SELECTING, REQUESTING, BOUND
[; ;include\dhcp_client.h: 69: }dhcp_client_state;
[; ;include\dhcp_client.h: 81: void DHCP_Request(dhcp_type);
[; ;include\dhcp_client.h: 90: void DHCP_Handler(int);
[; ;include\dhcp_client.h: 96: void DHCP_Manage(void);
[; ;include\dhcp_client.h: 104: void DHCP_WriteZeros(uint16_t length);
[; ;include\tcpv4.h: 65: typedef enum
[; ;include\tcpv4.h: 66: {
[; ;include\tcpv4.h: 67: CLOSED = 0,
[; ;include\tcpv4.h: 68: LISTEN, SYN_SENT, SYN_RECEIVED, ESTABLISHED, FIN_WAIT_1, FIN_WAIT_2, CLOSE_WAIT, CLOSING, LAST_ACK, TIME_WAIT,
[; ;include\tcpv4.h: 69: }tcp_fsm_states_t;
[; ;include\tcpv4.h: 71: typedef enum
[; ;include\tcpv4.h: 72: {
[; ;include\tcpv4.h: 73: CLOSE = 0,
[; ;include\tcpv4.h: 74: ACTIVE_OPEN, PASIVE_OPEN, RCV_SYN, RCV_ACK, RCV_SYNACK, RCV_FIN, RCV_FINACK, RX_PACKET, RCV_RST, RCV_RSTACK,
[; ;include\tcpv4.h: 75: RCV_PSHACK, TIMEOUT,
[; ;include\tcpv4.h: 76: NOP
[; ;include\tcpv4.h: 77: }tcpEvent_t;
[; ;include\tcpv4.h: 80: typedef enum
[; ;include\tcpv4.h: 81: {
[; ;include\tcpv4.h: 82: NOT_A_SOCKET = 0,
[; ;include\tcpv4.h: 83: SOCKET_CLOSED,
[; ;include\tcpv4.h: 84: SOCKET_IN_PROGRESS,
[; ;include\tcpv4.h: 85: SOCKET_CONNECTED,
[; ;include\tcpv4.h: 86: SOCKET_CLOSING
[; ;include\tcpv4.h: 87: } socketState_t;
[; ;include\tcpv4.h: 89: typedef struct
[; ;include\tcpv4.h: 90: {
[; ;include\tcpv4.h: 91: uint32_t localIP;
[; ;include\tcpv4.h: 92: uint16_t localPort;
[; ;include\tcpv4.h: 93: uint32_t remoteIP;
[; ;include\tcpv4.h: 94: uint16_t remotePort;
[; ;include\tcpv4.h: 95: }tcpSocket_t;
[; ;include\tcpv4.h: 97: typedef enum
[; ;include\tcpv4.h: 98: {
[; ;include\tcpv4.h: 99: NO_BUFF = 0,
[; ;include\tcpv4.h: 100: RX_BUFF_IN_USE,
[; ;include\tcpv4.h: 101: TX_BUFF_IN_USE
[; ;include\tcpv4.h: 102: }tcpBufferState_t;
[; ;include\tcpv4.h: 104: typedef struct
[; ;include\tcpv4.h: 105: {
[; ;include\tcpv4.h: 106: uint16_t localPort;
[; ;include\tcpv4.h: 108: uint32_t destIP;
[; ;include\tcpv4.h: 109: uint16_t destPort;
[; ;include\tcpv4.h: 111: uint32_t remoteSeqno;
[; ;include\tcpv4.h: 112: uint32_t remoteAck;
[; ;include\tcpv4.h: 114: uint32_t localSeqno;
[; ;include\tcpv4.h: 115: uint32_t localLastAck;
[; ;include\tcpv4.h: 117: uint16_t remoteWnd;
[; ;include\tcpv4.h: 118: uint16_t localWnd;
[; ;include\tcpv4.h: 120: uint16_t mss;
[; ;include\tcpv4.h: 122: uint8_t *rxBufferStart;
[; ;include\tcpv4.h: 123: uint8_t *rxBufferPtr;
[; ;include\tcpv4.h: 124: tcpBufferState_t rxBufState;
[; ;include\tcpv4.h: 126: uint8_t *txBufferStart;
[; ;include\tcpv4.h: 127: uint8_t *txBufferPtr;
[; ;include\tcpv4.h: 128: uint16_t bytesToSend;
[; ;include\tcpv4.h: 129: tcpBufferState_t txBufState;
[; ;include\tcpv4.h: 131: tcp_fsm_states_t fsmState;
[; ;include\tcpv4.h: 132: tcpEvent_t connectionEvent;
[; ;include\tcpv4.h: 135: void *nextTCB;
[; ;include\tcpv4.h: 136: void *prevTCB;
[; ;include\tcpv4.h: 138: uint16_t timeout;
[; ;include\tcpv4.h: 139: uint16_t timeoutReloadValue;
[; ;include\tcpv4.h: 140: uint8_t timeoutsCount;
[; ;include\tcpv4.h: 141: uint8_t flags;
[; ;include\tcpv4.h: 143: socketState_t socketState;
[; ;include\tcpv4.h: 144: }tcpTCB_t;
[; ;include\tcpv4.h: 146: typedef enum
[; ;include\tcpv4.h: 147: {
[; ;include\tcpv4.h: 148: TCP_EOP = 0u,
[; ;include\tcpv4.h: 149: TCP_NOP = 1u,
[; ;include\tcpv4.h: 150: TCP_MSS = 2u,
[; ;include\tcpv4.h: 197: }tcp_options_t;
[; ;include\tcpv4.h: 213: void TCP_Init(void);
[; ;include\tcpv4.h: 229: tcbError_t TCP_SocketInit(tcpTCB_t *tcb_ptr);
[; ;include\tcpv4.h: 244: tcbError_t TCP_SocketRemove(tcpTCB_t *tcb_ptr);
[; ;include\tcpv4.h: 258: socketState_t TCP_SocketPoll(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 275: bool TCP_Bind(tcpTCB_t *tcbPtr, uint16_t port);
[; ;include\tcpv4.h: 293: bool TCP_Listen(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 309: bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr);
[; ;include\tcpv4.h: 323: bool TCP_Close(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 338: bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);
[; ;include\tcpv4.h: 353: bool TCP_SendDone(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 372: bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);
[; ;include\tcpv4.h: 386: int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 399: int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr);
[; ;include\tcpv4.h: 411: void TCP_Update(void);
[; ;include\network.h: 62: void Network_Init(void);
[; ;include\network.h: 63: void Network_Read(void);
[; ;include\network.h: 64: void Network_Manage(void);
[; ;include\network.h: 65: void Network_WaitForLink(void);
[; ;include\syslog.h: 47: void SYSLOG_Init(void);
[; ;include\syslog.h: 48: void SYSLOG_Write(const char *message);
"52 ../../TCPIP Library/source/tcpv4.c
[v _tcbList `*S27 ~T0 @X0 1 e ]
[; ;tcpv4.c: 52: tcpTCB_t *tcbList;
"53
[v _tcbListSize `c ~T0 @X0 1 e ]
[; ;tcpv4.c: 53: socklistsize_t tcbListSize;
"54
[v _currentTCB `*S27 ~T0 @X0 1 e ]
[; ;tcpv4.c: 54: tcpTCB_t *currentTCB;
"56
[v _tcpHeader `S12 ~T0 @X0 1 s ]
[; ;tcpv4.c: 56: static tcpHeader_t tcpHeader;
"57
[v _nextAvailablePort `ui ~T0 @X0 1 s ]
[; ;tcpv4.c: 57: static uint16_t nextAvailablePort;
"58
[v _nextSequenceNumber `ul ~T0 @X0 1 s ]
[; ;tcpv4.c: 58: static uint32_t nextSequenceNumber;
"60
[v _receivedRemoteAddress `ul ~T0 @X0 1 s ]
[; ;tcpv4.c: 60: static uint32_t receivedRemoteAddress;
"61
[v _rcvPayloadLen `ui ~T0 @X0 1 s ]
[; ;tcpv4.c: 61: static uint16_t rcvPayloadLen;
"62
[v _tcpMss `ui ~T0 @X0 1 s ]
[; ;tcpv4.c: 62: static uint16_t tcpMss;
[; ;tcpv4.c: 70: static bool TCP_FiniteStateMachine(void);
"80
[v _TCB_Insert `(v ~T0 @X0 1 sf1`*S27 ]
"81
{
[; ;tcpv4.c: 80: static void TCB_Insert(tcpTCB_t *ptr)
[; ;tcpv4.c: 81: {
[e :U _TCB_Insert ]
"80
[v _ptr `*S27 ~T0 @X0 1 r1 ]
"81
[f ]
[; ;tcpv4.c: 84: if(tcbList != (0))
"84
[e $ ! != _tcbList -> -> 0 `i `*S27 29  ]
[; ;tcpv4.c: 85: {
"85
{
[; ;tcpv4.c: 87: tcbList->prevTCB = ptr;
"87
[e = . *U _tcbList 20 -> _ptr `*v ]
"88
}
[e :U 29 ]
[; ;tcpv4.c: 88: }
[; ;tcpv4.c: 89: ptr->nextTCB = tcbList;
"89
[e = . *U _ptr 19 -> _tcbList `*v ]
[; ;tcpv4.c: 90: tcbList = ptr;
"90
[e = _tcbList _ptr ]
[; ;tcpv4.c: 91: ptr->prevTCB = (0);
"91
[e = . *U _ptr 20 -> -> 0 `i `*v ]
[; ;tcpv4.c: 92: tcbListSize ++;
"92
[e ++ _tcbListSize -> -> 1 `i `c ]
[; ;tcpv4.c: 93: }
"93
[e :UE 28 ]
}
"104
[v _TCB_Remove `(v ~T0 @X0 1 sf1`*S27 ]
"105
{
[; ;tcpv4.c: 104: static void TCB_Remove(tcpTCB_t *ptr)
[; ;tcpv4.c: 105: {
[e :U _TCB_Remove ]
"104
[v _ptr `*S27 ~T0 @X0 1 r1 ]
"105
[f ]
[; ;tcpv4.c: 106: if(tcbListSize > 1)
"106
[e $ ! > -> _tcbListSize `i -> 1 `i 31  ]
[; ;tcpv4.c: 107: {
"107
{
[; ;tcpv4.c: 109: if(ptr->prevTCB == (0))
"109
[e $ ! == . *U _ptr 20 -> -> 0 `i `*v 32  ]
[; ;tcpv4.c: 110: {
"110
{
[; ;tcpv4.c: 111: tcbList = ptr->nextTCB;
"111
[e = _tcbList -> . *U _ptr 19 `*S27 ]
[; ;tcpv4.c: 112: ((tcpTCB_t *)(ptr->nextTCB))->prevTCB = (0);
"112
[e = . *U -> . *U _ptr 19 `*S27 20 -> -> 0 `i `*v ]
"113
}
[; ;tcpv4.c: 113: } else
[e $U 33  ]
[e :U 32 ]
[; ;tcpv4.c: 114: {
"114
{
[; ;tcpv4.c: 115: ((tcpTCB_t *)(ptr->prevTCB))->nextTCB = ptr->nextTCB;
"115
[e = . *U -> . *U _ptr 20 `*S27 19 . *U _ptr 19 ]
[; ;tcpv4.c: 116: ((tcpTCB_t *)(ptr->nextTCB))->prevTCB = ptr->prevTCB;
"116
[e = . *U -> . *U _ptr 19 `*S27 20 . *U _ptr 20 ]
"117
}
[e :U 33 ]
[; ;tcpv4.c: 117: }
[; ;tcpv4.c: 118: tcbListSize --;
"118
[e -- _tcbListSize -> -> 1 `i `c ]
"119
}
[; ;tcpv4.c: 119: }
[e $U 34  ]
"120
[e :U 31 ]
[; ;tcpv4.c: 120: else if(tcbListSize==1)
[e $ ! == -> _tcbListSize `i -> 1 `i 35  ]
[; ;tcpv4.c: 121: {
"121
{
[; ;tcpv4.c: 122: tcbList = (0);
"122
[e = _tcbList -> -> 0 `i `*S27 ]
"123
}
[e :U 35 ]
"124
[e :U 34 ]
[; ;tcpv4.c: 123: }
[; ;tcpv4.c: 124: }
[e :UE 30 ]
}
"134
[v _TCB_Reset `(v ~T0 @X0 1 sf1`*S27 ]
"135
{
[; ;tcpv4.c: 134: static void TCB_Reset(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 135: {
[e :U _TCB_Reset ]
"134
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"135
[f ]
[; ;tcpv4.c: 136: tcbPtr->destIP = 0;
"136
[e = . *U _tcbPtr 1 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 137: tcbPtr->destPort = 0;
"137
[e = . *U _tcbPtr 2 -> -> 0 `i `ui ]
[; ;tcpv4.c: 138: tcbPtr->localSeqno = 0;
"138
[e = . *U _tcbPtr 5 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 139: tcbPtr->localLastAck = 0;
"139
[e = . *U _tcbPtr 6 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 140: tcbPtr->remoteSeqno = 0;
"140
[e = . *U _tcbPtr 3 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 141: tcbPtr->remoteAck = 0;
"141
[e = . *U _tcbPtr 4 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 142: tcbPtr->remoteWnd = 0;
"142
[e = . *U _tcbPtr 7 -> -> 0 `i `ui ]
[; ;tcpv4.c: 144: tcbPtr->timeout = 0;
"144
[e = . *U _tcbPtr 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 145: tcbPtr->timeoutReloadValue = 0;
"145
[e = . *U _tcbPtr 22 -> -> 0 `i `ui ]
[; ;tcpv4.c: 146: tcbPtr->timeoutsCount = 0;
"146
[e = . *U _tcbPtr 23 -> -> 0 `i `uc ]
[; ;tcpv4.c: 147: tcbPtr->flags = 0;
"147
[e = . *U _tcbPtr 24 -> -> 0 `i `uc ]
[; ;tcpv4.c: 149: tcbPtr->localPort = 0;
"149
[e = . *U _tcbPtr 0 -> -> 0 `i `ui ]
[; ;tcpv4.c: 150: tcbPtr->socketState = SOCKET_CLOSED;
"150
[e = . *U _tcbPtr 25 . `E667 1 ]
[; ;tcpv4.c: 151: }
"151
[e :UE 36 ]
}
"162
[v _TCB_Check `(uc ~T0 @X0 1 sf1`*S27 ]
"163
{
[; ;tcpv4.c: 162: static bool TCB_Check(tcpTCB_t *ptr)
[; ;tcpv4.c: 163: {
[e :U _TCB_Check ]
"162
[v _ptr `*S27 ~T0 @X0 1 r1 ]
"163
[f ]
"164
[v _tcbPtr `*S27 ~T0 @X0 1 a ]
"165
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 164: tcpTCB_t *tcbPtr;
[; ;tcpv4.c: 165: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
"166
[v _count `c ~T0 @X0 1 a ]
[; ;tcpv4.c: 166: socklistsize_t count = 0;
[e = _count -> -> 0 `i `c ]
[; ;tcpv4.c: 168: if((tcbList != (0)) && (ptr != (0)))
"168
[e $ ! && != _tcbList -> -> 0 `i `*S27 != _ptr -> -> 0 `i `*S27 38  ]
[; ;tcpv4.c: 169: {
"169
{
[; ;tcpv4.c: 171: tcbPtr = tcbList;
"171
[e = _tcbPtr _tcbList ]
[; ;tcpv4.c: 172: while((tcbPtr != (0)) && (count < tcbListSize))
"172
[e $U 39  ]
[e :U 40 ]
[; ;tcpv4.c: 173: {
"173
{
[; ;tcpv4.c: 174: if (tcbPtr == ptr)
"174
[e $ ! == _tcbPtr _ptr 42  ]
[; ;tcpv4.c: 175: {
"175
{
[; ;tcpv4.c: 176: ret = 1;
"176
[e = _ret -> -> 1 `i `uc ]
[; ;tcpv4.c: 177: break;
"177
[e $U 41  ]
"178
}
[; ;tcpv4.c: 178: }
[e $U 43  ]
"179
[e :U 42 ]
[; ;tcpv4.c: 179: else
[; ;tcpv4.c: 180: {
"180
{
[; ;tcpv4.c: 181: tcbPtr = tcbPtr->nextTCB;
"181
[e = _tcbPtr -> . *U _tcbPtr 19 `*S27 ]
[; ;tcpv4.c: 182: count ++;
"182
[e ++ _count -> -> 1 `i `c ]
"183
}
[e :U 43 ]
"184
}
[e :U 39 ]
"172
[e $ && != _tcbPtr -> -> 0 `i `*S27 < -> _count `i -> _tcbListSize `i 40  ]
[e :U 41 ]
"185
}
[e :U 38 ]
[; ;tcpv4.c: 183: }
[; ;tcpv4.c: 184: }
[; ;tcpv4.c: 185: }
[; ;tcpv4.c: 186: return ret;
"186
[e ) _ret ]
[e $UE 37  ]
[; ;tcpv4.c: 187: }
"187
[e :UE 37 ]
}
"200
[v _TCP_Snd `(uc ~T0 @X0 1 sf1`*S27 ]
"201
{
[; ;tcpv4.c: 200: static bool TCP_Snd(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 201: {
[e :U _TCP_Snd ]
"200
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"201
[f ]
"202
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 202: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
"203
[v _txHeader `S12 ~T0 @X0 1 a ]
"204
[v _payloadLength `ui ~T0 @X0 1 a ]
"205
[v _cksm `ui ~T0 @X0 1 a ]
"206
[v _tcpDataLength `ui ~T0 @X0 1 a ]
"207
[v _data `*uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 203: tcpHeader_t txHeader;
[; ;tcpv4.c: 204: uint16_t payloadLength;
[; ;tcpv4.c: 205: uint16_t cksm;
[; ;tcpv4.c: 206: uint16_t tcpDataLength;
[; ;tcpv4.c: 207: uint8_t *data;
[; ;tcpv4.c: 209: txHeader.sourcePort = ((((uint16_t)tcbPtr->localPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->localPort & (uint16_t)0x00FF) << 8));
"209
[e = . _txHeader 0 | >> & . *U _tcbPtr 0 -> 65280 `ui -> 8 `i << & . *U _tcbPtr 0 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 210: txHeader.destPort = ((((uint16_t)tcbPtr->destPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->destPort & (uint16_t)0x00FF) << 8));
"210
[e = . _txHeader 1 | >> & . *U _tcbPtr 2 -> 65280 `ui -> 8 `i << & . *U _tcbPtr 2 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 212: txHeader.sequenceNumber = ((((uint32_t)tcbPtr->localSeqno&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr->localSeqno&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->localSeqno&(uint32_
"212
[e = . _txHeader 2 | | | >> & . *U _tcbPtr 5 -> -16777216 `ul -> 24 `i >> & . *U _tcbPtr 5 -> -> 16711680 `l `ul -> 8 `i << & . *U _tcbPtr 5 -> -> 65280 `ui `ul -> 8 `i << & . *U _tcbPtr 5 -> -> 255 `i `ul -> 24 `i ]
[; ;tcpv4.c: 214: txHeader.ackNumber = ((((uint32_t)tcbPtr->remoteAck&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcbPtr->remoteAck&(uint32_t)0x00000
"214
[e = . _txHeader 3 | | | >> & . *U _tcbPtr 4 -> -16777216 `ul -> 24 `i >> & . *U _tcbPtr 4 -> -> 16711680 `l `ul -> 8 `i << & . *U _tcbPtr 4 -> -> 65280 `ui `ul -> 8 `i << & . *U _tcbPtr 4 -> -> 255 `i `ul -> 24 `i ]
[; ;tcpv4.c: 216: txHeader.ns = 0;
"216
[e = . . . _txHeader 4 1 0 -> -> 0 `i `uc ]
[; ;tcpv4.c: 217: txHeader.reserved = 0;
"217
[e = . . . _txHeader 4 1 1 -> -> 0 `i `uc ]
[; ;tcpv4.c: 218: txHeader.dataOffset = 5;
"218
[e = . . . _txHeader 4 1 2 -> -> 5 `i `uc ]
[; ;tcpv4.c: 219: txHeader.windowSize = ((((uint16_t)tcbPtr->localWnd & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcbPtr->localWnd & (uint16_t)0x00FF) << 8));
"219
[e = . _txHeader 6 | >> & . *U _tcbPtr 8 -> 65280 `ui -> 8 `i << & . *U _tcbPtr 8 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 220: txHeader.checksum = 0;
"220
[e = . _txHeader 7 -> -> 0 `i `ui ]
[; ;tcpv4.c: 221: txHeader.urgentPtr = 0;
"221
[e = . _txHeader 8 -> -> 0 `i `ui ]
[; ;tcpv4.c: 223: if ((tcbPtr->flags) & (0x02U | 0x04U))
"223
[e $ ! != & -> . *U _tcbPtr 24 `ui | -> 2 `ui -> 4 `ui -> -> 0 `i `ui 45  ]
[; ;tcpv4.c: 224: {
"224
{
[; ;tcpv4.c: 225: tcpDataLength = 0;
"225
[e = _tcpDataLength -> -> 0 `i `ui ]
"226
}
[; ;tcpv4.c: 226: } else
[e $U 46  ]
[e :U 45 ]
[; ;tcpv4.c: 227: {
"227
{
[; ;tcpv4.c: 228: tcpDataLength = tcbPtr->bytesToSend;
"228
[e = _tcpDataLength . *U _tcbPtr 15 ]
[; ;tcpv4.c: 230: if (tcpDataLength != 0)
"230
[e $ ! != _tcpDataLength -> -> 0 `i `ui 47  ]
[; ;tcpv4.c: 231: {
"231
{
[; ;tcpv4.c: 232: if(tcpDataLength > tcbPtr->remoteWnd)
"232
[e $ ! > _tcpDataLength . *U _tcbPtr 7 48  ]
[; ;tcpv4.c: 233: {
"233
{
[; ;tcpv4.c: 234: tcpDataLength = tcbPtr->remoteWnd;
"234
[e = _tcpDataLength . *U _tcbPtr 7 ]
"235
}
[e :U 48 ]
[; ;tcpv4.c: 235: }
[; ;tcpv4.c: 237: if(tcpDataLength > tcbPtr->mss)
"237
[e $ ! > _tcpDataLength . *U _tcbPtr 9 49  ]
[; ;tcpv4.c: 238: {
"238
{
[; ;tcpv4.c: 239: tcpDataLength = tcbPtr->mss;
"239
[e = _tcpDataLength . *U _tcbPtr 9 ]
"240
}
[e :U 49 ]
[; ;tcpv4.c: 240: }
[; ;tcpv4.c: 241: data = tcbPtr->txBufferPtr;
"241
[e = _data . *U _tcbPtr 14 ]
[; ;tcpv4.c: 244: tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
"244
[e = . *U _tcbPtr 14 + . *U _tcbPtr 14 * -> _tcpDataLength `ux -> -> # *U . *U _tcbPtr 14 `ui `ux ]
[; ;tcpv4.c: 245: tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
"245
[e = . *U _tcbPtr 15 - . *U _tcbPtr 15 _tcpDataLength ]
[; ;tcpv4.c: 247: if (tcbPtr->bytesToSend == 0)
"247
[e $ ! == . *U _tcbPtr 15 -> -> 0 `i `ui 50  ]
[; ;tcpv4.c: 248: {
"248
{
[; ;tcpv4.c: 249: tcbPtr->flags |= 0x08U;
"249
[e =| . *U _tcbPtr 24 -> -> 8 `ui `uc ]
"250
}
[e :U 50 ]
"251
}
[e :U 47 ]
"252
}
[e :U 46 ]
[; ;tcpv4.c: 250: }
[; ;tcpv4.c: 251: }
[; ;tcpv4.c: 252: }
[; ;tcpv4.c: 254: txHeader.flags = tcbPtr->flags;
"254
[e = . . _txHeader 5 0 . *U _tcbPtr 24 ]
[; ;tcpv4.c: 255: payloadLength = sizeof(tcpHeader_t) + tcpDataLength;
"255
[e = _payloadLength + -> # `S12 `ui _tcpDataLength ]
[; ;tcpv4.c: 257: ret = IPv4_Start(tcbPtr->destIP, TCP);
"257
[e = _ret -> ( _IPv4_Start (2 , . *U _tcbPtr 1 . `E310 6 `uc ]
[; ;tcpv4.c: 258: if (ret)
"258
[e $ ! != -> _ret `i -> -> -> 0 `i `uc `i 51  ]
[; ;tcpv4.c: 259: {
"259
{
[; ;tcpv4.c: 260: ETH_WriteBlock((uint8_t *) &txHeader, sizeof(tcpHeader_t));
"260
[e ( _ETH_WriteBlock (2 , -> -> &U _txHeader `*uc `*v -> # `S12 `ui ]
[; ;tcpv4.c: 262: if (tcpDataLength > 0)
"262
[e $ ! > _tcpDataLength -> -> 0 `i `ui 52  ]
[; ;tcpv4.c: 263: {
"263
{
[; ;tcpv4.c: 264: ETH_WriteBlock( data, tcpDataLength);
"264
[e ( _ETH_WriteBlock (2 , -> _data `*v _tcpDataLength ]
"265
}
[e :U 52 ]
[; ;tcpv4.c: 265: }
[; ;tcpv4.c: 267: cksm = payloadLength + TCP;
"267
[e = _cksm + _payloadLength -> . `E310 6 `ui ]
[; ;tcpv4.c: 269: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, payloadLength + 8, cksm);
"269
[e = _cksm ( _ETH_TxComputeChecksum (3 , , - + -> # `S4 `ui -> # `S6 `ui -> -> 8 `i `ui + _payloadLength -> -> 8 `i `ui _cksm ]
[; ;tcpv4.c: 270: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + (int)(((char*)&((tcpHeader_t *)1)->checksum)-1));
"270
[e ( _ETH_Insert (3 , , -> &U _cksm `*uc -> -> 2 `i `ui + + -> # `S4 `ui -> # `S6 `ui -> -> - -> &U . *U -> -> 1 `i `*S12 7 `*uc * -> -> 1 `i `x -> -> # *U -> &U . *U -> -> 1 `i `*S12 7 `*uc `i `x `i `ui ]
[; ;tcpv4.c: 272: ret = IPV4_Send(payloadLength);
"272
[e = _ret -> ( _IPV4_Send (1 _payloadLength `uc ]
"273
}
[e :U 51 ]
[; ;tcpv4.c: 273: }
[; ;tcpv4.c: 277: if (ret == 0)
"277
[e $ ! == -> _ret `i -> 0 `i 53  ]
[; ;tcpv4.c: 278: {
"278
{
[; ;tcpv4.c: 281: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
"281
[e = . *U _tcbPtr 23 -> + -> . *U _tcbPtr 23 `i -> 1 `i `uc ]
[; ;tcpv4.c: 283: if (tcbPtr->timeout == 0)
"283
[e $ ! == . *U _tcbPtr 21 -> -> 0 `i `ui 54  ]
[; ;tcpv4.c: 284: {
"284
{
[; ;tcpv4.c: 285: tcbPtr->timeout = ((unsigned long)1*2);
"285
[e = . *U _tcbPtr 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
"286
}
[e :U 54 ]
"287
}
[; ;tcpv4.c: 286: }
[; ;tcpv4.c: 287: }
[e $U 55  ]
"288
[e :U 53 ]
[; ;tcpv4.c: 288: else
[; ;tcpv4.c: 289: {
"289
{
[; ;tcpv4.c: 291: tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
"291
[e = . *U _tcbPtr 5 + . *U _tcbPtr 5 -> _tcpDataLength `ul ]
[; ;tcpv4.c: 292: ;
"293
}
[e :U 55 ]
[; ;tcpv4.c: 293: }
[; ;tcpv4.c: 295: return ret;
"295
[e ) _ret ]
[e $UE 44  ]
[; ;tcpv4.c: 296: }
"296
[e :UE 44 ]
}
"310
[v _TCP_PayloadSave `(uc ~T0 @X0 1 ef1`ui ]
"311
{
[; ;tcpv4.c: 310: bool TCP_PayloadSave(uint16_t len)
[; ;tcpv4.c: 311: {
[e :U _TCP_PayloadSave ]
"310
[v _len `ui ~T0 @X0 1 r1 ]
"311
[f ]
"312
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 312: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
"313
[v _buffer_size `ui ~T0 @X0 1 a ]
[; ;tcpv4.c: 313: uint16_t buffer_size;
[; ;tcpv4.c: 316: if (currentTCB->rxBufState == RX_BUFF_IN_USE)
"316
[e $ ! == -> . *U _currentTCB 12 `i -> . `E680 1 `i 57  ]
[; ;tcpv4.c: 317: {
"317
{
[; ;tcpv4.c: 319: if (currentTCB->localWnd >= len)
"319
[e $ ! >= . *U _currentTCB 8 _len 58  ]
[; ;tcpv4.c: 320: {
"320
{
[; ;tcpv4.c: 321: buffer_size = len;
"321
[e = _buffer_size _len ]
"322
}
[; ;tcpv4.c: 322: }else
[e $U 59  ]
[e :U 58 ]
[; ;tcpv4.c: 323: {
"323
{
[; ;tcpv4.c: 324: buffer_size = currentTCB->localWnd;
"324
[e = _buffer_size . *U _currentTCB 8 ]
"325
}
[e :U 59 ]
[; ;tcpv4.c: 325: }
[; ;tcpv4.c: 327: ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
"327
[e ( _ETH_ReadBlock (2 , -> . *U _currentTCB 11 `*v _buffer_size ]
[; ;tcpv4.c: 328: currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
"328
[e = . *U _currentTCB 11 + . *U _currentTCB 11 * -> _buffer_size `ux -> -> # *U . *U _currentTCB 11 `ui `ux ]
[; ;tcpv4.c: 331: currentTCB->localWnd = currentTCB->localWnd - buffer_size;
"331
[e = . *U _currentTCB 8 - . *U _currentTCB 8 _buffer_size ]
[; ;tcpv4.c: 332: currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
"332
[e = . *U _currentTCB 4 + . *U _currentTCB 3 -> _buffer_size `ul ]
[; ;tcpv4.c: 335: currentTCB->flags = 0x10U;
"335
[e = . *U _currentTCB 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 336: TCP_Snd(currentTCB);
"336
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 337: ret = 1;
"337
[e = _ret -> -> 1 `i `uc ]
"338
}
[e :U 57 ]
[; ;tcpv4.c: 338: }
[; ;tcpv4.c: 339: return ret;
"339
[e ) _ret ]
[e $UE 56  ]
[; ;tcpv4.c: 340: }
"340
[e :UE 56 ]
}
"356
[v _TCP_ParseTCPOptions `(uc ~T0 @X0 1 sf ]
"357
{
[; ;tcpv4.c: 356: static bool TCP_ParseTCPOptions(void)
[; ;tcpv4.c: 357: {
[e :U _TCP_ParseTCPOptions ]
[f ]
"358
[v _opt `uc ~T0 @X0 1 a ]
"359
[v _tcpOptionsSize `ui ~T0 @X0 1 a ]
"360
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 358: uint8_t opt;
[; ;tcpv4.c: 359: uint16_t tcpOptionsSize;
[; ;tcpv4.c: 360: bool ret;
[; ;tcpv4.c: 362: ret = 0;
"362
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 364: tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeader_t));
"364
[e = _tcpOptionsSize - -> << -> . . . _tcpHeader 4 1 2 `i -> 2 `i `ui -> # `S12 `ui ]
[; ;tcpv4.c: 366: if (tcpOptionsSize > 0)
"366
[e $ ! > _tcpOptionsSize -> -> 0 `i `ui 61  ]
[; ;tcpv4.c: 367: {
"367
{
[; ;tcpv4.c: 370: tcpMss = 536;
"370
[e = _tcpMss -> -> 536 `i `ui ]
[; ;tcpv4.c: 372: if(tcpHeader.syn)
"372
[e $ ! != -> . . . _tcpHeader 5 1 1 `i -> -> -> 0 `i `uc `i 62  ]
[; ;tcpv4.c: 373: {
"373
{
[; ;tcpv4.c: 375: while(tcpOptionsSize--)
"375
[e $U 63  ]
[e :U 64 ]
[; ;tcpv4.c: 376: {
"376
{
[; ;tcpv4.c: 377: opt = ETH_Read8();
"377
[e = _opt ( _ETH_Read8 ..  ]
[; ;tcpv4.c: 378: switch (opt)
"378
[e $U 67  ]
[; ;tcpv4.c: 379: {
"379
{
[; ;tcpv4.c: 380: case TCP_EOP:
"380
[e :U 68 ]
[; ;tcpv4.c: 382: if (tcpOptionsSize)
"382
[e $ ! != _tcpOptionsSize -> -> 0 `i `ui 69  ]
[; ;tcpv4.c: 383: {
"383
{
[; ;tcpv4.c: 385: ETH_Dump(tcpOptionsSize);
"385
[e ( _ETH_Dump (1 _tcpOptionsSize ]
[; ;tcpv4.c: 386: tcpOptionsSize = 0;
"386
[e = _tcpOptionsSize -> -> 0 `i `ui ]
"387
}
[e :U 69 ]
[; ;tcpv4.c: 387: }
[; ;tcpv4.c: 388: ret = 1;
"388
[e = _ret -> -> 1 `i `uc ]
[; ;tcpv4.c: 389: break;
"389
[e $U 66  ]
[; ;tcpv4.c: 390: case TCP_NOP:
"390
[e :U 70 ]
[; ;tcpv4.c: 392: break;
"392
[e $U 66  ]
[; ;tcpv4.c: 393: case TCP_MSS:
"393
[e :U 71 ]
[; ;tcpv4.c: 394: if (tcpOptionsSize >= 3)
"394
[e $ ! >= _tcpOptionsSize -> -> 3 `i `ui 72  ]
[; ;tcpv4.c: 395: {
"395
{
[; ;tcpv4.c: 396: opt = ETH_Read8();
"396
[e = _opt ( _ETH_Read8 ..  ]
[; ;tcpv4.c: 397: if (opt == 0x04)
"397
[e $ ! == -> _opt `i -> 4 `i 73  ]
[; ;tcpv4.c: 398: {
"398
{
[; ;tcpv4.c: 400: tcpMss = ETH_Read16();
"400
[e = _tcpMss ( _ETH_Read16 ..  ]
[; ;tcpv4.c: 402: tcpOptionsSize = tcpOptionsSize - 3;
"402
[e = _tcpOptionsSize - _tcpOptionsSize -> -> 3 `i `ui ]
[; ;tcpv4.c: 405: if (tcpMss > 1460u)
"405
[e $ ! > _tcpMss -> 1460 `ui 74  ]
[; ;tcpv4.c: 406: {
"406
{
[; ;tcpv4.c: 407: tcpMss = 1460u;
"407
[e = _tcpMss -> 1460 `ui ]
"408
}
[e :U 74 ]
[; ;tcpv4.c: 408: }
[; ;tcpv4.c: 410: ret = 1;
"410
[e = _ret -> -> 1 `i `uc ]
"411
}
[; ;tcpv4.c: 411: }else
[e $U 75  ]
[e :U 73 ]
[; ;tcpv4.c: 412: {
"412
{
[; ;tcpv4.c: 414: ;
[; ;tcpv4.c: 416: tcpOptionsSize = 0;
"416
[e = _tcpOptionsSize -> -> 0 `i `ui ]
"417
}
[e :U 75 ]
"418
}
[; ;tcpv4.c: 417: }
[; ;tcpv4.c: 418: }else
[e $U 76  ]
[e :U 72 ]
[; ;tcpv4.c: 419: {
"419
{
[; ;tcpv4.c: 421: tcpOptionsSize = 0;
"421
[e = _tcpOptionsSize -> -> 0 `i `ui ]
[; ;tcpv4.c: 422: ret = 0;
"422
[e = _ret -> -> 0 `i `uc ]
"423
}
[e :U 76 ]
[; ;tcpv4.c: 423: }
[; ;tcpv4.c: 424: break;
"424
[e $U 66  ]
[; ;tcpv4.c: 425: default:
"425
[e :U 77 ]
[; ;tcpv4.c: 426: ;
[; ;tcpv4.c: 427: opt = ETH_Read8();
"427
[e = _opt ( _ETH_Read8 ..  ]
[; ;tcpv4.c: 428: tcpOptionsSize--;
"428
[e -- _tcpOptionsSize -> -> 1 `i `ui ]
[; ;tcpv4.c: 430: if (opt > 1)
"430
[e $ ! > -> _opt `i -> 1 `i 78  ]
[; ;tcpv4.c: 431: {
"431
{
[; ;tcpv4.c: 433: opt = opt - 2;
"433
[e = _opt -> - -> _opt `i -> 2 `i `uc ]
[; ;tcpv4.c: 434: if (opt <= tcpOptionsSize)
"434
[e $ ! <= -> _opt `ui _tcpOptionsSize 79  ]
[; ;tcpv4.c: 435: {
"435
{
[; ;tcpv4.c: 437: ETH_Dump(opt);
"437
[e ( _ETH_Dump (1 -> _opt `ui ]
[; ;tcpv4.c: 438: tcpOptionsSize = tcpOptionsSize - opt;
"438
[e = _tcpOptionsSize - _tcpOptionsSize -> _opt `ui ]
[; ;tcpv4.c: 439: ret = 1;
"439
[e = _ret -> -> 1 `i `uc ]
"440
}
[; ;tcpv4.c: 440: }else
[e $U 80  ]
[e :U 79 ]
[; ;tcpv4.c: 441: {
"441
{
[; ;tcpv4.c: 442: ;
[; ;tcpv4.c: 444: tcpOptionsSize = 0;
"444
[e = _tcpOptionsSize -> -> 0 `i `ui ]
[; ;tcpv4.c: 445: ret = 0;
"445
[e = _ret -> -> 0 `i `uc ]
"446
}
[e :U 80 ]
"447
}
[; ;tcpv4.c: 446: }
[; ;tcpv4.c: 447: }else
[e $U 81  ]
[e :U 78 ]
[; ;tcpv4.c: 448: {
"448
{
[; ;tcpv4.c: 449: ;
[; ;tcpv4.c: 452: tcpOptionsSize = 0;
"452
[e = _tcpOptionsSize -> -> 0 `i `ui ]
[; ;tcpv4.c: 453: ret = 0;
"453
[e = _ret -> -> 0 `i `uc ]
"454
}
[e :U 81 ]
[; ;tcpv4.c: 454: }
[; ;tcpv4.c: 455: break;
"455
[e $U 66  ]
"456
}
[; ;tcpv4.c: 456: }
[e $U 66  ]
"378
[e :U 67 ]
[e [\ _opt , $ -> . `E713 0 `uc 68
 , $ -> . `E713 1 `uc 70
 , $ -> . `E713 2 `uc 71
 77 ]
"456
[e :U 66 ]
"457
}
[e :U 63 ]
"375
[e $ != -- _tcpOptionsSize -> -> 1 `i `ui -> -> 0 `i `ui 64  ]
[e :U 65 ]
"458
}
[; ;tcpv4.c: 457: }
[; ;tcpv4.c: 458: }else
[e $U 82  ]
[e :U 62 ]
[; ;tcpv4.c: 459: {
"459
{
[; ;tcpv4.c: 460: ETH_Dump(tcpOptionsSize);
"460
[e ( _ETH_Dump (1 _tcpOptionsSize ]
[; ;tcpv4.c: 461: ret = 1;
"461
[e = _ret -> -> 1 `i `uc ]
"462
}
[e :U 82 ]
"463
}
[; ;tcpv4.c: 462: }
[; ;tcpv4.c: 463: }else
[e $U 83  ]
[e :U 61 ]
[; ;tcpv4.c: 464: {
"464
{
[; ;tcpv4.c: 465: ret = 1;
"465
[e = _ret -> -> 1 `i `uc ]
"466
}
[e :U 83 ]
[; ;tcpv4.c: 466: }
[; ;tcpv4.c: 468: return ret;
"468
[e ) _ret ]
[e $UE 60  ]
[; ;tcpv4.c: 469: }
"469
[e :UE 60 ]
}
"483
[v _TCP_Recv `(v ~T0 @X0 1 ef2`ul`ui ]
"484
{
[; ;tcpv4.c: 483: void TCP_Recv(uint32_t remoteAddress, uint16_t length)
[; ;tcpv4.c: 484: {
[e :U _TCP_Recv ]
"483
[v _remoteAddress `ul ~T0 @X0 1 r1 ]
[v _length `ui ~T0 @X0 1 r2 ]
"484
[f ]
"485
[v _tcbPtr `*S27 ~T0 @X0 1 a ]
"486
[v _count `c ~T0 @X0 1 a ]
[; ;tcpv4.c: 485: tcpTCB_t *tcbPtr;
[; ;tcpv4.c: 486: socklistsize_t count = 0;
[e = _count -> -> 0 `i `c ]
[; ;tcpv4.c: 488: tcbPtr = (0);
"488
[e = _tcbPtr -> -> 0 `i `*S27 ]
[; ;tcpv4.c: 490: receivedRemoteAddress = 0;
"490
[e = _receivedRemoteAddress -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 491: rcvPayloadLen = 0;
"491
[e = _rcvPayloadLen -> -> 0 `i `ui ]
[; ;tcpv4.c: 493: ETH_ReadBlock((char *)&tcpHeader,sizeof(tcpHeader_t));
"493
[e ( _ETH_ReadBlock (2 , -> -> &U _tcpHeader `*uc `*v -> # `S12 `ui ]
[; ;tcpv4.c: 495: currentTCB = (0);
"495
[e = _currentTCB -> -> 0 `i `*S27 ]
[; ;tcpv4.c: 498: if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0))
"498
[e $ ! && != . _tcpHeader 1 -> -> 0 `i `ui != . _tcpHeader 0 -> -> 0 `i `ui 85  ]
[; ;tcpv4.c: 499: {
"499
{
[; ;tcpv4.c: 500: tcpHeader.sourcePort = ((((uint16_t)tcpHeader.sourcePort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.sourcePort & (uint16_t)0x00FF) << 8));
"500
[e = . _tcpHeader 0 | >> & . _tcpHeader 0 -> 65280 `ui -> 8 `i << & . _tcpHeader 0 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 501: tcpHeader.destPort = ((((uint16_t)tcpHeader.destPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.destPort & (uint16_t)0x00FF) << 8));
"501
[e = . _tcpHeader 1 | >> & . _tcpHeader 1 -> 65280 `ui -> 8 `i << & . _tcpHeader 1 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 504: tcbPtr = tcbList;
"504
[e = _tcbPtr _tcbList ]
[; ;tcpv4.c: 505: while((tcbPtr != (0)) && (count < tcbListSize))
"505
[e $U 86  ]
[e :U 87 ]
[; ;tcpv4.c: 506: {
"506
{
[; ;tcpv4.c: 507: if (tcpHeader.destPort == tcbPtr->localPort)
"507
[e $ ! == . _tcpHeader 1 . *U _tcbPtr 0 89  ]
[; ;tcpv4.c: 508: {
"508
{
[; ;tcpv4.c: 509: currentTCB = tcbPtr;
"509
[e = _currentTCB _tcbPtr ]
[; ;tcpv4.c: 510: break;
"510
[e $U 88  ]
"511
}
[; ;tcpv4.c: 511: }
[e $U 90  ]
"512
[e :U 89 ]
[; ;tcpv4.c: 512: else
[; ;tcpv4.c: 513: {
"513
{
[; ;tcpv4.c: 514: tcbPtr = tcbPtr->nextTCB;
"514
[e = _tcbPtr -> . *U _tcbPtr 19 `*S27 ]
[; ;tcpv4.c: 515: count ++;
"515
[e ++ _count -> -> 1 `i `c ]
"516
}
[e :U 90 ]
"517
}
[e :U 86 ]
"505
[e $ && != _tcbPtr -> -> 0 `i `*S27 < -> _count `i -> _tcbListSize `i 87  ]
[e :U 88 ]
[; ;tcpv4.c: 516: }
[; ;tcpv4.c: 517: }
[; ;tcpv4.c: 519: if (currentTCB != (0))
"519
[e $ ! != _currentTCB -> -> 0 `i `*S27 91  ]
[; ;tcpv4.c: 520: {
"520
{
[; ;tcpv4.c: 521: if((tcpHeader.sourcePort == currentTCB->destPort) ||
[; ;tcpv4.c: 522: (currentTCB->destIP == 0))
"522
[e $ ! || == . _tcpHeader 0 . *U _currentTCB 2 == . *U _currentTCB 1 -> -> -> 0 `i `l `ul 92  ]
[; ;tcpv4.c: 523: {
"523
{
[; ;tcpv4.c: 526: receivedRemoteAddress = remoteAddress;
"526
[e = _receivedRemoteAddress _remoteAddress ]
[; ;tcpv4.c: 527: rcvPayloadLen = length - (uint16_t)(tcpHeader.dataOffset << 2);
"527
[e = _rcvPayloadLen - _length -> << -> . . . _tcpHeader 4 1 2 `i -> 2 `i `ui ]
[; ;tcpv4.c: 530: if (TCP_ParseTCPOptions() == 1)
"530
[e $ ! == -> ( _TCP_ParseTCPOptions ..  `i -> 1 `i 93  ]
[; ;tcpv4.c: 531: {
"531
{
[; ;tcpv4.c: 534: if(tcpHeader.syn)
"534
[e $ ! != -> . . . _tcpHeader 5 1 1 `i -> -> -> 0 `i `uc `i 94  ]
[; ;tcpv4.c: 535: {
"535
{
[; ;tcpv4.c: 536: if(tcpHeader.ack)
"536
[e $ ! != -> . . . _tcpHeader 5 1 4 `i -> -> -> 0 `i `uc `i 95  ]
[; ;tcpv4.c: 537: {
"537
{
[; ;tcpv4.c: 538: ;
[; ;tcpv4.c: 539: currentTCB->connectionEvent = RCV_SYNACK;
"539
[e = . *U _currentTCB 18 . `E651 5 ]
"540
}
[; ;tcpv4.c: 540: } else
[e $U 96  ]
[e :U 95 ]
[; ;tcpv4.c: 541: {
"541
{
[; ;tcpv4.c: 542: ;
[; ;tcpv4.c: 543: currentTCB->connectionEvent = RCV_SYN;
"543
[e = . *U _currentTCB 18 . `E651 3 ]
"544
}
[e :U 96 ]
"545
}
[; ;tcpv4.c: 544: }
[; ;tcpv4.c: 545: } else if(tcpHeader.fin)
[e $U 97  ]
[e :U 94 ]
[e $ ! != -> . . . _tcpHeader 5 1 0 `i -> -> -> 0 `i `uc `i 98  ]
[; ;tcpv4.c: 546: {
"546
{
[; ;tcpv4.c: 547: if(tcpHeader.ack)
"547
[e $ ! != -> . . . _tcpHeader 5 1 4 `i -> -> -> 0 `i `uc `i 99  ]
[; ;tcpv4.c: 548: {
"548
{
[; ;tcpv4.c: 549: ;
[; ;tcpv4.c: 550: currentTCB->connectionEvent = RCV_FINACK;
"550
[e = . *U _currentTCB 18 . `E651 7 ]
"551
}
[; ;tcpv4.c: 551: } else
[e $U 100  ]
[e :U 99 ]
[; ;tcpv4.c: 552: {
"552
{
[; ;tcpv4.c: 553: ;
[; ;tcpv4.c: 554: currentTCB->connectionEvent = RCV_FIN;
"554
[e = . *U _currentTCB 18 . `E651 6 ]
"555
}
[e :U 100 ]
"556
}
[; ;tcpv4.c: 555: }
[; ;tcpv4.c: 556: } else if(tcpHeader.rst)
[e $U 101  ]
[e :U 98 ]
[e $ ! != -> . . . _tcpHeader 5 1 2 `i -> -> -> 0 `i `uc `i 102  ]
[; ;tcpv4.c: 557: {
"557
{
[; ;tcpv4.c: 558: if(tcpHeader.ack)
"558
[e $ ! != -> . . . _tcpHeader 5 1 4 `i -> -> -> 0 `i `uc `i 103  ]
[; ;tcpv4.c: 559: {
"559
{
[; ;tcpv4.c: 560: ;
[; ;tcpv4.c: 561: currentTCB->connectionEvent = RCV_RSTACK;
"561
[e = . *U _currentTCB 18 . `E651 10 ]
"562
}
[; ;tcpv4.c: 562: } else
[e $U 104  ]
[e :U 103 ]
[; ;tcpv4.c: 563: {
"563
{
[; ;tcpv4.c: 564: ;
[; ;tcpv4.c: 565: currentTCB->connectionEvent = RCV_RST;
"565
[e = . *U _currentTCB 18 . `E651 9 ]
"566
}
[e :U 104 ]
"567
}
[; ;tcpv4.c: 566: }
[; ;tcpv4.c: 567: } else if(tcpHeader.ack)
[e $U 105  ]
[e :U 102 ]
[e $ ! != -> . . . _tcpHeader 5 1 4 `i -> -> -> 0 `i `uc `i 106  ]
[; ;tcpv4.c: 568: {
"568
{
[; ;tcpv4.c: 569: ;
[; ;tcpv4.c: 570: currentTCB->connectionEvent = RCV_ACK;
"570
[e = . *U _currentTCB 18 . `E651 4 ]
"571
}
[; ;tcpv4.c: 571: }
[e $U 107  ]
"572
[e :U 106 ]
[; ;tcpv4.c: 572: else
[; ;tcpv4.c: 573: {
"573
{
[; ;tcpv4.c: 574: ;
"575
}
[e :U 107 ]
[e :U 105 ]
[e :U 101 ]
[e :U 97 ]
[; ;tcpv4.c: 575: }
[; ;tcpv4.c: 577: tcpHeader.ackNumber = ((((uint32_t)tcpHeader.ackNumber&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcpHeader.ackNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeader.ackNumber&(uint32_
"577
[e = . _tcpHeader 3 | | | >> & . _tcpHeader 3 -> -16777216 `ul -> 24 `i >> & . _tcpHeader 3 -> -> 16711680 `l `ul -> 8 `i << & . _tcpHeader 3 -> -> 65280 `ui `ul -> 8 `i << & . _tcpHeader 3 -> -> 255 `i `ul -> 24 `i ]
[; ;tcpv4.c: 578: tcpHeader.sequenceNumber = ((((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0xff000000) >> 24) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)tcpHeader.sequenceNumber&(uint32_t)0x0000ff00) << 8) | (((uint32_t)tcpHeade
"578
[e = . _tcpHeader 2 | | | >> & . _tcpHeader 2 -> -16777216 `ul -> 24 `i >> & . _tcpHeader 2 -> -> 16711680 `l `ul -> 8 `i << & . _tcpHeader 2 -> -> 65280 `ui `ul -> 8 `i << & . _tcpHeader 2 -> -> 255 `i `ul -> 24 `i ]
[; ;tcpv4.c: 580: TCP_FiniteStateMachine();
"580
[e ( _TCP_FiniteStateMachine ..  ]
"581
}
[; ;tcpv4.c: 581: }else
[e $U 108  ]
[e :U 93 ]
[; ;tcpv4.c: 582: {
"582
{
[; ;tcpv4.c: 583: ;
"584
}
[e :U 108 ]
"585
}
[e :U 92 ]
"586
}
[e :U 91 ]
"587
}
[e :U 85 ]
[; ;tcpv4.c: 584: }
[; ;tcpv4.c: 585: }
[; ;tcpv4.c: 586: }
[; ;tcpv4.c: 587: }
[; ;tcpv4.c: 588: }
"588
[e :UE 84 ]
}
"602
[v _TCP_FiniteStateMachine `(uc ~T0 @X0 1 sf ]
"603
{
[; ;tcpv4.c: 602: static bool TCP_FiniteStateMachine(void)
[; ;tcpv4.c: 603: {
[e :U _TCP_FiniteStateMachine ]
[f ]
"604
[v _notAckBytes `ui ~T0 @X0 1 a ]
"605
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 604: uint16_t notAckBytes;
[; ;tcpv4.c: 605: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
"607
[v _nextState `E638 ~T0 @X0 1 a ]
[; ;tcpv4.c: 607: tcp_fsm_states_t nextState = currentTCB->fsmState;
[e = _nextState . *U _currentTCB 17 ]
"608
[v _event `E651 ~T0 @X0 1 a ]
[; ;tcpv4.c: 608: tcpEvent_t event = currentTCB->connectionEvent;
[e = _event . *U _currentTCB 18 ]
[; ;tcpv4.c: 610: switch (currentTCB->fsmState)
"610
[e $U 111  ]
[; ;tcpv4.c: 611: {
"611
{
[; ;tcpv4.c: 612: case LISTEN:
"612
[e :U 112 ]
[; ;tcpv4.c: 613: switch (event)
"613
[e $U 114  ]
[; ;tcpv4.c: 614: {
"614
{
[; ;tcpv4.c: 615: case RCV_SYN:
"615
[e :U 115 ]
[; ;tcpv4.c: 616: ;
[; ;tcpv4.c: 619: currentTCB->destIP = receivedRemoteAddress;
"619
[e = . *U _currentTCB 1 _receivedRemoteAddress ]
[; ;tcpv4.c: 620: currentTCB->destPort = tcpHeader.sourcePort;
"620
[e = . *U _currentTCB 2 . _tcpHeader 0 ]
[; ;tcpv4.c: 623: currentTCB->localLastAck = 0;
"623
[e = . *U _currentTCB 6 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 625: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
"625
[e = . *U _currentTCB 3 . _tcpHeader 2 ]
[; ;tcpv4.c: 626: currentTCB->remoteAck = currentTCB->remoteSeqno + 1;
"626
[e = . *U _currentTCB 4 + . *U _currentTCB 3 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 629: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
"629
[e = . *U _currentTCB 7 | >> & . _tcpHeader 6 -> 65280 `ui -> 8 `i << & . _tcpHeader 6 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 630: currentTCB->mss = tcpMss;
"630
[e = . *U _currentTCB 9 _tcpMss ]
[; ;tcpv4.c: 633: currentTCB->flags = 0x02U | 0x10U;
"633
[e = . *U _currentTCB 24 -> | -> 2 `ui -> 16 `ui `uc ]
[; ;tcpv4.c: 634: currentTCB->timeout = ((unsigned long)1*2);
"634
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 635: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
"635
[e = . *U _currentTCB 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 636: currentTCB->timeoutsCount = (3u);
"636
[e = . *U _currentTCB 23 -> -> 3 `ui `uc ]
[; ;tcpv4.c: 638: TCP_Snd(currentTCB);
"638
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 639: nextState = SYN_RECEIVED;
"639
[e = _nextState . `E638 3 ]
[; ;tcpv4.c: 640: break;
"640
[e $U 113  ]
[; ;tcpv4.c: 641: case CLOSE:
"641
[e :U 116 ]
[; ;tcpv4.c: 642: ;
[; ;tcpv4.c: 643: nextState = CLOSE;
"643
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 644: TCB_Reset(currentTCB);
"644
[e ( _TCB_Reset (1 _currentTCB ]
[; ;tcpv4.c: 645: break;
"645
[e $U 113  ]
[; ;tcpv4.c: 646: default:
"646
[e :U 117 ]
[; ;tcpv4.c: 648: break;
"648
[e $U 113  ]
"649
}
[; ;tcpv4.c: 649: }
[e $U 113  ]
"613
[e :U 114 ]
[e [\ _event , $ . `E651 3 115
 , $ . `E651 0 116
 117 ]
"649
[e :U 113 ]
[; ;tcpv4.c: 650: break;
"650
[e $U 110  ]
[; ;tcpv4.c: 651: case SYN_SENT:
"651
[e :U 118 ]
[; ;tcpv4.c: 652: switch (event)
"652
[e $U 120  ]
[; ;tcpv4.c: 653: {
"653
{
[; ;tcpv4.c: 654: case RCV_SYN:
"654
[e :U 121 ]
[; ;tcpv4.c: 655: ;
[; ;tcpv4.c: 657: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
"657
[e = . *U _currentTCB 3 . _tcpHeader 2 ]
[; ;tcpv4.c: 658: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
"658
[e = . *U _currentTCB 4 + . _tcpHeader 2 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 661: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
"661
[e = . *U _currentTCB 7 | >> & . _tcpHeader 6 -> 65280 `ui -> 8 `i << & . _tcpHeader 6 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 662: currentTCB->mss = tcpMss;
"662
[e = . *U _currentTCB 9 _tcpMss ]
[; ;tcpv4.c: 665: currentTCB->timeout = ((unsigned long)1*2);
"665
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 666: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
"666
[e = . *U _currentTCB 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 667: currentTCB->timeoutsCount = (3u);
"667
[e = . *U _currentTCB 23 -> -> 3 `ui `uc ]
[; ;tcpv4.c: 668: currentTCB->flags = 0x02U | 0x10U;
"668
[e = . *U _currentTCB 24 -> | -> 2 `ui -> 16 `ui `uc ]
[; ;tcpv4.c: 670: TCP_Snd(currentTCB);
"670
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 673: nextState = SYN_RECEIVED;
"673
[e = _nextState . `E638 3 ]
[; ;tcpv4.c: 674: break;
"674
[e $U 119  ]
[; ;tcpv4.c: 675: case RCV_SYNACK:
"675
[e :U 122 ]
[; ;tcpv4.c: 676: ;
[; ;tcpv4.c: 678: currentTCB->timeout = 0;
"678
[e = . *U _currentTCB 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 680: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
"680
[e $ ! == + . *U _currentTCB 5 -> -> -> 1 `i `l `ul . _tcpHeader 3 123  ]
[; ;tcpv4.c: 681: {
"681
{
[; ;tcpv4.c: 683: currentTCB->localSeqno = currentTCB->localSeqno + 1;
"683
[e = . *U _currentTCB 5 + . *U _currentTCB 5 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 684: currentTCB->flags = 0x10U;
"684
[e = . *U _currentTCB 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 687: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
"687
[e = . *U _currentTCB 3 . _tcpHeader 2 ]
[; ;tcpv4.c: 689: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
"689
[e = . *U _currentTCB 4 + . _tcpHeader 2 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 691: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
"691
[e = . *U _currentTCB 7 | >> & . _tcpHeader 6 -> 65280 `ui -> 8 `i << & . _tcpHeader 6 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 692: currentTCB->mss = tcpMss;
"692
[e = . *U _currentTCB 9 _tcpMss ]
[; ;tcpv4.c: 694: if(TCP_Snd(currentTCB))
"694
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 124  ]
[; ;tcpv4.c: 695: {
"695
{
[; ;tcpv4.c: 696: nextState = ESTABLISHED;
"696
[e = _nextState . `E638 4 ]
[; ;tcpv4.c: 697: currentTCB->socketState = SOCKET_CONNECTED;
"697
[e = . *U _currentTCB 25 . `E667 3 ]
"698
}
[e :U 124 ]
"699
}
[; ;tcpv4.c: 698: }
[; ;tcpv4.c: 699: }
[e $U 125  ]
"700
[e :U 123 ]
[; ;tcpv4.c: 700: else
[; ;tcpv4.c: 701: {
"701
{
[; ;tcpv4.c: 703: currentTCB->localSeqno = tcpHeader.ackNumber;
"703
[e = . *U _currentTCB 5 . _tcpHeader 3 ]
[; ;tcpv4.c: 704: currentTCB->flags = 0x04U | 0x10U;
"704
[e = . *U _currentTCB 24 -> | -> 4 `ui -> 16 `ui `uc ]
[; ;tcpv4.c: 705: if(TCP_Snd(currentTCB))
"705
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 126  ]
[; ;tcpv4.c: 706: {
"706
{
[; ;tcpv4.c: 707: nextState = CLOSE;
"707
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 708: TCB_Reset(currentTCB);
"708
[e ( _TCB_Reset (1 _currentTCB ]
"709
}
[e :U 126 ]
"710
}
[e :U 125 ]
[; ;tcpv4.c: 709: }
[; ;tcpv4.c: 710: }
[; ;tcpv4.c: 711: break;
"711
[e $U 119  ]
[; ;tcpv4.c: 712: case RCV_ACK:
"712
[e :U 127 ]
[; ;tcpv4.c: 713: ;
[; ;tcpv4.c: 715: currentTCB->timeout = 0;
"715
[e = . *U _currentTCB 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 717: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
"717
[e $ ! == + . *U _currentTCB 5 -> -> -> 1 `i `l `ul . _tcpHeader 3 128  ]
[; ;tcpv4.c: 718: {
"718
{
[; ;tcpv4.c: 720: currentTCB->localSeqno = currentTCB->localSeqno + 1;
"720
[e = . *U _currentTCB 5 + . *U _currentTCB 5 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 721: currentTCB->flags = 0x10U;
"721
[e = . *U _currentTCB 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 724: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
"724
[e = . *U _currentTCB 3 . _tcpHeader 2 ]
[; ;tcpv4.c: 725: currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
"725
[e = . *U _currentTCB 4 + . _tcpHeader 2 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 727: currentTCB->remoteWnd = ((((uint16_t)tcpHeader.windowSize & (uint16_t)0xFF00) >> 8) | (((uint16_t)tcpHeader.windowSize & (uint16_t)0x00FF) << 8));
"727
[e = . *U _currentTCB 7 | >> & . _tcpHeader 6 -> 65280 `ui -> 8 `i << & . _tcpHeader 6 -> -> 255 `i `ui -> 8 `i ]
[; ;tcpv4.c: 728: currentTCB->mss = tcpMss;
"728
[e = . *U _currentTCB 9 _tcpMss ]
[; ;tcpv4.c: 730: nextState = ESTABLISHED;
"730
[e = _nextState . `E638 4 ]
[; ;tcpv4.c: 731: currentTCB->socketState = SOCKET_CONNECTED;
"731
[e = . *U _currentTCB 25 . `E667 3 ]
"732
}
[; ;tcpv4.c: 732: }
[e $U 129  ]
"733
[e :U 128 ]
[; ;tcpv4.c: 733: else
[; ;tcpv4.c: 734: {
"734
{
[; ;tcpv4.c: 736: currentTCB->localSeqno = tcpHeader.ackNumber;
"736
[e = . *U _currentTCB 5 . _tcpHeader 3 ]
[; ;tcpv4.c: 737: currentTCB->flags = 0x04U;
"737
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 738: if(TCP_Snd(currentTCB))
"738
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 130  ]
[; ;tcpv4.c: 739: {
"739
{
[; ;tcpv4.c: 740: nextState = CLOSE;
"740
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 741: TCB_Reset(currentTCB);
"741
[e ( _TCB_Reset (1 _currentTCB ]
"742
}
[e :U 130 ]
"743
}
[e :U 129 ]
[; ;tcpv4.c: 742: }
[; ;tcpv4.c: 743: }
[; ;tcpv4.c: 744: break;
"744
[e $U 119  ]
[; ;tcpv4.c: 745: case CLOSE:
"745
[e :U 131 ]
[; ;tcpv4.c: 746: ;
[; ;tcpv4.c: 748: nextState = CLOSED;
"748
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 749: TCB_Reset(currentTCB);
"749
[e ( _TCB_Reset (1 _currentTCB ]
[; ;tcpv4.c: 750: break;
"750
[e $U 119  ]
[; ;tcpv4.c: 751: case TIMEOUT:
"751
[e :U 132 ]
[; ;tcpv4.c: 752: ;
[; ;tcpv4.c: 755: if (currentTCB->timeoutsCount)
"755
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 133  ]
[; ;tcpv4.c: 756: {
"756
{
[; ;tcpv4.c: 757: if(TCP_Snd(currentTCB))
"757
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 134  ]
[; ;tcpv4.c: 758: {
"758
{
[; ;tcpv4.c: 759: if (currentTCB->flags & 0x04U)
"759
[e $ ! != & -> . *U _currentTCB 24 `ui -> 4 `ui -> -> 0 `i `ui 135  ]
[; ;tcpv4.c: 760: {
"760
{
[; ;tcpv4.c: 761: nextState = CLOSE;
"761
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 762: TCB_Reset(currentTCB);
"762
[e ( _TCB_Reset (1 _currentTCB ]
"763
}
[; ;tcpv4.c: 763: }else
[e $U 136  ]
[e :U 135 ]
[; ;tcpv4.c: 764: if(currentTCB->flags & 0x10U)
"764
[e $ ! != & -> . *U _currentTCB 24 `ui -> 16 `ui -> -> 0 `i `ui 137  ]
[; ;tcpv4.c: 765: {
"765
{
[; ;tcpv4.c: 766: nextState = ESTABLISHED;
"766
[e = _nextState . `E638 4 ]
[; ;tcpv4.c: 767: currentTCB->socketState = SOCKET_CONNECTED;
"767
[e = . *U _currentTCB 25 . `E667 3 ]
"768
}
[e :U 137 ]
"769
[e :U 136 ]
}
[e :U 134 ]
"770
}
[; ;tcpv4.c: 768: }
[; ;tcpv4.c: 769: }
[; ;tcpv4.c: 770: }else
[e $U 138  ]
[e :U 133 ]
[; ;tcpv4.c: 771: {
"771
{
[; ;tcpv4.c: 773: currentTCB->flags = 0x04U;
"773
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 774: if(TCP_Snd(currentTCB))
"774
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 139  ]
[; ;tcpv4.c: 775: {
"775
{
[; ;tcpv4.c: 776: nextState = CLOSE;
"776
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 777: TCB_Reset(currentTCB);
"777
[e ( _TCB_Reset (1 _currentTCB ]
"778
}
[e :U 139 ]
"779
}
[e :U 138 ]
[; ;tcpv4.c: 778: }
[; ;tcpv4.c: 779: }
[; ;tcpv4.c: 780: break;
"780
[e $U 119  ]
[; ;tcpv4.c: 781: case RCV_RST:
"781
[e :U 140 ]
"782
[e :U 141 ]
[; ;tcpv4.c: 782: case RCV_RSTACK:
[; ;tcpv4.c: 784: nextState = CLOSED;
"784
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 785: TCB_Reset(currentTCB);
"785
[e ( _TCB_Reset (1 _currentTCB ]
[; ;tcpv4.c: 786: break;
"786
[e $U 119  ]
[; ;tcpv4.c: 787: default:
"787
[e :U 142 ]
[; ;tcpv4.c: 789: break;
"789
[e $U 119  ]
"790
}
[; ;tcpv4.c: 790: }
[e $U 119  ]
"652
[e :U 120 ]
[e [\ _event , $ . `E651 3 121
 , $ . `E651 5 122
 , $ . `E651 4 127
 , $ . `E651 0 131
 , $ . `E651 12 132
 , $ . `E651 9 140
 , $ . `E651 10 141
 142 ]
"790
[e :U 119 ]
[; ;tcpv4.c: 791: break;
"791
[e $U 110  ]
[; ;tcpv4.c: 792: case SYN_RECEIVED:
"792
[e :U 143 ]
[; ;tcpv4.c: 793: switch (event)
"793
[e $U 145  ]
[; ;tcpv4.c: 794: {
"794
{
[; ;tcpv4.c: 795: case RCV_SYNACK:
"795
[e :U 146 ]
[; ;tcpv4.c: 796: ;
[; ;tcpv4.c: 797: if (currentTCB->localPort == tcpHeader.destPort)
"797
[e $ ! == . *U _currentTCB 0 . _tcpHeader 1 147  ]
[; ;tcpv4.c: 798: {
"798
{
[; ;tcpv4.c: 800: currentTCB->timeout = 0;
"800
[e = . *U _currentTCB 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 804: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
"804
[e $ ! && == . *U _currentTCB 1 _receivedRemoteAddress == . *U _currentTCB 2 . _tcpHeader 0 148  ]
[; ;tcpv4.c: 805: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
"805
[e $ ! == + . *U _currentTCB 5 -> -> -> 1 `i `l `ul . _tcpHeader 3 149  ]
[; ;tcpv4.c: 807: nextState = ESTABLISHED;
"807
[e = _nextState . `E638 4 ]
[e :U 149 ]
"808
[e :U 148 ]
[; ;tcpv4.c: 808: currentTCB->socketState = SOCKET_CONNECTED;
[e = . *U _currentTCB 25 . `E667 3 ]
"809
}
[e :U 147 ]
[; ;tcpv4.c: 809: }
[; ;tcpv4.c: 810: break;
"810
[e $U 144  ]
[; ;tcpv4.c: 811: case RCV_ACK:
"811
[e :U 150 ]
[; ;tcpv4.c: 812: ;
[; ;tcpv4.c: 816: if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
"816
[e $ ! && == . *U _currentTCB 1 _receivedRemoteAddress == . *U _currentTCB 2 . _tcpHeader 0 151  ]
[; ;tcpv4.c: 817: {
"817
{
[; ;tcpv4.c: 820: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
"820
[e $ ! == . *U _currentTCB 4 . _tcpHeader 2 152  ]
[; ;tcpv4.c: 821: {
"821
{
[; ;tcpv4.c: 823: if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
"823
[e $ ! == + . *U _currentTCB 5 -> -> -> 1 `i `l `ul . _tcpHeader 3 153  ]
[; ;tcpv4.c: 824: {
"824
{
[; ;tcpv4.c: 825: currentTCB->localSeqno = currentTCB->localSeqno + 1;
"825
[e = . *U _currentTCB 5 + . *U _currentTCB 5 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 827: currentTCB->timeout = 0;
"827
[e = . *U _currentTCB 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 829: nextState = ESTABLISHED;
"829
[e = _nextState . `E638 4 ]
[; ;tcpv4.c: 830: currentTCB->socketState = SOCKET_CONNECTED;
"830
[e = . *U _currentTCB 25 . `E667 3 ]
"831
}
[e :U 153 ]
"832
}
[e :U 152 ]
"833
}
[e :U 151 ]
[; ;tcpv4.c: 831: }
[; ;tcpv4.c: 832: }
[; ;tcpv4.c: 833: }
[; ;tcpv4.c: 834: break;
"834
[e $U 144  ]
[; ;tcpv4.c: 835: case CLOSE:
"835
[e :U 154 ]
[; ;tcpv4.c: 836: ;
[; ;tcpv4.c: 838: currentTCB->timeout = 0;
"838
[e = . *U _currentTCB 21 -> -> 0 `i `ui ]
[; ;tcpv4.c: 840: currentTCB->flags = 0x01U;
"840
[e = . *U _currentTCB 24 -> -> 1 `ui `uc ]
[; ;tcpv4.c: 841: currentTCB->timeout = ((unsigned long)1*2);
"841
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 842: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
"842
[e = . *U _currentTCB 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 843: currentTCB->timeoutsCount = (5u);
"843
[e = . *U _currentTCB 23 -> -> 5 `ui `uc ]
[; ;tcpv4.c: 845: nextState = FIN_WAIT_1;
"845
[e = _nextState . `E638 5 ]
[; ;tcpv4.c: 846: TCP_Snd(currentTCB);
"846
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 847: break;
"847
[e $U 144  ]
[; ;tcpv4.c: 848: case RCV_RSTACK:
"848
[e :U 155 ]
"849
[e :U 156 ]
[; ;tcpv4.c: 849: case RCV_RST:
[; ;tcpv4.c: 851: ;
[; ;tcpv4.c: 853: if (currentTCB->localPort == tcpHeader.destPort)
"853
[e $ ! == . *U _currentTCB 0 . _tcpHeader 1 157  ]
[; ;tcpv4.c: 854: {
"854
{
[; ;tcpv4.c: 855: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
"855
[e $ ! == . *U _currentTCB 4 . _tcpHeader 2 158  ]
[; ;tcpv4.c: 856: {
"856
{
[; ;tcpv4.c: 857: ;
[; ;tcpv4.c: 858: currentTCB->destIP = 0;
"858
[e = . *U _currentTCB 1 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 859: currentTCB->destPort = 0;
"859
[e = . *U _currentTCB 2 -> -> 0 `i `ui ]
[; ;tcpv4.c: 860: currentTCB->localSeqno = 0;
"860
[e = . *U _currentTCB 5 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 861: currentTCB->localLastAck = 0;
"861
[e = . *U _currentTCB 6 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 862: currentTCB->remoteSeqno = 0;
"862
[e = . *U _currentTCB 3 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 863: currentTCB->remoteAck = 0;
"863
[e = . *U _currentTCB 4 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 864: currentTCB->remoteWnd = 0;
"864
[e = . *U _currentTCB 7 -> -> 0 `i `ui ]
[; ;tcpv4.c: 865: currentTCB->mss = 0;
"865
[e = . *U _currentTCB 9 -> -> 0 `i `ui ]
[; ;tcpv4.c: 867: nextState = LISTEN;
"867
[e = _nextState . `E638 1 ]
"868
}
[e :U 158 ]
"869
}
[e :U 157 ]
[; ;tcpv4.c: 868: }
[; ;tcpv4.c: 869: }
[; ;tcpv4.c: 870: break;
"870
[e $U 144  ]
[; ;tcpv4.c: 871: case TIMEOUT:
"871
[e :U 159 ]
[; ;tcpv4.c: 872: ;
[; ;tcpv4.c: 873: if (currentTCB->timeoutsCount)
"873
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 160  ]
[; ;tcpv4.c: 874: {
"874
{
[; ;tcpv4.c: 875: TCP_Snd(currentTCB);
"875
[e ( _TCP_Snd (1 _currentTCB ]
"876
}
[; ;tcpv4.c: 876: }
[e $U 161  ]
"877
[e :U 160 ]
[; ;tcpv4.c: 877: else
[; ;tcpv4.c: 878: {
"878
{
[; ;tcpv4.c: 880: currentTCB->flags = 0x04U;
"880
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 881: if(TCP_Snd(currentTCB))
"881
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 162  ]
[; ;tcpv4.c: 882: {
"882
{
[; ;tcpv4.c: 883: currentTCB->destIP = 0;
"883
[e = . *U _currentTCB 1 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 884: currentTCB->destPort = 0;
"884
[e = . *U _currentTCB 2 -> -> 0 `i `ui ]
[; ;tcpv4.c: 885: currentTCB->localSeqno = 0;
"885
[e = . *U _currentTCB 5 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 886: currentTCB->localLastAck = 0;
"886
[e = . *U _currentTCB 6 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 887: currentTCB->remoteSeqno = 0;
"887
[e = . *U _currentTCB 3 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 888: currentTCB->remoteAck = 0;
"888
[e = . *U _currentTCB 4 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 889: currentTCB->remoteWnd = 0;
"889
[e = . *U _currentTCB 7 -> -> 0 `i `ui ]
[; ;tcpv4.c: 890: currentTCB->mss = 0;
"890
[e = . *U _currentTCB 9 -> -> 0 `i `ui ]
[; ;tcpv4.c: 891: nextState = LISTEN;
"891
[e = _nextState . `E638 1 ]
"892
}
[e :U 162 ]
"893
}
[e :U 161 ]
[; ;tcpv4.c: 892: }
[; ;tcpv4.c: 893: }
[; ;tcpv4.c: 894: break;
"894
[e $U 144  ]
[; ;tcpv4.c: 895: default:
"895
[e :U 163 ]
[; ;tcpv4.c: 897: break;
"897
[e $U 144  ]
"898
}
[; ;tcpv4.c: 898: }
[e $U 144  ]
"793
[e :U 145 ]
[e [\ _event , $ . `E651 5 146
 , $ . `E651 4 150
 , $ . `E651 0 154
 , $ . `E651 10 155
 , $ . `E651 9 156
 , $ . `E651 12 159
 163 ]
"898
[e :U 144 ]
[; ;tcpv4.c: 899: break;
"899
[e $U 110  ]
[; ;tcpv4.c: 900: case ESTABLISHED:
"900
[e :U 164 ]
[; ;tcpv4.c: 901: switch (event)
"901
[e $U 166  ]
[; ;tcpv4.c: 902: {
"902
{
[; ;tcpv4.c: 903: case RCV_ACK:
"903
[e :U 167 ]
[; ;tcpv4.c: 904: ;
[; ;tcpv4.c: 905: if (currentTCB->destIP == receivedRemoteAddress)
"905
[e $ ! == . *U _currentTCB 1 _receivedRemoteAddress 168  ]
[; ;tcpv4.c: 906: {
"906
{
[; ;tcpv4.c: 910: if (currentTCB->remoteAck == tcpHeader.sequenceNumber)
"910
[e $ ! == . *U _currentTCB 4 . _tcpHeader 2 169  ]
[; ;tcpv4.c: 911: {
"911
{
[; ;tcpv4.c: 915: if (currentTCB->localLastAck < tcpHeader.ackNumber)
"915
[e $ ! < . *U _currentTCB 6 . _tcpHeader 3 170  ]
[; ;tcpv4.c: 916: {
"916
{
[; ;tcpv4.c: 918: if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber)
"918
[e $ ! >= + . *U _currentTCB 5 -> -> -> 1 `i `l `ul . _tcpHeader 3 171  ]
[; ;tcpv4.c: 919: {
"919
{
[; ;tcpv4.c: 920: notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
"920
[e = _notAckBytes -> - . *U _currentTCB 5 . _tcpHeader 3 `ui ]
[; ;tcpv4.c: 923: currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
"923
[e = . *U _currentTCB 14 - . *U _currentTCB 14 * -> _notAckBytes `ux -> -> # *U . *U _currentTCB 14 `ui `ux ]
[; ;tcpv4.c: 924: currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
"924
[e = . *U _currentTCB 15 + . *U _currentTCB 15 _notAckBytes ]
[; ;tcpv4.c: 927: if(currentTCB->bytesToSend == 0)
"927
[e $ ! == . *U _currentTCB 15 -> -> 0 `i `ui 172  ]
[; ;tcpv4.c: 928: {
"928
{
[; ;tcpv4.c: 929: if (currentTCB->txBufState == TX_BUFF_IN_USE)
"929
[e $ ! == -> . *U _currentTCB 16 `i -> . `E680 2 `i 173  ]
[; ;tcpv4.c: 930: {
"930
{
[; ;tcpv4.c: 931: currentTCB->txBufState = NO_BUFF;
"931
[e = . *U _currentTCB 16 . `E680 0 ]
"932
}
[e :U 173 ]
"933
}
[e :U 172 ]
[; ;tcpv4.c: 932: }
[; ;tcpv4.c: 933: }
[; ;tcpv4.c: 935: currentTCB->localLastAck = tcpHeader.ackNumber - 1;
"935
[e = . *U _currentTCB 6 - . _tcpHeader 3 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 936: currentTCB->localSeqno = tcpHeader.ackNumber;
"936
[e = . *U _currentTCB 5 . _tcpHeader 3 ]
[; ;tcpv4.c: 939: if(rcvPayloadLen > 0)
"939
[e $ ! > _rcvPayloadLen -> -> 0 `i `ui 174  ]
[; ;tcpv4.c: 940: {
"940
{
[; ;tcpv4.c: 941: currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
"941
[e = . *U _currentTCB 3 . _tcpHeader 2 ]
[; ;tcpv4.c: 944: TCP_PayloadSave(rcvPayloadLen);
"944
[e ( _TCP_PayloadSave (1 _rcvPayloadLen ]
"945
}
[e :U 174 ]
"946
}
[; ;tcpv4.c: 945: }
[; ;tcpv4.c: 946: }else
[e $U 175  ]
[e :U 171 ]
[; ;tcpv4.c: 947: {
"947
{
[; ;tcpv4.c: 951: currentTCB->flags = 0x04U | 0x10U;
"951
[e = . *U _currentTCB 24 -> | -> 4 `ui -> 16 `ui `uc ]
[; ;tcpv4.c: 952: if (TCP_Snd(currentTCB))
"952
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 176  ]
[; ;tcpv4.c: 953: {
"953
{
[; ;tcpv4.c: 954: nextState = CLOSED;
"954
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 955: TCB_Reset(currentTCB);
"955
[e ( _TCB_Reset (1 _currentTCB ]
"956
}
[e :U 176 ]
"957
}
[e :U 175 ]
"958
}
[e :U 170 ]
"959
}
[e :U 169 ]
"960
}
[e :U 168 ]
[; ;tcpv4.c: 956: }
[; ;tcpv4.c: 957: }
[; ;tcpv4.c: 958: }
[; ;tcpv4.c: 959: }
[; ;tcpv4.c: 960: }
[; ;tcpv4.c: 961: break;
"961
[e $U 165  ]
[; ;tcpv4.c: 962: case CLOSE:
"962
[e :U 177 ]
[; ;tcpv4.c: 963: ;
[; ;tcpv4.c: 964: currentTCB->flags = 0x01U;
"964
[e = . *U _currentTCB 24 -> -> 1 `ui `uc ]
[; ;tcpv4.c: 965: nextState = FIN_WAIT_1;
"965
[e = _nextState . `E638 5 ]
[; ;tcpv4.c: 966: TCP_Snd(currentTCB);
"966
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 967: break;
"967
[e $U 165  ]
[; ;tcpv4.c: 968: case RCV_FINACK:
"968
[e :U 178 ]
[; ;tcpv4.c: 969: ;
[; ;tcpv4.c: 970: case RCV_FIN:
"970
[e :U 179 ]
[; ;tcpv4.c: 971: ;
[; ;tcpv4.c: 974: currentTCB->localSeqno = tcpHeader.ackNumber;
"974
[e = . *U _currentTCB 5 . _tcpHeader 3 ]
[; ;tcpv4.c: 975: currentTCB->remoteAck = currentTCB->remoteAck + 1;
"975
[e = . *U _currentTCB 4 + . *U _currentTCB 4 -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 977: currentTCB->socketState = SOCKET_CLOSING;
"977
[e = . *U _currentTCB 25 . `E667 4 ]
[; ;tcpv4.c: 978: currentTCB->timeout = ((unsigned long)1*2);
"978
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 979: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
"979
[e = . *U _currentTCB 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 980: currentTCB->timeoutsCount = (5u);
"980
[e = . *U _currentTCB 23 -> -> 5 `ui `uc ]
[; ;tcpv4.c: 982: currentTCB->flags = 0x01U | 0x10U;
"982
[e = . *U _currentTCB 24 -> | -> 1 `ui -> 16 `ui `uc ]
[; ;tcpv4.c: 984: nextState = LAST_ACK;
"984
[e = _nextState . `E638 9 ]
[; ;tcpv4.c: 985: TCP_Snd(currentTCB);
"985
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 986: break;
"986
[e $U 165  ]
[; ;tcpv4.c: 987: case RCV_RST:
"987
[e :U 180 ]
"988
[e :U 181 ]
[; ;tcpv4.c: 988: case RCV_RSTACK:
[; ;tcpv4.c: 989: nextState = CLOSED;
"989
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 990: TCB_Reset(currentTCB);
"990
[e ( _TCB_Reset (1 _currentTCB ]
[; ;tcpv4.c: 991: break;
"991
[e $U 165  ]
[; ;tcpv4.c: 992: case TIMEOUT:
"992
[e :U 182 ]
[; ;tcpv4.c: 993: ;
[; ;tcpv4.c: 994: if (currentTCB->timeoutsCount)
"994
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 183  ]
[; ;tcpv4.c: 995: {
"995
{
[; ;tcpv4.c: 996: TCP_Snd(currentTCB);
"996
[e ( _TCP_Snd (1 _currentTCB ]
"997
}
[; ;tcpv4.c: 997: }else
[e $U 184  ]
[e :U 183 ]
[; ;tcpv4.c: 998: {
"998
{
[; ;tcpv4.c: 1000: currentTCB->flags = 0x04U;
"1000
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 1001: if(TCP_Snd(currentTCB))
"1001
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 185  ]
[; ;tcpv4.c: 1002: {
"1002
{
[; ;tcpv4.c: 1003: nextState = CLOSE;
"1003
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 1004: TCB_Reset(currentTCB);
"1004
[e ( _TCB_Reset (1 _currentTCB ]
"1005
}
[e :U 185 ]
"1006
}
[e :U 184 ]
[; ;tcpv4.c: 1005: }
[; ;tcpv4.c: 1006: }
[; ;tcpv4.c: 1007: break;
"1007
[e $U 165  ]
[; ;tcpv4.c: 1008: default:
"1008
[e :U 186 ]
[; ;tcpv4.c: 1009: break;
"1009
[e $U 165  ]
"1010
}
[; ;tcpv4.c: 1010: }
[e $U 165  ]
"901
[e :U 166 ]
[e [\ _event , $ . `E651 4 167
 , $ . `E651 0 177
 , $ . `E651 7 178
 , $ . `E651 6 179
 , $ . `E651 9 180
 , $ . `E651 10 181
 , $ . `E651 12 182
 186 ]
"1010
[e :U 165 ]
[; ;tcpv4.c: 1011: break;
"1011
[e $U 110  ]
[; ;tcpv4.c: 1012: case FIN_WAIT_1:
"1012
[e :U 187 ]
[; ;tcpv4.c: 1013: switch (event)
"1013
[e $U 189  ]
[; ;tcpv4.c: 1014: {
"1014
{
[; ;tcpv4.c: 1015: case RCV_FIN:
"1015
[e :U 190 ]
[; ;tcpv4.c: 1016: ;
[; ;tcpv4.c: 1017: currentTCB->flags = 0x10U;
"1017
[e = . *U _currentTCB 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 1018: if(TCP_Snd(currentTCB))
"1018
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 191  ]
[; ;tcpv4.c: 1019: {
"1019
{
[; ;tcpv4.c: 1020: nextState = CLOSING;
"1020
[e = _nextState . `E638 8 ]
"1021
}
[e :U 191 ]
[; ;tcpv4.c: 1021: }
[; ;tcpv4.c: 1022: break;
"1022
[e $U 188  ]
[; ;tcpv4.c: 1023: case RCV_ACK:
"1023
[e :U 192 ]
[; ;tcpv4.c: 1024: ;
[; ;tcpv4.c: 1026: currentTCB->timeout = ((unsigned long)1*2);
"1026
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 1027: currentTCB->timeoutsCount = 1;
"1027
[e = . *U _currentTCB 23 -> -> 1 `i `uc ]
[; ;tcpv4.c: 1028: nextState = FIN_WAIT_2;
"1028
[e = _nextState . `E638 6 ]
[; ;tcpv4.c: 1029: break;
"1029
[e $U 188  ]
[; ;tcpv4.c: 1030: case RCV_FINACK:
"1030
[e :U 193 ]
[; ;tcpv4.c: 1031: ;
[; ;tcpv4.c: 1032: currentTCB->flags = 0x10U;
"1032
[e = . *U _currentTCB 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 1033: if(TCP_Snd(currentTCB))
"1033
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 194  ]
[; ;tcpv4.c: 1034: {
"1034
{
[; ;tcpv4.c: 1035: nextState = TIME_WAIT;
"1035
[e = _nextState . `E638 10 ]
"1036
}
[e :U 194 ]
[; ;tcpv4.c: 1036: }
[; ;tcpv4.c: 1037: break;
"1037
[e $U 188  ]
[; ;tcpv4.c: 1038: case TIMEOUT:
"1038
[e :U 195 ]
[; ;tcpv4.c: 1039: ;
[; ;tcpv4.c: 1040: if (currentTCB->timeoutsCount)
"1040
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 196  ]
[; ;tcpv4.c: 1041: {
"1041
{
[; ;tcpv4.c: 1042: TCP_Snd(currentTCB);
"1042
[e ( _TCP_Snd (1 _currentTCB ]
"1043
}
[; ;tcpv4.c: 1043: }else
[e $U 197  ]
[e :U 196 ]
[; ;tcpv4.c: 1044: {
"1044
{
[; ;tcpv4.c: 1046: currentTCB->flags = 0x04U;
"1046
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 1047: if(TCP_Snd(currentTCB))
"1047
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 198  ]
[; ;tcpv4.c: 1048: {
"1048
{
[; ;tcpv4.c: 1049: nextState = CLOSE;
"1049
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 1050: TCB_Reset(currentTCB);
"1050
[e ( _TCB_Reset (1 _currentTCB ]
"1051
}
[e :U 198 ]
"1052
}
[e :U 197 ]
[; ;tcpv4.c: 1051: }
[; ;tcpv4.c: 1052: }
[; ;tcpv4.c: 1053: break;
"1053
[e $U 188  ]
[; ;tcpv4.c: 1054: default:
"1054
[e :U 199 ]
[; ;tcpv4.c: 1055: break;
"1055
[e $U 188  ]
"1056
}
[; ;tcpv4.c: 1056: }
[e $U 188  ]
"1013
[e :U 189 ]
[e [\ _event , $ . `E651 6 190
 , $ . `E651 4 192
 , $ . `E651 7 193
 , $ . `E651 12 195
 199 ]
"1056
[e :U 188 ]
[; ;tcpv4.c: 1057: break;
"1057
[e $U 110  ]
[; ;tcpv4.c: 1058: case FIN_WAIT_2:
"1058
[e :U 200 ]
[; ;tcpv4.c: 1059: switch (event)
"1059
[e $U 202  ]
[; ;tcpv4.c: 1060: {
"1060
{
[; ;tcpv4.c: 1061: case RCV_FIN:
"1061
[e :U 203 ]
[; ;tcpv4.c: 1062: ;
[; ;tcpv4.c: 1063: if(TCP_Snd(currentTCB))
"1063
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 204  ]
[; ;tcpv4.c: 1064: {
"1064
{
[; ;tcpv4.c: 1065: nextState = TIME_WAIT;
"1065
[e = _nextState . `E638 10 ]
"1066
}
[e :U 204 ]
[; ;tcpv4.c: 1066: }
[; ;tcpv4.c: 1067: break;
"1067
[e $U 201  ]
[; ;tcpv4.c: 1068: case TIMEOUT:
"1068
[e :U 205 ]
[; ;tcpv4.c: 1069: ;
[; ;tcpv4.c: 1070: if (currentTCB->timeoutsCount)
"1070
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 206  ]
[; ;tcpv4.c: 1071: {
"1071
{
[; ;tcpv4.c: 1072: TCP_Snd(currentTCB);
"1072
[e ( _TCP_Snd (1 _currentTCB ]
"1073
}
[; ;tcpv4.c: 1073: }else
[e $U 207  ]
[e :U 206 ]
[; ;tcpv4.c: 1074: {
"1074
{
[; ;tcpv4.c: 1076: currentTCB->flags = 0x04U;
"1076
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 1077: if(TCP_Snd(currentTCB))
"1077
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 208  ]
[; ;tcpv4.c: 1078: {
"1078
{
[; ;tcpv4.c: 1079: nextState = CLOSE;
"1079
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 1080: TCB_Reset(currentTCB);
"1080
[e ( _TCB_Reset (1 _currentTCB ]
"1081
}
[e :U 208 ]
"1082
}
[e :U 207 ]
[; ;tcpv4.c: 1081: }
[; ;tcpv4.c: 1082: }
[; ;tcpv4.c: 1083: break;
"1083
[e $U 201  ]
[; ;tcpv4.c: 1084: default:
"1084
[e :U 209 ]
[; ;tcpv4.c: 1085: break;
"1085
[e $U 201  ]
"1086
}
[; ;tcpv4.c: 1086: }
[e $U 201  ]
"1059
[e :U 202 ]
[e [\ _event , $ . `E651 6 203
 , $ . `E651 12 205
 209 ]
"1086
[e :U 201 ]
[; ;tcpv4.c: 1087: break;
"1087
[e $U 110  ]
[; ;tcpv4.c: 1088: case CLOSE_WAIT:
"1088
[e :U 210 ]
[; ;tcpv4.c: 1090: break;
"1090
[e $U 110  ]
[; ;tcpv4.c: 1091: case CLOSING:
"1091
[e :U 211 ]
[; ;tcpv4.c: 1092: switch (event)
"1092
[e $U 213  ]
[; ;tcpv4.c: 1093: {
"1093
{
[; ;tcpv4.c: 1094: case RCV_ACK:
"1094
[e :U 214 ]
[; ;tcpv4.c: 1095: ;
[; ;tcpv4.c: 1096: nextState = TIME_WAIT;
"1096
[e = _nextState . `E638 10 ]
[; ;tcpv4.c: 1097: break;
"1097
[e $U 212  ]
[; ;tcpv4.c: 1098: default:
"1098
[e :U 215 ]
[; ;tcpv4.c: 1099: break;
"1099
[e $U 212  ]
"1100
}
[; ;tcpv4.c: 1100: }
[e $U 212  ]
"1092
[e :U 213 ]
[e [\ _event , $ . `E651 4 214
 215 ]
"1100
[e :U 212 ]
[; ;tcpv4.c: 1101: break;
"1101
[e $U 110  ]
[; ;tcpv4.c: 1102: case LAST_ACK:
"1102
[e :U 216 ]
[; ;tcpv4.c: 1104: switch (event)
"1104
[e $U 218  ]
[; ;tcpv4.c: 1105: {
"1105
{
[; ;tcpv4.c: 1106: case RCV_FINACK:
"1106
[e :U 219 ]
"1107
[e :U 220 ]
[; ;tcpv4.c: 1107: case RCV_ACK:
[; ;tcpv4.c: 1108: if ((currentTCB->destIP == receivedRemoteAddress) &&
[; ;tcpv4.c: 1109: (currentTCB->destPort == tcpHeader.sourcePort))
"1109
[e $ ! && == . *U _currentTCB 1 _receivedRemoteAddress == . *U _currentTCB 2 . _tcpHeader 0 221  ]
[; ;tcpv4.c: 1110: {
"1110
{
[; ;tcpv4.c: 1111: ;
[; ;tcpv4.c: 1112: nextState = CLOSED;
"1112
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 1113: TCB_Reset(currentTCB);
"1113
[e ( _TCB_Reset (1 _currentTCB ]
"1114
}
[e :U 221 ]
[; ;tcpv4.c: 1114: }
[; ;tcpv4.c: 1115: break;
"1115
[e $U 217  ]
[; ;tcpv4.c: 1116: case TIMEOUT:
"1116
[e :U 222 ]
[; ;tcpv4.c: 1117: if (currentTCB->timeoutsCount)
"1117
[e $ ! != -> . *U _currentTCB 23 `i -> -> -> 0 `i `uc `i 223  ]
[; ;tcpv4.c: 1118: {
"1118
{
[; ;tcpv4.c: 1119: TCP_Snd(currentTCB);
"1119
[e ( _TCP_Snd (1 _currentTCB ]
"1120
}
[; ;tcpv4.c: 1120: }else
[e $U 224  ]
[e :U 223 ]
[; ;tcpv4.c: 1121: {
"1121
{
[; ;tcpv4.c: 1123: currentTCB->flags = 0x04U;
"1123
[e = . *U _currentTCB 24 -> -> 4 `ui `uc ]
[; ;tcpv4.c: 1124: if(TCP_Snd(currentTCB))
"1124
[e $ ! != -> ( _TCP_Snd (1 _currentTCB `i -> -> -> 0 `i `uc `i 225  ]
[; ;tcpv4.c: 1125: {
"1125
{
[; ;tcpv4.c: 1126: nextState = CLOSE;
"1126
[e = _nextState . `E651 0 ]
[; ;tcpv4.c: 1127: TCB_Reset(currentTCB);
"1127
[e ( _TCB_Reset (1 _currentTCB ]
"1128
}
[e :U 225 ]
"1129
}
[e :U 224 ]
[; ;tcpv4.c: 1128: }
[; ;tcpv4.c: 1129: }
[; ;tcpv4.c: 1130: default:
"1130
[e :U 226 ]
[; ;tcpv4.c: 1131: break;
"1131
[e $U 217  ]
"1132
}
[; ;tcpv4.c: 1132: }
[e $U 217  ]
"1104
[e :U 218 ]
[e [\ _event , $ . `E651 7 219
 , $ . `E651 4 220
 , $ . `E651 12 222
 226 ]
"1132
[e :U 217 ]
[; ;tcpv4.c: 1133: break;
"1133
[e $U 110  ]
[; ;tcpv4.c: 1134: case TIME_WAIT:
"1134
[e :U 227 ]
[; ;tcpv4.c: 1135: ;
[; ;tcpv4.c: 1136: nextState = CLOSED;
"1136
[e = _nextState . `E638 0 ]
[; ;tcpv4.c: 1137: TCB_Reset(currentTCB);
"1137
[e ( _TCB_Reset (1 _currentTCB ]
[; ;tcpv4.c: 1138: break;
"1138
[e $U 110  ]
[; ;tcpv4.c: 1139: case CLOSED:
"1139
[e :U 228 ]
[; ;tcpv4.c: 1140: switch (event)
"1140
[e $U 230  ]
[; ;tcpv4.c: 1141: {
"1141
{
[; ;tcpv4.c: 1142: case ACTIVE_OPEN:
"1142
[e :U 231 ]
[; ;tcpv4.c: 1143: ;
[; ;tcpv4.c: 1145: currentTCB->timeout = ((unsigned long)1*2);
"1145
[e = . *U _currentTCB 21 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 1146: currentTCB->timeoutReloadValue = ((unsigned long)1*2);
"1146
[e = . *U _currentTCB 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 1147: currentTCB->timeoutsCount = (3u);
"1147
[e = . *U _currentTCB 23 -> -> 3 `ui `uc ]
[; ;tcpv4.c: 1148: currentTCB->flags = 0x02U;
"1148
[e = . *U _currentTCB 24 -> -> 2 `ui `uc ]
[; ;tcpv4.c: 1149: TCP_Snd(currentTCB);
"1149
[e ( _TCP_Snd (1 _currentTCB ]
[; ;tcpv4.c: 1150: nextState = SYN_SENT;
"1150
[e = _nextState . `E638 2 ]
[; ;tcpv4.c: 1151: ret = 1;
"1151
[e = _ret -> -> 1 `i `uc ]
[; ;tcpv4.c: 1152: break;
"1152
[e $U 229  ]
[; ;tcpv4.c: 1153: case PASIVE_OPEN:
"1153
[e :U 232 ]
[; ;tcpv4.c: 1154: ;
[; ;tcpv4.c: 1155: currentTCB->destIP = 0;
"1155
[e = . *U _currentTCB 1 -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 1156: currentTCB->destPort = 0;
"1156
[e = . *U _currentTCB 2 -> -> 0 `i `ui ]
[; ;tcpv4.c: 1157: nextState = LISTEN;
"1157
[e = _nextState . `E638 1 ]
[; ;tcpv4.c: 1158: ret = 1;
"1158
[e = _ret -> -> 1 `i `uc ]
[; ;tcpv4.c: 1159: break;
"1159
[e $U 229  ]
[; ;tcpv4.c: 1160: default:
"1160
[e :U 233 ]
[; ;tcpv4.c: 1161: break;
"1161
[e $U 229  ]
"1162
}
[; ;tcpv4.c: 1162: }
[e $U 229  ]
"1140
[e :U 230 ]
[e [\ _event , $ . `E651 1 231
 , $ . `E651 2 232
 233 ]
"1162
[e :U 229 ]
[; ;tcpv4.c: 1163: break;
"1163
[e $U 110  ]
[; ;tcpv4.c: 1164: default:
"1164
[e :U 234 ]
[; ;tcpv4.c: 1165: break;
"1165
[e $U 110  ]
"1166
}
[; ;tcpv4.c: 1166: }
[e $U 110  ]
"610
[e :U 111 ]
[e [\ . *U _currentTCB 17 , $ . `E638 1 112
 , $ . `E638 2 118
 , $ . `E638 3 143
 , $ . `E638 4 164
 , $ . `E638 5 187
 , $ . `E638 6 200
 , $ . `E638 7 210
 , $ . `E638 8 211
 , $ . `E638 9 216
 , $ . `E638 10 227
 , $ . `E638 0 228
 234 ]
"1166
[e :U 110 ]
[; ;tcpv4.c: 1167: currentTCB->connectionEvent = NOP;
"1167
[e = . *U _currentTCB 18 . `E651 13 ]
[; ;tcpv4.c: 1168: currentTCB->fsmState = nextState;
"1168
[e = . *U _currentTCB 17 _nextState ]
[; ;tcpv4.c: 1169: return ret;
"1169
[e ) _ret ]
[e $UE 109  ]
[; ;tcpv4.c: 1170: }
"1170
[e :UE 109 ]
}
"1173
[v _TCP_Init `(v ~T0 @X0 1 ef ]
"1174
{
[; ;tcpv4.c: 1173: void TCP_Init(void)
[; ;tcpv4.c: 1174: {
[e :U _TCP_Init ]
[f ]
[; ;tcpv4.c: 1175: tcbList = (0);
"1175
[e = _tcbList -> -> 0 `i `*S27 ]
[; ;tcpv4.c: 1176: tcbListSize = 0;
"1176
[e = _tcbListSize -> -> 0 `i `c ]
[; ;tcpv4.c: 1177: nextAvailablePort = (1024u);
"1177
[e = _nextAvailablePort -> 1024 `ui ]
[; ;tcpv4.c: 1178: nextSequenceNumber = 0;
"1178
[e = _nextSequenceNumber -> -> -> 0 `i `l `ul ]
[; ;tcpv4.c: 1179: }
"1179
[e :UE 235 ]
}
"1181
[v _TCP_SocketInit `(E177 ~T0 @X0 1 ef1`*S27 ]
"1182
{
[; ;tcpv4.c: 1181: tcbError_t TCP_SocketInit(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1182: {
[e :U _TCP_SocketInit ]
"1181
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1182
[f ]
"1183
[v _ret `E177 ~T0 @X0 1 a ]
[; ;tcpv4.c: 1183: tcbError_t ret = TCB_ERROR;
[e = _ret . `E177 0 ]
[; ;tcpv4.c: 1186: if(TCB_Check(tcbPtr) == 0)
"1186
[e $ ! == -> ( _TCB_Check (1 _tcbPtr `i -> 0 `i 237  ]
[; ;tcpv4.c: 1187: {
"1187
{
[; ;tcpv4.c: 1188: TCB_Reset(tcbPtr);
"1188
[e ( _TCB_Reset (1 _tcbPtr ]
[; ;tcpv4.c: 1190: tcbPtr->localWnd = 0;
"1190
[e = . *U _tcbPtr 8 -> -> 0 `i `ui ]
[; ;tcpv4.c: 1191: tcbPtr->mss = 1460u;
"1191
[e = . *U _tcbPtr 9 -> 1460 `ui ]
[; ;tcpv4.c: 1192: tcbPtr->fsmState = CLOSED;
"1192
[e = . *U _tcbPtr 17 . `E638 0 ]
[; ;tcpv4.c: 1193: tcbPtr->connectionEvent = NOP;
"1193
[e = . *U _tcbPtr 18 . `E651 13 ]
[; ;tcpv4.c: 1194: tcbPtr->rxBufferStart = (0);
"1194
[e = . *U _tcbPtr 10 -> -> 0 `i `*uc ]
[; ;tcpv4.c: 1195: tcbPtr->rxBufState = NO_BUFF;
"1195
[e = . *U _tcbPtr 12 . `E680 0 ]
[; ;tcpv4.c: 1196: tcbPtr->txBufferStart = (0);
"1196
[e = . *U _tcbPtr 13 -> -> 0 `i `*uc ]
[; ;tcpv4.c: 1197: tcbPtr->txBufferPtr = (0);
"1197
[e = . *U _tcbPtr 14 -> -> 0 `i `*uc ]
[; ;tcpv4.c: 1198: tcbPtr->bytesToSend = 0;
"1198
[e = . *U _tcbPtr 15 -> -> 0 `i `ui ]
[; ;tcpv4.c: 1199: tcbPtr->txBufState = NO_BUFF;
"1199
[e = . *U _tcbPtr 16 . `E680 0 ]
[; ;tcpv4.c: 1201: TCB_Insert(tcbPtr);
"1201
[e ( _TCB_Insert (1 _tcbPtr ]
[; ;tcpv4.c: 1202: ret = TCB_NO_ERROR;
"1202
[e = _ret . `E177 1 ]
"1203
}
[e :U 237 ]
[; ;tcpv4.c: 1203: }
[; ;tcpv4.c: 1204: return ret;
"1204
[e ) _ret ]
[e $UE 236  ]
[; ;tcpv4.c: 1205: }
"1205
[e :UE 236 ]
}
"1207
[v _TCP_SocketRemove `(E177 ~T0 @X0 1 ef1`*S27 ]
"1208
{
[; ;tcpv4.c: 1207: tcbError_t TCP_SocketRemove(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1208: {
[e :U _TCP_SocketRemove ]
"1207
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1208
[f ]
"1209
[v _ret `E177 ~T0 @X0 1 a ]
[; ;tcpv4.c: 1209: tcbError_t ret = TCB_ERROR;
[e = _ret . `E177 0 ]
[; ;tcpv4.c: 1212: if(TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED)
"1212
[e $ ! == -> ( _TCP_SocketPoll (1 _tcbPtr `i -> . `E667 1 `i 239  ]
[; ;tcpv4.c: 1213: {
"1213
{
[; ;tcpv4.c: 1214: TCB_Remove(tcbPtr);
"1214
[e ( _TCB_Remove (1 _tcbPtr ]
[; ;tcpv4.c: 1215: ret = TCB_NO_ERROR;
"1215
[e = _ret . `E177 1 ]
"1216
}
[e :U 239 ]
[; ;tcpv4.c: 1216: }
[; ;tcpv4.c: 1217: return ret;
"1217
[e ) _ret ]
[e $UE 238  ]
[; ;tcpv4.c: 1218: }
"1218
[e :UE 238 ]
}
"1220
[v _TCP_SocketPoll `(E667 ~T0 @X0 1 ef1`*S27 ]
"1221
{
[; ;tcpv4.c: 1220: socketState_t TCP_SocketPoll(tcpTCB_t *socket_ptr)
[; ;tcpv4.c: 1221: {
[e :U _TCP_SocketPoll ]
"1220
[v _socket_ptr `*S27 ~T0 @X0 1 r1 ]
"1221
[f ]
"1222
[v _tmpSocketState `E667 ~T0 @X0 1 a ]
[; ;tcpv4.c: 1222: socketState_t tmpSocketState;
[; ;tcpv4.c: 1224: tmpSocketState = NOT_A_SOCKET;
"1224
[e = _tmpSocketState . `E667 0 ]
[; ;tcpv4.c: 1226: if(TCB_Check(socket_ptr))
"1226
[e $ ! != -> ( _TCB_Check (1 _socket_ptr `i -> -> -> 0 `i `uc `i 241  ]
[; ;tcpv4.c: 1227: {
"1227
{
[; ;tcpv4.c: 1228: tmpSocketState = socket_ptr->socketState;
"1228
[e = _tmpSocketState . *U _socket_ptr 25 ]
"1229
}
[e :U 241 ]
[; ;tcpv4.c: 1229: }
[; ;tcpv4.c: 1231: return tmpSocketState;
"1231
[e ) _tmpSocketState ]
[e $UE 240  ]
[; ;tcpv4.c: 1232: }
"1232
[e :UE 240 ]
}
"1235
[v _TCP_Bind `(uc ~T0 @X0 1 ef2`*S27`ui ]
"1236
{
[; ;tcpv4.c: 1235: bool TCP_Bind(tcpTCB_t *tcbPtr, uint16_t port)
[; ;tcpv4.c: 1236: {
[e :U _TCP_Bind ]
"1235
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
[v _port `ui ~T0 @X0 1 r2 ]
"1236
[f ]
"1237
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1237: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1239: ;
[; ;tcpv4.c: 1241: if (TCB_Check(tcbPtr))
"1241
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 243  ]
[; ;tcpv4.c: 1242: {
"1242
{
[; ;tcpv4.c: 1243: tcbPtr->localPort = port;
"1243
[e = . *U _tcbPtr 0 _port ]
[; ;tcpv4.c: 1244: ret = 1;
"1244
[e = _ret -> -> 1 `i `uc ]
"1245
}
[e :U 243 ]
[; ;tcpv4.c: 1245: }
[; ;tcpv4.c: 1246: return ret;
"1246
[e ) _ret ]
[e $UE 242  ]
[; ;tcpv4.c: 1247: }
"1247
[e :UE 242 ]
}
"1250
[v _TCP_Listen `(uc ~T0 @X0 1 ef1`*S27 ]
"1251
{
[; ;tcpv4.c: 1250: bool TCP_Listen(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1251: {
[e :U _TCP_Listen ]
"1250
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1251
[f ]
"1252
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1252: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1254: ;
[; ;tcpv4.c: 1256: if (TCB_Check(tcbPtr))
"1256
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 245  ]
[; ;tcpv4.c: 1257: {
"1257
{
[; ;tcpv4.c: 1258: tcbPtr->connectionEvent = PASIVE_OPEN;
"1258
[e = . *U _tcbPtr 18 . `E651 2 ]
[; ;tcpv4.c: 1259: tcbPtr->socketState = SOCKET_IN_PROGRESS;
"1259
[e = . *U _tcbPtr 25 . `E667 2 ]
[; ;tcpv4.c: 1260: tcbPtr->localSeqno = nextSequenceNumber;
"1260
[e = . *U _tcbPtr 5 _nextSequenceNumber ]
[; ;tcpv4.c: 1261: currentTCB = tcbPtr;
"1261
[e = _currentTCB _tcbPtr ]
[; ;tcpv4.c: 1262: if (tcbPtr->localPort == 0)
"1262
[e $ ! == . *U _tcbPtr 0 -> -> 0 `i `ui 246  ]
[; ;tcpv4.c: 1263: {
"1263
{
[; ;tcpv4.c: 1264: tcbPtr->localPort = nextAvailablePort++;
"1264
[e = . *U _tcbPtr 0 ++ _nextAvailablePort -> -> 1 `i `ui ]
"1265
}
[e :U 246 ]
[; ;tcpv4.c: 1265: }
[; ;tcpv4.c: 1266: ret = TCP_FiniteStateMachine();
"1266
[e = _ret ( _TCP_FiniteStateMachine ..  ]
"1267
}
[e :U 245 ]
[; ;tcpv4.c: 1267: }
[; ;tcpv4.c: 1268: return ret;
"1268
[e ) _ret ]
[e $UE 244  ]
[; ;tcpv4.c: 1269: }
"1269
[e :UE 244 ]
}
"1272
[v _TCP_Connect `(uc ~T0 @X0 1 ef2`*S27`*S20 ]
"1273
{
[; ;tcpv4.c: 1272: bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr)
[; ;tcpv4.c: 1273: {
[e :U _TCP_Connect ]
"1272
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
[v _srvaddr `*S20 ~T0 @X0 1 r2 ]
"1273
[f ]
"1274
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1274: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1276: if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED)
"1276
[e $ ! == -> ( _TCP_SocketPoll (1 _tcbPtr `i -> . `E667 1 `i 248  ]
[; ;tcpv4.c: 1277: {
"1277
{
[; ;tcpv4.c: 1278: tcbPtr->destIP = srvaddr->addr.s_addr;
"1278
[e = . *U _tcbPtr 1 . . . *U _srvaddr 1 0 0 ]
[; ;tcpv4.c: 1279: tcbPtr->destPort = srvaddr->port;
"1279
[e = . *U _tcbPtr 2 . *U _srvaddr 0 ]
[; ;tcpv4.c: 1280: if(tcbPtr->localPort == 0)
"1280
[e $ ! == . *U _tcbPtr 0 -> -> 0 `i `ui 249  ]
[; ;tcpv4.c: 1281: {
"1281
{
[; ;tcpv4.c: 1283: tcbPtr->localPort = nextAvailablePort++;
"1283
[e = . *U _tcbPtr 0 ++ _nextAvailablePort -> -> 1 `i `ui ]
"1284
}
[e :U 249 ]
[; ;tcpv4.c: 1284: }
[; ;tcpv4.c: 1286: tcbPtr->socketState = SOCKET_IN_PROGRESS;
"1286
[e = . *U _tcbPtr 25 . `E667 2 ]
[; ;tcpv4.c: 1287: tcbPtr->localSeqno = nextSequenceNumber;
"1287
[e = . *U _tcbPtr 5 _nextSequenceNumber ]
[; ;tcpv4.c: 1288: tcbPtr->connectionEvent = ACTIVE_OPEN;
"1288
[e = . *U _tcbPtr 18 . `E651 1 ]
[; ;tcpv4.c: 1290: currentTCB = tcbPtr;
"1290
[e = _currentTCB _tcbPtr ]
[; ;tcpv4.c: 1291: ret = TCP_FiniteStateMachine();
"1291
[e = _ret ( _TCP_FiniteStateMachine ..  ]
"1292
}
[e :U 248 ]
[; ;tcpv4.c: 1292: }
[; ;tcpv4.c: 1294: return ret;
"1294
[e ) _ret ]
[e $UE 247  ]
[; ;tcpv4.c: 1295: }
"1295
[e :UE 247 ]
}
"1298
[v _TCP_Close `(uc ~T0 @X0 1 ef1`*S27 ]
"1299
{
[; ;tcpv4.c: 1298: bool TCP_Close(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1299: {
[e :U _TCP_Close ]
"1298
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1299
[f ]
"1300
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1300: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1302: ;
[; ;tcpv4.c: 1304: if (TCB_Check(tcbPtr))
"1304
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 251  ]
[; ;tcpv4.c: 1305: {
"1305
{
[; ;tcpv4.c: 1306: tcbPtr->connectionEvent = CLOSE;
"1306
[e = . *U _tcbPtr 18 . `E651 0 ]
[; ;tcpv4.c: 1308: tcbPtr->socketState = SOCKET_CLOSING;
"1308
[e = . *U _tcbPtr 25 . `E667 4 ]
[; ;tcpv4.c: 1311: currentTCB = tcbPtr;
"1311
[e = _currentTCB _tcbPtr ]
[; ;tcpv4.c: 1312: ret = TCP_FiniteStateMachine();
"1312
[e = _ret ( _TCP_FiniteStateMachine ..  ]
"1313
}
[e :U 251 ]
[; ;tcpv4.c: 1313: }
[; ;tcpv4.c: 1314: return ret;
"1314
[e ) _ret ]
[e $UE 250  ]
[; ;tcpv4.c: 1315: }
"1315
[e :UE 250 ]
}
"1318
[v _TCP_Send `(uc ~T0 @X0 1 ef3`*S27`*uc`ui ]
"1319
{
[; ;tcpv4.c: 1318: bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen)
[; ;tcpv4.c: 1319: {
[e :U _TCP_Send ]
"1318
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
[v _data `*uc ~T0 @X0 1 r2 ]
[v _dataLen `ui ~T0 @X0 1 r3 ]
"1319
[f ]
"1320
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1320: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1322: if (TCP_SocketPoll(tcbPtr) == SOCKET_CONNECTED)
"1322
[e $ ! == -> ( _TCP_SocketPoll (1 _tcbPtr `i -> . `E667 3 `i 253  ]
[; ;tcpv4.c: 1323: {
"1323
{
[; ;tcpv4.c: 1324: if (tcbPtr->txBufState == NO_BUFF)
"1324
[e $ ! == -> . *U _tcbPtr 16 `i -> . `E680 0 `i 254  ]
[; ;tcpv4.c: 1325: {
"1325
{
[; ;tcpv4.c: 1326: if (data != (0))
"1326
[e $ ! != _data -> -> 0 `i `*uc 255  ]
[; ;tcpv4.c: 1327: {
"1327
{
[; ;tcpv4.c: 1328: tcbPtr->txBufferStart = data;
"1328
[e = . *U _tcbPtr 13 _data ]
[; ;tcpv4.c: 1329: tcbPtr->txBufferPtr = tcbPtr->txBufferStart;
"1329
[e = . *U _tcbPtr 14 . *U _tcbPtr 13 ]
[; ;tcpv4.c: 1330: tcbPtr->bytesToSend = dataLen;
"1330
[e = . *U _tcbPtr 15 _dataLen ]
[; ;tcpv4.c: 1331: tcbPtr->txBufState = TX_BUFF_IN_USE;
"1331
[e = . *U _tcbPtr 16 . `E680 2 ]
[; ;tcpv4.c: 1333: tcbPtr->timeoutReloadValue = ((unsigned long)1*2);
"1333
[e = . *U _tcbPtr 22 -> * -> -> 1 `i `ul -> -> -> 2 `i `l `ul `ui ]
[; ;tcpv4.c: 1334: tcbPtr->timeoutsCount = (5u);
"1334
[e = . *U _tcbPtr 23 -> -> 5 `ui `uc ]
[; ;tcpv4.c: 1336: tcbPtr->flags = 0x10U;
"1336
[e = . *U _tcbPtr 24 -> -> 16 `ui `uc ]
[; ;tcpv4.c: 1338: TCP_Snd(tcbPtr);
"1338
[e ( _TCP_Snd (1 _tcbPtr ]
[; ;tcpv4.c: 1339: ret = 1;
"1339
[e = _ret -> -> 1 `i `uc ]
"1340
}
[e :U 255 ]
"1341
}
[e :U 254 ]
"1342
}
[e :U 253 ]
[; ;tcpv4.c: 1340: }
[; ;tcpv4.c: 1341: }
[; ;tcpv4.c: 1342: }
[; ;tcpv4.c: 1343: return ret;
"1343
[e ) _ret ]
[e $UE 252  ]
[; ;tcpv4.c: 1344: }
"1344
[e :UE 252 ]
}
"1347
[v _TCP_SendDone `(uc ~T0 @X0 1 ef1`*S27 ]
"1348
{
[; ;tcpv4.c: 1347: bool TCP_SendDone(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1348: {
[e :U _TCP_SendDone ]
"1347
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1348
[f ]
"1349
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1349: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1351: if(TCB_Check(tcbPtr))
"1351
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 257  ]
[; ;tcpv4.c: 1352: {
"1352
{
[; ;tcpv4.c: 1353: if (tcbPtr->txBufState == NO_BUFF)
"1353
[e $ ! == -> . *U _tcbPtr 16 `i -> . `E680 0 `i 258  ]
[; ;tcpv4.c: 1354: {
"1354
{
[; ;tcpv4.c: 1355: ret = 1;
"1355
[e = _ret -> -> 1 `i `uc ]
"1356
}
[e :U 258 ]
"1357
}
[e :U 257 ]
[; ;tcpv4.c: 1356: }
[; ;tcpv4.c: 1357: }
[; ;tcpv4.c: 1358: return ret;
"1358
[e ) _ret ]
[e $UE 256  ]
[; ;tcpv4.c: 1359: }
"1359
[e :UE 256 ]
}
"1361
[v _TCP_InsertRxBuffer `(uc ~T0 @X0 1 ef3`*S27`*uc`ui ]
"1362
{
[; ;tcpv4.c: 1361: bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t data_len)
[; ;tcpv4.c: 1362: {
[e :U _TCP_InsertRxBuffer ]
"1361
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
[v _data `*uc ~T0 @X0 1 r2 ]
[v _data_len `ui ~T0 @X0 1 r3 ]
"1362
[f ]
"1363
[v _ret `uc ~T0 @X0 1 a ]
[; ;tcpv4.c: 1363: bool ret = 0;
[e = _ret -> -> 0 `i `uc ]
[; ;tcpv4.c: 1365: if (TCB_Check(tcbPtr))
"1365
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 260  ]
[; ;tcpv4.c: 1366: {
"1366
{
[; ;tcpv4.c: 1367: if (tcbPtr->rxBufState == NO_BUFF)
"1367
[e $ ! == -> . *U _tcbPtr 12 `i -> . `E680 0 `i 261  ]
[; ;tcpv4.c: 1368: {
"1368
{
[; ;tcpv4.c: 1369: if (data != (0))
"1369
[e $ ! != _data -> -> 0 `i `*uc 262  ]
[; ;tcpv4.c: 1370: {
"1370
{
[; ;tcpv4.c: 1371: tcbPtr->rxBufferStart = data;
"1371
[e = . *U _tcbPtr 10 _data ]
[; ;tcpv4.c: 1372: tcbPtr->rxBufferPtr = tcbPtr->rxBufferStart;
"1372
[e = . *U _tcbPtr 11 . *U _tcbPtr 10 ]
[; ;tcpv4.c: 1373: tcbPtr->localWnd = data_len;
"1373
[e = . *U _tcbPtr 8 _data_len ]
[; ;tcpv4.c: 1374: tcbPtr->rxBufState = RX_BUFF_IN_USE;
"1374
[e = . *U _tcbPtr 12 . `E680 1 ]
[; ;tcpv4.c: 1375: ret = 1;
"1375
[e = _ret -> -> 1 `i `uc ]
"1376
}
[e :U 262 ]
"1377
}
[e :U 261 ]
"1378
}
[e :U 260 ]
[; ;tcpv4.c: 1376: }
[; ;tcpv4.c: 1377: }
[; ;tcpv4.c: 1378: }
[; ;tcpv4.c: 1379: return ret;
"1379
[e ) _ret ]
[e $UE 259  ]
[; ;tcpv4.c: 1380: }
"1380
[e :UE 259 ]
}
"1383
[v _TCP_GetReceivedData `(i ~T0 @X0 1 ef1`*S27 ]
"1384
{
[; ;tcpv4.c: 1383: int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1384: {
[e :U _TCP_GetReceivedData ]
"1383
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1384
[f ]
"1385
[v _ret `i ~T0 @X0 1 a ]
[; ;tcpv4.c: 1385: int16_t ret = 0;
[e = _ret -> 0 `i ]
[; ;tcpv4.c: 1387: if (TCB_Check(tcbPtr))
"1387
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 264  ]
[; ;tcpv4.c: 1388: {
"1388
{
[; ;tcpv4.c: 1389: if (tcbPtr->rxBufState == RX_BUFF_IN_USE)
"1389
[e $ ! == -> . *U _tcbPtr 12 `i -> . `E680 1 `i 265  ]
[; ;tcpv4.c: 1390: {
"1390
{
[; ;tcpv4.c: 1391: ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
"1391
[e = _ret -> / - -> . *U _tcbPtr 11 `x -> . *U _tcbPtr 10 `x -> -> # *U . *U _tcbPtr 11 `i `x `i ]
[; ;tcpv4.c: 1393: if (ret != 0)
"1393
[e $ ! != _ret -> 0 `i 266  ]
[; ;tcpv4.c: 1394: {
"1394
{
[; ;tcpv4.c: 1395: tcbPtr->localWnd = 0;
"1395
[e = . *U _tcbPtr 8 -> -> 0 `i `ui ]
[; ;tcpv4.c: 1396: tcbPtr->rxBufState = NO_BUFF;
"1396
[e = . *U _tcbPtr 12 . `E680 0 ]
"1397
}
[e :U 266 ]
"1398
}
[e :U 265 ]
"1399
}
[e :U 264 ]
[; ;tcpv4.c: 1397: }
[; ;tcpv4.c: 1398: }
[; ;tcpv4.c: 1399: }
[; ;tcpv4.c: 1400: return ret;
"1400
[e ) _ret ]
[e $UE 263  ]
[; ;tcpv4.c: 1401: }
"1401
[e :UE 263 ]
}
"1403
[v _TCP_GetRxLength `(i ~T0 @X0 1 ef1`*S27 ]
"1404
{
[; ;tcpv4.c: 1403: int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr)
[; ;tcpv4.c: 1404: {
[e :U _TCP_GetRxLength ]
"1403
[v _tcbPtr `*S27 ~T0 @X0 1 r1 ]
"1404
[f ]
"1405
[v _ret `i ~T0 @X0 1 a ]
[; ;tcpv4.c: 1405: int16_t ret = 0;
[e = _ret -> 0 `i ]
[; ;tcpv4.c: 1407: if (TCB_Check(tcbPtr))
"1407
[e $ ! != -> ( _TCB_Check (1 _tcbPtr `i -> -> -> 0 `i `uc `i 268  ]
[; ;tcpv4.c: 1408: {
"1408
{
[; ;tcpv4.c: 1409: if (tcbPtr->rxBufState == RX_BUFF_IN_USE)
"1409
[e $ ! == -> . *U _tcbPtr 12 `i -> . `E680 1 `i 269  ]
[; ;tcpv4.c: 1410: {
"1410
{
[; ;tcpv4.c: 1411: ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
"1411
[e = _ret -> / - -> . *U _tcbPtr 11 `x -> . *U _tcbPtr 10 `x -> -> # *U . *U _tcbPtr 11 `i `x `i ]
"1412
}
[e :U 269 ]
"1413
}
[e :U 268 ]
[; ;tcpv4.c: 1412: }
[; ;tcpv4.c: 1413: }
[; ;tcpv4.c: 1414: return ret;
"1414
[e ) _ret ]
[e $UE 267  ]
[; ;tcpv4.c: 1415: }
"1415
[e :UE 267 ]
}
"1417
[v _TCP_Update `(v ~T0 @X0 1 ef ]
"1418
{
[; ;tcpv4.c: 1417: void TCP_Update(void)
[; ;tcpv4.c: 1418: {
[e :U _TCP_Update ]
[f ]
"1419
[v _tcbPtr `*S27 ~T0 @X0 1 a ]
[; ;tcpv4.c: 1419: tcpTCB_t *tcbPtr;
[; ;tcpv4.c: 1420: tcbPtr = (0);
"1420
[e = _tcbPtr -> -> 0 `i `*S27 ]
"1421
[v _count `i ~T0 @X0 1 a ]
[; ;tcpv4.c: 1421: int count = 0;
[e = _count -> 0 `i ]
[; ;tcpv4.c: 1425: nextSequenceNumber++;
"1425
[e ++ _nextSequenceNumber -> -> -> 1 `i `l `ul ]
[; ;tcpv4.c: 1428: nextAvailablePort = nextAvailablePort + 1;
"1428
[e = _nextAvailablePort + _nextAvailablePort -> -> 1 `i `ui ]
[; ;tcpv4.c: 1429: if (nextAvailablePort < (1024u))
"1429
[e $ ! < _nextAvailablePort -> 1024 `ui 271  ]
[; ;tcpv4.c: 1430: {
"1430
{
[; ;tcpv4.c: 1431: nextAvailablePort = (1024u);
"1431
[e = _nextAvailablePort -> 1024 `ui ]
"1432
}
[e :U 271 ]
[; ;tcpv4.c: 1432: }
[; ;tcpv4.c: 1435: tcbPtr = tcbList;
"1435
[e = _tcbPtr _tcbList ]
[; ;tcpv4.c: 1436: while((tcbPtr != (0)) && (count < tcbListSize))
"1436
[e $U 272  ]
[e :U 273 ]
[; ;tcpv4.c: 1437: {
"1437
{
[; ;tcpv4.c: 1438: if (tcbPtr->timeout > 0)
"1438
[e $ ! > . *U _tcbPtr 21 -> -> 0 `i `ui 275  ]
[; ;tcpv4.c: 1439: {
"1439
{
[; ;tcpv4.c: 1440: ;
[; ;tcpv4.c: 1441: tcbPtr->timeout = tcbPtr->timeout - 1;
"1441
[e = . *U _tcbPtr 21 - . *U _tcbPtr 21 -> -> 1 `i `ui ]
[; ;tcpv4.c: 1443: if (tcbPtr->timeout == 0)
"1443
[e $ ! == . *U _tcbPtr 21 -> -> 0 `i `ui 276  ]
[; ;tcpv4.c: 1444: {
"1444
{
[; ;tcpv4.c: 1445: if (tcbPtr->timeoutsCount > 0)
"1445
[e $ ! > -> . *U _tcbPtr 23 `i -> 0 `i 277  ]
[; ;tcpv4.c: 1446: {
"1446
{
[; ;tcpv4.c: 1448: if (tcbPtr->connectionEvent == NOP)
"1448
[e $ ! == -> . *U _tcbPtr 18 `i -> . `E651 13 `i 278  ]
[; ;tcpv4.c: 1449: {
"1449
{
[; ;tcpv4.c: 1450: tcbPtr->timeout = tcbPtr->timeoutReloadValue;
"1450
[e = . *U _tcbPtr 21 . *U _tcbPtr 22 ]
[; ;tcpv4.c: 1451: tcbPtr->timeoutsCount = tcbPtr->timeoutsCount - 1;
"1451
[e = . *U _tcbPtr 23 -> - -> . *U _tcbPtr 23 `i -> 1 `i `uc ]
[; ;tcpv4.c: 1452: tcbPtr->connectionEvent = TIMEOUT;
"1452
[e = . *U _tcbPtr 18 . `E651 12 ]
[; ;tcpv4.c: 1453: currentTCB = tcbPtr;
"1453
[e = _currentTCB _tcbPtr ]
[; ;tcpv4.c: 1454: TCP_FiniteStateMachine();
"1454
[e ( _TCP_FiniteStateMachine ..  ]
"1455
}
[e :U 278 ]
"1456
}
[e :U 277 ]
"1457
}
[e :U 276 ]
"1458
}
[e :U 275 ]
[; ;tcpv4.c: 1455: }
[; ;tcpv4.c: 1456: }
[; ;tcpv4.c: 1457: }
[; ;tcpv4.c: 1458: }
[; ;tcpv4.c: 1459: tcbPtr = tcbPtr->nextTCB;
"1459
[e = _tcbPtr -> . *U _tcbPtr 19 `*S27 ]
[; ;tcpv4.c: 1460: count ++;
"1460
[e ++ _count -> 1 `i ]
"1461
}
[e :U 272 ]
"1436
[e $ && != _tcbPtr -> -> 0 `i `*S27 < _count -> _tcbListSize `i 273  ]
[e :U 274 ]
[; ;tcpv4.c: 1461: }
[; ;tcpv4.c: 1462: }
"1462
[e :UE 270 ]
}
