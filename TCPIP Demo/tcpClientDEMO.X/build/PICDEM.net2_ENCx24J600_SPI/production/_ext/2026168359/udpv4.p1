Version 3.2 HI-TECH Software Intermediate Code
[v F389 `(v ~T0 @X0 0 tf1`i ]
"61 ../../TCPIP Library/include\udpv4_port_handler_table.h
[s S26 `ui 1 `*F389 1 ]
[n S26 . portNumber callBack ]
"90 ../../TCPIP Library/include\dhcp_client.h
[v _DHCP_Handler `(v ~T0 @X0 0 ef1`i ]
"175 ../../TCPIP Library/include\tcpip_types.h
[s S11 `ui 1 `ui 1 `ui 1 `ui 1 ]
[n S11 . srcPort dstPort length checksum ]
"72 ../../TCPIP Library/source/udpv4.c
[c E367 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .. ]
[n E367 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED  ]
"77
[c E226 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 62 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 100 101 102 103 104 105 106 107 108 109 110 111 112 113 115 116 117 118 119 120 122 123 124 125 126 127 128 129 130 131 132 133 .. ]
[n E226 . HOPOPT ICMP IGMP GGP IPV4 ST TCP CBT EGP IGP BBN_RCC_MON NVP_II PUP ARGUS EMCON XNET CHAOS UDP MUX DCN_MEAS HMP PRM XNS_IDP TRUNK_1 TRUNK_2 LEAF_1 LEAF_2 RDP IRTP ISO_TP4 NETBLT MFE_NSP MERIT_INP DCCP THREEPC IDPR XTP DDP IDPR_CMTP TPpp IL IPV6_TUNNEL SDRP IPV6_Route IPV6_Frag IDRP RSVP GRE DSR BNA ESP AH I_NLSP SWIPE NARP MOBILE TLSP SKIP IPV6_ICMP IPV6_NoNxt IPV6_Opts CFTP SAT_EXPAK KRYPTOLAN RVD IPPC SAT_MON VISA IPCV CPNX CPHB WSN PVP BR_SAT_MON SUN_ND WB_MON WB_EXPAK ISO_IP VMTP SECURE_VMTP VINES TTP IPTM NSFNET_IGP DGP TCF EIGRP OSPFIGP Sprite_RPC LARP MTP AX25 IPIP MICP SCC_SP ETHERIP ENCAP GMTP IFMP PNNI PIM ARIS SCPS QNX A_N IPComp SNP Compaq_Peer IPX_in_IP VRRP PGM L2TP DDX IATP STP SRP UTI SM PTP ISIS FIRE CRTP CRUDP SSCOPMCE IPLT SPS PIPE SCTP FC  ]
"103 ../../TCPIP Library/include\ipv4.h
[v _IPv4_Start `(E367 ~T0 @X0 0 ef2`ul`E226 ]
"124 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_ResetByteCount `(v ~T0 @X0 0 ef ]
"109
[v _ETH_Write16 `(v ~T0 @X0 0 ef1`ui ]
"125
[v _ETH_GetByteCount `(ui ~T0 @X0 0 ef ]
"112
[v _ETH_Insert `(v ~T0 @X0 0 ef3`*uc`ui`ui ]
"69 ../../TCPIP Library/include\tcpip_types.h
[u S5 `ui 1 `ui 1 `ui 1 ]
[n S5 . type length tpid ]
"65
[s S4 `uc -> 6 `i `uc -> 6 `i `S5 1 ]
[n S4 . destinationMAC sourceMAC id ]
"89
[s S6 :4 `uc 1 :4 `uc 1 :2 `uc 1 :6 `uc 1 `ui 1 `ui 1 :5 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 `uc 1 `uc 1 `uc 1 `ui 1 `ul 1 `ul 1 ]
[n S6 . ihl version ecn dscp length identifcation fragmentOffsetHigh . dontFragment moreFragments fragmentOffsetLow timeToLive protocol headerCksm srcIpAddress dstIpAddress ]
"116 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_TxComputeChecksum `(ui ~T0 @X0 0 ef3`ui`ui`ui ]
"136 ../../TCPIP Library/include\ipv4.h
[v _IPV4_Send `(E367 ~T0 @X0 0 ef1`ui ]
"99 ../../TCPIP Library/ethernet_drivers\ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"100
[v _ETH_Read8 `(uc ~T0 @X0 0 ef ]
"101
[v _ETH_Read16 `(ui ~T0 @X0 0 ef ]
"102
[v _ETH_Read32 `(ul ~T0 @X0 0 ef ]
"108
[v _ETH_Write8 `(v ~T0 @X0 0 ef1`uc ]
"111
[v _ETH_Write32 `(v ~T0 @X0 0 ef1`ul ]
"107
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"16 C:\Program Files (x86)\Microchip\xc8\v1.35\include\conio.h
[v _putch `(v ~T0 @X0 0 ef1`uc ]
"70 ../../TCPIP Library/include\ipv4.h
[v _ipv4Header `S6 ~T0 @X0 0 e ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 25: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;stddef.h: 6: typedef int ptrdiff_t;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;include\tcpip_types.h: 51: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;include\tcpip_types.h: 53: typedef union
[; ;include\tcpip_types.h: 54: {
[; ;include\tcpip_types.h: 55: uint16_t value;
[; ;include\tcpip_types.h: 56: struct
[; ;include\tcpip_types.h: 57: {
[; ;include\tcpip_types.h: 58: unsigned int priorityCodePoint:3;
[; ;include\tcpip_types.h: 59: unsigned int dropEligible:1;
[; ;include\tcpip_types.h: 60: unsigned int vlanId:12;
[; ;include\tcpip_types.h: 61: };
[; ;include\tcpip_types.h: 62: } tci_t;
[; ;include\tcpip_types.h: 64: typedef struct
[; ;include\tcpip_types.h: 65: {
[; ;include\tcpip_types.h: 66: uint8_t destinationMAC[6];
[; ;include\tcpip_types.h: 67: uint8_t sourceMAC[6];
[; ;include\tcpip_types.h: 68: union
[; ;include\tcpip_types.h: 69: {
[; ;include\tcpip_types.h: 70: uint16_t type;
[; ;include\tcpip_types.h: 71: uint16_t length;
[; ;include\tcpip_types.h: 72: uint16_t tpid;
[; ;include\tcpip_types.h: 73: }id;
[; ;include\tcpip_types.h: 78: } ethernetFrame_t;
"80 ../../TCPIP Library/include\tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;include\tcpip_types.h: 80: uint8_t Control_Byte = 0x00;
[; ;include\tcpip_types.h: 88: typedef struct
[; ;include\tcpip_types.h: 89: {
[; ;include\tcpip_types.h: 90: unsigned ihl:4;
[; ;include\tcpip_types.h: 91: unsigned version:4;
[; ;include\tcpip_types.h: 92: unsigned ecn:2;
[; ;include\tcpip_types.h: 93: unsigned dscp:6;
[; ;include\tcpip_types.h: 94: uint16_t length;
[; ;include\tcpip_types.h: 95: uint16_t identifcation;
[; ;include\tcpip_types.h: 96: unsigned fragmentOffsetHigh:5;
[; ;include\tcpip_types.h: 97: unsigned :1;
[; ;include\tcpip_types.h: 98: unsigned dontFragment:1;
[; ;include\tcpip_types.h: 99: unsigned moreFragments:1;
[; ;include\tcpip_types.h: 100: uint8_t fragmentOffsetLow;
[; ;include\tcpip_types.h: 101: uint8_t timeToLive;
[; ;include\tcpip_types.h: 102: uint8_t protocol;
[; ;include\tcpip_types.h: 103: uint16_t headerCksm;
[; ;include\tcpip_types.h: 104: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 105: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 108: } ipv4Header_t;
[; ;include\tcpip_types.h: 111: typedef struct
[; ;include\tcpip_types.h: 112: {
[; ;include\tcpip_types.h: 113: uint32_t srcIpAddress;
[; ;include\tcpip_types.h: 114: uint32_t dstIpAddress;
[; ;include\tcpip_types.h: 115: uint8_t protocol;
[; ;include\tcpip_types.h: 116: uint8_t z;
[; ;include\tcpip_types.h: 117: uint16_t length;
[; ;include\tcpip_types.h: 118: } ipv4_pseudo_header_t;
[; ;include\tcpip_types.h: 120: typedef struct
[; ;include\tcpip_types.h: 121: {
[; ;include\tcpip_types.h: 122: union
[; ;include\tcpip_types.h: 123: {
[; ;include\tcpip_types.h: 124: uint16_t typeCode;
[; ;include\tcpip_types.h: 125: struct
[; ;include\tcpip_types.h: 126: {
[; ;include\tcpip_types.h: 127: uint8_t code;
[; ;include\tcpip_types.h: 128: uint8_t type;
[; ;include\tcpip_types.h: 129: };
[; ;include\tcpip_types.h: 130: };
[; ;include\tcpip_types.h: 131: uint16_t checksum;
[; ;include\tcpip_types.h: 132: uint16_t identifier;
[; ;include\tcpip_types.h: 133: uint16_t sequence;
[; ;include\tcpip_types.h: 135: } icmpHeader_t;
[; ;include\tcpip_types.h: 138: typedef enum
[; ;include\tcpip_types.h: 139: {
[; ;include\tcpip_types.h: 140: ECHO_REPLY = 0x0000,
[; ;include\tcpip_types.h: 142: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;include\tcpip_types.h: 143: DEST_HOST_UNREACHABLE = 0x0301,
[; ;include\tcpip_types.h: 144: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;include\tcpip_types.h: 145: DEST_PORT_UNREACHABLE = 0x0303,
[; ;include\tcpip_types.h: 146: FRAGMENTATION_REQUIRED = 0x0304,
[; ;include\tcpip_types.h: 147: SOURCE_ROUTE_FAILED = 0x0305,
[; ;include\tcpip_types.h: 148: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;include\tcpip_types.h: 149: SOURCE_HOST_ISOLATED = 0x0307,
[; ;include\tcpip_types.h: 150: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;include\tcpip_types.h: 151: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;include\tcpip_types.h: 152: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;include\tcpip_types.h: 153: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;include\tcpip_types.h: 154: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;include\tcpip_types.h: 155: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;include\tcpip_types.h: 156: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;include\tcpip_types.h: 158: SOURCE_QUENCH = 0x0400,
[; ;include\tcpip_types.h: 160: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;include\tcpip_types.h: 161: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;include\tcpip_types.h: 162: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;include\tcpip_types.h: 163: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;include\tcpip_types.h: 165: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;include\tcpip_types.h: 167: ECHO_REQUEST = 0x0800,
[; ;include\tcpip_types.h: 169: ROUTER_ADVERTISEMENT = 0x0900,
[; ;include\tcpip_types.h: 170: ROUTER_SOLICITATION = 0x0A00,
[; ;include\tcpip_types.h: 171: TRACEROUTE = 0x3000
[; ;include\tcpip_types.h: 172: } icmpTypeCodes_t;
[; ;include\tcpip_types.h: 174: typedef struct
[; ;include\tcpip_types.h: 175: {
[; ;include\tcpip_types.h: 176: uint16_t srcPort;
[; ;include\tcpip_types.h: 177: uint16_t dstPort;
[; ;include\tcpip_types.h: 178: uint16_t length;
[; ;include\tcpip_types.h: 179: uint16_t checksum;
[; ;include\tcpip_types.h: 180: } udpHeader_t;
[; ;include\tcpip_types.h: 182: typedef struct
[; ;include\tcpip_types.h: 183: {
[; ;include\tcpip_types.h: 184: uint16_t sourcePort;
[; ;include\tcpip_types.h: 185: uint16_t destPort;
[; ;include\tcpip_types.h: 186: uint32_t sequenceNumber;
[; ;include\tcpip_types.h: 187: uint32_t ackNumber;
[; ;include\tcpip_types.h: 188: union{
[; ;include\tcpip_types.h: 189: uint8_t byte13;
[; ;include\tcpip_types.h: 190: struct{
[; ;include\tcpip_types.h: 191: uint8_t ns:1;
[; ;include\tcpip_types.h: 192: uint8_t reserved:3;
[; ;include\tcpip_types.h: 193: uint8_t dataOffset:4;
[; ;include\tcpip_types.h: 194: };
[; ;include\tcpip_types.h: 195: };
[; ;include\tcpip_types.h: 197: union{
[; ;include\tcpip_types.h: 198: uint8_t flags;
[; ;include\tcpip_types.h: 199: struct{
[; ;include\tcpip_types.h: 200: uint8_t fin:1;
[; ;include\tcpip_types.h: 201: uint8_t syn:1;
[; ;include\tcpip_types.h: 202: uint8_t rst:1;
[; ;include\tcpip_types.h: 203: uint8_t psh:1;
[; ;include\tcpip_types.h: 204: uint8_t ack:1;
[; ;include\tcpip_types.h: 205: uint8_t urg:1;
[; ;include\tcpip_types.h: 206: uint8_t ece:1;
[; ;include\tcpip_types.h: 207: uint8_t cwr:1;
[; ;include\tcpip_types.h: 208: };
[; ;include\tcpip_types.h: 209: };
[; ;include\tcpip_types.h: 211: uint16_t windowSize;
[; ;include\tcpip_types.h: 212: uint16_t checksum;
[; ;include\tcpip_types.h: 213: uint16_t urgentPtr;
[; ;include\tcpip_types.h: 217: } tcpHeader_t;
[; ;include\tcpip_types.h: 219: typedef struct
[; ;include\tcpip_types.h: 220: {
[; ;include\tcpip_types.h: 221: unsigned int version:4;
[; ;include\tcpip_types.h: 222: unsigned int trafficClass:8;
[; ;include\tcpip_types.h: 223: unsigned int flowLabel:20;
[; ;include\tcpip_types.h: 224: uint16_t payloadLength;
[; ;include\tcpip_types.h: 225: uint8_t nextHeader;
[; ;include\tcpip_types.h: 226: uint8_t hopLimit;
[; ;include\tcpip_types.h: 227: uint8_t srcAddress[8];
[; ;include\tcpip_types.h: 228: uint8_t dstAddress[8];
[; ;include\tcpip_types.h: 230: } ipv6Header_t;
[; ;include\tcpip_types.h: 233: typedef enum
[; ;include\tcpip_types.h: 234: {
[; ;include\tcpip_types.h: 235: HOPOPT = 0,
[; ;include\tcpip_types.h: 236: ICMP = 1,
[; ;include\tcpip_types.h: 237: IGMP = 2,
[; ;include\tcpip_types.h: 238: GGP = 3,
[; ;include\tcpip_types.h: 239: IPV4 = 4,
[; ;include\tcpip_types.h: 240: ST = 5,
[; ;include\tcpip_types.h: 241: TCP = 6,
[; ;include\tcpip_types.h: 242: CBT = 7,
[; ;include\tcpip_types.h: 243: EGP = 8,
[; ;include\tcpip_types.h: 244: IGP = 9,
[; ;include\tcpip_types.h: 245: BBN_RCC_MON = 10,
[; ;include\tcpip_types.h: 246: NVP_II = 11,
[; ;include\tcpip_types.h: 247: PUP = 12,
[; ;include\tcpip_types.h: 248: ARGUS = 13,
[; ;include\tcpip_types.h: 249: EMCON = 14,
[; ;include\tcpip_types.h: 250: XNET = 15,
[; ;include\tcpip_types.h: 251: CHAOS = 16,
[; ;include\tcpip_types.h: 252: UDP = 17,
[; ;include\tcpip_types.h: 253: MUX = 18,
[; ;include\tcpip_types.h: 254: DCN_MEAS = 19,
[; ;include\tcpip_types.h: 255: HMP = 20,
[; ;include\tcpip_types.h: 256: PRM = 21,
[; ;include\tcpip_types.h: 257: XNS_IDP = 22,
[; ;include\tcpip_types.h: 258: TRUNK_1 = 23,
[; ;include\tcpip_types.h: 259: TRUNK_2 = 24,
[; ;include\tcpip_types.h: 260: LEAF_1 = 25,
[; ;include\tcpip_types.h: 261: LEAF_2 = 26,
[; ;include\tcpip_types.h: 262: RDP = 27,
[; ;include\tcpip_types.h: 263: IRTP = 28,
[; ;include\tcpip_types.h: 264: ISO_TP4 = 29,
[; ;include\tcpip_types.h: 265: NETBLT = 30,
[; ;include\tcpip_types.h: 266: MFE_NSP = 31,
[; ;include\tcpip_types.h: 267: MERIT_INP = 32,
[; ;include\tcpip_types.h: 268: DCCP = 33,
[; ;include\tcpip_types.h: 269: THREEPC = 34,
[; ;include\tcpip_types.h: 270: IDPR = 35,
[; ;include\tcpip_types.h: 271: XTP = 36,
[; ;include\tcpip_types.h: 272: DDP = 37,
[; ;include\tcpip_types.h: 273: IDPR_CMTP = 38,
[; ;include\tcpip_types.h: 274: TPpp = 39,
[; ;include\tcpip_types.h: 275: IL = 40,
[; ;include\tcpip_types.h: 276: IPV6_TUNNEL = 41,
[; ;include\tcpip_types.h: 277: SDRP = 42,
[; ;include\tcpip_types.h: 278: IPV6_Route = 43,
[; ;include\tcpip_types.h: 279: IPV6_Frag = 44,
[; ;include\tcpip_types.h: 280: IDRP = 45,
[; ;include\tcpip_types.h: 281: RSVP = 46,
[; ;include\tcpip_types.h: 282: GRE = 47,
[; ;include\tcpip_types.h: 283: DSR = 48,
[; ;include\tcpip_types.h: 284: BNA = 49,
[; ;include\tcpip_types.h: 285: ESP = 50,
[; ;include\tcpip_types.h: 286: AH = 51,
[; ;include\tcpip_types.h: 287: I_NLSP = 52,
[; ;include\tcpip_types.h: 288: SWIPE = 53,
[; ;include\tcpip_types.h: 289: NARP = 54,
[; ;include\tcpip_types.h: 290: MOBILE = 55,
[; ;include\tcpip_types.h: 291: TLSP = 56,
[; ;include\tcpip_types.h: 292: SKIP = 57,
[; ;include\tcpip_types.h: 293: IPV6_ICMP = 58,
[; ;include\tcpip_types.h: 294: IPV6_NoNxt = 59,
[; ;include\tcpip_types.h: 295: IPV6_Opts = 60,
[; ;include\tcpip_types.h: 296: CFTP = 62,
[; ;include\tcpip_types.h: 297: SAT_EXPAK = 64,
[; ;include\tcpip_types.h: 298: KRYPTOLAN = 65,
[; ;include\tcpip_types.h: 299: RVD = 66,
[; ;include\tcpip_types.h: 300: IPPC = 67,
[; ;include\tcpip_types.h: 301: SAT_MON = 69,
[; ;include\tcpip_types.h: 302: VISA = 70,
[; ;include\tcpip_types.h: 303: IPCV = 71,
[; ;include\tcpip_types.h: 304: CPNX = 72,
[; ;include\tcpip_types.h: 305: CPHB = 73,
[; ;include\tcpip_types.h: 306: WSN = 74,
[; ;include\tcpip_types.h: 307: PVP = 75,
[; ;include\tcpip_types.h: 308: BR_SAT_MON = 76,
[; ;include\tcpip_types.h: 309: SUN_ND = 77,
[; ;include\tcpip_types.h: 310: WB_MON = 78,
[; ;include\tcpip_types.h: 311: WB_EXPAK = 79,
[; ;include\tcpip_types.h: 312: ISO_IP = 80,
[; ;include\tcpip_types.h: 313: VMTP = 81,
[; ;include\tcpip_types.h: 314: SECURE_VMTP = 82,
[; ;include\tcpip_types.h: 315: VINES = 83,
[; ;include\tcpip_types.h: 316: TTP = 84,
[; ;include\tcpip_types.h: 317: IPTM = 84,
[; ;include\tcpip_types.h: 318: NSFNET_IGP = 85,
[; ;include\tcpip_types.h: 319: DGP = 86,
[; ;include\tcpip_types.h: 320: TCF = 87,
[; ;include\tcpip_types.h: 321: EIGRP = 88,
[; ;include\tcpip_types.h: 322: OSPFIGP = 89,
[; ;include\tcpip_types.h: 323: Sprite_RPC = 90,
[; ;include\tcpip_types.h: 324: LARP = 91,
[; ;include\tcpip_types.h: 325: MTP = 92,
[; ;include\tcpip_types.h: 326: AX25 = 93,
[; ;include\tcpip_types.h: 327: IPIP = 94,
[; ;include\tcpip_types.h: 328: MICP = 95,
[; ;include\tcpip_types.h: 329: SCC_SP = 96,
[; ;include\tcpip_types.h: 330: ETHERIP = 97,
[; ;include\tcpip_types.h: 331: ENCAP = 98,
[; ;include\tcpip_types.h: 332: GMTP = 100,
[; ;include\tcpip_types.h: 333: IFMP = 101,
[; ;include\tcpip_types.h: 334: PNNI = 102,
[; ;include\tcpip_types.h: 335: PIM = 103,
[; ;include\tcpip_types.h: 336: ARIS = 104,
[; ;include\tcpip_types.h: 337: SCPS = 105,
[; ;include\tcpip_types.h: 338: QNX = 106,
[; ;include\tcpip_types.h: 339: A_N = 107,
[; ;include\tcpip_types.h: 340: IPComp = 108,
[; ;include\tcpip_types.h: 341: SNP = 109,
[; ;include\tcpip_types.h: 342: Compaq_Peer = 110,
[; ;include\tcpip_types.h: 343: IPX_in_IP = 111,
[; ;include\tcpip_types.h: 344: VRRP = 112,
[; ;include\tcpip_types.h: 345: PGM = 113,
[; ;include\tcpip_types.h: 346: L2TP = 115,
[; ;include\tcpip_types.h: 347: DDX = 116,
[; ;include\tcpip_types.h: 348: IATP = 117,
[; ;include\tcpip_types.h: 349: STP = 118,
[; ;include\tcpip_types.h: 350: SRP = 119,
[; ;include\tcpip_types.h: 351: UTI = 120,
[; ;include\tcpip_types.h: 353: SM = 122,
[; ;include\tcpip_types.h: 354: PTP = 123,
[; ;include\tcpip_types.h: 355: ISIS = 124,
[; ;include\tcpip_types.h: 356: FIRE = 125,
[; ;include\tcpip_types.h: 357: CRTP = 126,
[; ;include\tcpip_types.h: 358: CRUDP = 127,
[; ;include\tcpip_types.h: 359: SSCOPMCE = 128,
[; ;include\tcpip_types.h: 360: IPLT = 129,
[; ;include\tcpip_types.h: 361: SPS = 130,
[; ;include\tcpip_types.h: 362: PIPE = 131,
[; ;include\tcpip_types.h: 363: SCTP = 132,
[; ;include\tcpip_types.h: 364: FC = 133
[; ;include\tcpip_types.h: 365: } ipProtocolNumbers;
[; ;include\tcpip_types.h: 367: typedef struct
[; ;include\tcpip_types.h: 368: {
[; ;include\tcpip_types.h: 369: union{
[; ;include\tcpip_types.h: 370: uint32_t s_addr;
[; ;include\tcpip_types.h: 371: uint8_t s_addr_byte[4];
[; ;include\tcpip_types.h: 372: };
[; ;include\tcpip_types.h: 373: }inAddr_t;
[; ;include\tcpip_types.h: 375: typedef struct
[; ;include\tcpip_types.h: 376: {
[; ;include\tcpip_types.h: 377: uint16_t port;
[; ;include\tcpip_types.h: 378: inAddr_t addr;
[; ;include\tcpip_types.h: 379: }sockaddr_in_t;
[; ;include\tcpip_types.h: 381: typedef enum
[; ;include\tcpip_types.h: 382: {
[; ;include\tcpip_types.h: 383: ERROR =0,
[; ;include\tcpip_types.h: 384: SUCCESS,
[; ;include\tcpip_types.h: 385: LINK_NOT_FOUND,
[; ;include\tcpip_types.h: 386: BUFFER_BUSY,
[; ;include\tcpip_types.h: 387: TX_LOGIC_NOT_IDLE,
[; ;include\tcpip_types.h: 388: MAC_NOT_FOUND,
[; ;include\tcpip_types.h: 389: IP_WRONG_VERSION,
[; ;include\tcpip_types.h: 390: IPV4_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 391: DEST_IP_NOT_MATCHED,
[; ;include\tcpip_types.h: 392: ICMP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 393: UDP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 394: TCP_CHECKSUM_FAILS,
[; ;include\tcpip_types.h: 395: DMA_TIMEOUT,
[; ;include\tcpip_types.h: 396: PORT_NOT_AVAILABLE,
[; ;include\tcpip_types.h: 397: ARP_IP_NOT_MATCHED
[; ;include\tcpip_types.h: 398: }error_msg;
[; ;include\tcpip_types.h: 400: typedef struct
[; ;include\tcpip_types.h: 401: {
[; ;include\tcpip_types.h: 402: inAddr_t dest_addr;
[; ;include\tcpip_types.h: 403: }destIP_t;
[; ;include\tcpip_types.h: 406: typedef int8_t socklistsize_t;
[; ;include\tcpip_types.h: 408: typedef void (*ip_receive_function_ptr)(int);
[; ;include\mac_address.h: 49: typedef union
[; ;include\mac_address.h: 50: {
[; ;include\mac_address.h: 51: uint8_t mac_array[6];
[; ;include\mac_address.h: 52: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;include\mac_address.h: 53: } mac48Address_t;
[; ;include\mac_address.h: 55: extern const mac48Address_t broadcastMAC;
[; ;include\mac_address.h: 56: extern const mac48Address_t macAddress;
[; ;include\mac_address.h: 58: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_drivers\ethernet_driver.h: 51: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 52: {
[; ;ethernet_drivers\ethernet_driver.h: 53: uint16_t byteCount;
[; ;ethernet_drivers\ethernet_driver.h: 54: unsigned long_drop_event:1;
[; ;ethernet_drivers\ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 56: unsigned excessCarrierEvent:1;
[; ;ethernet_drivers\ethernet_driver.h: 57: unsigned :1;
[; ;ethernet_drivers\ethernet_driver.h: 58: unsigned crcError:1;
[; ;ethernet_drivers\ethernet_driver.h: 59: unsigned lengthCheckError:1;
[; ;ethernet_drivers\ethernet_driver.h: 60: unsigned lengthLongError:1;
[; ;ethernet_drivers\ethernet_driver.h: 61: unsigned rxOK:1;
[; ;ethernet_drivers\ethernet_driver.h: 62: unsigned rxMulticast:1;
[; ;ethernet_drivers\ethernet_driver.h: 63: unsigned rxBroadcast:1;
[; ;ethernet_drivers\ethernet_driver.h: 64: unsigned dribbleNibble:1;
[; ;ethernet_drivers\ethernet_driver.h: 65: unsigned controlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 66: unsigned pauseControlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 67: unsigned unknownContrlFrame:1;
[; ;ethernet_drivers\ethernet_driver.h: 68: unsigned vlanTagPresent:1;
[; ;ethernet_drivers\ethernet_driver.h: 69: unsigned zero:1;
[; ;ethernet_drivers\ethernet_driver.h: 70: }receiveStatusVector_t;
[; ;ethernet_drivers\ethernet_driver.h: 72: typedef struct
[; ;ethernet_drivers\ethernet_driver.h: 73: {
[; ;ethernet_drivers\ethernet_driver.h: 74: unsigned error:1;
[; ;ethernet_drivers\ethernet_driver.h: 75: unsigned pktReady:1;
[; ;ethernet_drivers\ethernet_driver.h: 76: unsigned up:1;
[; ;ethernet_drivers\ethernet_driver.h: 77: unsigned idle:1;
[; ;ethernet_drivers\ethernet_driver.h: 78: unsigned linkChange:1;
[; ;ethernet_drivers\ethernet_driver.h: 79: unsigned bufferBusy:1;
[; ;ethernet_drivers\ethernet_driver.h: 80: unsigned :2;
[; ;ethernet_drivers\ethernet_driver.h: 81: uint16_t TXPacketSize;
[; ;ethernet_drivers\ethernet_driver.h: 82: uint16_t saveRDPT;
[; ;ethernet_drivers\ethernet_driver.h: 83: uint16_t saveWRPT;
[; ;ethernet_drivers\ethernet_driver.h: 84: } ethernetDriver_t;
[; ;ethernet_drivers\ethernet_driver.h: 86: extern volatile ethernetDriver_t ethData;
[; ;ethernet_drivers\ethernet_driver.h: 92: void ETH_Init(void);
[; ;ethernet_drivers\ethernet_driver.h: 93: void ETH_EventHandler(void);
[; ;ethernet_drivers\ethernet_driver.h: 94: void ETH_NextPacketUpdate();
[; ;ethernet_drivers\ethernet_driver.h: 95: void ETH_ResetReceiver(void);
[; ;ethernet_drivers\ethernet_driver.h: 96: void ETH_SendSystemReset(void);
[; ;ethernet_drivers\ethernet_driver.h: 99: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 100: uint8_t ETH_Read8(void);
[; ;ethernet_drivers\ethernet_driver.h: 101: uint16_t ETH_Read16(void);
[; ;ethernet_drivers\ethernet_driver.h: 102: uint32_t ETH_Read32(void);
[; ;ethernet_drivers\ethernet_driver.h: 103: void ETH_Dump(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 104: void ETH_Flush(void);
[; ;ethernet_drivers\ethernet_driver.h: 106: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_drivers\ethernet_driver.h: 107: uint16_t ETH_WriteBlock(void *, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 108: void ETH_Write8(uint8_t);
[; ;ethernet_drivers\ethernet_driver.h: 109: void ETH_Write16(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 110: void ETH_Write24(uint24_t data);
[; ;ethernet_drivers\ethernet_driver.h: 111: void ETH_Write32(uint32_t);
[; ;ethernet_drivers\ethernet_driver.h: 112: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 113: error_msg ETH_Copy(uint16_t);
[; ;ethernet_drivers\ethernet_driver.h: 114: error_msg ETH_Send(void);
[; ;ethernet_drivers\ethernet_driver.h: 116: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 117: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_drivers\ethernet_driver.h: 119: void ETH_GetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 120: void ETH_SetMAC(uint8_t *);
[; ;ethernet_drivers\ethernet_driver.h: 122: void ETH_SaveRDPT(void);
[; ;ethernet_drivers\ethernet_driver.h: 124: void ETH_ResetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 125: uint16_t ETH_GetByteCount(void);
[; ;ethernet_drivers\ethernet_driver.h: 127: bool ETH_CheckLinkUp();
[; ;include\ipv4.h: 63: extern uint32_t ipv4Address;
[; ;include\ipv4.h: 64: extern uint32_t dstIPv4Address;
[; ;include\ipv4.h: 65: extern uint32_t ipv4Gateway;
[; ;include\ipv4.h: 66: extern uint8_t gatewayMAC[6];
[; ;include\ipv4.h: 67: extern uint32_t ipv4DNS[2];
[; ;include\ipv4.h: 68: extern uint32_t ipv4SubnetMask;
[; ;include\ipv4.h: 69: extern uint32_t ipv4Router;
[; ;include\ipv4.h: 70: extern ipv4Header_t ipv4Header;
[; ;include\ipv4.h: 79: void IPV4_Init(void);
[; ;include\ipv4.h: 86: error_msg IPV4_Packet(void);
[; ;include\ipv4.h: 103: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;include\ipv4.h: 111: uint32_t IPV4_GetMyIP(void);
[; ;include\ipv4.h: 122: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;include\ipv4.h: 136: error_msg IPV4_Send(uint16_t payloadLength);
"67 ../../TCPIP Library/include\tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 56 `c
-> 70 `c
-> 57 `c
-> 55 `c
-> 74 `c
-> 54 `c
-> 48 `c
-> 32 `c
-> 69 `c
-> 84 `c
-> 72 `c
-> 69 `c
-> 82 `c
-> 78 `c
-> 69 `c
-> 84 `c
-> 0 `c
..
]
[; ;include\tcpip_config.h: 67: const char dhcpName[] = "PIC18F97J60 ETHERNET";
[; ;include\dhcp_client.h: 58: typedef enum
[; ;include\dhcp_client.h: 59: {
[; ;include\dhcp_client.h: 60: DHCP_DISCOVER = 1,
[; ;include\dhcp_client.h: 61: DHCP_OFFER, DHCP_REQUEST, DHCP_DECLINE, DHCP_ACK, DHCP_NACK, DHCP_RELEASE,
[; ;include\dhcp_client.h: 62: DHCP_INFORM, DHCP_FORCERENEW, DHCP_LEASEQUERY, DHCP_LEASEUNASSIGNED, DHCP_LEASEUNKNOWN,
[; ;include\dhcp_client.h: 63: DHCP_LEASEACTIVE, DHCP_BULKLEASEQUERY, DHCP_LEASEQUERYDONE
[; ;include\dhcp_client.h: 64: }dhcp_type;
[; ;include\dhcp_client.h: 66: typedef enum
[; ;include\dhcp_client.h: 67: {
[; ;include\dhcp_client.h: 68: INIT = 1, INIT_REBOOT, SELECTING, REQUESTING, BOUND
[; ;include\dhcp_client.h: 69: }dhcp_client_state;
[; ;include\dhcp_client.h: 81: void DHCP_Request(dhcp_type);
[; ;include\dhcp_client.h: 90: void DHCP_Handler(int);
[; ;include\dhcp_client.h: 96: void DHCP_Manage(void);
[; ;include\dhcp_client.h: 104: void DHCP_WriteZeros(uint16_t length);
[; ;include\udpv4.h: 81: error_msg UDP_Start(uint32_t destIP, uint16_t destPort, uint16_t srcPort);
[; ;include\udpv4.h: 95: error_msg UDP_Send();
[; ;include\udpv4.h: 103: inline void UDP_Write8(uint8_t data);
[; ;include\udpv4.h: 111: inline void UDP_Write16(uint16_t data);
[; ;include\udpv4.h: 119: inline void UDP_Write32(uint32_t data);
[; ;include\udpv4.h: 130: inline void UDP_WriteBlock(void* data, uint16_t length);
[; ;include\udpv4.h: 138: inline uint8_t UDP_Read8(void);
[; ;include\udpv4.h: 146: inline uint16_t UDP_Read16(void);
[; ;include\udpv4.h: 154: inline uint32_t UDP_Read32(void);
[; ;include\udpv4.h: 167: uint16_t UDP_ReadBlock(void* data, uint16_t length);
[; ;include\udpv4.h: 175: uint16_t UDP_GetDestPort(void);
[; ;include\udpv4.h: 183: uint32_t UDP_GetDestIP(void);
[; ;include\udpv4.h: 195: error_msg UDP_Receive(uint16_t udpcksm);
[; ;include\udpv4_port_handler_table.h: 54: void udp_test(int len);
[; ;include\udpv4_port_handler_table.h: 55: extern void DEMO_UDP_Recv(int len);
[; ;include\udpv4_port_handler_table.h: 56: extern void DEMO_UDP_IdlePkt(int length);
[; ;include\udpv4_port_handler_table.h: 60: typedef struct
[; ;include\udpv4_port_handler_table.h: 61: {
[; ;include\udpv4_port_handler_table.h: 62: uint16_t portNumber;
[; ;include\udpv4_port_handler_table.h: 63: ip_receive_function_ptr callBack;
[; ;include\udpv4_port_handler_table.h: 64: } udp_handler_t;
"66 ../../TCPIP Library/include\udpv4_port_handler_table.h
[v _UDP_CallBackTable `CS26 ~T0 @X0 -> 0 `x e ]
[i _UDP_CallBackTable
:U ..
:U ..
"72
-> -> 68 `i `ui
&U _DHCP_Handler
..
..
]
[; ;include\udpv4_port_handler_table.h: 66: const udp_handler_t UDP_CallBackTable[] = {
[; ;include\udpv4_port_handler_table.h: 72: {68, &DHCP_Handler}
[; ;include\udpv4_port_handler_table.h: 73: };
[; ;include\network.h: 62: void Network_Init(void);
[; ;include\network.h: 63: void Network_Read(void);
[; ;include\network.h: 64: void Network_Manage(void);
[; ;include\network.h: 65: void Network_WaitForLink(void);
"64 ../../TCPIP Library/source/udpv4.c
[v _destPort `ui ~T0 @X0 1 s ]
[; ;udpv4.c: 64: static uint16_t destPort;
"65
[v _udpHeader `S11 ~T0 @X0 1 s ]
[; ;udpv4.c: 65: static udpHeader_t udpHeader;
"71
[v _UDP_Start `(E367 ~T0 @X0 1 ef3`ul`ui`ui ]
"72
{
[; ;udpv4.c: 71: error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort)
[; ;udpv4.c: 72: {
[e :U _UDP_Start ]
"71
[v _destIP `ul ~T0 @X0 1 r1 ]
[v _srcPort `ui ~T0 @X0 1 r2 ]
[v _dstPort `ui ~T0 @X0 1 r3 ]
"72
[f ]
"74
[v _ret `E367 ~T0 @X0 1 a ]
[; ;udpv4.c: 74: error_msg ret = ERROR;
[e = _ret . `E367 0 ]
[; ;udpv4.c: 77: ret = IPv4_Start(destIP,UDP);
"77
[e = _ret ( _IPv4_Start (2 , _destIP . `E226 17 ]
[; ;udpv4.c: 78: if(ret == SUCCESS)
"78
[e $ ! == -> _ret `i -> . `E367 1 `i 28  ]
[; ;udpv4.c: 79: {
"79
{
[; ;udpv4.c: 81: ETH_ResetByteCount();
"81
[e ( _ETH_ResetByteCount ..  ]
[; ;udpv4.c: 84: ETH_Write16(srcPort);
"84
[e ( _ETH_Write16 (1 _srcPort ]
[; ;udpv4.c: 87: ETH_Write16(dstPort);
"87
[e ( _ETH_Write16 (1 _dstPort ]
[; ;udpv4.c: 90: ETH_Write16(0);
"90
[e ( _ETH_Write16 (1 -> -> 0 `i `ui ]
[; ;udpv4.c: 93: ETH_Write16(0);
"93
[e ( _ETH_Write16 (1 -> -> 0 `i `ui ]
"95
}
[e :U 28 ]
[; ;udpv4.c: 95: }
[; ;udpv4.c: 96: return ret;
"96
[e ) _ret ]
[e $UE 27  ]
[; ;udpv4.c: 97: }
"97
[e :UE 27 ]
}
"99
[v _UDP_Send `(E367 ~T0 @X0 1 ef ]
"100
{
[; ;udpv4.c: 99: error_msg UDP_Send()
[; ;udpv4.c: 100: {
[e :U _UDP_Send ]
[f ]
"101
[v _udpLength `ui ~T0 @X0 1 a ]
"102
[v _cksm `ui ~T0 @X0 1 a ]
"103
[v _ret `E367 ~T0 @X0 1 a ]
[; ;udpv4.c: 101: uint16_t udpLength;
[; ;udpv4.c: 102: uint16_t cksm;
[; ;udpv4.c: 103: error_msg ret = ERROR;
[e = _ret . `E367 0 ]
[; ;udpv4.c: 105: udpLength = ETH_GetByteCount();
"105
[e = _udpLength ( _ETH_GetByteCount ..  ]
[; ;udpv4.c: 106: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_t)udpLength & (uint16_t)0x00FF) << 8));
"106
[e = _udpLength | >> & _udpLength -> 65280 `ui -> 8 `i << & _udpLength -> -> 255 `i `ui -> 8 `i ]
[; ;udpv4.c: 107: ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + (int)(((char*)&((udpHeader_t *)1)->length)-1));
"107
[e ( _ETH_Insert (3 , , -> &U _udpLength `*uc -> -> 2 `i `ui + + -> # `S4 `ui -> # `S6 `ui -> -> - -> &U . *U -> -> 1 `i `*S11 2 `*uc * -> -> 1 `i `x -> -> # *U -> &U . *U -> -> 1 `i `*S11 2 `*uc `i `x `i `ui ]
[; ;udpv4.c: 108: udpLength = ((((uint16_t)udpLength & (uint16_t)0xFF00) >> 8) | (((uint16_t)udpLength & (uint16_t)0x00FF) << 8));
"108
[e = _udpLength | >> & _udpLength -> 65280 `ui -> 8 `i << & _udpLength -> -> 255 `i `ui -> 8 `i ]
[; ;udpv4.c: 111: cksm = udpLength + UDP;
"111
[e = _cksm + _udpLength -> . `E226 17 `ui ]
[; ;udpv4.c: 112: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, udpLength + 8, cksm);
"112
[e = _cksm ( _ETH_TxComputeChecksum (3 , , - + -> # `S4 `ui -> # `S6 `ui -> -> 8 `i `ui + _udpLength -> -> 8 `i `ui _cksm ]
[; ;udpv4.c: 115: if (cksm == 0){
"115
[e $ ! == _cksm -> -> 0 `i `ui 30  ]
{
[; ;udpv4.c: 116: cksm = 0xffff;
"116
[e = _cksm -> 65535 `ui ]
"117
}
[e :U 30 ]
[; ;udpv4.c: 117: }
[; ;udpv4.c: 119: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + (int)(((char*)&((udpHeader_t *)1)->checksum)-1));
"119
[e ( _ETH_Insert (3 , , -> &U _cksm `*uc -> -> 2 `i `ui + + -> # `S4 `ui -> # `S6 `ui -> -> - -> &U . *U -> -> 1 `i `*S11 3 `*uc * -> -> 1 `i `x -> -> # *U -> &U . *U -> -> 1 `i `*S11 3 `*uc `i `x `i `ui ]
[; ;udpv4.c: 121: ret = IPV4_Send(udpLength);
"121
[e = _ret ( _IPV4_Send (1 _udpLength ]
[; ;udpv4.c: 123: return ret;
"123
[e ) _ret ]
[e $UE 29  ]
[; ;udpv4.c: 124: }
"124
[e :UE 29 ]
}
"126
[v _UDP_Receive `(E367 ~T0 @X0 1 ef1`ui ]
"127
{
[; ;udpv4.c: 126: error_msg UDP_Receive(uint16_t udpcksm)
[; ;udpv4.c: 127: {
[e :U _UDP_Receive ]
"126
[v _udpcksm `ui ~T0 @X0 1 r1 ]
"127
[f ]
"128
[v _ret `E367 ~T0 @X0 1 a ]
[; ;udpv4.c: 128: error_msg ret = ERROR;
[e = _ret . `E367 0 ]
"129
[v _hptr `*CS26 ~T0 @X0 1 a ]
"130
[v _x `ui ~T0 @X0 1 a ]
[; ;udpv4.c: 129: const udp_handler_t *hptr;
[; ;udpv4.c: 130: uint16_t x;
[; ;udpv4.c: 132: hptr = UDP_CallBackTable;
"132
[e = _hptr &U _UDP_CallBackTable ]
[; ;udpv4.c: 133: ETH_ReadBlock((char *)&udpHeader,sizeof(udpHeader));
"133
[e ( _ETH_ReadBlock (2 , -> -> &U _udpHeader `*uc `*v -> # _udpHeader `ui ]
[; ;udpv4.c: 135: if((udpHeader.checksum == 0) || (udpcksm == 0))
"135
[e $ ! || == . _udpHeader 3 -> -> 0 `i `ui == _udpcksm -> -> 0 `i `ui 32  ]
[; ;udpv4.c: 136: {
"136
{
[; ;udpv4.c: 137: udpHeader.dstPort = ((((uint16_t)udpHeader.dstPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)udpHeader.dstPort & (uint16_t)0x00FF) << 8));
"137
[e = . _udpHeader 1 | >> & . _udpHeader 1 -> 65280 `ui -> 8 `i << & . _udpHeader 1 -> -> 255 `i `ui -> 8 `i ]
[; ;udpv4.c: 138: destPort = ((((uint16_t)udpHeader.srcPort & (uint16_t)0xFF00) >> 8) | (((uint16_t)udpHeader.srcPort & (uint16_t)0x00FF) << 8));
"138
[e = _destPort | >> & . _udpHeader 0 -> 65280 `ui -> 8 `i << & . _udpHeader 0 -> -> 255 `i `ui -> 8 `i ]
[; ;udpv4.c: 139: ret = PORT_NOT_AVAILABLE;
"139
[e = _ret . `E367 13 ]
[; ;udpv4.c: 142: for(x = 0; x < (sizeof(UDP_CallBackTable) / sizeof(*(UDP_CallBackTable)));x++)
"142
{
[e = _x -> -> 0 `i `ui ]
[e $ < _x / -> # _UDP_CallBackTable `ui -> # *U &U _UDP_CallBackTable `ui 33  ]
[e $U 34  ]
"143
[e :U 33 ]
[; ;udpv4.c: 143: {
{
[; ;udpv4.c: 144: if(hptr->portNumber == udpHeader.dstPort)
"144
[e $ ! == . *U _hptr 0 . _udpHeader 1 36  ]
[; ;udpv4.c: 145: {
"145
{
[; ;udpv4.c: 146: hptr->callBack(((((uint16_t)udpHeader.length & (uint16_t)0xFF00) >> 8) | (((uint16_t)udpHeader.length & (uint16_t)0x00FF) << 8)) - sizeof(udpHeader));
"146
[e ( *U . *U _hptr 1 (1 -> - | >> & . _udpHeader 2 -> 65280 `ui -> 8 `i << & . _udpHeader 2 -> -> 255 `i `ui -> 8 `i -> # _udpHeader `ui `i ]
[; ;udpv4.c: 147: ret = SUCCESS;
"147
[e = _ret . `E367 1 ]
[; ;udpv4.c: 148: break;
"148
[e $U 34  ]
"149
}
[e :U 36 ]
[; ;udpv4.c: 149: }
[; ;udpv4.c: 150: hptr ++;
"150
[e ++ _hptr * -> -> 1 `i `x -> -> # *U _hptr `i `x ]
"151
}
"142
[e ++ _x -> -> 1 `i `ui ]
[e $ < _x / -> # _UDP_CallBackTable `ui -> # *U &U _UDP_CallBackTable `ui 33  ]
[e :U 34 ]
"151
}
"152
}
[; ;udpv4.c: 151: }
[; ;udpv4.c: 152: }
[e $U 37  ]
"153
[e :U 32 ]
[; ;udpv4.c: 153: else
[; ;udpv4.c: 154: {
"154
{
[; ;udpv4.c: 155: ret = UDP_CHECKSUM_FAILS;
"155
[e = _ret . `E367 10 ]
"156
}
[e :U 37 ]
[; ;udpv4.c: 156: }
[; ;udpv4.c: 157: return ret;
"157
[e ) _ret ]
[e $UE 31  ]
[; ;udpv4.c: 158: }
"158
[e :UE 31 ]
}
"161
[v _UDP_ReadBlock `(ui ~T0 @X0 1 ef2`*v`ui ]
"162
{
[; ;udpv4.c: 161: uint16_t UDP_ReadBlock(void* data, uint16_t length)
[; ;udpv4.c: 162: {
[e :U _UDP_ReadBlock ]
"161
[v _data `*v ~T0 @X0 1 r1 ]
[v _length `ui ~T0 @X0 1 r2 ]
"162
[f ]
[; ;udpv4.c: 163: return (ETH_ReadBlock(data,length));
"163
[e ) ( _ETH_ReadBlock (2 , _data _length ]
[e $UE 38  ]
[; ;udpv4.c: 164: }
"164
[e :UE 38 ]
}
[v F574 `(uc ~T0 @X0 1 tf ]
"166
[v _UDP_Read8 `TF574 ~T0 @X0 1 e ]
"167
{
[; ;udpv4.c: 166: inline uint8_t UDP_Read8(void)
[; ;udpv4.c: 167: {
[e :U _UDP_Read8 ]
[f ]
[; ;udpv4.c: 168: return (ETH_Read8());
"168
[e ) ( _ETH_Read8 ..  ]
[e $UE 39  ]
[; ;udpv4.c: 169: }
"169
[e :UE 39 ]
}
[v F577 `(ui ~T0 @X0 1 tf ]
"171
[v _UDP_Read16 `TF577 ~T0 @X0 1 e ]
"172
{
[; ;udpv4.c: 171: inline uint16_t UDP_Read16(void)
[; ;udpv4.c: 172: {
[e :U _UDP_Read16 ]
[f ]
[; ;udpv4.c: 173: return (ETH_Read16());
"173
[e ) ( _ETH_Read16 ..  ]
[e $UE 40  ]
[; ;udpv4.c: 174: }
"174
[e :UE 40 ]
}
[v F580 `(ul ~T0 @X0 1 tf ]
"176
[v _UDP_Read32 `TF580 ~T0 @X0 1 e ]
"177
{
[; ;udpv4.c: 176: inline uint32_t UDP_Read32(void)
[; ;udpv4.c: 177: {
[e :U _UDP_Read32 ]
[f ]
[; ;udpv4.c: 178: return (ETH_Read32());
"178
[e ) ( _ETH_Read32 ..  ]
[e $UE 41  ]
[; ;udpv4.c: 179: }
"179
[e :UE 41 ]
}
[v F561 `(v ~T0 @X0 1 tf1`uc ]
"182
[v _UDP_Write8 `TF561 ~T0 @X0 1 e ]
"183
{
[; ;udpv4.c: 182: inline void UDP_Write8(uint8_t data)
[; ;udpv4.c: 183: {
[e :U _UDP_Write8 ]
"182
[v _data `uc ~T0 @X0 1 r1 ]
"183
[f ]
[; ;udpv4.c: 184: ETH_Write8(data);
"184
[e ( _ETH_Write8 (1 _data ]
[; ;udpv4.c: 185: }
"185
[e :UE 42 ]
}
[v F564 `(v ~T0 @X0 1 tf1`ui ]
"187
[v _UDP_Write16 `TF564 ~T0 @X0 1 e ]
"188
{
[; ;udpv4.c: 187: inline void UDP_Write16(uint16_t data)
[; ;udpv4.c: 188: {
[e :U _UDP_Write16 ]
"187
[v _data `ui ~T0 @X0 1 r1 ]
"188
[f ]
[; ;udpv4.c: 189: ETH_Write16(data);
"189
[e ( _ETH_Write16 (1 _data ]
[; ;udpv4.c: 191: }
"191
[e :UE 43 ]
}
[v F567 `(v ~T0 @X0 1 tf1`ul ]
"193
[v _UDP_Write32 `TF567 ~T0 @X0 1 e ]
"194
{
[; ;udpv4.c: 193: inline void UDP_Write32(uint32_t data)
[; ;udpv4.c: 194: {
[e :U _UDP_Write32 ]
"193
[v _data `ul ~T0 @X0 1 r1 ]
"194
[f ]
[; ;udpv4.c: 195: ETH_Write32(data);
"195
[e ( _ETH_Write32 (1 _data ]
[; ;udpv4.c: 196: }
"196
[e :UE 44 ]
}
[v F571 `(v ~T0 @X0 1 tf2`*v`ui ]
"198
[v _UDP_WriteBlock `TF571 ~T0 @X0 1 e ]
"199
{
[; ;udpv4.c: 198: inline void UDP_WriteBlock(void* data, uint16_t length)
[; ;udpv4.c: 199: {
[e :U _UDP_WriteBlock ]
"198
[v _data `*v ~T0 @X0 1 r1 ]
[v _length `ui ~T0 @X0 1 r2 ]
"199
[f ]
[; ;udpv4.c: 200: ETH_WriteBlock(data,length);
"200
[e ( _ETH_WriteBlock (2 , _data _length ]
[; ;udpv4.c: 201: }
"201
[e :UE 45 ]
}
"203
[v _udp_test `(v ~T0 @X0 1 ef1`i ]
"204
{
[; ;udpv4.c: 203: void udp_test(int len)
[; ;udpv4.c: 204: {
[e :U _udp_test ]
"203
[v _len `i ~T0 @X0 1 r1 ]
"204
[f ]
[; ;udpv4.c: 205: while(len--)
"205
[e $U 47  ]
[e :U 48 ]
[; ;udpv4.c: 206: putch(ETH_Read8());
"206
[e ( _putch (1 ( _ETH_Read8 ..  ]
[e :U 47 ]
"205
[e $ != -- _len -> 1 `i -> 0 `i 48  ]
[e :U 49 ]
[; ;udpv4.c: 207: }
"207
[e :UE 46 ]
}
"209
[v _UDP_GetDestPort `(ui ~T0 @X0 1 ef ]
"210
{
[; ;udpv4.c: 209: uint16_t UDP_GetDestPort(void)
[; ;udpv4.c: 210: {
[e :U _UDP_GetDestPort ]
[f ]
[; ;udpv4.c: 211: return(destPort);
"211
[e ) _destPort ]
[e $UE 50  ]
[; ;udpv4.c: 212: }
"212
[e :UE 50 ]
}
"214
[v _UDP_GetDestIP `(ul ~T0 @X0 1 ef ]
"215
{
[; ;udpv4.c: 214: uint32_t UDP_GetDestIP(void)
[; ;udpv4.c: 215: {
[e :U _UDP_GetDestIP ]
[f ]
[; ;udpv4.c: 216: return (ipv4Header.srcIpAddress);
"216
[e ) . _ipv4Header 14 ]
[e $UE 51  ]
[; ;udpv4.c: 217: }
"217
[e :UE 51 ]
}
